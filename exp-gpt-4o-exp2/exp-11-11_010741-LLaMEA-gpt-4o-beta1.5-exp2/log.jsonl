{"id": "14e0edf0-259b-4cf3-af26-fdfd61852ab4", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Mutation\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) for Best Solution Every 100 Evaluations\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = 0.01 * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "A hybrid Differential Evolution with Adaptive Crossover Probability and Local Search that balances global exploration and local exploitation.", "configspace": "", "generation": 0, "fitness": 0.197824302920406, "feedback": "The algorithm HybridDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.18.", "error": "", "parent_id": null, "metadata": {"aucs": [0.3893998204103253, 0.40430802771051966, 0.4035383015939886, 0.42539317584805925, 0.4082416323385665, 0.42147136005007846, 0.41464176885983484, 0.39851778666916093, 0.4039631465499238, 0.14875604631365003, 0.14739444288095238, 0.14511787664446296, 0.13201007249961527, 0.1306287667467808, 0.16181039063406966, 0.14956633467468727, 0.15680541480665, 0.14544875320688933, 0.08989761528473683, 0.09913098087820049, 0.09729874069200728, 0.09923901266313861, 0.09499331460211125, 0.10199876101467542, 0.10951920326205344, 0.09967146628460832, 0.09315922004862365, 0.09043298680127043, 0.08074613111091022, 0.075597924503648, 0.09784660451409577, 0.09545621956469963, 0.10636276062694472, 0.08419246855703733, 0.0842661496397521, 0.08581762156945771, 0.9064184960849703, 0.9090087057040481, 0.9225574221047714, 0.923602414211069, 0.9474949218209272, 0.8961154151296715, 0.9023466465165811, 0.9679042283267547, 0.8869326532651336, 0.18680920245350763, 0.16367720667972385, 0.18600987608250807, 0.1754721398400254, 0.17163750792079613, 0.17488812154534406, 0.19038893621201325, 0.18364763273859785, 0.19688463823374724, 0.24830355680029725, 0.26610529733075483, 0.25413189661584235, 0.4135281194055802, 0.2530405769451478, 0.2563086576247474, 0.2534716537112496, 0.2562567085801626, 0.2605416952463918, 0.110331521773679, 0.11680338570093696, 0.13063271188816472, 0.13787884779900428, 0.10719281198438968, 0.10542882907205697, 0.11470263836042505, 0.11179902508258488, 0.1372751085722943, 0.12379267699642038, 0.10390372075537757, 0.14039426738777983, 0.11793779494031209, 0.11305673422310525, 0.1380956623318047, 0.09712951837516903, 0.09553942705646845, 0.09922170728762503, 0.03227031273460712, 0.044320805032904365, 0.008908858531113895, 0.011057151800104137, 0.03259266720967702, 0.039972924936415244, 0.03563446863849018, 0.030530125670303332, 0.01855761660444588, 0.12022227854133893, 0.13881185488968495, 0.1231365136457161, 0.11884922518980967, 0.1437800848889459, 0.10846895104344367, 0.15772472857141817, 0.1802150675344969, 0.16622810760634343, 9.999999999998899e-05, 9.999999999998899e-05, 0.005689179034749969, 9.999999999998899e-05, 9.999999999998899e-05, 0.001737987013888831, 9.999999999998899e-05, 0.0007309848811403175, 9.999999999998899e-05, 0.07504822172341796, 0.09329434823392635, 0.07368466267498153, 0.07866082213274972, 0.08159282588628958, 0.08898724081704001, 0.08976964942033339, 0.0866861913608944, 0.08267740914789734, 0.34228098064493984, 0.3468124948599346, 0.3351376803758581, 0.3467135598266814, 0.3604759533900328, 0.33912786958386165, 0.33027083681833247, 0.3413397159564495, 0.33629623534085074, 0.08273273059910702, 0.09181770536190725, 0.0825267025602281, 0.1008875174260151, 0.09713928627940382, 0.08346446162373444, 0.07149432090246244, 0.06926839742099344, 0.09595633772357504, 0.16172996211213087, 0.17934577947183483, 0.14725622134613026, 0.23831361216511282, 0.2673347094505377, 0.138892811130368, 0.1636017494275802, 0.15239288543078788, 0.1683280724660875, 0.2506168489607108, 0.22664975716841196, 0.2329514433654153, 0.20204118006181648, 0.22490128165998813, 0.21817659006501988, 0.22964798378067797, 0.2572310138841579, 0.23784187728732453, 0.16086456950344796, 0.17103689064705907, 0.16486421150956976, 0.16837298835162984, 0.16532652739420972, 0.16938210212180949, 0.20480137596062942, 0.18516329511384688, 0.1730466142793261, 0.18419442957032028, 0.18837475652894542, 0.18626178759573508, 0.19680645500807492, 0.1962730242010461, 0.16987676283903197, 0.17661742551091408, 0.1672988571796452, 0.17500415615249842, 0.18194192934993392, 0.19620337417545708, 0.19179243115251943, 0.177650181181779, 0.19151448063065257, 0.17900631255901156, 0.1782638212910298, 0.227196948773836, 0.19606477609784334, 0.31649838713878553, 0.17503684515998508, 0.24696626758495066, 0.2836780126874181, 0.17521582790211465, 0.16093322563957668, 0.2537224293850857, 0.22105191930981394, 0.15052720108781248, 0.29985386011796467, 0.19144052521365984, 0.280710926716392, 0.2987568571544015, 0.16937165240043217, 0.25319158575334455, 0.19448418257578415, 0.38301123440306095, 0.5107166164899353, 0.17562197954915704, 0.19157994992930816, 0.18859582417952736, 0.17522953531209218, 0.1841666345308215, 0.20557488835602722, 0.18555918768710444, 0.17092529798492417, 0.1917936211763719, 0.0769916189505544, 0.06547825387311224, 0.07035917908459999, 0.06131121239893089, 0.07669110598808371, 0.07325245817245374, 0.06473028647653267, 0.07250840745512865, 0.06263310020346358]}, "mutation_prompt": null}
{"id": "5b5889b9-6127-4211-9537-44656d9eedc2", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Mutation\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) for Best Solution Every 100 Evaluations\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = 0.01 * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "A hybrid Differential Evolution with Adaptive Crossover Probability and Local Search that balances global exploration and local exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14e0edf0-259b-4cf3-af26-fdfd61852ab4", "metadata": {"aucs": [0.3893998204103253, 0.40430802771051966, 0.4035383015939886, 0.42539317584805925, 0.4082416323385665, 0.42147136005007846, 0.41464176885983484, 0.39851778666916093, 0.4039631465499238, 0.14875604631365003, 0.14739444288095238, 0.14511787664446296, 0.13201007249961527, 0.1306287667467808, 0.16181039063406966, 0.14956633467468727, 0.15680541480665, 0.14544875320688933, 0.08989761528473683, 0.09913098087820049, 0.09729874069200728, 0.09923901266313861, 0.09499331460211125, 0.10199876101467542, 0.10951920326205344, 0.09967146628460832, 0.09315922004862365, 0.09043298680127043, 0.08074613111091022, 0.075597924503648, 0.09784660451409577, 0.09545621956469963, 0.10636276062694472, 0.08419246855703733, 0.0842661496397521, 0.08581762156945771, 0.9064184960849703, 0.9090087057040481, 0.9225574221047714, 0.923602414211069, 0.9474949218209272, 0.8961154151296715, 0.9023466465165811, 0.9679042283267547, 0.8869326532651336, 0.18680920245350763, 0.16367720667972385, 0.18600987608250807, 0.1754721398400254, 0.17163750792079613, 0.17488812154534406, 0.19038893621201325, 0.18364763273859785, 0.19688463823374724, 0.24830355680029725, 0.26610529733075483, 0.25413189661584235, 0.4135281194055802, 0.2530405769451478, 0.2563086576247474, 0.2534716537112496, 0.2562567085801626, 0.2605416952463918, 0.110331521773679, 0.11680338570093696, 0.13063271188816472, 0.13787884779900428, 0.10719281198438968, 0.10542882907205697, 0.11470263836042505, 0.11179902508258488, 0.1372751085722943, 0.12379267699642038, 0.10390372075537757, 0.14039426738777983, 0.11793779494031209, 0.11305673422310525, 0.1380956623318047, 0.09712951837516903, 0.09553942705646845, 0.09922170728762503, 0.03227031273460712, 0.044320805032904365, 0.008908858531113895, 0.011057151800104137, 0.03259266720967702, 0.039972924936415244, 0.03563446863849018, 0.030530125670303332, 0.01855761660444588, 0.12022227854133893, 0.13881185488968495, 0.1231365136457161, 0.11884922518980967, 0.1437800848889459, 0.10846895104344367, 0.15772472857141817, 0.1802150675344969, 0.16622810760634343, 9.999999999998899e-05, 9.999999999998899e-05, 0.005689179034749969, 9.999999999998899e-05, 9.999999999998899e-05, 0.001737987013888831, 9.999999999998899e-05, 0.0007309848811403175, 9.999999999998899e-05, 0.07504822172341796, 0.09329434823392635, 0.07368466267498153, 0.07866082213274972, 0.08159282588628958, 0.08898724081704001, 0.08976964942033339, 0.0866861913608944, 0.08267740914789734, 0.34228098064493984, 0.3468124948599346, 0.3351376803758581, 0.3467135598266814, 0.3604759533900328, 0.33912786958386165, 0.33027083681833247, 0.3413397159564495, 0.33629623534085074, 0.08273273059910702, 0.09181770536190725, 0.0825267025602281, 0.1008875174260151, 0.09713928627940382, 0.08346446162373444, 0.07149432090246244, 0.06926839742099344, 0.09595633772357504, 0.16172996211213087, 0.17934577947183483, 0.14725622134613026, 0.23831361216511282, 0.2673347094505377, 0.138892811130368, 0.1636017494275802, 0.15239288543078788, 0.1683280724660875, 0.2506168489607108, 0.22664975716841196, 0.2329514433654153, 0.20204118006181648, 0.22490128165998813, 0.21817659006501988, 0.22964798378067797, 0.2572310138841579, 0.23784187728732453, 0.16086456950344796, 0.17103689064705907, 0.16486421150956976, 0.16837298835162984, 0.16532652739420972, 0.16938210212180949, 0.20480137596062942, 0.18516329511384688, 0.1730466142793261, 0.18419442957032028, 0.18837475652894542, 0.18626178759573508, 0.19680645500807492, 0.1962730242010461, 0.16987676283903197, 0.17661742551091408, 0.1672988571796452, 0.17500415615249842, 0.18194192934993392, 0.19620337417545708, 0.19179243115251943, 0.177650181181779, 0.19151448063065257, 0.17900631255901156, 0.1782638212910298, 0.227196948773836, 0.19606477609784334, 0.31649838713878553, 0.17503684515998508, 0.24696626758495066, 0.2836780126874181, 0.17521582790211465, 0.16093322563957668, 0.2537224293850857, 0.22105191930981394, 0.15052720108781248, 0.29985386011796467, 0.19144052521365984, 0.280710926716392, 0.2987568571544015, 0.16937165240043217, 0.25319158575334455, 0.19448418257578415, 0.38301123440306095, 0.5107166164899353, 0.17562197954915704, 0.19157994992930816, 0.18859582417952736, 0.17522953531209218, 0.1841666345308215, 0.20557488835602722, 0.18555918768710444, 0.17092529798492417, 0.1917936211763719, 0.0769916189505544, 0.06547825387311224, 0.07035917908459999, 0.06131121239893089, 0.07669110598808371, 0.07325245817245374, 0.06473028647653267, 0.07250840745512865, 0.06263310020346358]}, "mutation_prompt": null}
{"id": "d65f9bbd-8f75-4cd0-be9d-13966e2d144c", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Mutation\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) for Best Solution Every 100 Evaluations\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = 0.01 * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "A hybrid Differential Evolution with Adaptive Crossover Probability and Local Search that balances global exploration and local exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14e0edf0-259b-4cf3-af26-fdfd61852ab4", "metadata": {"aucs": [0.3893998204103253, 0.40430802771051966, 0.4035383015939886, 0.42539317584805925, 0.4082416323385665, 0.42147136005007846, 0.41464176885983484, 0.39851778666916093, 0.4039631465499238, 0.14875604631365003, 0.14739444288095238, 0.14511787664446296, 0.13201007249961527, 0.1306287667467808, 0.16181039063406966, 0.14956633467468727, 0.15680541480665, 0.14544875320688933, 0.08989761528473683, 0.09913098087820049, 0.09729874069200728, 0.09923901266313861, 0.09499331460211125, 0.10199876101467542, 0.10951920326205344, 0.09967146628460832, 0.09315922004862365, 0.09043298680127043, 0.08074613111091022, 0.075597924503648, 0.09784660451409577, 0.09545621956469963, 0.10636276062694472, 0.08419246855703733, 0.0842661496397521, 0.08581762156945771, 0.9064184960849703, 0.9090087057040481, 0.9225574221047714, 0.923602414211069, 0.9474949218209272, 0.8961154151296715, 0.9023466465165811, 0.9679042283267547, 0.8869326532651336, 0.18680920245350763, 0.16367720667972385, 0.18600987608250807, 0.1754721398400254, 0.17163750792079613, 0.17488812154534406, 0.19038893621201325, 0.18364763273859785, 0.19688463823374724, 0.24830355680029725, 0.26610529733075483, 0.25413189661584235, 0.4135281194055802, 0.2530405769451478, 0.2563086576247474, 0.2534716537112496, 0.2562567085801626, 0.2605416952463918, 0.110331521773679, 0.11680338570093696, 0.13063271188816472, 0.13787884779900428, 0.10719281198438968, 0.10542882907205697, 0.11470263836042505, 0.11179902508258488, 0.1372751085722943, 0.12379267699642038, 0.10390372075537757, 0.14039426738777983, 0.11793779494031209, 0.11305673422310525, 0.1380956623318047, 0.09712951837516903, 0.09553942705646845, 0.09922170728762503, 0.03227031273460712, 0.044320805032904365, 0.008908858531113895, 0.011057151800104137, 0.03259266720967702, 0.039972924936415244, 0.03563446863849018, 0.030530125670303332, 0.01855761660444588, 0.12022227854133893, 0.13881185488968495, 0.1231365136457161, 0.11884922518980967, 0.1437800848889459, 0.10846895104344367, 0.15772472857141817, 0.1802150675344969, 0.16622810760634343, 9.999999999998899e-05, 9.999999999998899e-05, 0.005689179034749969, 9.999999999998899e-05, 9.999999999998899e-05, 0.001737987013888831, 9.999999999998899e-05, 0.0007309848811403175, 9.999999999998899e-05, 0.07504822172341796, 0.09329434823392635, 0.07368466267498153, 0.07866082213274972, 0.08159282588628958, 0.08898724081704001, 0.08976964942033339, 0.0866861913608944, 0.08267740914789734, 0.34228098064493984, 0.3468124948599346, 0.3351376803758581, 0.3467135598266814, 0.3604759533900328, 0.33912786958386165, 0.33027083681833247, 0.3413397159564495, 0.33629623534085074, 0.08273273059910702, 0.09181770536190725, 0.0825267025602281, 0.1008875174260151, 0.09713928627940382, 0.08346446162373444, 0.07149432090246244, 0.06926839742099344, 0.09595633772357504, 0.16172996211213087, 0.17934577947183483, 0.14725622134613026, 0.23831361216511282, 0.2673347094505377, 0.138892811130368, 0.1636017494275802, 0.15239288543078788, 0.1683280724660875, 0.2506168489607108, 0.22664975716841196, 0.2329514433654153, 0.20204118006181648, 0.22490128165998813, 0.21817659006501988, 0.22964798378067797, 0.2572310138841579, 0.23784187728732453, 0.16086456950344796, 0.17103689064705907, 0.16486421150956976, 0.16837298835162984, 0.16532652739420972, 0.16938210212180949, 0.20480137596062942, 0.18516329511384688, 0.1730466142793261, 0.18419442957032028, 0.18837475652894542, 0.18626178759573508, 0.19680645500807492, 0.1962730242010461, 0.16987676283903197, 0.17661742551091408, 0.1672988571796452, 0.17500415615249842, 0.18194192934993392, 0.19620337417545708, 0.19179243115251943, 0.177650181181779, 0.19151448063065257, 0.17900631255901156, 0.1782638212910298, 0.227196948773836, 0.19606477609784334, 0.31649838713878553, 0.17503684515998508, 0.24696626758495066, 0.2836780126874181, 0.17521582790211465, 0.16093322563957668, 0.2537224293850857, 0.22105191930981394, 0.15052720108781248, 0.29985386011796467, 0.19144052521365984, 0.280710926716392, 0.2987568571544015, 0.16937165240043217, 0.25319158575334455, 0.19448418257578415, 0.38301123440306095, 0.5107166164899353, 0.17562197954915704, 0.19157994992930816, 0.18859582417952736, 0.17522953531209218, 0.1841666345308215, 0.20557488835602722, 0.18555918768710444, 0.17092529798492417, 0.1917936211763719, 0.0769916189505544, 0.06547825387311224, 0.07035917908459999, 0.06131121239893089, 0.07669110598808371, 0.07325245817245374, 0.06473028647653267, 0.07250840745512865, 0.06263310020346358]}, "mutation_prompt": null}
{"id": "85a60eb0-8f83-4bed-a9eb-ad9706233fb7", "solution": "import numpy as np\n\nclass HybridDEImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.9  # Slightly increased to enhance exploration\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Mutation\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.75 * self.budget else 0.9  # Changed threshold for CR adaptation\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Enhanced Local Search (Dynamic Step Size) \n                if evals % 80 == 0:  # Adjusted frequency of local search\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = 0.02 * (self.upper_bound - self.lower_bound)  # Adjusted step size\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDEImproved", "description": "An enhanced hybrid Differential Evolution with strategic adaptive parameters and enhanced local search for improved convergence speed.", "configspace": "", "generation": 3, "fitness": 0.184073795334324, "feedback": "The algorithm HybridDEImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.18.", "error": "", "parent_id": "14e0edf0-259b-4cf3-af26-fdfd61852ab4", "metadata": {"aucs": [0.35985333666532593, 0.34849695960239524, 0.34611713653098586, 0.37073541856738146, 0.3710649277072041, 0.4016174045395545, 0.369235318685871, 0.3806945330323055, 0.3777272654427599, 0.12154581574101886, 0.11530556913988643, 0.10549377397252813, 0.10668079259396057, 0.1018802649865358, 0.10543779670211406, 0.11006278665373526, 0.1291676783389828, 0.1117795507328414, 0.08485761297300964, 0.07963726730753329, 0.09743907955687225, 0.09209280840375855, 0.08660107223619729, 0.08897300775509598, 0.08276190562482022, 0.0957115019971303, 0.09460130993143523, 0.07127587527168111, 0.06933882238197253, 0.07068930577169485, 0.07167898885066992, 0.06639961482092638, 0.08534802055972868, 0.07373021851827488, 0.07586301499326364, 0.06757415065050465, 0.8853524397591256, 0.8812629946297459, 0.9175101367971483, 0.9519413932423568, 0.9044080162273587, 0.9174377568683781, 0.9366726922635604, 0.8613885785668712, 0.9071361388641802, 0.19770227627723236, 0.15880765244707984, 0.14522896623531778, 0.16126143260494774, 0.166719658793818, 0.15419251430230707, 0.16743668441744974, 0.16176364211973482, 0.21033867267530582, 0.23818488866967003, 0.23597717025209108, 0.20395618687080086, 0.2383426040211717, 0.22984821532729893, 0.226522757674807, 0.24225964439783843, 0.22640398167720688, 0.2167448707130698, 0.1166860981042922, 0.13360323603538582, 0.10066256906018012, 0.09795131899131482, 0.12623314639197525, 0.09620986978390522, 0.1073119220649218, 0.08377844013605196, 0.09870529631589964, 0.12582974221724053, 0.13434725910593193, 0.12716981976600583, 0.10059884903725891, 0.11330031128158258, 0.10647903587064089, 0.10772477445188311, 0.1057715290170308, 0.09930567862640416, 0.009147506299795327, 0.004535947144189367, 0.00753571147701293, 0.0004157574883060233, 9.999999999998899e-05, 0.015841440861343425, 9.999999999998899e-05, 0.0037715915867991834, 0.0016085839615705977, 0.10029986313465633, 0.1001801854944433, 0.11099458673280627, 0.10665108327715644, 0.08432547298742299, 0.10302065369871638, 0.09170181702678559, 0.12071681035284221, 0.12457337757837228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07711136158498233, 0.06330086473766072, 0.06932299140302456, 0.06105788788399036, 0.0799603281147111, 0.07167782631616026, 0.06768708157668224, 0.06505014373898865, 0.06183453725824961, 0.34012810895884626, 0.31842585989752326, 0.3234657003619834, 0.34846590425678714, 0.32076658280826353, 0.33003366837186376, 0.3340707042662886, 0.327478913177927, 0.2975499744728701, 0.08014007661052125, 0.07320479314742312, 0.08351902974303316, 0.07038353451166457, 0.07747882081215518, 0.08614231430952601, 0.07685212335534597, 0.07320711027912219, 0.08361139008342888, 0.19831918164301265, 0.1332348720808908, 0.15455487702902426, 0.16091148301584068, 0.19809666660731395, 0.19336773520434658, 0.18687335246884373, 0.16126012623600072, 0.18123330883335298, 0.21112528132985275, 0.21748404132301524, 0.23340961305168562, 0.19526335237098535, 0.194827708860554, 0.21183069662107679, 0.21439253944431158, 0.21749432046056738, 0.21881477075734457, 0.1480006260671647, 0.15598827112199432, 0.16639076291869537, 0.1514240449046711, 0.1419236843479612, 0.16047580175373855, 0.1614629537596346, 0.1663791145122464, 0.15283279694492846, 0.19306298007858114, 0.17395130383826984, 0.19765217314905204, 0.18071166827689178, 0.18266131937004926, 0.1709222606611318, 0.16211192674055708, 0.1570385812713041, 0.18454322839381132, 0.18266406642231536, 0.16783861851990078, 0.18455306437669472, 0.16993904038990626, 0.17208295567888743, 0.1724765777534809, 0.1640585936346297, 0.17564608296691786, 0.17683506484551248, 0.35746115374896437, 0.43873437113903324, 0.30475893043124236, 0.17891590109564148, 0.2448709099041626, 0.3961065927708094, 0.1488148844074103, 0.1752320151522475, 0.1677860598440578, 0.29060270764338203, 0.21510550447196997, 0.18868291590521502, 0.25966298263871446, 0.17975240112371316, 0.27724197789950544, 0.19381221364790302, 0.38390713156843936, 0.27920987410911047, 0.19084035120953613, 0.19107523971733986, 0.17836594486096768, 0.18436232240644324, 0.191689557999978, 0.1810572308609084, 0.18481432302768763, 0.19171741695753264, 0.1795368292455054, 0.06021219065964556, 0.06599145224328362, 0.0678231727183376, 0.061545591988691695, 0.062449226256515944, 0.06686170650892653, 0.07252651003205302, 0.06696728014500264, 0.06303463650218055]}, "mutation_prompt": null}
{"id": "dac39878-5f2b-4cca-8a8f-48752712c337", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Mutation\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) for Best Solution Every 100 Evaluations\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = 0.01 * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "A hybrid Differential Evolution with Adaptive Crossover Probability and Local Search that balances global exploration and local exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14e0edf0-259b-4cf3-af26-fdfd61852ab4", "metadata": {"aucs": [0.3893998204103253, 0.40430802771051966, 0.4035383015939886, 0.42539317584805925, 0.4082416323385665, 0.42147136005007846, 0.41464176885983484, 0.39851778666916093, 0.4039631465499238, 0.14875604631365003, 0.14739444288095238, 0.14511787664446296, 0.13201007249961527, 0.1306287667467808, 0.16181039063406966, 0.14956633467468727, 0.15680541480665, 0.14544875320688933, 0.08989761528473683, 0.09913098087820049, 0.09729874069200728, 0.09923901266313861, 0.09499331460211125, 0.10199876101467542, 0.10951920326205344, 0.09967146628460832, 0.09315922004862365, 0.09043298680127043, 0.08074613111091022, 0.075597924503648, 0.09784660451409577, 0.09545621956469963, 0.10636276062694472, 0.08419246855703733, 0.0842661496397521, 0.08581762156945771, 0.9064184960849703, 0.9090087057040481, 0.9225574221047714, 0.923602414211069, 0.9474949218209272, 0.8961154151296715, 0.9023466465165811, 0.9679042283267547, 0.8869326532651336, 0.18680920245350763, 0.16367720667972385, 0.18600987608250807, 0.1754721398400254, 0.17163750792079613, 0.17488812154534406, 0.19038893621201325, 0.18364763273859785, 0.19688463823374724, 0.24830355680029725, 0.26610529733075483, 0.25413189661584235, 0.4135281194055802, 0.2530405769451478, 0.2563086576247474, 0.2534716537112496, 0.2562567085801626, 0.2605416952463918, 0.110331521773679, 0.11680338570093696, 0.13063271188816472, 0.13787884779900428, 0.10719281198438968, 0.10542882907205697, 0.11470263836042505, 0.11179902508258488, 0.1372751085722943, 0.12379267699642038, 0.10390372075537757, 0.14039426738777983, 0.11793779494031209, 0.11305673422310525, 0.1380956623318047, 0.09712951837516903, 0.09553942705646845, 0.09922170728762503, 0.03227031273460712, 0.044320805032904365, 0.008908858531113895, 0.011057151800104137, 0.03259266720967702, 0.039972924936415244, 0.03563446863849018, 0.030530125670303332, 0.01855761660444588, 0.12022227854133893, 0.13881185488968495, 0.1231365136457161, 0.11884922518980967, 0.1437800848889459, 0.10846895104344367, 0.15772472857141817, 0.1802150675344969, 0.16622810760634343, 9.999999999998899e-05, 9.999999999998899e-05, 0.005689179034749969, 9.999999999998899e-05, 9.999999999998899e-05, 0.001737987013888831, 9.999999999998899e-05, 0.0007309848811403175, 9.999999999998899e-05, 0.07504822172341796, 0.09329434823392635, 0.07368466267498153, 0.07866082213274972, 0.08159282588628958, 0.08898724081704001, 0.08976964942033339, 0.0866861913608944, 0.08267740914789734, 0.34228098064493984, 0.3468124948599346, 0.3351376803758581, 0.3467135598266814, 0.3604759533900328, 0.33912786958386165, 0.33027083681833247, 0.3413397159564495, 0.33629623534085074, 0.08273273059910702, 0.09181770536190725, 0.0825267025602281, 0.1008875174260151, 0.09713928627940382, 0.08346446162373444, 0.07149432090246244, 0.06926839742099344, 0.09595633772357504, 0.16172996211213087, 0.17934577947183483, 0.14725622134613026, 0.23831361216511282, 0.2673347094505377, 0.138892811130368, 0.1636017494275802, 0.15239288543078788, 0.1683280724660875, 0.2506168489607108, 0.22664975716841196, 0.2329514433654153, 0.20204118006181648, 0.22490128165998813, 0.21817659006501988, 0.22964798378067797, 0.2572310138841579, 0.23784187728732453, 0.16086456950344796, 0.17103689064705907, 0.16486421150956976, 0.16837298835162984, 0.16532652739420972, 0.16938210212180949, 0.20480137596062942, 0.18516329511384688, 0.1730466142793261, 0.18419442957032028, 0.18837475652894542, 0.18626178759573508, 0.19680645500807492, 0.1962730242010461, 0.16987676283903197, 0.17661742551091408, 0.1672988571796452, 0.17500415615249842, 0.18194192934993392, 0.19620337417545708, 0.19179243115251943, 0.177650181181779, 0.19151448063065257, 0.17900631255901156, 0.1782638212910298, 0.227196948773836, 0.19606477609784334, 0.31649838713878553, 0.17503684515998508, 0.24696626758495066, 0.2836780126874181, 0.17521582790211465, 0.16093322563957668, 0.2537224293850857, 0.22105191930981394, 0.15052720108781248, 0.29985386011796467, 0.19144052521365984, 0.280710926716392, 0.2987568571544015, 0.16937165240043217, 0.25319158575334455, 0.19448418257578415, 0.38301123440306095, 0.5107166164899353, 0.17562197954915704, 0.19157994992930816, 0.18859582417952736, 0.17522953531209218, 0.1841666345308215, 0.20557488835602722, 0.18555918768710444, 0.17092529798492417, 0.1917936211763719, 0.0769916189505544, 0.06547825387311224, 0.07035917908459999, 0.06131121239893089, 0.07669110598808371, 0.07325245817245374, 0.06473028647653267, 0.07250840745512865, 0.06263310020346358]}, "mutation_prompt": null}
{"id": "02fd1f49-72da-49c2-a178-ebfeb40c41d1", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Mutation\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) for Best Solution Every 100 Evaluations\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = 0.01 * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "A hybrid Differential Evolution with Adaptive Crossover Probability and Local Search that balances global exploration and local exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14e0edf0-259b-4cf3-af26-fdfd61852ab4", "metadata": {"aucs": [0.3893998204103253, 0.40430802771051966, 0.4035383015939886, 0.42539317584805925, 0.4082416323385665, 0.42147136005007846, 0.41464176885983484, 0.39851778666916093, 0.4039631465499238, 0.14875604631365003, 0.14739444288095238, 0.14511787664446296, 0.13201007249961527, 0.1306287667467808, 0.16181039063406966, 0.14956633467468727, 0.15680541480665, 0.14544875320688933, 0.08989761528473683, 0.09913098087820049, 0.09729874069200728, 0.09923901266313861, 0.09499331460211125, 0.10199876101467542, 0.10951920326205344, 0.09967146628460832, 0.09315922004862365, 0.09043298680127043, 0.08074613111091022, 0.075597924503648, 0.09784660451409577, 0.09545621956469963, 0.10636276062694472, 0.08419246855703733, 0.0842661496397521, 0.08581762156945771, 0.9064184960849703, 0.9090087057040481, 0.9225574221047714, 0.923602414211069, 0.9474949218209272, 0.8961154151296715, 0.9023466465165811, 0.9679042283267547, 0.8869326532651336, 0.18680920245350763, 0.16367720667972385, 0.18600987608250807, 0.1754721398400254, 0.17163750792079613, 0.17488812154534406, 0.19038893621201325, 0.18364763273859785, 0.19688463823374724, 0.24830355680029725, 0.26610529733075483, 0.25413189661584235, 0.4135281194055802, 0.2530405769451478, 0.2563086576247474, 0.2534716537112496, 0.2562567085801626, 0.2605416952463918, 0.110331521773679, 0.11680338570093696, 0.13063271188816472, 0.13787884779900428, 0.10719281198438968, 0.10542882907205697, 0.11470263836042505, 0.11179902508258488, 0.1372751085722943, 0.12379267699642038, 0.10390372075537757, 0.14039426738777983, 0.11793779494031209, 0.11305673422310525, 0.1380956623318047, 0.09712951837516903, 0.09553942705646845, 0.09922170728762503, 0.03227031273460712, 0.044320805032904365, 0.008908858531113895, 0.011057151800104137, 0.03259266720967702, 0.039972924936415244, 0.03563446863849018, 0.030530125670303332, 0.01855761660444588, 0.12022227854133893, 0.13881185488968495, 0.1231365136457161, 0.11884922518980967, 0.1437800848889459, 0.10846895104344367, 0.15772472857141817, 0.1802150675344969, 0.16622810760634343, 9.999999999998899e-05, 9.999999999998899e-05, 0.005689179034749969, 9.999999999998899e-05, 9.999999999998899e-05, 0.001737987013888831, 9.999999999998899e-05, 0.0007309848811403175, 9.999999999998899e-05, 0.07504822172341796, 0.09329434823392635, 0.07368466267498153, 0.07866082213274972, 0.08159282588628958, 0.08898724081704001, 0.08976964942033339, 0.0866861913608944, 0.08267740914789734, 0.34228098064493984, 0.3468124948599346, 0.3351376803758581, 0.3467135598266814, 0.3604759533900328, 0.33912786958386165, 0.33027083681833247, 0.3413397159564495, 0.33629623534085074, 0.08273273059910702, 0.09181770536190725, 0.0825267025602281, 0.1008875174260151, 0.09713928627940382, 0.08346446162373444, 0.07149432090246244, 0.06926839742099344, 0.09595633772357504, 0.16172996211213087, 0.17934577947183483, 0.14725622134613026, 0.23831361216511282, 0.2673347094505377, 0.138892811130368, 0.1636017494275802, 0.15239288543078788, 0.1683280724660875, 0.2506168489607108, 0.22664975716841196, 0.2329514433654153, 0.20204118006181648, 0.22490128165998813, 0.21817659006501988, 0.22964798378067797, 0.2572310138841579, 0.23784187728732453, 0.16086456950344796, 0.17103689064705907, 0.16486421150956976, 0.16837298835162984, 0.16532652739420972, 0.16938210212180949, 0.20480137596062942, 0.18516329511384688, 0.1730466142793261, 0.18419442957032028, 0.18837475652894542, 0.18626178759573508, 0.19680645500807492, 0.1962730242010461, 0.16987676283903197, 0.17661742551091408, 0.1672988571796452, 0.17500415615249842, 0.18194192934993392, 0.19620337417545708, 0.19179243115251943, 0.177650181181779, 0.19151448063065257, 0.17900631255901156, 0.1782638212910298, 0.227196948773836, 0.19606477609784334, 0.31649838713878553, 0.17503684515998508, 0.24696626758495066, 0.2836780126874181, 0.17521582790211465, 0.16093322563957668, 0.2537224293850857, 0.22105191930981394, 0.15052720108781248, 0.29985386011796467, 0.19144052521365984, 0.280710926716392, 0.2987568571544015, 0.16937165240043217, 0.25319158575334455, 0.19448418257578415, 0.38301123440306095, 0.5107166164899353, 0.17562197954915704, 0.19157994992930816, 0.18859582417952736, 0.17522953531209218, 0.1841666345308215, 0.20557488835602722, 0.18555918768710444, 0.17092529798492417, 0.1917936211763719, 0.0769916189505544, 0.06547825387311224, 0.07035917908459999, 0.06131121239893089, 0.07669110598808371, 0.07325245817245374, 0.06473028647653267, 0.07250840745512865, 0.06263310020346358]}, "mutation_prompt": null}
{"id": "8efeb46d-d932-4eca-9e61-4db61a110214", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Mutation\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) for Best Solution Every 100 Evaluations\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = 0.01 * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "A hybrid Differential Evolution with Adaptive Crossover Probability and Local Search that balances global exploration and local exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14e0edf0-259b-4cf3-af26-fdfd61852ab4", "metadata": {"aucs": [0.3893998204103253, 0.40430802771051966, 0.4035383015939886, 0.42539317584805925, 0.4082416323385665, 0.42147136005007846, 0.41464176885983484, 0.39851778666916093, 0.4039631465499238, 0.14875604631365003, 0.14739444288095238, 0.14511787664446296, 0.13201007249961527, 0.1306287667467808, 0.16181039063406966, 0.14956633467468727, 0.15680541480665, 0.14544875320688933, 0.08989761528473683, 0.09913098087820049, 0.09729874069200728, 0.09923901266313861, 0.09499331460211125, 0.10199876101467542, 0.10951920326205344, 0.09967146628460832, 0.09315922004862365, 0.09043298680127043, 0.08074613111091022, 0.075597924503648, 0.09784660451409577, 0.09545621956469963, 0.10636276062694472, 0.08419246855703733, 0.0842661496397521, 0.08581762156945771, 0.9064184960849703, 0.9090087057040481, 0.9225574221047714, 0.923602414211069, 0.9474949218209272, 0.8961154151296715, 0.9023466465165811, 0.9679042283267547, 0.8869326532651336, 0.18680920245350763, 0.16367720667972385, 0.18600987608250807, 0.1754721398400254, 0.17163750792079613, 0.17488812154534406, 0.19038893621201325, 0.18364763273859785, 0.19688463823374724, 0.24830355680029725, 0.26610529733075483, 0.25413189661584235, 0.4135281194055802, 0.2530405769451478, 0.2563086576247474, 0.2534716537112496, 0.2562567085801626, 0.2605416952463918, 0.110331521773679, 0.11680338570093696, 0.13063271188816472, 0.13787884779900428, 0.10719281198438968, 0.10542882907205697, 0.11470263836042505, 0.11179902508258488, 0.1372751085722943, 0.12379267699642038, 0.10390372075537757, 0.14039426738777983, 0.11793779494031209, 0.11305673422310525, 0.1380956623318047, 0.09712951837516903, 0.09553942705646845, 0.09922170728762503, 0.03227031273460712, 0.044320805032904365, 0.008908858531113895, 0.011057151800104137, 0.03259266720967702, 0.039972924936415244, 0.03563446863849018, 0.030530125670303332, 0.01855761660444588, 0.12022227854133893, 0.13881185488968495, 0.1231365136457161, 0.11884922518980967, 0.1437800848889459, 0.10846895104344367, 0.15772472857141817, 0.1802150675344969, 0.16622810760634343, 9.999999999998899e-05, 9.999999999998899e-05, 0.005689179034749969, 9.999999999998899e-05, 9.999999999998899e-05, 0.001737987013888831, 9.999999999998899e-05, 0.0007309848811403175, 9.999999999998899e-05, 0.07504822172341796, 0.09329434823392635, 0.07368466267498153, 0.07866082213274972, 0.08159282588628958, 0.08898724081704001, 0.08976964942033339, 0.0866861913608944, 0.08267740914789734, 0.34228098064493984, 0.3468124948599346, 0.3351376803758581, 0.3467135598266814, 0.3604759533900328, 0.33912786958386165, 0.33027083681833247, 0.3413397159564495, 0.33629623534085074, 0.08273273059910702, 0.09181770536190725, 0.0825267025602281, 0.1008875174260151, 0.09713928627940382, 0.08346446162373444, 0.07149432090246244, 0.06926839742099344, 0.09595633772357504, 0.16172996211213087, 0.17934577947183483, 0.14725622134613026, 0.23831361216511282, 0.2673347094505377, 0.138892811130368, 0.1636017494275802, 0.15239288543078788, 0.1683280724660875, 0.2506168489607108, 0.22664975716841196, 0.2329514433654153, 0.20204118006181648, 0.22490128165998813, 0.21817659006501988, 0.22964798378067797, 0.2572310138841579, 0.23784187728732453, 0.16086456950344796, 0.17103689064705907, 0.16486421150956976, 0.16837298835162984, 0.16532652739420972, 0.16938210212180949, 0.20480137596062942, 0.18516329511384688, 0.1730466142793261, 0.18419442957032028, 0.18837475652894542, 0.18626178759573508, 0.19680645500807492, 0.1962730242010461, 0.16987676283903197, 0.17661742551091408, 0.1672988571796452, 0.17500415615249842, 0.18194192934993392, 0.19620337417545708, 0.19179243115251943, 0.177650181181779, 0.19151448063065257, 0.17900631255901156, 0.1782638212910298, 0.227196948773836, 0.19606477609784334, 0.31649838713878553, 0.17503684515998508, 0.24696626758495066, 0.2836780126874181, 0.17521582790211465, 0.16093322563957668, 0.2537224293850857, 0.22105191930981394, 0.15052720108781248, 0.29985386011796467, 0.19144052521365984, 0.280710926716392, 0.2987568571544015, 0.16937165240043217, 0.25319158575334455, 0.19448418257578415, 0.38301123440306095, 0.5107166164899353, 0.17562197954915704, 0.19157994992930816, 0.18859582417952736, 0.17522953531209218, 0.1841666345308215, 0.20557488835602722, 0.18555918768710444, 0.17092529798492417, 0.1917936211763719, 0.0769916189505544, 0.06547825387311224, 0.07035917908459999, 0.06131121239893089, 0.07669110598808371, 0.07325245817245374, 0.06473028647653267, 0.07250840745512865, 0.06263310020346358]}, "mutation_prompt": null}
{"id": "4baf5c05-68a7-468c-a480-8d1a03e56752", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Mutation with decay factor\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                decay = 1 - evals / self.budget\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Introducing a decay factor in the differential weight and a dynamic step size in local search to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": 0.2581632356913713, "feedback": "The algorithm HybridDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.20.", "error": "", "parent_id": "14e0edf0-259b-4cf3-af26-fdfd61852ab4", "metadata": {"aucs": [0.5529906100588962, 0.582142620771346, 0.5740645654493217, 0.6354304480596711, 0.5962729870131283, 0.6112371795776972, 0.6134701279736751, 0.5963330967621464, 0.5910439868193311, 0.3858325087026342, 0.3746504905874586, 0.37858972599945684, 0.3405341883861881, 0.3686050230178798, 0.3653044291686146, 0.34645262936276855, 0.35657392462760606, 0.3645988340704811, 0.11114138164133691, 0.1123321033371798, 0.09984231682205613, 0.10002860083812992, 0.10444096249379564, 0.10284531254670382, 0.10928710066484915, 0.110815606967132, 0.10585784883438831, 0.09954802753584713, 0.09281642354853392, 0.09655469389968618, 0.08827183810637473, 0.09394060449252994, 0.09441708139534877, 0.09078782834457211, 0.08660423206700707, 0.09095564434911008, 0.8891828643013922, 0.9367549478371706, 0.9164868033928594, 0.9152635016736034, 0.9475099500291384, 0.8721040764429069, 0.9275939039423637, 0.9161454450519924, 0.8368199356473026, 0.24812817548625576, 0.23685251018229814, 0.23725359129202894, 0.2819621687848124, 0.2445975061761061, 0.22814196986010993, 0.2433865733805335, 0.23690093137278356, 0.2349825411015639, 0.646368307707117, 0.5735469782440474, 0.5457619329374224, 0.5700138787592631, 0.5315115698371533, 0.5500134320676262, 0.5507459830371383, 0.530846757757004, 0.5336910901255512, 0.12568612026300197, 0.14709170075973166, 0.13906152326587906, 0.15321688260319843, 0.14844266951826435, 0.1370633085595464, 0.1303160703084666, 0.1662317676920948, 0.1636305808266657, 0.22744808408003014, 0.2114649266428288, 0.156850639425253, 0.14023915542773668, 0.1563426502830565, 0.12189344422741832, 0.15993509917394388, 0.13681379335293586, 0.14178909052763844, 0.13843746203599572, 0.14324653158933176, 0.17149589152274347, 0.16796309876958493, 0.16847956110635842, 0.1874787394568621, 0.12723416850289793, 0.17338692116237986, 0.14547610869488903, 0.22569064396225536, 0.27980091643109917, 0.23698972256141837, 0.2859066491686696, 0.24465315326388748, 0.27543771944076323, 0.27756682874563443, 0.3036994342949315, 0.3109506977347243, 0.07848732691148341, 0.07034821214278109, 0.07233910854065595, 0.055702854136833735, 0.06433770591942756, 0.06721205556112053, 0.061403510252284854, 0.08273886429203303, 0.051475327454613584, 0.14868601776084578, 0.16925937676355984, 0.15400686260242513, 0.14854246300220786, 0.16612239236122206, 0.1578295995327682, 0.1416254075912451, 0.15226642674777846, 0.1528870833501349, 0.47592451286119863, 0.500127239461783, 0.4540973900937856, 0.44938858905133594, 0.4989469827059777, 0.48399801921460806, 0.48093044553980324, 0.48199812812843146, 0.4592520952912763, 0.08955243429878623, 0.09306897006544312, 0.08220982664318377, 0.0794320414592028, 0.08593395525578418, 0.08914954490384297, 0.08667180831109833, 0.08968109489852849, 0.0888476679234933, 0.13340293174072337, 0.17336979704870648, 0.14243264668847655, 0.14409200056802696, 0.18639793599055465, 0.16349382598129192, 0.15783593300828347, 0.13474707734124824, 0.1399872043767073, 0.29583123883350904, 0.29790527071696904, 0.2943935495247181, 0.28957175700968996, 0.27977254194228274, 0.2944926318842701, 0.31576644010910315, 0.30839453640301895, 0.32537749903920776, 0.22662612335386934, 0.22600397793160276, 0.2275166623551219, 0.2190702083182251, 0.21496285877014643, 0.23125251365550337, 0.249057024369307, 0.2356946908680727, 0.2507097794892723, 0.19409896147084993, 0.1839659340097486, 0.18243366357873458, 0.17049094940741838, 0.19519611473217868, 0.18793110432430016, 0.19118839001967114, 0.19520157831417073, 0.2140786494412411, 0.1777029181499996, 0.1929649549336081, 0.1898539123802062, 0.17904248494992203, 0.19438226827640426, 0.18642005804329498, 0.18469135100686818, 0.18774155881985066, 0.18798180821418387, 0.31542374035986964, 0.19004956373145188, 0.383338810536075, 0.18476702338445905, 0.16961213725047508, 0.20074458103346815, 0.1686888066937372, 0.22936111087787292, 0.2934715139528862, 0.19199468409918818, 0.16897174303321172, 0.18275976689032591, 0.30948297419455517, 0.18822450636045218, 0.41817721454739576, 0.4130955485539304, 0.20235480242340376, 0.20314327388088071, 0.17794391470238624, 0.1806288088941066, 0.17572428182934496, 0.18789512573827405, 0.18551972256531157, 0.1799725263201417, 0.18197750648724131, 0.1804836930170377, 0.17739632825095175, 0.07701264028398236, 0.0791697356710993, 0.0746463253301648, 0.06709200930159964, 0.07319755131000094, 0.07930743979930688, 0.07160784325641767, 0.06881939257170688, 0.0786015376793966]}, "mutation_prompt": null}
{"id": "34549fbd-450f-4c79-9f68-c15b591a9212", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Mutation with decay factor\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                decay = 1 - evals / self.budget\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Introducing a decay factor in the differential weight and a dynamic step size in local search to enhance convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4baf5c05-68a7-468c-a480-8d1a03e56752", "metadata": {"aucs": [0.5529906100588962, 0.582142620771346, 0.5740645654493217, 0.6354304480596711, 0.5962729870131283, 0.6112371795776972, 0.6134701279736751, 0.5963330967621464, 0.5910439868193311, 0.3858325087026342, 0.3746504905874586, 0.37858972599945684, 0.3405341883861881, 0.3686050230178798, 0.3653044291686146, 0.34645262936276855, 0.35657392462760606, 0.3645988340704811, 0.11114138164133691, 0.1123321033371798, 0.09984231682205613, 0.10002860083812992, 0.10444096249379564, 0.10284531254670382, 0.10928710066484915, 0.110815606967132, 0.10585784883438831, 0.09954802753584713, 0.09281642354853392, 0.09655469389968618, 0.08827183810637473, 0.09394060449252994, 0.09441708139534877, 0.09078782834457211, 0.08660423206700707, 0.09095564434911008, 0.8891828643013922, 0.9367549478371706, 0.9164868033928594, 0.9152635016736034, 0.9475099500291384, 0.8721040764429069, 0.9275939039423637, 0.9161454450519924, 0.8368199356473026, 0.24812817548625576, 0.23685251018229814, 0.23725359129202894, 0.2819621687848124, 0.2445975061761061, 0.22814196986010993, 0.2433865733805335, 0.23690093137278356, 0.2349825411015639, 0.646368307707117, 0.5735469782440474, 0.5457619329374224, 0.5700138787592631, 0.5315115698371533, 0.5500134320676262, 0.5507459830371383, 0.530846757757004, 0.5336910901255512, 0.12568612026300197, 0.14709170075973166, 0.13906152326587906, 0.15321688260319843, 0.14844266951826435, 0.1370633085595464, 0.1303160703084666, 0.1662317676920948, 0.1636305808266657, 0.22744808408003014, 0.2114649266428288, 0.156850639425253, 0.14023915542773668, 0.1563426502830565, 0.12189344422741832, 0.15993509917394388, 0.13681379335293586, 0.14178909052763844, 0.13843746203599572, 0.14324653158933176, 0.17149589152274347, 0.16796309876958493, 0.16847956110635842, 0.1874787394568621, 0.12723416850289793, 0.17338692116237986, 0.14547610869488903, 0.22569064396225536, 0.27980091643109917, 0.23698972256141837, 0.2859066491686696, 0.24465315326388748, 0.27543771944076323, 0.27756682874563443, 0.3036994342949315, 0.3109506977347243, 0.07848732691148341, 0.07034821214278109, 0.07233910854065595, 0.055702854136833735, 0.06433770591942756, 0.06721205556112053, 0.061403510252284854, 0.08273886429203303, 0.051475327454613584, 0.14868601776084578, 0.16925937676355984, 0.15400686260242513, 0.14854246300220786, 0.16612239236122206, 0.1578295995327682, 0.1416254075912451, 0.15226642674777846, 0.1528870833501349, 0.47592451286119863, 0.500127239461783, 0.4540973900937856, 0.44938858905133594, 0.4989469827059777, 0.48399801921460806, 0.48093044553980324, 0.48199812812843146, 0.4592520952912763, 0.08955243429878623, 0.09306897006544312, 0.08220982664318377, 0.0794320414592028, 0.08593395525578418, 0.08914954490384297, 0.08667180831109833, 0.08968109489852849, 0.0888476679234933, 0.13340293174072337, 0.17336979704870648, 0.14243264668847655, 0.14409200056802696, 0.18639793599055465, 0.16349382598129192, 0.15783593300828347, 0.13474707734124824, 0.1399872043767073, 0.29583123883350904, 0.29790527071696904, 0.2943935495247181, 0.28957175700968996, 0.27977254194228274, 0.2944926318842701, 0.31576644010910315, 0.30839453640301895, 0.32537749903920776, 0.22662612335386934, 0.22600397793160276, 0.2275166623551219, 0.2190702083182251, 0.21496285877014643, 0.23125251365550337, 0.249057024369307, 0.2356946908680727, 0.2507097794892723, 0.19409896147084993, 0.1839659340097486, 0.18243366357873458, 0.17049094940741838, 0.19519611473217868, 0.18793110432430016, 0.19118839001967114, 0.19520157831417073, 0.2140786494412411, 0.1777029181499996, 0.1929649549336081, 0.1898539123802062, 0.17904248494992203, 0.19438226827640426, 0.18642005804329498, 0.18469135100686818, 0.18774155881985066, 0.18798180821418387, 0.31542374035986964, 0.19004956373145188, 0.383338810536075, 0.18476702338445905, 0.16961213725047508, 0.20074458103346815, 0.1686888066937372, 0.22936111087787292, 0.2934715139528862, 0.19199468409918818, 0.16897174303321172, 0.18275976689032591, 0.30948297419455517, 0.18822450636045218, 0.41817721454739576, 0.4130955485539304, 0.20235480242340376, 0.20314327388088071, 0.17794391470238624, 0.1806288088941066, 0.17572428182934496, 0.18789512573827405, 0.18551972256531157, 0.1799725263201417, 0.18197750648724131, 0.1804836930170377, 0.17739632825095175, 0.07701264028398236, 0.0791697356710993, 0.0746463253301648, 0.06709200930159964, 0.07319755131000094, 0.07930743979930688, 0.07160784325641767, 0.06881939257170688, 0.0786015376793966]}, "mutation_prompt": null}
{"id": "4e972072-6c36-42e1-86a8-c9372d7d3365", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Mutation with exponential decay factor\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                decay = np.exp(-evals / self.budget)\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = max(0.1, self.CR * decay)\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Incorporating an exponential decay factor for the differential weight and adaptive crossover rate to improve convergence speed.", "configspace": "", "generation": 9, "fitness": 0.19014807431221767, "feedback": "The algorithm HybridDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.18.", "error": "", "parent_id": "4baf5c05-68a7-468c-a480-8d1a03e56752", "metadata": {"aucs": [0.5201081142044379, 0.5104582536375009, 0.5204618404647905, 0.5592013531220357, 0.5416112262305428, 0.5229887090390721, 0.5329270212489527, 0.5252859687395912, 0.5449034895162557, 0.208850632130667, 0.22536457860060133, 0.22208846176946173, 0.2260059087870503, 0.2259848202519411, 0.22006297373204486, 0.22193368564268823, 0.22347921876004273, 0.22713221825832353, 0.18485317129814383, 0.17525615684476237, 0.15570798954940523, 0.16201622029345164, 0.1636407746123617, 0.16143223766763226, 0.15965781311589855, 0.14233493876524483, 0.19010638615097653, 0.14542280763817017, 0.12430950078715453, 0.11790589303646049, 0.1303407554026258, 0.13524892057046067, 0.13945538941492663, 0.15393052474138147, 0.1240653260334067, 0.14017410848401635, 0.8909389524351176, 0.9054900433809422, 0.8940146419675554, 0.9339517824110117, 0.8847637353063736, 0.8964226132544972, 0.9240726765703875, 0.8930105381821716, 0.9122261351777102, 0.1273920178102801, 0.12645670705253886, 0.11815791411200338, 0.1250838957040401, 0.13782261845032495, 0.12921977249240912, 0.12623667674374717, 0.14710534813771758, 0.1271015907155414, 0.15191270876183627, 0.16898223804137602, 0.15954447713780395, 0.204825064341437, 0.17487949134801606, 0.18529582842106573, 0.18467921648137053, 0.18181969469141246, 0.17564558998031388, 0.09866363227176589, 0.08711884073254261, 0.09894527056983993, 0.09966790479174592, 0.09031273251945127, 0.0899731222937129, 0.1004602112750359, 0.11077012938145525, 0.10275518048816779, 0.09938662942410104, 0.09637639212800753, 0.09314868463946235, 0.10229842970214398, 0.1088424513247146, 0.09394412113705075, 0.10110331045369403, 0.07680285322982072, 0.08424316067121285, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.044724653696243566, 0.03132422345349828, 0.059680358058052496, 0.05479890197805437, 0.06915802004032923, 0.03938279517445187, 0.09919675362459912, 0.0828779561536096, 0.1311779046523297, 9.999999999998899e-05, 0.0004385173667835751, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.043009931847648786, 0.058779209593352255, 0.043072395087963344, 0.059747017535234814, 0.04861158493508244, 0.06255984540961113, 0.05066672912029191, 0.05500046672506087, 0.05535146435352667, 0.3376085594222038, 0.3548201973391466, 0.3439725319303599, 0.35659711588351206, 0.35119839636176853, 0.3595310996693064, 0.3775162616174669, 0.34546399503577574, 0.3499124138040691, 0.09063694744380446, 0.08925267302431039, 0.07999321075336252, 0.0831125203841524, 0.0762078465702849, 0.08095907721299644, 0.07528493345832632, 0.07912152985838661, 0.07370465749952748, 0.14320827630832467, 0.14113739758056032, 0.16050419115434655, 0.14022268980336616, 0.1670400685407123, 0.15076945713821788, 0.16711564265596557, 0.14483266237673798, 0.16131920336701755, 0.19162417170161694, 0.18948907378961988, 0.20490713629652446, 0.199852741244278, 0.21395348223289, 0.1988115195377549, 0.21132369799016004, 0.21021837033952406, 0.19900764460092935, 0.1410931060319357, 0.1472132174930868, 0.19002500331558447, 0.15208614958885558, 0.14288650754551713, 0.14466945378836749, 0.1434974857698731, 0.14806108183158828, 0.14827867073989032, 0.19047890356070396, 0.18060409466372296, 0.17843579758450723, 0.18378284026345815, 0.18015309999576945, 0.17126240582860353, 0.18118543651503727, 0.17741783586069892, 0.18463155047000757, 0.17604709853322398, 0.19006813013412316, 0.18429139793468818, 0.2073132993896406, 0.2056184092387342, 0.1827028675313085, 0.19385580139729697, 0.19142478060925072, 0.2092671458047035, 0.2067207981693362, 0.20290755207633415, 0.18882645764223094, 0.20406447490720425, 0.2457316704380168, 0.23579459898817223, 0.20225539794613867, 0.2831880682316621, 0.16314619308865808, 0.25521047382110096, 0.16936301287317312, 0.18367785698991468, 0.1688309655190433, 0.2470959642703161, 0.19385130702489584, 0.19691976382837284, 0.17977738486174655, 0.21313427281923192, 0.1784798541057595, 0.20200939782053884, 0.18583715676620527, 0.1803626059058504, 0.17271522882558477, 0.1889676554616896, 0.19138761733678145, 0.1831799011788715, 0.18756050381560485, 0.07275451357716078, 0.07258099588772382, 0.07296690424301067, 0.07467973987443255, 0.0717710842867636, 0.07592686833519147, 0.06750336134885404, 0.06303143764658747, 0.06535890268824673]}, "mutation_prompt": null}
{"id": "cc3717a7-95de-4667-916d-20a7e1c8eb05", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Mutation with decay factor and dynamic scaling\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                decay = 1 - evals / self.budget\n                dynamic_F = self.F + 0.2 * decay  # Dynamic scaling factor\n                mutant = np.clip(a + dynamic_F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Introducing a dynamic scaling factor for mutation to enhance exploration while maintaining convergence.", "configspace": "", "generation": 10, "fitness": 0.17049139447565467, "feedback": "The algorithm HybridDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.18.", "error": "", "parent_id": "4baf5c05-68a7-468c-a480-8d1a03e56752", "metadata": {"aucs": [0.32834939492481985, 0.3155977738612681, 0.3020032922825294, 0.354243975424926, 0.35514008491740023, 0.35172204168982, 0.3374570298342162, 0.3520692418066801, 0.36272275675117593, 0.10427446048598721, 0.09570308325867827, 0.10399769402594816, 0.10108904312100753, 0.10109530323206728, 0.10498163490077461, 0.10361521743567736, 0.10674168837913967, 0.10405476481494735, 0.07700326469372265, 0.07437699915058515, 0.07893944488635984, 0.0773047781232632, 0.07290097506688731, 0.07952698476130737, 0.0833328390591822, 0.07856459623999945, 0.07994886674530499, 0.06282586149924518, 0.06489869803766979, 0.06451599803655683, 0.06326801566131657, 0.07376714796626238, 0.07034412531533163, 0.06327914813287083, 0.06833129303007024, 0.06850291661232799, 0.9585377085810938, 0.9165057132102785, 0.9386412603043875, 0.9412485911398811, 0.9226958421477913, 0.9399741690287086, 0.9593176134307334, 0.9660553552759256, 0.9306527935107467, 0.15611233355503973, 0.15691292137256674, 0.14378935705387774, 0.15108463396183236, 0.1341913267363377, 0.14228286181272964, 0.17110027139803297, 0.1602194487807881, 0.16078939084563548, 0.2141117469473922, 0.22625355309257955, 0.2026967910487929, 0.21002187162356167, 0.2288841979113394, 0.21832335157542215, 0.2272962853309819, 0.21640742328252882, 0.20756687737607393, 0.0838198976195883, 0.07840242620857074, 0.07304692307468652, 0.0902254771754537, 0.07754707477282796, 0.08160298915981767, 0.09456417776093351, 0.08088141234164581, 0.08810341455564608, 0.012666579918493737, 0.11241868367785368, 0.12289393950293437, 0.07981313669784906, 0.07506384274776579, 0.07869907260369824, 0.07348291895371095, 0.05616044634330042, 0.08160658305168433, 0.0058975798910539945, 0.01732686560612584, 0.011206326869177219, 0.015295515033171059, 0.019155564364495725, 0.001085560237267802, 0.013934166247411839, 9.999999999998899e-05, 9.999999999998899e-05, 0.1208747368632872, 0.11459639857247583, 0.08359695556214775, 0.08187901265384112, 0.09278188120149555, 0.09281113524061713, 0.1063879665864329, 0.10097775134538989, 0.11790737102683124, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050220580910627755, 0.05316452914607017, 0.05179484703098247, 0.057701479643523124, 0.05958995267127043, 0.056569877808340996, 0.06357449154876726, 0.06680649982623377, 0.0639182087868545, 0.28562626860369156, 0.3074322418551154, 0.2881978302166195, 0.30729315434747195, 0.32343076443821306, 0.33864161536230497, 0.30022506996070597, 0.29130308818592343, 0.2909856144826307, 0.08509448711121748, 0.0713250674596102, 0.08061158188730078, 0.08204689081087357, 0.08666889444672943, 0.06583779188650718, 0.07412909521463229, 0.0719419994103595, 0.06254359494717865, 0.14070788491697095, 0.18692104464805326, 0.1764261711656241, 0.1481580385253043, 0.21026480428103, 0.15573720471579688, 0.13600449778096957, 0.14104856105049735, 0.143837530732284, 0.19129931853234117, 0.19500764070069465, 0.2059861631529606, 0.19060051644182396, 0.19625410289698986, 0.19038918331013732, 0.20416290052392416, 0.2095318145286107, 0.20194836440772124, 0.14108400819838984, 0.1457830481678164, 0.1523826883350764, 0.14667819105291524, 0.1481794132069768, 0.13125079966425923, 0.16061995244746996, 0.1430038946931218, 0.1515575306671082, 0.1678981038736581, 0.18522239871981394, 0.1610052516109859, 0.16687718784797345, 0.17201410835539788, 0.19625324229996854, 0.16561077179590666, 0.1797629597738578, 0.17920465345286807, 0.16790862992189526, 0.16210113789562552, 0.184186817299549, 0.16136466080912193, 0.16942631939076802, 0.16543829370572494, 0.16662462696848102, 0.15399579097260596, 0.17873319145515265, 0.21626688598740995, 0.21134462902877216, 0.1972484044345536, 0.16750492840800268, 0.1701881374950912, 0.18672851166217042, 0.13742651774118675, 0.23402261420857418, 0.20449740441188746, 0.1669633530491066, 0.1733739614337776, 0.18107210254010553, 0.1834112220864207, 0.16452821122086625, 0.1582773695696993, 0.3592761211907759, 0.19565640166017617, 0.19308489087678327, 0.179204018055087, 0.18825809570780394, 0.19040269913374308, 0.19879802904040023, 0.1755561500417112, 0.19395091581073554, 0.17593460243363912, 0.18152933908926183, 0.20630730788543072, 0.059811676598338304, 0.06385999879255833, 0.05683446226056543, 0.059325393964790196, 0.05993649679667723, 0.0629502866767645, 0.05935812285494524, 0.06310746648936305, 0.05903763724219302]}, "mutation_prompt": null}
{"id": "030a5e3c-f461-42be-bfa4-d15527c9c108", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Mutation with decay factor\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                decay = 1 - evals / self.budget\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Introducing a decay factor in the differential weight and a dynamic step size in local search to enhance convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4baf5c05-68a7-468c-a480-8d1a03e56752", "metadata": {"aucs": [0.5529906100588962, 0.582142620771346, 0.5740645654493217, 0.6354304480596711, 0.5962729870131283, 0.6112371795776972, 0.6134701279736751, 0.5963330967621464, 0.5910439868193311, 0.3858325087026342, 0.3746504905874586, 0.37858972599945684, 0.3405341883861881, 0.3686050230178798, 0.3653044291686146, 0.34645262936276855, 0.35657392462760606, 0.3645988340704811, 0.11114138164133691, 0.1123321033371798, 0.09984231682205613, 0.10002860083812992, 0.10444096249379564, 0.10284531254670382, 0.10928710066484915, 0.110815606967132, 0.10585784883438831, 0.09954802753584713, 0.09281642354853392, 0.09655469389968618, 0.08827183810637473, 0.09394060449252994, 0.09441708139534877, 0.09078782834457211, 0.08660423206700707, 0.09095564434911008, 0.8891828643013922, 0.9367549478371706, 0.9164868033928594, 0.9152635016736034, 0.9475099500291384, 0.8721040764429069, 0.9275939039423637, 0.9161454450519924, 0.8368199356473026, 0.24812817548625576, 0.23685251018229814, 0.23725359129202894, 0.2819621687848124, 0.2445975061761061, 0.22814196986010993, 0.2433865733805335, 0.23690093137278356, 0.2349825411015639, 0.646368307707117, 0.5735469782440474, 0.5457619329374224, 0.5700138787592631, 0.5315115698371533, 0.5500134320676262, 0.5507459830371383, 0.530846757757004, 0.5336910901255512, 0.12568612026300197, 0.14709170075973166, 0.13906152326587906, 0.15321688260319843, 0.14844266951826435, 0.1370633085595464, 0.1303160703084666, 0.1662317676920948, 0.1636305808266657, 0.22744808408003014, 0.2114649266428288, 0.156850639425253, 0.14023915542773668, 0.1563426502830565, 0.12189344422741832, 0.15993509917394388, 0.13681379335293586, 0.14178909052763844, 0.13843746203599572, 0.14324653158933176, 0.17149589152274347, 0.16796309876958493, 0.16847956110635842, 0.1874787394568621, 0.12723416850289793, 0.17338692116237986, 0.14547610869488903, 0.22569064396225536, 0.27980091643109917, 0.23698972256141837, 0.2859066491686696, 0.24465315326388748, 0.27543771944076323, 0.27756682874563443, 0.3036994342949315, 0.3109506977347243, 0.07848732691148341, 0.07034821214278109, 0.07233910854065595, 0.055702854136833735, 0.06433770591942756, 0.06721205556112053, 0.061403510252284854, 0.08273886429203303, 0.051475327454613584, 0.14868601776084578, 0.16925937676355984, 0.15400686260242513, 0.14854246300220786, 0.16612239236122206, 0.1578295995327682, 0.1416254075912451, 0.15226642674777846, 0.1528870833501349, 0.47592451286119863, 0.500127239461783, 0.4540973900937856, 0.44938858905133594, 0.4989469827059777, 0.48399801921460806, 0.48093044553980324, 0.48199812812843146, 0.4592520952912763, 0.08955243429878623, 0.09306897006544312, 0.08220982664318377, 0.0794320414592028, 0.08593395525578418, 0.08914954490384297, 0.08667180831109833, 0.08968109489852849, 0.0888476679234933, 0.13340293174072337, 0.17336979704870648, 0.14243264668847655, 0.14409200056802696, 0.18639793599055465, 0.16349382598129192, 0.15783593300828347, 0.13474707734124824, 0.1399872043767073, 0.29583123883350904, 0.29790527071696904, 0.2943935495247181, 0.28957175700968996, 0.27977254194228274, 0.2944926318842701, 0.31576644010910315, 0.30839453640301895, 0.32537749903920776, 0.22662612335386934, 0.22600397793160276, 0.2275166623551219, 0.2190702083182251, 0.21496285877014643, 0.23125251365550337, 0.249057024369307, 0.2356946908680727, 0.2507097794892723, 0.19409896147084993, 0.1839659340097486, 0.18243366357873458, 0.17049094940741838, 0.19519611473217868, 0.18793110432430016, 0.19118839001967114, 0.19520157831417073, 0.2140786494412411, 0.1777029181499996, 0.1929649549336081, 0.1898539123802062, 0.17904248494992203, 0.19438226827640426, 0.18642005804329498, 0.18469135100686818, 0.18774155881985066, 0.18798180821418387, 0.31542374035986964, 0.19004956373145188, 0.383338810536075, 0.18476702338445905, 0.16961213725047508, 0.20074458103346815, 0.1686888066937372, 0.22936111087787292, 0.2934715139528862, 0.19199468409918818, 0.16897174303321172, 0.18275976689032591, 0.30948297419455517, 0.18822450636045218, 0.41817721454739576, 0.4130955485539304, 0.20235480242340376, 0.20314327388088071, 0.17794391470238624, 0.1806288088941066, 0.17572428182934496, 0.18789512573827405, 0.18551972256531157, 0.1799725263201417, 0.18197750648724131, 0.1804836930170377, 0.17739632825095175, 0.07701264028398236, 0.0791697356710993, 0.0746463253301648, 0.06709200930159964, 0.07319755131000094, 0.07930743979930688, 0.07160784325641767, 0.06881939257170688, 0.0786015376793966]}, "mutation_prompt": null}
{"id": "36e80ecd-f71d-4217-932f-18596b585ac0", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Mutation with decay factor\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                decay = 1 - evals / self.budget\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Introducing a decay factor in the differential weight and a dynamic step size in local search to enhance convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4baf5c05-68a7-468c-a480-8d1a03e56752", "metadata": {"aucs": [0.5529906100588962, 0.582142620771346, 0.5740645654493217, 0.6354304480596711, 0.5962729870131283, 0.6112371795776972, 0.6134701279736751, 0.5963330967621464, 0.5910439868193311, 0.3858325087026342, 0.3746504905874586, 0.37858972599945684, 0.3405341883861881, 0.3686050230178798, 0.3653044291686146, 0.34645262936276855, 0.35657392462760606, 0.3645988340704811, 0.11114138164133691, 0.1123321033371798, 0.09984231682205613, 0.10002860083812992, 0.10444096249379564, 0.10284531254670382, 0.10928710066484915, 0.110815606967132, 0.10585784883438831, 0.09954802753584713, 0.09281642354853392, 0.09655469389968618, 0.08827183810637473, 0.09394060449252994, 0.09441708139534877, 0.09078782834457211, 0.08660423206700707, 0.09095564434911008, 0.8891828643013922, 0.9367549478371706, 0.9164868033928594, 0.9152635016736034, 0.9475099500291384, 0.8721040764429069, 0.9275939039423637, 0.9161454450519924, 0.8368199356473026, 0.24812817548625576, 0.23685251018229814, 0.23725359129202894, 0.2819621687848124, 0.2445975061761061, 0.22814196986010993, 0.2433865733805335, 0.23690093137278356, 0.2349825411015639, 0.646368307707117, 0.5735469782440474, 0.5457619329374224, 0.5700138787592631, 0.5315115698371533, 0.5500134320676262, 0.5507459830371383, 0.530846757757004, 0.5336910901255512, 0.12568612026300197, 0.14709170075973166, 0.13906152326587906, 0.15321688260319843, 0.14844266951826435, 0.1370633085595464, 0.1303160703084666, 0.1662317676920948, 0.1636305808266657, 0.22744808408003014, 0.2114649266428288, 0.156850639425253, 0.14023915542773668, 0.1563426502830565, 0.12189344422741832, 0.15993509917394388, 0.13681379335293586, 0.14178909052763844, 0.13843746203599572, 0.14324653158933176, 0.17149589152274347, 0.16796309876958493, 0.16847956110635842, 0.1874787394568621, 0.12723416850289793, 0.17338692116237986, 0.14547610869488903, 0.22569064396225536, 0.27980091643109917, 0.23698972256141837, 0.2859066491686696, 0.24465315326388748, 0.27543771944076323, 0.27756682874563443, 0.3036994342949315, 0.3109506977347243, 0.07848732691148341, 0.07034821214278109, 0.07233910854065595, 0.055702854136833735, 0.06433770591942756, 0.06721205556112053, 0.061403510252284854, 0.08273886429203303, 0.051475327454613584, 0.14868601776084578, 0.16925937676355984, 0.15400686260242513, 0.14854246300220786, 0.16612239236122206, 0.1578295995327682, 0.1416254075912451, 0.15226642674777846, 0.1528870833501349, 0.47592451286119863, 0.500127239461783, 0.4540973900937856, 0.44938858905133594, 0.4989469827059777, 0.48399801921460806, 0.48093044553980324, 0.48199812812843146, 0.4592520952912763, 0.08955243429878623, 0.09306897006544312, 0.08220982664318377, 0.0794320414592028, 0.08593395525578418, 0.08914954490384297, 0.08667180831109833, 0.08968109489852849, 0.0888476679234933, 0.13340293174072337, 0.17336979704870648, 0.14243264668847655, 0.14409200056802696, 0.18639793599055465, 0.16349382598129192, 0.15783593300828347, 0.13474707734124824, 0.1399872043767073, 0.29583123883350904, 0.29790527071696904, 0.2943935495247181, 0.28957175700968996, 0.27977254194228274, 0.2944926318842701, 0.31576644010910315, 0.30839453640301895, 0.32537749903920776, 0.22662612335386934, 0.22600397793160276, 0.2275166623551219, 0.2190702083182251, 0.21496285877014643, 0.23125251365550337, 0.249057024369307, 0.2356946908680727, 0.2507097794892723, 0.19409896147084993, 0.1839659340097486, 0.18243366357873458, 0.17049094940741838, 0.19519611473217868, 0.18793110432430016, 0.19118839001967114, 0.19520157831417073, 0.2140786494412411, 0.1777029181499996, 0.1929649549336081, 0.1898539123802062, 0.17904248494992203, 0.19438226827640426, 0.18642005804329498, 0.18469135100686818, 0.18774155881985066, 0.18798180821418387, 0.31542374035986964, 0.19004956373145188, 0.383338810536075, 0.18476702338445905, 0.16961213725047508, 0.20074458103346815, 0.1686888066937372, 0.22936111087787292, 0.2934715139528862, 0.19199468409918818, 0.16897174303321172, 0.18275976689032591, 0.30948297419455517, 0.18822450636045218, 0.41817721454739576, 0.4130955485539304, 0.20235480242340376, 0.20314327388088071, 0.17794391470238624, 0.1806288088941066, 0.17572428182934496, 0.18789512573827405, 0.18551972256531157, 0.1799725263201417, 0.18197750648724131, 0.1804836930170377, 0.17739632825095175, 0.07701264028398236, 0.0791697356710993, 0.0746463253301648, 0.06709200930159964, 0.07319755131000094, 0.07930743979930688, 0.07160784325641767, 0.06881939257170688, 0.0786015376793966]}, "mutation_prompt": null}
{"id": "bcea14d2-41ce-48da-8228-ea9bcfb6d372", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Mutation with decay factor\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                decay = 1 - evals / self.budget\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Introducing a decay factor in the differential weight and a dynamic step size in local search to enhance convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4baf5c05-68a7-468c-a480-8d1a03e56752", "metadata": {"aucs": [0.5529906100588962, 0.582142620771346, 0.5740645654493217, 0.6354304480596711, 0.5962729870131283, 0.6112371795776972, 0.6134701279736751, 0.5963330967621464, 0.5910439868193311, 0.3858325087026342, 0.3746504905874586, 0.37858972599945684, 0.3405341883861881, 0.3686050230178798, 0.3653044291686146, 0.34645262936276855, 0.35657392462760606, 0.3645988340704811, 0.11114138164133691, 0.1123321033371798, 0.09984231682205613, 0.10002860083812992, 0.10444096249379564, 0.10284531254670382, 0.10928710066484915, 0.110815606967132, 0.10585784883438831, 0.09954802753584713, 0.09281642354853392, 0.09655469389968618, 0.08827183810637473, 0.09394060449252994, 0.09441708139534877, 0.09078782834457211, 0.08660423206700707, 0.09095564434911008, 0.8891828643013922, 0.9367549478371706, 0.9164868033928594, 0.9152635016736034, 0.9475099500291384, 0.8721040764429069, 0.9275939039423637, 0.9161454450519924, 0.8368199356473026, 0.24812817548625576, 0.23685251018229814, 0.23725359129202894, 0.2819621687848124, 0.2445975061761061, 0.22814196986010993, 0.2433865733805335, 0.23690093137278356, 0.2349825411015639, 0.646368307707117, 0.5735469782440474, 0.5457619329374224, 0.5700138787592631, 0.5315115698371533, 0.5500134320676262, 0.5507459830371383, 0.530846757757004, 0.5336910901255512, 0.12568612026300197, 0.14709170075973166, 0.13906152326587906, 0.15321688260319843, 0.14844266951826435, 0.1370633085595464, 0.1303160703084666, 0.1662317676920948, 0.1636305808266657, 0.22744808408003014, 0.2114649266428288, 0.156850639425253, 0.14023915542773668, 0.1563426502830565, 0.12189344422741832, 0.15993509917394388, 0.13681379335293586, 0.14178909052763844, 0.13843746203599572, 0.14324653158933176, 0.17149589152274347, 0.16796309876958493, 0.16847956110635842, 0.1874787394568621, 0.12723416850289793, 0.17338692116237986, 0.14547610869488903, 0.22569064396225536, 0.27980091643109917, 0.23698972256141837, 0.2859066491686696, 0.24465315326388748, 0.27543771944076323, 0.27756682874563443, 0.3036994342949315, 0.3109506977347243, 0.07848732691148341, 0.07034821214278109, 0.07233910854065595, 0.055702854136833735, 0.06433770591942756, 0.06721205556112053, 0.061403510252284854, 0.08273886429203303, 0.051475327454613584, 0.14868601776084578, 0.16925937676355984, 0.15400686260242513, 0.14854246300220786, 0.16612239236122206, 0.1578295995327682, 0.1416254075912451, 0.15226642674777846, 0.1528870833501349, 0.47592451286119863, 0.500127239461783, 0.4540973900937856, 0.44938858905133594, 0.4989469827059777, 0.48399801921460806, 0.48093044553980324, 0.48199812812843146, 0.4592520952912763, 0.08955243429878623, 0.09306897006544312, 0.08220982664318377, 0.0794320414592028, 0.08593395525578418, 0.08914954490384297, 0.08667180831109833, 0.08968109489852849, 0.0888476679234933, 0.13340293174072337, 0.17336979704870648, 0.14243264668847655, 0.14409200056802696, 0.18639793599055465, 0.16349382598129192, 0.15783593300828347, 0.13474707734124824, 0.1399872043767073, 0.29583123883350904, 0.29790527071696904, 0.2943935495247181, 0.28957175700968996, 0.27977254194228274, 0.2944926318842701, 0.31576644010910315, 0.30839453640301895, 0.32537749903920776, 0.22662612335386934, 0.22600397793160276, 0.2275166623551219, 0.2190702083182251, 0.21496285877014643, 0.23125251365550337, 0.249057024369307, 0.2356946908680727, 0.2507097794892723, 0.19409896147084993, 0.1839659340097486, 0.18243366357873458, 0.17049094940741838, 0.19519611473217868, 0.18793110432430016, 0.19118839001967114, 0.19520157831417073, 0.2140786494412411, 0.1777029181499996, 0.1929649549336081, 0.1898539123802062, 0.17904248494992203, 0.19438226827640426, 0.18642005804329498, 0.18469135100686818, 0.18774155881985066, 0.18798180821418387, 0.31542374035986964, 0.19004956373145188, 0.383338810536075, 0.18476702338445905, 0.16961213725047508, 0.20074458103346815, 0.1686888066937372, 0.22936111087787292, 0.2934715139528862, 0.19199468409918818, 0.16897174303321172, 0.18275976689032591, 0.30948297419455517, 0.18822450636045218, 0.41817721454739576, 0.4130955485539304, 0.20235480242340376, 0.20314327388088071, 0.17794391470238624, 0.1806288088941066, 0.17572428182934496, 0.18789512573827405, 0.18551972256531157, 0.1799725263201417, 0.18197750648724131, 0.1804836930170377, 0.17739632825095175, 0.07701264028398236, 0.0791697356710993, 0.0746463253301648, 0.06709200930159964, 0.07319755131000094, 0.07930743979930688, 0.07160784325641767, 0.06881939257170688, 0.0786015376793966]}, "mutation_prompt": null}
{"id": "f0c70219-b01f-4376-a69e-cbf65df0ccd6", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Mutation with decay factor\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                decay = 1 - evals / self.budget\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Introducing a decay factor in the differential weight and a dynamic step size in local search to enhance convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4baf5c05-68a7-468c-a480-8d1a03e56752", "metadata": {"aucs": [0.5529906100588962, 0.582142620771346, 0.5740645654493217, 0.6354304480596711, 0.5962729870131283, 0.6112371795776972, 0.6134701279736751, 0.5963330967621464, 0.5910439868193311, 0.3858325087026342, 0.3746504905874586, 0.37858972599945684, 0.3405341883861881, 0.3686050230178798, 0.3653044291686146, 0.34645262936276855, 0.35657392462760606, 0.3645988340704811, 0.11114138164133691, 0.1123321033371798, 0.09984231682205613, 0.10002860083812992, 0.10444096249379564, 0.10284531254670382, 0.10928710066484915, 0.110815606967132, 0.10585784883438831, 0.09954802753584713, 0.09281642354853392, 0.09655469389968618, 0.08827183810637473, 0.09394060449252994, 0.09441708139534877, 0.09078782834457211, 0.08660423206700707, 0.09095564434911008, 0.8891828643013922, 0.9367549478371706, 0.9164868033928594, 0.9152635016736034, 0.9475099500291384, 0.8721040764429069, 0.9275939039423637, 0.9161454450519924, 0.8368199356473026, 0.24812817548625576, 0.23685251018229814, 0.23725359129202894, 0.2819621687848124, 0.2445975061761061, 0.22814196986010993, 0.2433865733805335, 0.23690093137278356, 0.2349825411015639, 0.646368307707117, 0.5735469782440474, 0.5457619329374224, 0.5700138787592631, 0.5315115698371533, 0.5500134320676262, 0.5507459830371383, 0.530846757757004, 0.5336910901255512, 0.12568612026300197, 0.14709170075973166, 0.13906152326587906, 0.15321688260319843, 0.14844266951826435, 0.1370633085595464, 0.1303160703084666, 0.1662317676920948, 0.1636305808266657, 0.22744808408003014, 0.2114649266428288, 0.156850639425253, 0.14023915542773668, 0.1563426502830565, 0.12189344422741832, 0.15993509917394388, 0.13681379335293586, 0.14178909052763844, 0.13843746203599572, 0.14324653158933176, 0.17149589152274347, 0.16796309876958493, 0.16847956110635842, 0.1874787394568621, 0.12723416850289793, 0.17338692116237986, 0.14547610869488903, 0.22569064396225536, 0.27980091643109917, 0.23698972256141837, 0.2859066491686696, 0.24465315326388748, 0.27543771944076323, 0.27756682874563443, 0.3036994342949315, 0.3109506977347243, 0.07848732691148341, 0.07034821214278109, 0.07233910854065595, 0.055702854136833735, 0.06433770591942756, 0.06721205556112053, 0.061403510252284854, 0.08273886429203303, 0.051475327454613584, 0.14868601776084578, 0.16925937676355984, 0.15400686260242513, 0.14854246300220786, 0.16612239236122206, 0.1578295995327682, 0.1416254075912451, 0.15226642674777846, 0.1528870833501349, 0.47592451286119863, 0.500127239461783, 0.4540973900937856, 0.44938858905133594, 0.4989469827059777, 0.48399801921460806, 0.48093044553980324, 0.48199812812843146, 0.4592520952912763, 0.08955243429878623, 0.09306897006544312, 0.08220982664318377, 0.0794320414592028, 0.08593395525578418, 0.08914954490384297, 0.08667180831109833, 0.08968109489852849, 0.0888476679234933, 0.13340293174072337, 0.17336979704870648, 0.14243264668847655, 0.14409200056802696, 0.18639793599055465, 0.16349382598129192, 0.15783593300828347, 0.13474707734124824, 0.1399872043767073, 0.29583123883350904, 0.29790527071696904, 0.2943935495247181, 0.28957175700968996, 0.27977254194228274, 0.2944926318842701, 0.31576644010910315, 0.30839453640301895, 0.32537749903920776, 0.22662612335386934, 0.22600397793160276, 0.2275166623551219, 0.2190702083182251, 0.21496285877014643, 0.23125251365550337, 0.249057024369307, 0.2356946908680727, 0.2507097794892723, 0.19409896147084993, 0.1839659340097486, 0.18243366357873458, 0.17049094940741838, 0.19519611473217868, 0.18793110432430016, 0.19118839001967114, 0.19520157831417073, 0.2140786494412411, 0.1777029181499996, 0.1929649549336081, 0.1898539123802062, 0.17904248494992203, 0.19438226827640426, 0.18642005804329498, 0.18469135100686818, 0.18774155881985066, 0.18798180821418387, 0.31542374035986964, 0.19004956373145188, 0.383338810536075, 0.18476702338445905, 0.16961213725047508, 0.20074458103346815, 0.1686888066937372, 0.22936111087787292, 0.2934715139528862, 0.19199468409918818, 0.16897174303321172, 0.18275976689032591, 0.30948297419455517, 0.18822450636045218, 0.41817721454739576, 0.4130955485539304, 0.20235480242340376, 0.20314327388088071, 0.17794391470238624, 0.1806288088941066, 0.17572428182934496, 0.18789512573827405, 0.18551972256531157, 0.1799725263201417, 0.18197750648724131, 0.1804836930170377, 0.17739632825095175, 0.07701264028398236, 0.0791697356710993, 0.0746463253301648, 0.06709200930159964, 0.07319755131000094, 0.07930743979930688, 0.07160784325641767, 0.06881939257170688, 0.0786015376793966]}, "mutation_prompt": null}
{"id": "8bc19eee-271f-4f33-a683-a7a44e07d5c4", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Mutation with decay factor\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                decay = 1 - evals / self.budget\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Introducing a decay factor in the differential weight and a dynamic step size in local search to enhance convergence speed.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4baf5c05-68a7-468c-a480-8d1a03e56752", "metadata": {"aucs": [0.5529906100588962, 0.582142620771346, 0.5740645654493217, 0.6354304480596711, 0.5962729870131283, 0.6112371795776972, 0.6134701279736751, 0.5963330967621464, 0.5910439868193311, 0.3858325087026342, 0.3746504905874586, 0.37858972599945684, 0.3405341883861881, 0.3686050230178798, 0.3653044291686146, 0.34645262936276855, 0.35657392462760606, 0.3645988340704811, 0.11114138164133691, 0.1123321033371798, 0.09984231682205613, 0.10002860083812992, 0.10444096249379564, 0.10284531254670382, 0.10928710066484915, 0.110815606967132, 0.10585784883438831, 0.09954802753584713, 0.09281642354853392, 0.09655469389968618, 0.08827183810637473, 0.09394060449252994, 0.09441708139534877, 0.09078782834457211, 0.08660423206700707, 0.09095564434911008, 0.8891828643013922, 0.9367549478371706, 0.9164868033928594, 0.9152635016736034, 0.9475099500291384, 0.8721040764429069, 0.9275939039423637, 0.9161454450519924, 0.8368199356473026, 0.24812817548625576, 0.23685251018229814, 0.23725359129202894, 0.2819621687848124, 0.2445975061761061, 0.22814196986010993, 0.2433865733805335, 0.23690093137278356, 0.2349825411015639, 0.646368307707117, 0.5735469782440474, 0.5457619329374224, 0.5700138787592631, 0.5315115698371533, 0.5500134320676262, 0.5507459830371383, 0.530846757757004, 0.5336910901255512, 0.12568612026300197, 0.14709170075973166, 0.13906152326587906, 0.15321688260319843, 0.14844266951826435, 0.1370633085595464, 0.1303160703084666, 0.1662317676920948, 0.1636305808266657, 0.22744808408003014, 0.2114649266428288, 0.156850639425253, 0.14023915542773668, 0.1563426502830565, 0.12189344422741832, 0.15993509917394388, 0.13681379335293586, 0.14178909052763844, 0.13843746203599572, 0.14324653158933176, 0.17149589152274347, 0.16796309876958493, 0.16847956110635842, 0.1874787394568621, 0.12723416850289793, 0.17338692116237986, 0.14547610869488903, 0.22569064396225536, 0.27980091643109917, 0.23698972256141837, 0.2859066491686696, 0.24465315326388748, 0.27543771944076323, 0.27756682874563443, 0.3036994342949315, 0.3109506977347243, 0.07848732691148341, 0.07034821214278109, 0.07233910854065595, 0.055702854136833735, 0.06433770591942756, 0.06721205556112053, 0.061403510252284854, 0.08273886429203303, 0.051475327454613584, 0.14868601776084578, 0.16925937676355984, 0.15400686260242513, 0.14854246300220786, 0.16612239236122206, 0.1578295995327682, 0.1416254075912451, 0.15226642674777846, 0.1528870833501349, 0.47592451286119863, 0.500127239461783, 0.4540973900937856, 0.44938858905133594, 0.4989469827059777, 0.48399801921460806, 0.48093044553980324, 0.48199812812843146, 0.4592520952912763, 0.08955243429878623, 0.09306897006544312, 0.08220982664318377, 0.0794320414592028, 0.08593395525578418, 0.08914954490384297, 0.08667180831109833, 0.08968109489852849, 0.0888476679234933, 0.13340293174072337, 0.17336979704870648, 0.14243264668847655, 0.14409200056802696, 0.18639793599055465, 0.16349382598129192, 0.15783593300828347, 0.13474707734124824, 0.1399872043767073, 0.29583123883350904, 0.29790527071696904, 0.2943935495247181, 0.28957175700968996, 0.27977254194228274, 0.2944926318842701, 0.31576644010910315, 0.30839453640301895, 0.32537749903920776, 0.22662612335386934, 0.22600397793160276, 0.2275166623551219, 0.2190702083182251, 0.21496285877014643, 0.23125251365550337, 0.249057024369307, 0.2356946908680727, 0.2507097794892723, 0.19409896147084993, 0.1839659340097486, 0.18243366357873458, 0.17049094940741838, 0.19519611473217868, 0.18793110432430016, 0.19118839001967114, 0.19520157831417073, 0.2140786494412411, 0.1777029181499996, 0.1929649549336081, 0.1898539123802062, 0.17904248494992203, 0.19438226827640426, 0.18642005804329498, 0.18469135100686818, 0.18774155881985066, 0.18798180821418387, 0.31542374035986964, 0.19004956373145188, 0.383338810536075, 0.18476702338445905, 0.16961213725047508, 0.20074458103346815, 0.1686888066937372, 0.22936111087787292, 0.2934715139528862, 0.19199468409918818, 0.16897174303321172, 0.18275976689032591, 0.30948297419455517, 0.18822450636045218, 0.41817721454739576, 0.4130955485539304, 0.20235480242340376, 0.20314327388088071, 0.17794391470238624, 0.1806288088941066, 0.17572428182934496, 0.18789512573827405, 0.18551972256531157, 0.1799725263201417, 0.18197750648724131, 0.1804836930170377, 0.17739632825095175, 0.07701264028398236, 0.0791697356710993, 0.0746463253301648, 0.06709200930159964, 0.07319755131000094, 0.07930743979930688, 0.07160784325641767, 0.06881939257170688, 0.0786015376793966]}, "mutation_prompt": null}
{"id": "7296f870-74fe-4049-a97e-295cd93fafff", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Mutation with dynamic F adjustment\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                decay = 1 - evals / self.budget\n                dynamic_F = self.F * (1 - 0.5 * (evals / self.budget))\n                mutant = np.clip(a + dynamic_F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Introducing dynamic mutation factor adjustment to enhance exploration and exploitation balance in the optimization process.", "configspace": "", "generation": 16, "fitness": 0.27263814792563956, "feedback": "The algorithm HybridDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.20.", "error": "", "parent_id": "4baf5c05-68a7-468c-a480-8d1a03e56752", "metadata": {"aucs": [0.6111859594655333, 0.6122674665436627, 0.6300934093135728, 0.622382153922403, 0.6441350495309767, 0.6411255410370451, 0.6211384530709764, 0.6070637418255258, 0.6465089029102129, 0.4490978654544223, 0.37416470630871834, 0.4207479731693754, 0.40300999611485855, 0.37901156654623513, 0.3773405498966247, 0.42437322730595006, 0.40440732112034816, 0.37504108304525474, 0.12771101278571673, 0.13559682151010088, 0.1235542858742783, 0.13170038548443774, 0.12582115190148857, 0.13323155285573507, 0.11672891523391626, 0.11445270505884186, 0.13310921303311496, 0.11477708099720763, 0.10556857079598103, 0.10187482033655038, 0.1029828246549751, 0.1113062982193378, 0.10600215679365443, 0.1113737385970468, 0.09775453525103728, 0.10189674175682795, 0.8697420179976125, 0.9367597039206721, 0.9027951777164102, 0.862367704371726, 0.9475446384383786, 0.8659525837661128, 0.911594960995454, 0.9031647658912896, 0.9314683630812803, 0.2364885548649034, 0.20326012873237664, 0.23955895740552835, 0.2249085606435891, 0.2360891082653559, 0.24484355050566153, 0.24559102071217165, 0.25797075312357864, 0.22868076726249442, 0.6055751964637843, 0.6021470346253217, 0.6036778184402544, 0.6177806877363128, 0.6007387527433876, 0.5840376171433387, 0.6282199785622191, 0.5783300823970183, 0.6124777969592314, 0.12858761231035898, 0.1332286560247974, 0.15342596254738927, 0.14340711346842305, 0.17351437048333085, 0.14326408514769395, 0.2684971274040092, 0.12710236601945857, 0.15200170283337522, 0.13134462119444945, 0.12839890751325544, 0.16545912015368325, 0.1567260653293524, 0.13431762847948736, 0.14640152197282297, 0.21250447480790868, 0.132924118989461, 0.12233655983124003, 0.17734929719623482, 0.1924910917746948, 0.13189246489462259, 0.1567476912224287, 0.16675757094534382, 0.17288473922143333, 0.1772021189434514, 0.17449126692106187, 0.18413440729983999, 0.27033881654337844, 0.26028830173217543, 0.32453247393434403, 0.2616573800755536, 0.2645128413610024, 0.2645481547862212, 0.3191560572719876, 0.32893843456383076, 0.3415049927304753, 0.06468324086490151, 0.05422522736328317, 0.06716734129963697, 0.050984765490136086, 0.06168120987985026, 0.08572559578437866, 0.0960245010589088, 0.068334283837441, 0.07530781513267171, 0.16210409622132993, 0.1859341143899912, 0.15912686094012574, 0.17001823443071318, 0.16591889479030908, 0.19588871561005006, 0.21146569278004768, 0.15291772681798488, 0.17580921751225542, 0.4376371312687716, 0.46594002258380807, 0.5232728934199216, 0.49227359168902163, 0.5349082937746861, 0.5162564132556531, 0.5040302307067942, 0.4914042820229968, 0.4893348221670196, 0.10141894746879676, 0.10260358430950178, 0.11066856571082428, 0.09429067361129473, 0.0866222329887405, 0.09055020449690332, 0.11615824795037932, 0.10302606608651332, 0.09679927190372051, 0.17525258584005043, 0.1272382289889834, 0.14862551656111989, 0.14536239398526063, 0.17135761103484615, 0.13888687159930269, 0.15275906789536098, 0.141607450315281, 0.13976353209547399, 0.30578252225467173, 0.3207873182189195, 0.3257711628244314, 0.2941719331217878, 0.2889420999744522, 0.3224384166247901, 0.3255209742087123, 0.3528868343358811, 0.3370075479379938, 0.24152611063387053, 0.2359499673951857, 0.24695021480146473, 0.24168796119368618, 0.23537740653396688, 0.24561713831569987, 0.25295330772205193, 0.2610354920323352, 0.2701082065770588, 0.22517677044380524, 0.20196155720356224, 0.1771867373043966, 0.17795761705616564, 0.19419009187364678, 0.19038136146328555, 0.18496041387139062, 0.19260422166074087, 0.20084894327360503, 0.17874819704222422, 0.18972337086179225, 0.19561819931814262, 0.19502677656893408, 0.1880786252430856, 0.1874234174208561, 0.20802529107076384, 0.18837297360171468, 0.1978812723677854, 0.2793242820105628, 0.1804693087723761, 0.34091645745163945, 0.16498478379683834, 0.32280684228665246, 0.16891591315303756, 0.5205040277846888, 0.49216408391613653, 0.4679943703324265, 0.19435032850983835, 0.19353631102388003, 0.19290551288499413, 0.196793575931705, 0.19025092391797793, 0.3364037035435923, 0.1833304073299773, 0.2793574864345736, 0.41393838050891874, 0.1867670124765738, 0.17651906413345164, 0.19662495386667178, 0.18142101312010384, 0.1770542251781182, 0.1816133853946187, 0.17932245864657437, 0.1921248839365971, 0.18916740904488527, 0.07684428781416175, 0.07694903458642943, 0.07251990763039906, 0.0738205431486818, 0.07787426873021319, 0.07813236847607519, 0.07127202294496271, 0.0788123139031286, 0.08083320261279225]}, "mutation_prompt": null}
{"id": "1dff5e5d-b266-469d-b7b3-299477a4ecd3", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Mutation with dynamic F adjustment\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                decay = 1 - evals / self.budget\n                dynamic_F = self.F * (1 - 0.5 * (evals / self.budget))\n                mutant = np.clip(a + dynamic_F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Introducing dynamic mutation factor adjustment to enhance exploration and exploitation balance in the optimization process.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7296f870-74fe-4049-a97e-295cd93fafff", "metadata": {"aucs": [0.6111859594655333, 0.6122674665436627, 0.6300934093135728, 0.622382153922403, 0.6441350495309767, 0.6411255410370451, 0.6211384530709764, 0.6070637418255258, 0.6465089029102129, 0.4490978654544223, 0.37416470630871834, 0.4207479731693754, 0.40300999611485855, 0.37901156654623513, 0.3773405498966247, 0.42437322730595006, 0.40440732112034816, 0.37504108304525474, 0.12771101278571673, 0.13559682151010088, 0.1235542858742783, 0.13170038548443774, 0.12582115190148857, 0.13323155285573507, 0.11672891523391626, 0.11445270505884186, 0.13310921303311496, 0.11477708099720763, 0.10556857079598103, 0.10187482033655038, 0.1029828246549751, 0.1113062982193378, 0.10600215679365443, 0.1113737385970468, 0.09775453525103728, 0.10189674175682795, 0.8697420179976125, 0.9367597039206721, 0.9027951777164102, 0.862367704371726, 0.9475446384383786, 0.8659525837661128, 0.911594960995454, 0.9031647658912896, 0.9314683630812803, 0.2364885548649034, 0.20326012873237664, 0.23955895740552835, 0.2249085606435891, 0.2360891082653559, 0.24484355050566153, 0.24559102071217165, 0.25797075312357864, 0.22868076726249442, 0.6055751964637843, 0.6021470346253217, 0.6036778184402544, 0.6177806877363128, 0.6007387527433876, 0.5840376171433387, 0.6282199785622191, 0.5783300823970183, 0.6124777969592314, 0.12858761231035898, 0.1332286560247974, 0.15342596254738927, 0.14340711346842305, 0.17351437048333085, 0.14326408514769395, 0.2684971274040092, 0.12710236601945857, 0.15200170283337522, 0.13134462119444945, 0.12839890751325544, 0.16545912015368325, 0.1567260653293524, 0.13431762847948736, 0.14640152197282297, 0.21250447480790868, 0.132924118989461, 0.12233655983124003, 0.17734929719623482, 0.1924910917746948, 0.13189246489462259, 0.1567476912224287, 0.16675757094534382, 0.17288473922143333, 0.1772021189434514, 0.17449126692106187, 0.18413440729983999, 0.27033881654337844, 0.26028830173217543, 0.32453247393434403, 0.2616573800755536, 0.2645128413610024, 0.2645481547862212, 0.3191560572719876, 0.32893843456383076, 0.3415049927304753, 0.06468324086490151, 0.05422522736328317, 0.06716734129963697, 0.050984765490136086, 0.06168120987985026, 0.08572559578437866, 0.0960245010589088, 0.068334283837441, 0.07530781513267171, 0.16210409622132993, 0.1859341143899912, 0.15912686094012574, 0.17001823443071318, 0.16591889479030908, 0.19588871561005006, 0.21146569278004768, 0.15291772681798488, 0.17580921751225542, 0.4376371312687716, 0.46594002258380807, 0.5232728934199216, 0.49227359168902163, 0.5349082937746861, 0.5162564132556531, 0.5040302307067942, 0.4914042820229968, 0.4893348221670196, 0.10141894746879676, 0.10260358430950178, 0.11066856571082428, 0.09429067361129473, 0.0866222329887405, 0.09055020449690332, 0.11615824795037932, 0.10302606608651332, 0.09679927190372051, 0.17525258584005043, 0.1272382289889834, 0.14862551656111989, 0.14536239398526063, 0.17135761103484615, 0.13888687159930269, 0.15275906789536098, 0.141607450315281, 0.13976353209547399, 0.30578252225467173, 0.3207873182189195, 0.3257711628244314, 0.2941719331217878, 0.2889420999744522, 0.3224384166247901, 0.3255209742087123, 0.3528868343358811, 0.3370075479379938, 0.24152611063387053, 0.2359499673951857, 0.24695021480146473, 0.24168796119368618, 0.23537740653396688, 0.24561713831569987, 0.25295330772205193, 0.2610354920323352, 0.2701082065770588, 0.22517677044380524, 0.20196155720356224, 0.1771867373043966, 0.17795761705616564, 0.19419009187364678, 0.19038136146328555, 0.18496041387139062, 0.19260422166074087, 0.20084894327360503, 0.17874819704222422, 0.18972337086179225, 0.19561819931814262, 0.19502677656893408, 0.1880786252430856, 0.1874234174208561, 0.20802529107076384, 0.18837297360171468, 0.1978812723677854, 0.2793242820105628, 0.1804693087723761, 0.34091645745163945, 0.16498478379683834, 0.32280684228665246, 0.16891591315303756, 0.5205040277846888, 0.49216408391613653, 0.4679943703324265, 0.19435032850983835, 0.19353631102388003, 0.19290551288499413, 0.196793575931705, 0.19025092391797793, 0.3364037035435923, 0.1833304073299773, 0.2793574864345736, 0.41393838050891874, 0.1867670124765738, 0.17651906413345164, 0.19662495386667178, 0.18142101312010384, 0.1770542251781182, 0.1816133853946187, 0.17932245864657437, 0.1921248839365971, 0.18916740904488527, 0.07684428781416175, 0.07694903458642943, 0.07251990763039906, 0.0738205431486818, 0.07787426873021319, 0.07813236847607519, 0.07127202294496271, 0.0788123139031286, 0.08083320261279225]}, "mutation_prompt": null}
{"id": "6d23d414-21a1-4ddc-837b-4773467d1304", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Mutation with dynamic F adjustment\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                decay = 1 - evals / self.budget\n                dynamic_F = self.F * (1 - 0.5 * (evals / self.budget))\n                \n                # Adding a small adaptive noise factor\n                noise_factor = np.random.normal(0, 0.01, self.dim)\n                \n                mutant = np.clip(a + dynamic_F * decay * (b - c) + noise_factor, self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Integrating a small adaptive noise factor into the mutation process to enhance diversity and avoid premature convergence.", "configspace": "", "generation": 18, "fitness": 0.24265289712007704, "feedback": "The algorithm HybridDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.19.", "error": "", "parent_id": "7296f870-74fe-4049-a97e-295cd93fafff", "metadata": {"aucs": [0.5040223094955254, 0.5202312984212871, 0.5037802089022791, 0.5204608303611127, 0.5262993117110126, 0.5164419227898995, 0.5095650952754115, 0.5202989156904484, 0.5102229195840343, 0.14450350450947813, 0.1478200455183485, 0.17179320370308582, 0.1667484444105859, 0.14180301498060977, 0.15941945177229377, 0.17461908604901488, 0.15900673357333106, 0.16464414281558404, 0.1187213924650361, 0.12180812701042487, 0.1199925665558349, 0.10595645400519516, 0.13050386955826776, 0.11423049303318711, 0.12185234759901908, 0.12874391946537433, 0.13260557110746374, 0.11538273696239099, 0.0997235763291695, 0.09766460426708212, 0.10425971292802605, 0.11656436120852198, 0.11435319178177217, 0.10788836859133566, 0.09839079028617159, 0.10636661547885684, 0.9359062645106423, 0.9525484197596962, 0.8627036870178139, 0.9039418405325106, 0.9253775346427225, 0.8813006979465414, 0.8680763054514682, 0.9500355579029588, 0.8404057510397858, 0.2751650733273153, 0.27538743985530834, 0.2903129238333708, 0.2599156354895428, 0.27092290860818635, 0.2377488256672181, 0.28542602780926163, 0.28311929139478853, 0.2657089486867995, 0.5605222107619636, 0.5710738010268701, 0.615828912350705, 0.6366304529624105, 0.6107457053870042, 0.5949578722938494, 0.6256931046484899, 0.5727651861282316, 0.5865228420827713, 0.1756470791444572, 0.13084845068706474, 0.14199257425103462, 0.16472461153150475, 0.12170738069531817, 0.1766578259910686, 0.1470929719699403, 0.23009339746673008, 0.14243139531889282, 0.13960955622304405, 0.10676979935937092, 0.18830769868167518, 0.13629310876106482, 0.1544403502079058, 0.11650617494630222, 0.1404704196205856, 0.16450025306246385, 0.12266936489522484, 0.09516205981106018, 0.09555130882120755, 0.08683761681016477, 0.10560574282563373, 0.08294881026141632, 0.11661004204559922, 0.11518781201327688, 0.08636462518080534, 0.10260143637217678, 0.14979590959986122, 0.1612015075528721, 0.13469218476920397, 0.15233412706651273, 0.16990367983339383, 0.13343853161517494, 0.16088064776605948, 0.19183794299963497, 0.1640119509698732, 0.03369930322744408, 0.04187629783720492, 0.033672858411430195, 0.04104590492089688, 0.03370679356868711, 0.02425374946700798, 0.052124989906760844, 0.036598956509482417, 0.057141809937072296, 0.12398771937019826, 0.13167119792686333, 0.1306042666494568, 0.13480131185959887, 0.1326889309514525, 0.14516168756450243, 0.14048119103510504, 0.1429013465032415, 0.1344348604833855, 0.4457481422559536, 0.43195027558143806, 0.43586805549771, 0.4422456103833817, 0.44695871966636336, 0.4381267668033775, 0.45390059603878785, 0.42341363951966393, 0.4358443637266961, 0.09494776219876044, 0.10555138218043625, 0.10250738942378412, 0.10218429127109052, 0.10877173480665825, 0.11191053150262964, 0.10016289155378721, 0.08955182399621897, 0.09994281617419931, 0.1637482292658733, 0.19161793223001722, 0.1473492088087225, 0.14824717043112867, 0.13895878262848405, 0.15587630687070464, 0.13785081463459115, 0.1412473176371346, 0.13283249705523836, 0.29995920131195075, 0.29302403566679136, 0.30625625056373174, 0.29531579028659705, 0.29218405383378776, 0.29149261530475623, 0.30826591784160395, 0.30803523038058733, 0.30578285962615737, 0.23270154061301773, 0.2257848491262755, 0.23611033465885334, 0.23063738032471026, 0.2317982275597822, 0.21765989823544363, 0.24634951758831058, 0.23953698619162123, 0.233635817487982, 0.1987557639288633, 0.1883462742674996, 0.18592584496765407, 0.17911443368162694, 0.17869943744309535, 0.18857273634939598, 0.20436755331988155, 0.18611129342943333, 0.1940195867942025, 0.19512261435056322, 0.19327553729486935, 0.18794264775621183, 0.20767110371174224, 0.2090698915567466, 0.1888789741492577, 0.18329684256292356, 0.2130232364081761, 0.19324684912219758, 0.15894722420048257, 0.303514654937203, 0.3316002265067639, 0.17497774751313921, 0.34752179118158233, 0.30910544983662525, 0.30288005266362217, 0.20360133831150884, 0.3995638443849845, 0.19137286080835092, 0.16669357043365396, 0.48149207217939405, 0.4187631456082187, 0.1752361573022304, 0.3220629398640241, 0.20141335299540042, 0.2576895748211968, 0.20247690548465158, 0.1941822954671505, 0.1913437785310722, 0.1698424230508292, 0.18722246514395524, 0.1920142071857185, 0.1762634344353844, 0.18054498587881807, 0.17721859380336624, 0.18029245244416947, 0.07222085472696493, 0.07343293988204147, 0.07820691633916943, 0.0811261626535954, 0.07639404718029963, 0.07546492995794074, 0.07594564811173365, 0.07612611441004324, 0.07697055529016039]}, "mutation_prompt": null}
{"id": "7d11d073-4ea7-49b3-8d59-00d46d9bf440", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Mutation with dynamic F adjustment\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                decay = 1 - evals / self.budget\n                dynamic_F = self.F * (1 - 0.5 * (evals / self.budget))\n                mutant = np.clip(a + dynamic_F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Introducing dynamic mutation factor adjustment to enhance exploration and exploitation balance in the optimization process.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7296f870-74fe-4049-a97e-295cd93fafff", "metadata": {"aucs": [0.6111859594655333, 0.6122674665436627, 0.6300934093135728, 0.622382153922403, 0.6441350495309767, 0.6411255410370451, 0.6211384530709764, 0.6070637418255258, 0.6465089029102129, 0.4490978654544223, 0.37416470630871834, 0.4207479731693754, 0.40300999611485855, 0.37901156654623513, 0.3773405498966247, 0.42437322730595006, 0.40440732112034816, 0.37504108304525474, 0.12771101278571673, 0.13559682151010088, 0.1235542858742783, 0.13170038548443774, 0.12582115190148857, 0.13323155285573507, 0.11672891523391626, 0.11445270505884186, 0.13310921303311496, 0.11477708099720763, 0.10556857079598103, 0.10187482033655038, 0.1029828246549751, 0.1113062982193378, 0.10600215679365443, 0.1113737385970468, 0.09775453525103728, 0.10189674175682795, 0.8697420179976125, 0.9367597039206721, 0.9027951777164102, 0.862367704371726, 0.9475446384383786, 0.8659525837661128, 0.911594960995454, 0.9031647658912896, 0.9314683630812803, 0.2364885548649034, 0.20326012873237664, 0.23955895740552835, 0.2249085606435891, 0.2360891082653559, 0.24484355050566153, 0.24559102071217165, 0.25797075312357864, 0.22868076726249442, 0.6055751964637843, 0.6021470346253217, 0.6036778184402544, 0.6177806877363128, 0.6007387527433876, 0.5840376171433387, 0.6282199785622191, 0.5783300823970183, 0.6124777969592314, 0.12858761231035898, 0.1332286560247974, 0.15342596254738927, 0.14340711346842305, 0.17351437048333085, 0.14326408514769395, 0.2684971274040092, 0.12710236601945857, 0.15200170283337522, 0.13134462119444945, 0.12839890751325544, 0.16545912015368325, 0.1567260653293524, 0.13431762847948736, 0.14640152197282297, 0.21250447480790868, 0.132924118989461, 0.12233655983124003, 0.17734929719623482, 0.1924910917746948, 0.13189246489462259, 0.1567476912224287, 0.16675757094534382, 0.17288473922143333, 0.1772021189434514, 0.17449126692106187, 0.18413440729983999, 0.27033881654337844, 0.26028830173217543, 0.32453247393434403, 0.2616573800755536, 0.2645128413610024, 0.2645481547862212, 0.3191560572719876, 0.32893843456383076, 0.3415049927304753, 0.06468324086490151, 0.05422522736328317, 0.06716734129963697, 0.050984765490136086, 0.06168120987985026, 0.08572559578437866, 0.0960245010589088, 0.068334283837441, 0.07530781513267171, 0.16210409622132993, 0.1859341143899912, 0.15912686094012574, 0.17001823443071318, 0.16591889479030908, 0.19588871561005006, 0.21146569278004768, 0.15291772681798488, 0.17580921751225542, 0.4376371312687716, 0.46594002258380807, 0.5232728934199216, 0.49227359168902163, 0.5349082937746861, 0.5162564132556531, 0.5040302307067942, 0.4914042820229968, 0.4893348221670196, 0.10141894746879676, 0.10260358430950178, 0.11066856571082428, 0.09429067361129473, 0.0866222329887405, 0.09055020449690332, 0.11615824795037932, 0.10302606608651332, 0.09679927190372051, 0.17525258584005043, 0.1272382289889834, 0.14862551656111989, 0.14536239398526063, 0.17135761103484615, 0.13888687159930269, 0.15275906789536098, 0.141607450315281, 0.13976353209547399, 0.30578252225467173, 0.3207873182189195, 0.3257711628244314, 0.2941719331217878, 0.2889420999744522, 0.3224384166247901, 0.3255209742087123, 0.3528868343358811, 0.3370075479379938, 0.24152611063387053, 0.2359499673951857, 0.24695021480146473, 0.24168796119368618, 0.23537740653396688, 0.24561713831569987, 0.25295330772205193, 0.2610354920323352, 0.2701082065770588, 0.22517677044380524, 0.20196155720356224, 0.1771867373043966, 0.17795761705616564, 0.19419009187364678, 0.19038136146328555, 0.18496041387139062, 0.19260422166074087, 0.20084894327360503, 0.17874819704222422, 0.18972337086179225, 0.19561819931814262, 0.19502677656893408, 0.1880786252430856, 0.1874234174208561, 0.20802529107076384, 0.18837297360171468, 0.1978812723677854, 0.2793242820105628, 0.1804693087723761, 0.34091645745163945, 0.16498478379683834, 0.32280684228665246, 0.16891591315303756, 0.5205040277846888, 0.49216408391613653, 0.4679943703324265, 0.19435032850983835, 0.19353631102388003, 0.19290551288499413, 0.196793575931705, 0.19025092391797793, 0.3364037035435923, 0.1833304073299773, 0.2793574864345736, 0.41393838050891874, 0.1867670124765738, 0.17651906413345164, 0.19662495386667178, 0.18142101312010384, 0.1770542251781182, 0.1816133853946187, 0.17932245864657437, 0.1921248839365971, 0.18916740904488527, 0.07684428781416175, 0.07694903458642943, 0.07251990763039906, 0.0738205431486818, 0.07787426873021319, 0.07813236847607519, 0.07127202294496271, 0.0788123139031286, 0.08083320261279225]}, "mutation_prompt": null}
{"id": "e2530773-7128-46c2-b796-81fc86da2bca", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Mutation with dynamic F adjustment\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                decay = 1 - evals / self.budget\n                dynamic_F = self.F * (1 - 0.5 * (evals / self.budget))\n                mutant = np.clip(a + dynamic_F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Introducing dynamic mutation factor adjustment to enhance exploration and exploitation balance in the optimization process.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7296f870-74fe-4049-a97e-295cd93fafff", "metadata": {"aucs": [0.6111859594655333, 0.6122674665436627, 0.6300934093135728, 0.622382153922403, 0.6441350495309767, 0.6411255410370451, 0.6211384530709764, 0.6070637418255258, 0.6465089029102129, 0.4490978654544223, 0.37416470630871834, 0.4207479731693754, 0.40300999611485855, 0.37901156654623513, 0.3773405498966247, 0.42437322730595006, 0.40440732112034816, 0.37504108304525474, 0.12771101278571673, 0.13559682151010088, 0.1235542858742783, 0.13170038548443774, 0.12582115190148857, 0.13323155285573507, 0.11672891523391626, 0.11445270505884186, 0.13310921303311496, 0.11477708099720763, 0.10556857079598103, 0.10187482033655038, 0.1029828246549751, 0.1113062982193378, 0.10600215679365443, 0.1113737385970468, 0.09775453525103728, 0.10189674175682795, 0.8697420179976125, 0.9367597039206721, 0.9027951777164102, 0.862367704371726, 0.9475446384383786, 0.8659525837661128, 0.911594960995454, 0.9031647658912896, 0.9314683630812803, 0.2364885548649034, 0.20326012873237664, 0.23955895740552835, 0.2249085606435891, 0.2360891082653559, 0.24484355050566153, 0.24559102071217165, 0.25797075312357864, 0.22868076726249442, 0.6055751964637843, 0.6021470346253217, 0.6036778184402544, 0.6177806877363128, 0.6007387527433876, 0.5840376171433387, 0.6282199785622191, 0.5783300823970183, 0.6124777969592314, 0.12858761231035898, 0.1332286560247974, 0.15342596254738927, 0.14340711346842305, 0.17351437048333085, 0.14326408514769395, 0.2684971274040092, 0.12710236601945857, 0.15200170283337522, 0.13134462119444945, 0.12839890751325544, 0.16545912015368325, 0.1567260653293524, 0.13431762847948736, 0.14640152197282297, 0.21250447480790868, 0.132924118989461, 0.12233655983124003, 0.17734929719623482, 0.1924910917746948, 0.13189246489462259, 0.1567476912224287, 0.16675757094534382, 0.17288473922143333, 0.1772021189434514, 0.17449126692106187, 0.18413440729983999, 0.27033881654337844, 0.26028830173217543, 0.32453247393434403, 0.2616573800755536, 0.2645128413610024, 0.2645481547862212, 0.3191560572719876, 0.32893843456383076, 0.3415049927304753, 0.06468324086490151, 0.05422522736328317, 0.06716734129963697, 0.050984765490136086, 0.06168120987985026, 0.08572559578437866, 0.0960245010589088, 0.068334283837441, 0.07530781513267171, 0.16210409622132993, 0.1859341143899912, 0.15912686094012574, 0.17001823443071318, 0.16591889479030908, 0.19588871561005006, 0.21146569278004768, 0.15291772681798488, 0.17580921751225542, 0.4376371312687716, 0.46594002258380807, 0.5232728934199216, 0.49227359168902163, 0.5349082937746861, 0.5162564132556531, 0.5040302307067942, 0.4914042820229968, 0.4893348221670196, 0.10141894746879676, 0.10260358430950178, 0.11066856571082428, 0.09429067361129473, 0.0866222329887405, 0.09055020449690332, 0.11615824795037932, 0.10302606608651332, 0.09679927190372051, 0.17525258584005043, 0.1272382289889834, 0.14862551656111989, 0.14536239398526063, 0.17135761103484615, 0.13888687159930269, 0.15275906789536098, 0.141607450315281, 0.13976353209547399, 0.30578252225467173, 0.3207873182189195, 0.3257711628244314, 0.2941719331217878, 0.2889420999744522, 0.3224384166247901, 0.3255209742087123, 0.3528868343358811, 0.3370075479379938, 0.24152611063387053, 0.2359499673951857, 0.24695021480146473, 0.24168796119368618, 0.23537740653396688, 0.24561713831569987, 0.25295330772205193, 0.2610354920323352, 0.2701082065770588, 0.22517677044380524, 0.20196155720356224, 0.1771867373043966, 0.17795761705616564, 0.19419009187364678, 0.19038136146328555, 0.18496041387139062, 0.19260422166074087, 0.20084894327360503, 0.17874819704222422, 0.18972337086179225, 0.19561819931814262, 0.19502677656893408, 0.1880786252430856, 0.1874234174208561, 0.20802529107076384, 0.18837297360171468, 0.1978812723677854, 0.2793242820105628, 0.1804693087723761, 0.34091645745163945, 0.16498478379683834, 0.32280684228665246, 0.16891591315303756, 0.5205040277846888, 0.49216408391613653, 0.4679943703324265, 0.19435032850983835, 0.19353631102388003, 0.19290551288499413, 0.196793575931705, 0.19025092391797793, 0.3364037035435923, 0.1833304073299773, 0.2793574864345736, 0.41393838050891874, 0.1867670124765738, 0.17651906413345164, 0.19662495386667178, 0.18142101312010384, 0.1770542251781182, 0.1816133853946187, 0.17932245864657437, 0.1921248839365971, 0.18916740904488527, 0.07684428781416175, 0.07694903458642943, 0.07251990763039906, 0.0738205431486818, 0.07787426873021319, 0.07813236847607519, 0.07127202294496271, 0.0788123139031286, 0.08083320261279225]}, "mutation_prompt": null}
{"id": "9b247b6b-005d-4022-9d75-da4e1b142825", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Mutation with dynamic F adjustment\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                decay = 1 - evals / self.budget\n                dynamic_F = self.F * (1 - 0.5 * (evals / self.budget))\n                mutant = np.clip(a + dynamic_F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Introducing dynamic mutation factor adjustment to enhance exploration and exploitation balance in the optimization process.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7296f870-74fe-4049-a97e-295cd93fafff", "metadata": {"aucs": [0.6111859594655333, 0.6122674665436627, 0.6300934093135728, 0.622382153922403, 0.6441350495309767, 0.6411255410370451, 0.6211384530709764, 0.6070637418255258, 0.6465089029102129, 0.4490978654544223, 0.37416470630871834, 0.4207479731693754, 0.40300999611485855, 0.37901156654623513, 0.3773405498966247, 0.42437322730595006, 0.40440732112034816, 0.37504108304525474, 0.12771101278571673, 0.13559682151010088, 0.1235542858742783, 0.13170038548443774, 0.12582115190148857, 0.13323155285573507, 0.11672891523391626, 0.11445270505884186, 0.13310921303311496, 0.11477708099720763, 0.10556857079598103, 0.10187482033655038, 0.1029828246549751, 0.1113062982193378, 0.10600215679365443, 0.1113737385970468, 0.09775453525103728, 0.10189674175682795, 0.8697420179976125, 0.9367597039206721, 0.9027951777164102, 0.862367704371726, 0.9475446384383786, 0.8659525837661128, 0.911594960995454, 0.9031647658912896, 0.9314683630812803, 0.2364885548649034, 0.20326012873237664, 0.23955895740552835, 0.2249085606435891, 0.2360891082653559, 0.24484355050566153, 0.24559102071217165, 0.25797075312357864, 0.22868076726249442, 0.6055751964637843, 0.6021470346253217, 0.6036778184402544, 0.6177806877363128, 0.6007387527433876, 0.5840376171433387, 0.6282199785622191, 0.5783300823970183, 0.6124777969592314, 0.12858761231035898, 0.1332286560247974, 0.15342596254738927, 0.14340711346842305, 0.17351437048333085, 0.14326408514769395, 0.2684971274040092, 0.12710236601945857, 0.15200170283337522, 0.13134462119444945, 0.12839890751325544, 0.16545912015368325, 0.1567260653293524, 0.13431762847948736, 0.14640152197282297, 0.21250447480790868, 0.132924118989461, 0.12233655983124003, 0.17734929719623482, 0.1924910917746948, 0.13189246489462259, 0.1567476912224287, 0.16675757094534382, 0.17288473922143333, 0.1772021189434514, 0.17449126692106187, 0.18413440729983999, 0.27033881654337844, 0.26028830173217543, 0.32453247393434403, 0.2616573800755536, 0.2645128413610024, 0.2645481547862212, 0.3191560572719876, 0.32893843456383076, 0.3415049927304753, 0.06468324086490151, 0.05422522736328317, 0.06716734129963697, 0.050984765490136086, 0.06168120987985026, 0.08572559578437866, 0.0960245010589088, 0.068334283837441, 0.07530781513267171, 0.16210409622132993, 0.1859341143899912, 0.15912686094012574, 0.17001823443071318, 0.16591889479030908, 0.19588871561005006, 0.21146569278004768, 0.15291772681798488, 0.17580921751225542, 0.4376371312687716, 0.46594002258380807, 0.5232728934199216, 0.49227359168902163, 0.5349082937746861, 0.5162564132556531, 0.5040302307067942, 0.4914042820229968, 0.4893348221670196, 0.10141894746879676, 0.10260358430950178, 0.11066856571082428, 0.09429067361129473, 0.0866222329887405, 0.09055020449690332, 0.11615824795037932, 0.10302606608651332, 0.09679927190372051, 0.17525258584005043, 0.1272382289889834, 0.14862551656111989, 0.14536239398526063, 0.17135761103484615, 0.13888687159930269, 0.15275906789536098, 0.141607450315281, 0.13976353209547399, 0.30578252225467173, 0.3207873182189195, 0.3257711628244314, 0.2941719331217878, 0.2889420999744522, 0.3224384166247901, 0.3255209742087123, 0.3528868343358811, 0.3370075479379938, 0.24152611063387053, 0.2359499673951857, 0.24695021480146473, 0.24168796119368618, 0.23537740653396688, 0.24561713831569987, 0.25295330772205193, 0.2610354920323352, 0.2701082065770588, 0.22517677044380524, 0.20196155720356224, 0.1771867373043966, 0.17795761705616564, 0.19419009187364678, 0.19038136146328555, 0.18496041387139062, 0.19260422166074087, 0.20084894327360503, 0.17874819704222422, 0.18972337086179225, 0.19561819931814262, 0.19502677656893408, 0.1880786252430856, 0.1874234174208561, 0.20802529107076384, 0.18837297360171468, 0.1978812723677854, 0.2793242820105628, 0.1804693087723761, 0.34091645745163945, 0.16498478379683834, 0.32280684228665246, 0.16891591315303756, 0.5205040277846888, 0.49216408391613653, 0.4679943703324265, 0.19435032850983835, 0.19353631102388003, 0.19290551288499413, 0.196793575931705, 0.19025092391797793, 0.3364037035435923, 0.1833304073299773, 0.2793574864345736, 0.41393838050891874, 0.1867670124765738, 0.17651906413345164, 0.19662495386667178, 0.18142101312010384, 0.1770542251781182, 0.1816133853946187, 0.17932245864657437, 0.1921248839365971, 0.18916740904488527, 0.07684428781416175, 0.07694903458642943, 0.07251990763039906, 0.0738205431486818, 0.07787426873021319, 0.07813236847607519, 0.07127202294496271, 0.0788123139031286, 0.08083320261279225]}, "mutation_prompt": null}
{"id": "a1a23afc-7ddc-4011-81f4-7553aec00ffb", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Mutation with dynamic F adjustment\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                decay = 1 - evals / self.budget\n                dynamic_F = self.F * (1 - 0.5 * (evals / self.budget))\n                mutant = np.clip(a + dynamic_F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Introducing dynamic mutation factor adjustment to enhance exploration and exploitation balance in the optimization process.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7296f870-74fe-4049-a97e-295cd93fafff", "metadata": {"aucs": [0.6111859594655333, 0.6122674665436627, 0.6300934093135728, 0.622382153922403, 0.6441350495309767, 0.6411255410370451, 0.6211384530709764, 0.6070637418255258, 0.6465089029102129, 0.4490978654544223, 0.37416470630871834, 0.4207479731693754, 0.40300999611485855, 0.37901156654623513, 0.3773405498966247, 0.42437322730595006, 0.40440732112034816, 0.37504108304525474, 0.12771101278571673, 0.13559682151010088, 0.1235542858742783, 0.13170038548443774, 0.12582115190148857, 0.13323155285573507, 0.11672891523391626, 0.11445270505884186, 0.13310921303311496, 0.11477708099720763, 0.10556857079598103, 0.10187482033655038, 0.1029828246549751, 0.1113062982193378, 0.10600215679365443, 0.1113737385970468, 0.09775453525103728, 0.10189674175682795, 0.8697420179976125, 0.9367597039206721, 0.9027951777164102, 0.862367704371726, 0.9475446384383786, 0.8659525837661128, 0.911594960995454, 0.9031647658912896, 0.9314683630812803, 0.2364885548649034, 0.20326012873237664, 0.23955895740552835, 0.2249085606435891, 0.2360891082653559, 0.24484355050566153, 0.24559102071217165, 0.25797075312357864, 0.22868076726249442, 0.6055751964637843, 0.6021470346253217, 0.6036778184402544, 0.6177806877363128, 0.6007387527433876, 0.5840376171433387, 0.6282199785622191, 0.5783300823970183, 0.6124777969592314, 0.12858761231035898, 0.1332286560247974, 0.15342596254738927, 0.14340711346842305, 0.17351437048333085, 0.14326408514769395, 0.2684971274040092, 0.12710236601945857, 0.15200170283337522, 0.13134462119444945, 0.12839890751325544, 0.16545912015368325, 0.1567260653293524, 0.13431762847948736, 0.14640152197282297, 0.21250447480790868, 0.132924118989461, 0.12233655983124003, 0.17734929719623482, 0.1924910917746948, 0.13189246489462259, 0.1567476912224287, 0.16675757094534382, 0.17288473922143333, 0.1772021189434514, 0.17449126692106187, 0.18413440729983999, 0.27033881654337844, 0.26028830173217543, 0.32453247393434403, 0.2616573800755536, 0.2645128413610024, 0.2645481547862212, 0.3191560572719876, 0.32893843456383076, 0.3415049927304753, 0.06468324086490151, 0.05422522736328317, 0.06716734129963697, 0.050984765490136086, 0.06168120987985026, 0.08572559578437866, 0.0960245010589088, 0.068334283837441, 0.07530781513267171, 0.16210409622132993, 0.1859341143899912, 0.15912686094012574, 0.17001823443071318, 0.16591889479030908, 0.19588871561005006, 0.21146569278004768, 0.15291772681798488, 0.17580921751225542, 0.4376371312687716, 0.46594002258380807, 0.5232728934199216, 0.49227359168902163, 0.5349082937746861, 0.5162564132556531, 0.5040302307067942, 0.4914042820229968, 0.4893348221670196, 0.10141894746879676, 0.10260358430950178, 0.11066856571082428, 0.09429067361129473, 0.0866222329887405, 0.09055020449690332, 0.11615824795037932, 0.10302606608651332, 0.09679927190372051, 0.17525258584005043, 0.1272382289889834, 0.14862551656111989, 0.14536239398526063, 0.17135761103484615, 0.13888687159930269, 0.15275906789536098, 0.141607450315281, 0.13976353209547399, 0.30578252225467173, 0.3207873182189195, 0.3257711628244314, 0.2941719331217878, 0.2889420999744522, 0.3224384166247901, 0.3255209742087123, 0.3528868343358811, 0.3370075479379938, 0.24152611063387053, 0.2359499673951857, 0.24695021480146473, 0.24168796119368618, 0.23537740653396688, 0.24561713831569987, 0.25295330772205193, 0.2610354920323352, 0.2701082065770588, 0.22517677044380524, 0.20196155720356224, 0.1771867373043966, 0.17795761705616564, 0.19419009187364678, 0.19038136146328555, 0.18496041387139062, 0.19260422166074087, 0.20084894327360503, 0.17874819704222422, 0.18972337086179225, 0.19561819931814262, 0.19502677656893408, 0.1880786252430856, 0.1874234174208561, 0.20802529107076384, 0.18837297360171468, 0.1978812723677854, 0.2793242820105628, 0.1804693087723761, 0.34091645745163945, 0.16498478379683834, 0.32280684228665246, 0.16891591315303756, 0.5205040277846888, 0.49216408391613653, 0.4679943703324265, 0.19435032850983835, 0.19353631102388003, 0.19290551288499413, 0.196793575931705, 0.19025092391797793, 0.3364037035435923, 0.1833304073299773, 0.2793574864345736, 0.41393838050891874, 0.1867670124765738, 0.17651906413345164, 0.19662495386667178, 0.18142101312010384, 0.1770542251781182, 0.1816133853946187, 0.17932245864657437, 0.1921248839365971, 0.18916740904488527, 0.07684428781416175, 0.07694903458642943, 0.07251990763039906, 0.0738205431486818, 0.07787426873021319, 0.07813236847607519, 0.07127202294496271, 0.0788123139031286, 0.08083320261279225]}, "mutation_prompt": null}
{"id": "f7d70c7e-76fc-4847-8254-0b98b8dfd4ed", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Mutation with dynamic F adjustment\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                decay = 1 - evals / self.budget\n                dynamic_F = self.F * (1 - 0.5 * (evals / self.budget))\n                mutant = np.clip(a + dynamic_F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Introducing dynamic mutation factor adjustment to enhance exploration and exploitation balance in the optimization process.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7296f870-74fe-4049-a97e-295cd93fafff", "metadata": {"aucs": [0.6111859594655333, 0.6122674665436627, 0.6300934093135728, 0.622382153922403, 0.6441350495309767, 0.6411255410370451, 0.6211384530709764, 0.6070637418255258, 0.6465089029102129, 0.4490978654544223, 0.37416470630871834, 0.4207479731693754, 0.40300999611485855, 0.37901156654623513, 0.3773405498966247, 0.42437322730595006, 0.40440732112034816, 0.37504108304525474, 0.12771101278571673, 0.13559682151010088, 0.1235542858742783, 0.13170038548443774, 0.12582115190148857, 0.13323155285573507, 0.11672891523391626, 0.11445270505884186, 0.13310921303311496, 0.11477708099720763, 0.10556857079598103, 0.10187482033655038, 0.1029828246549751, 0.1113062982193378, 0.10600215679365443, 0.1113737385970468, 0.09775453525103728, 0.10189674175682795, 0.8697420179976125, 0.9367597039206721, 0.9027951777164102, 0.862367704371726, 0.9475446384383786, 0.8659525837661128, 0.911594960995454, 0.9031647658912896, 0.9314683630812803, 0.2364885548649034, 0.20326012873237664, 0.23955895740552835, 0.2249085606435891, 0.2360891082653559, 0.24484355050566153, 0.24559102071217165, 0.25797075312357864, 0.22868076726249442, 0.6055751964637843, 0.6021470346253217, 0.6036778184402544, 0.6177806877363128, 0.6007387527433876, 0.5840376171433387, 0.6282199785622191, 0.5783300823970183, 0.6124777969592314, 0.12858761231035898, 0.1332286560247974, 0.15342596254738927, 0.14340711346842305, 0.17351437048333085, 0.14326408514769395, 0.2684971274040092, 0.12710236601945857, 0.15200170283337522, 0.13134462119444945, 0.12839890751325544, 0.16545912015368325, 0.1567260653293524, 0.13431762847948736, 0.14640152197282297, 0.21250447480790868, 0.132924118989461, 0.12233655983124003, 0.17734929719623482, 0.1924910917746948, 0.13189246489462259, 0.1567476912224287, 0.16675757094534382, 0.17288473922143333, 0.1772021189434514, 0.17449126692106187, 0.18413440729983999, 0.27033881654337844, 0.26028830173217543, 0.32453247393434403, 0.2616573800755536, 0.2645128413610024, 0.2645481547862212, 0.3191560572719876, 0.32893843456383076, 0.3415049927304753, 0.06468324086490151, 0.05422522736328317, 0.06716734129963697, 0.050984765490136086, 0.06168120987985026, 0.08572559578437866, 0.0960245010589088, 0.068334283837441, 0.07530781513267171, 0.16210409622132993, 0.1859341143899912, 0.15912686094012574, 0.17001823443071318, 0.16591889479030908, 0.19588871561005006, 0.21146569278004768, 0.15291772681798488, 0.17580921751225542, 0.4376371312687716, 0.46594002258380807, 0.5232728934199216, 0.49227359168902163, 0.5349082937746861, 0.5162564132556531, 0.5040302307067942, 0.4914042820229968, 0.4893348221670196, 0.10141894746879676, 0.10260358430950178, 0.11066856571082428, 0.09429067361129473, 0.0866222329887405, 0.09055020449690332, 0.11615824795037932, 0.10302606608651332, 0.09679927190372051, 0.17525258584005043, 0.1272382289889834, 0.14862551656111989, 0.14536239398526063, 0.17135761103484615, 0.13888687159930269, 0.15275906789536098, 0.141607450315281, 0.13976353209547399, 0.30578252225467173, 0.3207873182189195, 0.3257711628244314, 0.2941719331217878, 0.2889420999744522, 0.3224384166247901, 0.3255209742087123, 0.3528868343358811, 0.3370075479379938, 0.24152611063387053, 0.2359499673951857, 0.24695021480146473, 0.24168796119368618, 0.23537740653396688, 0.24561713831569987, 0.25295330772205193, 0.2610354920323352, 0.2701082065770588, 0.22517677044380524, 0.20196155720356224, 0.1771867373043966, 0.17795761705616564, 0.19419009187364678, 0.19038136146328555, 0.18496041387139062, 0.19260422166074087, 0.20084894327360503, 0.17874819704222422, 0.18972337086179225, 0.19561819931814262, 0.19502677656893408, 0.1880786252430856, 0.1874234174208561, 0.20802529107076384, 0.18837297360171468, 0.1978812723677854, 0.2793242820105628, 0.1804693087723761, 0.34091645745163945, 0.16498478379683834, 0.32280684228665246, 0.16891591315303756, 0.5205040277846888, 0.49216408391613653, 0.4679943703324265, 0.19435032850983835, 0.19353631102388003, 0.19290551288499413, 0.196793575931705, 0.19025092391797793, 0.3364037035435923, 0.1833304073299773, 0.2793574864345736, 0.41393838050891874, 0.1867670124765738, 0.17651906413345164, 0.19662495386667178, 0.18142101312010384, 0.1770542251781182, 0.1816133853946187, 0.17932245864657437, 0.1921248839365971, 0.18916740904488527, 0.07684428781416175, 0.07694903458642943, 0.07251990763039906, 0.0738205431486818, 0.07787426873021319, 0.07813236847607519, 0.07127202294496271, 0.0788123139031286, 0.08083320261279225]}, "mutation_prompt": null}
{"id": "a036d735-0e9d-4b72-bfbb-ff1ee8dcedf6", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        prev_best_fitness = fitness[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                decay = 1 - evals / self.budget\n                convergence_rate = (fitness[best_idx] - prev_best_fitness) / prev_best_fitness if prev_best_fitness != 0 else 1\n                dynamic_F = self.F * (1 - 0.5 * evals / self.budget) * convergence_rate\n                prev_best_fitness = fitness[best_idx]\n                mutant = np.clip(a + dynamic_F * decay * (b - c), self.lower_bound, self.upper_bound)\n\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * evals / self.budget) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n\n        return best_solution", "name": "HybridDE", "description": "Integrate a self-adaptive mutation factor based on convergence rate alongside diversity preservation mechanisms to improve convergence speed.", "configspace": "", "generation": 24, "fitness": 0.11229702767744978, "feedback": "The algorithm HybridDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.13.", "error": "", "parent_id": "7296f870-74fe-4049-a97e-295cd93fafff", "metadata": {"aucs": [0.19787812747532207, 0.19518751579380555, 0.24688331926775464, 0.1685188216528588, 0.17637057218891916, 0.24095796337731834, 0.18111943947384102, 0.252013529234863, 0.2683199475846989, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05814271634931434, 0.06120792998016078, 0.10747844093744185, 0.06809246714769779, 0.07048791667746723, 0.06746820380962704, 0.06318992476739882, 0.08996568053740739, 0.06001565078581006, 0.03886508469757577, 0.04411198631228108, 0.049316567424411706, 0.06434562814758504, 0.05956980383319865, 0.0507384296053508, 0.05847112192369186, 0.0372519516359594, 0.08054451140122221, 0.5950923972673069, 0.14623863739766296, 0.7698771478387662, 0.8637657655753568, 0.33376308449090164, 0.8571506453006396, 0.6808664331931263, 0.18693223881163645, 0.43076235759454684, 0.06274794416174423, 0.11048408236924823, 0.044819094773752455, 0.06393433459590891, 0.07065259186414274, 0.08334528353234583, 0.1114354577045571, 0.06589608425250992, 0.11006638935925095, 0.12832300654295214, 0.13982139240905012, 0.1099017599690656, 0.15911554218257462, 0.15666574056562355, 0.15268721204398827, 0.11744722662199969, 0.11888228215164742, 0.14791437610129765, 9.999999999998899e-05, 9.999999999998899e-05, 0.056841568306232326, 9.999999999998899e-05, 9.999999999998899e-05, 0.028643164793914044, 0.027611807795251853, 9.999999999998899e-05, 0.024426075308690787, 9.999999999998899e-05, 0.11296314575698785, 0.0824999678316295, 9.999999999998899e-05, 0.04722832340166683, 0.10653442744494257, 0.009000099850665189, 0.028633142439402404, 0.015745969252527692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.018148021843239937, 0.01099067541299048, 0.022995866817367427, 0.039989081709566165, 0.02499330687252954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.037631924096094393, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008319139267084386, 9.999999999998899e-05, 9.999999999998899e-05, 0.0070760468461854575, 9.999999999998899e-05, 0.030533398251269994, 0.006274027991865272, 9.999999999998899e-05, 9.999999999998899e-05, 0.19607998182910158, 0.1797264853287155, 0.20189330040955533, 0.22026280403911846, 0.22175538847966159, 0.21553988241347566, 0.21209731838023238, 0.219841798197431, 0.1814663134051424, 0.05547239906291268, 0.045562317932914764, 0.05664296955142778, 0.058126599654095834, 0.042726095298430855, 0.05469172074961792, 0.04647340727139382, 0.04567670875231833, 0.05420268948847973, 0.1921293407369029, 0.12420718925638652, 0.11842175776965747, 0.13766266535167793, 0.16615124973119533, 0.10798713552628325, 0.1297202993341613, 0.1282607730419293, 0.10033266014351627, 0.19596112794165188, 0.2097211438947022, 0.1759115903643016, 0.17743863836406037, 0.1881515793782631, 0.18438454764923895, 0.18059881886963924, 0.2078989974322597, 0.16816915076631234, 0.10084531170646971, 0.11519187244258444, 0.15465511049955272, 0.10784570490727763, 0.10169765199922898, 0.10540510254086621, 0.1291655031108141, 0.11888537611642847, 0.13818609559334494, 0.15948065852458548, 0.1372893144946662, 0.13345086981233123, 0.1651195350113832, 0.14052880663682066, 0.14763739977486945, 0.1752902666796191, 0.16334195110074912, 0.17436937469039515, 0.17087710973016113, 0.1257397288242993, 0.1563805106540631, 0.1559153556247025, 0.17950264333633337, 0.12623535913003436, 0.1343818230273608, 0.13669640321965182, 0.16227984928698624, 0.15494408522392789, 0.15692914130518587, 0.16584360606517734, 0.16696310990668262, 0.25774796145286816, 0.12620636976923816, 0.11364440889954586, 0.11018715301200777, 0.16149652334554776, 0.16198224366595493, 0.15124793248080737, 0.10994415821894332, 0.1622010682205851, 0.13874441254605097, 0.16925155386580115, 0.1058459439924716, 0.11351351398883003, 0.11753750099392968, 0.1452777546569669, 0.1608614726286951, 0.15271554139392884, 0.1918506509382053, 0.16820960247329642, 0.18267992718757708, 0.16075508137815742, 0.1621123444912721, 0.15650633438421369, 0.05229067723059344, 0.053770336213108894, 0.04331503987167684, 0.058732789262868734, 0.07791543354520747, 0.054073707984567454, 0.052916088147589524, 0.045568329475673464, 0.048253703855565044]}, "mutation_prompt": null}
{"id": "01d43a44-d116-4ff9-a461-3bd06ef098dc", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Mutation with dynamic F adjustment\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                decay = 1 - evals / self.budget\n                dynamic_F = self.F * (1 - 0.5 * (evals / self.budget))\n                mutant = np.clip(a + dynamic_F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Introducing dynamic mutation factor adjustment to enhance exploration and exploitation balance in the optimization process.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7296f870-74fe-4049-a97e-295cd93fafff", "metadata": {"aucs": [0.6111859594655333, 0.6122674665436627, 0.6300934093135728, 0.622382153922403, 0.6441350495309767, 0.6411255410370451, 0.6211384530709764, 0.6070637418255258, 0.6465089029102129, 0.4490978654544223, 0.37416470630871834, 0.4207479731693754, 0.40300999611485855, 0.37901156654623513, 0.3773405498966247, 0.42437322730595006, 0.40440732112034816, 0.37504108304525474, 0.12771101278571673, 0.13559682151010088, 0.1235542858742783, 0.13170038548443774, 0.12582115190148857, 0.13323155285573507, 0.11672891523391626, 0.11445270505884186, 0.13310921303311496, 0.11477708099720763, 0.10556857079598103, 0.10187482033655038, 0.1029828246549751, 0.1113062982193378, 0.10600215679365443, 0.1113737385970468, 0.09775453525103728, 0.10189674175682795, 0.8697420179976125, 0.9367597039206721, 0.9027951777164102, 0.862367704371726, 0.9475446384383786, 0.8659525837661128, 0.911594960995454, 0.9031647658912896, 0.9314683630812803, 0.2364885548649034, 0.20326012873237664, 0.23955895740552835, 0.2249085606435891, 0.2360891082653559, 0.24484355050566153, 0.24559102071217165, 0.25797075312357864, 0.22868076726249442, 0.6055751964637843, 0.6021470346253217, 0.6036778184402544, 0.6177806877363128, 0.6007387527433876, 0.5840376171433387, 0.6282199785622191, 0.5783300823970183, 0.6124777969592314, 0.12858761231035898, 0.1332286560247974, 0.15342596254738927, 0.14340711346842305, 0.17351437048333085, 0.14326408514769395, 0.2684971274040092, 0.12710236601945857, 0.15200170283337522, 0.13134462119444945, 0.12839890751325544, 0.16545912015368325, 0.1567260653293524, 0.13431762847948736, 0.14640152197282297, 0.21250447480790868, 0.132924118989461, 0.12233655983124003, 0.17734929719623482, 0.1924910917746948, 0.13189246489462259, 0.1567476912224287, 0.16675757094534382, 0.17288473922143333, 0.1772021189434514, 0.17449126692106187, 0.18413440729983999, 0.27033881654337844, 0.26028830173217543, 0.32453247393434403, 0.2616573800755536, 0.2645128413610024, 0.2645481547862212, 0.3191560572719876, 0.32893843456383076, 0.3415049927304753, 0.06468324086490151, 0.05422522736328317, 0.06716734129963697, 0.050984765490136086, 0.06168120987985026, 0.08572559578437866, 0.0960245010589088, 0.068334283837441, 0.07530781513267171, 0.16210409622132993, 0.1859341143899912, 0.15912686094012574, 0.17001823443071318, 0.16591889479030908, 0.19588871561005006, 0.21146569278004768, 0.15291772681798488, 0.17580921751225542, 0.4376371312687716, 0.46594002258380807, 0.5232728934199216, 0.49227359168902163, 0.5349082937746861, 0.5162564132556531, 0.5040302307067942, 0.4914042820229968, 0.4893348221670196, 0.10141894746879676, 0.10260358430950178, 0.11066856571082428, 0.09429067361129473, 0.0866222329887405, 0.09055020449690332, 0.11615824795037932, 0.10302606608651332, 0.09679927190372051, 0.17525258584005043, 0.1272382289889834, 0.14862551656111989, 0.14536239398526063, 0.17135761103484615, 0.13888687159930269, 0.15275906789536098, 0.141607450315281, 0.13976353209547399, 0.30578252225467173, 0.3207873182189195, 0.3257711628244314, 0.2941719331217878, 0.2889420999744522, 0.3224384166247901, 0.3255209742087123, 0.3528868343358811, 0.3370075479379938, 0.24152611063387053, 0.2359499673951857, 0.24695021480146473, 0.24168796119368618, 0.23537740653396688, 0.24561713831569987, 0.25295330772205193, 0.2610354920323352, 0.2701082065770588, 0.22517677044380524, 0.20196155720356224, 0.1771867373043966, 0.17795761705616564, 0.19419009187364678, 0.19038136146328555, 0.18496041387139062, 0.19260422166074087, 0.20084894327360503, 0.17874819704222422, 0.18972337086179225, 0.19561819931814262, 0.19502677656893408, 0.1880786252430856, 0.1874234174208561, 0.20802529107076384, 0.18837297360171468, 0.1978812723677854, 0.2793242820105628, 0.1804693087723761, 0.34091645745163945, 0.16498478379683834, 0.32280684228665246, 0.16891591315303756, 0.5205040277846888, 0.49216408391613653, 0.4679943703324265, 0.19435032850983835, 0.19353631102388003, 0.19290551288499413, 0.196793575931705, 0.19025092391797793, 0.3364037035435923, 0.1833304073299773, 0.2793574864345736, 0.41393838050891874, 0.1867670124765738, 0.17651906413345164, 0.19662495386667178, 0.18142101312010384, 0.1770542251781182, 0.1816133853946187, 0.17932245864657437, 0.1921248839365971, 0.18916740904488527, 0.07684428781416175, 0.07694903458642943, 0.07251990763039906, 0.0738205431486818, 0.07787426873021319, 0.07813236847607519, 0.07127202294496271, 0.0788123139031286, 0.08083320261279225]}, "mutation_prompt": null}
{"id": "51ca6929-d9ea-4cb2-9a96-1a3154fda732", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Mutation with dynamic F adjustment\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                decay = 1 - evals / self.budget\n                dynamic_F = self.F * (1 - 0.5 * (evals / self.budget))\n                mutant = np.clip(a + dynamic_F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Introducing dynamic mutation factor adjustment to enhance exploration and exploitation balance in the optimization process.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7296f870-74fe-4049-a97e-295cd93fafff", "metadata": {"aucs": [0.6111859594655333, 0.6122674665436627, 0.6300934093135728, 0.622382153922403, 0.6441350495309767, 0.6411255410370451, 0.6211384530709764, 0.6070637418255258, 0.6465089029102129, 0.4490978654544223, 0.37416470630871834, 0.4207479731693754, 0.40300999611485855, 0.37901156654623513, 0.3773405498966247, 0.42437322730595006, 0.40440732112034816, 0.37504108304525474, 0.12771101278571673, 0.13559682151010088, 0.1235542858742783, 0.13170038548443774, 0.12582115190148857, 0.13323155285573507, 0.11672891523391626, 0.11445270505884186, 0.13310921303311496, 0.11477708099720763, 0.10556857079598103, 0.10187482033655038, 0.1029828246549751, 0.1113062982193378, 0.10600215679365443, 0.1113737385970468, 0.09775453525103728, 0.10189674175682795, 0.8697420179976125, 0.9367597039206721, 0.9027951777164102, 0.862367704371726, 0.9475446384383786, 0.8659525837661128, 0.911594960995454, 0.9031647658912896, 0.9314683630812803, 0.2364885548649034, 0.20326012873237664, 0.23955895740552835, 0.2249085606435891, 0.2360891082653559, 0.24484355050566153, 0.24559102071217165, 0.25797075312357864, 0.22868076726249442, 0.6055751964637843, 0.6021470346253217, 0.6036778184402544, 0.6177806877363128, 0.6007387527433876, 0.5840376171433387, 0.6282199785622191, 0.5783300823970183, 0.6124777969592314, 0.12858761231035898, 0.1332286560247974, 0.15342596254738927, 0.14340711346842305, 0.17351437048333085, 0.14326408514769395, 0.2684971274040092, 0.12710236601945857, 0.15200170283337522, 0.13134462119444945, 0.12839890751325544, 0.16545912015368325, 0.1567260653293524, 0.13431762847948736, 0.14640152197282297, 0.21250447480790868, 0.132924118989461, 0.12233655983124003, 0.17734929719623482, 0.1924910917746948, 0.13189246489462259, 0.1567476912224287, 0.16675757094534382, 0.17288473922143333, 0.1772021189434514, 0.17449126692106187, 0.18413440729983999, 0.27033881654337844, 0.26028830173217543, 0.32453247393434403, 0.2616573800755536, 0.2645128413610024, 0.2645481547862212, 0.3191560572719876, 0.32893843456383076, 0.3415049927304753, 0.06468324086490151, 0.05422522736328317, 0.06716734129963697, 0.050984765490136086, 0.06168120987985026, 0.08572559578437866, 0.0960245010589088, 0.068334283837441, 0.07530781513267171, 0.16210409622132993, 0.1859341143899912, 0.15912686094012574, 0.17001823443071318, 0.16591889479030908, 0.19588871561005006, 0.21146569278004768, 0.15291772681798488, 0.17580921751225542, 0.4376371312687716, 0.46594002258380807, 0.5232728934199216, 0.49227359168902163, 0.5349082937746861, 0.5162564132556531, 0.5040302307067942, 0.4914042820229968, 0.4893348221670196, 0.10141894746879676, 0.10260358430950178, 0.11066856571082428, 0.09429067361129473, 0.0866222329887405, 0.09055020449690332, 0.11615824795037932, 0.10302606608651332, 0.09679927190372051, 0.17525258584005043, 0.1272382289889834, 0.14862551656111989, 0.14536239398526063, 0.17135761103484615, 0.13888687159930269, 0.15275906789536098, 0.141607450315281, 0.13976353209547399, 0.30578252225467173, 0.3207873182189195, 0.3257711628244314, 0.2941719331217878, 0.2889420999744522, 0.3224384166247901, 0.3255209742087123, 0.3528868343358811, 0.3370075479379938, 0.24152611063387053, 0.2359499673951857, 0.24695021480146473, 0.24168796119368618, 0.23537740653396688, 0.24561713831569987, 0.25295330772205193, 0.2610354920323352, 0.2701082065770588, 0.22517677044380524, 0.20196155720356224, 0.1771867373043966, 0.17795761705616564, 0.19419009187364678, 0.19038136146328555, 0.18496041387139062, 0.19260422166074087, 0.20084894327360503, 0.17874819704222422, 0.18972337086179225, 0.19561819931814262, 0.19502677656893408, 0.1880786252430856, 0.1874234174208561, 0.20802529107076384, 0.18837297360171468, 0.1978812723677854, 0.2793242820105628, 0.1804693087723761, 0.34091645745163945, 0.16498478379683834, 0.32280684228665246, 0.16891591315303756, 0.5205040277846888, 0.49216408391613653, 0.4679943703324265, 0.19435032850983835, 0.19353631102388003, 0.19290551288499413, 0.196793575931705, 0.19025092391797793, 0.3364037035435923, 0.1833304073299773, 0.2793574864345736, 0.41393838050891874, 0.1867670124765738, 0.17651906413345164, 0.19662495386667178, 0.18142101312010384, 0.1770542251781182, 0.1816133853946187, 0.17932245864657437, 0.1921248839365971, 0.18916740904488527, 0.07684428781416175, 0.07694903458642943, 0.07251990763039906, 0.0738205431486818, 0.07787426873021319, 0.07813236847607519, 0.07127202294496271, 0.0788123139031286, 0.08083320261279225]}, "mutation_prompt": null}
{"id": "19e93dab-8491-4fec-b329-054b0bde0d20", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Mutation with dynamic F adjustment\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                decay = 1 - evals / self.budget\n                dynamic_F = self.F * (1 - 0.5 * (evals / self.budget))\n                mutant = np.clip(a + dynamic_F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Introducing dynamic mutation factor adjustment to enhance exploration and exploitation balance in the optimization process.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7296f870-74fe-4049-a97e-295cd93fafff", "metadata": {"aucs": [0.6111859594655333, 0.6122674665436627, 0.6300934093135728, 0.622382153922403, 0.6441350495309767, 0.6411255410370451, 0.6211384530709764, 0.6070637418255258, 0.6465089029102129, 0.4490978654544223, 0.37416470630871834, 0.4207479731693754, 0.40300999611485855, 0.37901156654623513, 0.3773405498966247, 0.42437322730595006, 0.40440732112034816, 0.37504108304525474, 0.12771101278571673, 0.13559682151010088, 0.1235542858742783, 0.13170038548443774, 0.12582115190148857, 0.13323155285573507, 0.11672891523391626, 0.11445270505884186, 0.13310921303311496, 0.11477708099720763, 0.10556857079598103, 0.10187482033655038, 0.1029828246549751, 0.1113062982193378, 0.10600215679365443, 0.1113737385970468, 0.09775453525103728, 0.10189674175682795, 0.8697420179976125, 0.9367597039206721, 0.9027951777164102, 0.862367704371726, 0.9475446384383786, 0.8659525837661128, 0.911594960995454, 0.9031647658912896, 0.9314683630812803, 0.2364885548649034, 0.20326012873237664, 0.23955895740552835, 0.2249085606435891, 0.2360891082653559, 0.24484355050566153, 0.24559102071217165, 0.25797075312357864, 0.22868076726249442, 0.6055751964637843, 0.6021470346253217, 0.6036778184402544, 0.6177806877363128, 0.6007387527433876, 0.5840376171433387, 0.6282199785622191, 0.5783300823970183, 0.6124777969592314, 0.12858761231035898, 0.1332286560247974, 0.15342596254738927, 0.14340711346842305, 0.17351437048333085, 0.14326408514769395, 0.2684971274040092, 0.12710236601945857, 0.15200170283337522, 0.13134462119444945, 0.12839890751325544, 0.16545912015368325, 0.1567260653293524, 0.13431762847948736, 0.14640152197282297, 0.21250447480790868, 0.132924118989461, 0.12233655983124003, 0.17734929719623482, 0.1924910917746948, 0.13189246489462259, 0.1567476912224287, 0.16675757094534382, 0.17288473922143333, 0.1772021189434514, 0.17449126692106187, 0.18413440729983999, 0.27033881654337844, 0.26028830173217543, 0.32453247393434403, 0.2616573800755536, 0.2645128413610024, 0.2645481547862212, 0.3191560572719876, 0.32893843456383076, 0.3415049927304753, 0.06468324086490151, 0.05422522736328317, 0.06716734129963697, 0.050984765490136086, 0.06168120987985026, 0.08572559578437866, 0.0960245010589088, 0.068334283837441, 0.07530781513267171, 0.16210409622132993, 0.1859341143899912, 0.15912686094012574, 0.17001823443071318, 0.16591889479030908, 0.19588871561005006, 0.21146569278004768, 0.15291772681798488, 0.17580921751225542, 0.4376371312687716, 0.46594002258380807, 0.5232728934199216, 0.49227359168902163, 0.5349082937746861, 0.5162564132556531, 0.5040302307067942, 0.4914042820229968, 0.4893348221670196, 0.10141894746879676, 0.10260358430950178, 0.11066856571082428, 0.09429067361129473, 0.0866222329887405, 0.09055020449690332, 0.11615824795037932, 0.10302606608651332, 0.09679927190372051, 0.17525258584005043, 0.1272382289889834, 0.14862551656111989, 0.14536239398526063, 0.17135761103484615, 0.13888687159930269, 0.15275906789536098, 0.141607450315281, 0.13976353209547399, 0.30578252225467173, 0.3207873182189195, 0.3257711628244314, 0.2941719331217878, 0.2889420999744522, 0.3224384166247901, 0.3255209742087123, 0.3528868343358811, 0.3370075479379938, 0.24152611063387053, 0.2359499673951857, 0.24695021480146473, 0.24168796119368618, 0.23537740653396688, 0.24561713831569987, 0.25295330772205193, 0.2610354920323352, 0.2701082065770588, 0.22517677044380524, 0.20196155720356224, 0.1771867373043966, 0.17795761705616564, 0.19419009187364678, 0.19038136146328555, 0.18496041387139062, 0.19260422166074087, 0.20084894327360503, 0.17874819704222422, 0.18972337086179225, 0.19561819931814262, 0.19502677656893408, 0.1880786252430856, 0.1874234174208561, 0.20802529107076384, 0.18837297360171468, 0.1978812723677854, 0.2793242820105628, 0.1804693087723761, 0.34091645745163945, 0.16498478379683834, 0.32280684228665246, 0.16891591315303756, 0.5205040277846888, 0.49216408391613653, 0.4679943703324265, 0.19435032850983835, 0.19353631102388003, 0.19290551288499413, 0.196793575931705, 0.19025092391797793, 0.3364037035435923, 0.1833304073299773, 0.2793574864345736, 0.41393838050891874, 0.1867670124765738, 0.17651906413345164, 0.19662495386667178, 0.18142101312010384, 0.1770542251781182, 0.1816133853946187, 0.17932245864657437, 0.1921248839365971, 0.18916740904488527, 0.07684428781416175, 0.07694903458642943, 0.07251990763039906, 0.0738205431486818, 0.07787426873021319, 0.07813236847607519, 0.07127202294496271, 0.0788123139031286, 0.08083320261279225]}, "mutation_prompt": null}
{"id": "f9cbc532-1472-4599-bcfb-0380d55e248a", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Mutation with dynamic F adjustment\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                decay = 1 - evals / self.budget\n                dynamic_F = self.F * (1 - 0.5 * (evals / self.budget))\n                mutant = np.clip(a + dynamic_F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Introducing dynamic mutation factor adjustment to enhance exploration and exploitation balance in the optimization process.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7296f870-74fe-4049-a97e-295cd93fafff", "metadata": {"aucs": [0.6111859594655333, 0.6122674665436627, 0.6300934093135728, 0.622382153922403, 0.6441350495309767, 0.6411255410370451, 0.6211384530709764, 0.6070637418255258, 0.6465089029102129, 0.4490978654544223, 0.37416470630871834, 0.4207479731693754, 0.40300999611485855, 0.37901156654623513, 0.3773405498966247, 0.42437322730595006, 0.40440732112034816, 0.37504108304525474, 0.12771101278571673, 0.13559682151010088, 0.1235542858742783, 0.13170038548443774, 0.12582115190148857, 0.13323155285573507, 0.11672891523391626, 0.11445270505884186, 0.13310921303311496, 0.11477708099720763, 0.10556857079598103, 0.10187482033655038, 0.1029828246549751, 0.1113062982193378, 0.10600215679365443, 0.1113737385970468, 0.09775453525103728, 0.10189674175682795, 0.8697420179976125, 0.9367597039206721, 0.9027951777164102, 0.862367704371726, 0.9475446384383786, 0.8659525837661128, 0.911594960995454, 0.9031647658912896, 0.9314683630812803, 0.2364885548649034, 0.20326012873237664, 0.23955895740552835, 0.2249085606435891, 0.2360891082653559, 0.24484355050566153, 0.24559102071217165, 0.25797075312357864, 0.22868076726249442, 0.6055751964637843, 0.6021470346253217, 0.6036778184402544, 0.6177806877363128, 0.6007387527433876, 0.5840376171433387, 0.6282199785622191, 0.5783300823970183, 0.6124777969592314, 0.12858761231035898, 0.1332286560247974, 0.15342596254738927, 0.14340711346842305, 0.17351437048333085, 0.14326408514769395, 0.2684971274040092, 0.12710236601945857, 0.15200170283337522, 0.13134462119444945, 0.12839890751325544, 0.16545912015368325, 0.1567260653293524, 0.13431762847948736, 0.14640152197282297, 0.21250447480790868, 0.132924118989461, 0.12233655983124003, 0.17734929719623482, 0.1924910917746948, 0.13189246489462259, 0.1567476912224287, 0.16675757094534382, 0.17288473922143333, 0.1772021189434514, 0.17449126692106187, 0.18413440729983999, 0.27033881654337844, 0.26028830173217543, 0.32453247393434403, 0.2616573800755536, 0.2645128413610024, 0.2645481547862212, 0.3191560572719876, 0.32893843456383076, 0.3415049927304753, 0.06468324086490151, 0.05422522736328317, 0.06716734129963697, 0.050984765490136086, 0.06168120987985026, 0.08572559578437866, 0.0960245010589088, 0.068334283837441, 0.07530781513267171, 0.16210409622132993, 0.1859341143899912, 0.15912686094012574, 0.17001823443071318, 0.16591889479030908, 0.19588871561005006, 0.21146569278004768, 0.15291772681798488, 0.17580921751225542, 0.4376371312687716, 0.46594002258380807, 0.5232728934199216, 0.49227359168902163, 0.5349082937746861, 0.5162564132556531, 0.5040302307067942, 0.4914042820229968, 0.4893348221670196, 0.10141894746879676, 0.10260358430950178, 0.11066856571082428, 0.09429067361129473, 0.0866222329887405, 0.09055020449690332, 0.11615824795037932, 0.10302606608651332, 0.09679927190372051, 0.17525258584005043, 0.1272382289889834, 0.14862551656111989, 0.14536239398526063, 0.17135761103484615, 0.13888687159930269, 0.15275906789536098, 0.141607450315281, 0.13976353209547399, 0.30578252225467173, 0.3207873182189195, 0.3257711628244314, 0.2941719331217878, 0.2889420999744522, 0.3224384166247901, 0.3255209742087123, 0.3528868343358811, 0.3370075479379938, 0.24152611063387053, 0.2359499673951857, 0.24695021480146473, 0.24168796119368618, 0.23537740653396688, 0.24561713831569987, 0.25295330772205193, 0.2610354920323352, 0.2701082065770588, 0.22517677044380524, 0.20196155720356224, 0.1771867373043966, 0.17795761705616564, 0.19419009187364678, 0.19038136146328555, 0.18496041387139062, 0.19260422166074087, 0.20084894327360503, 0.17874819704222422, 0.18972337086179225, 0.19561819931814262, 0.19502677656893408, 0.1880786252430856, 0.1874234174208561, 0.20802529107076384, 0.18837297360171468, 0.1978812723677854, 0.2793242820105628, 0.1804693087723761, 0.34091645745163945, 0.16498478379683834, 0.32280684228665246, 0.16891591315303756, 0.5205040277846888, 0.49216408391613653, 0.4679943703324265, 0.19435032850983835, 0.19353631102388003, 0.19290551288499413, 0.196793575931705, 0.19025092391797793, 0.3364037035435923, 0.1833304073299773, 0.2793574864345736, 0.41393838050891874, 0.1867670124765738, 0.17651906413345164, 0.19662495386667178, 0.18142101312010384, 0.1770542251781182, 0.1816133853946187, 0.17932245864657437, 0.1921248839365971, 0.18916740904488527, 0.07684428781416175, 0.07694903458642943, 0.07251990763039906, 0.0738205431486818, 0.07787426873021319, 0.07813236847607519, 0.07127202294496271, 0.0788123139031286, 0.08083320261279225]}, "mutation_prompt": null}
{"id": "3ba78fba-44a2-4d71-8049-dc084b90865d", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Mutation with dynamic F adjustment\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                decay = 1 - evals / self.budget\n                dynamic_F = self.F * (1 - 0.5 * (evals / self.budget))\n                mutant = np.clip(a + dynamic_F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Introducing dynamic mutation factor adjustment to enhance exploration and exploitation balance in the optimization process.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7296f870-74fe-4049-a97e-295cd93fafff", "metadata": {"aucs": [0.6111859594655333, 0.6122674665436627, 0.6300934093135728, 0.622382153922403, 0.6441350495309767, 0.6411255410370451, 0.6211384530709764, 0.6070637418255258, 0.6465089029102129, 0.4490978654544223, 0.37416470630871834, 0.4207479731693754, 0.40300999611485855, 0.37901156654623513, 0.3773405498966247, 0.42437322730595006, 0.40440732112034816, 0.37504108304525474, 0.12771101278571673, 0.13559682151010088, 0.1235542858742783, 0.13170038548443774, 0.12582115190148857, 0.13323155285573507, 0.11672891523391626, 0.11445270505884186, 0.13310921303311496, 0.11477708099720763, 0.10556857079598103, 0.10187482033655038, 0.1029828246549751, 0.1113062982193378, 0.10600215679365443, 0.1113737385970468, 0.09775453525103728, 0.10189674175682795, 0.8697420179976125, 0.9367597039206721, 0.9027951777164102, 0.862367704371726, 0.9475446384383786, 0.8659525837661128, 0.911594960995454, 0.9031647658912896, 0.9314683630812803, 0.2364885548649034, 0.20326012873237664, 0.23955895740552835, 0.2249085606435891, 0.2360891082653559, 0.24484355050566153, 0.24559102071217165, 0.25797075312357864, 0.22868076726249442, 0.6055751964637843, 0.6021470346253217, 0.6036778184402544, 0.6177806877363128, 0.6007387527433876, 0.5840376171433387, 0.6282199785622191, 0.5783300823970183, 0.6124777969592314, 0.12858761231035898, 0.1332286560247974, 0.15342596254738927, 0.14340711346842305, 0.17351437048333085, 0.14326408514769395, 0.2684971274040092, 0.12710236601945857, 0.15200170283337522, 0.13134462119444945, 0.12839890751325544, 0.16545912015368325, 0.1567260653293524, 0.13431762847948736, 0.14640152197282297, 0.21250447480790868, 0.132924118989461, 0.12233655983124003, 0.17734929719623482, 0.1924910917746948, 0.13189246489462259, 0.1567476912224287, 0.16675757094534382, 0.17288473922143333, 0.1772021189434514, 0.17449126692106187, 0.18413440729983999, 0.27033881654337844, 0.26028830173217543, 0.32453247393434403, 0.2616573800755536, 0.2645128413610024, 0.2645481547862212, 0.3191560572719876, 0.32893843456383076, 0.3415049927304753, 0.06468324086490151, 0.05422522736328317, 0.06716734129963697, 0.050984765490136086, 0.06168120987985026, 0.08572559578437866, 0.0960245010589088, 0.068334283837441, 0.07530781513267171, 0.16210409622132993, 0.1859341143899912, 0.15912686094012574, 0.17001823443071318, 0.16591889479030908, 0.19588871561005006, 0.21146569278004768, 0.15291772681798488, 0.17580921751225542, 0.4376371312687716, 0.46594002258380807, 0.5232728934199216, 0.49227359168902163, 0.5349082937746861, 0.5162564132556531, 0.5040302307067942, 0.4914042820229968, 0.4893348221670196, 0.10141894746879676, 0.10260358430950178, 0.11066856571082428, 0.09429067361129473, 0.0866222329887405, 0.09055020449690332, 0.11615824795037932, 0.10302606608651332, 0.09679927190372051, 0.17525258584005043, 0.1272382289889834, 0.14862551656111989, 0.14536239398526063, 0.17135761103484615, 0.13888687159930269, 0.15275906789536098, 0.141607450315281, 0.13976353209547399, 0.30578252225467173, 0.3207873182189195, 0.3257711628244314, 0.2941719331217878, 0.2889420999744522, 0.3224384166247901, 0.3255209742087123, 0.3528868343358811, 0.3370075479379938, 0.24152611063387053, 0.2359499673951857, 0.24695021480146473, 0.24168796119368618, 0.23537740653396688, 0.24561713831569987, 0.25295330772205193, 0.2610354920323352, 0.2701082065770588, 0.22517677044380524, 0.20196155720356224, 0.1771867373043966, 0.17795761705616564, 0.19419009187364678, 0.19038136146328555, 0.18496041387139062, 0.19260422166074087, 0.20084894327360503, 0.17874819704222422, 0.18972337086179225, 0.19561819931814262, 0.19502677656893408, 0.1880786252430856, 0.1874234174208561, 0.20802529107076384, 0.18837297360171468, 0.1978812723677854, 0.2793242820105628, 0.1804693087723761, 0.34091645745163945, 0.16498478379683834, 0.32280684228665246, 0.16891591315303756, 0.5205040277846888, 0.49216408391613653, 0.4679943703324265, 0.19435032850983835, 0.19353631102388003, 0.19290551288499413, 0.196793575931705, 0.19025092391797793, 0.3364037035435923, 0.1833304073299773, 0.2793574864345736, 0.41393838050891874, 0.1867670124765738, 0.17651906413345164, 0.19662495386667178, 0.18142101312010384, 0.1770542251781182, 0.1816133853946187, 0.17932245864657437, 0.1921248839365971, 0.18916740904488527, 0.07684428781416175, 0.07694903458642943, 0.07251990763039906, 0.0738205431486818, 0.07787426873021319, 0.07813236847607519, 0.07127202294496271, 0.0788123139031286, 0.08083320261279225]}, "mutation_prompt": null}
{"id": "f973407f-1097-48db-886d-5119e540af38", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Mutation with dynamic F adjustment\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                decay = 1 - evals / self.budget\n                dynamic_F = self.F * (1 - 0.5 * (evals / self.budget))\n                mutant = np.clip(a + dynamic_F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Introducing dynamic mutation factor adjustment to enhance exploration and exploitation balance in the optimization process.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7296f870-74fe-4049-a97e-295cd93fafff", "metadata": {"aucs": [0.6111859594655333, 0.6122674665436627, 0.6300934093135728, 0.622382153922403, 0.6441350495309767, 0.6411255410370451, 0.6211384530709764, 0.6070637418255258, 0.6465089029102129, 0.4490978654544223, 0.37416470630871834, 0.4207479731693754, 0.40300999611485855, 0.37901156654623513, 0.3773405498966247, 0.42437322730595006, 0.40440732112034816, 0.37504108304525474, 0.12771101278571673, 0.13559682151010088, 0.1235542858742783, 0.13170038548443774, 0.12582115190148857, 0.13323155285573507, 0.11672891523391626, 0.11445270505884186, 0.13310921303311496, 0.11477708099720763, 0.10556857079598103, 0.10187482033655038, 0.1029828246549751, 0.1113062982193378, 0.10600215679365443, 0.1113737385970468, 0.09775453525103728, 0.10189674175682795, 0.8697420179976125, 0.9367597039206721, 0.9027951777164102, 0.862367704371726, 0.9475446384383786, 0.8659525837661128, 0.911594960995454, 0.9031647658912896, 0.9314683630812803, 0.2364885548649034, 0.20326012873237664, 0.23955895740552835, 0.2249085606435891, 0.2360891082653559, 0.24484355050566153, 0.24559102071217165, 0.25797075312357864, 0.22868076726249442, 0.6055751964637843, 0.6021470346253217, 0.6036778184402544, 0.6177806877363128, 0.6007387527433876, 0.5840376171433387, 0.6282199785622191, 0.5783300823970183, 0.6124777969592314, 0.12858761231035898, 0.1332286560247974, 0.15342596254738927, 0.14340711346842305, 0.17351437048333085, 0.14326408514769395, 0.2684971274040092, 0.12710236601945857, 0.15200170283337522, 0.13134462119444945, 0.12839890751325544, 0.16545912015368325, 0.1567260653293524, 0.13431762847948736, 0.14640152197282297, 0.21250447480790868, 0.132924118989461, 0.12233655983124003, 0.17734929719623482, 0.1924910917746948, 0.13189246489462259, 0.1567476912224287, 0.16675757094534382, 0.17288473922143333, 0.1772021189434514, 0.17449126692106187, 0.18413440729983999, 0.27033881654337844, 0.26028830173217543, 0.32453247393434403, 0.2616573800755536, 0.2645128413610024, 0.2645481547862212, 0.3191560572719876, 0.32893843456383076, 0.3415049927304753, 0.06468324086490151, 0.05422522736328317, 0.06716734129963697, 0.050984765490136086, 0.06168120987985026, 0.08572559578437866, 0.0960245010589088, 0.068334283837441, 0.07530781513267171, 0.16210409622132993, 0.1859341143899912, 0.15912686094012574, 0.17001823443071318, 0.16591889479030908, 0.19588871561005006, 0.21146569278004768, 0.15291772681798488, 0.17580921751225542, 0.4376371312687716, 0.46594002258380807, 0.5232728934199216, 0.49227359168902163, 0.5349082937746861, 0.5162564132556531, 0.5040302307067942, 0.4914042820229968, 0.4893348221670196, 0.10141894746879676, 0.10260358430950178, 0.11066856571082428, 0.09429067361129473, 0.0866222329887405, 0.09055020449690332, 0.11615824795037932, 0.10302606608651332, 0.09679927190372051, 0.17525258584005043, 0.1272382289889834, 0.14862551656111989, 0.14536239398526063, 0.17135761103484615, 0.13888687159930269, 0.15275906789536098, 0.141607450315281, 0.13976353209547399, 0.30578252225467173, 0.3207873182189195, 0.3257711628244314, 0.2941719331217878, 0.2889420999744522, 0.3224384166247901, 0.3255209742087123, 0.3528868343358811, 0.3370075479379938, 0.24152611063387053, 0.2359499673951857, 0.24695021480146473, 0.24168796119368618, 0.23537740653396688, 0.24561713831569987, 0.25295330772205193, 0.2610354920323352, 0.2701082065770588, 0.22517677044380524, 0.20196155720356224, 0.1771867373043966, 0.17795761705616564, 0.19419009187364678, 0.19038136146328555, 0.18496041387139062, 0.19260422166074087, 0.20084894327360503, 0.17874819704222422, 0.18972337086179225, 0.19561819931814262, 0.19502677656893408, 0.1880786252430856, 0.1874234174208561, 0.20802529107076384, 0.18837297360171468, 0.1978812723677854, 0.2793242820105628, 0.1804693087723761, 0.34091645745163945, 0.16498478379683834, 0.32280684228665246, 0.16891591315303756, 0.5205040277846888, 0.49216408391613653, 0.4679943703324265, 0.19435032850983835, 0.19353631102388003, 0.19290551288499413, 0.196793575931705, 0.19025092391797793, 0.3364037035435923, 0.1833304073299773, 0.2793574864345736, 0.41393838050891874, 0.1867670124765738, 0.17651906413345164, 0.19662495386667178, 0.18142101312010384, 0.1770542251781182, 0.1816133853946187, 0.17932245864657437, 0.1921248839365971, 0.18916740904488527, 0.07684428781416175, 0.07694903458642943, 0.07251990763039906, 0.0738205431486818, 0.07787426873021319, 0.07813236847607519, 0.07127202294496271, 0.0788123139031286, 0.08083320261279225]}, "mutation_prompt": null}
{"id": "1575a87e-8041-4d97-86f3-61ca4bc3fc38", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Mutation with dynamic F adjustment\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                decay = 1 - evals / self.budget\n                dynamic_F = self.F * (1 - 0.5 * (evals / self.budget))\n                mutant = np.clip(a + dynamic_F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n            \n            # Adaptive population size reduction\n            if evals > 0.5 * self.budget and self.pop_size > 10:\n                self.pop_size = max(10, int(self.pop_size * 0.9))\n                population = population[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n        \n        return best_solution", "name": "HybridDE", "description": "Introducing adaptive population size reduction to enhance exploitation in later stages of the optimization process.", "configspace": "", "generation": 31, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 84 is out of bounds for axis 0 with size 81').", "error": "IndexError('index 84 is out of bounds for axis 0 with size 81')", "parent_id": "7296f870-74fe-4049-a97e-295cd93fafff", "metadata": {}, "mutation_prompt": null}
{"id": "a2eb15e3-4716-4b41-bc36-c3c3c17e16f4", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Mutation with dynamic F adjustment\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                decay = 1 - evals / self.budget\n                dynamic_F = self.F * (1 - 0.5 * (evals / self.budget))\n                mutant = np.clip(a + dynamic_F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Introducing dynamic mutation factor adjustment to enhance exploration and exploitation balance in the optimization process.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7296f870-74fe-4049-a97e-295cd93fafff", "metadata": {"aucs": [0.6111859594655333, 0.6122674665436627, 0.6300934093135728, 0.622382153922403, 0.6441350495309767, 0.6411255410370451, 0.6211384530709764, 0.6070637418255258, 0.6465089029102129, 0.4490978654544223, 0.37416470630871834, 0.4207479731693754, 0.40300999611485855, 0.37901156654623513, 0.3773405498966247, 0.42437322730595006, 0.40440732112034816, 0.37504108304525474, 0.12771101278571673, 0.13559682151010088, 0.1235542858742783, 0.13170038548443774, 0.12582115190148857, 0.13323155285573507, 0.11672891523391626, 0.11445270505884186, 0.13310921303311496, 0.11477708099720763, 0.10556857079598103, 0.10187482033655038, 0.1029828246549751, 0.1113062982193378, 0.10600215679365443, 0.1113737385970468, 0.09775453525103728, 0.10189674175682795, 0.8697420179976125, 0.9367597039206721, 0.9027951777164102, 0.862367704371726, 0.9475446384383786, 0.8659525837661128, 0.911594960995454, 0.9031647658912896, 0.9314683630812803, 0.2364885548649034, 0.20326012873237664, 0.23955895740552835, 0.2249085606435891, 0.2360891082653559, 0.24484355050566153, 0.24559102071217165, 0.25797075312357864, 0.22868076726249442, 0.6055751964637843, 0.6021470346253217, 0.6036778184402544, 0.6177806877363128, 0.6007387527433876, 0.5840376171433387, 0.6282199785622191, 0.5783300823970183, 0.6124777969592314, 0.12858761231035898, 0.1332286560247974, 0.15342596254738927, 0.14340711346842305, 0.17351437048333085, 0.14326408514769395, 0.2684971274040092, 0.12710236601945857, 0.15200170283337522, 0.13134462119444945, 0.12839890751325544, 0.16545912015368325, 0.1567260653293524, 0.13431762847948736, 0.14640152197282297, 0.21250447480790868, 0.132924118989461, 0.12233655983124003, 0.17734929719623482, 0.1924910917746948, 0.13189246489462259, 0.1567476912224287, 0.16675757094534382, 0.17288473922143333, 0.1772021189434514, 0.17449126692106187, 0.18413440729983999, 0.27033881654337844, 0.26028830173217543, 0.32453247393434403, 0.2616573800755536, 0.2645128413610024, 0.2645481547862212, 0.3191560572719876, 0.32893843456383076, 0.3415049927304753, 0.06468324086490151, 0.05422522736328317, 0.06716734129963697, 0.050984765490136086, 0.06168120987985026, 0.08572559578437866, 0.0960245010589088, 0.068334283837441, 0.07530781513267171, 0.16210409622132993, 0.1859341143899912, 0.15912686094012574, 0.17001823443071318, 0.16591889479030908, 0.19588871561005006, 0.21146569278004768, 0.15291772681798488, 0.17580921751225542, 0.4376371312687716, 0.46594002258380807, 0.5232728934199216, 0.49227359168902163, 0.5349082937746861, 0.5162564132556531, 0.5040302307067942, 0.4914042820229968, 0.4893348221670196, 0.10141894746879676, 0.10260358430950178, 0.11066856571082428, 0.09429067361129473, 0.0866222329887405, 0.09055020449690332, 0.11615824795037932, 0.10302606608651332, 0.09679927190372051, 0.17525258584005043, 0.1272382289889834, 0.14862551656111989, 0.14536239398526063, 0.17135761103484615, 0.13888687159930269, 0.15275906789536098, 0.141607450315281, 0.13976353209547399, 0.30578252225467173, 0.3207873182189195, 0.3257711628244314, 0.2941719331217878, 0.2889420999744522, 0.3224384166247901, 0.3255209742087123, 0.3528868343358811, 0.3370075479379938, 0.24152611063387053, 0.2359499673951857, 0.24695021480146473, 0.24168796119368618, 0.23537740653396688, 0.24561713831569987, 0.25295330772205193, 0.2610354920323352, 0.2701082065770588, 0.22517677044380524, 0.20196155720356224, 0.1771867373043966, 0.17795761705616564, 0.19419009187364678, 0.19038136146328555, 0.18496041387139062, 0.19260422166074087, 0.20084894327360503, 0.17874819704222422, 0.18972337086179225, 0.19561819931814262, 0.19502677656893408, 0.1880786252430856, 0.1874234174208561, 0.20802529107076384, 0.18837297360171468, 0.1978812723677854, 0.2793242820105628, 0.1804693087723761, 0.34091645745163945, 0.16498478379683834, 0.32280684228665246, 0.16891591315303756, 0.5205040277846888, 0.49216408391613653, 0.4679943703324265, 0.19435032850983835, 0.19353631102388003, 0.19290551288499413, 0.196793575931705, 0.19025092391797793, 0.3364037035435923, 0.1833304073299773, 0.2793574864345736, 0.41393838050891874, 0.1867670124765738, 0.17651906413345164, 0.19662495386667178, 0.18142101312010384, 0.1770542251781182, 0.1816133853946187, 0.17932245864657437, 0.1921248839365971, 0.18916740904488527, 0.07684428781416175, 0.07694903458642943, 0.07251990763039906, 0.0738205431486818, 0.07787426873021319, 0.07813236847607519, 0.07127202294496271, 0.0788123139031286, 0.08083320261279225]}, "mutation_prompt": null}
{"id": "7ce79f4a-e350-4209-a9e7-0b81d327ff35", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Mutation with dynamic F adjustment\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                decay = 1 - evals / self.budget\n                dynamic_F = self.F * (1 - 0.5 * (evals / self.budget))\n                mutant = np.clip(a + dynamic_F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Introducing dynamic mutation factor adjustment to enhance exploration and exploitation balance in the optimization process.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7296f870-74fe-4049-a97e-295cd93fafff", "metadata": {"aucs": [0.6111859594655333, 0.6122674665436627, 0.6300934093135728, 0.622382153922403, 0.6441350495309767, 0.6411255410370451, 0.6211384530709764, 0.6070637418255258, 0.6465089029102129, 0.4490978654544223, 0.37416470630871834, 0.4207479731693754, 0.40300999611485855, 0.37901156654623513, 0.3773405498966247, 0.42437322730595006, 0.40440732112034816, 0.37504108304525474, 0.12771101278571673, 0.13559682151010088, 0.1235542858742783, 0.13170038548443774, 0.12582115190148857, 0.13323155285573507, 0.11672891523391626, 0.11445270505884186, 0.13310921303311496, 0.11477708099720763, 0.10556857079598103, 0.10187482033655038, 0.1029828246549751, 0.1113062982193378, 0.10600215679365443, 0.1113737385970468, 0.09775453525103728, 0.10189674175682795, 0.8697420179976125, 0.9367597039206721, 0.9027951777164102, 0.862367704371726, 0.9475446384383786, 0.8659525837661128, 0.911594960995454, 0.9031647658912896, 0.9314683630812803, 0.2364885548649034, 0.20326012873237664, 0.23955895740552835, 0.2249085606435891, 0.2360891082653559, 0.24484355050566153, 0.24559102071217165, 0.25797075312357864, 0.22868076726249442, 0.6055751964637843, 0.6021470346253217, 0.6036778184402544, 0.6177806877363128, 0.6007387527433876, 0.5840376171433387, 0.6282199785622191, 0.5783300823970183, 0.6124777969592314, 0.12858761231035898, 0.1332286560247974, 0.15342596254738927, 0.14340711346842305, 0.17351437048333085, 0.14326408514769395, 0.2684971274040092, 0.12710236601945857, 0.15200170283337522, 0.13134462119444945, 0.12839890751325544, 0.16545912015368325, 0.1567260653293524, 0.13431762847948736, 0.14640152197282297, 0.21250447480790868, 0.132924118989461, 0.12233655983124003, 0.17734929719623482, 0.1924910917746948, 0.13189246489462259, 0.1567476912224287, 0.16675757094534382, 0.17288473922143333, 0.1772021189434514, 0.17449126692106187, 0.18413440729983999, 0.27033881654337844, 0.26028830173217543, 0.32453247393434403, 0.2616573800755536, 0.2645128413610024, 0.2645481547862212, 0.3191560572719876, 0.32893843456383076, 0.3415049927304753, 0.06468324086490151, 0.05422522736328317, 0.06716734129963697, 0.050984765490136086, 0.06168120987985026, 0.08572559578437866, 0.0960245010589088, 0.068334283837441, 0.07530781513267171, 0.16210409622132993, 0.1859341143899912, 0.15912686094012574, 0.17001823443071318, 0.16591889479030908, 0.19588871561005006, 0.21146569278004768, 0.15291772681798488, 0.17580921751225542, 0.4376371312687716, 0.46594002258380807, 0.5232728934199216, 0.49227359168902163, 0.5349082937746861, 0.5162564132556531, 0.5040302307067942, 0.4914042820229968, 0.4893348221670196, 0.10141894746879676, 0.10260358430950178, 0.11066856571082428, 0.09429067361129473, 0.0866222329887405, 0.09055020449690332, 0.11615824795037932, 0.10302606608651332, 0.09679927190372051, 0.17525258584005043, 0.1272382289889834, 0.14862551656111989, 0.14536239398526063, 0.17135761103484615, 0.13888687159930269, 0.15275906789536098, 0.141607450315281, 0.13976353209547399, 0.30578252225467173, 0.3207873182189195, 0.3257711628244314, 0.2941719331217878, 0.2889420999744522, 0.3224384166247901, 0.3255209742087123, 0.3528868343358811, 0.3370075479379938, 0.24152611063387053, 0.2359499673951857, 0.24695021480146473, 0.24168796119368618, 0.23537740653396688, 0.24561713831569987, 0.25295330772205193, 0.2610354920323352, 0.2701082065770588, 0.22517677044380524, 0.20196155720356224, 0.1771867373043966, 0.17795761705616564, 0.19419009187364678, 0.19038136146328555, 0.18496041387139062, 0.19260422166074087, 0.20084894327360503, 0.17874819704222422, 0.18972337086179225, 0.19561819931814262, 0.19502677656893408, 0.1880786252430856, 0.1874234174208561, 0.20802529107076384, 0.18837297360171468, 0.1978812723677854, 0.2793242820105628, 0.1804693087723761, 0.34091645745163945, 0.16498478379683834, 0.32280684228665246, 0.16891591315303756, 0.5205040277846888, 0.49216408391613653, 0.4679943703324265, 0.19435032850983835, 0.19353631102388003, 0.19290551288499413, 0.196793575931705, 0.19025092391797793, 0.3364037035435923, 0.1833304073299773, 0.2793574864345736, 0.41393838050891874, 0.1867670124765738, 0.17651906413345164, 0.19662495386667178, 0.18142101312010384, 0.1770542251781182, 0.1816133853946187, 0.17932245864657437, 0.1921248839365971, 0.18916740904488527, 0.07684428781416175, 0.07694903458642943, 0.07251990763039906, 0.0738205431486818, 0.07787426873021319, 0.07813236847607519, 0.07127202294496271, 0.0788123139031286, 0.08083320261279225]}, "mutation_prompt": null}
{"id": "c5b17594-3d14-4e9a-a098-737a001fa3c3", "solution": "import numpy as np\n\nclass AdaptiveMemoryDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.memory_factor = 0.5  # Memory influence factor\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        memory = best_solution.copy()  # Memory of the best solution\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                dynamic_F = self.F * (1 - 0.5 * (evals / self.budget))\n                mutant = np.clip(a + dynamic_F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover Probability\n                self.CR = 0.2 if evals > 0.7 * self.budget else 0.9\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                        memory = (1 - self.memory_factor) * memory + self.memory_factor * best_solution\n\n                # Memory-based Local Search\n                if evals % 50 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    adaptive_step = (0.05 + 0.95 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(memory + adaptive_step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n                        memory = (1 - self.memory_factor) * memory + self.memory_factor * best_solution\n        \n        return best_solution", "name": "AdaptiveMemoryDE", "description": "Incorporating adaptive learning rates and a memory mechanism to enhance search efficiency and convergence speed in optimization.", "configspace": "", "generation": 34, "fitness": 0.21331361873958515, "feedback": "The algorithm AdaptiveMemoryDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.18.", "error": "", "parent_id": "7296f870-74fe-4049-a97e-295cd93fafff", "metadata": {"aucs": [0.4757715827800634, 0.47795925189574395, 0.4733768605788248, 0.5233575421722965, 0.5071076121395285, 0.5019128412319549, 0.5062235338633891, 0.4869239029913037, 0.5022253514001054, 0.23742572063549094, 0.2338262919064409, 0.2421189873326136, 0.22641697197057054, 0.23013522811404596, 0.23717672920955712, 0.23830453030961518, 0.2501974911414855, 0.255420163528169, 0.09423627302971127, 0.10057045080370064, 0.09187579340374363, 0.10319196890900262, 0.09621879996243965, 0.08806670063836242, 0.09235919157038242, 0.08709929216075307, 0.10779804711836438, 0.0849552216024424, 0.08731163624856564, 0.08443883111062855, 0.09370560438117614, 0.08100885074615849, 0.09034659544933621, 0.08853863322265532, 0.09085506226578488, 0.07774760237324718, 0.8126962601413722, 0.8622771634469087, 0.9047854636854078, 0.9436611936995899, 0.9469465713449636, 0.9267324056991495, 0.9029013080473395, 0.9534460969329814, 0.9564371421712474, 0.19222095465786748, 0.17761824505799573, 0.20117179602794955, 0.2077063294405933, 0.19381115009760397, 0.20781763684473742, 0.2000822467326684, 0.213419712569765, 0.21733696821735082, 0.28384620420540896, 0.35832778318780034, 0.3186929504063678, 0.4129564058280941, 0.2843488121175979, 0.5236965810557677, 0.2849731680123967, 0.27848627159396055, 0.34145289692892766, 0.11776823897866284, 0.11662242638399656, 0.12194192764923428, 0.09781480806349896, 0.11609641145001492, 0.1085178934154325, 0.1343999804470657, 0.13496792145317593, 0.13146807088541534, 0.1681496102460477, 0.22046829884844799, 0.04508638109561347, 0.0933743775918241, 0.13519658898050746, 0.12996481251031378, 0.11802300841364266, 0.13223679353821394, 0.10929064223057561, 0.09554854157159376, 0.059337219962122045, 0.04731783581879534, 0.09241754550987757, 0.05639342960689586, 0.04764211500080784, 0.07332936834833403, 0.06600735074463371, 0.06591146848761587, 0.21604016356597722, 0.16170060450330803, 0.18043035061431778, 0.17003368835812038, 0.1481456202482655, 0.14982006444489382, 0.21227734291282263, 0.2525337765670611, 0.21680876081884126, 9.999999999998899e-05, 0.0062547611458209085, 0.004605268509268345, 0.005018536739159418, 9.999999999998899e-05, 0.002455623076522695, 0.017011335109749948, 0.00381631377398739, 0.0038994483679236636, 0.10922571700822414, 0.10088248312112869, 0.11135614283527406, 0.107928068870634, 0.10697004297416624, 0.10176980534349622, 0.1046137704057577, 0.10453313958582289, 0.11150649921285316, 0.37632339329189, 0.38086183218583847, 0.3973203216046698, 0.392486373169574, 0.4183819192274324, 0.3901871836441284, 0.37600328237644265, 0.40630574846396394, 0.3922626542966966, 0.08886127479153516, 0.09035156408229428, 0.08987123125609142, 0.0793660170329471, 0.09015637769904172, 0.07645980118769569, 0.08267616036656089, 0.0831428653815236, 0.07876787167353994, 0.17909803031230387, 0.13394454259868982, 0.13058454785722273, 0.14484946957962108, 0.15378745987776643, 0.16857081629465176, 0.13233763161595324, 0.13825629512125637, 0.15375348413128942, 0.24494280592173467, 0.24252373895300938, 0.2388032227708009, 0.2334486435392492, 0.24100467633254852, 0.24328337810980816, 0.26126376388489536, 0.25703632093699524, 0.254522149799299, 0.1819714238477198, 0.18750601864952054, 0.19146147460955498, 0.17192071028849565, 0.17881877030939575, 0.184865459946414, 0.18581209632975082, 0.1913520180383529, 0.19745251838607114, 0.17252136394170958, 0.18095673401190393, 0.18041265317378108, 0.1797931434982304, 0.18897707144929132, 0.21821791827366788, 0.18099611794614123, 0.2172878982628268, 0.18090360190380483, 0.17294814705627892, 0.17582275282388704, 0.1798063204712822, 0.17784803361769952, 0.19549937489626368, 0.18607411791598216, 0.17161480175727006, 0.17729723276308107, 0.18339376250033212, 0.28848545721812857, 0.17379769809498957, 0.18028276452496683, 0.2436141624866578, 0.24293938840411888, 0.22032812195763518, 0.2885693972937471, 0.18571074477987848, 0.19161573554633793, 0.1871344870748134, 0.19380438847442027, 0.18040475152530489, 0.1998227473007581, 0.26011181755105994, 0.22237321544364264, 0.3408982451937418, 0.19447712024888997, 0.23765702732659122, 0.1866577766733607, 0.18001186729585406, 0.18443552199449043, 0.19958065208246134, 0.18075197233278362, 0.17325175681458183, 0.1836351711652936, 0.19025258882291463, 0.18060643773583762, 0.07540039041782898, 0.07047585627029562, 0.06564268717387545, 0.07769829060883582, 0.08017632347805959, 0.0741039320691087, 0.06844230714462662, 0.06772372540645644, 0.0723534720851503]}, "mutation_prompt": null}
{"id": "51f93837-b168-4152-86df-be3545791322", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Mutation with dynamic F adjustment\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                decay = 1 - evals / self.budget\n                dynamic_F = self.F * (1 - 0.5 * (evals / self.budget))\n                mutant = np.clip(a + dynamic_F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Introducing dynamic mutation factor adjustment to enhance exploration and exploitation balance in the optimization process.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7296f870-74fe-4049-a97e-295cd93fafff", "metadata": {"aucs": [0.6111859594655333, 0.6122674665436627, 0.6300934093135728, 0.622382153922403, 0.6441350495309767, 0.6411255410370451, 0.6211384530709764, 0.6070637418255258, 0.6465089029102129, 0.4490978654544223, 0.37416470630871834, 0.4207479731693754, 0.40300999611485855, 0.37901156654623513, 0.3773405498966247, 0.42437322730595006, 0.40440732112034816, 0.37504108304525474, 0.12771101278571673, 0.13559682151010088, 0.1235542858742783, 0.13170038548443774, 0.12582115190148857, 0.13323155285573507, 0.11672891523391626, 0.11445270505884186, 0.13310921303311496, 0.11477708099720763, 0.10556857079598103, 0.10187482033655038, 0.1029828246549751, 0.1113062982193378, 0.10600215679365443, 0.1113737385970468, 0.09775453525103728, 0.10189674175682795, 0.8697420179976125, 0.9367597039206721, 0.9027951777164102, 0.862367704371726, 0.9475446384383786, 0.8659525837661128, 0.911594960995454, 0.9031647658912896, 0.9314683630812803, 0.2364885548649034, 0.20326012873237664, 0.23955895740552835, 0.2249085606435891, 0.2360891082653559, 0.24484355050566153, 0.24559102071217165, 0.25797075312357864, 0.22868076726249442, 0.6055751964637843, 0.6021470346253217, 0.6036778184402544, 0.6177806877363128, 0.6007387527433876, 0.5840376171433387, 0.6282199785622191, 0.5783300823970183, 0.6124777969592314, 0.12858761231035898, 0.1332286560247974, 0.15342596254738927, 0.14340711346842305, 0.17351437048333085, 0.14326408514769395, 0.2684971274040092, 0.12710236601945857, 0.15200170283337522, 0.13134462119444945, 0.12839890751325544, 0.16545912015368325, 0.1567260653293524, 0.13431762847948736, 0.14640152197282297, 0.21250447480790868, 0.132924118989461, 0.12233655983124003, 0.17734929719623482, 0.1924910917746948, 0.13189246489462259, 0.1567476912224287, 0.16675757094534382, 0.17288473922143333, 0.1772021189434514, 0.17449126692106187, 0.18413440729983999, 0.27033881654337844, 0.26028830173217543, 0.32453247393434403, 0.2616573800755536, 0.2645128413610024, 0.2645481547862212, 0.3191560572719876, 0.32893843456383076, 0.3415049927304753, 0.06468324086490151, 0.05422522736328317, 0.06716734129963697, 0.050984765490136086, 0.06168120987985026, 0.08572559578437866, 0.0960245010589088, 0.068334283837441, 0.07530781513267171, 0.16210409622132993, 0.1859341143899912, 0.15912686094012574, 0.17001823443071318, 0.16591889479030908, 0.19588871561005006, 0.21146569278004768, 0.15291772681798488, 0.17580921751225542, 0.4376371312687716, 0.46594002258380807, 0.5232728934199216, 0.49227359168902163, 0.5349082937746861, 0.5162564132556531, 0.5040302307067942, 0.4914042820229968, 0.4893348221670196, 0.10141894746879676, 0.10260358430950178, 0.11066856571082428, 0.09429067361129473, 0.0866222329887405, 0.09055020449690332, 0.11615824795037932, 0.10302606608651332, 0.09679927190372051, 0.17525258584005043, 0.1272382289889834, 0.14862551656111989, 0.14536239398526063, 0.17135761103484615, 0.13888687159930269, 0.15275906789536098, 0.141607450315281, 0.13976353209547399, 0.30578252225467173, 0.3207873182189195, 0.3257711628244314, 0.2941719331217878, 0.2889420999744522, 0.3224384166247901, 0.3255209742087123, 0.3528868343358811, 0.3370075479379938, 0.24152611063387053, 0.2359499673951857, 0.24695021480146473, 0.24168796119368618, 0.23537740653396688, 0.24561713831569987, 0.25295330772205193, 0.2610354920323352, 0.2701082065770588, 0.22517677044380524, 0.20196155720356224, 0.1771867373043966, 0.17795761705616564, 0.19419009187364678, 0.19038136146328555, 0.18496041387139062, 0.19260422166074087, 0.20084894327360503, 0.17874819704222422, 0.18972337086179225, 0.19561819931814262, 0.19502677656893408, 0.1880786252430856, 0.1874234174208561, 0.20802529107076384, 0.18837297360171468, 0.1978812723677854, 0.2793242820105628, 0.1804693087723761, 0.34091645745163945, 0.16498478379683834, 0.32280684228665246, 0.16891591315303756, 0.5205040277846888, 0.49216408391613653, 0.4679943703324265, 0.19435032850983835, 0.19353631102388003, 0.19290551288499413, 0.196793575931705, 0.19025092391797793, 0.3364037035435923, 0.1833304073299773, 0.2793574864345736, 0.41393838050891874, 0.1867670124765738, 0.17651906413345164, 0.19662495386667178, 0.18142101312010384, 0.1770542251781182, 0.1816133853946187, 0.17932245864657437, 0.1921248839365971, 0.18916740904488527, 0.07684428781416175, 0.07694903458642943, 0.07251990763039906, 0.0738205431486818, 0.07787426873021319, 0.07813236847607519, 0.07127202294496271, 0.0788123139031286, 0.08083320261279225]}, "mutation_prompt": null}
{"id": "71393951-e964-4ff0-ade2-bc72a41c554c", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Mutation with dynamic F adjustment\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                decay = 1 - evals / self.budget\n                dynamic_F = self.F * (1 - 0.5 * (evals / self.budget))\n                mutant = np.clip(a + dynamic_F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Introducing dynamic mutation factor adjustment to enhance exploration and exploitation balance in the optimization process.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7296f870-74fe-4049-a97e-295cd93fafff", "metadata": {"aucs": [0.6111859594655333, 0.6122674665436627, 0.6300934093135728, 0.622382153922403, 0.6441350495309767, 0.6411255410370451, 0.6211384530709764, 0.6070637418255258, 0.6465089029102129, 0.4490978654544223, 0.37416470630871834, 0.4207479731693754, 0.40300999611485855, 0.37901156654623513, 0.3773405498966247, 0.42437322730595006, 0.40440732112034816, 0.37504108304525474, 0.12771101278571673, 0.13559682151010088, 0.1235542858742783, 0.13170038548443774, 0.12582115190148857, 0.13323155285573507, 0.11672891523391626, 0.11445270505884186, 0.13310921303311496, 0.11477708099720763, 0.10556857079598103, 0.10187482033655038, 0.1029828246549751, 0.1113062982193378, 0.10600215679365443, 0.1113737385970468, 0.09775453525103728, 0.10189674175682795, 0.8697420179976125, 0.9367597039206721, 0.9027951777164102, 0.862367704371726, 0.9475446384383786, 0.8659525837661128, 0.911594960995454, 0.9031647658912896, 0.9314683630812803, 0.2364885548649034, 0.20326012873237664, 0.23955895740552835, 0.2249085606435891, 0.2360891082653559, 0.24484355050566153, 0.24559102071217165, 0.25797075312357864, 0.22868076726249442, 0.6055751964637843, 0.6021470346253217, 0.6036778184402544, 0.6177806877363128, 0.6007387527433876, 0.5840376171433387, 0.6282199785622191, 0.5783300823970183, 0.6124777969592314, 0.12858761231035898, 0.1332286560247974, 0.15342596254738927, 0.14340711346842305, 0.17351437048333085, 0.14326408514769395, 0.2684971274040092, 0.12710236601945857, 0.15200170283337522, 0.13134462119444945, 0.12839890751325544, 0.16545912015368325, 0.1567260653293524, 0.13431762847948736, 0.14640152197282297, 0.21250447480790868, 0.132924118989461, 0.12233655983124003, 0.17734929719623482, 0.1924910917746948, 0.13189246489462259, 0.1567476912224287, 0.16675757094534382, 0.17288473922143333, 0.1772021189434514, 0.17449126692106187, 0.18413440729983999, 0.27033881654337844, 0.26028830173217543, 0.32453247393434403, 0.2616573800755536, 0.2645128413610024, 0.2645481547862212, 0.3191560572719876, 0.32893843456383076, 0.3415049927304753, 0.06468324086490151, 0.05422522736328317, 0.06716734129963697, 0.050984765490136086, 0.06168120987985026, 0.08572559578437866, 0.0960245010589088, 0.068334283837441, 0.07530781513267171, 0.16210409622132993, 0.1859341143899912, 0.15912686094012574, 0.17001823443071318, 0.16591889479030908, 0.19588871561005006, 0.21146569278004768, 0.15291772681798488, 0.17580921751225542, 0.4376371312687716, 0.46594002258380807, 0.5232728934199216, 0.49227359168902163, 0.5349082937746861, 0.5162564132556531, 0.5040302307067942, 0.4914042820229968, 0.4893348221670196, 0.10141894746879676, 0.10260358430950178, 0.11066856571082428, 0.09429067361129473, 0.0866222329887405, 0.09055020449690332, 0.11615824795037932, 0.10302606608651332, 0.09679927190372051, 0.17525258584005043, 0.1272382289889834, 0.14862551656111989, 0.14536239398526063, 0.17135761103484615, 0.13888687159930269, 0.15275906789536098, 0.141607450315281, 0.13976353209547399, 0.30578252225467173, 0.3207873182189195, 0.3257711628244314, 0.2941719331217878, 0.2889420999744522, 0.3224384166247901, 0.3255209742087123, 0.3528868343358811, 0.3370075479379938, 0.24152611063387053, 0.2359499673951857, 0.24695021480146473, 0.24168796119368618, 0.23537740653396688, 0.24561713831569987, 0.25295330772205193, 0.2610354920323352, 0.2701082065770588, 0.22517677044380524, 0.20196155720356224, 0.1771867373043966, 0.17795761705616564, 0.19419009187364678, 0.19038136146328555, 0.18496041387139062, 0.19260422166074087, 0.20084894327360503, 0.17874819704222422, 0.18972337086179225, 0.19561819931814262, 0.19502677656893408, 0.1880786252430856, 0.1874234174208561, 0.20802529107076384, 0.18837297360171468, 0.1978812723677854, 0.2793242820105628, 0.1804693087723761, 0.34091645745163945, 0.16498478379683834, 0.32280684228665246, 0.16891591315303756, 0.5205040277846888, 0.49216408391613653, 0.4679943703324265, 0.19435032850983835, 0.19353631102388003, 0.19290551288499413, 0.196793575931705, 0.19025092391797793, 0.3364037035435923, 0.1833304073299773, 0.2793574864345736, 0.41393838050891874, 0.1867670124765738, 0.17651906413345164, 0.19662495386667178, 0.18142101312010384, 0.1770542251781182, 0.1816133853946187, 0.17932245864657437, 0.1921248839365971, 0.18916740904488527, 0.07684428781416175, 0.07694903458642943, 0.07251990763039906, 0.0738205431486818, 0.07787426873021319, 0.07813236847607519, 0.07127202294496271, 0.0788123139031286, 0.08083320261279225]}, "mutation_prompt": null}
{"id": "b73b4581-b45d-4629-8115-be97b8e0b037", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Mutation with dynamic F adjustment\n                indices = [idx for idx in range(self.pop_size) if idx != i]\n                a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                decay = 1 - evals / self.budget\n                dynamic_F = self.F * (1 - 0.5 * (evals / self.budget))\n                mutant = np.clip(a + dynamic_F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Introducing dynamic mutation factor adjustment to enhance exploration and exploitation balance in the optimization process.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7296f870-74fe-4049-a97e-295cd93fafff", "metadata": {"aucs": [0.6111859594655333, 0.6122674665436627, 0.6300934093135728, 0.622382153922403, 0.6441350495309767, 0.6411255410370451, 0.6211384530709764, 0.6070637418255258, 0.6465089029102129, 0.4490978654544223, 0.37416470630871834, 0.4207479731693754, 0.40300999611485855, 0.37901156654623513, 0.3773405498966247, 0.42437322730595006, 0.40440732112034816, 0.37504108304525474, 0.12771101278571673, 0.13559682151010088, 0.1235542858742783, 0.13170038548443774, 0.12582115190148857, 0.13323155285573507, 0.11672891523391626, 0.11445270505884186, 0.13310921303311496, 0.11477708099720763, 0.10556857079598103, 0.10187482033655038, 0.1029828246549751, 0.1113062982193378, 0.10600215679365443, 0.1113737385970468, 0.09775453525103728, 0.10189674175682795, 0.8697420179976125, 0.9367597039206721, 0.9027951777164102, 0.862367704371726, 0.9475446384383786, 0.8659525837661128, 0.911594960995454, 0.9031647658912896, 0.9314683630812803, 0.2364885548649034, 0.20326012873237664, 0.23955895740552835, 0.2249085606435891, 0.2360891082653559, 0.24484355050566153, 0.24559102071217165, 0.25797075312357864, 0.22868076726249442, 0.6055751964637843, 0.6021470346253217, 0.6036778184402544, 0.6177806877363128, 0.6007387527433876, 0.5840376171433387, 0.6282199785622191, 0.5783300823970183, 0.6124777969592314, 0.12858761231035898, 0.1332286560247974, 0.15342596254738927, 0.14340711346842305, 0.17351437048333085, 0.14326408514769395, 0.2684971274040092, 0.12710236601945857, 0.15200170283337522, 0.13134462119444945, 0.12839890751325544, 0.16545912015368325, 0.1567260653293524, 0.13431762847948736, 0.14640152197282297, 0.21250447480790868, 0.132924118989461, 0.12233655983124003, 0.17734929719623482, 0.1924910917746948, 0.13189246489462259, 0.1567476912224287, 0.16675757094534382, 0.17288473922143333, 0.1772021189434514, 0.17449126692106187, 0.18413440729983999, 0.27033881654337844, 0.26028830173217543, 0.32453247393434403, 0.2616573800755536, 0.2645128413610024, 0.2645481547862212, 0.3191560572719876, 0.32893843456383076, 0.3415049927304753, 0.06468324086490151, 0.05422522736328317, 0.06716734129963697, 0.050984765490136086, 0.06168120987985026, 0.08572559578437866, 0.0960245010589088, 0.068334283837441, 0.07530781513267171, 0.16210409622132993, 0.1859341143899912, 0.15912686094012574, 0.17001823443071318, 0.16591889479030908, 0.19588871561005006, 0.21146569278004768, 0.15291772681798488, 0.17580921751225542, 0.4376371312687716, 0.46594002258380807, 0.5232728934199216, 0.49227359168902163, 0.5349082937746861, 0.5162564132556531, 0.5040302307067942, 0.4914042820229968, 0.4893348221670196, 0.10141894746879676, 0.10260358430950178, 0.11066856571082428, 0.09429067361129473, 0.0866222329887405, 0.09055020449690332, 0.11615824795037932, 0.10302606608651332, 0.09679927190372051, 0.17525258584005043, 0.1272382289889834, 0.14862551656111989, 0.14536239398526063, 0.17135761103484615, 0.13888687159930269, 0.15275906789536098, 0.141607450315281, 0.13976353209547399, 0.30578252225467173, 0.3207873182189195, 0.3257711628244314, 0.2941719331217878, 0.2889420999744522, 0.3224384166247901, 0.3255209742087123, 0.3528868343358811, 0.3370075479379938, 0.24152611063387053, 0.2359499673951857, 0.24695021480146473, 0.24168796119368618, 0.23537740653396688, 0.24561713831569987, 0.25295330772205193, 0.2610354920323352, 0.2701082065770588, 0.22517677044380524, 0.20196155720356224, 0.1771867373043966, 0.17795761705616564, 0.19419009187364678, 0.19038136146328555, 0.18496041387139062, 0.19260422166074087, 0.20084894327360503, 0.17874819704222422, 0.18972337086179225, 0.19561819931814262, 0.19502677656893408, 0.1880786252430856, 0.1874234174208561, 0.20802529107076384, 0.18837297360171468, 0.1978812723677854, 0.2793242820105628, 0.1804693087723761, 0.34091645745163945, 0.16498478379683834, 0.32280684228665246, 0.16891591315303756, 0.5205040277846888, 0.49216408391613653, 0.4679943703324265, 0.19435032850983835, 0.19353631102388003, 0.19290551288499413, 0.196793575931705, 0.19025092391797793, 0.3364037035435923, 0.1833304073299773, 0.2793574864345736, 0.41393838050891874, 0.1867670124765738, 0.17651906413345164, 0.19662495386667178, 0.18142101312010384, 0.1770542251781182, 0.1816133853946187, 0.17932245864657437, 0.1921248839365971, 0.18916740904488527, 0.07684428781416175, 0.07694903458642943, 0.07251990763039906, 0.0738205431486818, 0.07787426873021319, 0.07813236847607519, 0.07127202294496271, 0.0788123139031286, 0.08083320261279225]}, "mutation_prompt": null}
{"id": "d8e67729-0d41-4e4d-8ec6-fff9e5db5667", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Selective Mutation Strategy\n                indices = np.argsort(fitness)[:self.pop_size//2]  # select top half based on fitness\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                dynamic_F = self.F * (1 - 0.5 * (evals / self.budget))\n                mutant = np.clip(a + dynamic_F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Introducing a selective mutation strategy based on fitness ranking to improve convergence speed.", "configspace": "", "generation": 38, "fitness": 0.31845071492691246, "feedback": "The algorithm HybridDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.22.", "error": "", "parent_id": "7296f870-74fe-4049-a97e-295cd93fafff", "metadata": {"aucs": [0.6921803832002705, 0.700375616511019, 0.6944095616436363, 0.714815186399387, 0.6935808330873592, 0.7037692409856633, 0.7085227338462282, 0.6909576446469468, 0.708992870206366, 0.514202992568142, 0.5151989765455434, 0.5347217101907344, 0.5092620836283233, 0.5463845240460926, 0.49721352649872175, 0.5029934831809619, 0.4739712838942459, 0.5066303874045526, 0.12712256554452583, 0.15652448204035319, 0.13605993896149482, 0.15580078668829078, 0.1331530203865826, 0.14811896161849558, 0.14970321254343832, 0.12820566074664475, 0.1477812620679262, 0.11701636417005534, 0.11736872620627947, 0.11433810297882752, 0.1146524246447288, 0.1145024398793586, 0.10992683025773875, 0.11522393748017334, 0.10624261248129097, 0.11088727860320635, 0.8909378692221623, 0.9599988886340005, 0.8814051144636283, 0.8586438690411334, 0.893530431112333, 0.8761058809236995, 0.9092141771416383, 0.905030828663494, 0.9645571944944731, 0.288632326869108, 0.2611439740821193, 0.23965482591214193, 0.23703850359008094, 0.2896668535795873, 0.2497408986433668, 0.2736190512823057, 0.273001058735893, 0.2608266266945485, 0.6688508780130283, 0.6671467148288821, 0.651796309289272, 0.6579373888663351, 0.6867800718642704, 0.6722207951760553, 0.6978081635118021, 0.6859640692643756, 0.6924931070228146, 0.1942932052163303, 0.19250420804540758, 0.1458280131422265, 0.15965906041658495, 0.16197378554312714, 0.30089642443423503, 0.20648174533976893, 0.15471047659934356, 0.18136277904056874, 0.2330842425268641, 0.04955298771397776, 0.10791318938190364, 0.20359725810808182, 0.13796559192675828, 0.17058673851664607, 0.12490376066844688, 0.1274154372531242, 0.15012466846729544, 0.27405566858073105, 0.2147893511801381, 0.21502670425824544, 0.30385544167627776, 0.25107603138251866, 0.1509229594288234, 0.3078504291632236, 0.2241093948170625, 0.2452843503452714, 0.3247002716890428, 0.39303310451701856, 0.35255895046809604, 0.36092495459198204, 0.3993916100972228, 0.35968586329290264, 0.3912361637303845, 0.429623206890838, 0.37758674077871257, 0.08074714803926819, 0.1451169532972697, 0.1464600014451698, 0.09547932117024416, 0.15809630707707634, 0.15496443496591872, 0.17378097410828308, 0.12377898557234768, 0.18672635644793756, 0.2023657758776899, 0.24814848525034772, 0.25771885840149267, 0.22764448915770352, 0.2445291926219394, 0.21548618995247804, 0.21989952836292181, 0.23734080420620918, 0.22637350807913326, 0.5929108396249199, 0.5514985364667917, 0.5559309365285838, 0.5717296136189447, 0.5525630909300807, 0.5714648899671083, 0.5820293987974239, 0.5282227888355457, 0.5799897930442872, 0.10537226300296698, 0.11657929474275719, 0.09525750427673907, 0.10190204860218055, 0.10411077408643576, 0.11451031096823605, 0.09847925718662898, 0.1078837767890114, 0.1029897619427087, 0.14257533017487511, 0.1449955612128313, 0.15161475717945128, 0.16688986396797323, 0.1528747959749629, 0.17541973513413978, 0.15223329389237916, 0.1530832749694897, 0.13949784180929037, 0.3506332724109439, 0.3865459812041707, 0.38018692519196406, 0.3911879728023998, 0.34101924180817456, 0.3763984430219801, 0.4331778644808528, 0.4074803154843345, 0.38365291658097567, 0.3111859012059248, 0.31124430153395277, 0.27052221279219335, 0.29194002943961095, 0.2646858325600189, 0.29739198988220183, 0.31330471047455444, 0.27297879751302134, 0.3084727312124699, 0.18607081973207718, 0.21134999713883562, 0.18207077473382216, 0.19544393569595997, 0.1904356743656035, 0.2005242665989807, 0.19349799871090756, 0.2175383606649729, 0.1924610960291373, 0.24873281799328573, 0.27836312107094996, 0.19974806781215937, 0.1981644621987172, 0.22694840844856268, 0.19088388333278472, 0.19912657084115126, 0.22988423016648984, 0.209881536283673, 0.6270076650365011, 0.591025635146484, 0.5485400178605049, 0.5838096747800302, 0.5954262237765411, 0.5836070341484096, 0.1833652487816141, 0.16847527810597274, 0.4206535498687004, 0.6354551824476533, 0.19527636044511187, 0.2738840792354085, 0.5374813493361007, 0.19363142255884935, 0.433583077879951, 0.20624070495608693, 0.4370180323104026, 0.20345439715681346, 0.18885237289006207, 0.18716921603877734, 0.20040179195718166, 0.19078773925835124, 0.18713416801232008, 0.17385142354535654, 0.18114958000298942, 0.19680310636180876, 0.1813642794216347, 0.07300157001662644, 0.08277324069116054, 0.07615813302209551, 0.07437586989302358, 0.07264557510185188, 0.07651754466558758, 0.07463846804926377, 0.0872515735067011, 0.07901944283383633]}, "mutation_prompt": null}
{"id": "4cfc9b34-ef3d-41ff-bb5f-228ccedf07d5", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Selective Mutation Strategy\n                indices = np.argsort(fitness)[:self.pop_size//2]  # select top half based on fitness\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                dynamic_F = self.F * (1 - 0.5 * (evals / self.budget))\n                mutant = np.clip(a + dynamic_F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Introducing a selective mutation strategy based on fitness ranking to improve convergence speed.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d8e67729-0d41-4e4d-8ec6-fff9e5db5667", "metadata": {"aucs": [0.6921803832002705, 0.700375616511019, 0.6944095616436363, 0.714815186399387, 0.6935808330873592, 0.7037692409856633, 0.7085227338462282, 0.6909576446469468, 0.708992870206366, 0.514202992568142, 0.5151989765455434, 0.5347217101907344, 0.5092620836283233, 0.5463845240460926, 0.49721352649872175, 0.5029934831809619, 0.4739712838942459, 0.5066303874045526, 0.12712256554452583, 0.15652448204035319, 0.13605993896149482, 0.15580078668829078, 0.1331530203865826, 0.14811896161849558, 0.14970321254343832, 0.12820566074664475, 0.1477812620679262, 0.11701636417005534, 0.11736872620627947, 0.11433810297882752, 0.1146524246447288, 0.1145024398793586, 0.10992683025773875, 0.11522393748017334, 0.10624261248129097, 0.11088727860320635, 0.8909378692221623, 0.9599988886340005, 0.8814051144636283, 0.8586438690411334, 0.893530431112333, 0.8761058809236995, 0.9092141771416383, 0.905030828663494, 0.9645571944944731, 0.288632326869108, 0.2611439740821193, 0.23965482591214193, 0.23703850359008094, 0.2896668535795873, 0.2497408986433668, 0.2736190512823057, 0.273001058735893, 0.2608266266945485, 0.6688508780130283, 0.6671467148288821, 0.651796309289272, 0.6579373888663351, 0.6867800718642704, 0.6722207951760553, 0.6978081635118021, 0.6859640692643756, 0.6924931070228146, 0.1942932052163303, 0.19250420804540758, 0.1458280131422265, 0.15965906041658495, 0.16197378554312714, 0.30089642443423503, 0.20648174533976893, 0.15471047659934356, 0.18136277904056874, 0.2330842425268641, 0.04955298771397776, 0.10791318938190364, 0.20359725810808182, 0.13796559192675828, 0.17058673851664607, 0.12490376066844688, 0.1274154372531242, 0.15012466846729544, 0.27405566858073105, 0.2147893511801381, 0.21502670425824544, 0.30385544167627776, 0.25107603138251866, 0.1509229594288234, 0.3078504291632236, 0.2241093948170625, 0.2452843503452714, 0.3247002716890428, 0.39303310451701856, 0.35255895046809604, 0.36092495459198204, 0.3993916100972228, 0.35968586329290264, 0.3912361637303845, 0.429623206890838, 0.37758674077871257, 0.08074714803926819, 0.1451169532972697, 0.1464600014451698, 0.09547932117024416, 0.15809630707707634, 0.15496443496591872, 0.17378097410828308, 0.12377898557234768, 0.18672635644793756, 0.2023657758776899, 0.24814848525034772, 0.25771885840149267, 0.22764448915770352, 0.2445291926219394, 0.21548618995247804, 0.21989952836292181, 0.23734080420620918, 0.22637350807913326, 0.5929108396249199, 0.5514985364667917, 0.5559309365285838, 0.5717296136189447, 0.5525630909300807, 0.5714648899671083, 0.5820293987974239, 0.5282227888355457, 0.5799897930442872, 0.10537226300296698, 0.11657929474275719, 0.09525750427673907, 0.10190204860218055, 0.10411077408643576, 0.11451031096823605, 0.09847925718662898, 0.1078837767890114, 0.1029897619427087, 0.14257533017487511, 0.1449955612128313, 0.15161475717945128, 0.16688986396797323, 0.1528747959749629, 0.17541973513413978, 0.15223329389237916, 0.1530832749694897, 0.13949784180929037, 0.3506332724109439, 0.3865459812041707, 0.38018692519196406, 0.3911879728023998, 0.34101924180817456, 0.3763984430219801, 0.4331778644808528, 0.4074803154843345, 0.38365291658097567, 0.3111859012059248, 0.31124430153395277, 0.27052221279219335, 0.29194002943961095, 0.2646858325600189, 0.29739198988220183, 0.31330471047455444, 0.27297879751302134, 0.3084727312124699, 0.18607081973207718, 0.21134999713883562, 0.18207077473382216, 0.19544393569595997, 0.1904356743656035, 0.2005242665989807, 0.19349799871090756, 0.2175383606649729, 0.1924610960291373, 0.24873281799328573, 0.27836312107094996, 0.19974806781215937, 0.1981644621987172, 0.22694840844856268, 0.19088388333278472, 0.19912657084115126, 0.22988423016648984, 0.209881536283673, 0.6270076650365011, 0.591025635146484, 0.5485400178605049, 0.5838096747800302, 0.5954262237765411, 0.5836070341484096, 0.1833652487816141, 0.16847527810597274, 0.4206535498687004, 0.6354551824476533, 0.19527636044511187, 0.2738840792354085, 0.5374813493361007, 0.19363142255884935, 0.433583077879951, 0.20624070495608693, 0.4370180323104026, 0.20345439715681346, 0.18885237289006207, 0.18716921603877734, 0.20040179195718166, 0.19078773925835124, 0.18713416801232008, 0.17385142354535654, 0.18114958000298942, 0.19680310636180876, 0.1813642794216347, 0.07300157001662644, 0.08277324069116054, 0.07615813302209551, 0.07437586989302358, 0.07264557510185188, 0.07651754466558758, 0.07463846804926377, 0.0872515735067011, 0.07901944283383633]}, "mutation_prompt": null}
{"id": "5e391ddd-e7d5-4fab-9166-1fd21de59038", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Selective Mutation Strategy\n                indices = np.argsort(fitness)[:self.pop_size//2]  # select top half based on fitness\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                dynamic_F = self.F * (1 - 0.5 * (evals / self.budget))\n                mutant = np.clip(a + dynamic_F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Introducing a selective mutation strategy based on fitness ranking to improve convergence speed.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d8e67729-0d41-4e4d-8ec6-fff9e5db5667", "metadata": {"aucs": [0.6921803832002705, 0.700375616511019, 0.6944095616436363, 0.714815186399387, 0.6935808330873592, 0.7037692409856633, 0.7085227338462282, 0.6909576446469468, 0.708992870206366, 0.514202992568142, 0.5151989765455434, 0.5347217101907344, 0.5092620836283233, 0.5463845240460926, 0.49721352649872175, 0.5029934831809619, 0.4739712838942459, 0.5066303874045526, 0.12712256554452583, 0.15652448204035319, 0.13605993896149482, 0.15580078668829078, 0.1331530203865826, 0.14811896161849558, 0.14970321254343832, 0.12820566074664475, 0.1477812620679262, 0.11701636417005534, 0.11736872620627947, 0.11433810297882752, 0.1146524246447288, 0.1145024398793586, 0.10992683025773875, 0.11522393748017334, 0.10624261248129097, 0.11088727860320635, 0.8909378692221623, 0.9599988886340005, 0.8814051144636283, 0.8586438690411334, 0.893530431112333, 0.8761058809236995, 0.9092141771416383, 0.905030828663494, 0.9645571944944731, 0.288632326869108, 0.2611439740821193, 0.23965482591214193, 0.23703850359008094, 0.2896668535795873, 0.2497408986433668, 0.2736190512823057, 0.273001058735893, 0.2608266266945485, 0.6688508780130283, 0.6671467148288821, 0.651796309289272, 0.6579373888663351, 0.6867800718642704, 0.6722207951760553, 0.6978081635118021, 0.6859640692643756, 0.6924931070228146, 0.1942932052163303, 0.19250420804540758, 0.1458280131422265, 0.15965906041658495, 0.16197378554312714, 0.30089642443423503, 0.20648174533976893, 0.15471047659934356, 0.18136277904056874, 0.2330842425268641, 0.04955298771397776, 0.10791318938190364, 0.20359725810808182, 0.13796559192675828, 0.17058673851664607, 0.12490376066844688, 0.1274154372531242, 0.15012466846729544, 0.27405566858073105, 0.2147893511801381, 0.21502670425824544, 0.30385544167627776, 0.25107603138251866, 0.1509229594288234, 0.3078504291632236, 0.2241093948170625, 0.2452843503452714, 0.3247002716890428, 0.39303310451701856, 0.35255895046809604, 0.36092495459198204, 0.3993916100972228, 0.35968586329290264, 0.3912361637303845, 0.429623206890838, 0.37758674077871257, 0.08074714803926819, 0.1451169532972697, 0.1464600014451698, 0.09547932117024416, 0.15809630707707634, 0.15496443496591872, 0.17378097410828308, 0.12377898557234768, 0.18672635644793756, 0.2023657758776899, 0.24814848525034772, 0.25771885840149267, 0.22764448915770352, 0.2445291926219394, 0.21548618995247804, 0.21989952836292181, 0.23734080420620918, 0.22637350807913326, 0.5929108396249199, 0.5514985364667917, 0.5559309365285838, 0.5717296136189447, 0.5525630909300807, 0.5714648899671083, 0.5820293987974239, 0.5282227888355457, 0.5799897930442872, 0.10537226300296698, 0.11657929474275719, 0.09525750427673907, 0.10190204860218055, 0.10411077408643576, 0.11451031096823605, 0.09847925718662898, 0.1078837767890114, 0.1029897619427087, 0.14257533017487511, 0.1449955612128313, 0.15161475717945128, 0.16688986396797323, 0.1528747959749629, 0.17541973513413978, 0.15223329389237916, 0.1530832749694897, 0.13949784180929037, 0.3506332724109439, 0.3865459812041707, 0.38018692519196406, 0.3911879728023998, 0.34101924180817456, 0.3763984430219801, 0.4331778644808528, 0.4074803154843345, 0.38365291658097567, 0.3111859012059248, 0.31124430153395277, 0.27052221279219335, 0.29194002943961095, 0.2646858325600189, 0.29739198988220183, 0.31330471047455444, 0.27297879751302134, 0.3084727312124699, 0.18607081973207718, 0.21134999713883562, 0.18207077473382216, 0.19544393569595997, 0.1904356743656035, 0.2005242665989807, 0.19349799871090756, 0.2175383606649729, 0.1924610960291373, 0.24873281799328573, 0.27836312107094996, 0.19974806781215937, 0.1981644621987172, 0.22694840844856268, 0.19088388333278472, 0.19912657084115126, 0.22988423016648984, 0.209881536283673, 0.6270076650365011, 0.591025635146484, 0.5485400178605049, 0.5838096747800302, 0.5954262237765411, 0.5836070341484096, 0.1833652487816141, 0.16847527810597274, 0.4206535498687004, 0.6354551824476533, 0.19527636044511187, 0.2738840792354085, 0.5374813493361007, 0.19363142255884935, 0.433583077879951, 0.20624070495608693, 0.4370180323104026, 0.20345439715681346, 0.18885237289006207, 0.18716921603877734, 0.20040179195718166, 0.19078773925835124, 0.18713416801232008, 0.17385142354535654, 0.18114958000298942, 0.19680310636180876, 0.1813642794216347, 0.07300157001662644, 0.08277324069116054, 0.07615813302209551, 0.07437586989302358, 0.07264557510185188, 0.07651754466558758, 0.07463846804926377, 0.0872515735067011, 0.07901944283383633]}, "mutation_prompt": null}
{"id": "c3c76ca2-9621-4b2b-9196-96a0da3f0053", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Selective Mutation Strategy\n                indices = np.argsort(fitness)[:self.pop_size//2]  # select top half based on fitness\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                dynamic_F = self.F * (1 - 0.5 * (evals / self.budget))\n                mutant = np.clip(a + dynamic_F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Introducing a selective mutation strategy based on fitness ranking to improve convergence speed.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d8e67729-0d41-4e4d-8ec6-fff9e5db5667", "metadata": {"aucs": [0.6921803832002705, 0.700375616511019, 0.6944095616436363, 0.714815186399387, 0.6935808330873592, 0.7037692409856633, 0.7085227338462282, 0.6909576446469468, 0.708992870206366, 0.514202992568142, 0.5151989765455434, 0.5347217101907344, 0.5092620836283233, 0.5463845240460926, 0.49721352649872175, 0.5029934831809619, 0.4739712838942459, 0.5066303874045526, 0.12712256554452583, 0.15652448204035319, 0.13605993896149482, 0.15580078668829078, 0.1331530203865826, 0.14811896161849558, 0.14970321254343832, 0.12820566074664475, 0.1477812620679262, 0.11701636417005534, 0.11736872620627947, 0.11433810297882752, 0.1146524246447288, 0.1145024398793586, 0.10992683025773875, 0.11522393748017334, 0.10624261248129097, 0.11088727860320635, 0.8909378692221623, 0.9599988886340005, 0.8814051144636283, 0.8586438690411334, 0.893530431112333, 0.8761058809236995, 0.9092141771416383, 0.905030828663494, 0.9645571944944731, 0.288632326869108, 0.2611439740821193, 0.23965482591214193, 0.23703850359008094, 0.2896668535795873, 0.2497408986433668, 0.2736190512823057, 0.273001058735893, 0.2608266266945485, 0.6688508780130283, 0.6671467148288821, 0.651796309289272, 0.6579373888663351, 0.6867800718642704, 0.6722207951760553, 0.6978081635118021, 0.6859640692643756, 0.6924931070228146, 0.1942932052163303, 0.19250420804540758, 0.1458280131422265, 0.15965906041658495, 0.16197378554312714, 0.30089642443423503, 0.20648174533976893, 0.15471047659934356, 0.18136277904056874, 0.2330842425268641, 0.04955298771397776, 0.10791318938190364, 0.20359725810808182, 0.13796559192675828, 0.17058673851664607, 0.12490376066844688, 0.1274154372531242, 0.15012466846729544, 0.27405566858073105, 0.2147893511801381, 0.21502670425824544, 0.30385544167627776, 0.25107603138251866, 0.1509229594288234, 0.3078504291632236, 0.2241093948170625, 0.2452843503452714, 0.3247002716890428, 0.39303310451701856, 0.35255895046809604, 0.36092495459198204, 0.3993916100972228, 0.35968586329290264, 0.3912361637303845, 0.429623206890838, 0.37758674077871257, 0.08074714803926819, 0.1451169532972697, 0.1464600014451698, 0.09547932117024416, 0.15809630707707634, 0.15496443496591872, 0.17378097410828308, 0.12377898557234768, 0.18672635644793756, 0.2023657758776899, 0.24814848525034772, 0.25771885840149267, 0.22764448915770352, 0.2445291926219394, 0.21548618995247804, 0.21989952836292181, 0.23734080420620918, 0.22637350807913326, 0.5929108396249199, 0.5514985364667917, 0.5559309365285838, 0.5717296136189447, 0.5525630909300807, 0.5714648899671083, 0.5820293987974239, 0.5282227888355457, 0.5799897930442872, 0.10537226300296698, 0.11657929474275719, 0.09525750427673907, 0.10190204860218055, 0.10411077408643576, 0.11451031096823605, 0.09847925718662898, 0.1078837767890114, 0.1029897619427087, 0.14257533017487511, 0.1449955612128313, 0.15161475717945128, 0.16688986396797323, 0.1528747959749629, 0.17541973513413978, 0.15223329389237916, 0.1530832749694897, 0.13949784180929037, 0.3506332724109439, 0.3865459812041707, 0.38018692519196406, 0.3911879728023998, 0.34101924180817456, 0.3763984430219801, 0.4331778644808528, 0.4074803154843345, 0.38365291658097567, 0.3111859012059248, 0.31124430153395277, 0.27052221279219335, 0.29194002943961095, 0.2646858325600189, 0.29739198988220183, 0.31330471047455444, 0.27297879751302134, 0.3084727312124699, 0.18607081973207718, 0.21134999713883562, 0.18207077473382216, 0.19544393569595997, 0.1904356743656035, 0.2005242665989807, 0.19349799871090756, 0.2175383606649729, 0.1924610960291373, 0.24873281799328573, 0.27836312107094996, 0.19974806781215937, 0.1981644621987172, 0.22694840844856268, 0.19088388333278472, 0.19912657084115126, 0.22988423016648984, 0.209881536283673, 0.6270076650365011, 0.591025635146484, 0.5485400178605049, 0.5838096747800302, 0.5954262237765411, 0.5836070341484096, 0.1833652487816141, 0.16847527810597274, 0.4206535498687004, 0.6354551824476533, 0.19527636044511187, 0.2738840792354085, 0.5374813493361007, 0.19363142255884935, 0.433583077879951, 0.20624070495608693, 0.4370180323104026, 0.20345439715681346, 0.18885237289006207, 0.18716921603877734, 0.20040179195718166, 0.19078773925835124, 0.18713416801232008, 0.17385142354535654, 0.18114958000298942, 0.19680310636180876, 0.1813642794216347, 0.07300157001662644, 0.08277324069116054, 0.07615813302209551, 0.07437586989302358, 0.07264557510185188, 0.07651754466558758, 0.07463846804926377, 0.0872515735067011, 0.07901944283383633]}, "mutation_prompt": null}
{"id": "ea7ab542-73d5-4e50-b68d-420c26f295de", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Selective Mutation Strategy\n                indices = np.argsort(fitness)[:self.pop_size//2]  # select top half based on fitness\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                dynamic_F = self.F * (1 - 0.5 * (evals / self.budget))\n                mutant = np.clip(a + dynamic_F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Introducing a selective mutation strategy based on fitness ranking to improve convergence speed.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d8e67729-0d41-4e4d-8ec6-fff9e5db5667", "metadata": {"aucs": [0.6921803832002705, 0.700375616511019, 0.6944095616436363, 0.714815186399387, 0.6935808330873592, 0.7037692409856633, 0.7085227338462282, 0.6909576446469468, 0.708992870206366, 0.514202992568142, 0.5151989765455434, 0.5347217101907344, 0.5092620836283233, 0.5463845240460926, 0.49721352649872175, 0.5029934831809619, 0.4739712838942459, 0.5066303874045526, 0.12712256554452583, 0.15652448204035319, 0.13605993896149482, 0.15580078668829078, 0.1331530203865826, 0.14811896161849558, 0.14970321254343832, 0.12820566074664475, 0.1477812620679262, 0.11701636417005534, 0.11736872620627947, 0.11433810297882752, 0.1146524246447288, 0.1145024398793586, 0.10992683025773875, 0.11522393748017334, 0.10624261248129097, 0.11088727860320635, 0.8909378692221623, 0.9599988886340005, 0.8814051144636283, 0.8586438690411334, 0.893530431112333, 0.8761058809236995, 0.9092141771416383, 0.905030828663494, 0.9645571944944731, 0.288632326869108, 0.2611439740821193, 0.23965482591214193, 0.23703850359008094, 0.2896668535795873, 0.2497408986433668, 0.2736190512823057, 0.273001058735893, 0.2608266266945485, 0.6688508780130283, 0.6671467148288821, 0.651796309289272, 0.6579373888663351, 0.6867800718642704, 0.6722207951760553, 0.6978081635118021, 0.6859640692643756, 0.6924931070228146, 0.1942932052163303, 0.19250420804540758, 0.1458280131422265, 0.15965906041658495, 0.16197378554312714, 0.30089642443423503, 0.20648174533976893, 0.15471047659934356, 0.18136277904056874, 0.2330842425268641, 0.04955298771397776, 0.10791318938190364, 0.20359725810808182, 0.13796559192675828, 0.17058673851664607, 0.12490376066844688, 0.1274154372531242, 0.15012466846729544, 0.27405566858073105, 0.2147893511801381, 0.21502670425824544, 0.30385544167627776, 0.25107603138251866, 0.1509229594288234, 0.3078504291632236, 0.2241093948170625, 0.2452843503452714, 0.3247002716890428, 0.39303310451701856, 0.35255895046809604, 0.36092495459198204, 0.3993916100972228, 0.35968586329290264, 0.3912361637303845, 0.429623206890838, 0.37758674077871257, 0.08074714803926819, 0.1451169532972697, 0.1464600014451698, 0.09547932117024416, 0.15809630707707634, 0.15496443496591872, 0.17378097410828308, 0.12377898557234768, 0.18672635644793756, 0.2023657758776899, 0.24814848525034772, 0.25771885840149267, 0.22764448915770352, 0.2445291926219394, 0.21548618995247804, 0.21989952836292181, 0.23734080420620918, 0.22637350807913326, 0.5929108396249199, 0.5514985364667917, 0.5559309365285838, 0.5717296136189447, 0.5525630909300807, 0.5714648899671083, 0.5820293987974239, 0.5282227888355457, 0.5799897930442872, 0.10537226300296698, 0.11657929474275719, 0.09525750427673907, 0.10190204860218055, 0.10411077408643576, 0.11451031096823605, 0.09847925718662898, 0.1078837767890114, 0.1029897619427087, 0.14257533017487511, 0.1449955612128313, 0.15161475717945128, 0.16688986396797323, 0.1528747959749629, 0.17541973513413978, 0.15223329389237916, 0.1530832749694897, 0.13949784180929037, 0.3506332724109439, 0.3865459812041707, 0.38018692519196406, 0.3911879728023998, 0.34101924180817456, 0.3763984430219801, 0.4331778644808528, 0.4074803154843345, 0.38365291658097567, 0.3111859012059248, 0.31124430153395277, 0.27052221279219335, 0.29194002943961095, 0.2646858325600189, 0.29739198988220183, 0.31330471047455444, 0.27297879751302134, 0.3084727312124699, 0.18607081973207718, 0.21134999713883562, 0.18207077473382216, 0.19544393569595997, 0.1904356743656035, 0.2005242665989807, 0.19349799871090756, 0.2175383606649729, 0.1924610960291373, 0.24873281799328573, 0.27836312107094996, 0.19974806781215937, 0.1981644621987172, 0.22694840844856268, 0.19088388333278472, 0.19912657084115126, 0.22988423016648984, 0.209881536283673, 0.6270076650365011, 0.591025635146484, 0.5485400178605049, 0.5838096747800302, 0.5954262237765411, 0.5836070341484096, 0.1833652487816141, 0.16847527810597274, 0.4206535498687004, 0.6354551824476533, 0.19527636044511187, 0.2738840792354085, 0.5374813493361007, 0.19363142255884935, 0.433583077879951, 0.20624070495608693, 0.4370180323104026, 0.20345439715681346, 0.18885237289006207, 0.18716921603877734, 0.20040179195718166, 0.19078773925835124, 0.18713416801232008, 0.17385142354535654, 0.18114958000298942, 0.19680310636180876, 0.1813642794216347, 0.07300157001662644, 0.08277324069116054, 0.07615813302209551, 0.07437586989302358, 0.07264557510185188, 0.07651754466558758, 0.07463846804926377, 0.0872515735067011, 0.07901944283383633]}, "mutation_prompt": null}
{"id": "acb2bec8-48d1-499a-9a32-9ccb33f0f749", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Selective Mutation Strategy\n                indices = np.argsort(fitness)[:self.pop_size//2]  # select top half based on fitness\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                dynamic_F = self.F * (1 - 0.5 * (evals / self.budget))\n                mutant = np.clip(a + dynamic_F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Introducing a selective mutation strategy based on fitness ranking to improve convergence speed.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d8e67729-0d41-4e4d-8ec6-fff9e5db5667", "metadata": {"aucs": [0.6921803832002705, 0.700375616511019, 0.6944095616436363, 0.714815186399387, 0.6935808330873592, 0.7037692409856633, 0.7085227338462282, 0.6909576446469468, 0.708992870206366, 0.514202992568142, 0.5151989765455434, 0.5347217101907344, 0.5092620836283233, 0.5463845240460926, 0.49721352649872175, 0.5029934831809619, 0.4739712838942459, 0.5066303874045526, 0.12712256554452583, 0.15652448204035319, 0.13605993896149482, 0.15580078668829078, 0.1331530203865826, 0.14811896161849558, 0.14970321254343832, 0.12820566074664475, 0.1477812620679262, 0.11701636417005534, 0.11736872620627947, 0.11433810297882752, 0.1146524246447288, 0.1145024398793586, 0.10992683025773875, 0.11522393748017334, 0.10624261248129097, 0.11088727860320635, 0.8909378692221623, 0.9599988886340005, 0.8814051144636283, 0.8586438690411334, 0.893530431112333, 0.8761058809236995, 0.9092141771416383, 0.905030828663494, 0.9645571944944731, 0.288632326869108, 0.2611439740821193, 0.23965482591214193, 0.23703850359008094, 0.2896668535795873, 0.2497408986433668, 0.2736190512823057, 0.273001058735893, 0.2608266266945485, 0.6688508780130283, 0.6671467148288821, 0.651796309289272, 0.6579373888663351, 0.6867800718642704, 0.6722207951760553, 0.6978081635118021, 0.6859640692643756, 0.6924931070228146, 0.1942932052163303, 0.19250420804540758, 0.1458280131422265, 0.15965906041658495, 0.16197378554312714, 0.30089642443423503, 0.20648174533976893, 0.15471047659934356, 0.18136277904056874, 0.2330842425268641, 0.04955298771397776, 0.10791318938190364, 0.20359725810808182, 0.13796559192675828, 0.17058673851664607, 0.12490376066844688, 0.1274154372531242, 0.15012466846729544, 0.27405566858073105, 0.2147893511801381, 0.21502670425824544, 0.30385544167627776, 0.25107603138251866, 0.1509229594288234, 0.3078504291632236, 0.2241093948170625, 0.2452843503452714, 0.3247002716890428, 0.39303310451701856, 0.35255895046809604, 0.36092495459198204, 0.3993916100972228, 0.35968586329290264, 0.3912361637303845, 0.429623206890838, 0.37758674077871257, 0.08074714803926819, 0.1451169532972697, 0.1464600014451698, 0.09547932117024416, 0.15809630707707634, 0.15496443496591872, 0.17378097410828308, 0.12377898557234768, 0.18672635644793756, 0.2023657758776899, 0.24814848525034772, 0.25771885840149267, 0.22764448915770352, 0.2445291926219394, 0.21548618995247804, 0.21989952836292181, 0.23734080420620918, 0.22637350807913326, 0.5929108396249199, 0.5514985364667917, 0.5559309365285838, 0.5717296136189447, 0.5525630909300807, 0.5714648899671083, 0.5820293987974239, 0.5282227888355457, 0.5799897930442872, 0.10537226300296698, 0.11657929474275719, 0.09525750427673907, 0.10190204860218055, 0.10411077408643576, 0.11451031096823605, 0.09847925718662898, 0.1078837767890114, 0.1029897619427087, 0.14257533017487511, 0.1449955612128313, 0.15161475717945128, 0.16688986396797323, 0.1528747959749629, 0.17541973513413978, 0.15223329389237916, 0.1530832749694897, 0.13949784180929037, 0.3506332724109439, 0.3865459812041707, 0.38018692519196406, 0.3911879728023998, 0.34101924180817456, 0.3763984430219801, 0.4331778644808528, 0.4074803154843345, 0.38365291658097567, 0.3111859012059248, 0.31124430153395277, 0.27052221279219335, 0.29194002943961095, 0.2646858325600189, 0.29739198988220183, 0.31330471047455444, 0.27297879751302134, 0.3084727312124699, 0.18607081973207718, 0.21134999713883562, 0.18207077473382216, 0.19544393569595997, 0.1904356743656035, 0.2005242665989807, 0.19349799871090756, 0.2175383606649729, 0.1924610960291373, 0.24873281799328573, 0.27836312107094996, 0.19974806781215937, 0.1981644621987172, 0.22694840844856268, 0.19088388333278472, 0.19912657084115126, 0.22988423016648984, 0.209881536283673, 0.6270076650365011, 0.591025635146484, 0.5485400178605049, 0.5838096747800302, 0.5954262237765411, 0.5836070341484096, 0.1833652487816141, 0.16847527810597274, 0.4206535498687004, 0.6354551824476533, 0.19527636044511187, 0.2738840792354085, 0.5374813493361007, 0.19363142255884935, 0.433583077879951, 0.20624070495608693, 0.4370180323104026, 0.20345439715681346, 0.18885237289006207, 0.18716921603877734, 0.20040179195718166, 0.19078773925835124, 0.18713416801232008, 0.17385142354535654, 0.18114958000298942, 0.19680310636180876, 0.1813642794216347, 0.07300157001662644, 0.08277324069116054, 0.07615813302209551, 0.07437586989302358, 0.07264557510185188, 0.07651754466558758, 0.07463846804926377, 0.0872515735067011, 0.07901944283383633]}, "mutation_prompt": null}
{"id": "3c8cc598-b37e-4cb3-926b-51efb655a73a", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.initial_pop_size = 20 * dim\n        self.pop_size = self.initial_pop_size\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            if evals > self.budget * 0.5:\n                # Dynamic population size reduction\n                self.pop_size = int(self.initial_pop_size * (1 - 0.5 * (evals / self.budget)))\n                population = population[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n            \n            for i in range(self.pop_size):\n                # Selective Mutation Strategy\n                indices = np.argsort(fitness)[:self.pop_size//2]  # select top half based on fitness\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                dynamic_F = self.F * (1 - 0.5 * (evals / self.budget))\n                mutant = np.clip(a + dynamic_F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Dynamic adjustment of population size to enhance diversity and convergence speed.", "configspace": "", "generation": 44, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 71 is out of bounds for axis 0 with size 71').", "error": "IndexError('index 71 is out of bounds for axis 0 with size 71')", "parent_id": "d8e67729-0d41-4e4d-8ec6-fff9e5db5667", "metadata": {}, "mutation_prompt": null}
{"id": "cfa79fcf-7eda-4d6a-8769-c6970ceb6df2", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Selective Mutation Strategy\n                indices = np.argsort(fitness)[:self.pop_size//2]  # select top half based on fitness\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                dynamic_F = self.F * (1 - 0.5 * (evals / self.budget))\n                mutant = np.clip(a + dynamic_F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Introducing a selective mutation strategy based on fitness ranking to improve convergence speed.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d8e67729-0d41-4e4d-8ec6-fff9e5db5667", "metadata": {"aucs": [0.6921803832002705, 0.700375616511019, 0.6944095616436363, 0.714815186399387, 0.6935808330873592, 0.7037692409856633, 0.7085227338462282, 0.6909576446469468, 0.708992870206366, 0.514202992568142, 0.5151989765455434, 0.5347217101907344, 0.5092620836283233, 0.5463845240460926, 0.49721352649872175, 0.5029934831809619, 0.4739712838942459, 0.5066303874045526, 0.12712256554452583, 0.15652448204035319, 0.13605993896149482, 0.15580078668829078, 0.1331530203865826, 0.14811896161849558, 0.14970321254343832, 0.12820566074664475, 0.1477812620679262, 0.11701636417005534, 0.11736872620627947, 0.11433810297882752, 0.1146524246447288, 0.1145024398793586, 0.10992683025773875, 0.11522393748017334, 0.10624261248129097, 0.11088727860320635, 0.8909378692221623, 0.9599988886340005, 0.8814051144636283, 0.8586438690411334, 0.893530431112333, 0.8761058809236995, 0.9092141771416383, 0.905030828663494, 0.9645571944944731, 0.288632326869108, 0.2611439740821193, 0.23965482591214193, 0.23703850359008094, 0.2896668535795873, 0.2497408986433668, 0.2736190512823057, 0.273001058735893, 0.2608266266945485, 0.6688508780130283, 0.6671467148288821, 0.651796309289272, 0.6579373888663351, 0.6867800718642704, 0.6722207951760553, 0.6978081635118021, 0.6859640692643756, 0.6924931070228146, 0.1942932052163303, 0.19250420804540758, 0.1458280131422265, 0.15965906041658495, 0.16197378554312714, 0.30089642443423503, 0.20648174533976893, 0.15471047659934356, 0.18136277904056874, 0.2330842425268641, 0.04955298771397776, 0.10791318938190364, 0.20359725810808182, 0.13796559192675828, 0.17058673851664607, 0.12490376066844688, 0.1274154372531242, 0.15012466846729544, 0.27405566858073105, 0.2147893511801381, 0.21502670425824544, 0.30385544167627776, 0.25107603138251866, 0.1509229594288234, 0.3078504291632236, 0.2241093948170625, 0.2452843503452714, 0.3247002716890428, 0.39303310451701856, 0.35255895046809604, 0.36092495459198204, 0.3993916100972228, 0.35968586329290264, 0.3912361637303845, 0.429623206890838, 0.37758674077871257, 0.08074714803926819, 0.1451169532972697, 0.1464600014451698, 0.09547932117024416, 0.15809630707707634, 0.15496443496591872, 0.17378097410828308, 0.12377898557234768, 0.18672635644793756, 0.2023657758776899, 0.24814848525034772, 0.25771885840149267, 0.22764448915770352, 0.2445291926219394, 0.21548618995247804, 0.21989952836292181, 0.23734080420620918, 0.22637350807913326, 0.5929108396249199, 0.5514985364667917, 0.5559309365285838, 0.5717296136189447, 0.5525630909300807, 0.5714648899671083, 0.5820293987974239, 0.5282227888355457, 0.5799897930442872, 0.10537226300296698, 0.11657929474275719, 0.09525750427673907, 0.10190204860218055, 0.10411077408643576, 0.11451031096823605, 0.09847925718662898, 0.1078837767890114, 0.1029897619427087, 0.14257533017487511, 0.1449955612128313, 0.15161475717945128, 0.16688986396797323, 0.1528747959749629, 0.17541973513413978, 0.15223329389237916, 0.1530832749694897, 0.13949784180929037, 0.3506332724109439, 0.3865459812041707, 0.38018692519196406, 0.3911879728023998, 0.34101924180817456, 0.3763984430219801, 0.4331778644808528, 0.4074803154843345, 0.38365291658097567, 0.3111859012059248, 0.31124430153395277, 0.27052221279219335, 0.29194002943961095, 0.2646858325600189, 0.29739198988220183, 0.31330471047455444, 0.27297879751302134, 0.3084727312124699, 0.18607081973207718, 0.21134999713883562, 0.18207077473382216, 0.19544393569595997, 0.1904356743656035, 0.2005242665989807, 0.19349799871090756, 0.2175383606649729, 0.1924610960291373, 0.24873281799328573, 0.27836312107094996, 0.19974806781215937, 0.1981644621987172, 0.22694840844856268, 0.19088388333278472, 0.19912657084115126, 0.22988423016648984, 0.209881536283673, 0.6270076650365011, 0.591025635146484, 0.5485400178605049, 0.5838096747800302, 0.5954262237765411, 0.5836070341484096, 0.1833652487816141, 0.16847527810597274, 0.4206535498687004, 0.6354551824476533, 0.19527636044511187, 0.2738840792354085, 0.5374813493361007, 0.19363142255884935, 0.433583077879951, 0.20624070495608693, 0.4370180323104026, 0.20345439715681346, 0.18885237289006207, 0.18716921603877734, 0.20040179195718166, 0.19078773925835124, 0.18713416801232008, 0.17385142354535654, 0.18114958000298942, 0.19680310636180876, 0.1813642794216347, 0.07300157001662644, 0.08277324069116054, 0.07615813302209551, 0.07437586989302358, 0.07264557510185188, 0.07651754466558758, 0.07463846804926377, 0.0872515735067011, 0.07901944283383633]}, "mutation_prompt": null}
{"id": "61cdabab-cb5a-4a4b-a2d0-ec6d05dcad37", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Selective Mutation Strategy\n                indices = np.argsort(fitness)[:self.pop_size//2]  # select top half based on fitness\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                dynamic_F = self.F * (1 - 0.5 * (evals / self.budget))\n                mutant = np.clip(a + dynamic_F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Introducing a selective mutation strategy based on fitness ranking to improve convergence speed.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d8e67729-0d41-4e4d-8ec6-fff9e5db5667", "metadata": {"aucs": [0.6921803832002705, 0.700375616511019, 0.6944095616436363, 0.714815186399387, 0.6935808330873592, 0.7037692409856633, 0.7085227338462282, 0.6909576446469468, 0.708992870206366, 0.514202992568142, 0.5151989765455434, 0.5347217101907344, 0.5092620836283233, 0.5463845240460926, 0.49721352649872175, 0.5029934831809619, 0.4739712838942459, 0.5066303874045526, 0.12712256554452583, 0.15652448204035319, 0.13605993896149482, 0.15580078668829078, 0.1331530203865826, 0.14811896161849558, 0.14970321254343832, 0.12820566074664475, 0.1477812620679262, 0.11701636417005534, 0.11736872620627947, 0.11433810297882752, 0.1146524246447288, 0.1145024398793586, 0.10992683025773875, 0.11522393748017334, 0.10624261248129097, 0.11088727860320635, 0.8909378692221623, 0.9599988886340005, 0.8814051144636283, 0.8586438690411334, 0.893530431112333, 0.8761058809236995, 0.9092141771416383, 0.905030828663494, 0.9645571944944731, 0.288632326869108, 0.2611439740821193, 0.23965482591214193, 0.23703850359008094, 0.2896668535795873, 0.2497408986433668, 0.2736190512823057, 0.273001058735893, 0.2608266266945485, 0.6688508780130283, 0.6671467148288821, 0.651796309289272, 0.6579373888663351, 0.6867800718642704, 0.6722207951760553, 0.6978081635118021, 0.6859640692643756, 0.6924931070228146, 0.1942932052163303, 0.19250420804540758, 0.1458280131422265, 0.15965906041658495, 0.16197378554312714, 0.30089642443423503, 0.20648174533976893, 0.15471047659934356, 0.18136277904056874, 0.2330842425268641, 0.04955298771397776, 0.10791318938190364, 0.20359725810808182, 0.13796559192675828, 0.17058673851664607, 0.12490376066844688, 0.1274154372531242, 0.15012466846729544, 0.27405566858073105, 0.2147893511801381, 0.21502670425824544, 0.30385544167627776, 0.25107603138251866, 0.1509229594288234, 0.3078504291632236, 0.2241093948170625, 0.2452843503452714, 0.3247002716890428, 0.39303310451701856, 0.35255895046809604, 0.36092495459198204, 0.3993916100972228, 0.35968586329290264, 0.3912361637303845, 0.429623206890838, 0.37758674077871257, 0.08074714803926819, 0.1451169532972697, 0.1464600014451698, 0.09547932117024416, 0.15809630707707634, 0.15496443496591872, 0.17378097410828308, 0.12377898557234768, 0.18672635644793756, 0.2023657758776899, 0.24814848525034772, 0.25771885840149267, 0.22764448915770352, 0.2445291926219394, 0.21548618995247804, 0.21989952836292181, 0.23734080420620918, 0.22637350807913326, 0.5929108396249199, 0.5514985364667917, 0.5559309365285838, 0.5717296136189447, 0.5525630909300807, 0.5714648899671083, 0.5820293987974239, 0.5282227888355457, 0.5799897930442872, 0.10537226300296698, 0.11657929474275719, 0.09525750427673907, 0.10190204860218055, 0.10411077408643576, 0.11451031096823605, 0.09847925718662898, 0.1078837767890114, 0.1029897619427087, 0.14257533017487511, 0.1449955612128313, 0.15161475717945128, 0.16688986396797323, 0.1528747959749629, 0.17541973513413978, 0.15223329389237916, 0.1530832749694897, 0.13949784180929037, 0.3506332724109439, 0.3865459812041707, 0.38018692519196406, 0.3911879728023998, 0.34101924180817456, 0.3763984430219801, 0.4331778644808528, 0.4074803154843345, 0.38365291658097567, 0.3111859012059248, 0.31124430153395277, 0.27052221279219335, 0.29194002943961095, 0.2646858325600189, 0.29739198988220183, 0.31330471047455444, 0.27297879751302134, 0.3084727312124699, 0.18607081973207718, 0.21134999713883562, 0.18207077473382216, 0.19544393569595997, 0.1904356743656035, 0.2005242665989807, 0.19349799871090756, 0.2175383606649729, 0.1924610960291373, 0.24873281799328573, 0.27836312107094996, 0.19974806781215937, 0.1981644621987172, 0.22694840844856268, 0.19088388333278472, 0.19912657084115126, 0.22988423016648984, 0.209881536283673, 0.6270076650365011, 0.591025635146484, 0.5485400178605049, 0.5838096747800302, 0.5954262237765411, 0.5836070341484096, 0.1833652487816141, 0.16847527810597274, 0.4206535498687004, 0.6354551824476533, 0.19527636044511187, 0.2738840792354085, 0.5374813493361007, 0.19363142255884935, 0.433583077879951, 0.20624070495608693, 0.4370180323104026, 0.20345439715681346, 0.18885237289006207, 0.18716921603877734, 0.20040179195718166, 0.19078773925835124, 0.18713416801232008, 0.17385142354535654, 0.18114958000298942, 0.19680310636180876, 0.1813642794216347, 0.07300157001662644, 0.08277324069116054, 0.07615813302209551, 0.07437586989302358, 0.07264557510185188, 0.07651754466558758, 0.07463846804926377, 0.0872515735067011, 0.07901944283383633]}, "mutation_prompt": null}
{"id": "94507810-126b-42c3-ab05-150fe80d0daa", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Selective Mutation Strategy\n                indices = np.argsort(fitness)[:self.pop_size//2]  # select top half based on fitness\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                dynamic_F = self.F * (1 - 0.5 * (evals / self.budget))\n                mutant = np.clip(a + dynamic_F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Introducing a selective mutation strategy based on fitness ranking to improve convergence speed.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d8e67729-0d41-4e4d-8ec6-fff9e5db5667", "metadata": {"aucs": [0.6921803832002705, 0.700375616511019, 0.6944095616436363, 0.714815186399387, 0.6935808330873592, 0.7037692409856633, 0.7085227338462282, 0.6909576446469468, 0.708992870206366, 0.514202992568142, 0.5151989765455434, 0.5347217101907344, 0.5092620836283233, 0.5463845240460926, 0.49721352649872175, 0.5029934831809619, 0.4739712838942459, 0.5066303874045526, 0.12712256554452583, 0.15652448204035319, 0.13605993896149482, 0.15580078668829078, 0.1331530203865826, 0.14811896161849558, 0.14970321254343832, 0.12820566074664475, 0.1477812620679262, 0.11701636417005534, 0.11736872620627947, 0.11433810297882752, 0.1146524246447288, 0.1145024398793586, 0.10992683025773875, 0.11522393748017334, 0.10624261248129097, 0.11088727860320635, 0.8909378692221623, 0.9599988886340005, 0.8814051144636283, 0.8586438690411334, 0.893530431112333, 0.8761058809236995, 0.9092141771416383, 0.905030828663494, 0.9645571944944731, 0.288632326869108, 0.2611439740821193, 0.23965482591214193, 0.23703850359008094, 0.2896668535795873, 0.2497408986433668, 0.2736190512823057, 0.273001058735893, 0.2608266266945485, 0.6688508780130283, 0.6671467148288821, 0.651796309289272, 0.6579373888663351, 0.6867800718642704, 0.6722207951760553, 0.6978081635118021, 0.6859640692643756, 0.6924931070228146, 0.1942932052163303, 0.19250420804540758, 0.1458280131422265, 0.15965906041658495, 0.16197378554312714, 0.30089642443423503, 0.20648174533976893, 0.15471047659934356, 0.18136277904056874, 0.2330842425268641, 0.04955298771397776, 0.10791318938190364, 0.20359725810808182, 0.13796559192675828, 0.17058673851664607, 0.12490376066844688, 0.1274154372531242, 0.15012466846729544, 0.27405566858073105, 0.2147893511801381, 0.21502670425824544, 0.30385544167627776, 0.25107603138251866, 0.1509229594288234, 0.3078504291632236, 0.2241093948170625, 0.2452843503452714, 0.3247002716890428, 0.39303310451701856, 0.35255895046809604, 0.36092495459198204, 0.3993916100972228, 0.35968586329290264, 0.3912361637303845, 0.429623206890838, 0.37758674077871257, 0.08074714803926819, 0.1451169532972697, 0.1464600014451698, 0.09547932117024416, 0.15809630707707634, 0.15496443496591872, 0.17378097410828308, 0.12377898557234768, 0.18672635644793756, 0.2023657758776899, 0.24814848525034772, 0.25771885840149267, 0.22764448915770352, 0.2445291926219394, 0.21548618995247804, 0.21989952836292181, 0.23734080420620918, 0.22637350807913326, 0.5929108396249199, 0.5514985364667917, 0.5559309365285838, 0.5717296136189447, 0.5525630909300807, 0.5714648899671083, 0.5820293987974239, 0.5282227888355457, 0.5799897930442872, 0.10537226300296698, 0.11657929474275719, 0.09525750427673907, 0.10190204860218055, 0.10411077408643576, 0.11451031096823605, 0.09847925718662898, 0.1078837767890114, 0.1029897619427087, 0.14257533017487511, 0.1449955612128313, 0.15161475717945128, 0.16688986396797323, 0.1528747959749629, 0.17541973513413978, 0.15223329389237916, 0.1530832749694897, 0.13949784180929037, 0.3506332724109439, 0.3865459812041707, 0.38018692519196406, 0.3911879728023998, 0.34101924180817456, 0.3763984430219801, 0.4331778644808528, 0.4074803154843345, 0.38365291658097567, 0.3111859012059248, 0.31124430153395277, 0.27052221279219335, 0.29194002943961095, 0.2646858325600189, 0.29739198988220183, 0.31330471047455444, 0.27297879751302134, 0.3084727312124699, 0.18607081973207718, 0.21134999713883562, 0.18207077473382216, 0.19544393569595997, 0.1904356743656035, 0.2005242665989807, 0.19349799871090756, 0.2175383606649729, 0.1924610960291373, 0.24873281799328573, 0.27836312107094996, 0.19974806781215937, 0.1981644621987172, 0.22694840844856268, 0.19088388333278472, 0.19912657084115126, 0.22988423016648984, 0.209881536283673, 0.6270076650365011, 0.591025635146484, 0.5485400178605049, 0.5838096747800302, 0.5954262237765411, 0.5836070341484096, 0.1833652487816141, 0.16847527810597274, 0.4206535498687004, 0.6354551824476533, 0.19527636044511187, 0.2738840792354085, 0.5374813493361007, 0.19363142255884935, 0.433583077879951, 0.20624070495608693, 0.4370180323104026, 0.20345439715681346, 0.18885237289006207, 0.18716921603877734, 0.20040179195718166, 0.19078773925835124, 0.18713416801232008, 0.17385142354535654, 0.18114958000298942, 0.19680310636180876, 0.1813642794216347, 0.07300157001662644, 0.08277324069116054, 0.07615813302209551, 0.07437586989302358, 0.07264557510185188, 0.07651754466558758, 0.07463846804926377, 0.0872515735067011, 0.07901944283383633]}, "mutation_prompt": null}
{"id": "bb9b35a8-cb39-4ceb-be74-03dfa8821714", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.init_pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        pop_size = self.init_pop_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            pop_size = max(5, int(self.init_pop_size * (1 - (evals / self.budget))))  # Dynamic population size\n            for i in range(pop_size):\n                # Selective Mutation Strategy\n                indices = np.argsort(fitness)[:pop_size//2]  # select top half based on fitness\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                dynamic_F = self.F * (1 - 0.5 * (evals / self.budget))\n                mutant = np.clip(a + dynamic_F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Enhanced Crossover Strategy\n                adaptive_CR = 0.2 if evals > 0.8 * self.budget else self.CR  # Adjusted crossover\n                crossover_mask = np.random.rand(self.dim) < adaptive_CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Introducing dynamic population size adjustment and enhanced trial vector generation to improve convergence speed.", "configspace": "", "generation": 48, "fitness": -Infinity, "feedback": "An exception occurred: ValueError(\"Cannot take a larger sample than population when 'replace=False'\").", "error": "ValueError(\"Cannot take a larger sample than population when 'replace=False'\")", "parent_id": "d8e67729-0d41-4e4d-8ec6-fff9e5db5667", "metadata": {}, "mutation_prompt": null}
{"id": "412c2ef2-2f63-4c9d-ab8e-fec5837f0a0a", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Selective Mutation Strategy\n                indices = np.argsort(fitness)[:self.pop_size//2]  # select top half based on fitness\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                dynamic_F = self.F * (1 - 0.5 * (evals / self.budget))\n                mutant = np.clip(a + dynamic_F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Introducing a selective mutation strategy based on fitness ranking to improve convergence speed.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d8e67729-0d41-4e4d-8ec6-fff9e5db5667", "metadata": {"aucs": [0.6921803832002705, 0.700375616511019, 0.6944095616436363, 0.714815186399387, 0.6935808330873592, 0.7037692409856633, 0.7085227338462282, 0.6909576446469468, 0.708992870206366, 0.514202992568142, 0.5151989765455434, 0.5347217101907344, 0.5092620836283233, 0.5463845240460926, 0.49721352649872175, 0.5029934831809619, 0.4739712838942459, 0.5066303874045526, 0.12712256554452583, 0.15652448204035319, 0.13605993896149482, 0.15580078668829078, 0.1331530203865826, 0.14811896161849558, 0.14970321254343832, 0.12820566074664475, 0.1477812620679262, 0.11701636417005534, 0.11736872620627947, 0.11433810297882752, 0.1146524246447288, 0.1145024398793586, 0.10992683025773875, 0.11522393748017334, 0.10624261248129097, 0.11088727860320635, 0.8909378692221623, 0.9599988886340005, 0.8814051144636283, 0.8586438690411334, 0.893530431112333, 0.8761058809236995, 0.9092141771416383, 0.905030828663494, 0.9645571944944731, 0.288632326869108, 0.2611439740821193, 0.23965482591214193, 0.23703850359008094, 0.2896668535795873, 0.2497408986433668, 0.2736190512823057, 0.273001058735893, 0.2608266266945485, 0.6688508780130283, 0.6671467148288821, 0.651796309289272, 0.6579373888663351, 0.6867800718642704, 0.6722207951760553, 0.6978081635118021, 0.6859640692643756, 0.6924931070228146, 0.1942932052163303, 0.19250420804540758, 0.1458280131422265, 0.15965906041658495, 0.16197378554312714, 0.30089642443423503, 0.20648174533976893, 0.15471047659934356, 0.18136277904056874, 0.2330842425268641, 0.04955298771397776, 0.10791318938190364, 0.20359725810808182, 0.13796559192675828, 0.17058673851664607, 0.12490376066844688, 0.1274154372531242, 0.15012466846729544, 0.27405566858073105, 0.2147893511801381, 0.21502670425824544, 0.30385544167627776, 0.25107603138251866, 0.1509229594288234, 0.3078504291632236, 0.2241093948170625, 0.2452843503452714, 0.3247002716890428, 0.39303310451701856, 0.35255895046809604, 0.36092495459198204, 0.3993916100972228, 0.35968586329290264, 0.3912361637303845, 0.429623206890838, 0.37758674077871257, 0.08074714803926819, 0.1451169532972697, 0.1464600014451698, 0.09547932117024416, 0.15809630707707634, 0.15496443496591872, 0.17378097410828308, 0.12377898557234768, 0.18672635644793756, 0.2023657758776899, 0.24814848525034772, 0.25771885840149267, 0.22764448915770352, 0.2445291926219394, 0.21548618995247804, 0.21989952836292181, 0.23734080420620918, 0.22637350807913326, 0.5929108396249199, 0.5514985364667917, 0.5559309365285838, 0.5717296136189447, 0.5525630909300807, 0.5714648899671083, 0.5820293987974239, 0.5282227888355457, 0.5799897930442872, 0.10537226300296698, 0.11657929474275719, 0.09525750427673907, 0.10190204860218055, 0.10411077408643576, 0.11451031096823605, 0.09847925718662898, 0.1078837767890114, 0.1029897619427087, 0.14257533017487511, 0.1449955612128313, 0.15161475717945128, 0.16688986396797323, 0.1528747959749629, 0.17541973513413978, 0.15223329389237916, 0.1530832749694897, 0.13949784180929037, 0.3506332724109439, 0.3865459812041707, 0.38018692519196406, 0.3911879728023998, 0.34101924180817456, 0.3763984430219801, 0.4331778644808528, 0.4074803154843345, 0.38365291658097567, 0.3111859012059248, 0.31124430153395277, 0.27052221279219335, 0.29194002943961095, 0.2646858325600189, 0.29739198988220183, 0.31330471047455444, 0.27297879751302134, 0.3084727312124699, 0.18607081973207718, 0.21134999713883562, 0.18207077473382216, 0.19544393569595997, 0.1904356743656035, 0.2005242665989807, 0.19349799871090756, 0.2175383606649729, 0.1924610960291373, 0.24873281799328573, 0.27836312107094996, 0.19974806781215937, 0.1981644621987172, 0.22694840844856268, 0.19088388333278472, 0.19912657084115126, 0.22988423016648984, 0.209881536283673, 0.6270076650365011, 0.591025635146484, 0.5485400178605049, 0.5838096747800302, 0.5954262237765411, 0.5836070341484096, 0.1833652487816141, 0.16847527810597274, 0.4206535498687004, 0.6354551824476533, 0.19527636044511187, 0.2738840792354085, 0.5374813493361007, 0.19363142255884935, 0.433583077879951, 0.20624070495608693, 0.4370180323104026, 0.20345439715681346, 0.18885237289006207, 0.18716921603877734, 0.20040179195718166, 0.19078773925835124, 0.18713416801232008, 0.17385142354535654, 0.18114958000298942, 0.19680310636180876, 0.1813642794216347, 0.07300157001662644, 0.08277324069116054, 0.07615813302209551, 0.07437586989302358, 0.07264557510185188, 0.07651754466558758, 0.07463846804926377, 0.0872515735067011, 0.07901944283383633]}, "mutation_prompt": null}
{"id": "26aeb5cf-26e6-40b3-ad6d-085561b14e77", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Selective Mutation Strategy\n                indices = np.argsort(fitness)[:self.pop_size//2]  # select top half based on fitness\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                dynamic_F = self.F * (1 - 0.5 * (evals / self.budget))\n                mutant = np.clip(a + dynamic_F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Introducing a selective mutation strategy based on fitness ranking to improve convergence speed.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d8e67729-0d41-4e4d-8ec6-fff9e5db5667", "metadata": {"aucs": [0.6921803832002705, 0.700375616511019, 0.6944095616436363, 0.714815186399387, 0.6935808330873592, 0.7037692409856633, 0.7085227338462282, 0.6909576446469468, 0.708992870206366, 0.514202992568142, 0.5151989765455434, 0.5347217101907344, 0.5092620836283233, 0.5463845240460926, 0.49721352649872175, 0.5029934831809619, 0.4739712838942459, 0.5066303874045526, 0.12712256554452583, 0.15652448204035319, 0.13605993896149482, 0.15580078668829078, 0.1331530203865826, 0.14811896161849558, 0.14970321254343832, 0.12820566074664475, 0.1477812620679262, 0.11701636417005534, 0.11736872620627947, 0.11433810297882752, 0.1146524246447288, 0.1145024398793586, 0.10992683025773875, 0.11522393748017334, 0.10624261248129097, 0.11088727860320635, 0.8909378692221623, 0.9599988886340005, 0.8814051144636283, 0.8586438690411334, 0.893530431112333, 0.8761058809236995, 0.9092141771416383, 0.905030828663494, 0.9645571944944731, 0.288632326869108, 0.2611439740821193, 0.23965482591214193, 0.23703850359008094, 0.2896668535795873, 0.2497408986433668, 0.2736190512823057, 0.273001058735893, 0.2608266266945485, 0.6688508780130283, 0.6671467148288821, 0.651796309289272, 0.6579373888663351, 0.6867800718642704, 0.6722207951760553, 0.6978081635118021, 0.6859640692643756, 0.6924931070228146, 0.1942932052163303, 0.19250420804540758, 0.1458280131422265, 0.15965906041658495, 0.16197378554312714, 0.30089642443423503, 0.20648174533976893, 0.15471047659934356, 0.18136277904056874, 0.2330842425268641, 0.04955298771397776, 0.10791318938190364, 0.20359725810808182, 0.13796559192675828, 0.17058673851664607, 0.12490376066844688, 0.1274154372531242, 0.15012466846729544, 0.27405566858073105, 0.2147893511801381, 0.21502670425824544, 0.30385544167627776, 0.25107603138251866, 0.1509229594288234, 0.3078504291632236, 0.2241093948170625, 0.2452843503452714, 0.3247002716890428, 0.39303310451701856, 0.35255895046809604, 0.36092495459198204, 0.3993916100972228, 0.35968586329290264, 0.3912361637303845, 0.429623206890838, 0.37758674077871257, 0.08074714803926819, 0.1451169532972697, 0.1464600014451698, 0.09547932117024416, 0.15809630707707634, 0.15496443496591872, 0.17378097410828308, 0.12377898557234768, 0.18672635644793756, 0.2023657758776899, 0.24814848525034772, 0.25771885840149267, 0.22764448915770352, 0.2445291926219394, 0.21548618995247804, 0.21989952836292181, 0.23734080420620918, 0.22637350807913326, 0.5929108396249199, 0.5514985364667917, 0.5559309365285838, 0.5717296136189447, 0.5525630909300807, 0.5714648899671083, 0.5820293987974239, 0.5282227888355457, 0.5799897930442872, 0.10537226300296698, 0.11657929474275719, 0.09525750427673907, 0.10190204860218055, 0.10411077408643576, 0.11451031096823605, 0.09847925718662898, 0.1078837767890114, 0.1029897619427087, 0.14257533017487511, 0.1449955612128313, 0.15161475717945128, 0.16688986396797323, 0.1528747959749629, 0.17541973513413978, 0.15223329389237916, 0.1530832749694897, 0.13949784180929037, 0.3506332724109439, 0.3865459812041707, 0.38018692519196406, 0.3911879728023998, 0.34101924180817456, 0.3763984430219801, 0.4331778644808528, 0.4074803154843345, 0.38365291658097567, 0.3111859012059248, 0.31124430153395277, 0.27052221279219335, 0.29194002943961095, 0.2646858325600189, 0.29739198988220183, 0.31330471047455444, 0.27297879751302134, 0.3084727312124699, 0.18607081973207718, 0.21134999713883562, 0.18207077473382216, 0.19544393569595997, 0.1904356743656035, 0.2005242665989807, 0.19349799871090756, 0.2175383606649729, 0.1924610960291373, 0.24873281799328573, 0.27836312107094996, 0.19974806781215937, 0.1981644621987172, 0.22694840844856268, 0.19088388333278472, 0.19912657084115126, 0.22988423016648984, 0.209881536283673, 0.6270076650365011, 0.591025635146484, 0.5485400178605049, 0.5838096747800302, 0.5954262237765411, 0.5836070341484096, 0.1833652487816141, 0.16847527810597274, 0.4206535498687004, 0.6354551824476533, 0.19527636044511187, 0.2738840792354085, 0.5374813493361007, 0.19363142255884935, 0.433583077879951, 0.20624070495608693, 0.4370180323104026, 0.20345439715681346, 0.18885237289006207, 0.18716921603877734, 0.20040179195718166, 0.19078773925835124, 0.18713416801232008, 0.17385142354535654, 0.18114958000298942, 0.19680310636180876, 0.1813642794216347, 0.07300157001662644, 0.08277324069116054, 0.07615813302209551, 0.07437586989302358, 0.07264557510185188, 0.07651754466558758, 0.07463846804926377, 0.0872515735067011, 0.07901944283383633]}, "mutation_prompt": null}
{"id": "a8dbea9e-0f58-44f8-9e78-cb45606cf291", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Selective Mutation Strategy\n                indices = np.argsort(fitness)[:self.pop_size//2]\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                dynamic_F = self.F * (1 - 0.5 * (evals / self.budget)) * (0.9 + 0.1 * np.random.rand())  # 1.6% change: Added random scaling factor\n                mutant = np.clip(a + dynamic_F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Introduce a dynamic scaling factor to the mutation strategy to improve diversity and convergence efficiency.", "configspace": "", "generation": 51, "fitness": 0.31838784608087106, "feedback": "The algorithm HybridDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.23.", "error": "", "parent_id": "d8e67729-0d41-4e4d-8ec6-fff9e5db5667", "metadata": {"aucs": [0.7228979239291813, 0.6989758827343522, 0.7029454996802145, 0.7322121269846108, 0.7095969673063021, 0.732020798198469, 0.7255409877326654, 0.7120612655772711, 0.7178565184482717, 0.5264964271120471, 0.5531888924485957, 0.5490412253339845, 0.5078234392820693, 0.5325326171470472, 0.5174216013784151, 0.536614416385434, 0.5324838334289583, 0.5497263087654571, 0.13961729617591778, 0.14052695229253565, 0.15660008203307207, 0.14275757631555064, 0.1386344464793512, 0.1486342079659777, 0.15420010333302858, 0.13677864706646592, 0.1578241768511307, 0.12891241491391847, 0.11826633386254981, 0.12982572038376816, 0.11476313788781756, 0.11742202946237046, 0.10901220235441755, 0.11608122748808869, 0.10970494805964481, 0.12929760603080942, 0.9278715902858924, 0.9181712798120786, 0.8876549219843191, 0.9137375083643478, 0.9273682456271926, 0.9128817758248946, 0.9311014291134966, 0.9365005667304317, 0.8707159844155847, 0.31094783198308873, 0.30362462244190425, 0.3089654618628409, 0.33219672921529664, 0.25582690696754884, 0.30597589516074264, 0.3286181778383004, 0.31831533702752945, 0.25056325101493837, 0.6906079828779628, 0.677271525464, 0.6652290410022916, 0.6936229566570088, 0.7126446409866731, 0.708881782434324, 0.7111188165915521, 0.6769874828923046, 0.7016055884895791, 0.17340464520443222, 0.1887941000802562, 0.15866045371820436, 0.1906347032308452, 0.1335021248293402, 0.19201948394776358, 0.16978201176724983, 0.20468310942954882, 0.15515628298319173, 0.1972590910530705, 0.10715615643148324, 0.1801515631571201, 0.13496140556601988, 0.1752906624164623, 0.14907432184142622, 0.13144929996177757, 0.15562924272011336, 0.15973538782064112, 0.27388829562003225, 0.2631661222772186, 0.1447045641090342, 0.20537522463772573, 0.2799917110710767, 0.25203205618308444, 0.3089453319395349, 0.18971981521453085, 0.2404633879034146, 0.3826138884917315, 0.3850410092872958, 0.3944363231176353, 0.4153863537238939, 0.4539795521875807, 0.3444476796791538, 0.46386067146028787, 0.460393824427509, 0.4602138146226351, 0.04288592790092205, 0.09368776797006084, 0.0886221458947366, 0.124153840366103, 0.11194044347652521, 0.0913368167380173, 0.09557795621800269, 0.09354332250911956, 0.12453087521411288, 0.23573372718440055, 0.2763531627952046, 0.2104391706162374, 0.2499004962009681, 0.2664167906761835, 0.2795374325603669, 0.2179972556437597, 0.22217181056081314, 0.20863408860287547, 0.5661030533368534, 0.6423461653775249, 0.5581758628645811, 0.6451735227766706, 0.5603121532050995, 0.5728327206502164, 0.5857913010545573, 0.5948467955943599, 0.5841215788582923, 0.11227156725143483, 0.112642484909111, 0.10238076434967247, 0.09736156287322739, 0.1117249550096181, 0.1173228970359873, 0.10149560690833037, 0.11423225466737108, 0.11189286756188954, 0.14762886148637988, 0.1434214622690848, 0.20180739196011155, 0.15964479889890792, 0.15646143781103383, 0.1393657700887223, 0.15204847044588388, 0.16283756207759492, 0.14990598123835674, 0.4079553212506065, 0.38545314479213144, 0.3482984440671626, 0.3465545884866479, 0.3765899177880834, 0.3570473919400575, 0.4068051105237902, 0.41610110582728654, 0.3744406141189849, 0.3246076630333229, 0.2985806739343212, 0.30677430100039305, 0.2863533435974611, 0.3101955698347766, 0.3278350466133343, 0.3305752258397041, 0.30616456435542005, 0.3120583217529713, 0.21482568944160363, 0.1993350363274652, 0.18937561560364402, 0.2056807700099894, 0.1884184214519572, 0.1810812897266686, 0.20156355830413464, 0.17999562065593422, 0.200907489448799, 0.18943622202571397, 0.1956933854336853, 0.2429817532254287, 0.20200980778920308, 0.24905785671883973, 0.2053306881982122, 0.2064825782383085, 0.20280130889252368, 0.20482792564438346, 0.6215684903717136, 0.26889780315866363, 0.653906324792032, 0.5805225693112799, 0.18604809623035545, 0.18006872714381483, 0.5863523022364231, 0.32251713189723863, 0.17367687513829877, 0.18419468104817782, 0.19757951367930005, 0.18508404502686304, 0.22187189597894386, 0.25236336170797036, 0.6862171154364964, 0.20341889805316804, 0.31954576029853665, 0.2066276871968138, 0.1874554927040839, 0.17766457944609215, 0.2257213017881542, 0.19458655731277363, 0.18322690980664902, 0.17158802059841294, 0.18463585763903512, 0.18187845926454793, 0.19069503510436325, 0.07766648612297355, 0.08313024071647201, 0.08481496926633958, 0.08013894776579877, 0.08259608580428668, 0.07623518824175024, 0.07742416610679392, 0.08046292999177951, 0.07827715349131592]}, "mutation_prompt": null}
{"id": "cb7b4a64-ba30-4e0d-8e11-b1f5c5f61721", "solution": "import numpy as np\n\nclass EnhancedHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Dynamic Selection Strategy\n                indices = np.argsort(fitness)\n                if np.random.rand() < 0.5:  # 50% chance to choose from top half\n                    selected_indices = indices[:self.pop_size//2]\n                else:\n                    selected_indices = indices[self.pop_size//2:]\n                a, b, c = population[np.random.choice(selected_indices, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                dynamic_F = self.F * (0.8 + 0.2 * np.random.rand())  # Introduce randomness for F\n                mutant = np.clip(a + dynamic_F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.15 if evals > 0.8 * self.budget else 0.85\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "EnhancedHybridDE", "description": "Incorporating a dynamic selection strategy and adaptive mutation scaling to enhance exploration and exploitation balance.", "configspace": "", "generation": 52, "fitness": 0.28063342352344517, "feedback": "The algorithm EnhancedHybridDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.20.", "error": "", "parent_id": "d8e67729-0d41-4e4d-8ec6-fff9e5db5667", "metadata": {"aucs": [0.675527519585972, 0.6576282308315186, 0.6682406998630934, 0.6916850236280118, 0.6777709150682564, 0.6810239187503224, 0.6584103316478532, 0.6801304382714806, 0.6726852852886831, 0.4931334331107321, 0.48803808279071015, 0.486849426528703, 0.4872939847306075, 0.47880301849813744, 0.4881164806487077, 0.4392480661672479, 0.4977143052010663, 0.49984742641819424, 0.11164126151023068, 0.13133531973892532, 0.12122924003235547, 0.12902915267803616, 0.1148330201119323, 0.1706682918111717, 0.11751677611165667, 0.11681840502434204, 0.11367921739138143, 0.1115777218681051, 0.10164448406644822, 0.09664712279584364, 0.10263803133572913, 0.1213182922554844, 0.10120215072655736, 0.10180983735053561, 0.10822188010257106, 0.09996237847679967, 0.7837034537804278, 0.8657500972408971, 0.8058063581593415, 0.7673769389173699, 0.809208252647577, 0.6977799554718773, 0.7281996959735559, 0.8690116926120677, 0.7555187203098112, 0.22299358587952534, 0.2022189097689523, 0.2136324192982293, 0.1900468131563382, 0.2488876849293219, 0.18661683655103234, 0.2203916414791176, 0.2385697526073648, 0.22565144190793185, 0.5987610933079679, 0.6549375916766644, 0.5764542031058824, 0.6551577985994206, 0.6455700834323295, 0.5991801016389056, 0.6349749921442843, 0.608158585665482, 0.6244790487773767, 0.14083446621020923, 0.17402173934410825, 0.14133583887695744, 0.21019263318850112, 0.17611422885868, 0.13470782576290496, 0.17295943137312209, 0.12731709413791792, 0.17062751539159904, 0.2519722432043111, 0.12400940785377201, 0.11406015067960329, 0.16686299012491057, 0.17747197915801793, 0.15687049943683995, 0.16619439523252, 0.16550242120265934, 0.1473603059072548, 0.1760004718531869, 0.20068359899922228, 0.13686484283367395, 0.21002774070169838, 0.11387293781481278, 0.12461257632103884, 0.14002763522887085, 0.1315637773651983, 0.14000438571386908, 0.3053586564638574, 0.3154061348102004, 0.26142830044009113, 0.325260616442711, 0.249687122574052, 0.24727685948567457, 0.3173093246100489, 0.3100299391032514, 0.3171298288491202, 0.07770160040079843, 0.06055792737072474, 0.07306322696718126, 0.10509942102186232, 0.08893530517589443, 0.08512024033641463, 0.09965382941446133, 0.05445098101863188, 0.08467045339323032, 0.1981625697806596, 0.18285344560388195, 0.187702141647639, 0.19677654658215682, 0.19863549945315806, 0.1649550451812305, 0.2016977246560434, 0.1778512240261514, 0.18154932800257062, 0.5682039503116474, 0.5324747970726025, 0.5472851013389124, 0.5186191149981911, 0.5442792500504405, 0.5072092194821118, 0.551107816779681, 0.5455981864373198, 0.5142116737443004, 0.09614103601032242, 0.08975185383733553, 0.09901456258836028, 0.0952631558645064, 0.09726304686155851, 0.09756940195344954, 0.08450949843202904, 0.09458352311968465, 0.09740892080222907, 0.21865519181050508, 0.15961349265006808, 0.1572508734004081, 0.14791490557397646, 0.14754935541965264, 0.14047896297213924, 0.13914372624804783, 0.1467608477292358, 0.13348639084179414, 0.32210271779386923, 0.34578608439855685, 0.32881338443999497, 0.33569497009588767, 0.3166260459977409, 0.34896882211710567, 0.3672695615295499, 0.35366312184304693, 0.35200884363218465, 0.2507878854749208, 0.25181493071619165, 0.25865054619492667, 0.2451418734828501, 0.23849207738117917, 0.25009807938177975, 0.2521831592544449, 0.2590927057668809, 0.27014612448620223, 0.20771830349538756, 0.185355408747775, 0.18175393801325113, 0.1706064498610984, 0.1817555178337371, 0.20310323375453931, 0.18846369681625352, 0.1806812776653982, 0.17438949612985166, 0.19797433186393454, 0.1832493424556042, 0.18732703472011403, 0.18840911666297122, 0.18972192284881295, 0.18624578988551244, 0.19035859290356616, 0.209548450381555, 0.19701172033250003, 0.3898047175750706, 0.5434556372228666, 0.39421138266784117, 0.49622277480789245, 0.19435840358181156, 0.3544309193537012, 0.48859215589802085, 0.4037230410374366, 0.1809264393539335, 0.19532022455348685, 0.1995281334922937, 0.1930948104858149, 0.4899028010867216, 0.5291767575139386, 0.17647561366953834, 0.20322336216817727, 0.3017051566522456, 0.20160275426732455, 0.19032196654125066, 0.18009226686399527, 0.1825328019059097, 0.1816846864769881, 0.1849087400626681, 0.19842520296834232, 0.1784391318988593, 0.1797186176913006, 0.20075117290711264, 0.07836095779362928, 0.0823887736502169, 0.07746427652493382, 0.06931858496606746, 0.08044713726376518, 0.073497704922732, 0.08484266047457512, 0.07575692768860953, 0.07639702534177906]}, "mutation_prompt": null}
{"id": "ae863a9b-a329-4367-afa1-4a8b9d917ba7", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Selective Mutation Strategy\n                indices = np.argsort(fitness)[:self.pop_size//2]  # select top half based on fitness\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                dynamic_F = self.F * (1 - 0.5 * (evals / self.budget))\n                mutant = np.clip(a + dynamic_F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n\n            # Adaptive Population Size Adjustment\n            if evals % 200 == 0:\n                self.pop_size = max(10, int(self.pop_size * (1 - 0.05 * (evals / self.budget))))\n                population = population[:self.pop_size]\n                fitness = fitness[:self.pop_size]\n        \n        return best_solution", "name": "HybridDE", "description": "Integrating an adaptive population size adjustment to enhance convergence in varying problem landscapes.", "configspace": "", "generation": 53, "fitness": 0.31845071492691246, "feedback": "The algorithm HybridDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.22.", "error": "", "parent_id": "d8e67729-0d41-4e4d-8ec6-fff9e5db5667", "metadata": {"aucs": [0.6921803832002705, 0.700375616511019, 0.6944095616436363, 0.714815186399387, 0.6935808330873592, 0.7037692409856633, 0.7085227338462282, 0.6909576446469468, 0.708992870206366, 0.514202992568142, 0.5151989765455434, 0.5347217101907344, 0.5092620836283233, 0.5463845240460926, 0.49721352649872175, 0.5029934831809619, 0.4739712838942459, 0.5066303874045526, 0.12712256554452583, 0.15652448204035319, 0.13605993896149482, 0.15580078668829078, 0.1331530203865826, 0.14811896161849558, 0.14970321254343832, 0.12820566074664475, 0.1477812620679262, 0.11701636417005534, 0.11736872620627947, 0.11433810297882752, 0.1146524246447288, 0.1145024398793586, 0.10992683025773875, 0.11522393748017334, 0.10624261248129097, 0.11088727860320635, 0.8909378692221623, 0.9599988886340005, 0.8814051144636283, 0.8586438690411334, 0.893530431112333, 0.8761058809236995, 0.9092141771416383, 0.905030828663494, 0.9645571944944731, 0.288632326869108, 0.2611439740821193, 0.23965482591214193, 0.23703850359008094, 0.2896668535795873, 0.2497408986433668, 0.2736190512823057, 0.273001058735893, 0.2608266266945485, 0.6688508780130283, 0.6671467148288821, 0.651796309289272, 0.6579373888663351, 0.6867800718642704, 0.6722207951760553, 0.6978081635118021, 0.6859640692643756, 0.6924931070228146, 0.1942932052163303, 0.19250420804540758, 0.1458280131422265, 0.15965906041658495, 0.16197378554312714, 0.30089642443423503, 0.20648174533976893, 0.15471047659934356, 0.18136277904056874, 0.2330842425268641, 0.04955298771397776, 0.10791318938190364, 0.20359725810808182, 0.13796559192675828, 0.17058673851664607, 0.12490376066844688, 0.1274154372531242, 0.15012466846729544, 0.27405566858073105, 0.2147893511801381, 0.21502670425824544, 0.30385544167627776, 0.25107603138251866, 0.1509229594288234, 0.3078504291632236, 0.2241093948170625, 0.2452843503452714, 0.3247002716890428, 0.39303310451701856, 0.35255895046809604, 0.36092495459198204, 0.3993916100972228, 0.35968586329290264, 0.3912361637303845, 0.429623206890838, 0.37758674077871257, 0.08074714803926819, 0.1451169532972697, 0.1464600014451698, 0.09547932117024416, 0.15809630707707634, 0.15496443496591872, 0.17378097410828308, 0.12377898557234768, 0.18672635644793756, 0.2023657758776899, 0.24814848525034772, 0.25771885840149267, 0.22764448915770352, 0.2445291926219394, 0.21548618995247804, 0.21989952836292181, 0.23734080420620918, 0.22637350807913326, 0.5929108396249199, 0.5514985364667917, 0.5559309365285838, 0.5717296136189447, 0.5525630909300807, 0.5714648899671083, 0.5820293987974239, 0.5282227888355457, 0.5799897930442872, 0.10537226300296698, 0.11657929474275719, 0.09525750427673907, 0.10190204860218055, 0.10411077408643576, 0.11451031096823605, 0.09847925718662898, 0.1078837767890114, 0.1029897619427087, 0.14257533017487511, 0.1449955612128313, 0.15161475717945128, 0.16688986396797323, 0.1528747959749629, 0.17541973513413978, 0.15223329389237916, 0.1530832749694897, 0.13949784180929037, 0.3506332724109439, 0.3865459812041707, 0.38018692519196406, 0.3911879728023998, 0.34101924180817456, 0.3763984430219801, 0.4331778644808528, 0.4074803154843345, 0.38365291658097567, 0.3111859012059248, 0.31124430153395277, 0.27052221279219335, 0.29194002943961095, 0.2646858325600189, 0.29739198988220183, 0.31330471047455444, 0.27297879751302134, 0.3084727312124699, 0.18607081973207718, 0.21134999713883562, 0.18207077473382216, 0.19544393569595997, 0.1904356743656035, 0.2005242665989807, 0.19349799871090756, 0.2175383606649729, 0.1924610960291373, 0.24873281799328573, 0.27836312107094996, 0.19974806781215937, 0.1981644621987172, 0.22694840844856268, 0.19088388333278472, 0.19912657084115126, 0.22988423016648984, 0.209881536283673, 0.6270076650365011, 0.591025635146484, 0.5485400178605049, 0.5838096747800302, 0.5954262237765411, 0.5836070341484096, 0.1833652487816141, 0.16847527810597274, 0.4206535498687004, 0.6354551824476533, 0.19527636044511187, 0.2738840792354085, 0.5374813493361007, 0.19363142255884935, 0.433583077879951, 0.20624070495608693, 0.4370180323104026, 0.20345439715681346, 0.18885237289006207, 0.18716921603877734, 0.20040179195718166, 0.19078773925835124, 0.18713416801232008, 0.17385142354535654, 0.18114958000298942, 0.19680310636180876, 0.1813642794216347, 0.07300157001662644, 0.08277324069116054, 0.07615813302209551, 0.07437586989302358, 0.07264557510185188, 0.07651754466558758, 0.07463846804926377, 0.0872515735067011, 0.07901944283383633]}, "mutation_prompt": null}
{"id": "9c591c17-fb28-4c2b-9705-48ef9b954225", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.argsort(fitness)[:self.pop_size//2]\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n\n                fitness_std = np.std(fitness) if np.std(fitness) > 0 else 1.0\n                dynamic_F = self.F * (1 - 0.5 * (evals / self.budget) * (fitness_std / np.mean(fitness)))\n                mutant = np.clip(a + dynamic_F * (b - c), self.lower_bound, self.upper_bound)\n\n                self.CR = 0.1 + 0.8 * (fitness_std / (np.std(fitness) + 1e-9))\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                trial_fitness = func(trial)\n                evals += 1\n\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n\n        return best_solution", "name": "HybridDE", "description": "Introducing adaptive mutation and crossover rates dynamically influenced by both fitness diversity and convergence progress for enhanced exploration and exploitation balance.", "configspace": "", "generation": 54, "fitness": 0.2176192304177673, "feedback": "The algorithm HybridDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.19.", "error": "", "parent_id": "d8e67729-0d41-4e4d-8ec6-fff9e5db5667", "metadata": {"aucs": [0.48298322209304256, 0.4844280837382766, 0.4711917306778207, 0.5161756468639336, 0.5031707016444054, 0.5074662518542972, 0.49653731683745383, 0.5024141129477826, 0.48624252964152115, 0.06963128555299258, 0.08579642151601896, 0.04228824304003864, 0.06734265213439972, 0.07200223659900962, 0.07202290033149183, 0.06968178045318618, 0.0934116678188861, 0.09764588074146452, 0.08064928300710361, 0.07887748048172727, 0.07661889242942421, 0.09640539956653571, 0.09777069067351807, 0.08070869933631153, 0.08200507703641213, 0.09467190000266601, 0.08587351372127683, 0.06665240594246713, 0.06687741354598853, 0.08930490508259203, 0.08076400286783625, 0.08021525539536101, 0.08926115427230774, 0.07057680135437727, 0.07949020176373611, 0.07386863034897828, 0.8865593330582511, 0.9286485193540694, 0.8890916057520325, 0.874701211237541, 0.9415621582352952, 0.8953754570662849, 0.9533637592419018, 0.9142014619522649, 0.9213778902674749, 0.2238235310166624, 0.2697050518918359, 0.24425456438844007, 0.23559822358175908, 0.21272993875723956, 0.2234008531787578, 0.23490964613237397, 0.21489426594633365, 0.227381191568244, 0.3926132330502389, 0.3434119868062876, 0.3383918843876902, 0.42030555483328036, 0.3310984040342063, 0.4153988633635066, 0.34572720447167693, 0.3761201292990367, 0.43466306444771385, 0.14883269716487535, 0.14742653170282227, 0.15164423482007494, 0.023995243596501625, 9.999999999998899e-05, 0.10284120223447157, 0.1674380704240812, 0.16289634927105312, 0.1384631122340394, 0.18244770195574322, 0.22454197945519194, 0.1968195579971681, 0.16905287286683035, 0.14236922281020237, 0.17521908853765866, 0.15193995187076814, 0.1342959237405037, 0.1560969818927075, 0.0665339222638004, 0.06256238591177321, 0.08422103762653843, 0.17462696886535378, 0.1165166732795182, 0.11858897256847145, 0.012523247012943495, 0.01717696659479484, 0.021285546686014678, 0.27843979587322965, 0.2580850338736411, 0.24941572941207624, 0.23605269550136365, 0.13302509537273288, 0.1413798857968006, 0.28939197410782214, 0.2744275009205285, 0.29272250768960006, 0.02188528788099775, 0.003318346242396908, 0.02179472111220604, 0.02566841951484733, 0.027866571740979063, 0.012873053007145252, 0.03956973549412601, 0.050574854826784366, 0.047391237053596935, 0.1272125872742772, 0.1240524882381453, 0.13533287577821307, 0.061420396145308365, 0.059255957295606065, 0.07709077821366195, 0.09965457233021602, 0.05544705859247678, 0.03180263394248117, 0.4011888925048336, 0.4003525864829417, 0.40831338959211394, 0.426990725490657, 0.40666879020109914, 0.4191354388015448, 0.39444481451602487, 0.41325024597730264, 0.42158966066874515, 0.07784508431554915, 0.08545535947891125, 0.07605730618416617, 0.07922881871298015, 0.0796768440879907, 0.08396659115169436, 0.0654101136025027, 0.05711664952794049, 0.07651984703400139, 0.1523656369160462, 0.12145472712226091, 0.16206110949199615, 0.16120777023061905, 0.16269583841884017, 0.17335157311810412, 0.1507315902421238, 0.1405007175981795, 0.11862107329345395, 0.2419521192956946, 0.24311071980865095, 0.2509040833965739, 0.25161773442747626, 0.2296562104765465, 0.24239629547403485, 0.25897031948744054, 0.26361656067748374, 0.2571480332326672, 0.1390580588231376, 0.15955685997262736, 0.15575742423732808, 0.1725699524874954, 0.17967174454751422, 0.16436306598188088, 0.1994727583254463, 0.18264988703071272, 0.19381164875214152, 0.18338116156180417, 0.17655571150308713, 0.16778508762102506, 0.1769958250667385, 0.1753466118833361, 0.18033728454142095, 0.1858668541328531, 0.20300632104336347, 0.18774917827863213, 0.14778931172529342, 0.15566720055647054, 0.1516513722910009, 0.16317064307948836, 0.1800313420834696, 0.1723093916143842, 0.1689482700668059, 0.17558198206853726, 0.1731446326329955, 0.4151949552805658, 0.33782803761947167, 0.5563478768354357, 0.2692530756913516, 0.25807321085869284, 0.21533675662589546, 0.3665352937322609, 0.18264639213703993, 0.39524696822147243, 0.35841127530172967, 0.1978174608875619, 0.18750888315229808, 0.20846390485231958, 0.2721481081902105, 0.22881893344341775, 0.2038482544011816, 0.49781018069679883, 0.20891354451349375, 0.18693906580989472, 0.2058038159694845, 0.18524295318768857, 0.17968418685264442, 0.17850600008391992, 0.17877072419431883, 0.19114675498813005, 0.1915361393711451, 0.19794520780299174, 0.06627266979133006, 0.06932439448600092, 0.0683246771015793, 0.06758119250821404, 0.06971130649122603, 0.061341473838676164, 0.07623747206171572, 0.06921954704848865, 0.06821862801069711]}, "mutation_prompt": null}
{"id": "64895754-ccee-4103-a133-8c419ee5cf56", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Adaptive Mutation Control\n                if evals > 0.5 * self.budget:\n                    self.F = 0.9 * (1 - evals / self.budget)\n                \n                # Selective Mutation Strategy\n                indices = np.argsort(fitness)[:self.pop_size//2]\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                dynamic_F = self.F * (1 - 0.5 * (evals / self.budget))\n                mutant = np.clip(a + dynamic_F * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Dynamic Population Resizing\n                if evals % 150 == 0 and self.pop_size > 4 * self.dim:\n                    self.pop_size = max(4 * self.dim, int(self.pop_size * 0.9))\n                    population = population[:self.pop_size]\n                    fitness = fitness[:self.pop_size]\n        \n        return best_solution", "name": "HybridDE", "description": "Introducing adaptive mutation control and dynamic population resizing for improved exploration and convergence.", "configspace": "", "generation": 55, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 90 is out of bounds for axis 0 with size 90').", "error": "IndexError('index 90 is out of bounds for axis 0 with size 90')", "parent_id": "d8e67729-0d41-4e4d-8ec6-fff9e5db5667", "metadata": {}, "mutation_prompt": null}
{"id": "557e5441-96d5-4d37-b759-86f5ad1ae768", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Selective Mutation Strategy\n                indices = np.argsort(fitness)[:self.pop_size//2]  # select top half based on fitness\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                dynamic_F = self.F * (1 - 0.5 * (evals / self.budget))\n                mutant = np.clip(a + dynamic_F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Introducing a selective mutation strategy based on fitness ranking to improve convergence speed.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d8e67729-0d41-4e4d-8ec6-fff9e5db5667", "metadata": {"aucs": [0.6921803832002705, 0.700375616511019, 0.6944095616436363, 0.714815186399387, 0.6935808330873592, 0.7037692409856633, 0.7085227338462282, 0.6909576446469468, 0.708992870206366, 0.514202992568142, 0.5151989765455434, 0.5347217101907344, 0.5092620836283233, 0.5463845240460926, 0.49721352649872175, 0.5029934831809619, 0.4739712838942459, 0.5066303874045526, 0.12712256554452583, 0.15652448204035319, 0.13605993896149482, 0.15580078668829078, 0.1331530203865826, 0.14811896161849558, 0.14970321254343832, 0.12820566074664475, 0.1477812620679262, 0.11701636417005534, 0.11736872620627947, 0.11433810297882752, 0.1146524246447288, 0.1145024398793586, 0.10992683025773875, 0.11522393748017334, 0.10624261248129097, 0.11088727860320635, 0.8909378692221623, 0.9599988886340005, 0.8814051144636283, 0.8586438690411334, 0.893530431112333, 0.8761058809236995, 0.9092141771416383, 0.905030828663494, 0.9645571944944731, 0.288632326869108, 0.2611439740821193, 0.23965482591214193, 0.23703850359008094, 0.2896668535795873, 0.2497408986433668, 0.2736190512823057, 0.273001058735893, 0.2608266266945485, 0.6688508780130283, 0.6671467148288821, 0.651796309289272, 0.6579373888663351, 0.6867800718642704, 0.6722207951760553, 0.6978081635118021, 0.6859640692643756, 0.6924931070228146, 0.1942932052163303, 0.19250420804540758, 0.1458280131422265, 0.15965906041658495, 0.16197378554312714, 0.30089642443423503, 0.20648174533976893, 0.15471047659934356, 0.18136277904056874, 0.2330842425268641, 0.04955298771397776, 0.10791318938190364, 0.20359725810808182, 0.13796559192675828, 0.17058673851664607, 0.12490376066844688, 0.1274154372531242, 0.15012466846729544, 0.27405566858073105, 0.2147893511801381, 0.21502670425824544, 0.30385544167627776, 0.25107603138251866, 0.1509229594288234, 0.3078504291632236, 0.2241093948170625, 0.2452843503452714, 0.3247002716890428, 0.39303310451701856, 0.35255895046809604, 0.36092495459198204, 0.3993916100972228, 0.35968586329290264, 0.3912361637303845, 0.429623206890838, 0.37758674077871257, 0.08074714803926819, 0.1451169532972697, 0.1464600014451698, 0.09547932117024416, 0.15809630707707634, 0.15496443496591872, 0.17378097410828308, 0.12377898557234768, 0.18672635644793756, 0.2023657758776899, 0.24814848525034772, 0.25771885840149267, 0.22764448915770352, 0.2445291926219394, 0.21548618995247804, 0.21989952836292181, 0.23734080420620918, 0.22637350807913326, 0.5929108396249199, 0.5514985364667917, 0.5559309365285838, 0.5717296136189447, 0.5525630909300807, 0.5714648899671083, 0.5820293987974239, 0.5282227888355457, 0.5799897930442872, 0.10537226300296698, 0.11657929474275719, 0.09525750427673907, 0.10190204860218055, 0.10411077408643576, 0.11451031096823605, 0.09847925718662898, 0.1078837767890114, 0.1029897619427087, 0.14257533017487511, 0.1449955612128313, 0.15161475717945128, 0.16688986396797323, 0.1528747959749629, 0.17541973513413978, 0.15223329389237916, 0.1530832749694897, 0.13949784180929037, 0.3506332724109439, 0.3865459812041707, 0.38018692519196406, 0.3911879728023998, 0.34101924180817456, 0.3763984430219801, 0.4331778644808528, 0.4074803154843345, 0.38365291658097567, 0.3111859012059248, 0.31124430153395277, 0.27052221279219335, 0.29194002943961095, 0.2646858325600189, 0.29739198988220183, 0.31330471047455444, 0.27297879751302134, 0.3084727312124699, 0.18607081973207718, 0.21134999713883562, 0.18207077473382216, 0.19544393569595997, 0.1904356743656035, 0.2005242665989807, 0.19349799871090756, 0.2175383606649729, 0.1924610960291373, 0.24873281799328573, 0.27836312107094996, 0.19974806781215937, 0.1981644621987172, 0.22694840844856268, 0.19088388333278472, 0.19912657084115126, 0.22988423016648984, 0.209881536283673, 0.6270076650365011, 0.591025635146484, 0.5485400178605049, 0.5838096747800302, 0.5954262237765411, 0.5836070341484096, 0.1833652487816141, 0.16847527810597274, 0.4206535498687004, 0.6354551824476533, 0.19527636044511187, 0.2738840792354085, 0.5374813493361007, 0.19363142255884935, 0.433583077879951, 0.20624070495608693, 0.4370180323104026, 0.20345439715681346, 0.18885237289006207, 0.18716921603877734, 0.20040179195718166, 0.19078773925835124, 0.18713416801232008, 0.17385142354535654, 0.18114958000298942, 0.19680310636180876, 0.1813642794216347, 0.07300157001662644, 0.08277324069116054, 0.07615813302209551, 0.07437586989302358, 0.07264557510185188, 0.07651754466558758, 0.07463846804926377, 0.0872515735067011, 0.07901944283383633]}, "mutation_prompt": null}
{"id": "4c251fd5-580c-4f60-b730-fcb8e703a7c7", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        direction_memory = np.zeros(self.dim)\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.argsort(fitness)[:self.pop_size//2]\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                dynamic_F = self.F * (1 - 0.5 * (evals / self.budget))\n                mutant = np.clip(a + dynamic_F * decay * (b - c) + 0.1 * direction_memory, self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    direction_memory = trial - population[i]\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Integrating directional information from successful trials to guide mutation and increase convergence speed.", "configspace": "", "generation": 57, "fitness": 0.3152971267140521, "feedback": "The algorithm HybridDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.22.", "error": "", "parent_id": "d8e67729-0d41-4e4d-8ec6-fff9e5db5667", "metadata": {"aucs": [0.6877927093345424, 0.692848455372675, 0.6840461068252968, 0.7182183103550531, 0.6964300897113834, 0.716381117868398, 0.707749602584423, 0.7027585102403844, 0.6980217144826543, 0.5310093788918069, 0.5202081776145555, 0.5246107928940751, 0.5297650317747661, 0.5180816378739599, 0.5058790009774738, 0.5366020805765148, 0.5137091243500314, 0.4995560845631326, 0.12882043672429022, 0.14669178821459505, 0.13706810125381486, 0.12194131190064872, 0.1201829018756132, 0.11601567045045613, 0.1181814390788617, 0.12342648343932638, 0.1297589043288826, 0.10331483875289271, 0.12389386064864538, 0.10121437316810677, 0.1151466659033682, 0.10103880528833675, 0.11421204336541979, 0.1020068800985573, 0.11538747047196407, 0.10704234631003418, 0.914587474287551, 0.9392478662050758, 0.9037558718006289, 0.9122819989539854, 0.9186963000602386, 0.9633738467819765, 0.9798517748458162, 0.961024045601374, 0.9071057425595154, 0.36062002984914976, 0.36131031637714073, 0.32129668103845466, 0.324634129626418, 0.35125875257545847, 0.3553004120561635, 0.37406392025767643, 0.39103964485456244, 0.3580783185967412, 0.640925964904524, 0.6411888543636328, 0.6484343777162995, 0.6615896301520119, 0.689485000412807, 0.702866866167078, 0.6720095806966063, 0.680956771871523, 0.6548932466414024, 0.17352044085974827, 0.15498251539668195, 0.14098905374159554, 0.14321492936686286, 0.16029337834831403, 0.22293564112553732, 0.13817826962487179, 0.1569261240637677, 0.21372574611285988, 0.15648886447151877, 0.44677763085233224, 0.17717174683967174, 0.15791103403871798, 0.18368525787275947, 0.19401557182590312, 0.16442605919997044, 0.1651469265549258, 0.1454541348268784, 0.2678426445394111, 0.298962661321738, 0.26502465695536337, 0.30649362974270467, 0.25593991813895256, 0.2958480902736905, 0.3012119028032073, 0.20390266219070374, 0.2883545423498701, 0.393800990550106, 0.3383784467370926, 0.41101801458150455, 0.3766837489682169, 0.4022012584409971, 0.4093464288153157, 0.44056103050386153, 0.41470241764036175, 0.410348433493401, 0.10193302644717095, 0.10412805209270681, 0.100608729834893, 0.16700234151309157, 0.12702454280399456, 0.10686802830857889, 0.1393954580194997, 0.109606941550762, 0.1472654485652647, 0.25881304410084927, 0.20796499494162846, 0.19732283560183472, 0.22334808429077913, 0.22849004820727115, 0.2302578630018225, 0.22207424746202187, 0.2562175335769904, 0.23807449449470686, 0.5534274368075442, 0.6200791407615744, 0.559667254781117, 0.5915973858217606, 0.5562805044665072, 0.6359920933764849, 0.5674748099808791, 0.59039933992898, 0.5835139213493347, 0.10872154802638412, 0.10039815313593281, 0.09657229846322402, 0.09431653028273956, 0.12024610802567093, 0.10404831248440716, 0.09892681420992544, 0.10710700567067089, 0.10793341224464226, 0.156540645356944, 0.14144584541057847, 0.1362447954518764, 0.1549476170644839, 0.16266337067581482, 0.1455290557028407, 0.14332975244270185, 0.15792067116108333, 0.14856514041950342, 0.3564345534539177, 0.3691140004079634, 0.37165759000439, 0.35708827953687483, 0.3580835838531342, 0.3739832544025965, 0.3901665662791589, 0.42884830694445886, 0.39873810075709315, 0.2975600995288358, 0.2746649950265333, 0.31108464872332275, 0.2794627703722674, 0.26785652615316136, 0.2848691551898641, 0.29518470379709993, 0.30915717694286005, 0.30942836965451026, 0.19767339651625482, 0.19864641616725565, 0.19218772693404385, 0.20482317613269085, 0.19457318084952024, 0.19151962904785158, 0.19837528548559746, 0.200708085263687, 0.18681523220698293, 0.2087472188081474, 0.21099776486594524, 0.18952451609168175, 0.18808538442057265, 0.18886474594931246, 0.19136044902709715, 0.19836165163251285, 0.189388194099532, 0.19156425423556, 0.4096256569221326, 0.2749321895122343, 0.36739215959533167, 0.17396250829906135, 0.21492905088139036, 0.3241718820612366, 0.4893717308296007, 0.5423891389565635, 0.3743657214138547, 0.25336385771415826, 0.23227558144633997, 0.22390639109278632, 0.28760699787373556, 0.1808060569163329, 0.1895570033587335, 0.1920164619325503, 0.3939731932462067, 0.20687906644826526, 0.19526398091964237, 0.18325424417865466, 0.1831689526096587, 0.20214114844557307, 0.17735546678933933, 0.1939164302566534, 0.19748143349447123, 0.1911040438647913, 0.19605638491646582, 0.08264177207077084, 0.08045633882954772, 0.07456310781657594, 0.08031606628163568, 0.07786774633083282, 0.08326724621060244, 0.0798681396134252, 0.07546219618607375, 0.07723188585207696]}, "mutation_prompt": null}
{"id": "2d8a0332-7d23-4b21-81cd-00a8643ceec7", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Selective Mutation Strategy\n                indices = np.argsort(fitness)[:self.pop_size//2]  # select top half based on fitness\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                dynamic_F = self.F * (1 - 0.5 * (evals / self.budget))\n                mutant = np.clip(a + dynamic_F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Introducing a selective mutation strategy based on fitness ranking to improve convergence speed.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d8e67729-0d41-4e4d-8ec6-fff9e5db5667", "metadata": {"aucs": [0.6921803832002705, 0.700375616511019, 0.6944095616436363, 0.714815186399387, 0.6935808330873592, 0.7037692409856633, 0.7085227338462282, 0.6909576446469468, 0.708992870206366, 0.514202992568142, 0.5151989765455434, 0.5347217101907344, 0.5092620836283233, 0.5463845240460926, 0.49721352649872175, 0.5029934831809619, 0.4739712838942459, 0.5066303874045526, 0.12712256554452583, 0.15652448204035319, 0.13605993896149482, 0.15580078668829078, 0.1331530203865826, 0.14811896161849558, 0.14970321254343832, 0.12820566074664475, 0.1477812620679262, 0.11701636417005534, 0.11736872620627947, 0.11433810297882752, 0.1146524246447288, 0.1145024398793586, 0.10992683025773875, 0.11522393748017334, 0.10624261248129097, 0.11088727860320635, 0.8909378692221623, 0.9599988886340005, 0.8814051144636283, 0.8586438690411334, 0.893530431112333, 0.8761058809236995, 0.9092141771416383, 0.905030828663494, 0.9645571944944731, 0.288632326869108, 0.2611439740821193, 0.23965482591214193, 0.23703850359008094, 0.2896668535795873, 0.2497408986433668, 0.2736190512823057, 0.273001058735893, 0.2608266266945485, 0.6688508780130283, 0.6671467148288821, 0.651796309289272, 0.6579373888663351, 0.6867800718642704, 0.6722207951760553, 0.6978081635118021, 0.6859640692643756, 0.6924931070228146, 0.1942932052163303, 0.19250420804540758, 0.1458280131422265, 0.15965906041658495, 0.16197378554312714, 0.30089642443423503, 0.20648174533976893, 0.15471047659934356, 0.18136277904056874, 0.2330842425268641, 0.04955298771397776, 0.10791318938190364, 0.20359725810808182, 0.13796559192675828, 0.17058673851664607, 0.12490376066844688, 0.1274154372531242, 0.15012466846729544, 0.27405566858073105, 0.2147893511801381, 0.21502670425824544, 0.30385544167627776, 0.25107603138251866, 0.1509229594288234, 0.3078504291632236, 0.2241093948170625, 0.2452843503452714, 0.3247002716890428, 0.39303310451701856, 0.35255895046809604, 0.36092495459198204, 0.3993916100972228, 0.35968586329290264, 0.3912361637303845, 0.429623206890838, 0.37758674077871257, 0.08074714803926819, 0.1451169532972697, 0.1464600014451698, 0.09547932117024416, 0.15809630707707634, 0.15496443496591872, 0.17378097410828308, 0.12377898557234768, 0.18672635644793756, 0.2023657758776899, 0.24814848525034772, 0.25771885840149267, 0.22764448915770352, 0.2445291926219394, 0.21548618995247804, 0.21989952836292181, 0.23734080420620918, 0.22637350807913326, 0.5929108396249199, 0.5514985364667917, 0.5559309365285838, 0.5717296136189447, 0.5525630909300807, 0.5714648899671083, 0.5820293987974239, 0.5282227888355457, 0.5799897930442872, 0.10537226300296698, 0.11657929474275719, 0.09525750427673907, 0.10190204860218055, 0.10411077408643576, 0.11451031096823605, 0.09847925718662898, 0.1078837767890114, 0.1029897619427087, 0.14257533017487511, 0.1449955612128313, 0.15161475717945128, 0.16688986396797323, 0.1528747959749629, 0.17541973513413978, 0.15223329389237916, 0.1530832749694897, 0.13949784180929037, 0.3506332724109439, 0.3865459812041707, 0.38018692519196406, 0.3911879728023998, 0.34101924180817456, 0.3763984430219801, 0.4331778644808528, 0.4074803154843345, 0.38365291658097567, 0.3111859012059248, 0.31124430153395277, 0.27052221279219335, 0.29194002943961095, 0.2646858325600189, 0.29739198988220183, 0.31330471047455444, 0.27297879751302134, 0.3084727312124699, 0.18607081973207718, 0.21134999713883562, 0.18207077473382216, 0.19544393569595997, 0.1904356743656035, 0.2005242665989807, 0.19349799871090756, 0.2175383606649729, 0.1924610960291373, 0.24873281799328573, 0.27836312107094996, 0.19974806781215937, 0.1981644621987172, 0.22694840844856268, 0.19088388333278472, 0.19912657084115126, 0.22988423016648984, 0.209881536283673, 0.6270076650365011, 0.591025635146484, 0.5485400178605049, 0.5838096747800302, 0.5954262237765411, 0.5836070341484096, 0.1833652487816141, 0.16847527810597274, 0.4206535498687004, 0.6354551824476533, 0.19527636044511187, 0.2738840792354085, 0.5374813493361007, 0.19363142255884935, 0.433583077879951, 0.20624070495608693, 0.4370180323104026, 0.20345439715681346, 0.18885237289006207, 0.18716921603877734, 0.20040179195718166, 0.19078773925835124, 0.18713416801232008, 0.17385142354535654, 0.18114958000298942, 0.19680310636180876, 0.1813642794216347, 0.07300157001662644, 0.08277324069116054, 0.07615813302209551, 0.07437586989302358, 0.07264557510185188, 0.07651754466558758, 0.07463846804926377, 0.0872515735067011, 0.07901944283383633]}, "mutation_prompt": null}
{"id": "7fdf1e16-3d58-4cb5-aeae-fdbff02451f2", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n\n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Selective Mutation Strategy\n                indices = np.argsort(fitness)[:self.pop_size//2]\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n\n                # Dynamic Scaling Factor\n                dynamic_F = self.F * (1 - evals / (2 * self.budget))\n\n                mutant = np.clip(a + dynamic_F * (b - c), self.lower_bound, self.upper_bound)\n\n                # Adaptive Crossover Probability\n                self.CR = 0.15 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n\n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n\n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n\n                # Refined Local Search with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.005 + 0.995 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n\n        return best_solution", "name": "HybridDE", "description": "Introducing a dynamic scaling factor for mutation and a refined local search to enhance convergence speed.", "configspace": "", "generation": 59, "fitness": 0.27168927016867167, "feedback": "The algorithm HybridDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.20.", "error": "", "parent_id": "d8e67729-0d41-4e4d-8ec6-fff9e5db5667", "metadata": {"aucs": [0.6033099748671532, 0.6101495381662863, 0.5993699865005202, 0.6120976922806909, 0.6107299849976457, 0.6202858437856653, 0.6107438462815192, 0.6017796400196652, 0.5881899580503566, 0.3642492451467838, 0.3693010004102688, 0.4190048729187833, 0.3615166475335492, 0.3857421169335111, 0.34508419379322075, 0.38337426159778754, 0.35805292030225067, 0.38070480277027097, 0.09178949245316015, 0.1048517603661796, 0.09341699171329276, 0.10013198505394227, 0.1004159183840635, 0.095933922971569, 0.10631477559539015, 0.09761819707275632, 0.10117271422467844, 0.08720128818716166, 0.09218210892295353, 0.09023856177561718, 0.08608812662775311, 0.09231802497556651, 0.08803596604766939, 0.09081218696011806, 0.0888782686658176, 0.09010139599153721, 0.9362653437101689, 0.9083905009482313, 0.9673493922880929, 0.9458973982772643, 0.9238921991052788, 0.8407154064542881, 0.9221719741270595, 0.9081791663544925, 0.9356730289118014, 0.26616314750647374, 0.2752519445365791, 0.2702740792456769, 0.25928673369753186, 0.31039662698510717, 0.29016747121125264, 0.28760584118811583, 0.2943401727562911, 0.2910524563475111, 0.6047808368980918, 0.5896762767257688, 0.5541794553535324, 0.5839122856090517, 0.6027036155547102, 0.5521286886735914, 0.5674850755219631, 0.5717728007335656, 0.5453342957532781, 0.16676779085400306, 0.17651992291968632, 0.18341850806236404, 0.13579076823282976, 0.15770040994595425, 0.17918568927996126, 0.1635564216374089, 0.1685648077533184, 0.16916715297674323, 0.1702655375580191, 0.16875687308838028, 0.11588579252638209, 0.20733623313436678, 0.1588280581831163, 0.16442680009168964, 0.13394206363591843, 0.19010702718327743, 0.1806240380628047, 0.2058800043292328, 0.170823504997613, 0.16780230138884766, 0.1674875041033278, 0.15620178427809184, 0.1451569571399023, 0.14685085638720574, 0.18931525097787538, 0.14800932215934082, 0.3058961301607064, 0.2912479094271937, 0.3112412880750003, 0.29725789494892574, 0.30511855984690206, 0.28384778917500275, 0.3127530776309928, 0.31049049920412664, 0.34651948698062573, 0.0503973653023273, 0.04324851962728771, 0.04280670222448302, 0.04866924000394868, 0.06929464235873461, 0.057212282796368474, 0.061010022379989426, 0.05288066637359412, 0.05682655804971204, 0.15211539405690222, 0.17814795613258827, 0.15707012675212995, 0.17735563227186812, 0.15009689825297934, 0.16768336463370037, 0.16578878671183572, 0.166482342102662, 0.17934733470333997, 0.48067100773691207, 0.49141697930914174, 0.5095052543886679, 0.48377185994326344, 0.4734543463545513, 0.494255089474259, 0.49383438925930545, 0.46313425246575457, 0.49541959842886696, 0.08261216891880852, 0.10395740390632491, 0.08353128497585638, 0.0851019488046213, 0.0827311257589306, 0.08530821476711337, 0.08293874234721366, 0.08815475965352526, 0.08462475693854032, 0.237324870493692, 0.21007377266859373, 0.14165505258266642, 0.17052384875303594, 0.1522852398719986, 0.1401262482319926, 0.13882502277505226, 0.12740333326904607, 0.2094692721159226, 0.28085532837586935, 0.28549695235535866, 0.2826780685709951, 0.29023602738630105, 0.26474733364254266, 0.27366758295663707, 0.2993425183399563, 0.3041875761522431, 0.29154732576953135, 0.23474636585866615, 0.21682378678275327, 0.21025844356498868, 0.196716195998776, 0.21165428358505844, 0.22355668120998295, 0.21590472442107744, 0.23019234410758815, 0.2249664241546877, 0.17744405548569808, 0.20080373925651307, 0.19637486849670893, 0.18482104824934686, 0.18228734562994264, 0.17820216253043142, 0.20117111153800793, 0.19303722667333045, 0.18550535511022248, 0.17136980174616478, 0.1805956806237322, 0.17457197693559667, 0.17142962600098877, 0.1838304899415042, 0.18791154878306926, 0.17581807072906086, 0.18764227031905423, 0.1869817843340662, 0.5463256795716033, 0.3572414311597688, 0.4787445396450132, 0.29772317463201725, 0.17808880144815808, 0.5571537294048645, 0.5340718210633726, 0.3124749860086504, 0.4381813079837995, 0.5759642738663997, 0.19885519086818626, 0.40378273748657223, 0.23616527851324987, 0.1816072086777456, 0.19162500338867328, 0.20607571267879243, 0.19761989777827071, 0.20314804383019813, 0.1940305624918931, 0.17671372251549333, 0.17785525613937425, 0.1836253767038898, 0.16911212796097175, 0.1897743519894186, 0.1927111493343261, 0.1794703866012045, 0.17630834947369345, 0.07246183046000865, 0.06742192710999062, 0.06924096881451713, 0.07285951077807384, 0.07001809232264045, 0.07379260053053716, 0.07674085116512819, 0.06692060543987866, 0.07607762089508197]}, "mutation_prompt": null}
{"id": "3b1a71af-55ae-46e2-9081-b4530ddfb4e7", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Selective Mutation Strategy\n                indices = np.argsort(fitness)[:self.pop_size//2]  # select top half based on fitness\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                dynamic_F = self.F * (1 - 0.5 * (evals / self.budget))\n                # Gradient Estimation Improvement\n                gradient_estimation = (func(a) - func(b)) / (np.linalg.norm(a - b) + 1e-8)\n                mutant = np.clip(a + dynamic_F * decay * (b - c) + gradient_estimation, self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Utilizing gradient estimation in mutation to improve convergence.", "configspace": "", "generation": 60, "fitness": 0.11731594637694115, "feedback": "The algorithm HybridDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.16.", "error": "", "parent_id": "d8e67729-0d41-4e4d-8ec6-fff9e5db5667", "metadata": {"aucs": [0.248377011961175, 0.2353784736915161, 0.2415097060906356, 0.2751521501294506, 0.26260078684547383, 0.27181790743140477, 0.27241944389489614, 0.25419909415787045, 0.26709237374468275, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04184578443540177, 0.03360371871095247, 0.041615410214438264, 0.03653434776520603, 0.032372190691820624, 0.04228309419483134, 0.04084506868385018, 0.037808621243717644, 0.04103880184829012, 0.021843461725286395, 0.024406751600588916, 0.04470285884942882, 0.03494091514592912, 0.02491152922118456, 0.0250635808700852, 0.014763392921912755, 0.015735501275307207, 0.03323176217446466, 0.9417370378867146, 0.9346712561795687, 0.7074894101469162, 0.5906979622742969, 0.5067579788597533, 0.8211863117794533, 0.8152658441836225, 0.7950218714133848, 0.8646573625811809, 0.07028738622577235, 0.05011526531768773, 0.07013266573794585, 0.049210324865923916, 0.03992416823375011, 0.036911053468552946, 0.018309059866213673, 0.04257398521945288, 0.06006675800824923, 0.118743626569637, 0.1558391693845821, 0.1345718897058874, 0.14394299747499517, 0.12354725147960632, 0.10964995969712621, 0.0840514218558388, 0.08888125912313627, 0.10934002273839216, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001638072059510498, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008678292594542447, 0.004514399195837737, 0.058810552638565605, 9.999999999998899e-05, 0.0021594676676096602, 0.0027326098006009714, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025880647092654918, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.24255397778645404, 0.25695079786071084, 0.2652967598005753, 0.25497193924163253, 0.25790461323576763, 0.26818897690104426, 0.27180627628674525, 0.2566906312929347, 0.25974152720664245, 0.04113829840047167, 0.05022535303462938, 0.034886936909937716, 0.035680723588513485, 0.038375679583536604, 0.05354760245863488, 0.02827890159041546, 0.03329964156706666, 0.0409058064958675, 0.11636978030132572, 0.151192933519663, 0.12175548972795058, 0.13766266535167793, 0.13511880823300437, 0.12910263231691277, 0.11778168698451719, 0.1445043709156022, 0.12264986603162031, 0.19927107993033932, 0.1916817411526166, 0.1959209008735261, 0.17475621925023732, 0.18813472841605494, 0.20027621013198738, 0.2055881162396752, 0.21762757420342527, 0.19731878562698968, 0.10837721021167124, 0.1187076779166899, 0.11781979751684157, 0.12573136911326366, 0.11257906160105924, 0.10843206437555075, 0.11448653502281991, 0.11944641375443077, 0.1269871018440455, 0.16486155475868658, 0.17253102411588062, 0.16898636732230987, 0.1574365348173733, 0.16342807099693002, 0.15214738177773435, 0.16649306561852972, 0.1526705787863757, 0.1756819998627428, 0.10494376527645732, 0.12025317628171794, 0.07098767074110235, 0.11138293165077595, 0.1456421420812123, 0.10157642365191766, 0.07751369531426522, 0.046054780622028946, 0.16207881422481074, 0.1457446475791414, 0.12955333284681914, 0.15110497881786777, 0.14397134339252593, 0.17109741373278042, 0.1425633268137233, 0.16089989416156625, 0.12728448531895242, 0.14226755931705048, 0.15874459990042455, 0.15681046465723625, 0.25234975541896365, 0.12853168781109492, 0.12594525100049891, 0.13571165068676494, 0.11753326767916261, 0.16964874223445936, 0.18462394226308587, 0.17421464854330715, 0.16396272267515066, 0.18120935681072436, 0.17200555792235495, 0.19151528318897448, 0.16342784740392668, 0.1624247603482588, 0.17466000802501824, 0.16914785850448621, 0.04586044497302433, 0.04662420968208203, 0.043968473632105654, 0.0460141829673939, 0.050828948740839985, 0.051020485045697894, 0.05776815750597486, 0.04447481948658771, 0.042643985778569315]}, "mutation_prompt": null}
{"id": "606cbd44-a815-4773-b067-66647b6130ce", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Selective Mutation Strategy\n                indices = np.argsort(fitness)[:self.pop_size//2]  # select top half based on fitness\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                # Dynamic scaling of F for increased exploration-exploitation balance\n                decay = 1 - evals / self.budget\n                dynamic_F = self.F * (1 - 0.3 * (evals / self.budget))  # Adjusted coefficient from 0.5 to 0.3\n                mutant = np.clip(a + dynamic_F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Dynamic scaling of the mutation factor for improved convergence.", "configspace": "", "generation": 61, "fitness": 0.3158864518644644, "feedback": "The algorithm HybridDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.22.", "error": "", "parent_id": "d8e67729-0d41-4e4d-8ec6-fff9e5db5667", "metadata": {"aucs": [0.6601661090436003, 0.6784521006939078, 0.6736848548459897, 0.7069374247100291, 0.7224778577965429, 0.7116302930868017, 0.6814640341389231, 0.698781705133064, 0.6905168735786658, 0.5281173045102823, 0.5123573401996216, 0.506163301529478, 0.5091179835185182, 0.5118634753332829, 0.47075859378378093, 0.5222049090552778, 0.43968523835068796, 0.5210431957041259, 0.13430849504945364, 0.12466324494612835, 0.1252525148161836, 0.12996232831592092, 0.12651656466776096, 0.12559639677027157, 0.11579431602587087, 0.11969500479880535, 0.12608304304012363, 0.10882177642485025, 0.11412705505534881, 0.10827348450097962, 0.1008397558449351, 0.10989787073835267, 0.10694155748101497, 0.10940792461818383, 0.10536584773799873, 0.1051510117267026, 0.8536930399773077, 0.9246622747889534, 0.915286991207926, 0.9420872822363926, 0.9394321339554345, 0.9409373781138601, 0.9607455205973897, 0.9365520382330516, 0.9507441214850767, 0.3003754624041025, 0.2689831717072474, 0.28365571078056295, 0.29876776528367566, 0.31491653378340845, 0.2972289734238662, 0.3219608461893574, 0.33013662957850687, 0.31600995810527344, 0.6711762797877081, 0.6625703354321555, 0.6855066486362892, 0.6717479662698566, 0.6679015653510485, 0.6602287406959109, 0.6717109957303, 0.6448790814408041, 0.666173216661017, 0.16887776405883614, 0.1604021614826734, 0.17960965244527782, 0.19267432394070738, 0.15026369326317013, 0.12947065053166718, 0.1643165231645316, 0.17962016909982415, 0.2357203060668298, 0.009842893292794308, 0.15143568350687986, 0.28551753195764873, 0.142677735578007, 0.20960000832452563, 0.17571943214901897, 0.23642293253476732, 0.22885486905090946, 0.16331848995102116, 0.30915107234080486, 0.26147247595676715, 0.20459011333587496, 0.2604052608834906, 0.28772389371005913, 0.24192564185825982, 0.2804619750320162, 0.21028157405183046, 0.33025032667558696, 0.42780754795913944, 0.38284360969677966, 0.3294022996169008, 0.41410969090467586, 0.28496850355053216, 0.3984971400100712, 0.43416633744135325, 0.42138079877331314, 0.44484228151300664, 0.1453003670564016, 0.10679298326938969, 0.08021701541217063, 0.11779120987797065, 0.16183129175667166, 0.13887081336552587, 0.10620705374107542, 0.11160984036714794, 0.1271374572370496, 0.2548102501424502, 0.21904755607199833, 0.22955463549598543, 0.23148899840467707, 0.2742869044694497, 0.2562329779753435, 0.21322910492235614, 0.250882980949236, 0.23491968509326966, 0.5681456733879362, 0.6220593242812913, 0.5774958948333633, 0.5607456018264811, 0.5800240838588357, 0.6069035121937366, 0.6241563170369104, 0.58718812096427, 0.5782952790295555, 0.09595195522886912, 0.10669768167554705, 0.10516007379230197, 0.10275895272403746, 0.08770438278047654, 0.09658683073412722, 0.10722249341142975, 0.09219666987740116, 0.12035017800746495, 0.19185369297379218, 0.12861354118881063, 0.20051260893882428, 0.16591165405805353, 0.15116492278033034, 0.1374741101552721, 0.16137243316426375, 0.1558677495431351, 0.13949770139767037, 0.34787051112611267, 0.38022519076533623, 0.3322542666822218, 0.35251017219995806, 0.34666578475117604, 0.38753420499173474, 0.3635310776642968, 0.37692131414946195, 0.381240425867694, 0.2990848478636241, 0.2881543929194378, 0.30660909083630283, 0.2897117149527124, 0.27178373894101526, 0.27499648203694416, 0.2639251339125661, 0.3209281361725571, 0.3186354578614572, 0.21173823966266658, 0.17858201293099574, 0.189751866471914, 0.18340301041105989, 0.1786340727993786, 0.1843949091631929, 0.1763334819785357, 0.1894432794486629, 0.20649208243229278, 0.21623314582703812, 0.24570745987631415, 0.1955170605342058, 0.20457011817213266, 0.19766429748750924, 0.23190751549453803, 0.2080507127787138, 0.1887647797882983, 0.2007383542202832, 0.16878292450206933, 0.18904006297504705, 0.6381567715269849, 0.4025961077071658, 0.17125600203471436, 0.4033760303362678, 0.6312693091745822, 0.4763350576043204, 0.6824787455408625, 0.19634262729098118, 0.19198304120758225, 0.5853195276197426, 0.4694371452340189, 0.41579391892950124, 0.1894891851200292, 0.20704828506209327, 0.20135865258684038, 0.20407150714121103, 0.198177896313537, 0.1873599724867423, 0.17443055714715594, 0.18686365257683568, 0.1858414698138482, 0.18615709717364137, 0.19415672063785372, 0.19308298118584022, 0.17191222947824736, 0.0752494922782414, 0.07883807468387671, 0.07327356528940276, 0.08103574387412626, 0.07505630252510886, 0.07681523145175684, 0.07523485068143165, 0.07832271121512735, 0.08408243055531917]}, "mutation_prompt": null}
{"id": "9b7dc9af-fc05-4d7c-b381-6e4c6123743a", "solution": "import numpy as np\n\nclass HybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 20 * dim\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                # Selective Mutation Strategy\n                indices = np.argsort(fitness)[:self.pop_size//2]  # select top half based on fitness\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                dynamic_F = self.F * (1 - 0.5 * (evals / self.budget))\n                mutant = np.clip(a + dynamic_F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive Crossover Probability\n                self.CR = 0.1 if evals > 0.8 * self.budget else 0.9\n\n                # Crossover\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                # Evaluate trial\n                trial_fitness = func(trial)\n                evals += 1\n                \n                # Selection\n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                # Local Search (Hill-Climbing) with dynamic step size\n                if evals % 100 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step = (0.01 + 0.99 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "HybridDE", "description": "Introducing a selective mutation strategy based on fitness ranking to improve convergence speed.", "configspace": "", "generation": 39, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d8e67729-0d41-4e4d-8ec6-fff9e5db5667", "metadata": {"aucs": [0.6921803832002705, 0.700375616511019, 0.6944095616436363, 0.714815186399387, 0.6935808330873592, 0.7037692409856633, 0.7085227338462282, 0.6909576446469468, 0.708992870206366, 0.514202992568142, 0.5151989765455434, 0.5347217101907344, 0.5092620836283233, 0.5463845240460926, 0.49721352649872175, 0.5029934831809619, 0.4739712838942459, 0.5066303874045526, 0.12712256554452583, 0.15652448204035319, 0.13605993896149482, 0.15580078668829078, 0.1331530203865826, 0.14811896161849558, 0.14970321254343832, 0.12820566074664475, 0.1477812620679262, 0.11701636417005534, 0.11736872620627947, 0.11433810297882752, 0.1146524246447288, 0.1145024398793586, 0.10992683025773875, 0.11522393748017334, 0.10624261248129097, 0.11088727860320635, 0.8909378692221623, 0.9599988886340005, 0.8814051144636283, 0.8586438690411334, 0.893530431112333, 0.8761058809236995, 0.9092141771416383, 0.905030828663494, 0.9645571944944731, 0.288632326869108, 0.2611439740821193, 0.23965482591214193, 0.23703850359008094, 0.2896668535795873, 0.2497408986433668, 0.2736190512823057, 0.273001058735893, 0.2608266266945485, 0.6688508780130283, 0.6671467148288821, 0.651796309289272, 0.6579373888663351, 0.6867800718642704, 0.6722207951760553, 0.6978081635118021, 0.6859640692643756, 0.6924931070228146, 0.1942932052163303, 0.19250420804540758, 0.1458280131422265, 0.15965906041658495, 0.16197378554312714, 0.30089642443423503, 0.20648174533976893, 0.15471047659934356, 0.18136277904056874, 0.2330842425268641, 0.04955298771397776, 0.10791318938190364, 0.20359725810808182, 0.13796559192675828, 0.17058673851664607, 0.12490376066844688, 0.1274154372531242, 0.15012466846729544, 0.27405566858073105, 0.2147893511801381, 0.21502670425824544, 0.30385544167627776, 0.25107603138251866, 0.1509229594288234, 0.3078504291632236, 0.2241093948170625, 0.2452843503452714, 0.3247002716890428, 0.39303310451701856, 0.35255895046809604, 0.36092495459198204, 0.3993916100972228, 0.35968586329290264, 0.3912361637303845, 0.429623206890838, 0.37758674077871257, 0.08074714803926819, 0.1451169532972697, 0.1464600014451698, 0.09547932117024416, 0.15809630707707634, 0.15496443496591872, 0.17378097410828308, 0.12377898557234768, 0.18672635644793756, 0.2023657758776899, 0.24814848525034772, 0.25771885840149267, 0.22764448915770352, 0.2445291926219394, 0.21548618995247804, 0.21989952836292181, 0.23734080420620918, 0.22637350807913326, 0.5929108396249199, 0.5514985364667917, 0.5559309365285838, 0.5717296136189447, 0.5525630909300807, 0.5714648899671083, 0.5820293987974239, 0.5282227888355457, 0.5799897930442872, 0.10537226300296698, 0.11657929474275719, 0.09525750427673907, 0.10190204860218055, 0.10411077408643576, 0.11451031096823605, 0.09847925718662898, 0.1078837767890114, 0.1029897619427087, 0.14257533017487511, 0.1449955612128313, 0.15161475717945128, 0.16688986396797323, 0.1528747959749629, 0.17541973513413978, 0.15223329389237916, 0.1530832749694897, 0.13949784180929037, 0.3506332724109439, 0.3865459812041707, 0.38018692519196406, 0.3911879728023998, 0.34101924180817456, 0.3763984430219801, 0.4331778644808528, 0.4074803154843345, 0.38365291658097567, 0.3111859012059248, 0.31124430153395277, 0.27052221279219335, 0.29194002943961095, 0.2646858325600189, 0.29739198988220183, 0.31330471047455444, 0.27297879751302134, 0.3084727312124699, 0.18607081973207718, 0.21134999713883562, 0.18207077473382216, 0.19544393569595997, 0.1904356743656035, 0.2005242665989807, 0.19349799871090756, 0.2175383606649729, 0.1924610960291373, 0.24873281799328573, 0.27836312107094996, 0.19974806781215937, 0.1981644621987172, 0.22694840844856268, 0.19088388333278472, 0.19912657084115126, 0.22988423016648984, 0.209881536283673, 0.6270076650365011, 0.591025635146484, 0.5485400178605049, 0.5838096747800302, 0.5954262237765411, 0.5836070341484096, 0.1833652487816141, 0.16847527810597274, 0.4206535498687004, 0.6354551824476533, 0.19527636044511187, 0.2738840792354085, 0.5374813493361007, 0.19363142255884935, 0.433583077879951, 0.20624070495608693, 0.4370180323104026, 0.20345439715681346, 0.18885237289006207, 0.18716921603877734, 0.20040179195718166, 0.19078773925835124, 0.18713416801232008, 0.17385142354535654, 0.18114958000298942, 0.19680310636180876, 0.1813642794216347, 0.07300157001662644, 0.08277324069116054, 0.07615813302209551, 0.07437586989302358, 0.07264557510185188, 0.07651754466558758, 0.07463846804926377, 0.0872515735067011, 0.07901944283383633]}, "mutation_prompt": null}
{"id": "df91e617-96d2-494e-be4c-acadeea31c82", "solution": "import numpy as np\n\nclass AdaptiveHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = max(20 * dim, 10)\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.argsort(fitness)[:self.pop_size//2]\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                self.F = 0.5 + 0.3 * np.sin(np.pi * evals / self.budget)\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.1 if evals > 0.7 * self.budget else 0.9\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                if evals % 80 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step_size = (0.02 + 0.98 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step_size * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "AdaptiveHybridDE", "description": "Incorporating adaptive population scaling and diversified local search strategies to enhance convergence efficiency.", "configspace": "", "generation": 63, "fitness": 0.3286925288402453, "feedback": "The algorithm AdaptiveHybridDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.22.", "error": "", "parent_id": "d8e67729-0d41-4e4d-8ec6-fff9e5db5667", "metadata": {"aucs": [0.723276293752772, 0.7067902223655351, 0.6968503176625909, 0.7379607085221316, 0.7112728446389729, 0.7288818218468345, 0.7296789530922216, 0.7134332616837673, 0.7253990168013991, 0.5085245583642966, 0.531329942291587, 0.5011408968925257, 0.5060255372642539, 0.5291805201866326, 0.5507049403255551, 0.5276591778957196, 0.5359934243378364, 0.5294321730948193, 0.13773045538186857, 0.1302018592070754, 0.14426141081540977, 0.12196955283651201, 0.12563255768564685, 0.14372423029401926, 0.12167773541291971, 0.13041855400455682, 0.13336498204072633, 0.10609501688490341, 0.11446244780261072, 0.11369495381526995, 0.12424181060311235, 0.11141257089066825, 0.1174851533268857, 0.12000843440249387, 0.10511546271812933, 0.1159547993872938, 0.8929660110923627, 0.8941818219529424, 0.8757250002531621, 0.8688441352412681, 0.8411839606041717, 0.8467075239100674, 0.9564277731414088, 0.8597316285146108, 0.7322483251242985, 0.35210333944908634, 0.34800698481825654, 0.28987685216197834, 0.3528800090747656, 0.3707253069162032, 0.34310602735767004, 0.3311496362452091, 0.33896375409907054, 0.3499453112940152, 0.6760909707600689, 0.7379222706525269, 0.6711792563634601, 0.698791919925317, 0.6723742652856124, 0.7321030632559807, 0.7143022840907699, 0.7047536320772618, 0.6991241272091375, 0.252909408019508, 0.17385107965290192, 0.19877890222384254, 0.18676222945441034, 0.18192511041257375, 0.18560349613429816, 0.14600325687082294, 0.17437514555205402, 0.17992631860591446, 0.17582593262726443, 0.14218841583859065, 0.14816164338632465, 0.2200165705313869, 0.1976332012288885, 0.2549793033011055, 0.1796428280475535, 0.1990889662136155, 0.1837576789476819, 0.2907447128519284, 0.2818247414031544, 0.285695112245704, 0.27391064628045014, 0.28689523104251324, 0.2943191530330753, 0.313786749498864, 0.32232473685963037, 0.26772565321212416, 0.3807287577750498, 0.40430775789701523, 0.39040433449456236, 0.4247839762376848, 0.3911989025187491, 0.42387417993381116, 0.4516795516918731, 0.4655850985395463, 0.43513553315217013, 0.08278113277954147, 0.11927518007705717, 0.12172252742605538, 0.08380980585375075, 0.14619450014445468, 0.13566135763469755, 0.09386039172559701, 0.08984928159688788, 0.16577588074039484, 0.23949046408214225, 0.24063360480007745, 0.2148160016802333, 0.24324535180436846, 0.24976067431333915, 0.28460993459871675, 0.2319758865978354, 0.23881145743167898, 0.23986513735369785, 0.6042526073405005, 0.6072132138678417, 0.6145234351592841, 0.6069338077235791, 0.6289971816920674, 0.6046360222845432, 0.605766370676037, 0.5985056216185886, 0.6165986262874332, 0.09927414488763064, 0.09786343249291785, 0.1111350257625856, 0.10847135884575787, 0.10156282716012488, 0.10161090295584285, 0.09141688948267734, 0.09631103044355838, 0.10180457742127635, 0.16736905288526882, 0.1536807790556486, 0.15075028735192542, 0.16928519550250243, 0.14565576184484652, 0.1657944017149352, 0.15437448514086827, 0.1423082162005167, 0.1346797883402402, 0.35576447033170455, 0.3565335735910571, 0.3658386394813028, 0.3729740242333658, 0.36945965150344096, 0.38494174087999256, 0.38138787684189224, 0.38557800909024975, 0.3602845989677873, 0.29278259042105315, 0.29377302639208136, 0.2647352759074706, 0.2695722176073062, 0.26294429168530353, 0.2795776210341727, 0.3026411249447909, 0.2962459243911, 0.31857675324272683, 0.19001081001828346, 0.20089052851932654, 0.19561885060902084, 0.20556766791236103, 0.18899618134547025, 0.1880682474947133, 0.19592238085021363, 0.19136881386592397, 0.1881369685225155, 0.1920366950574972, 0.20894334413346594, 0.19865687763757067, 0.1984133255636551, 0.22641372001077054, 0.20556765944553423, 0.18838615049416896, 0.21293923128937142, 0.20324491253160104, 0.6475532563098656, 0.19524524108422636, 0.636378481893793, 0.5025609846040462, 0.19041949642839595, 0.6051550064637894, 0.6301043407837812, 0.571622129238325, 0.5765595357435916, 0.19203467883910663, 0.20099858456951558, 0.5626745930774848, 0.20001658538532607, 0.6042098393363167, 0.680720029006367, 0.20737065087247897, 0.34465174062529036, 0.20477284221064396, 0.17033294490681983, 0.19871497929778825, 0.19776727502619273, 0.1905102762930344, 0.17959103249583241, 0.19355364462118307, 0.17777104718934933, 0.18572454752254108, 0.22197401448948062, 0.07338156451119648, 0.08216186878616605, 0.08747810360311359, 0.07828792184848066, 0.0774781924112049, 0.07678934346791033, 0.07457052138348297, 0.07994857498361618, 0.07403886443858232]}, "mutation_prompt": null}
{"id": "9c2bd270-5b8b-43bb-bf62-7305abd2e256", "solution": "import numpy as np\n\nclass AdaptiveHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = max(20 * dim, 10)\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.argsort(fitness)[:self.pop_size//2]\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                self.F = 0.5 + 0.4 * np.sin(np.pi * evals / self.budget)  # Adjusted the scaling factor\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.2 if evals > 0.65 * self.budget else 0.9  # Adjusted crossover rate\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                if evals % 60 == 0:  # Adjusted frequency of local search\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step_size = (0.03 + 0.97 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)  # Adjusted step size\n                    local_trial = np.clip(best_solution + step_size * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "AdaptiveHybridDE", "description": "Enhancing exploration with adaptive mutation and dynamic crossover for improved convergence.", "configspace": "", "generation": 64, "fitness": 0.3071061260623197, "feedback": "The algorithm AdaptiveHybridDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.22.", "error": "", "parent_id": "df91e617-96d2-494e-be4c-acadeea31c82", "metadata": {"aucs": [0.707389904066454, 0.6945323934055512, 0.6960337832282548, 0.7038998875012016, 0.6879979815152166, 0.7039084058349396, 0.6874477605519561, 0.7144523963666252, 0.6955394417495291, 0.4723180602382562, 0.44999234729497206, 0.4839245656903306, 0.48577723059102285, 0.4890809268031646, 0.5062638124798562, 0.4921135365455497, 0.4636989416287778, 0.4755189286529762, 0.13077924532441543, 0.12943339391458952, 0.1286094318112484, 0.1283312804409601, 0.1291518225172853, 0.12779924158642808, 0.125262795041591, 0.14185887645688322, 0.1280497958101463, 0.11675296605890073, 0.11669188045029766, 0.107205859358242, 0.11497067279858364, 0.12455941495898881, 0.116886257654916, 0.12511094274898538, 0.10987658206609319, 0.12121831962217477, 0.8636068282967728, 0.9251429758623109, 0.9350104103740613, 0.8914715193690177, 0.890696794355438, 0.8421036135316885, 0.8231210973802477, 0.934099597058814, 0.8941945650012522, 0.3398945835272007, 0.29022555117971716, 0.304724909576909, 0.30845819285058906, 0.3144875006793675, 0.30773213874545435, 0.33078045145262536, 0.3364414529734918, 0.31782344163243703, 0.6510601974125754, 0.6629580839246252, 0.6556537335365287, 0.7521328464943156, 0.6662987991551645, 0.6870745133206348, 0.6530101852708504, 0.7070777433321109, 0.6731371057351141, 0.14558085326553805, 0.16749117558099313, 0.21904252288935722, 0.19095528703704412, 0.16753129993222704, 0.16893152678334933, 0.1902226095562488, 0.17911164982981376, 0.1800309393923495, 0.13499938624380614, 0.17994031992919057, 0.20807812995635044, 0.2066541223879178, 0.19636147482999544, 0.16512766699291492, 0.1279964029716597, 0.2144284747412597, 0.19581697738162518, 0.22860060671091487, 0.1745250740236305, 0.2212895684750662, 0.1963474052738482, 0.2839400680839739, 0.20951838063794304, 0.22267715823993572, 0.21595480436112757, 0.22281392687183643, 0.3764914067640798, 0.34619108032117096, 0.388981464118078, 0.34881412753295216, 0.3597875127779693, 0.331288670932966, 0.39250783817291945, 0.34481936980777084, 0.39448964320959645, 0.08596130235168509, 0.10691520423850542, 0.09570815576909408, 0.08252737552344913, 0.09677898307955457, 0.1127453611703515, 0.08958810729903599, 0.08020334736308232, 0.10243718577810945, 0.22424286319083198, 0.20360301748031318, 0.2375118660698653, 0.18742754210113055, 0.223933628254259, 0.20162869620712953, 0.22305382468704182, 0.21313567007480194, 0.17622832188894277, 0.5797913272860404, 0.56713090519476, 0.5692138336221705, 0.5487850454550616, 0.5646484463722614, 0.5754623194156943, 0.5637567819004194, 0.5675522375571092, 0.5875420589673126, 0.09576686145091662, 0.10810973885023978, 0.09713118007470933, 0.10255221384889335, 0.09378530225973414, 0.10575117979435622, 0.0974448804240583, 0.0924595922932514, 0.09957975772563876, 0.17267881584946643, 0.14784906774776796, 0.14276958459851197, 0.151374055631034, 0.16646564337755443, 0.14565990315436794, 0.1492505727678819, 0.14135621660837117, 0.18568027145249177, 0.32290474434784133, 0.3418397959385575, 0.36060373114986866, 0.34556810478242783, 0.31101515477336916, 0.33242994108180346, 0.35860884239622226, 0.3643187577411351, 0.34236563616113713, 0.25116398487779157, 0.23985155836521577, 0.2693898120549668, 0.24307376700056604, 0.25450212027396735, 0.2889455091664942, 0.2823001758744462, 0.2864900437452914, 0.2738724313074141, 0.21080317964279582, 0.1911555738949201, 0.18239386422649784, 0.22978722338354352, 0.2662763362483499, 0.1822503997904532, 0.18996766606759463, 0.21120420969964904, 0.19328266378626058, 0.18896389498771593, 0.19302319224235087, 0.19395302674379777, 0.2027520302224335, 0.21384815941567015, 0.2224713837140102, 0.1998157566987082, 0.2162334210179584, 0.19308352535969475, 0.591310144318304, 0.6078887069900903, 0.6919040412354667, 0.2677789881576397, 0.19196304469279024, 0.3424682047948633, 0.6623334498731426, 0.41327895127338987, 0.23720577960093958, 0.4345179881002127, 0.20439935904676299, 0.3795694860188529, 0.20304663088295516, 0.19889735715301016, 0.19091183455326666, 0.20635989760395768, 0.34274677175093704, 0.2053618277505178, 0.19007284672673141, 0.18715113825832985, 0.18309993077320175, 0.17908124166455452, 0.18412473759564596, 0.17115959390017665, 0.19304309095443706, 0.18106493841115867, 0.18756801879009832, 0.08191510050150752, 0.07582495208775308, 0.07173712410365785, 0.07643207574500344, 0.07563975904912257, 0.0888283272002387, 0.08172242200549185, 0.0724843976885109, 0.0801463650080626]}, "mutation_prompt": null}
{"id": "1f42a88e-d75d-4a94-a711-148938ccb976", "solution": "import numpy as np\n\nclass AdaptiveHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = max(20 * dim, 10)\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.argsort(fitness)[:self.pop_size//2]\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                self.F = 0.5 + 0.3 * np.sin(np.pi * evals / self.budget)\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.1 if evals > 0.7 * self.budget else 0.9\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                if evals % 80 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step_size = (0.02 + 0.98 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step_size * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "AdaptiveHybridDE", "description": "Incorporating adaptive population scaling and diversified local search strategies to enhance convergence efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df91e617-96d2-494e-be4c-acadeea31c82", "metadata": {"aucs": [0.723276293752772, 0.7067902223655351, 0.6968503176625909, 0.7379607085221316, 0.7112728446389729, 0.7288818218468345, 0.7296789530922216, 0.7134332616837673, 0.7253990168013991, 0.5085245583642966, 0.531329942291587, 0.5011408968925257, 0.5060255372642539, 0.5291805201866326, 0.5507049403255551, 0.5276591778957196, 0.5359934243378364, 0.5294321730948193, 0.13773045538186857, 0.1302018592070754, 0.14426141081540977, 0.12196955283651201, 0.12563255768564685, 0.14372423029401926, 0.12167773541291971, 0.13041855400455682, 0.13336498204072633, 0.10609501688490341, 0.11446244780261072, 0.11369495381526995, 0.12424181060311235, 0.11141257089066825, 0.1174851533268857, 0.12000843440249387, 0.10511546271812933, 0.1159547993872938, 0.8929660110923627, 0.8941818219529424, 0.8757250002531621, 0.8688441352412681, 0.8411839606041717, 0.8467075239100674, 0.9564277731414088, 0.8597316285146108, 0.7322483251242985, 0.35210333944908634, 0.34800698481825654, 0.28987685216197834, 0.3528800090747656, 0.3707253069162032, 0.34310602735767004, 0.3311496362452091, 0.33896375409907054, 0.3499453112940152, 0.6760909707600689, 0.7379222706525269, 0.6711792563634601, 0.698791919925317, 0.6723742652856124, 0.7321030632559807, 0.7143022840907699, 0.7047536320772618, 0.6991241272091375, 0.252909408019508, 0.17385107965290192, 0.19877890222384254, 0.18676222945441034, 0.18192511041257375, 0.18560349613429816, 0.14600325687082294, 0.17437514555205402, 0.17992631860591446, 0.17582593262726443, 0.14218841583859065, 0.14816164338632465, 0.2200165705313869, 0.1976332012288885, 0.2549793033011055, 0.1796428280475535, 0.1990889662136155, 0.1837576789476819, 0.2907447128519284, 0.2818247414031544, 0.285695112245704, 0.27391064628045014, 0.28689523104251324, 0.2943191530330753, 0.313786749498864, 0.32232473685963037, 0.26772565321212416, 0.3807287577750498, 0.40430775789701523, 0.39040433449456236, 0.4247839762376848, 0.3911989025187491, 0.42387417993381116, 0.4516795516918731, 0.4655850985395463, 0.43513553315217013, 0.08278113277954147, 0.11927518007705717, 0.12172252742605538, 0.08380980585375075, 0.14619450014445468, 0.13566135763469755, 0.09386039172559701, 0.08984928159688788, 0.16577588074039484, 0.23949046408214225, 0.24063360480007745, 0.2148160016802333, 0.24324535180436846, 0.24976067431333915, 0.28460993459871675, 0.2319758865978354, 0.23881145743167898, 0.23986513735369785, 0.6042526073405005, 0.6072132138678417, 0.6145234351592841, 0.6069338077235791, 0.6289971816920674, 0.6046360222845432, 0.605766370676037, 0.5985056216185886, 0.6165986262874332, 0.09927414488763064, 0.09786343249291785, 0.1111350257625856, 0.10847135884575787, 0.10156282716012488, 0.10161090295584285, 0.09141688948267734, 0.09631103044355838, 0.10180457742127635, 0.16736905288526882, 0.1536807790556486, 0.15075028735192542, 0.16928519550250243, 0.14565576184484652, 0.1657944017149352, 0.15437448514086827, 0.1423082162005167, 0.1346797883402402, 0.35576447033170455, 0.3565335735910571, 0.3658386394813028, 0.3729740242333658, 0.36945965150344096, 0.38494174087999256, 0.38138787684189224, 0.38557800909024975, 0.3602845989677873, 0.29278259042105315, 0.29377302639208136, 0.2647352759074706, 0.2695722176073062, 0.26294429168530353, 0.2795776210341727, 0.3026411249447909, 0.2962459243911, 0.31857675324272683, 0.19001081001828346, 0.20089052851932654, 0.19561885060902084, 0.20556766791236103, 0.18899618134547025, 0.1880682474947133, 0.19592238085021363, 0.19136881386592397, 0.1881369685225155, 0.1920366950574972, 0.20894334413346594, 0.19865687763757067, 0.1984133255636551, 0.22641372001077054, 0.20556765944553423, 0.18838615049416896, 0.21293923128937142, 0.20324491253160104, 0.6475532563098656, 0.19524524108422636, 0.636378481893793, 0.5025609846040462, 0.19041949642839595, 0.6051550064637894, 0.6301043407837812, 0.571622129238325, 0.5765595357435916, 0.19203467883910663, 0.20099858456951558, 0.5626745930774848, 0.20001658538532607, 0.6042098393363167, 0.680720029006367, 0.20737065087247897, 0.34465174062529036, 0.20477284221064396, 0.17033294490681983, 0.19871497929778825, 0.19776727502619273, 0.1905102762930344, 0.17959103249583241, 0.19355364462118307, 0.17777104718934933, 0.18572454752254108, 0.22197401448948062, 0.07338156451119648, 0.08216186878616605, 0.08747810360311359, 0.07828792184848066, 0.0774781924112049, 0.07678934346791033, 0.07457052138348297, 0.07994857498361618, 0.07403886443858232]}, "mutation_prompt": null}
{"id": "b6cd0337-8424-4851-8cef-c67a8ee8b512", "solution": "import numpy as np\n\nclass AdaptiveHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = max(20 * dim, 10)\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.argsort(fitness)[:self.pop_size//2]\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                self.F = 0.5 + 0.3 * np.sin(np.pi * evals / self.budget)\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.1 if evals > 0.7 * self.budget else 0.9\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                if evals % 80 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step_size = (0.02 + 0.98 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step_size * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "AdaptiveHybridDE", "description": "Incorporating adaptive population scaling and diversified local search strategies to enhance convergence efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df91e617-96d2-494e-be4c-acadeea31c82", "metadata": {"aucs": [0.723276293752772, 0.7067902223655351, 0.6968503176625909, 0.7379607085221316, 0.7112728446389729, 0.7288818218468345, 0.7296789530922216, 0.7134332616837673, 0.7253990168013991, 0.5085245583642966, 0.531329942291587, 0.5011408968925257, 0.5060255372642539, 0.5291805201866326, 0.5507049403255551, 0.5276591778957196, 0.5359934243378364, 0.5294321730948193, 0.13773045538186857, 0.1302018592070754, 0.14426141081540977, 0.12196955283651201, 0.12563255768564685, 0.14372423029401926, 0.12167773541291971, 0.13041855400455682, 0.13336498204072633, 0.10609501688490341, 0.11446244780261072, 0.11369495381526995, 0.12424181060311235, 0.11141257089066825, 0.1174851533268857, 0.12000843440249387, 0.10511546271812933, 0.1159547993872938, 0.8929660110923627, 0.8941818219529424, 0.8757250002531621, 0.8688441352412681, 0.8411839606041717, 0.8467075239100674, 0.9564277731414088, 0.8597316285146108, 0.7322483251242985, 0.35210333944908634, 0.34800698481825654, 0.28987685216197834, 0.3528800090747656, 0.3707253069162032, 0.34310602735767004, 0.3311496362452091, 0.33896375409907054, 0.3499453112940152, 0.6760909707600689, 0.7379222706525269, 0.6711792563634601, 0.698791919925317, 0.6723742652856124, 0.7321030632559807, 0.7143022840907699, 0.7047536320772618, 0.6991241272091375, 0.252909408019508, 0.17385107965290192, 0.19877890222384254, 0.18676222945441034, 0.18192511041257375, 0.18560349613429816, 0.14600325687082294, 0.17437514555205402, 0.17992631860591446, 0.17582593262726443, 0.14218841583859065, 0.14816164338632465, 0.2200165705313869, 0.1976332012288885, 0.2549793033011055, 0.1796428280475535, 0.1990889662136155, 0.1837576789476819, 0.2907447128519284, 0.2818247414031544, 0.285695112245704, 0.27391064628045014, 0.28689523104251324, 0.2943191530330753, 0.313786749498864, 0.32232473685963037, 0.26772565321212416, 0.3807287577750498, 0.40430775789701523, 0.39040433449456236, 0.4247839762376848, 0.3911989025187491, 0.42387417993381116, 0.4516795516918731, 0.4655850985395463, 0.43513553315217013, 0.08278113277954147, 0.11927518007705717, 0.12172252742605538, 0.08380980585375075, 0.14619450014445468, 0.13566135763469755, 0.09386039172559701, 0.08984928159688788, 0.16577588074039484, 0.23949046408214225, 0.24063360480007745, 0.2148160016802333, 0.24324535180436846, 0.24976067431333915, 0.28460993459871675, 0.2319758865978354, 0.23881145743167898, 0.23986513735369785, 0.6042526073405005, 0.6072132138678417, 0.6145234351592841, 0.6069338077235791, 0.6289971816920674, 0.6046360222845432, 0.605766370676037, 0.5985056216185886, 0.6165986262874332, 0.09927414488763064, 0.09786343249291785, 0.1111350257625856, 0.10847135884575787, 0.10156282716012488, 0.10161090295584285, 0.09141688948267734, 0.09631103044355838, 0.10180457742127635, 0.16736905288526882, 0.1536807790556486, 0.15075028735192542, 0.16928519550250243, 0.14565576184484652, 0.1657944017149352, 0.15437448514086827, 0.1423082162005167, 0.1346797883402402, 0.35576447033170455, 0.3565335735910571, 0.3658386394813028, 0.3729740242333658, 0.36945965150344096, 0.38494174087999256, 0.38138787684189224, 0.38557800909024975, 0.3602845989677873, 0.29278259042105315, 0.29377302639208136, 0.2647352759074706, 0.2695722176073062, 0.26294429168530353, 0.2795776210341727, 0.3026411249447909, 0.2962459243911, 0.31857675324272683, 0.19001081001828346, 0.20089052851932654, 0.19561885060902084, 0.20556766791236103, 0.18899618134547025, 0.1880682474947133, 0.19592238085021363, 0.19136881386592397, 0.1881369685225155, 0.1920366950574972, 0.20894334413346594, 0.19865687763757067, 0.1984133255636551, 0.22641372001077054, 0.20556765944553423, 0.18838615049416896, 0.21293923128937142, 0.20324491253160104, 0.6475532563098656, 0.19524524108422636, 0.636378481893793, 0.5025609846040462, 0.19041949642839595, 0.6051550064637894, 0.6301043407837812, 0.571622129238325, 0.5765595357435916, 0.19203467883910663, 0.20099858456951558, 0.5626745930774848, 0.20001658538532607, 0.6042098393363167, 0.680720029006367, 0.20737065087247897, 0.34465174062529036, 0.20477284221064396, 0.17033294490681983, 0.19871497929778825, 0.19776727502619273, 0.1905102762930344, 0.17959103249583241, 0.19355364462118307, 0.17777104718934933, 0.18572454752254108, 0.22197401448948062, 0.07338156451119648, 0.08216186878616605, 0.08747810360311359, 0.07828792184848066, 0.0774781924112049, 0.07678934346791033, 0.07457052138348297, 0.07994857498361618, 0.07403886443858232]}, "mutation_prompt": null}
{"id": "6c468da7-1855-4696-ad17-6309afc17392", "solution": "import numpy as np\n\nclass AdaptiveHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = max(20 * dim, 10)\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.argsort(fitness)[:self.pop_size//2]\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                self.F = 0.5 + 0.3 * np.sin(np.pi * evals / self.budget)\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.1 if evals > 0.7 * self.budget else 0.9\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                if evals % 80 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step_size = (0.02 + 0.98 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step_size * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "AdaptiveHybridDE", "description": "Incorporating adaptive population scaling and diversified local search strategies to enhance convergence efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df91e617-96d2-494e-be4c-acadeea31c82", "metadata": {"aucs": [0.723276293752772, 0.7067902223655351, 0.6968503176625909, 0.7379607085221316, 0.7112728446389729, 0.7288818218468345, 0.7296789530922216, 0.7134332616837673, 0.7253990168013991, 0.5085245583642966, 0.531329942291587, 0.5011408968925257, 0.5060255372642539, 0.5291805201866326, 0.5507049403255551, 0.5276591778957196, 0.5359934243378364, 0.5294321730948193, 0.13773045538186857, 0.1302018592070754, 0.14426141081540977, 0.12196955283651201, 0.12563255768564685, 0.14372423029401926, 0.12167773541291971, 0.13041855400455682, 0.13336498204072633, 0.10609501688490341, 0.11446244780261072, 0.11369495381526995, 0.12424181060311235, 0.11141257089066825, 0.1174851533268857, 0.12000843440249387, 0.10511546271812933, 0.1159547993872938, 0.8929660110923627, 0.8941818219529424, 0.8757250002531621, 0.8688441352412681, 0.8411839606041717, 0.8467075239100674, 0.9564277731414088, 0.8597316285146108, 0.7322483251242985, 0.35210333944908634, 0.34800698481825654, 0.28987685216197834, 0.3528800090747656, 0.3707253069162032, 0.34310602735767004, 0.3311496362452091, 0.33896375409907054, 0.3499453112940152, 0.6760909707600689, 0.7379222706525269, 0.6711792563634601, 0.698791919925317, 0.6723742652856124, 0.7321030632559807, 0.7143022840907699, 0.7047536320772618, 0.6991241272091375, 0.252909408019508, 0.17385107965290192, 0.19877890222384254, 0.18676222945441034, 0.18192511041257375, 0.18560349613429816, 0.14600325687082294, 0.17437514555205402, 0.17992631860591446, 0.17582593262726443, 0.14218841583859065, 0.14816164338632465, 0.2200165705313869, 0.1976332012288885, 0.2549793033011055, 0.1796428280475535, 0.1990889662136155, 0.1837576789476819, 0.2907447128519284, 0.2818247414031544, 0.285695112245704, 0.27391064628045014, 0.28689523104251324, 0.2943191530330753, 0.313786749498864, 0.32232473685963037, 0.26772565321212416, 0.3807287577750498, 0.40430775789701523, 0.39040433449456236, 0.4247839762376848, 0.3911989025187491, 0.42387417993381116, 0.4516795516918731, 0.4655850985395463, 0.43513553315217013, 0.08278113277954147, 0.11927518007705717, 0.12172252742605538, 0.08380980585375075, 0.14619450014445468, 0.13566135763469755, 0.09386039172559701, 0.08984928159688788, 0.16577588074039484, 0.23949046408214225, 0.24063360480007745, 0.2148160016802333, 0.24324535180436846, 0.24976067431333915, 0.28460993459871675, 0.2319758865978354, 0.23881145743167898, 0.23986513735369785, 0.6042526073405005, 0.6072132138678417, 0.6145234351592841, 0.6069338077235791, 0.6289971816920674, 0.6046360222845432, 0.605766370676037, 0.5985056216185886, 0.6165986262874332, 0.09927414488763064, 0.09786343249291785, 0.1111350257625856, 0.10847135884575787, 0.10156282716012488, 0.10161090295584285, 0.09141688948267734, 0.09631103044355838, 0.10180457742127635, 0.16736905288526882, 0.1536807790556486, 0.15075028735192542, 0.16928519550250243, 0.14565576184484652, 0.1657944017149352, 0.15437448514086827, 0.1423082162005167, 0.1346797883402402, 0.35576447033170455, 0.3565335735910571, 0.3658386394813028, 0.3729740242333658, 0.36945965150344096, 0.38494174087999256, 0.38138787684189224, 0.38557800909024975, 0.3602845989677873, 0.29278259042105315, 0.29377302639208136, 0.2647352759074706, 0.2695722176073062, 0.26294429168530353, 0.2795776210341727, 0.3026411249447909, 0.2962459243911, 0.31857675324272683, 0.19001081001828346, 0.20089052851932654, 0.19561885060902084, 0.20556766791236103, 0.18899618134547025, 0.1880682474947133, 0.19592238085021363, 0.19136881386592397, 0.1881369685225155, 0.1920366950574972, 0.20894334413346594, 0.19865687763757067, 0.1984133255636551, 0.22641372001077054, 0.20556765944553423, 0.18838615049416896, 0.21293923128937142, 0.20324491253160104, 0.6475532563098656, 0.19524524108422636, 0.636378481893793, 0.5025609846040462, 0.19041949642839595, 0.6051550064637894, 0.6301043407837812, 0.571622129238325, 0.5765595357435916, 0.19203467883910663, 0.20099858456951558, 0.5626745930774848, 0.20001658538532607, 0.6042098393363167, 0.680720029006367, 0.20737065087247897, 0.34465174062529036, 0.20477284221064396, 0.17033294490681983, 0.19871497929778825, 0.19776727502619273, 0.1905102762930344, 0.17959103249583241, 0.19355364462118307, 0.17777104718934933, 0.18572454752254108, 0.22197401448948062, 0.07338156451119648, 0.08216186878616605, 0.08747810360311359, 0.07828792184848066, 0.0774781924112049, 0.07678934346791033, 0.07457052138348297, 0.07994857498361618, 0.07403886443858232]}, "mutation_prompt": null}
{"id": "c04a44fe-fc89-4169-a1cd-79cd46670f8e", "solution": "import numpy as np\n\nclass AdaptiveHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = max(20 * dim, 10)\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.argsort(fitness)[:self.pop_size//2]\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                self.F = 0.5 + 0.3 * np.sin(np.pi * evals / self.budget)\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.1 if evals > 0.7 * self.budget else 0.9\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                if evals % 80 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step_size = (0.02 + 0.98 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step_size * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "AdaptiveHybridDE", "description": "Incorporating adaptive population scaling and diversified local search strategies to enhance convergence efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df91e617-96d2-494e-be4c-acadeea31c82", "metadata": {"aucs": [0.723276293752772, 0.7067902223655351, 0.6968503176625909, 0.7379607085221316, 0.7112728446389729, 0.7288818218468345, 0.7296789530922216, 0.7134332616837673, 0.7253990168013991, 0.5085245583642966, 0.531329942291587, 0.5011408968925257, 0.5060255372642539, 0.5291805201866326, 0.5507049403255551, 0.5276591778957196, 0.5359934243378364, 0.5294321730948193, 0.13773045538186857, 0.1302018592070754, 0.14426141081540977, 0.12196955283651201, 0.12563255768564685, 0.14372423029401926, 0.12167773541291971, 0.13041855400455682, 0.13336498204072633, 0.10609501688490341, 0.11446244780261072, 0.11369495381526995, 0.12424181060311235, 0.11141257089066825, 0.1174851533268857, 0.12000843440249387, 0.10511546271812933, 0.1159547993872938, 0.8929660110923627, 0.8941818219529424, 0.8757250002531621, 0.8688441352412681, 0.8411839606041717, 0.8467075239100674, 0.9564277731414088, 0.8597316285146108, 0.7322483251242985, 0.35210333944908634, 0.34800698481825654, 0.28987685216197834, 0.3528800090747656, 0.3707253069162032, 0.34310602735767004, 0.3311496362452091, 0.33896375409907054, 0.3499453112940152, 0.6760909707600689, 0.7379222706525269, 0.6711792563634601, 0.698791919925317, 0.6723742652856124, 0.7321030632559807, 0.7143022840907699, 0.7047536320772618, 0.6991241272091375, 0.252909408019508, 0.17385107965290192, 0.19877890222384254, 0.18676222945441034, 0.18192511041257375, 0.18560349613429816, 0.14600325687082294, 0.17437514555205402, 0.17992631860591446, 0.17582593262726443, 0.14218841583859065, 0.14816164338632465, 0.2200165705313869, 0.1976332012288885, 0.2549793033011055, 0.1796428280475535, 0.1990889662136155, 0.1837576789476819, 0.2907447128519284, 0.2818247414031544, 0.285695112245704, 0.27391064628045014, 0.28689523104251324, 0.2943191530330753, 0.313786749498864, 0.32232473685963037, 0.26772565321212416, 0.3807287577750498, 0.40430775789701523, 0.39040433449456236, 0.4247839762376848, 0.3911989025187491, 0.42387417993381116, 0.4516795516918731, 0.4655850985395463, 0.43513553315217013, 0.08278113277954147, 0.11927518007705717, 0.12172252742605538, 0.08380980585375075, 0.14619450014445468, 0.13566135763469755, 0.09386039172559701, 0.08984928159688788, 0.16577588074039484, 0.23949046408214225, 0.24063360480007745, 0.2148160016802333, 0.24324535180436846, 0.24976067431333915, 0.28460993459871675, 0.2319758865978354, 0.23881145743167898, 0.23986513735369785, 0.6042526073405005, 0.6072132138678417, 0.6145234351592841, 0.6069338077235791, 0.6289971816920674, 0.6046360222845432, 0.605766370676037, 0.5985056216185886, 0.6165986262874332, 0.09927414488763064, 0.09786343249291785, 0.1111350257625856, 0.10847135884575787, 0.10156282716012488, 0.10161090295584285, 0.09141688948267734, 0.09631103044355838, 0.10180457742127635, 0.16736905288526882, 0.1536807790556486, 0.15075028735192542, 0.16928519550250243, 0.14565576184484652, 0.1657944017149352, 0.15437448514086827, 0.1423082162005167, 0.1346797883402402, 0.35576447033170455, 0.3565335735910571, 0.3658386394813028, 0.3729740242333658, 0.36945965150344096, 0.38494174087999256, 0.38138787684189224, 0.38557800909024975, 0.3602845989677873, 0.29278259042105315, 0.29377302639208136, 0.2647352759074706, 0.2695722176073062, 0.26294429168530353, 0.2795776210341727, 0.3026411249447909, 0.2962459243911, 0.31857675324272683, 0.19001081001828346, 0.20089052851932654, 0.19561885060902084, 0.20556766791236103, 0.18899618134547025, 0.1880682474947133, 0.19592238085021363, 0.19136881386592397, 0.1881369685225155, 0.1920366950574972, 0.20894334413346594, 0.19865687763757067, 0.1984133255636551, 0.22641372001077054, 0.20556765944553423, 0.18838615049416896, 0.21293923128937142, 0.20324491253160104, 0.6475532563098656, 0.19524524108422636, 0.636378481893793, 0.5025609846040462, 0.19041949642839595, 0.6051550064637894, 0.6301043407837812, 0.571622129238325, 0.5765595357435916, 0.19203467883910663, 0.20099858456951558, 0.5626745930774848, 0.20001658538532607, 0.6042098393363167, 0.680720029006367, 0.20737065087247897, 0.34465174062529036, 0.20477284221064396, 0.17033294490681983, 0.19871497929778825, 0.19776727502619273, 0.1905102762930344, 0.17959103249583241, 0.19355364462118307, 0.17777104718934933, 0.18572454752254108, 0.22197401448948062, 0.07338156451119648, 0.08216186878616605, 0.08747810360311359, 0.07828792184848066, 0.0774781924112049, 0.07678934346791033, 0.07457052138348297, 0.07994857498361618, 0.07403886443858232]}, "mutation_prompt": null}
{"id": "9f17f5c5-1eb9-45f5-bef7-4215b9c53e37", "solution": "import numpy as np\n\nclass AdaptiveHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = max(20 * dim, 10)\n        self.F = 0.8\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n      \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.argsort(fitness)[:self.pop_size//2]\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                self.F = 0.5 + 0.3 * np.sin(np.pi * evals / self.budget)\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Dynamic CR adjustment based on evaluation progress\n                self.CR = 0.9 - 0.8 * (evals / self.budget)\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                if evals % 80 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step_size = (0.02 + 0.98 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step_size * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "AdaptiveHybridDE", "description": "Introducing dynamic crossover probability adjustment to balance exploration and exploitation phases.", "configspace": "", "generation": 69, "fitness": 0.2611187019991438, "feedback": "The algorithm AdaptiveHybridDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.22.", "error": "", "parent_id": "df91e617-96d2-494e-be4c-acadeea31c82", "metadata": {"aucs": [0.6969459276061281, 0.7250180711219809, 0.683152012049181, 0.7032629768459435, 0.7137933222701969, 0.7055938141209321, 0.7000138745111006, 0.7107475095124163, 0.7080924610812251, 0.4639625747148398, 0.46404030607410907, 0.4949257814403494, 0.4775065314880037, 0.46666907945674585, 0.5219437031935356, 0.5122699179959598, 0.492081125357, 0.5189944890195318, 0.15643490308117347, 0.1458958933758533, 0.1508905487713137, 0.16097322116141, 0.14429664982259216, 0.14667327550498066, 0.14460596014954463, 0.1648417066553255, 0.14550569491493004, 0.12768052217531078, 0.1295039923338056, 0.1452045359645323, 0.13261650147527582, 0.12102586904832313, 0.12678380765288855, 0.1422781945892737, 0.1386104321348237, 0.12452198541990744, 0.8968510483240666, 0.9286464581221767, 0.8897860230473573, 0.9280506163780512, 0.9232666605534926, 0.9050956483472137, 0.9222896985647312, 0.9579329327218754, 0.9100181379854884, 0.2813083907319559, 0.28279863606928224, 0.28049843890700565, 0.2740379770982091, 0.26597721307420996, 0.27436497838666274, 0.27888287720884997, 0.2496939522828988, 0.262899117729562, 0.5186483960540368, 0.417205427038852, 0.545658958198043, 0.391389685966095, 0.5574628549310445, 0.5988172869677415, 0.5551487968781346, 0.6191091426545786, 0.6334459782955977, 0.152453725601428, 0.14257157182118152, 0.15284291574129638, 0.14336379645484854, 0.15855656003123042, 0.15429413233018474, 0.16233683396672005, 0.14592125531166145, 0.1472376778398864, 0.16911844399689513, 0.16502975268386422, 0.12503858979419824, 0.13850042717716138, 0.16088091545249994, 0.17979823464388422, 0.16610239357886747, 0.14346919170308015, 0.1672796286608722, 0.05361468358832788, 0.017162101126684814, 0.04446385470068237, 0.036727551932217994, 0.023149041548992666, 0.0006839524922368501, 0.04591922957719308, 0.0321122382174146, 0.005215031955870253, 0.16481640706230505, 0.09886024805678917, 0.14110794343038247, 0.12361215073986054, 0.1474529666796337, 0.13264193667301438, 0.15833470470855082, 0.19281994767057808, 0.17965245884180292, 0.012577883443526061, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007939831355476823, 0.0021212443519034174, 0.004406381908360291, 0.00347778520480424, 0.016642223067440898, 0.12572109366781803, 0.11157489458348757, 0.11701420466657186, 0.12636159864205454, 0.15614857510789448, 0.13649454828748675, 0.11838818270208795, 0.11415160652240974, 0.1055301223804147, 0.4528095294776623, 0.4774674968139013, 0.47287191553163643, 0.459137202756552, 0.4605119422017905, 0.5056420610356025, 0.48484067402019393, 0.4695703387045854, 0.4684131463459087, 0.10385714186445472, 0.1057261875408696, 0.09126855723675231, 0.08628526839632977, 0.08394070968529777, 0.09971123614079425, 0.0936041952844876, 0.09379520398559815, 0.1008471502498276, 0.13806913944551724, 0.1357516114608186, 0.15232238173408919, 0.15234631435358692, 0.16390132737332352, 0.13888253647213, 0.1355710001326168, 0.12967268421332068, 0.13423109752334073, 0.341039583818583, 0.309847302766039, 0.3184628154543053, 0.3225073404752087, 0.3092406476900711, 0.3039356634173851, 0.3551345783860359, 0.3490267426251804, 0.3422377270889849, 0.22829938330735688, 0.2029282823977303, 0.2148591761065649, 0.2042896073710725, 0.21367950133190183, 0.2053561639638658, 0.24421296191551334, 0.2592652680085329, 0.22500550050739088, 0.1937958921434444, 0.21505735778731794, 0.20062599044302032, 0.18529615002592958, 0.19204907275112693, 0.18964233812124043, 0.18880310519771737, 0.18546324309223905, 0.1779139056016933, 0.19729316085433968, 0.20273645071558333, 0.20612801932956903, 0.21392152317140545, 0.2430848232463041, 0.20078482293464184, 0.2104940617342389, 0.19598984761896754, 0.19196402209931673, 0.16579472610794543, 0.18258761585917194, 0.5749598551939233, 0.29595120194094693, 0.22561352754682606, 0.25229539902383935, 0.3026347711936642, 0.23760911229622483, 0.4941005600318572, 0.2231988246337664, 0.16705109265831775, 0.1697720533893785, 0.23994990005724037, 0.1762732045653933, 0.2640201675406695, 0.20722559206642988, 0.20591916421340983, 0.3293715458073663, 0.19712669401184568, 0.18897340418544506, 0.1878651500987435, 0.18495425267719323, 0.1755205350015605, 0.1900245154442599, 0.1861939146049404, 0.18529190637501047, 0.18160306897011347, 0.07312574382535697, 0.07786566255494165, 0.07197955701050285, 0.07652290475856793, 0.08037875605336142, 0.08230096904038242, 0.07500174578142338, 0.07825818326760547, 0.07426909425493144]}, "mutation_prompt": null}
{"id": "0ce6d31d-aa57-44c1-b6ef-02e161a60fca", "solution": "import numpy as np\n\nclass AdaptiveHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = max(20 * dim, 10)\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.argsort(fitness)[:self.pop_size//2]\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                self.F = 0.5 + 0.3 * np.sin(np.pi * evals / self.budget)\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.1 if evals > 0.7 * self.budget else 0.9\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                if evals % 80 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step_size = (0.02 + 0.98 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step_size * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "AdaptiveHybridDE", "description": "Incorporating adaptive population scaling and diversified local search strategies to enhance convergence efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df91e617-96d2-494e-be4c-acadeea31c82", "metadata": {"aucs": [0.723276293752772, 0.7067902223655351, 0.6968503176625909, 0.7379607085221316, 0.7112728446389729, 0.7288818218468345, 0.7296789530922216, 0.7134332616837673, 0.7253990168013991, 0.5085245583642966, 0.531329942291587, 0.5011408968925257, 0.5060255372642539, 0.5291805201866326, 0.5507049403255551, 0.5276591778957196, 0.5359934243378364, 0.5294321730948193, 0.13773045538186857, 0.1302018592070754, 0.14426141081540977, 0.12196955283651201, 0.12563255768564685, 0.14372423029401926, 0.12167773541291971, 0.13041855400455682, 0.13336498204072633, 0.10609501688490341, 0.11446244780261072, 0.11369495381526995, 0.12424181060311235, 0.11141257089066825, 0.1174851533268857, 0.12000843440249387, 0.10511546271812933, 0.1159547993872938, 0.8929660110923627, 0.8941818219529424, 0.8757250002531621, 0.8688441352412681, 0.8411839606041717, 0.8467075239100674, 0.9564277731414088, 0.8597316285146108, 0.7322483251242985, 0.35210333944908634, 0.34800698481825654, 0.28987685216197834, 0.3528800090747656, 0.3707253069162032, 0.34310602735767004, 0.3311496362452091, 0.33896375409907054, 0.3499453112940152, 0.6760909707600689, 0.7379222706525269, 0.6711792563634601, 0.698791919925317, 0.6723742652856124, 0.7321030632559807, 0.7143022840907699, 0.7047536320772618, 0.6991241272091375, 0.252909408019508, 0.17385107965290192, 0.19877890222384254, 0.18676222945441034, 0.18192511041257375, 0.18560349613429816, 0.14600325687082294, 0.17437514555205402, 0.17992631860591446, 0.17582593262726443, 0.14218841583859065, 0.14816164338632465, 0.2200165705313869, 0.1976332012288885, 0.2549793033011055, 0.1796428280475535, 0.1990889662136155, 0.1837576789476819, 0.2907447128519284, 0.2818247414031544, 0.285695112245704, 0.27391064628045014, 0.28689523104251324, 0.2943191530330753, 0.313786749498864, 0.32232473685963037, 0.26772565321212416, 0.3807287577750498, 0.40430775789701523, 0.39040433449456236, 0.4247839762376848, 0.3911989025187491, 0.42387417993381116, 0.4516795516918731, 0.4655850985395463, 0.43513553315217013, 0.08278113277954147, 0.11927518007705717, 0.12172252742605538, 0.08380980585375075, 0.14619450014445468, 0.13566135763469755, 0.09386039172559701, 0.08984928159688788, 0.16577588074039484, 0.23949046408214225, 0.24063360480007745, 0.2148160016802333, 0.24324535180436846, 0.24976067431333915, 0.28460993459871675, 0.2319758865978354, 0.23881145743167898, 0.23986513735369785, 0.6042526073405005, 0.6072132138678417, 0.6145234351592841, 0.6069338077235791, 0.6289971816920674, 0.6046360222845432, 0.605766370676037, 0.5985056216185886, 0.6165986262874332, 0.09927414488763064, 0.09786343249291785, 0.1111350257625856, 0.10847135884575787, 0.10156282716012488, 0.10161090295584285, 0.09141688948267734, 0.09631103044355838, 0.10180457742127635, 0.16736905288526882, 0.1536807790556486, 0.15075028735192542, 0.16928519550250243, 0.14565576184484652, 0.1657944017149352, 0.15437448514086827, 0.1423082162005167, 0.1346797883402402, 0.35576447033170455, 0.3565335735910571, 0.3658386394813028, 0.3729740242333658, 0.36945965150344096, 0.38494174087999256, 0.38138787684189224, 0.38557800909024975, 0.3602845989677873, 0.29278259042105315, 0.29377302639208136, 0.2647352759074706, 0.2695722176073062, 0.26294429168530353, 0.2795776210341727, 0.3026411249447909, 0.2962459243911, 0.31857675324272683, 0.19001081001828346, 0.20089052851932654, 0.19561885060902084, 0.20556766791236103, 0.18899618134547025, 0.1880682474947133, 0.19592238085021363, 0.19136881386592397, 0.1881369685225155, 0.1920366950574972, 0.20894334413346594, 0.19865687763757067, 0.1984133255636551, 0.22641372001077054, 0.20556765944553423, 0.18838615049416896, 0.21293923128937142, 0.20324491253160104, 0.6475532563098656, 0.19524524108422636, 0.636378481893793, 0.5025609846040462, 0.19041949642839595, 0.6051550064637894, 0.6301043407837812, 0.571622129238325, 0.5765595357435916, 0.19203467883910663, 0.20099858456951558, 0.5626745930774848, 0.20001658538532607, 0.6042098393363167, 0.680720029006367, 0.20737065087247897, 0.34465174062529036, 0.20477284221064396, 0.17033294490681983, 0.19871497929778825, 0.19776727502619273, 0.1905102762930344, 0.17959103249583241, 0.19355364462118307, 0.17777104718934933, 0.18572454752254108, 0.22197401448948062, 0.07338156451119648, 0.08216186878616605, 0.08747810360311359, 0.07828792184848066, 0.0774781924112049, 0.07678934346791033, 0.07457052138348297, 0.07994857498361618, 0.07403886443858232]}, "mutation_prompt": null}
{"id": "c615e6ce-e629-4f7c-b8f7-8b21773c0b53", "solution": "import numpy as np\n\nclass AdaptiveHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = max(20 * dim, 10)\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.argsort(fitness)[:self.pop_size//2]\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                self.F = 0.5 + 0.3 * np.sin(np.pi * evals / self.budget)\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.1 if evals > 0.7 * self.budget else 0.9\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                if evals % 80 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step_size = (0.02 + 0.98 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step_size * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "AdaptiveHybridDE", "description": "Incorporating adaptive population scaling and diversified local search strategies to enhance convergence efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df91e617-96d2-494e-be4c-acadeea31c82", "metadata": {"aucs": [0.723276293752772, 0.7067902223655351, 0.6968503176625909, 0.7379607085221316, 0.7112728446389729, 0.7288818218468345, 0.7296789530922216, 0.7134332616837673, 0.7253990168013991, 0.5085245583642966, 0.531329942291587, 0.5011408968925257, 0.5060255372642539, 0.5291805201866326, 0.5507049403255551, 0.5276591778957196, 0.5359934243378364, 0.5294321730948193, 0.13773045538186857, 0.1302018592070754, 0.14426141081540977, 0.12196955283651201, 0.12563255768564685, 0.14372423029401926, 0.12167773541291971, 0.13041855400455682, 0.13336498204072633, 0.10609501688490341, 0.11446244780261072, 0.11369495381526995, 0.12424181060311235, 0.11141257089066825, 0.1174851533268857, 0.12000843440249387, 0.10511546271812933, 0.1159547993872938, 0.8929660110923627, 0.8941818219529424, 0.8757250002531621, 0.8688441352412681, 0.8411839606041717, 0.8467075239100674, 0.9564277731414088, 0.8597316285146108, 0.7322483251242985, 0.35210333944908634, 0.34800698481825654, 0.28987685216197834, 0.3528800090747656, 0.3707253069162032, 0.34310602735767004, 0.3311496362452091, 0.33896375409907054, 0.3499453112940152, 0.6760909707600689, 0.7379222706525269, 0.6711792563634601, 0.698791919925317, 0.6723742652856124, 0.7321030632559807, 0.7143022840907699, 0.7047536320772618, 0.6991241272091375, 0.252909408019508, 0.17385107965290192, 0.19877890222384254, 0.18676222945441034, 0.18192511041257375, 0.18560349613429816, 0.14600325687082294, 0.17437514555205402, 0.17992631860591446, 0.17582593262726443, 0.14218841583859065, 0.14816164338632465, 0.2200165705313869, 0.1976332012288885, 0.2549793033011055, 0.1796428280475535, 0.1990889662136155, 0.1837576789476819, 0.2907447128519284, 0.2818247414031544, 0.285695112245704, 0.27391064628045014, 0.28689523104251324, 0.2943191530330753, 0.313786749498864, 0.32232473685963037, 0.26772565321212416, 0.3807287577750498, 0.40430775789701523, 0.39040433449456236, 0.4247839762376848, 0.3911989025187491, 0.42387417993381116, 0.4516795516918731, 0.4655850985395463, 0.43513553315217013, 0.08278113277954147, 0.11927518007705717, 0.12172252742605538, 0.08380980585375075, 0.14619450014445468, 0.13566135763469755, 0.09386039172559701, 0.08984928159688788, 0.16577588074039484, 0.23949046408214225, 0.24063360480007745, 0.2148160016802333, 0.24324535180436846, 0.24976067431333915, 0.28460993459871675, 0.2319758865978354, 0.23881145743167898, 0.23986513735369785, 0.6042526073405005, 0.6072132138678417, 0.6145234351592841, 0.6069338077235791, 0.6289971816920674, 0.6046360222845432, 0.605766370676037, 0.5985056216185886, 0.6165986262874332, 0.09927414488763064, 0.09786343249291785, 0.1111350257625856, 0.10847135884575787, 0.10156282716012488, 0.10161090295584285, 0.09141688948267734, 0.09631103044355838, 0.10180457742127635, 0.16736905288526882, 0.1536807790556486, 0.15075028735192542, 0.16928519550250243, 0.14565576184484652, 0.1657944017149352, 0.15437448514086827, 0.1423082162005167, 0.1346797883402402, 0.35576447033170455, 0.3565335735910571, 0.3658386394813028, 0.3729740242333658, 0.36945965150344096, 0.38494174087999256, 0.38138787684189224, 0.38557800909024975, 0.3602845989677873, 0.29278259042105315, 0.29377302639208136, 0.2647352759074706, 0.2695722176073062, 0.26294429168530353, 0.2795776210341727, 0.3026411249447909, 0.2962459243911, 0.31857675324272683, 0.19001081001828346, 0.20089052851932654, 0.19561885060902084, 0.20556766791236103, 0.18899618134547025, 0.1880682474947133, 0.19592238085021363, 0.19136881386592397, 0.1881369685225155, 0.1920366950574972, 0.20894334413346594, 0.19865687763757067, 0.1984133255636551, 0.22641372001077054, 0.20556765944553423, 0.18838615049416896, 0.21293923128937142, 0.20324491253160104, 0.6475532563098656, 0.19524524108422636, 0.636378481893793, 0.5025609846040462, 0.19041949642839595, 0.6051550064637894, 0.6301043407837812, 0.571622129238325, 0.5765595357435916, 0.19203467883910663, 0.20099858456951558, 0.5626745930774848, 0.20001658538532607, 0.6042098393363167, 0.680720029006367, 0.20737065087247897, 0.34465174062529036, 0.20477284221064396, 0.17033294490681983, 0.19871497929778825, 0.19776727502619273, 0.1905102762930344, 0.17959103249583241, 0.19355364462118307, 0.17777104718934933, 0.18572454752254108, 0.22197401448948062, 0.07338156451119648, 0.08216186878616605, 0.08747810360311359, 0.07828792184848066, 0.0774781924112049, 0.07678934346791033, 0.07457052138348297, 0.07994857498361618, 0.07403886443858232]}, "mutation_prompt": null}
{"id": "3614c383-5e11-438b-a9f7-de343cc8e85f", "solution": "import numpy as np\n\nclass AdaptiveHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = max(20 * dim, 10)\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.argsort(fitness)[:self.pop_size//2]\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                self.F = 0.5 + 0.3 * np.sin(np.pi * evals / self.budget)\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.1 if evals > 0.7 * self.budget else 0.9\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                if evals % 80 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step_size = (0.02 + 0.98 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step_size * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "AdaptiveHybridDE", "description": "Incorporating adaptive population scaling and diversified local search strategies to enhance convergence efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df91e617-96d2-494e-be4c-acadeea31c82", "metadata": {"aucs": [0.723276293752772, 0.7067902223655351, 0.6968503176625909, 0.7379607085221316, 0.7112728446389729, 0.7288818218468345, 0.7296789530922216, 0.7134332616837673, 0.7253990168013991, 0.5085245583642966, 0.531329942291587, 0.5011408968925257, 0.5060255372642539, 0.5291805201866326, 0.5507049403255551, 0.5276591778957196, 0.5359934243378364, 0.5294321730948193, 0.13773045538186857, 0.1302018592070754, 0.14426141081540977, 0.12196955283651201, 0.12563255768564685, 0.14372423029401926, 0.12167773541291971, 0.13041855400455682, 0.13336498204072633, 0.10609501688490341, 0.11446244780261072, 0.11369495381526995, 0.12424181060311235, 0.11141257089066825, 0.1174851533268857, 0.12000843440249387, 0.10511546271812933, 0.1159547993872938, 0.8929660110923627, 0.8941818219529424, 0.8757250002531621, 0.8688441352412681, 0.8411839606041717, 0.8467075239100674, 0.9564277731414088, 0.8597316285146108, 0.7322483251242985, 0.35210333944908634, 0.34800698481825654, 0.28987685216197834, 0.3528800090747656, 0.3707253069162032, 0.34310602735767004, 0.3311496362452091, 0.33896375409907054, 0.3499453112940152, 0.6760909707600689, 0.7379222706525269, 0.6711792563634601, 0.698791919925317, 0.6723742652856124, 0.7321030632559807, 0.7143022840907699, 0.7047536320772618, 0.6991241272091375, 0.252909408019508, 0.17385107965290192, 0.19877890222384254, 0.18676222945441034, 0.18192511041257375, 0.18560349613429816, 0.14600325687082294, 0.17437514555205402, 0.17992631860591446, 0.17582593262726443, 0.14218841583859065, 0.14816164338632465, 0.2200165705313869, 0.1976332012288885, 0.2549793033011055, 0.1796428280475535, 0.1990889662136155, 0.1837576789476819, 0.2907447128519284, 0.2818247414031544, 0.285695112245704, 0.27391064628045014, 0.28689523104251324, 0.2943191530330753, 0.313786749498864, 0.32232473685963037, 0.26772565321212416, 0.3807287577750498, 0.40430775789701523, 0.39040433449456236, 0.4247839762376848, 0.3911989025187491, 0.42387417993381116, 0.4516795516918731, 0.4655850985395463, 0.43513553315217013, 0.08278113277954147, 0.11927518007705717, 0.12172252742605538, 0.08380980585375075, 0.14619450014445468, 0.13566135763469755, 0.09386039172559701, 0.08984928159688788, 0.16577588074039484, 0.23949046408214225, 0.24063360480007745, 0.2148160016802333, 0.24324535180436846, 0.24976067431333915, 0.28460993459871675, 0.2319758865978354, 0.23881145743167898, 0.23986513735369785, 0.6042526073405005, 0.6072132138678417, 0.6145234351592841, 0.6069338077235791, 0.6289971816920674, 0.6046360222845432, 0.605766370676037, 0.5985056216185886, 0.6165986262874332, 0.09927414488763064, 0.09786343249291785, 0.1111350257625856, 0.10847135884575787, 0.10156282716012488, 0.10161090295584285, 0.09141688948267734, 0.09631103044355838, 0.10180457742127635, 0.16736905288526882, 0.1536807790556486, 0.15075028735192542, 0.16928519550250243, 0.14565576184484652, 0.1657944017149352, 0.15437448514086827, 0.1423082162005167, 0.1346797883402402, 0.35576447033170455, 0.3565335735910571, 0.3658386394813028, 0.3729740242333658, 0.36945965150344096, 0.38494174087999256, 0.38138787684189224, 0.38557800909024975, 0.3602845989677873, 0.29278259042105315, 0.29377302639208136, 0.2647352759074706, 0.2695722176073062, 0.26294429168530353, 0.2795776210341727, 0.3026411249447909, 0.2962459243911, 0.31857675324272683, 0.19001081001828346, 0.20089052851932654, 0.19561885060902084, 0.20556766791236103, 0.18899618134547025, 0.1880682474947133, 0.19592238085021363, 0.19136881386592397, 0.1881369685225155, 0.1920366950574972, 0.20894334413346594, 0.19865687763757067, 0.1984133255636551, 0.22641372001077054, 0.20556765944553423, 0.18838615049416896, 0.21293923128937142, 0.20324491253160104, 0.6475532563098656, 0.19524524108422636, 0.636378481893793, 0.5025609846040462, 0.19041949642839595, 0.6051550064637894, 0.6301043407837812, 0.571622129238325, 0.5765595357435916, 0.19203467883910663, 0.20099858456951558, 0.5626745930774848, 0.20001658538532607, 0.6042098393363167, 0.680720029006367, 0.20737065087247897, 0.34465174062529036, 0.20477284221064396, 0.17033294490681983, 0.19871497929778825, 0.19776727502619273, 0.1905102762930344, 0.17959103249583241, 0.19355364462118307, 0.17777104718934933, 0.18572454752254108, 0.22197401448948062, 0.07338156451119648, 0.08216186878616605, 0.08747810360311359, 0.07828792184848066, 0.0774781924112049, 0.07678934346791033, 0.07457052138348297, 0.07994857498361618, 0.07403886443858232]}, "mutation_prompt": null}
{"id": "825097a3-c304-4db9-b80b-ad6f64c6a9be", "solution": "import numpy as np\n\nclass AdaptiveHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = max(20 * dim, 10)\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.argsort(fitness)[:self.pop_size//2]\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                self.F = 0.5 + 0.3 * np.sin(np.pi * evals / self.budget)\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.1 if evals > 0.7 * self.budget else 0.9\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                if evals % 80 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step_size = (0.02 + 0.98 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step_size * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "AdaptiveHybridDE", "description": "Incorporating adaptive population scaling and diversified local search strategies to enhance convergence efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df91e617-96d2-494e-be4c-acadeea31c82", "metadata": {"aucs": [0.723276293752772, 0.7067902223655351, 0.6968503176625909, 0.7379607085221316, 0.7112728446389729, 0.7288818218468345, 0.7296789530922216, 0.7134332616837673, 0.7253990168013991, 0.5085245583642966, 0.531329942291587, 0.5011408968925257, 0.5060255372642539, 0.5291805201866326, 0.5507049403255551, 0.5276591778957196, 0.5359934243378364, 0.5294321730948193, 0.13773045538186857, 0.1302018592070754, 0.14426141081540977, 0.12196955283651201, 0.12563255768564685, 0.14372423029401926, 0.12167773541291971, 0.13041855400455682, 0.13336498204072633, 0.10609501688490341, 0.11446244780261072, 0.11369495381526995, 0.12424181060311235, 0.11141257089066825, 0.1174851533268857, 0.12000843440249387, 0.10511546271812933, 0.1159547993872938, 0.8929660110923627, 0.8941818219529424, 0.8757250002531621, 0.8688441352412681, 0.8411839606041717, 0.8467075239100674, 0.9564277731414088, 0.8597316285146108, 0.7322483251242985, 0.35210333944908634, 0.34800698481825654, 0.28987685216197834, 0.3528800090747656, 0.3707253069162032, 0.34310602735767004, 0.3311496362452091, 0.33896375409907054, 0.3499453112940152, 0.6760909707600689, 0.7379222706525269, 0.6711792563634601, 0.698791919925317, 0.6723742652856124, 0.7321030632559807, 0.7143022840907699, 0.7047536320772618, 0.6991241272091375, 0.252909408019508, 0.17385107965290192, 0.19877890222384254, 0.18676222945441034, 0.18192511041257375, 0.18560349613429816, 0.14600325687082294, 0.17437514555205402, 0.17992631860591446, 0.17582593262726443, 0.14218841583859065, 0.14816164338632465, 0.2200165705313869, 0.1976332012288885, 0.2549793033011055, 0.1796428280475535, 0.1990889662136155, 0.1837576789476819, 0.2907447128519284, 0.2818247414031544, 0.285695112245704, 0.27391064628045014, 0.28689523104251324, 0.2943191530330753, 0.313786749498864, 0.32232473685963037, 0.26772565321212416, 0.3807287577750498, 0.40430775789701523, 0.39040433449456236, 0.4247839762376848, 0.3911989025187491, 0.42387417993381116, 0.4516795516918731, 0.4655850985395463, 0.43513553315217013, 0.08278113277954147, 0.11927518007705717, 0.12172252742605538, 0.08380980585375075, 0.14619450014445468, 0.13566135763469755, 0.09386039172559701, 0.08984928159688788, 0.16577588074039484, 0.23949046408214225, 0.24063360480007745, 0.2148160016802333, 0.24324535180436846, 0.24976067431333915, 0.28460993459871675, 0.2319758865978354, 0.23881145743167898, 0.23986513735369785, 0.6042526073405005, 0.6072132138678417, 0.6145234351592841, 0.6069338077235791, 0.6289971816920674, 0.6046360222845432, 0.605766370676037, 0.5985056216185886, 0.6165986262874332, 0.09927414488763064, 0.09786343249291785, 0.1111350257625856, 0.10847135884575787, 0.10156282716012488, 0.10161090295584285, 0.09141688948267734, 0.09631103044355838, 0.10180457742127635, 0.16736905288526882, 0.1536807790556486, 0.15075028735192542, 0.16928519550250243, 0.14565576184484652, 0.1657944017149352, 0.15437448514086827, 0.1423082162005167, 0.1346797883402402, 0.35576447033170455, 0.3565335735910571, 0.3658386394813028, 0.3729740242333658, 0.36945965150344096, 0.38494174087999256, 0.38138787684189224, 0.38557800909024975, 0.3602845989677873, 0.29278259042105315, 0.29377302639208136, 0.2647352759074706, 0.2695722176073062, 0.26294429168530353, 0.2795776210341727, 0.3026411249447909, 0.2962459243911, 0.31857675324272683, 0.19001081001828346, 0.20089052851932654, 0.19561885060902084, 0.20556766791236103, 0.18899618134547025, 0.1880682474947133, 0.19592238085021363, 0.19136881386592397, 0.1881369685225155, 0.1920366950574972, 0.20894334413346594, 0.19865687763757067, 0.1984133255636551, 0.22641372001077054, 0.20556765944553423, 0.18838615049416896, 0.21293923128937142, 0.20324491253160104, 0.6475532563098656, 0.19524524108422636, 0.636378481893793, 0.5025609846040462, 0.19041949642839595, 0.6051550064637894, 0.6301043407837812, 0.571622129238325, 0.5765595357435916, 0.19203467883910663, 0.20099858456951558, 0.5626745930774848, 0.20001658538532607, 0.6042098393363167, 0.680720029006367, 0.20737065087247897, 0.34465174062529036, 0.20477284221064396, 0.17033294490681983, 0.19871497929778825, 0.19776727502619273, 0.1905102762930344, 0.17959103249583241, 0.19355364462118307, 0.17777104718934933, 0.18572454752254108, 0.22197401448948062, 0.07338156451119648, 0.08216186878616605, 0.08747810360311359, 0.07828792184848066, 0.0774781924112049, 0.07678934346791033, 0.07457052138348297, 0.07994857498361618, 0.07403886443858232]}, "mutation_prompt": null}
{"id": "05e65fcb-b678-4c7a-b4db-5763741168e3", "solution": "import numpy as np\n\nclass AdaptiveHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = max(20 * dim, 10)\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.argsort(fitness)[:self.pop_size//2]\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                self.F = 0.5 + 0.3 * np.sin(np.pi * evals / self.budget)\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.1 if evals > 0.7 * self.budget else 0.9\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                if evals % 80 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step_size = (0.02 + 0.98 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step_size * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "AdaptiveHybridDE", "description": "Incorporating adaptive population scaling and diversified local search strategies to enhance convergence efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df91e617-96d2-494e-be4c-acadeea31c82", "metadata": {"aucs": [0.723276293752772, 0.7067902223655351, 0.6968503176625909, 0.7379607085221316, 0.7112728446389729, 0.7288818218468345, 0.7296789530922216, 0.7134332616837673, 0.7253990168013991, 0.5085245583642966, 0.531329942291587, 0.5011408968925257, 0.5060255372642539, 0.5291805201866326, 0.5507049403255551, 0.5276591778957196, 0.5359934243378364, 0.5294321730948193, 0.13773045538186857, 0.1302018592070754, 0.14426141081540977, 0.12196955283651201, 0.12563255768564685, 0.14372423029401926, 0.12167773541291971, 0.13041855400455682, 0.13336498204072633, 0.10609501688490341, 0.11446244780261072, 0.11369495381526995, 0.12424181060311235, 0.11141257089066825, 0.1174851533268857, 0.12000843440249387, 0.10511546271812933, 0.1159547993872938, 0.8929660110923627, 0.8941818219529424, 0.8757250002531621, 0.8688441352412681, 0.8411839606041717, 0.8467075239100674, 0.9564277731414088, 0.8597316285146108, 0.7322483251242985, 0.35210333944908634, 0.34800698481825654, 0.28987685216197834, 0.3528800090747656, 0.3707253069162032, 0.34310602735767004, 0.3311496362452091, 0.33896375409907054, 0.3499453112940152, 0.6760909707600689, 0.7379222706525269, 0.6711792563634601, 0.698791919925317, 0.6723742652856124, 0.7321030632559807, 0.7143022840907699, 0.7047536320772618, 0.6991241272091375, 0.252909408019508, 0.17385107965290192, 0.19877890222384254, 0.18676222945441034, 0.18192511041257375, 0.18560349613429816, 0.14600325687082294, 0.17437514555205402, 0.17992631860591446, 0.17582593262726443, 0.14218841583859065, 0.14816164338632465, 0.2200165705313869, 0.1976332012288885, 0.2549793033011055, 0.1796428280475535, 0.1990889662136155, 0.1837576789476819, 0.2907447128519284, 0.2818247414031544, 0.285695112245704, 0.27391064628045014, 0.28689523104251324, 0.2943191530330753, 0.313786749498864, 0.32232473685963037, 0.26772565321212416, 0.3807287577750498, 0.40430775789701523, 0.39040433449456236, 0.4247839762376848, 0.3911989025187491, 0.42387417993381116, 0.4516795516918731, 0.4655850985395463, 0.43513553315217013, 0.08278113277954147, 0.11927518007705717, 0.12172252742605538, 0.08380980585375075, 0.14619450014445468, 0.13566135763469755, 0.09386039172559701, 0.08984928159688788, 0.16577588074039484, 0.23949046408214225, 0.24063360480007745, 0.2148160016802333, 0.24324535180436846, 0.24976067431333915, 0.28460993459871675, 0.2319758865978354, 0.23881145743167898, 0.23986513735369785, 0.6042526073405005, 0.6072132138678417, 0.6145234351592841, 0.6069338077235791, 0.6289971816920674, 0.6046360222845432, 0.605766370676037, 0.5985056216185886, 0.6165986262874332, 0.09927414488763064, 0.09786343249291785, 0.1111350257625856, 0.10847135884575787, 0.10156282716012488, 0.10161090295584285, 0.09141688948267734, 0.09631103044355838, 0.10180457742127635, 0.16736905288526882, 0.1536807790556486, 0.15075028735192542, 0.16928519550250243, 0.14565576184484652, 0.1657944017149352, 0.15437448514086827, 0.1423082162005167, 0.1346797883402402, 0.35576447033170455, 0.3565335735910571, 0.3658386394813028, 0.3729740242333658, 0.36945965150344096, 0.38494174087999256, 0.38138787684189224, 0.38557800909024975, 0.3602845989677873, 0.29278259042105315, 0.29377302639208136, 0.2647352759074706, 0.2695722176073062, 0.26294429168530353, 0.2795776210341727, 0.3026411249447909, 0.2962459243911, 0.31857675324272683, 0.19001081001828346, 0.20089052851932654, 0.19561885060902084, 0.20556766791236103, 0.18899618134547025, 0.1880682474947133, 0.19592238085021363, 0.19136881386592397, 0.1881369685225155, 0.1920366950574972, 0.20894334413346594, 0.19865687763757067, 0.1984133255636551, 0.22641372001077054, 0.20556765944553423, 0.18838615049416896, 0.21293923128937142, 0.20324491253160104, 0.6475532563098656, 0.19524524108422636, 0.636378481893793, 0.5025609846040462, 0.19041949642839595, 0.6051550064637894, 0.6301043407837812, 0.571622129238325, 0.5765595357435916, 0.19203467883910663, 0.20099858456951558, 0.5626745930774848, 0.20001658538532607, 0.6042098393363167, 0.680720029006367, 0.20737065087247897, 0.34465174062529036, 0.20477284221064396, 0.17033294490681983, 0.19871497929778825, 0.19776727502619273, 0.1905102762930344, 0.17959103249583241, 0.19355364462118307, 0.17777104718934933, 0.18572454752254108, 0.22197401448948062, 0.07338156451119648, 0.08216186878616605, 0.08747810360311359, 0.07828792184848066, 0.0774781924112049, 0.07678934346791033, 0.07457052138348297, 0.07994857498361618, 0.07403886443858232]}, "mutation_prompt": null}
{"id": "708dc9f0-88fd-4705-8cda-3e4290eace16", "solution": "import numpy as np\n\nclass AdaptiveHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = max(20 * dim, 10)\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.argsort(fitness)[:self.pop_size//2]\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                self.F = 0.5 + 0.3 * np.sin(np.pi * evals / self.budget)\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.1 if evals > 0.7 * self.budget else 0.9\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                if evals % 80 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step_size = (0.02 + 0.98 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step_size * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "AdaptiveHybridDE", "description": "Incorporating adaptive population scaling and diversified local search strategies to enhance convergence efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df91e617-96d2-494e-be4c-acadeea31c82", "metadata": {"aucs": [0.723276293752772, 0.7067902223655351, 0.6968503176625909, 0.7379607085221316, 0.7112728446389729, 0.7288818218468345, 0.7296789530922216, 0.7134332616837673, 0.7253990168013991, 0.5085245583642966, 0.531329942291587, 0.5011408968925257, 0.5060255372642539, 0.5291805201866326, 0.5507049403255551, 0.5276591778957196, 0.5359934243378364, 0.5294321730948193, 0.13773045538186857, 0.1302018592070754, 0.14426141081540977, 0.12196955283651201, 0.12563255768564685, 0.14372423029401926, 0.12167773541291971, 0.13041855400455682, 0.13336498204072633, 0.10609501688490341, 0.11446244780261072, 0.11369495381526995, 0.12424181060311235, 0.11141257089066825, 0.1174851533268857, 0.12000843440249387, 0.10511546271812933, 0.1159547993872938, 0.8929660110923627, 0.8941818219529424, 0.8757250002531621, 0.8688441352412681, 0.8411839606041717, 0.8467075239100674, 0.9564277731414088, 0.8597316285146108, 0.7322483251242985, 0.35210333944908634, 0.34800698481825654, 0.28987685216197834, 0.3528800090747656, 0.3707253069162032, 0.34310602735767004, 0.3311496362452091, 0.33896375409907054, 0.3499453112940152, 0.6760909707600689, 0.7379222706525269, 0.6711792563634601, 0.698791919925317, 0.6723742652856124, 0.7321030632559807, 0.7143022840907699, 0.7047536320772618, 0.6991241272091375, 0.252909408019508, 0.17385107965290192, 0.19877890222384254, 0.18676222945441034, 0.18192511041257375, 0.18560349613429816, 0.14600325687082294, 0.17437514555205402, 0.17992631860591446, 0.17582593262726443, 0.14218841583859065, 0.14816164338632465, 0.2200165705313869, 0.1976332012288885, 0.2549793033011055, 0.1796428280475535, 0.1990889662136155, 0.1837576789476819, 0.2907447128519284, 0.2818247414031544, 0.285695112245704, 0.27391064628045014, 0.28689523104251324, 0.2943191530330753, 0.313786749498864, 0.32232473685963037, 0.26772565321212416, 0.3807287577750498, 0.40430775789701523, 0.39040433449456236, 0.4247839762376848, 0.3911989025187491, 0.42387417993381116, 0.4516795516918731, 0.4655850985395463, 0.43513553315217013, 0.08278113277954147, 0.11927518007705717, 0.12172252742605538, 0.08380980585375075, 0.14619450014445468, 0.13566135763469755, 0.09386039172559701, 0.08984928159688788, 0.16577588074039484, 0.23949046408214225, 0.24063360480007745, 0.2148160016802333, 0.24324535180436846, 0.24976067431333915, 0.28460993459871675, 0.2319758865978354, 0.23881145743167898, 0.23986513735369785, 0.6042526073405005, 0.6072132138678417, 0.6145234351592841, 0.6069338077235791, 0.6289971816920674, 0.6046360222845432, 0.605766370676037, 0.5985056216185886, 0.6165986262874332, 0.09927414488763064, 0.09786343249291785, 0.1111350257625856, 0.10847135884575787, 0.10156282716012488, 0.10161090295584285, 0.09141688948267734, 0.09631103044355838, 0.10180457742127635, 0.16736905288526882, 0.1536807790556486, 0.15075028735192542, 0.16928519550250243, 0.14565576184484652, 0.1657944017149352, 0.15437448514086827, 0.1423082162005167, 0.1346797883402402, 0.35576447033170455, 0.3565335735910571, 0.3658386394813028, 0.3729740242333658, 0.36945965150344096, 0.38494174087999256, 0.38138787684189224, 0.38557800909024975, 0.3602845989677873, 0.29278259042105315, 0.29377302639208136, 0.2647352759074706, 0.2695722176073062, 0.26294429168530353, 0.2795776210341727, 0.3026411249447909, 0.2962459243911, 0.31857675324272683, 0.19001081001828346, 0.20089052851932654, 0.19561885060902084, 0.20556766791236103, 0.18899618134547025, 0.1880682474947133, 0.19592238085021363, 0.19136881386592397, 0.1881369685225155, 0.1920366950574972, 0.20894334413346594, 0.19865687763757067, 0.1984133255636551, 0.22641372001077054, 0.20556765944553423, 0.18838615049416896, 0.21293923128937142, 0.20324491253160104, 0.6475532563098656, 0.19524524108422636, 0.636378481893793, 0.5025609846040462, 0.19041949642839595, 0.6051550064637894, 0.6301043407837812, 0.571622129238325, 0.5765595357435916, 0.19203467883910663, 0.20099858456951558, 0.5626745930774848, 0.20001658538532607, 0.6042098393363167, 0.680720029006367, 0.20737065087247897, 0.34465174062529036, 0.20477284221064396, 0.17033294490681983, 0.19871497929778825, 0.19776727502619273, 0.1905102762930344, 0.17959103249583241, 0.19355364462118307, 0.17777104718934933, 0.18572454752254108, 0.22197401448948062, 0.07338156451119648, 0.08216186878616605, 0.08747810360311359, 0.07828792184848066, 0.0774781924112049, 0.07678934346791033, 0.07457052138348297, 0.07994857498361618, 0.07403886443858232]}, "mutation_prompt": null}
{"id": "c8e12d04-df15-4a92-85e7-2c45cd6bfa3c", "solution": "import numpy as np\n\nclass AdaptiveHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = max(20 * dim, 10)\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.argsort(fitness)[:self.pop_size//2]\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                self.F = 0.5 + 0.3 * np.sin(np.pi * evals / self.budget)\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.1 if evals > 0.7 * self.budget else 0.9\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                if evals % 80 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step_size = (0.02 + 0.98 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step_size * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "AdaptiveHybridDE", "description": "Incorporating adaptive population scaling and diversified local search strategies to enhance convergence efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df91e617-96d2-494e-be4c-acadeea31c82", "metadata": {"aucs": [0.723276293752772, 0.7067902223655351, 0.6968503176625909, 0.7379607085221316, 0.7112728446389729, 0.7288818218468345, 0.7296789530922216, 0.7134332616837673, 0.7253990168013991, 0.5085245583642966, 0.531329942291587, 0.5011408968925257, 0.5060255372642539, 0.5291805201866326, 0.5507049403255551, 0.5276591778957196, 0.5359934243378364, 0.5294321730948193, 0.13773045538186857, 0.1302018592070754, 0.14426141081540977, 0.12196955283651201, 0.12563255768564685, 0.14372423029401926, 0.12167773541291971, 0.13041855400455682, 0.13336498204072633, 0.10609501688490341, 0.11446244780261072, 0.11369495381526995, 0.12424181060311235, 0.11141257089066825, 0.1174851533268857, 0.12000843440249387, 0.10511546271812933, 0.1159547993872938, 0.8929660110923627, 0.8941818219529424, 0.8757250002531621, 0.8688441352412681, 0.8411839606041717, 0.8467075239100674, 0.9564277731414088, 0.8597316285146108, 0.7322483251242985, 0.35210333944908634, 0.34800698481825654, 0.28987685216197834, 0.3528800090747656, 0.3707253069162032, 0.34310602735767004, 0.3311496362452091, 0.33896375409907054, 0.3499453112940152, 0.6760909707600689, 0.7379222706525269, 0.6711792563634601, 0.698791919925317, 0.6723742652856124, 0.7321030632559807, 0.7143022840907699, 0.7047536320772618, 0.6991241272091375, 0.252909408019508, 0.17385107965290192, 0.19877890222384254, 0.18676222945441034, 0.18192511041257375, 0.18560349613429816, 0.14600325687082294, 0.17437514555205402, 0.17992631860591446, 0.17582593262726443, 0.14218841583859065, 0.14816164338632465, 0.2200165705313869, 0.1976332012288885, 0.2549793033011055, 0.1796428280475535, 0.1990889662136155, 0.1837576789476819, 0.2907447128519284, 0.2818247414031544, 0.285695112245704, 0.27391064628045014, 0.28689523104251324, 0.2943191530330753, 0.313786749498864, 0.32232473685963037, 0.26772565321212416, 0.3807287577750498, 0.40430775789701523, 0.39040433449456236, 0.4247839762376848, 0.3911989025187491, 0.42387417993381116, 0.4516795516918731, 0.4655850985395463, 0.43513553315217013, 0.08278113277954147, 0.11927518007705717, 0.12172252742605538, 0.08380980585375075, 0.14619450014445468, 0.13566135763469755, 0.09386039172559701, 0.08984928159688788, 0.16577588074039484, 0.23949046408214225, 0.24063360480007745, 0.2148160016802333, 0.24324535180436846, 0.24976067431333915, 0.28460993459871675, 0.2319758865978354, 0.23881145743167898, 0.23986513735369785, 0.6042526073405005, 0.6072132138678417, 0.6145234351592841, 0.6069338077235791, 0.6289971816920674, 0.6046360222845432, 0.605766370676037, 0.5985056216185886, 0.6165986262874332, 0.09927414488763064, 0.09786343249291785, 0.1111350257625856, 0.10847135884575787, 0.10156282716012488, 0.10161090295584285, 0.09141688948267734, 0.09631103044355838, 0.10180457742127635, 0.16736905288526882, 0.1536807790556486, 0.15075028735192542, 0.16928519550250243, 0.14565576184484652, 0.1657944017149352, 0.15437448514086827, 0.1423082162005167, 0.1346797883402402, 0.35576447033170455, 0.3565335735910571, 0.3658386394813028, 0.3729740242333658, 0.36945965150344096, 0.38494174087999256, 0.38138787684189224, 0.38557800909024975, 0.3602845989677873, 0.29278259042105315, 0.29377302639208136, 0.2647352759074706, 0.2695722176073062, 0.26294429168530353, 0.2795776210341727, 0.3026411249447909, 0.2962459243911, 0.31857675324272683, 0.19001081001828346, 0.20089052851932654, 0.19561885060902084, 0.20556766791236103, 0.18899618134547025, 0.1880682474947133, 0.19592238085021363, 0.19136881386592397, 0.1881369685225155, 0.1920366950574972, 0.20894334413346594, 0.19865687763757067, 0.1984133255636551, 0.22641372001077054, 0.20556765944553423, 0.18838615049416896, 0.21293923128937142, 0.20324491253160104, 0.6475532563098656, 0.19524524108422636, 0.636378481893793, 0.5025609846040462, 0.19041949642839595, 0.6051550064637894, 0.6301043407837812, 0.571622129238325, 0.5765595357435916, 0.19203467883910663, 0.20099858456951558, 0.5626745930774848, 0.20001658538532607, 0.6042098393363167, 0.680720029006367, 0.20737065087247897, 0.34465174062529036, 0.20477284221064396, 0.17033294490681983, 0.19871497929778825, 0.19776727502619273, 0.1905102762930344, 0.17959103249583241, 0.19355364462118307, 0.17777104718934933, 0.18572454752254108, 0.22197401448948062, 0.07338156451119648, 0.08216186878616605, 0.08747810360311359, 0.07828792184848066, 0.0774781924112049, 0.07678934346791033, 0.07457052138348297, 0.07994857498361618, 0.07403886443858232]}, "mutation_prompt": null}
{"id": "0eb35ac2-34e4-4195-a633-d604260d5285", "solution": "import numpy as np\n\nclass AdaptiveHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = max(20 * dim, 10)\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.argsort(fitness)[:self.pop_size//2]\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                self.F = 0.5 + 0.3 * np.sin(np.pi * evals / self.budget)\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.1 if evals > 0.7 * self.budget else 0.9\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                if evals % 80 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step_size = (0.02 + 0.98 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step_size * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "AdaptiveHybridDE", "description": "Incorporating adaptive population scaling and diversified local search strategies to enhance convergence efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df91e617-96d2-494e-be4c-acadeea31c82", "metadata": {"aucs": [0.723276293752772, 0.7067902223655351, 0.6968503176625909, 0.7379607085221316, 0.7112728446389729, 0.7288818218468345, 0.7296789530922216, 0.7134332616837673, 0.7253990168013991, 0.5085245583642966, 0.531329942291587, 0.5011408968925257, 0.5060255372642539, 0.5291805201866326, 0.5507049403255551, 0.5276591778957196, 0.5359934243378364, 0.5294321730948193, 0.13773045538186857, 0.1302018592070754, 0.14426141081540977, 0.12196955283651201, 0.12563255768564685, 0.14372423029401926, 0.12167773541291971, 0.13041855400455682, 0.13336498204072633, 0.10609501688490341, 0.11446244780261072, 0.11369495381526995, 0.12424181060311235, 0.11141257089066825, 0.1174851533268857, 0.12000843440249387, 0.10511546271812933, 0.1159547993872938, 0.8929660110923627, 0.8941818219529424, 0.8757250002531621, 0.8688441352412681, 0.8411839606041717, 0.8467075239100674, 0.9564277731414088, 0.8597316285146108, 0.7322483251242985, 0.35210333944908634, 0.34800698481825654, 0.28987685216197834, 0.3528800090747656, 0.3707253069162032, 0.34310602735767004, 0.3311496362452091, 0.33896375409907054, 0.3499453112940152, 0.6760909707600689, 0.7379222706525269, 0.6711792563634601, 0.698791919925317, 0.6723742652856124, 0.7321030632559807, 0.7143022840907699, 0.7047536320772618, 0.6991241272091375, 0.252909408019508, 0.17385107965290192, 0.19877890222384254, 0.18676222945441034, 0.18192511041257375, 0.18560349613429816, 0.14600325687082294, 0.17437514555205402, 0.17992631860591446, 0.17582593262726443, 0.14218841583859065, 0.14816164338632465, 0.2200165705313869, 0.1976332012288885, 0.2549793033011055, 0.1796428280475535, 0.1990889662136155, 0.1837576789476819, 0.2907447128519284, 0.2818247414031544, 0.285695112245704, 0.27391064628045014, 0.28689523104251324, 0.2943191530330753, 0.313786749498864, 0.32232473685963037, 0.26772565321212416, 0.3807287577750498, 0.40430775789701523, 0.39040433449456236, 0.4247839762376848, 0.3911989025187491, 0.42387417993381116, 0.4516795516918731, 0.4655850985395463, 0.43513553315217013, 0.08278113277954147, 0.11927518007705717, 0.12172252742605538, 0.08380980585375075, 0.14619450014445468, 0.13566135763469755, 0.09386039172559701, 0.08984928159688788, 0.16577588074039484, 0.23949046408214225, 0.24063360480007745, 0.2148160016802333, 0.24324535180436846, 0.24976067431333915, 0.28460993459871675, 0.2319758865978354, 0.23881145743167898, 0.23986513735369785, 0.6042526073405005, 0.6072132138678417, 0.6145234351592841, 0.6069338077235791, 0.6289971816920674, 0.6046360222845432, 0.605766370676037, 0.5985056216185886, 0.6165986262874332, 0.09927414488763064, 0.09786343249291785, 0.1111350257625856, 0.10847135884575787, 0.10156282716012488, 0.10161090295584285, 0.09141688948267734, 0.09631103044355838, 0.10180457742127635, 0.16736905288526882, 0.1536807790556486, 0.15075028735192542, 0.16928519550250243, 0.14565576184484652, 0.1657944017149352, 0.15437448514086827, 0.1423082162005167, 0.1346797883402402, 0.35576447033170455, 0.3565335735910571, 0.3658386394813028, 0.3729740242333658, 0.36945965150344096, 0.38494174087999256, 0.38138787684189224, 0.38557800909024975, 0.3602845989677873, 0.29278259042105315, 0.29377302639208136, 0.2647352759074706, 0.2695722176073062, 0.26294429168530353, 0.2795776210341727, 0.3026411249447909, 0.2962459243911, 0.31857675324272683, 0.19001081001828346, 0.20089052851932654, 0.19561885060902084, 0.20556766791236103, 0.18899618134547025, 0.1880682474947133, 0.19592238085021363, 0.19136881386592397, 0.1881369685225155, 0.1920366950574972, 0.20894334413346594, 0.19865687763757067, 0.1984133255636551, 0.22641372001077054, 0.20556765944553423, 0.18838615049416896, 0.21293923128937142, 0.20324491253160104, 0.6475532563098656, 0.19524524108422636, 0.636378481893793, 0.5025609846040462, 0.19041949642839595, 0.6051550064637894, 0.6301043407837812, 0.571622129238325, 0.5765595357435916, 0.19203467883910663, 0.20099858456951558, 0.5626745930774848, 0.20001658538532607, 0.6042098393363167, 0.680720029006367, 0.20737065087247897, 0.34465174062529036, 0.20477284221064396, 0.17033294490681983, 0.19871497929778825, 0.19776727502619273, 0.1905102762930344, 0.17959103249583241, 0.19355364462118307, 0.17777104718934933, 0.18572454752254108, 0.22197401448948062, 0.07338156451119648, 0.08216186878616605, 0.08747810360311359, 0.07828792184848066, 0.0774781924112049, 0.07678934346791033, 0.07457052138348297, 0.07994857498361618, 0.07403886443858232]}, "mutation_prompt": null}
{"id": "730379a6-172d-4558-bde6-d6d85dc3a957", "solution": "import numpy as np\n\nclass AdaptiveHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = max(20 * dim, 10)\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.argsort(fitness)[:self.pop_size//2]\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                self.F = 0.5 + 0.3 * np.sin(np.pi * evals / self.budget)\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.1 if evals > 0.7 * self.budget else 0.9\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                if evals % 80 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step_size = (0.02 + 0.98 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step_size * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "AdaptiveHybridDE", "description": "Incorporating adaptive population scaling and diversified local search strategies to enhance convergence efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df91e617-96d2-494e-be4c-acadeea31c82", "metadata": {"aucs": [0.723276293752772, 0.7067902223655351, 0.6968503176625909, 0.7379607085221316, 0.7112728446389729, 0.7288818218468345, 0.7296789530922216, 0.7134332616837673, 0.7253990168013991, 0.5085245583642966, 0.531329942291587, 0.5011408968925257, 0.5060255372642539, 0.5291805201866326, 0.5507049403255551, 0.5276591778957196, 0.5359934243378364, 0.5294321730948193, 0.13773045538186857, 0.1302018592070754, 0.14426141081540977, 0.12196955283651201, 0.12563255768564685, 0.14372423029401926, 0.12167773541291971, 0.13041855400455682, 0.13336498204072633, 0.10609501688490341, 0.11446244780261072, 0.11369495381526995, 0.12424181060311235, 0.11141257089066825, 0.1174851533268857, 0.12000843440249387, 0.10511546271812933, 0.1159547993872938, 0.8929660110923627, 0.8941818219529424, 0.8757250002531621, 0.8688441352412681, 0.8411839606041717, 0.8467075239100674, 0.9564277731414088, 0.8597316285146108, 0.7322483251242985, 0.35210333944908634, 0.34800698481825654, 0.28987685216197834, 0.3528800090747656, 0.3707253069162032, 0.34310602735767004, 0.3311496362452091, 0.33896375409907054, 0.3499453112940152, 0.6760909707600689, 0.7379222706525269, 0.6711792563634601, 0.698791919925317, 0.6723742652856124, 0.7321030632559807, 0.7143022840907699, 0.7047536320772618, 0.6991241272091375, 0.252909408019508, 0.17385107965290192, 0.19877890222384254, 0.18676222945441034, 0.18192511041257375, 0.18560349613429816, 0.14600325687082294, 0.17437514555205402, 0.17992631860591446, 0.17582593262726443, 0.14218841583859065, 0.14816164338632465, 0.2200165705313869, 0.1976332012288885, 0.2549793033011055, 0.1796428280475535, 0.1990889662136155, 0.1837576789476819, 0.2907447128519284, 0.2818247414031544, 0.285695112245704, 0.27391064628045014, 0.28689523104251324, 0.2943191530330753, 0.313786749498864, 0.32232473685963037, 0.26772565321212416, 0.3807287577750498, 0.40430775789701523, 0.39040433449456236, 0.4247839762376848, 0.3911989025187491, 0.42387417993381116, 0.4516795516918731, 0.4655850985395463, 0.43513553315217013, 0.08278113277954147, 0.11927518007705717, 0.12172252742605538, 0.08380980585375075, 0.14619450014445468, 0.13566135763469755, 0.09386039172559701, 0.08984928159688788, 0.16577588074039484, 0.23949046408214225, 0.24063360480007745, 0.2148160016802333, 0.24324535180436846, 0.24976067431333915, 0.28460993459871675, 0.2319758865978354, 0.23881145743167898, 0.23986513735369785, 0.6042526073405005, 0.6072132138678417, 0.6145234351592841, 0.6069338077235791, 0.6289971816920674, 0.6046360222845432, 0.605766370676037, 0.5985056216185886, 0.6165986262874332, 0.09927414488763064, 0.09786343249291785, 0.1111350257625856, 0.10847135884575787, 0.10156282716012488, 0.10161090295584285, 0.09141688948267734, 0.09631103044355838, 0.10180457742127635, 0.16736905288526882, 0.1536807790556486, 0.15075028735192542, 0.16928519550250243, 0.14565576184484652, 0.1657944017149352, 0.15437448514086827, 0.1423082162005167, 0.1346797883402402, 0.35576447033170455, 0.3565335735910571, 0.3658386394813028, 0.3729740242333658, 0.36945965150344096, 0.38494174087999256, 0.38138787684189224, 0.38557800909024975, 0.3602845989677873, 0.29278259042105315, 0.29377302639208136, 0.2647352759074706, 0.2695722176073062, 0.26294429168530353, 0.2795776210341727, 0.3026411249447909, 0.2962459243911, 0.31857675324272683, 0.19001081001828346, 0.20089052851932654, 0.19561885060902084, 0.20556766791236103, 0.18899618134547025, 0.1880682474947133, 0.19592238085021363, 0.19136881386592397, 0.1881369685225155, 0.1920366950574972, 0.20894334413346594, 0.19865687763757067, 0.1984133255636551, 0.22641372001077054, 0.20556765944553423, 0.18838615049416896, 0.21293923128937142, 0.20324491253160104, 0.6475532563098656, 0.19524524108422636, 0.636378481893793, 0.5025609846040462, 0.19041949642839595, 0.6051550064637894, 0.6301043407837812, 0.571622129238325, 0.5765595357435916, 0.19203467883910663, 0.20099858456951558, 0.5626745930774848, 0.20001658538532607, 0.6042098393363167, 0.680720029006367, 0.20737065087247897, 0.34465174062529036, 0.20477284221064396, 0.17033294490681983, 0.19871497929778825, 0.19776727502619273, 0.1905102762930344, 0.17959103249583241, 0.19355364462118307, 0.17777104718934933, 0.18572454752254108, 0.22197401448948062, 0.07338156451119648, 0.08216186878616605, 0.08747810360311359, 0.07828792184848066, 0.0774781924112049, 0.07678934346791033, 0.07457052138348297, 0.07994857498361618, 0.07403886443858232]}, "mutation_prompt": null}
{"id": "be101a50-c5d1-42c0-842b-9deb0e3d483b", "solution": "import numpy as np\n\nclass AdaptiveHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = max(20 * dim, 10)\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.argsort(fitness)[:self.pop_size//2]\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                self.F = 0.5 + 0.3 * np.sin(np.pi * evals / self.budget)\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.1 if evals > 0.6 * self.budget else 0.9  # Adjust crossover threshold\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                if evals % 70 == 0:  # Adjust local search frequency\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step_size = (0.02 + 0.98 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step_size * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n            \n            # Dynamic population size adjustment\n            if evals > 0.5 * self.budget and self.pop_size > 10:\n                self.pop_size = max(10, self.pop_size - 1)\n        \n        return best_solution", "name": "AdaptiveHybridDE", "description": "Introduce dynamic population size adjustment and a focused exploitation phase to enhance convergence speed.", "configspace": "", "generation": 79, "fitness": 0.31945536003715297, "feedback": "The algorithm AdaptiveHybridDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.22.", "error": "", "parent_id": "df91e617-96d2-494e-be4c-acadeea31c82", "metadata": {"aucs": [0.7247926973343399, 0.7297067990553403, 0.736166407452201, 0.7243791218078317, 0.7175710826829418, 0.7155890682691733, 0.7052020647514081, 0.7279654524548712, 0.7307209589780834, 0.5447406301344213, 0.5398662057180286, 0.5271037211268021, 0.5062969724703241, 0.5281064959535449, 0.5169788066594274, 0.4992608234778707, 0.5280924637169786, 0.5306929556872427, 0.19435256876381446, 0.19418046883439533, 0.15737568395572576, 0.18285410158958382, 0.15307050913121567, 0.1858756396556741, 0.1765460923477864, 0.1892699776786555, 0.18083628187759893, 0.10971702746398337, 0.145121292680903, 0.1489543969009245, 0.150824756820635, 0.15100762187181005, 0.13958212771277645, 0.1331062191464829, 0.15567359695380767, 0.14432739304437237, 0.8098056730529786, 0.9133128197994552, 0.8431218465313796, 0.8475984826639571, 0.7937072215417372, 0.8173052385188156, 0.9113338088619215, 0.8618451240312799, 0.8776314743477363, 0.35357421823617574, 0.35795280236719795, 0.3499762595397027, 0.35008941124576065, 0.31289334901963717, 0.3307510839724299, 0.32694830128295993, 0.30232748346298444, 0.32128833804316803, 0.6884517534567849, 0.6751076096988444, 0.6410064993755029, 0.71336041662218, 0.7404587927136765, 0.701103573586292, 0.7163286356444384, 0.6892122266733789, 0.7107511897566361, 0.20961714964922706, 0.14629605082924269, 0.15049190502391085, 0.1514082500020526, 0.17936895681461795, 0.17411082782526077, 0.1897946584127741, 0.17526272903527718, 0.18501969698513399, 0.31393347304825014, 0.14255352623284723, 0.15821961681880203, 0.21494549350641678, 0.21368025576885097, 0.17524547238162191, 0.2639567989832132, 0.22173359204344445, 0.1605524759429352, 0.23542023176124727, 0.22258144092576093, 0.2496110702625639, 0.2561224863521412, 0.2769442768460232, 0.2164492313173717, 0.22182785871355648, 0.25933307459422295, 0.22384818519685146, 0.39326544621057824, 0.4046609598683355, 0.3925052549614487, 0.39195109932414784, 0.40460014660740073, 0.4152906047249134, 0.42695238793701673, 0.4051637706580389, 0.411184794322208, 0.12469635829288095, 0.10125656808471062, 0.046055954484856, 0.09764650538981767, 0.0939863815305143, 0.10048046579539227, 0.06927664451543714, 0.11304717322247759, 0.10498802631452486, 0.2271556859478564, 0.20285086468136615, 0.20763155995463822, 0.24111591981701497, 0.22744882317851234, 0.21558472324100109, 0.21717912543461837, 0.2070808884237766, 0.20466989988506423, 0.5775094135771304, 0.5505820095313616, 0.5737791466416362, 0.5257456152630371, 0.5560692945898311, 0.5970036356039272, 0.5967179394362427, 0.5714920281929867, 0.5485693748757458, 0.10448166133179126, 0.10010451648359286, 0.10801518409941657, 0.09826517390784972, 0.09442065465037053, 0.10020664669270662, 0.1328753296997469, 0.09763007806685275, 0.10623369835155738, 0.13800897157330294, 0.14446230289721718, 0.14256828192619309, 0.14669370780796542, 0.15535111004876434, 0.13264938872520848, 0.1393186841554238, 0.14614336980700648, 0.13922927421697417, 0.33316849120593195, 0.3341750425370481, 0.33876257118257336, 0.35099407887754674, 0.36165931412914276, 0.33469014445567025, 0.36838737315051495, 0.3714331906328272, 0.3898450966298991, 0.27162559902802963, 0.2591717269120579, 0.2610117285718545, 0.26662782553465647, 0.2640449341482145, 0.27481006786375417, 0.28924089330644265, 0.30157149490161705, 0.281512816748442, 0.21627884399171837, 0.1946210034699548, 0.20377383914986924, 0.19026779926599668, 0.21542105505253406, 0.22243131180362674, 0.1954822231851422, 0.20872067503135128, 0.1918305875879458, 0.2062199430725975, 0.2010599235928927, 0.23472287879159226, 0.21950960333706782, 0.2194073723558677, 0.20147100256814354, 0.20999738451790917, 0.22689737184963132, 0.2133254224692117, 0.6720660135881531, 0.18600973439805313, 0.17769021836697374, 0.603509797956649, 0.46828150301033333, 0.5195056141019968, 0.6573260382962437, 0.18735871791000258, 0.19379629223102524, 0.6690330730906229, 0.20229380364033422, 0.2725848574427989, 0.6344934708040797, 0.19394112786972006, 0.46724439249102934, 0.2826199783325367, 0.20502360673643993, 0.12197753377999121, 0.183983542801876, 0.18137961015399673, 0.1868506563650898, 0.1899842203922283, 0.19486297578893585, 0.1983772421636787, 0.18875186194643623, 0.1842347038126998, 0.19802907398444447, 0.08637294353759173, 0.08545329124796042, 0.07536614644689577, 0.08103465435391699, 0.07478442383091699, 0.06913163204487593, 0.08564737982768889, 0.07392511900338306, 0.08192845692218143]}, "mutation_prompt": null}
{"id": "8196afa7-509f-45ea-88ac-abdadb8a4ee6", "solution": "import numpy as np\n\nclass AdaptiveHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = max(20 * dim, 10)\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.argsort(fitness)[:self.pop_size//2]\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                self.F = 0.5 + 0.3 * np.sin(np.pi * evals / self.budget)\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.1 if evals > 0.7 * self.budget else 0.9\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                if evals % 80 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step_size = (0.02 + 0.98 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step_size * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "AdaptiveHybridDE", "description": "Incorporating adaptive population scaling and diversified local search strategies to enhance convergence efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df91e617-96d2-494e-be4c-acadeea31c82", "metadata": {"aucs": [0.723276293752772, 0.7067902223655351, 0.6968503176625909, 0.7379607085221316, 0.7112728446389729, 0.7288818218468345, 0.7296789530922216, 0.7134332616837673, 0.7253990168013991, 0.5085245583642966, 0.531329942291587, 0.5011408968925257, 0.5060255372642539, 0.5291805201866326, 0.5507049403255551, 0.5276591778957196, 0.5359934243378364, 0.5294321730948193, 0.13773045538186857, 0.1302018592070754, 0.14426141081540977, 0.12196955283651201, 0.12563255768564685, 0.14372423029401926, 0.12167773541291971, 0.13041855400455682, 0.13336498204072633, 0.10609501688490341, 0.11446244780261072, 0.11369495381526995, 0.12424181060311235, 0.11141257089066825, 0.1174851533268857, 0.12000843440249387, 0.10511546271812933, 0.1159547993872938, 0.8929660110923627, 0.8941818219529424, 0.8757250002531621, 0.8688441352412681, 0.8411839606041717, 0.8467075239100674, 0.9564277731414088, 0.8597316285146108, 0.7322483251242985, 0.35210333944908634, 0.34800698481825654, 0.28987685216197834, 0.3528800090747656, 0.3707253069162032, 0.34310602735767004, 0.3311496362452091, 0.33896375409907054, 0.3499453112940152, 0.6760909707600689, 0.7379222706525269, 0.6711792563634601, 0.698791919925317, 0.6723742652856124, 0.7321030632559807, 0.7143022840907699, 0.7047536320772618, 0.6991241272091375, 0.252909408019508, 0.17385107965290192, 0.19877890222384254, 0.18676222945441034, 0.18192511041257375, 0.18560349613429816, 0.14600325687082294, 0.17437514555205402, 0.17992631860591446, 0.17582593262726443, 0.14218841583859065, 0.14816164338632465, 0.2200165705313869, 0.1976332012288885, 0.2549793033011055, 0.1796428280475535, 0.1990889662136155, 0.1837576789476819, 0.2907447128519284, 0.2818247414031544, 0.285695112245704, 0.27391064628045014, 0.28689523104251324, 0.2943191530330753, 0.313786749498864, 0.32232473685963037, 0.26772565321212416, 0.3807287577750498, 0.40430775789701523, 0.39040433449456236, 0.4247839762376848, 0.3911989025187491, 0.42387417993381116, 0.4516795516918731, 0.4655850985395463, 0.43513553315217013, 0.08278113277954147, 0.11927518007705717, 0.12172252742605538, 0.08380980585375075, 0.14619450014445468, 0.13566135763469755, 0.09386039172559701, 0.08984928159688788, 0.16577588074039484, 0.23949046408214225, 0.24063360480007745, 0.2148160016802333, 0.24324535180436846, 0.24976067431333915, 0.28460993459871675, 0.2319758865978354, 0.23881145743167898, 0.23986513735369785, 0.6042526073405005, 0.6072132138678417, 0.6145234351592841, 0.6069338077235791, 0.6289971816920674, 0.6046360222845432, 0.605766370676037, 0.5985056216185886, 0.6165986262874332, 0.09927414488763064, 0.09786343249291785, 0.1111350257625856, 0.10847135884575787, 0.10156282716012488, 0.10161090295584285, 0.09141688948267734, 0.09631103044355838, 0.10180457742127635, 0.16736905288526882, 0.1536807790556486, 0.15075028735192542, 0.16928519550250243, 0.14565576184484652, 0.1657944017149352, 0.15437448514086827, 0.1423082162005167, 0.1346797883402402, 0.35576447033170455, 0.3565335735910571, 0.3658386394813028, 0.3729740242333658, 0.36945965150344096, 0.38494174087999256, 0.38138787684189224, 0.38557800909024975, 0.3602845989677873, 0.29278259042105315, 0.29377302639208136, 0.2647352759074706, 0.2695722176073062, 0.26294429168530353, 0.2795776210341727, 0.3026411249447909, 0.2962459243911, 0.31857675324272683, 0.19001081001828346, 0.20089052851932654, 0.19561885060902084, 0.20556766791236103, 0.18899618134547025, 0.1880682474947133, 0.19592238085021363, 0.19136881386592397, 0.1881369685225155, 0.1920366950574972, 0.20894334413346594, 0.19865687763757067, 0.1984133255636551, 0.22641372001077054, 0.20556765944553423, 0.18838615049416896, 0.21293923128937142, 0.20324491253160104, 0.6475532563098656, 0.19524524108422636, 0.636378481893793, 0.5025609846040462, 0.19041949642839595, 0.6051550064637894, 0.6301043407837812, 0.571622129238325, 0.5765595357435916, 0.19203467883910663, 0.20099858456951558, 0.5626745930774848, 0.20001658538532607, 0.6042098393363167, 0.680720029006367, 0.20737065087247897, 0.34465174062529036, 0.20477284221064396, 0.17033294490681983, 0.19871497929778825, 0.19776727502619273, 0.1905102762930344, 0.17959103249583241, 0.19355364462118307, 0.17777104718934933, 0.18572454752254108, 0.22197401448948062, 0.07338156451119648, 0.08216186878616605, 0.08747810360311359, 0.07828792184848066, 0.0774781924112049, 0.07678934346791033, 0.07457052138348297, 0.07994857498361618, 0.07403886443858232]}, "mutation_prompt": null}
{"id": "68fce452-e2fc-4f6d-82d8-0b583954183d", "solution": "import numpy as np\n\nclass AdaptiveHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = max(20 * dim, 10)\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.argsort(fitness)[:self.pop_size//2]\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                self.F = 0.5 + 0.3 * np.sin(np.pi * evals / self.budget)\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.1 if evals > 0.7 * self.budget else 0.9\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                if evals % 80 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step_size = (0.02 + 0.98 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step_size * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "AdaptiveHybridDE", "description": "Incorporating adaptive population scaling and diversified local search strategies to enhance convergence efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df91e617-96d2-494e-be4c-acadeea31c82", "metadata": {"aucs": [0.723276293752772, 0.7067902223655351, 0.6968503176625909, 0.7379607085221316, 0.7112728446389729, 0.7288818218468345, 0.7296789530922216, 0.7134332616837673, 0.7253990168013991, 0.5085245583642966, 0.531329942291587, 0.5011408968925257, 0.5060255372642539, 0.5291805201866326, 0.5507049403255551, 0.5276591778957196, 0.5359934243378364, 0.5294321730948193, 0.13773045538186857, 0.1302018592070754, 0.14426141081540977, 0.12196955283651201, 0.12563255768564685, 0.14372423029401926, 0.12167773541291971, 0.13041855400455682, 0.13336498204072633, 0.10609501688490341, 0.11446244780261072, 0.11369495381526995, 0.12424181060311235, 0.11141257089066825, 0.1174851533268857, 0.12000843440249387, 0.10511546271812933, 0.1159547993872938, 0.8929660110923627, 0.8941818219529424, 0.8757250002531621, 0.8688441352412681, 0.8411839606041717, 0.8467075239100674, 0.9564277731414088, 0.8597316285146108, 0.7322483251242985, 0.35210333944908634, 0.34800698481825654, 0.28987685216197834, 0.3528800090747656, 0.3707253069162032, 0.34310602735767004, 0.3311496362452091, 0.33896375409907054, 0.3499453112940152, 0.6760909707600689, 0.7379222706525269, 0.6711792563634601, 0.698791919925317, 0.6723742652856124, 0.7321030632559807, 0.7143022840907699, 0.7047536320772618, 0.6991241272091375, 0.252909408019508, 0.17385107965290192, 0.19877890222384254, 0.18676222945441034, 0.18192511041257375, 0.18560349613429816, 0.14600325687082294, 0.17437514555205402, 0.17992631860591446, 0.17582593262726443, 0.14218841583859065, 0.14816164338632465, 0.2200165705313869, 0.1976332012288885, 0.2549793033011055, 0.1796428280475535, 0.1990889662136155, 0.1837576789476819, 0.2907447128519284, 0.2818247414031544, 0.285695112245704, 0.27391064628045014, 0.28689523104251324, 0.2943191530330753, 0.313786749498864, 0.32232473685963037, 0.26772565321212416, 0.3807287577750498, 0.40430775789701523, 0.39040433449456236, 0.4247839762376848, 0.3911989025187491, 0.42387417993381116, 0.4516795516918731, 0.4655850985395463, 0.43513553315217013, 0.08278113277954147, 0.11927518007705717, 0.12172252742605538, 0.08380980585375075, 0.14619450014445468, 0.13566135763469755, 0.09386039172559701, 0.08984928159688788, 0.16577588074039484, 0.23949046408214225, 0.24063360480007745, 0.2148160016802333, 0.24324535180436846, 0.24976067431333915, 0.28460993459871675, 0.2319758865978354, 0.23881145743167898, 0.23986513735369785, 0.6042526073405005, 0.6072132138678417, 0.6145234351592841, 0.6069338077235791, 0.6289971816920674, 0.6046360222845432, 0.605766370676037, 0.5985056216185886, 0.6165986262874332, 0.09927414488763064, 0.09786343249291785, 0.1111350257625856, 0.10847135884575787, 0.10156282716012488, 0.10161090295584285, 0.09141688948267734, 0.09631103044355838, 0.10180457742127635, 0.16736905288526882, 0.1536807790556486, 0.15075028735192542, 0.16928519550250243, 0.14565576184484652, 0.1657944017149352, 0.15437448514086827, 0.1423082162005167, 0.1346797883402402, 0.35576447033170455, 0.3565335735910571, 0.3658386394813028, 0.3729740242333658, 0.36945965150344096, 0.38494174087999256, 0.38138787684189224, 0.38557800909024975, 0.3602845989677873, 0.29278259042105315, 0.29377302639208136, 0.2647352759074706, 0.2695722176073062, 0.26294429168530353, 0.2795776210341727, 0.3026411249447909, 0.2962459243911, 0.31857675324272683, 0.19001081001828346, 0.20089052851932654, 0.19561885060902084, 0.20556766791236103, 0.18899618134547025, 0.1880682474947133, 0.19592238085021363, 0.19136881386592397, 0.1881369685225155, 0.1920366950574972, 0.20894334413346594, 0.19865687763757067, 0.1984133255636551, 0.22641372001077054, 0.20556765944553423, 0.18838615049416896, 0.21293923128937142, 0.20324491253160104, 0.6475532563098656, 0.19524524108422636, 0.636378481893793, 0.5025609846040462, 0.19041949642839595, 0.6051550064637894, 0.6301043407837812, 0.571622129238325, 0.5765595357435916, 0.19203467883910663, 0.20099858456951558, 0.5626745930774848, 0.20001658538532607, 0.6042098393363167, 0.680720029006367, 0.20737065087247897, 0.34465174062529036, 0.20477284221064396, 0.17033294490681983, 0.19871497929778825, 0.19776727502619273, 0.1905102762930344, 0.17959103249583241, 0.19355364462118307, 0.17777104718934933, 0.18572454752254108, 0.22197401448948062, 0.07338156451119648, 0.08216186878616605, 0.08747810360311359, 0.07828792184848066, 0.0774781924112049, 0.07678934346791033, 0.07457052138348297, 0.07994857498361618, 0.07403886443858232]}, "mutation_prompt": null}
{"id": "9f6ecc1d-7708-442f-83ff-9f4e68e9ae7f", "solution": "import numpy as np\n\nclass AdaptiveHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = max(20 * dim, 10)\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.argsort(fitness)[:self.pop_size//2]\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                self.F = 0.5 + 0.3 * np.sin(np.pi * evals / self.budget)\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.1 if evals > 0.7 * self.budget else 0.9\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                if evals % 80 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step_size = (0.02 + 0.98 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step_size * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "AdaptiveHybridDE", "description": "Incorporating adaptive population scaling and diversified local search strategies to enhance convergence efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df91e617-96d2-494e-be4c-acadeea31c82", "metadata": {"aucs": [0.723276293752772, 0.7067902223655351, 0.6968503176625909, 0.7379607085221316, 0.7112728446389729, 0.7288818218468345, 0.7296789530922216, 0.7134332616837673, 0.7253990168013991, 0.5085245583642966, 0.531329942291587, 0.5011408968925257, 0.5060255372642539, 0.5291805201866326, 0.5507049403255551, 0.5276591778957196, 0.5359934243378364, 0.5294321730948193, 0.13773045538186857, 0.1302018592070754, 0.14426141081540977, 0.12196955283651201, 0.12563255768564685, 0.14372423029401926, 0.12167773541291971, 0.13041855400455682, 0.13336498204072633, 0.10609501688490341, 0.11446244780261072, 0.11369495381526995, 0.12424181060311235, 0.11141257089066825, 0.1174851533268857, 0.12000843440249387, 0.10511546271812933, 0.1159547993872938, 0.8929660110923627, 0.8941818219529424, 0.8757250002531621, 0.8688441352412681, 0.8411839606041717, 0.8467075239100674, 0.9564277731414088, 0.8597316285146108, 0.7322483251242985, 0.35210333944908634, 0.34800698481825654, 0.28987685216197834, 0.3528800090747656, 0.3707253069162032, 0.34310602735767004, 0.3311496362452091, 0.33896375409907054, 0.3499453112940152, 0.6760909707600689, 0.7379222706525269, 0.6711792563634601, 0.698791919925317, 0.6723742652856124, 0.7321030632559807, 0.7143022840907699, 0.7047536320772618, 0.6991241272091375, 0.252909408019508, 0.17385107965290192, 0.19877890222384254, 0.18676222945441034, 0.18192511041257375, 0.18560349613429816, 0.14600325687082294, 0.17437514555205402, 0.17992631860591446, 0.17582593262726443, 0.14218841583859065, 0.14816164338632465, 0.2200165705313869, 0.1976332012288885, 0.2549793033011055, 0.1796428280475535, 0.1990889662136155, 0.1837576789476819, 0.2907447128519284, 0.2818247414031544, 0.285695112245704, 0.27391064628045014, 0.28689523104251324, 0.2943191530330753, 0.313786749498864, 0.32232473685963037, 0.26772565321212416, 0.3807287577750498, 0.40430775789701523, 0.39040433449456236, 0.4247839762376848, 0.3911989025187491, 0.42387417993381116, 0.4516795516918731, 0.4655850985395463, 0.43513553315217013, 0.08278113277954147, 0.11927518007705717, 0.12172252742605538, 0.08380980585375075, 0.14619450014445468, 0.13566135763469755, 0.09386039172559701, 0.08984928159688788, 0.16577588074039484, 0.23949046408214225, 0.24063360480007745, 0.2148160016802333, 0.24324535180436846, 0.24976067431333915, 0.28460993459871675, 0.2319758865978354, 0.23881145743167898, 0.23986513735369785, 0.6042526073405005, 0.6072132138678417, 0.6145234351592841, 0.6069338077235791, 0.6289971816920674, 0.6046360222845432, 0.605766370676037, 0.5985056216185886, 0.6165986262874332, 0.09927414488763064, 0.09786343249291785, 0.1111350257625856, 0.10847135884575787, 0.10156282716012488, 0.10161090295584285, 0.09141688948267734, 0.09631103044355838, 0.10180457742127635, 0.16736905288526882, 0.1536807790556486, 0.15075028735192542, 0.16928519550250243, 0.14565576184484652, 0.1657944017149352, 0.15437448514086827, 0.1423082162005167, 0.1346797883402402, 0.35576447033170455, 0.3565335735910571, 0.3658386394813028, 0.3729740242333658, 0.36945965150344096, 0.38494174087999256, 0.38138787684189224, 0.38557800909024975, 0.3602845989677873, 0.29278259042105315, 0.29377302639208136, 0.2647352759074706, 0.2695722176073062, 0.26294429168530353, 0.2795776210341727, 0.3026411249447909, 0.2962459243911, 0.31857675324272683, 0.19001081001828346, 0.20089052851932654, 0.19561885060902084, 0.20556766791236103, 0.18899618134547025, 0.1880682474947133, 0.19592238085021363, 0.19136881386592397, 0.1881369685225155, 0.1920366950574972, 0.20894334413346594, 0.19865687763757067, 0.1984133255636551, 0.22641372001077054, 0.20556765944553423, 0.18838615049416896, 0.21293923128937142, 0.20324491253160104, 0.6475532563098656, 0.19524524108422636, 0.636378481893793, 0.5025609846040462, 0.19041949642839595, 0.6051550064637894, 0.6301043407837812, 0.571622129238325, 0.5765595357435916, 0.19203467883910663, 0.20099858456951558, 0.5626745930774848, 0.20001658538532607, 0.6042098393363167, 0.680720029006367, 0.20737065087247897, 0.34465174062529036, 0.20477284221064396, 0.17033294490681983, 0.19871497929778825, 0.19776727502619273, 0.1905102762930344, 0.17959103249583241, 0.19355364462118307, 0.17777104718934933, 0.18572454752254108, 0.22197401448948062, 0.07338156451119648, 0.08216186878616605, 0.08747810360311359, 0.07828792184848066, 0.0774781924112049, 0.07678934346791033, 0.07457052138348297, 0.07994857498361618, 0.07403886443858232]}, "mutation_prompt": null}
{"id": "0a4ed10f-401d-4544-a5a9-94d6283edcf5", "solution": "import numpy as np\n\nclass AdaptiveHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = max(20 * dim, 10)\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.argsort(fitness)[:self.pop_size//2]\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                self.F = 0.5 + 0.3 * np.sin(np.pi * evals / self.budget)\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.1 if evals > 0.7 * self.budget else 0.9\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                if evals % 80 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step_size = (0.02 + 0.98 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step_size * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "AdaptiveHybridDE", "description": "Incorporating adaptive population scaling and diversified local search strategies to enhance convergence efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df91e617-96d2-494e-be4c-acadeea31c82", "metadata": {"aucs": [0.723276293752772, 0.7067902223655351, 0.6968503176625909, 0.7379607085221316, 0.7112728446389729, 0.7288818218468345, 0.7296789530922216, 0.7134332616837673, 0.7253990168013991, 0.5085245583642966, 0.531329942291587, 0.5011408968925257, 0.5060255372642539, 0.5291805201866326, 0.5507049403255551, 0.5276591778957196, 0.5359934243378364, 0.5294321730948193, 0.13773045538186857, 0.1302018592070754, 0.14426141081540977, 0.12196955283651201, 0.12563255768564685, 0.14372423029401926, 0.12167773541291971, 0.13041855400455682, 0.13336498204072633, 0.10609501688490341, 0.11446244780261072, 0.11369495381526995, 0.12424181060311235, 0.11141257089066825, 0.1174851533268857, 0.12000843440249387, 0.10511546271812933, 0.1159547993872938, 0.8929660110923627, 0.8941818219529424, 0.8757250002531621, 0.8688441352412681, 0.8411839606041717, 0.8467075239100674, 0.9564277731414088, 0.8597316285146108, 0.7322483251242985, 0.35210333944908634, 0.34800698481825654, 0.28987685216197834, 0.3528800090747656, 0.3707253069162032, 0.34310602735767004, 0.3311496362452091, 0.33896375409907054, 0.3499453112940152, 0.6760909707600689, 0.7379222706525269, 0.6711792563634601, 0.698791919925317, 0.6723742652856124, 0.7321030632559807, 0.7143022840907699, 0.7047536320772618, 0.6991241272091375, 0.252909408019508, 0.17385107965290192, 0.19877890222384254, 0.18676222945441034, 0.18192511041257375, 0.18560349613429816, 0.14600325687082294, 0.17437514555205402, 0.17992631860591446, 0.17582593262726443, 0.14218841583859065, 0.14816164338632465, 0.2200165705313869, 0.1976332012288885, 0.2549793033011055, 0.1796428280475535, 0.1990889662136155, 0.1837576789476819, 0.2907447128519284, 0.2818247414031544, 0.285695112245704, 0.27391064628045014, 0.28689523104251324, 0.2943191530330753, 0.313786749498864, 0.32232473685963037, 0.26772565321212416, 0.3807287577750498, 0.40430775789701523, 0.39040433449456236, 0.4247839762376848, 0.3911989025187491, 0.42387417993381116, 0.4516795516918731, 0.4655850985395463, 0.43513553315217013, 0.08278113277954147, 0.11927518007705717, 0.12172252742605538, 0.08380980585375075, 0.14619450014445468, 0.13566135763469755, 0.09386039172559701, 0.08984928159688788, 0.16577588074039484, 0.23949046408214225, 0.24063360480007745, 0.2148160016802333, 0.24324535180436846, 0.24976067431333915, 0.28460993459871675, 0.2319758865978354, 0.23881145743167898, 0.23986513735369785, 0.6042526073405005, 0.6072132138678417, 0.6145234351592841, 0.6069338077235791, 0.6289971816920674, 0.6046360222845432, 0.605766370676037, 0.5985056216185886, 0.6165986262874332, 0.09927414488763064, 0.09786343249291785, 0.1111350257625856, 0.10847135884575787, 0.10156282716012488, 0.10161090295584285, 0.09141688948267734, 0.09631103044355838, 0.10180457742127635, 0.16736905288526882, 0.1536807790556486, 0.15075028735192542, 0.16928519550250243, 0.14565576184484652, 0.1657944017149352, 0.15437448514086827, 0.1423082162005167, 0.1346797883402402, 0.35576447033170455, 0.3565335735910571, 0.3658386394813028, 0.3729740242333658, 0.36945965150344096, 0.38494174087999256, 0.38138787684189224, 0.38557800909024975, 0.3602845989677873, 0.29278259042105315, 0.29377302639208136, 0.2647352759074706, 0.2695722176073062, 0.26294429168530353, 0.2795776210341727, 0.3026411249447909, 0.2962459243911, 0.31857675324272683, 0.19001081001828346, 0.20089052851932654, 0.19561885060902084, 0.20556766791236103, 0.18899618134547025, 0.1880682474947133, 0.19592238085021363, 0.19136881386592397, 0.1881369685225155, 0.1920366950574972, 0.20894334413346594, 0.19865687763757067, 0.1984133255636551, 0.22641372001077054, 0.20556765944553423, 0.18838615049416896, 0.21293923128937142, 0.20324491253160104, 0.6475532563098656, 0.19524524108422636, 0.636378481893793, 0.5025609846040462, 0.19041949642839595, 0.6051550064637894, 0.6301043407837812, 0.571622129238325, 0.5765595357435916, 0.19203467883910663, 0.20099858456951558, 0.5626745930774848, 0.20001658538532607, 0.6042098393363167, 0.680720029006367, 0.20737065087247897, 0.34465174062529036, 0.20477284221064396, 0.17033294490681983, 0.19871497929778825, 0.19776727502619273, 0.1905102762930344, 0.17959103249583241, 0.19355364462118307, 0.17777104718934933, 0.18572454752254108, 0.22197401448948062, 0.07338156451119648, 0.08216186878616605, 0.08747810360311359, 0.07828792184848066, 0.0774781924112049, 0.07678934346791033, 0.07457052138348297, 0.07994857498361618, 0.07403886443858232]}, "mutation_prompt": null}
{"id": "48013b7b-a9c2-4626-a66e-47610fd62d20", "solution": "import numpy as np\n\nclass AdaptiveHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = max(20 * dim, 10)\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.argsort(fitness)[:self.pop_size//2]\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                self.F = 0.5 + 0.3 * np.sin(np.pi * evals / self.budget)\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.1 if evals > 0.7 * self.budget else 0.9\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                if evals % 80 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step_size = (0.02 + 0.98 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step_size * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "AdaptiveHybridDE", "description": "Incorporating adaptive population scaling and diversified local search strategies to enhance convergence efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df91e617-96d2-494e-be4c-acadeea31c82", "metadata": {"aucs": [0.723276293752772, 0.7067902223655351, 0.6968503176625909, 0.7379607085221316, 0.7112728446389729, 0.7288818218468345, 0.7296789530922216, 0.7134332616837673, 0.7253990168013991, 0.5085245583642966, 0.531329942291587, 0.5011408968925257, 0.5060255372642539, 0.5291805201866326, 0.5507049403255551, 0.5276591778957196, 0.5359934243378364, 0.5294321730948193, 0.13773045538186857, 0.1302018592070754, 0.14426141081540977, 0.12196955283651201, 0.12563255768564685, 0.14372423029401926, 0.12167773541291971, 0.13041855400455682, 0.13336498204072633, 0.10609501688490341, 0.11446244780261072, 0.11369495381526995, 0.12424181060311235, 0.11141257089066825, 0.1174851533268857, 0.12000843440249387, 0.10511546271812933, 0.1159547993872938, 0.8929660110923627, 0.8941818219529424, 0.8757250002531621, 0.8688441352412681, 0.8411839606041717, 0.8467075239100674, 0.9564277731414088, 0.8597316285146108, 0.7322483251242985, 0.35210333944908634, 0.34800698481825654, 0.28987685216197834, 0.3528800090747656, 0.3707253069162032, 0.34310602735767004, 0.3311496362452091, 0.33896375409907054, 0.3499453112940152, 0.6760909707600689, 0.7379222706525269, 0.6711792563634601, 0.698791919925317, 0.6723742652856124, 0.7321030632559807, 0.7143022840907699, 0.7047536320772618, 0.6991241272091375, 0.252909408019508, 0.17385107965290192, 0.19877890222384254, 0.18676222945441034, 0.18192511041257375, 0.18560349613429816, 0.14600325687082294, 0.17437514555205402, 0.17992631860591446, 0.17582593262726443, 0.14218841583859065, 0.14816164338632465, 0.2200165705313869, 0.1976332012288885, 0.2549793033011055, 0.1796428280475535, 0.1990889662136155, 0.1837576789476819, 0.2907447128519284, 0.2818247414031544, 0.285695112245704, 0.27391064628045014, 0.28689523104251324, 0.2943191530330753, 0.313786749498864, 0.32232473685963037, 0.26772565321212416, 0.3807287577750498, 0.40430775789701523, 0.39040433449456236, 0.4247839762376848, 0.3911989025187491, 0.42387417993381116, 0.4516795516918731, 0.4655850985395463, 0.43513553315217013, 0.08278113277954147, 0.11927518007705717, 0.12172252742605538, 0.08380980585375075, 0.14619450014445468, 0.13566135763469755, 0.09386039172559701, 0.08984928159688788, 0.16577588074039484, 0.23949046408214225, 0.24063360480007745, 0.2148160016802333, 0.24324535180436846, 0.24976067431333915, 0.28460993459871675, 0.2319758865978354, 0.23881145743167898, 0.23986513735369785, 0.6042526073405005, 0.6072132138678417, 0.6145234351592841, 0.6069338077235791, 0.6289971816920674, 0.6046360222845432, 0.605766370676037, 0.5985056216185886, 0.6165986262874332, 0.09927414488763064, 0.09786343249291785, 0.1111350257625856, 0.10847135884575787, 0.10156282716012488, 0.10161090295584285, 0.09141688948267734, 0.09631103044355838, 0.10180457742127635, 0.16736905288526882, 0.1536807790556486, 0.15075028735192542, 0.16928519550250243, 0.14565576184484652, 0.1657944017149352, 0.15437448514086827, 0.1423082162005167, 0.1346797883402402, 0.35576447033170455, 0.3565335735910571, 0.3658386394813028, 0.3729740242333658, 0.36945965150344096, 0.38494174087999256, 0.38138787684189224, 0.38557800909024975, 0.3602845989677873, 0.29278259042105315, 0.29377302639208136, 0.2647352759074706, 0.2695722176073062, 0.26294429168530353, 0.2795776210341727, 0.3026411249447909, 0.2962459243911, 0.31857675324272683, 0.19001081001828346, 0.20089052851932654, 0.19561885060902084, 0.20556766791236103, 0.18899618134547025, 0.1880682474947133, 0.19592238085021363, 0.19136881386592397, 0.1881369685225155, 0.1920366950574972, 0.20894334413346594, 0.19865687763757067, 0.1984133255636551, 0.22641372001077054, 0.20556765944553423, 0.18838615049416896, 0.21293923128937142, 0.20324491253160104, 0.6475532563098656, 0.19524524108422636, 0.636378481893793, 0.5025609846040462, 0.19041949642839595, 0.6051550064637894, 0.6301043407837812, 0.571622129238325, 0.5765595357435916, 0.19203467883910663, 0.20099858456951558, 0.5626745930774848, 0.20001658538532607, 0.6042098393363167, 0.680720029006367, 0.20737065087247897, 0.34465174062529036, 0.20477284221064396, 0.17033294490681983, 0.19871497929778825, 0.19776727502619273, 0.1905102762930344, 0.17959103249583241, 0.19355364462118307, 0.17777104718934933, 0.18572454752254108, 0.22197401448948062, 0.07338156451119648, 0.08216186878616605, 0.08747810360311359, 0.07828792184848066, 0.0774781924112049, 0.07678934346791033, 0.07457052138348297, 0.07994857498361618, 0.07403886443858232]}, "mutation_prompt": null}
{"id": "e253d410-57d2-44bb-8490-680882f19c62", "solution": "import numpy as np\n\nclass AdaptiveHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = max(20 * dim, 10)\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.argsort(fitness)[:self.pop_size//2]\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                self.F = 0.5 + 0.3 * np.sin(np.pi * evals / self.budget)\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.1 if evals > 0.7 * self.budget else 0.9\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                if evals % 80 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step_size = (0.02 + 0.98 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step_size * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "AdaptiveHybridDE", "description": "Incorporating adaptive population scaling and diversified local search strategies to enhance convergence efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df91e617-96d2-494e-be4c-acadeea31c82", "metadata": {"aucs": [0.723276293752772, 0.7067902223655351, 0.6968503176625909, 0.7379607085221316, 0.7112728446389729, 0.7288818218468345, 0.7296789530922216, 0.7134332616837673, 0.7253990168013991, 0.5085245583642966, 0.531329942291587, 0.5011408968925257, 0.5060255372642539, 0.5291805201866326, 0.5507049403255551, 0.5276591778957196, 0.5359934243378364, 0.5294321730948193, 0.13773045538186857, 0.1302018592070754, 0.14426141081540977, 0.12196955283651201, 0.12563255768564685, 0.14372423029401926, 0.12167773541291971, 0.13041855400455682, 0.13336498204072633, 0.10609501688490341, 0.11446244780261072, 0.11369495381526995, 0.12424181060311235, 0.11141257089066825, 0.1174851533268857, 0.12000843440249387, 0.10511546271812933, 0.1159547993872938, 0.8929660110923627, 0.8941818219529424, 0.8757250002531621, 0.8688441352412681, 0.8411839606041717, 0.8467075239100674, 0.9564277731414088, 0.8597316285146108, 0.7322483251242985, 0.35210333944908634, 0.34800698481825654, 0.28987685216197834, 0.3528800090747656, 0.3707253069162032, 0.34310602735767004, 0.3311496362452091, 0.33896375409907054, 0.3499453112940152, 0.6760909707600689, 0.7379222706525269, 0.6711792563634601, 0.698791919925317, 0.6723742652856124, 0.7321030632559807, 0.7143022840907699, 0.7047536320772618, 0.6991241272091375, 0.252909408019508, 0.17385107965290192, 0.19877890222384254, 0.18676222945441034, 0.18192511041257375, 0.18560349613429816, 0.14600325687082294, 0.17437514555205402, 0.17992631860591446, 0.17582593262726443, 0.14218841583859065, 0.14816164338632465, 0.2200165705313869, 0.1976332012288885, 0.2549793033011055, 0.1796428280475535, 0.1990889662136155, 0.1837576789476819, 0.2907447128519284, 0.2818247414031544, 0.285695112245704, 0.27391064628045014, 0.28689523104251324, 0.2943191530330753, 0.313786749498864, 0.32232473685963037, 0.26772565321212416, 0.3807287577750498, 0.40430775789701523, 0.39040433449456236, 0.4247839762376848, 0.3911989025187491, 0.42387417993381116, 0.4516795516918731, 0.4655850985395463, 0.43513553315217013, 0.08278113277954147, 0.11927518007705717, 0.12172252742605538, 0.08380980585375075, 0.14619450014445468, 0.13566135763469755, 0.09386039172559701, 0.08984928159688788, 0.16577588074039484, 0.23949046408214225, 0.24063360480007745, 0.2148160016802333, 0.24324535180436846, 0.24976067431333915, 0.28460993459871675, 0.2319758865978354, 0.23881145743167898, 0.23986513735369785, 0.6042526073405005, 0.6072132138678417, 0.6145234351592841, 0.6069338077235791, 0.6289971816920674, 0.6046360222845432, 0.605766370676037, 0.5985056216185886, 0.6165986262874332, 0.09927414488763064, 0.09786343249291785, 0.1111350257625856, 0.10847135884575787, 0.10156282716012488, 0.10161090295584285, 0.09141688948267734, 0.09631103044355838, 0.10180457742127635, 0.16736905288526882, 0.1536807790556486, 0.15075028735192542, 0.16928519550250243, 0.14565576184484652, 0.1657944017149352, 0.15437448514086827, 0.1423082162005167, 0.1346797883402402, 0.35576447033170455, 0.3565335735910571, 0.3658386394813028, 0.3729740242333658, 0.36945965150344096, 0.38494174087999256, 0.38138787684189224, 0.38557800909024975, 0.3602845989677873, 0.29278259042105315, 0.29377302639208136, 0.2647352759074706, 0.2695722176073062, 0.26294429168530353, 0.2795776210341727, 0.3026411249447909, 0.2962459243911, 0.31857675324272683, 0.19001081001828346, 0.20089052851932654, 0.19561885060902084, 0.20556766791236103, 0.18899618134547025, 0.1880682474947133, 0.19592238085021363, 0.19136881386592397, 0.1881369685225155, 0.1920366950574972, 0.20894334413346594, 0.19865687763757067, 0.1984133255636551, 0.22641372001077054, 0.20556765944553423, 0.18838615049416896, 0.21293923128937142, 0.20324491253160104, 0.6475532563098656, 0.19524524108422636, 0.636378481893793, 0.5025609846040462, 0.19041949642839595, 0.6051550064637894, 0.6301043407837812, 0.571622129238325, 0.5765595357435916, 0.19203467883910663, 0.20099858456951558, 0.5626745930774848, 0.20001658538532607, 0.6042098393363167, 0.680720029006367, 0.20737065087247897, 0.34465174062529036, 0.20477284221064396, 0.17033294490681983, 0.19871497929778825, 0.19776727502619273, 0.1905102762930344, 0.17959103249583241, 0.19355364462118307, 0.17777104718934933, 0.18572454752254108, 0.22197401448948062, 0.07338156451119648, 0.08216186878616605, 0.08747810360311359, 0.07828792184848066, 0.0774781924112049, 0.07678934346791033, 0.07457052138348297, 0.07994857498361618, 0.07403886443858232]}, "mutation_prompt": null}
{"id": "d2bb8f68-a73c-4558-a5eb-5ce4483a9d56", "solution": "import numpy as np\n\nclass AdaptiveHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = max(20 * dim, 10)\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.argsort(fitness)[:self.pop_size//2]\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                self.F = 0.5 + 0.3 * np.sin(np.pi * evals / self.budget)\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.1 if evals > 0.7 * self.budget else 0.9\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                if evals % 80 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step_size = (0.02 + 0.98 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step_size * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "AdaptiveHybridDE", "description": "Incorporating adaptive population scaling and diversified local search strategies to enhance convergence efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df91e617-96d2-494e-be4c-acadeea31c82", "metadata": {"aucs": [0.723276293752772, 0.7067902223655351, 0.6968503176625909, 0.7379607085221316, 0.7112728446389729, 0.7288818218468345, 0.7296789530922216, 0.7134332616837673, 0.7253990168013991, 0.5085245583642966, 0.531329942291587, 0.5011408968925257, 0.5060255372642539, 0.5291805201866326, 0.5507049403255551, 0.5276591778957196, 0.5359934243378364, 0.5294321730948193, 0.13773045538186857, 0.1302018592070754, 0.14426141081540977, 0.12196955283651201, 0.12563255768564685, 0.14372423029401926, 0.12167773541291971, 0.13041855400455682, 0.13336498204072633, 0.10609501688490341, 0.11446244780261072, 0.11369495381526995, 0.12424181060311235, 0.11141257089066825, 0.1174851533268857, 0.12000843440249387, 0.10511546271812933, 0.1159547993872938, 0.8929660110923627, 0.8941818219529424, 0.8757250002531621, 0.8688441352412681, 0.8411839606041717, 0.8467075239100674, 0.9564277731414088, 0.8597316285146108, 0.7322483251242985, 0.35210333944908634, 0.34800698481825654, 0.28987685216197834, 0.3528800090747656, 0.3707253069162032, 0.34310602735767004, 0.3311496362452091, 0.33896375409907054, 0.3499453112940152, 0.6760909707600689, 0.7379222706525269, 0.6711792563634601, 0.698791919925317, 0.6723742652856124, 0.7321030632559807, 0.7143022840907699, 0.7047536320772618, 0.6991241272091375, 0.252909408019508, 0.17385107965290192, 0.19877890222384254, 0.18676222945441034, 0.18192511041257375, 0.18560349613429816, 0.14600325687082294, 0.17437514555205402, 0.17992631860591446, 0.17582593262726443, 0.14218841583859065, 0.14816164338632465, 0.2200165705313869, 0.1976332012288885, 0.2549793033011055, 0.1796428280475535, 0.1990889662136155, 0.1837576789476819, 0.2907447128519284, 0.2818247414031544, 0.285695112245704, 0.27391064628045014, 0.28689523104251324, 0.2943191530330753, 0.313786749498864, 0.32232473685963037, 0.26772565321212416, 0.3807287577750498, 0.40430775789701523, 0.39040433449456236, 0.4247839762376848, 0.3911989025187491, 0.42387417993381116, 0.4516795516918731, 0.4655850985395463, 0.43513553315217013, 0.08278113277954147, 0.11927518007705717, 0.12172252742605538, 0.08380980585375075, 0.14619450014445468, 0.13566135763469755, 0.09386039172559701, 0.08984928159688788, 0.16577588074039484, 0.23949046408214225, 0.24063360480007745, 0.2148160016802333, 0.24324535180436846, 0.24976067431333915, 0.28460993459871675, 0.2319758865978354, 0.23881145743167898, 0.23986513735369785, 0.6042526073405005, 0.6072132138678417, 0.6145234351592841, 0.6069338077235791, 0.6289971816920674, 0.6046360222845432, 0.605766370676037, 0.5985056216185886, 0.6165986262874332, 0.09927414488763064, 0.09786343249291785, 0.1111350257625856, 0.10847135884575787, 0.10156282716012488, 0.10161090295584285, 0.09141688948267734, 0.09631103044355838, 0.10180457742127635, 0.16736905288526882, 0.1536807790556486, 0.15075028735192542, 0.16928519550250243, 0.14565576184484652, 0.1657944017149352, 0.15437448514086827, 0.1423082162005167, 0.1346797883402402, 0.35576447033170455, 0.3565335735910571, 0.3658386394813028, 0.3729740242333658, 0.36945965150344096, 0.38494174087999256, 0.38138787684189224, 0.38557800909024975, 0.3602845989677873, 0.29278259042105315, 0.29377302639208136, 0.2647352759074706, 0.2695722176073062, 0.26294429168530353, 0.2795776210341727, 0.3026411249447909, 0.2962459243911, 0.31857675324272683, 0.19001081001828346, 0.20089052851932654, 0.19561885060902084, 0.20556766791236103, 0.18899618134547025, 0.1880682474947133, 0.19592238085021363, 0.19136881386592397, 0.1881369685225155, 0.1920366950574972, 0.20894334413346594, 0.19865687763757067, 0.1984133255636551, 0.22641372001077054, 0.20556765944553423, 0.18838615049416896, 0.21293923128937142, 0.20324491253160104, 0.6475532563098656, 0.19524524108422636, 0.636378481893793, 0.5025609846040462, 0.19041949642839595, 0.6051550064637894, 0.6301043407837812, 0.571622129238325, 0.5765595357435916, 0.19203467883910663, 0.20099858456951558, 0.5626745930774848, 0.20001658538532607, 0.6042098393363167, 0.680720029006367, 0.20737065087247897, 0.34465174062529036, 0.20477284221064396, 0.17033294490681983, 0.19871497929778825, 0.19776727502619273, 0.1905102762930344, 0.17959103249583241, 0.19355364462118307, 0.17777104718934933, 0.18572454752254108, 0.22197401448948062, 0.07338156451119648, 0.08216186878616605, 0.08747810360311359, 0.07828792184848066, 0.0774781924112049, 0.07678934346791033, 0.07457052138348297, 0.07994857498361618, 0.07403886443858232]}, "mutation_prompt": null}
{"id": "632e4a72-e3c1-40b6-97d8-d903f9b4fcdf", "solution": "import numpy as np\n\nclass AdaptiveHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = max(20 * dim, 10)\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.argsort(fitness)[:self.pop_size//2]\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                self.F = 0.5 + 0.3 * np.sin(np.pi * evals / self.budget)\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.1 if evals > 0.7 * self.budget else 0.9\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                if evals % 80 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step_size = (0.02 + 0.98 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step_size * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "AdaptiveHybridDE", "description": "Incorporating adaptive population scaling and diversified local search strategies to enhance convergence efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df91e617-96d2-494e-be4c-acadeea31c82", "metadata": {"aucs": [0.723276293752772, 0.7067902223655351, 0.6968503176625909, 0.7379607085221316, 0.7112728446389729, 0.7288818218468345, 0.7296789530922216, 0.7134332616837673, 0.7253990168013991, 0.5085245583642966, 0.531329942291587, 0.5011408968925257, 0.5060255372642539, 0.5291805201866326, 0.5507049403255551, 0.5276591778957196, 0.5359934243378364, 0.5294321730948193, 0.13773045538186857, 0.1302018592070754, 0.14426141081540977, 0.12196955283651201, 0.12563255768564685, 0.14372423029401926, 0.12167773541291971, 0.13041855400455682, 0.13336498204072633, 0.10609501688490341, 0.11446244780261072, 0.11369495381526995, 0.12424181060311235, 0.11141257089066825, 0.1174851533268857, 0.12000843440249387, 0.10511546271812933, 0.1159547993872938, 0.8929660110923627, 0.8941818219529424, 0.8757250002531621, 0.8688441352412681, 0.8411839606041717, 0.8467075239100674, 0.9564277731414088, 0.8597316285146108, 0.7322483251242985, 0.35210333944908634, 0.34800698481825654, 0.28987685216197834, 0.3528800090747656, 0.3707253069162032, 0.34310602735767004, 0.3311496362452091, 0.33896375409907054, 0.3499453112940152, 0.6760909707600689, 0.7379222706525269, 0.6711792563634601, 0.698791919925317, 0.6723742652856124, 0.7321030632559807, 0.7143022840907699, 0.7047536320772618, 0.6991241272091375, 0.252909408019508, 0.17385107965290192, 0.19877890222384254, 0.18676222945441034, 0.18192511041257375, 0.18560349613429816, 0.14600325687082294, 0.17437514555205402, 0.17992631860591446, 0.17582593262726443, 0.14218841583859065, 0.14816164338632465, 0.2200165705313869, 0.1976332012288885, 0.2549793033011055, 0.1796428280475535, 0.1990889662136155, 0.1837576789476819, 0.2907447128519284, 0.2818247414031544, 0.285695112245704, 0.27391064628045014, 0.28689523104251324, 0.2943191530330753, 0.313786749498864, 0.32232473685963037, 0.26772565321212416, 0.3807287577750498, 0.40430775789701523, 0.39040433449456236, 0.4247839762376848, 0.3911989025187491, 0.42387417993381116, 0.4516795516918731, 0.4655850985395463, 0.43513553315217013, 0.08278113277954147, 0.11927518007705717, 0.12172252742605538, 0.08380980585375075, 0.14619450014445468, 0.13566135763469755, 0.09386039172559701, 0.08984928159688788, 0.16577588074039484, 0.23949046408214225, 0.24063360480007745, 0.2148160016802333, 0.24324535180436846, 0.24976067431333915, 0.28460993459871675, 0.2319758865978354, 0.23881145743167898, 0.23986513735369785, 0.6042526073405005, 0.6072132138678417, 0.6145234351592841, 0.6069338077235791, 0.6289971816920674, 0.6046360222845432, 0.605766370676037, 0.5985056216185886, 0.6165986262874332, 0.09927414488763064, 0.09786343249291785, 0.1111350257625856, 0.10847135884575787, 0.10156282716012488, 0.10161090295584285, 0.09141688948267734, 0.09631103044355838, 0.10180457742127635, 0.16736905288526882, 0.1536807790556486, 0.15075028735192542, 0.16928519550250243, 0.14565576184484652, 0.1657944017149352, 0.15437448514086827, 0.1423082162005167, 0.1346797883402402, 0.35576447033170455, 0.3565335735910571, 0.3658386394813028, 0.3729740242333658, 0.36945965150344096, 0.38494174087999256, 0.38138787684189224, 0.38557800909024975, 0.3602845989677873, 0.29278259042105315, 0.29377302639208136, 0.2647352759074706, 0.2695722176073062, 0.26294429168530353, 0.2795776210341727, 0.3026411249447909, 0.2962459243911, 0.31857675324272683, 0.19001081001828346, 0.20089052851932654, 0.19561885060902084, 0.20556766791236103, 0.18899618134547025, 0.1880682474947133, 0.19592238085021363, 0.19136881386592397, 0.1881369685225155, 0.1920366950574972, 0.20894334413346594, 0.19865687763757067, 0.1984133255636551, 0.22641372001077054, 0.20556765944553423, 0.18838615049416896, 0.21293923128937142, 0.20324491253160104, 0.6475532563098656, 0.19524524108422636, 0.636378481893793, 0.5025609846040462, 0.19041949642839595, 0.6051550064637894, 0.6301043407837812, 0.571622129238325, 0.5765595357435916, 0.19203467883910663, 0.20099858456951558, 0.5626745930774848, 0.20001658538532607, 0.6042098393363167, 0.680720029006367, 0.20737065087247897, 0.34465174062529036, 0.20477284221064396, 0.17033294490681983, 0.19871497929778825, 0.19776727502619273, 0.1905102762930344, 0.17959103249583241, 0.19355364462118307, 0.17777104718934933, 0.18572454752254108, 0.22197401448948062, 0.07338156451119648, 0.08216186878616605, 0.08747810360311359, 0.07828792184848066, 0.0774781924112049, 0.07678934346791033, 0.07457052138348297, 0.07994857498361618, 0.07403886443858232]}, "mutation_prompt": null}
{"id": "021e4cfa-ce1c-4b13-ac97-ce062570a379", "solution": "import numpy as np\n\nclass AdaptiveHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = max(20 * dim, 10)\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.argsort(fitness)[:self.pop_size//2]\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                self.F = 0.5 + 0.3 * np.sin(np.pi * evals / self.budget)\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.1 if evals > 0.7 * self.budget else 0.9\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                if evals % 80 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step_size = (0.02 + 0.98 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step_size * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "AdaptiveHybridDE", "description": "Incorporating adaptive population scaling and diversified local search strategies to enhance convergence efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df91e617-96d2-494e-be4c-acadeea31c82", "metadata": {"aucs": [0.723276293752772, 0.7067902223655351, 0.6968503176625909, 0.7379607085221316, 0.7112728446389729, 0.7288818218468345, 0.7296789530922216, 0.7134332616837673, 0.7253990168013991, 0.5085245583642966, 0.531329942291587, 0.5011408968925257, 0.5060255372642539, 0.5291805201866326, 0.5507049403255551, 0.5276591778957196, 0.5359934243378364, 0.5294321730948193, 0.13773045538186857, 0.1302018592070754, 0.14426141081540977, 0.12196955283651201, 0.12563255768564685, 0.14372423029401926, 0.12167773541291971, 0.13041855400455682, 0.13336498204072633, 0.10609501688490341, 0.11446244780261072, 0.11369495381526995, 0.12424181060311235, 0.11141257089066825, 0.1174851533268857, 0.12000843440249387, 0.10511546271812933, 0.1159547993872938, 0.8929660110923627, 0.8941818219529424, 0.8757250002531621, 0.8688441352412681, 0.8411839606041717, 0.8467075239100674, 0.9564277731414088, 0.8597316285146108, 0.7322483251242985, 0.35210333944908634, 0.34800698481825654, 0.28987685216197834, 0.3528800090747656, 0.3707253069162032, 0.34310602735767004, 0.3311496362452091, 0.33896375409907054, 0.3499453112940152, 0.6760909707600689, 0.7379222706525269, 0.6711792563634601, 0.698791919925317, 0.6723742652856124, 0.7321030632559807, 0.7143022840907699, 0.7047536320772618, 0.6991241272091375, 0.252909408019508, 0.17385107965290192, 0.19877890222384254, 0.18676222945441034, 0.18192511041257375, 0.18560349613429816, 0.14600325687082294, 0.17437514555205402, 0.17992631860591446, 0.17582593262726443, 0.14218841583859065, 0.14816164338632465, 0.2200165705313869, 0.1976332012288885, 0.2549793033011055, 0.1796428280475535, 0.1990889662136155, 0.1837576789476819, 0.2907447128519284, 0.2818247414031544, 0.285695112245704, 0.27391064628045014, 0.28689523104251324, 0.2943191530330753, 0.313786749498864, 0.32232473685963037, 0.26772565321212416, 0.3807287577750498, 0.40430775789701523, 0.39040433449456236, 0.4247839762376848, 0.3911989025187491, 0.42387417993381116, 0.4516795516918731, 0.4655850985395463, 0.43513553315217013, 0.08278113277954147, 0.11927518007705717, 0.12172252742605538, 0.08380980585375075, 0.14619450014445468, 0.13566135763469755, 0.09386039172559701, 0.08984928159688788, 0.16577588074039484, 0.23949046408214225, 0.24063360480007745, 0.2148160016802333, 0.24324535180436846, 0.24976067431333915, 0.28460993459871675, 0.2319758865978354, 0.23881145743167898, 0.23986513735369785, 0.6042526073405005, 0.6072132138678417, 0.6145234351592841, 0.6069338077235791, 0.6289971816920674, 0.6046360222845432, 0.605766370676037, 0.5985056216185886, 0.6165986262874332, 0.09927414488763064, 0.09786343249291785, 0.1111350257625856, 0.10847135884575787, 0.10156282716012488, 0.10161090295584285, 0.09141688948267734, 0.09631103044355838, 0.10180457742127635, 0.16736905288526882, 0.1536807790556486, 0.15075028735192542, 0.16928519550250243, 0.14565576184484652, 0.1657944017149352, 0.15437448514086827, 0.1423082162005167, 0.1346797883402402, 0.35576447033170455, 0.3565335735910571, 0.3658386394813028, 0.3729740242333658, 0.36945965150344096, 0.38494174087999256, 0.38138787684189224, 0.38557800909024975, 0.3602845989677873, 0.29278259042105315, 0.29377302639208136, 0.2647352759074706, 0.2695722176073062, 0.26294429168530353, 0.2795776210341727, 0.3026411249447909, 0.2962459243911, 0.31857675324272683, 0.19001081001828346, 0.20089052851932654, 0.19561885060902084, 0.20556766791236103, 0.18899618134547025, 0.1880682474947133, 0.19592238085021363, 0.19136881386592397, 0.1881369685225155, 0.1920366950574972, 0.20894334413346594, 0.19865687763757067, 0.1984133255636551, 0.22641372001077054, 0.20556765944553423, 0.18838615049416896, 0.21293923128937142, 0.20324491253160104, 0.6475532563098656, 0.19524524108422636, 0.636378481893793, 0.5025609846040462, 0.19041949642839595, 0.6051550064637894, 0.6301043407837812, 0.571622129238325, 0.5765595357435916, 0.19203467883910663, 0.20099858456951558, 0.5626745930774848, 0.20001658538532607, 0.6042098393363167, 0.680720029006367, 0.20737065087247897, 0.34465174062529036, 0.20477284221064396, 0.17033294490681983, 0.19871497929778825, 0.19776727502619273, 0.1905102762930344, 0.17959103249583241, 0.19355364462118307, 0.17777104718934933, 0.18572454752254108, 0.22197401448948062, 0.07338156451119648, 0.08216186878616605, 0.08747810360311359, 0.07828792184848066, 0.0774781924112049, 0.07678934346791033, 0.07457052138348297, 0.07994857498361618, 0.07403886443858232]}, "mutation_prompt": null}
{"id": "b0e84a36-6d1c-4ed9-bd55-fab14e952b51", "solution": "import numpy as np\n\nclass AdaptiveHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = max(20 * dim, 10)\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.argsort(fitness)[:self.pop_size//2]\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                self.F = 0.5 + 0.3 * np.sin(np.pi * evals / self.budget)\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.1 + 0.8 * np.abs(np.cos(np.pi * evals / self.budget))\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                if evals % 70 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step_size = (0.02 + 0.98 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step_size * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "AdaptiveHybridDE", "description": "Enhancing local exploration by dynamically adjusting mutation and crossover strategies for improved convergence.", "configspace": "", "generation": 89, "fitness": 0.25487754274529034, "feedback": "The algorithm AdaptiveHybridDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.20.", "error": "", "parent_id": "df91e617-96d2-494e-be4c-acadeea31c82", "metadata": {"aucs": [0.685876299456083, 0.69907318630603, 0.6962417711894316, 0.6984817704814752, 0.7187239592593448, 0.7041426368308141, 0.6897810458001985, 0.7073472421622542, 0.7081854091988529, 0.4518385182603407, 0.4561299283324738, 0.4808786802846263, 0.500087273291214, 0.4756502351824502, 0.49048300554235813, 0.47705515206063054, 0.47309461223435734, 0.4877450157647236, 0.14824413978931517, 0.1611737928142717, 0.1634220615596218, 0.16239797581033177, 0.15340248562065006, 0.15286325623716768, 0.15401543771619142, 0.1646996421101058, 0.16846442353276947, 0.12734922011940453, 0.12390530753380447, 0.13761395112042063, 0.1464655980937719, 0.1239177740795594, 0.14933214679138496, 0.14134175032781426, 0.12550992565479735, 0.12563123806310672, 0.8349018717378449, 0.8627643370152593, 0.8822653803631022, 0.9192885633887085, 0.9362968798506599, 0.8356171113918345, 0.8719064592163568, 0.8830767828040479, 0.8758636087588788, 0.27912175088924496, 0.2572718640719637, 0.23272056910749517, 0.2508703363706868, 0.25235368431747707, 0.28768479873967145, 0.24271901945074292, 0.23739585943647457, 0.23850445451542346, 0.4671600677598514, 0.3174490020538493, 0.4351218224000831, 0.38354779821075236, 0.4424150197495462, 0.49294185130993107, 0.47323245772199696, 0.46161716133050845, 0.4704793227325914, 0.16035302686761876, 0.1830495065917508, 0.15207132810989732, 0.1621293813647826, 0.14302010728954395, 0.1586493466053991, 0.14505317350219216, 0.14203445734229247, 0.14485585649388066, 0.1140623747059808, 0.15901832477973077, 0.13542357538261818, 0.14803004782758167, 0.14947752661509517, 0.13396428142947203, 0.14619420183476228, 0.1881416635642893, 0.13355385884585702, 0.047050070677222, 0.031454662536934075, 0.041116063185061114, 0.022596433676097316, 0.02032614963900814, 0.013963347922385183, 0.0432405117331669, 0.01734741466228984, 0.01880330439836453, 0.16587973285865043, 0.1301768421606586, 0.15887654413142882, 0.19695344626670297, 0.1514665033277215, 0.13245445384395294, 0.1940755714523189, 0.14621472360365684, 0.2175451168270478, 0.02237638140455278, 0.029639327571622576, 0.019191431261903147, 0.028721405275575318, 0.009560977137236248, 0.016789568355723317, 0.02421914018351612, 0.02713262590329557, 0.018061441567361336, 0.10251907025186735, 0.11840012958319224, 0.1224400878772629, 0.1281386958275148, 0.11666368971331009, 0.1399180408386479, 0.11210742476608926, 0.12138650256102168, 0.136293379414419, 0.4786139013833386, 0.4724021697729376, 0.47694550927531165, 0.46134041344312005, 0.4631741187642977, 0.4752568730378365, 0.47376877248514504, 0.4840470622092924, 0.45271186431013943, 0.11772332933533403, 0.10296911437200928, 0.10012502972905113, 0.11083555430861036, 0.10320523282183125, 0.11033076630202909, 0.11255241734463761, 0.10173395076693892, 0.10088797308423669, 0.15823149121303481, 0.160225576754631, 0.12928753492477185, 0.15082540821867985, 0.15106369303421563, 0.16730110787280594, 0.15369844688711332, 0.1409560351939595, 0.14378595958765905, 0.30213594830738877, 0.29897491062610104, 0.30879083976234856, 0.3075427950751324, 0.3169110492603341, 0.3130259843789356, 0.3355056167601206, 0.35520902952017586, 0.34818753883427034, 0.21780651272256912, 0.2218081808102652, 0.24480657716146104, 0.21442123955820858, 0.2073680536777892, 0.22020995793466613, 0.2623607935847092, 0.2563283371181212, 0.2370879392523172, 0.18452688503959813, 0.1908369403391047, 0.1906318515174651, 0.20451032208196962, 0.19247761982805356, 0.17921426927978523, 0.20145951131071238, 0.1973055251350826, 0.22538802115581347, 0.20050691601519577, 0.2072118169420879, 0.21509743563879324, 0.20688625858799436, 0.2597370996784175, 0.2267873453277004, 0.23040212572438534, 0.24145753424565142, 0.24442391517806838, 0.24059775982943787, 0.196413748747568, 0.17746915720659473, 0.17401971929926752, 0.1748037820108107, 0.32842982244695174, 0.5016530232333383, 0.24616779927168397, 0.16990464575202735, 0.20064985658943646, 0.21254555175740297, 0.18780906624966898, 0.264002161689213, 0.19183738457335198, 0.2878607451024987, 0.20207240008809302, 0.20536082605696937, 0.29646096152848544, 0.18067350774748225, 0.17863137623822145, 0.18779472674722442, 0.19171699179796398, 0.18123511036546402, 0.19266674888873137, 0.17850681262497092, 0.19289121555172917, 0.1842632196193782, 0.07901772378579408, 0.0774631910694179, 0.0756249490512213, 0.07641982204972608, 0.0828803475773362, 0.07751103052171171, 0.07695977598827064, 0.07395459404394789, 0.08860171922089921]}, "mutation_prompt": null}
{"id": "720bd977-1f3e-4948-a756-ae1fafa9728c", "solution": "import numpy as np\n\nclass AdaptiveHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = max(20 * dim, 10)\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.argsort(fitness)[:self.pop_size//2]\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                self.F = 0.5 + 0.3 * np.sin(np.pi * evals / self.budget)\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.1 if evals > 0.7 * self.budget else 0.9\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                if evals % 80 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step_size = (0.02 + 0.98 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step_size * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "AdaptiveHybridDE", "description": "Incorporating adaptive population scaling and diversified local search strategies to enhance convergence efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df91e617-96d2-494e-be4c-acadeea31c82", "metadata": {"aucs": [0.723276293752772, 0.7067902223655351, 0.6968503176625909, 0.7379607085221316, 0.7112728446389729, 0.7288818218468345, 0.7296789530922216, 0.7134332616837673, 0.7253990168013991, 0.5085245583642966, 0.531329942291587, 0.5011408968925257, 0.5060255372642539, 0.5291805201866326, 0.5507049403255551, 0.5276591778957196, 0.5359934243378364, 0.5294321730948193, 0.13773045538186857, 0.1302018592070754, 0.14426141081540977, 0.12196955283651201, 0.12563255768564685, 0.14372423029401926, 0.12167773541291971, 0.13041855400455682, 0.13336498204072633, 0.10609501688490341, 0.11446244780261072, 0.11369495381526995, 0.12424181060311235, 0.11141257089066825, 0.1174851533268857, 0.12000843440249387, 0.10511546271812933, 0.1159547993872938, 0.8929660110923627, 0.8941818219529424, 0.8757250002531621, 0.8688441352412681, 0.8411839606041717, 0.8467075239100674, 0.9564277731414088, 0.8597316285146108, 0.7322483251242985, 0.35210333944908634, 0.34800698481825654, 0.28987685216197834, 0.3528800090747656, 0.3707253069162032, 0.34310602735767004, 0.3311496362452091, 0.33896375409907054, 0.3499453112940152, 0.6760909707600689, 0.7379222706525269, 0.6711792563634601, 0.698791919925317, 0.6723742652856124, 0.7321030632559807, 0.7143022840907699, 0.7047536320772618, 0.6991241272091375, 0.252909408019508, 0.17385107965290192, 0.19877890222384254, 0.18676222945441034, 0.18192511041257375, 0.18560349613429816, 0.14600325687082294, 0.17437514555205402, 0.17992631860591446, 0.17582593262726443, 0.14218841583859065, 0.14816164338632465, 0.2200165705313869, 0.1976332012288885, 0.2549793033011055, 0.1796428280475535, 0.1990889662136155, 0.1837576789476819, 0.2907447128519284, 0.2818247414031544, 0.285695112245704, 0.27391064628045014, 0.28689523104251324, 0.2943191530330753, 0.313786749498864, 0.32232473685963037, 0.26772565321212416, 0.3807287577750498, 0.40430775789701523, 0.39040433449456236, 0.4247839762376848, 0.3911989025187491, 0.42387417993381116, 0.4516795516918731, 0.4655850985395463, 0.43513553315217013, 0.08278113277954147, 0.11927518007705717, 0.12172252742605538, 0.08380980585375075, 0.14619450014445468, 0.13566135763469755, 0.09386039172559701, 0.08984928159688788, 0.16577588074039484, 0.23949046408214225, 0.24063360480007745, 0.2148160016802333, 0.24324535180436846, 0.24976067431333915, 0.28460993459871675, 0.2319758865978354, 0.23881145743167898, 0.23986513735369785, 0.6042526073405005, 0.6072132138678417, 0.6145234351592841, 0.6069338077235791, 0.6289971816920674, 0.6046360222845432, 0.605766370676037, 0.5985056216185886, 0.6165986262874332, 0.09927414488763064, 0.09786343249291785, 0.1111350257625856, 0.10847135884575787, 0.10156282716012488, 0.10161090295584285, 0.09141688948267734, 0.09631103044355838, 0.10180457742127635, 0.16736905288526882, 0.1536807790556486, 0.15075028735192542, 0.16928519550250243, 0.14565576184484652, 0.1657944017149352, 0.15437448514086827, 0.1423082162005167, 0.1346797883402402, 0.35576447033170455, 0.3565335735910571, 0.3658386394813028, 0.3729740242333658, 0.36945965150344096, 0.38494174087999256, 0.38138787684189224, 0.38557800909024975, 0.3602845989677873, 0.29278259042105315, 0.29377302639208136, 0.2647352759074706, 0.2695722176073062, 0.26294429168530353, 0.2795776210341727, 0.3026411249447909, 0.2962459243911, 0.31857675324272683, 0.19001081001828346, 0.20089052851932654, 0.19561885060902084, 0.20556766791236103, 0.18899618134547025, 0.1880682474947133, 0.19592238085021363, 0.19136881386592397, 0.1881369685225155, 0.1920366950574972, 0.20894334413346594, 0.19865687763757067, 0.1984133255636551, 0.22641372001077054, 0.20556765944553423, 0.18838615049416896, 0.21293923128937142, 0.20324491253160104, 0.6475532563098656, 0.19524524108422636, 0.636378481893793, 0.5025609846040462, 0.19041949642839595, 0.6051550064637894, 0.6301043407837812, 0.571622129238325, 0.5765595357435916, 0.19203467883910663, 0.20099858456951558, 0.5626745930774848, 0.20001658538532607, 0.6042098393363167, 0.680720029006367, 0.20737065087247897, 0.34465174062529036, 0.20477284221064396, 0.17033294490681983, 0.19871497929778825, 0.19776727502619273, 0.1905102762930344, 0.17959103249583241, 0.19355364462118307, 0.17777104718934933, 0.18572454752254108, 0.22197401448948062, 0.07338156451119648, 0.08216186878616605, 0.08747810360311359, 0.07828792184848066, 0.0774781924112049, 0.07678934346791033, 0.07457052138348297, 0.07994857498361618, 0.07403886443858232]}, "mutation_prompt": null}
{"id": "967cf150-44ff-4f82-881d-ed0fbf593761", "solution": "import numpy as np\n\nclass AdaptiveHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = max(20 * dim, 10)\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.argsort(fitness)[:self.pop_size//2]\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                self.F = 0.5 + 0.3 * np.sin(np.pi * evals / self.budget)\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.1 if evals > 0.7 * self.budget else 0.9\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                if evals % 80 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step_size = (0.02 + 0.98 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step_size * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "AdaptiveHybridDE", "description": "Incorporating adaptive population scaling and diversified local search strategies to enhance convergence efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df91e617-96d2-494e-be4c-acadeea31c82", "metadata": {"aucs": [0.723276293752772, 0.7067902223655351, 0.6968503176625909, 0.7379607085221316, 0.7112728446389729, 0.7288818218468345, 0.7296789530922216, 0.7134332616837673, 0.7253990168013991, 0.5085245583642966, 0.531329942291587, 0.5011408968925257, 0.5060255372642539, 0.5291805201866326, 0.5507049403255551, 0.5276591778957196, 0.5359934243378364, 0.5294321730948193, 0.13773045538186857, 0.1302018592070754, 0.14426141081540977, 0.12196955283651201, 0.12563255768564685, 0.14372423029401926, 0.12167773541291971, 0.13041855400455682, 0.13336498204072633, 0.10609501688490341, 0.11446244780261072, 0.11369495381526995, 0.12424181060311235, 0.11141257089066825, 0.1174851533268857, 0.12000843440249387, 0.10511546271812933, 0.1159547993872938, 0.8929660110923627, 0.8941818219529424, 0.8757250002531621, 0.8688441352412681, 0.8411839606041717, 0.8467075239100674, 0.9564277731414088, 0.8597316285146108, 0.7322483251242985, 0.35210333944908634, 0.34800698481825654, 0.28987685216197834, 0.3528800090747656, 0.3707253069162032, 0.34310602735767004, 0.3311496362452091, 0.33896375409907054, 0.3499453112940152, 0.6760909707600689, 0.7379222706525269, 0.6711792563634601, 0.698791919925317, 0.6723742652856124, 0.7321030632559807, 0.7143022840907699, 0.7047536320772618, 0.6991241272091375, 0.252909408019508, 0.17385107965290192, 0.19877890222384254, 0.18676222945441034, 0.18192511041257375, 0.18560349613429816, 0.14600325687082294, 0.17437514555205402, 0.17992631860591446, 0.17582593262726443, 0.14218841583859065, 0.14816164338632465, 0.2200165705313869, 0.1976332012288885, 0.2549793033011055, 0.1796428280475535, 0.1990889662136155, 0.1837576789476819, 0.2907447128519284, 0.2818247414031544, 0.285695112245704, 0.27391064628045014, 0.28689523104251324, 0.2943191530330753, 0.313786749498864, 0.32232473685963037, 0.26772565321212416, 0.3807287577750498, 0.40430775789701523, 0.39040433449456236, 0.4247839762376848, 0.3911989025187491, 0.42387417993381116, 0.4516795516918731, 0.4655850985395463, 0.43513553315217013, 0.08278113277954147, 0.11927518007705717, 0.12172252742605538, 0.08380980585375075, 0.14619450014445468, 0.13566135763469755, 0.09386039172559701, 0.08984928159688788, 0.16577588074039484, 0.23949046408214225, 0.24063360480007745, 0.2148160016802333, 0.24324535180436846, 0.24976067431333915, 0.28460993459871675, 0.2319758865978354, 0.23881145743167898, 0.23986513735369785, 0.6042526073405005, 0.6072132138678417, 0.6145234351592841, 0.6069338077235791, 0.6289971816920674, 0.6046360222845432, 0.605766370676037, 0.5985056216185886, 0.6165986262874332, 0.09927414488763064, 0.09786343249291785, 0.1111350257625856, 0.10847135884575787, 0.10156282716012488, 0.10161090295584285, 0.09141688948267734, 0.09631103044355838, 0.10180457742127635, 0.16736905288526882, 0.1536807790556486, 0.15075028735192542, 0.16928519550250243, 0.14565576184484652, 0.1657944017149352, 0.15437448514086827, 0.1423082162005167, 0.1346797883402402, 0.35576447033170455, 0.3565335735910571, 0.3658386394813028, 0.3729740242333658, 0.36945965150344096, 0.38494174087999256, 0.38138787684189224, 0.38557800909024975, 0.3602845989677873, 0.29278259042105315, 0.29377302639208136, 0.2647352759074706, 0.2695722176073062, 0.26294429168530353, 0.2795776210341727, 0.3026411249447909, 0.2962459243911, 0.31857675324272683, 0.19001081001828346, 0.20089052851932654, 0.19561885060902084, 0.20556766791236103, 0.18899618134547025, 0.1880682474947133, 0.19592238085021363, 0.19136881386592397, 0.1881369685225155, 0.1920366950574972, 0.20894334413346594, 0.19865687763757067, 0.1984133255636551, 0.22641372001077054, 0.20556765944553423, 0.18838615049416896, 0.21293923128937142, 0.20324491253160104, 0.6475532563098656, 0.19524524108422636, 0.636378481893793, 0.5025609846040462, 0.19041949642839595, 0.6051550064637894, 0.6301043407837812, 0.571622129238325, 0.5765595357435916, 0.19203467883910663, 0.20099858456951558, 0.5626745930774848, 0.20001658538532607, 0.6042098393363167, 0.680720029006367, 0.20737065087247897, 0.34465174062529036, 0.20477284221064396, 0.17033294490681983, 0.19871497929778825, 0.19776727502619273, 0.1905102762930344, 0.17959103249583241, 0.19355364462118307, 0.17777104718934933, 0.18572454752254108, 0.22197401448948062, 0.07338156451119648, 0.08216186878616605, 0.08747810360311359, 0.07828792184848066, 0.0774781924112049, 0.07678934346791033, 0.07457052138348297, 0.07994857498361618, 0.07403886443858232]}, "mutation_prompt": null}
{"id": "b7f20f76-0b1a-4dae-95c2-e874b9908c34", "solution": "import numpy as np\n\nclass AdaptiveHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = max(20 * dim, 10)\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.argsort(fitness)[:self.pop_size//2]\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                self.F = 0.5 + 0.3 * np.sin(np.pi * evals / self.budget)\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.1 if evals > 0.7 * self.budget else 0.9\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                if evals % 80 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step_size = (0.02 + 0.98 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step_size * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "AdaptiveHybridDE", "description": "Incorporating adaptive population scaling and diversified local search strategies to enhance convergence efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df91e617-96d2-494e-be4c-acadeea31c82", "metadata": {"aucs": [0.723276293752772, 0.7067902223655351, 0.6968503176625909, 0.7379607085221316, 0.7112728446389729, 0.7288818218468345, 0.7296789530922216, 0.7134332616837673, 0.7253990168013991, 0.5085245583642966, 0.531329942291587, 0.5011408968925257, 0.5060255372642539, 0.5291805201866326, 0.5507049403255551, 0.5276591778957196, 0.5359934243378364, 0.5294321730948193, 0.13773045538186857, 0.1302018592070754, 0.14426141081540977, 0.12196955283651201, 0.12563255768564685, 0.14372423029401926, 0.12167773541291971, 0.13041855400455682, 0.13336498204072633, 0.10609501688490341, 0.11446244780261072, 0.11369495381526995, 0.12424181060311235, 0.11141257089066825, 0.1174851533268857, 0.12000843440249387, 0.10511546271812933, 0.1159547993872938, 0.8929660110923627, 0.8941818219529424, 0.8757250002531621, 0.8688441352412681, 0.8411839606041717, 0.8467075239100674, 0.9564277731414088, 0.8597316285146108, 0.7322483251242985, 0.35210333944908634, 0.34800698481825654, 0.28987685216197834, 0.3528800090747656, 0.3707253069162032, 0.34310602735767004, 0.3311496362452091, 0.33896375409907054, 0.3499453112940152, 0.6760909707600689, 0.7379222706525269, 0.6711792563634601, 0.698791919925317, 0.6723742652856124, 0.7321030632559807, 0.7143022840907699, 0.7047536320772618, 0.6991241272091375, 0.252909408019508, 0.17385107965290192, 0.19877890222384254, 0.18676222945441034, 0.18192511041257375, 0.18560349613429816, 0.14600325687082294, 0.17437514555205402, 0.17992631860591446, 0.17582593262726443, 0.14218841583859065, 0.14816164338632465, 0.2200165705313869, 0.1976332012288885, 0.2549793033011055, 0.1796428280475535, 0.1990889662136155, 0.1837576789476819, 0.2907447128519284, 0.2818247414031544, 0.285695112245704, 0.27391064628045014, 0.28689523104251324, 0.2943191530330753, 0.313786749498864, 0.32232473685963037, 0.26772565321212416, 0.3807287577750498, 0.40430775789701523, 0.39040433449456236, 0.4247839762376848, 0.3911989025187491, 0.42387417993381116, 0.4516795516918731, 0.4655850985395463, 0.43513553315217013, 0.08278113277954147, 0.11927518007705717, 0.12172252742605538, 0.08380980585375075, 0.14619450014445468, 0.13566135763469755, 0.09386039172559701, 0.08984928159688788, 0.16577588074039484, 0.23949046408214225, 0.24063360480007745, 0.2148160016802333, 0.24324535180436846, 0.24976067431333915, 0.28460993459871675, 0.2319758865978354, 0.23881145743167898, 0.23986513735369785, 0.6042526073405005, 0.6072132138678417, 0.6145234351592841, 0.6069338077235791, 0.6289971816920674, 0.6046360222845432, 0.605766370676037, 0.5985056216185886, 0.6165986262874332, 0.09927414488763064, 0.09786343249291785, 0.1111350257625856, 0.10847135884575787, 0.10156282716012488, 0.10161090295584285, 0.09141688948267734, 0.09631103044355838, 0.10180457742127635, 0.16736905288526882, 0.1536807790556486, 0.15075028735192542, 0.16928519550250243, 0.14565576184484652, 0.1657944017149352, 0.15437448514086827, 0.1423082162005167, 0.1346797883402402, 0.35576447033170455, 0.3565335735910571, 0.3658386394813028, 0.3729740242333658, 0.36945965150344096, 0.38494174087999256, 0.38138787684189224, 0.38557800909024975, 0.3602845989677873, 0.29278259042105315, 0.29377302639208136, 0.2647352759074706, 0.2695722176073062, 0.26294429168530353, 0.2795776210341727, 0.3026411249447909, 0.2962459243911, 0.31857675324272683, 0.19001081001828346, 0.20089052851932654, 0.19561885060902084, 0.20556766791236103, 0.18899618134547025, 0.1880682474947133, 0.19592238085021363, 0.19136881386592397, 0.1881369685225155, 0.1920366950574972, 0.20894334413346594, 0.19865687763757067, 0.1984133255636551, 0.22641372001077054, 0.20556765944553423, 0.18838615049416896, 0.21293923128937142, 0.20324491253160104, 0.6475532563098656, 0.19524524108422636, 0.636378481893793, 0.5025609846040462, 0.19041949642839595, 0.6051550064637894, 0.6301043407837812, 0.571622129238325, 0.5765595357435916, 0.19203467883910663, 0.20099858456951558, 0.5626745930774848, 0.20001658538532607, 0.6042098393363167, 0.680720029006367, 0.20737065087247897, 0.34465174062529036, 0.20477284221064396, 0.17033294490681983, 0.19871497929778825, 0.19776727502619273, 0.1905102762930344, 0.17959103249583241, 0.19355364462118307, 0.17777104718934933, 0.18572454752254108, 0.22197401448948062, 0.07338156451119648, 0.08216186878616605, 0.08747810360311359, 0.07828792184848066, 0.0774781924112049, 0.07678934346791033, 0.07457052138348297, 0.07994857498361618, 0.07403886443858232]}, "mutation_prompt": null}
{"id": "3d4ca84b-1345-4cf5-8357-a70a7ed27509", "solution": "import numpy as np\n\nclass AdaptiveHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = max(20 * dim, 10)\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.argsort(fitness)[:self.pop_size//2]\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                self.F = 0.5 + 0.3 * np.sin(np.pi * evals / self.budget)\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.1 if evals > 0.7 * self.budget else 0.9\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                if evals % 80 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step_size = (0.02 + 0.98 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step_size * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "AdaptiveHybridDE", "description": "Incorporating adaptive population scaling and diversified local search strategies to enhance convergence efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df91e617-96d2-494e-be4c-acadeea31c82", "metadata": {"aucs": [0.723276293752772, 0.7067902223655351, 0.6968503176625909, 0.7379607085221316, 0.7112728446389729, 0.7288818218468345, 0.7296789530922216, 0.7134332616837673, 0.7253990168013991, 0.5085245583642966, 0.531329942291587, 0.5011408968925257, 0.5060255372642539, 0.5291805201866326, 0.5507049403255551, 0.5276591778957196, 0.5359934243378364, 0.5294321730948193, 0.13773045538186857, 0.1302018592070754, 0.14426141081540977, 0.12196955283651201, 0.12563255768564685, 0.14372423029401926, 0.12167773541291971, 0.13041855400455682, 0.13336498204072633, 0.10609501688490341, 0.11446244780261072, 0.11369495381526995, 0.12424181060311235, 0.11141257089066825, 0.1174851533268857, 0.12000843440249387, 0.10511546271812933, 0.1159547993872938, 0.8929660110923627, 0.8941818219529424, 0.8757250002531621, 0.8688441352412681, 0.8411839606041717, 0.8467075239100674, 0.9564277731414088, 0.8597316285146108, 0.7322483251242985, 0.35210333944908634, 0.34800698481825654, 0.28987685216197834, 0.3528800090747656, 0.3707253069162032, 0.34310602735767004, 0.3311496362452091, 0.33896375409907054, 0.3499453112940152, 0.6760909707600689, 0.7379222706525269, 0.6711792563634601, 0.698791919925317, 0.6723742652856124, 0.7321030632559807, 0.7143022840907699, 0.7047536320772618, 0.6991241272091375, 0.252909408019508, 0.17385107965290192, 0.19877890222384254, 0.18676222945441034, 0.18192511041257375, 0.18560349613429816, 0.14600325687082294, 0.17437514555205402, 0.17992631860591446, 0.17582593262726443, 0.14218841583859065, 0.14816164338632465, 0.2200165705313869, 0.1976332012288885, 0.2549793033011055, 0.1796428280475535, 0.1990889662136155, 0.1837576789476819, 0.2907447128519284, 0.2818247414031544, 0.285695112245704, 0.27391064628045014, 0.28689523104251324, 0.2943191530330753, 0.313786749498864, 0.32232473685963037, 0.26772565321212416, 0.3807287577750498, 0.40430775789701523, 0.39040433449456236, 0.4247839762376848, 0.3911989025187491, 0.42387417993381116, 0.4516795516918731, 0.4655850985395463, 0.43513553315217013, 0.08278113277954147, 0.11927518007705717, 0.12172252742605538, 0.08380980585375075, 0.14619450014445468, 0.13566135763469755, 0.09386039172559701, 0.08984928159688788, 0.16577588074039484, 0.23949046408214225, 0.24063360480007745, 0.2148160016802333, 0.24324535180436846, 0.24976067431333915, 0.28460993459871675, 0.2319758865978354, 0.23881145743167898, 0.23986513735369785, 0.6042526073405005, 0.6072132138678417, 0.6145234351592841, 0.6069338077235791, 0.6289971816920674, 0.6046360222845432, 0.605766370676037, 0.5985056216185886, 0.6165986262874332, 0.09927414488763064, 0.09786343249291785, 0.1111350257625856, 0.10847135884575787, 0.10156282716012488, 0.10161090295584285, 0.09141688948267734, 0.09631103044355838, 0.10180457742127635, 0.16736905288526882, 0.1536807790556486, 0.15075028735192542, 0.16928519550250243, 0.14565576184484652, 0.1657944017149352, 0.15437448514086827, 0.1423082162005167, 0.1346797883402402, 0.35576447033170455, 0.3565335735910571, 0.3658386394813028, 0.3729740242333658, 0.36945965150344096, 0.38494174087999256, 0.38138787684189224, 0.38557800909024975, 0.3602845989677873, 0.29278259042105315, 0.29377302639208136, 0.2647352759074706, 0.2695722176073062, 0.26294429168530353, 0.2795776210341727, 0.3026411249447909, 0.2962459243911, 0.31857675324272683, 0.19001081001828346, 0.20089052851932654, 0.19561885060902084, 0.20556766791236103, 0.18899618134547025, 0.1880682474947133, 0.19592238085021363, 0.19136881386592397, 0.1881369685225155, 0.1920366950574972, 0.20894334413346594, 0.19865687763757067, 0.1984133255636551, 0.22641372001077054, 0.20556765944553423, 0.18838615049416896, 0.21293923128937142, 0.20324491253160104, 0.6475532563098656, 0.19524524108422636, 0.636378481893793, 0.5025609846040462, 0.19041949642839595, 0.6051550064637894, 0.6301043407837812, 0.571622129238325, 0.5765595357435916, 0.19203467883910663, 0.20099858456951558, 0.5626745930774848, 0.20001658538532607, 0.6042098393363167, 0.680720029006367, 0.20737065087247897, 0.34465174062529036, 0.20477284221064396, 0.17033294490681983, 0.19871497929778825, 0.19776727502619273, 0.1905102762930344, 0.17959103249583241, 0.19355364462118307, 0.17777104718934933, 0.18572454752254108, 0.22197401448948062, 0.07338156451119648, 0.08216186878616605, 0.08747810360311359, 0.07828792184848066, 0.0774781924112049, 0.07678934346791033, 0.07457052138348297, 0.07994857498361618, 0.07403886443858232]}, "mutation_prompt": null}
{"id": "ed359550-5912-4744-b358-cc5df4d9bc98", "solution": "import numpy as np\n\nclass AdaptiveHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = max(20 * dim, 10)\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.argsort(fitness)[:self.pop_size//2]\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                self.F = 0.5 + 0.3 * np.sin(np.pi * evals / self.budget)\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.1 if evals > 0.7 * self.budget else 0.9\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                if evals % 80 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step_size = (0.02 + 0.98 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step_size * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "AdaptiveHybridDE", "description": "Incorporating adaptive population scaling and diversified local search strategies to enhance convergence efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df91e617-96d2-494e-be4c-acadeea31c82", "metadata": {"aucs": [0.723276293752772, 0.7067902223655351, 0.6968503176625909, 0.7379607085221316, 0.7112728446389729, 0.7288818218468345, 0.7296789530922216, 0.7134332616837673, 0.7253990168013991, 0.5085245583642966, 0.531329942291587, 0.5011408968925257, 0.5060255372642539, 0.5291805201866326, 0.5507049403255551, 0.5276591778957196, 0.5359934243378364, 0.5294321730948193, 0.13773045538186857, 0.1302018592070754, 0.14426141081540977, 0.12196955283651201, 0.12563255768564685, 0.14372423029401926, 0.12167773541291971, 0.13041855400455682, 0.13336498204072633, 0.10609501688490341, 0.11446244780261072, 0.11369495381526995, 0.12424181060311235, 0.11141257089066825, 0.1174851533268857, 0.12000843440249387, 0.10511546271812933, 0.1159547993872938, 0.8929660110923627, 0.8941818219529424, 0.8757250002531621, 0.8688441352412681, 0.8411839606041717, 0.8467075239100674, 0.9564277731414088, 0.8597316285146108, 0.7322483251242985, 0.35210333944908634, 0.34800698481825654, 0.28987685216197834, 0.3528800090747656, 0.3707253069162032, 0.34310602735767004, 0.3311496362452091, 0.33896375409907054, 0.3499453112940152, 0.6760909707600689, 0.7379222706525269, 0.6711792563634601, 0.698791919925317, 0.6723742652856124, 0.7321030632559807, 0.7143022840907699, 0.7047536320772618, 0.6991241272091375, 0.252909408019508, 0.17385107965290192, 0.19877890222384254, 0.18676222945441034, 0.18192511041257375, 0.18560349613429816, 0.14600325687082294, 0.17437514555205402, 0.17992631860591446, 0.17582593262726443, 0.14218841583859065, 0.14816164338632465, 0.2200165705313869, 0.1976332012288885, 0.2549793033011055, 0.1796428280475535, 0.1990889662136155, 0.1837576789476819, 0.2907447128519284, 0.2818247414031544, 0.285695112245704, 0.27391064628045014, 0.28689523104251324, 0.2943191530330753, 0.313786749498864, 0.32232473685963037, 0.26772565321212416, 0.3807287577750498, 0.40430775789701523, 0.39040433449456236, 0.4247839762376848, 0.3911989025187491, 0.42387417993381116, 0.4516795516918731, 0.4655850985395463, 0.43513553315217013, 0.08278113277954147, 0.11927518007705717, 0.12172252742605538, 0.08380980585375075, 0.14619450014445468, 0.13566135763469755, 0.09386039172559701, 0.08984928159688788, 0.16577588074039484, 0.23949046408214225, 0.24063360480007745, 0.2148160016802333, 0.24324535180436846, 0.24976067431333915, 0.28460993459871675, 0.2319758865978354, 0.23881145743167898, 0.23986513735369785, 0.6042526073405005, 0.6072132138678417, 0.6145234351592841, 0.6069338077235791, 0.6289971816920674, 0.6046360222845432, 0.605766370676037, 0.5985056216185886, 0.6165986262874332, 0.09927414488763064, 0.09786343249291785, 0.1111350257625856, 0.10847135884575787, 0.10156282716012488, 0.10161090295584285, 0.09141688948267734, 0.09631103044355838, 0.10180457742127635, 0.16736905288526882, 0.1536807790556486, 0.15075028735192542, 0.16928519550250243, 0.14565576184484652, 0.1657944017149352, 0.15437448514086827, 0.1423082162005167, 0.1346797883402402, 0.35576447033170455, 0.3565335735910571, 0.3658386394813028, 0.3729740242333658, 0.36945965150344096, 0.38494174087999256, 0.38138787684189224, 0.38557800909024975, 0.3602845989677873, 0.29278259042105315, 0.29377302639208136, 0.2647352759074706, 0.2695722176073062, 0.26294429168530353, 0.2795776210341727, 0.3026411249447909, 0.2962459243911, 0.31857675324272683, 0.19001081001828346, 0.20089052851932654, 0.19561885060902084, 0.20556766791236103, 0.18899618134547025, 0.1880682474947133, 0.19592238085021363, 0.19136881386592397, 0.1881369685225155, 0.1920366950574972, 0.20894334413346594, 0.19865687763757067, 0.1984133255636551, 0.22641372001077054, 0.20556765944553423, 0.18838615049416896, 0.21293923128937142, 0.20324491253160104, 0.6475532563098656, 0.19524524108422636, 0.636378481893793, 0.5025609846040462, 0.19041949642839595, 0.6051550064637894, 0.6301043407837812, 0.571622129238325, 0.5765595357435916, 0.19203467883910663, 0.20099858456951558, 0.5626745930774848, 0.20001658538532607, 0.6042098393363167, 0.680720029006367, 0.20737065087247897, 0.34465174062529036, 0.20477284221064396, 0.17033294490681983, 0.19871497929778825, 0.19776727502619273, 0.1905102762930344, 0.17959103249583241, 0.19355364462118307, 0.17777104718934933, 0.18572454752254108, 0.22197401448948062, 0.07338156451119648, 0.08216186878616605, 0.08747810360311359, 0.07828792184848066, 0.0774781924112049, 0.07678934346791033, 0.07457052138348297, 0.07994857498361618, 0.07403886443858232]}, "mutation_prompt": null}
{"id": "705c301e-d96d-42e0-b23b-a65a18b05971", "solution": "import numpy as np\n\nclass AdaptiveHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = max(20 * dim, 10)\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.argsort(fitness)[:self.pop_size//2]\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                self.F = 0.5 + 0.3 * np.sin(np.pi * evals / self.budget)\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.1 if evals > 0.7 * self.budget else 0.9\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                if evals % 80 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step_size = (0.02 + 0.98 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step_size * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "AdaptiveHybridDE", "description": "Incorporating adaptive population scaling and diversified local search strategies to enhance convergence efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df91e617-96d2-494e-be4c-acadeea31c82", "metadata": {"aucs": [0.723276293752772, 0.7067902223655351, 0.6968503176625909, 0.7379607085221316, 0.7112728446389729, 0.7288818218468345, 0.7296789530922216, 0.7134332616837673, 0.7253990168013991, 0.5085245583642966, 0.531329942291587, 0.5011408968925257, 0.5060255372642539, 0.5291805201866326, 0.5507049403255551, 0.5276591778957196, 0.5359934243378364, 0.5294321730948193, 0.13773045538186857, 0.1302018592070754, 0.14426141081540977, 0.12196955283651201, 0.12563255768564685, 0.14372423029401926, 0.12167773541291971, 0.13041855400455682, 0.13336498204072633, 0.10609501688490341, 0.11446244780261072, 0.11369495381526995, 0.12424181060311235, 0.11141257089066825, 0.1174851533268857, 0.12000843440249387, 0.10511546271812933, 0.1159547993872938, 0.8929660110923627, 0.8941818219529424, 0.8757250002531621, 0.8688441352412681, 0.8411839606041717, 0.8467075239100674, 0.9564277731414088, 0.8597316285146108, 0.7322483251242985, 0.35210333944908634, 0.34800698481825654, 0.28987685216197834, 0.3528800090747656, 0.3707253069162032, 0.34310602735767004, 0.3311496362452091, 0.33896375409907054, 0.3499453112940152, 0.6760909707600689, 0.7379222706525269, 0.6711792563634601, 0.698791919925317, 0.6723742652856124, 0.7321030632559807, 0.7143022840907699, 0.7047536320772618, 0.6991241272091375, 0.252909408019508, 0.17385107965290192, 0.19877890222384254, 0.18676222945441034, 0.18192511041257375, 0.18560349613429816, 0.14600325687082294, 0.17437514555205402, 0.17992631860591446, 0.17582593262726443, 0.14218841583859065, 0.14816164338632465, 0.2200165705313869, 0.1976332012288885, 0.2549793033011055, 0.1796428280475535, 0.1990889662136155, 0.1837576789476819, 0.2907447128519284, 0.2818247414031544, 0.285695112245704, 0.27391064628045014, 0.28689523104251324, 0.2943191530330753, 0.313786749498864, 0.32232473685963037, 0.26772565321212416, 0.3807287577750498, 0.40430775789701523, 0.39040433449456236, 0.4247839762376848, 0.3911989025187491, 0.42387417993381116, 0.4516795516918731, 0.4655850985395463, 0.43513553315217013, 0.08278113277954147, 0.11927518007705717, 0.12172252742605538, 0.08380980585375075, 0.14619450014445468, 0.13566135763469755, 0.09386039172559701, 0.08984928159688788, 0.16577588074039484, 0.23949046408214225, 0.24063360480007745, 0.2148160016802333, 0.24324535180436846, 0.24976067431333915, 0.28460993459871675, 0.2319758865978354, 0.23881145743167898, 0.23986513735369785, 0.6042526073405005, 0.6072132138678417, 0.6145234351592841, 0.6069338077235791, 0.6289971816920674, 0.6046360222845432, 0.605766370676037, 0.5985056216185886, 0.6165986262874332, 0.09927414488763064, 0.09786343249291785, 0.1111350257625856, 0.10847135884575787, 0.10156282716012488, 0.10161090295584285, 0.09141688948267734, 0.09631103044355838, 0.10180457742127635, 0.16736905288526882, 0.1536807790556486, 0.15075028735192542, 0.16928519550250243, 0.14565576184484652, 0.1657944017149352, 0.15437448514086827, 0.1423082162005167, 0.1346797883402402, 0.35576447033170455, 0.3565335735910571, 0.3658386394813028, 0.3729740242333658, 0.36945965150344096, 0.38494174087999256, 0.38138787684189224, 0.38557800909024975, 0.3602845989677873, 0.29278259042105315, 0.29377302639208136, 0.2647352759074706, 0.2695722176073062, 0.26294429168530353, 0.2795776210341727, 0.3026411249447909, 0.2962459243911, 0.31857675324272683, 0.19001081001828346, 0.20089052851932654, 0.19561885060902084, 0.20556766791236103, 0.18899618134547025, 0.1880682474947133, 0.19592238085021363, 0.19136881386592397, 0.1881369685225155, 0.1920366950574972, 0.20894334413346594, 0.19865687763757067, 0.1984133255636551, 0.22641372001077054, 0.20556765944553423, 0.18838615049416896, 0.21293923128937142, 0.20324491253160104, 0.6475532563098656, 0.19524524108422636, 0.636378481893793, 0.5025609846040462, 0.19041949642839595, 0.6051550064637894, 0.6301043407837812, 0.571622129238325, 0.5765595357435916, 0.19203467883910663, 0.20099858456951558, 0.5626745930774848, 0.20001658538532607, 0.6042098393363167, 0.680720029006367, 0.20737065087247897, 0.34465174062529036, 0.20477284221064396, 0.17033294490681983, 0.19871497929778825, 0.19776727502619273, 0.1905102762930344, 0.17959103249583241, 0.19355364462118307, 0.17777104718934933, 0.18572454752254108, 0.22197401448948062, 0.07338156451119648, 0.08216186878616605, 0.08747810360311359, 0.07828792184848066, 0.0774781924112049, 0.07678934346791033, 0.07457052138348297, 0.07994857498361618, 0.07403886443858232]}, "mutation_prompt": null}
{"id": "d2be2d70-ef65-467e-8d0e-2a627b9eb903", "solution": "import numpy as np\n\nclass AdaptiveHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = max(20 * dim, 10)\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.argsort(fitness)[:self.pop_size//2]\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                self.F = 0.5 + 0.3 * np.sin(np.pi * evals / self.budget)\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.1 if evals > 0.7 * self.budget else 0.9\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                if evals % 80 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step_size = (0.02 + 0.98 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step_size * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "AdaptiveHybridDE", "description": "Incorporating adaptive population scaling and diversified local search strategies to enhance convergence efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df91e617-96d2-494e-be4c-acadeea31c82", "metadata": {"aucs": [0.723276293752772, 0.7067902223655351, 0.6968503176625909, 0.7379607085221316, 0.7112728446389729, 0.7288818218468345, 0.7296789530922216, 0.7134332616837673, 0.7253990168013991, 0.5085245583642966, 0.531329942291587, 0.5011408968925257, 0.5060255372642539, 0.5291805201866326, 0.5507049403255551, 0.5276591778957196, 0.5359934243378364, 0.5294321730948193, 0.13773045538186857, 0.1302018592070754, 0.14426141081540977, 0.12196955283651201, 0.12563255768564685, 0.14372423029401926, 0.12167773541291971, 0.13041855400455682, 0.13336498204072633, 0.10609501688490341, 0.11446244780261072, 0.11369495381526995, 0.12424181060311235, 0.11141257089066825, 0.1174851533268857, 0.12000843440249387, 0.10511546271812933, 0.1159547993872938, 0.8929660110923627, 0.8941818219529424, 0.8757250002531621, 0.8688441352412681, 0.8411839606041717, 0.8467075239100674, 0.9564277731414088, 0.8597316285146108, 0.7322483251242985, 0.35210333944908634, 0.34800698481825654, 0.28987685216197834, 0.3528800090747656, 0.3707253069162032, 0.34310602735767004, 0.3311496362452091, 0.33896375409907054, 0.3499453112940152, 0.6760909707600689, 0.7379222706525269, 0.6711792563634601, 0.698791919925317, 0.6723742652856124, 0.7321030632559807, 0.7143022840907699, 0.7047536320772618, 0.6991241272091375, 0.252909408019508, 0.17385107965290192, 0.19877890222384254, 0.18676222945441034, 0.18192511041257375, 0.18560349613429816, 0.14600325687082294, 0.17437514555205402, 0.17992631860591446, 0.17582593262726443, 0.14218841583859065, 0.14816164338632465, 0.2200165705313869, 0.1976332012288885, 0.2549793033011055, 0.1796428280475535, 0.1990889662136155, 0.1837576789476819, 0.2907447128519284, 0.2818247414031544, 0.285695112245704, 0.27391064628045014, 0.28689523104251324, 0.2943191530330753, 0.313786749498864, 0.32232473685963037, 0.26772565321212416, 0.3807287577750498, 0.40430775789701523, 0.39040433449456236, 0.4247839762376848, 0.3911989025187491, 0.42387417993381116, 0.4516795516918731, 0.4655850985395463, 0.43513553315217013, 0.08278113277954147, 0.11927518007705717, 0.12172252742605538, 0.08380980585375075, 0.14619450014445468, 0.13566135763469755, 0.09386039172559701, 0.08984928159688788, 0.16577588074039484, 0.23949046408214225, 0.24063360480007745, 0.2148160016802333, 0.24324535180436846, 0.24976067431333915, 0.28460993459871675, 0.2319758865978354, 0.23881145743167898, 0.23986513735369785, 0.6042526073405005, 0.6072132138678417, 0.6145234351592841, 0.6069338077235791, 0.6289971816920674, 0.6046360222845432, 0.605766370676037, 0.5985056216185886, 0.6165986262874332, 0.09927414488763064, 0.09786343249291785, 0.1111350257625856, 0.10847135884575787, 0.10156282716012488, 0.10161090295584285, 0.09141688948267734, 0.09631103044355838, 0.10180457742127635, 0.16736905288526882, 0.1536807790556486, 0.15075028735192542, 0.16928519550250243, 0.14565576184484652, 0.1657944017149352, 0.15437448514086827, 0.1423082162005167, 0.1346797883402402, 0.35576447033170455, 0.3565335735910571, 0.3658386394813028, 0.3729740242333658, 0.36945965150344096, 0.38494174087999256, 0.38138787684189224, 0.38557800909024975, 0.3602845989677873, 0.29278259042105315, 0.29377302639208136, 0.2647352759074706, 0.2695722176073062, 0.26294429168530353, 0.2795776210341727, 0.3026411249447909, 0.2962459243911, 0.31857675324272683, 0.19001081001828346, 0.20089052851932654, 0.19561885060902084, 0.20556766791236103, 0.18899618134547025, 0.1880682474947133, 0.19592238085021363, 0.19136881386592397, 0.1881369685225155, 0.1920366950574972, 0.20894334413346594, 0.19865687763757067, 0.1984133255636551, 0.22641372001077054, 0.20556765944553423, 0.18838615049416896, 0.21293923128937142, 0.20324491253160104, 0.6475532563098656, 0.19524524108422636, 0.636378481893793, 0.5025609846040462, 0.19041949642839595, 0.6051550064637894, 0.6301043407837812, 0.571622129238325, 0.5765595357435916, 0.19203467883910663, 0.20099858456951558, 0.5626745930774848, 0.20001658538532607, 0.6042098393363167, 0.680720029006367, 0.20737065087247897, 0.34465174062529036, 0.20477284221064396, 0.17033294490681983, 0.19871497929778825, 0.19776727502619273, 0.1905102762930344, 0.17959103249583241, 0.19355364462118307, 0.17777104718934933, 0.18572454752254108, 0.22197401448948062, 0.07338156451119648, 0.08216186878616605, 0.08747810360311359, 0.07828792184848066, 0.0774781924112049, 0.07678934346791033, 0.07457052138348297, 0.07994857498361618, 0.07403886443858232]}, "mutation_prompt": null}
{"id": "b7a3b76b-6e22-4003-9f54-4baba113f203", "solution": "import numpy as np\n\nclass AdaptiveHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = max(20 * dim, 10)\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.argsort(fitness)[:self.pop_size//2]\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                self.F = 0.5 + 0.3 * np.sin(np.pi * evals / self.budget)\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                # Adaptive crossover rate based on population diversity\n                if np.std(population) < 0.5:\n                    self.CR = 0.9\n                else:\n                    self.CR = 0.2\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                if evals % 80 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step_size = (0.02 + 0.98 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step_size * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "AdaptiveHybridDE", "description": "Introducing an adaptive crossover rate adjustment based on current population diversity to enhance exploration capabilities.", "configspace": "", "generation": 97, "fitness": 0.22123389319781925, "feedback": "The algorithm AdaptiveHybridDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "df91e617-96d2-494e-be4c-acadeea31c82", "metadata": {"aucs": [0.6639521716379816, 0.6423610598390705, 0.6300365654324454, 0.6493840305652883, 0.635849993280139, 0.6452368255798642, 0.6372796530758656, 0.6670384488580113, 0.6373938707786256, 0.3634605600923547, 0.3900604019181403, 0.39135766623175294, 0.373370036882236, 0.3997888478623579, 0.38654065266152815, 0.37417483531425066, 0.3415530865396912, 0.37805039643280947, 0.2517841013199271, 0.21516381558775588, 0.22335729032693985, 0.19557881497402219, 0.18795178706704352, 0.24447090684188788, 0.23860193109566463, 0.2214012906117916, 0.2393612387675087, 0.16417139767462707, 0.16363489040456203, 0.16347782304266933, 0.16064706317545896, 0.19044250220807613, 0.18731917613927285, 0.1679662854654589, 0.15071951762954416, 0.1983034759638176, 0.8936660742308651, 0.8963867607932094, 0.9047607186048059, 0.9266916875827843, 0.8879402182319083, 0.8844937580158233, 0.9146818899277634, 0.8847966797403288, 0.9104270143289581, 0.18387547624344247, 0.16579343893593124, 0.15391217957006997, 0.20641919603057746, 0.1756469689541269, 0.16603158628946202, 0.16306766941002349, 0.15909520207738137, 0.1595911241209267, 0.18905546230361914, 0.18433183589980207, 0.17930118868335942, 0.24968585734030202, 0.2169085824316208, 0.26810761803456484, 0.21714810181747624, 0.22335646694986666, 0.21844187896820444, 0.11414103981632562, 0.12710129664643066, 0.1345964064880364, 0.12783653571647102, 0.12236675792978136, 0.12082103512787612, 0.14077756348165982, 0.14315581435776326, 0.14433298902212277, 0.12546726433600774, 0.134455511522234, 0.12495546911994859, 0.11787450308199354, 0.1285422294243912, 0.14490013628307097, 0.11343977509771352, 0.12361480461504548, 0.12013290869103022, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0619052983552707, 0.06383566134463436, 0.09645318867113672, 0.052618686694443695, 0.0451177760129573, 0.05381289389829358, 0.055763210132269925, 0.06774572676572099, 0.058392680842271893, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0043422799272800905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07066227590114793, 0.05777343327414197, 0.06742856212605253, 0.09492541502392904, 0.08287009033813808, 0.06520946621030144, 0.07852202655496299, 0.06529313759593858, 0.0686176689643484, 0.41661750388699936, 0.39177062313643707, 0.4365084904450002, 0.39270301310391253, 0.4223787452413419, 0.4081568046423333, 0.38919318153749705, 0.4170429811705245, 0.42908488212185014, 0.09379378813488148, 0.09770682914098283, 0.09801725587360544, 0.08875492354255732, 0.08766497328472944, 0.09006584745108737, 0.10569798430016086, 0.08950015882957718, 0.08516895402944924, 0.14653195288176724, 0.14522109595661747, 0.1588364849590116, 0.1427247819630184, 0.16110089984948117, 0.1481732442118553, 0.13513356310089164, 0.14083685622404285, 0.1562862045243124, 0.2278379037387097, 0.24361985701507738, 0.24268714584993456, 0.24868157929495915, 0.23325745929597008, 0.22442961769862002, 0.27739829578530417, 0.27479635919473855, 0.2572918589562113, 0.18405231115431642, 0.1762093503041453, 0.18158313840336382, 0.1707244020623344, 0.17624976034799789, 0.16579727427824986, 0.18331877642246686, 0.16564778651017464, 0.16933007675775658, 0.20422948607548574, 0.18152662179140244, 0.18486621534088732, 0.1970254354812766, 0.18691093685794613, 0.21832335229040434, 0.1970281995799692, 0.2026767768317922, 0.18747256540030044, 0.2126024007000753, 0.21883089703543102, 0.20489346300136535, 0.21944632263738695, 0.2115374519154607, 0.20672818517983915, 0.21457412804685605, 0.19321317459633147, 0.231552138385686, 0.24079583707687802, 0.21404388864868829, 0.20128693828642485, 0.2507265388114206, 0.24636945381741926, 0.24505420151078539, 0.21005982448042748, 0.21750202954413367, 0.31144263220178325, 0.2343740980850516, 0.21447689848335116, 0.238297310014027, 0.31814278121301875, 0.16840369918581, 0.2011796720586171, 0.25374015819222473, 0.2596452831884254, 0.1817562989977809, 0.17256569804580502, 0.18394617966397486, 0.20104760115994413, 0.20209456048187657, 0.18086241717756124, 0.19265981898556805, 0.19155831646676247, 0.17796260825196664, 0.18829191069235685, 0.07487144040620919, 0.06918719482281921, 0.08022128586805266, 0.0790223505545502, 0.07090455157826148, 0.06924776291600232, 0.06902888307917843, 0.07444248095071848, 0.0739270318821389]}, "mutation_prompt": null}
{"id": "69b6bda5-6738-4783-a809-2829c4e95738", "solution": "import numpy as np\n\nclass AdaptiveHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = max(20 * dim, 10)\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.argsort(fitness)[:self.pop_size//2]\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                self.F = 0.5 + 0.4 * np.sin(np.pi * evals / self.budget)  # Slight increase in mutation factor range\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.1 if evals > 0.7 * self.budget else 0.9\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                if evals % 80 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step_size = (0.02 + 0.98 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step_size * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "AdaptiveHybridDE", "description": "Enhancing search diversity and exploration control through dynamic mutation factor adjustment based on evaluation progress.", "configspace": "", "generation": 98, "fitness": 0.3199018494197801, "feedback": "The algorithm AdaptiveHybridDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.22.", "error": "", "parent_id": "df91e617-96d2-494e-be4c-acadeea31c82", "metadata": {"aucs": [0.6784341382976112, 0.7095733501745558, 0.6863527948449479, 0.6895147443347215, 0.6937911144018086, 0.7186071503974867, 0.716260600532583, 0.694301797659475, 0.6984939628969112, 0.4854286327781563, 0.5030345436115982, 0.5028746026099, 0.48096770222399743, 0.51239463080034, 0.48332846752944847, 0.48772674051879406, 0.4978118180070139, 0.5029861535899942, 0.1289852109115025, 0.12609497692519256, 0.13168081654790553, 0.13334193744115963, 0.1330593551935364, 0.12905641482169317, 0.13134634098860476, 0.13107727868477903, 0.12713687381627437, 0.11191670004690113, 0.10583760252444041, 0.11967839227763166, 0.10672690201848312, 0.10186215905426721, 0.1090075970506248, 0.11260305550853877, 0.11743152528805256, 0.11224971867482181, 0.8034221202501091, 0.9028173138854395, 0.918963621368606, 0.8515860691520489, 0.8990115448228558, 0.9147877449178784, 0.9236353003061698, 0.8966270004381367, 0.8857910842081423, 0.3481504988040828, 0.3245636314416438, 0.28861845231886696, 0.3175353843218016, 0.3122184351925761, 0.3212689665440165, 0.34139819277884076, 0.3272960711849461, 0.35441041445694976, 0.6420187730840473, 0.6884125773790772, 0.6580640537986214, 0.6773198625545436, 0.6719120654605691, 0.6642375725021863, 0.6378589027517683, 0.7052617984105912, 0.7018481539768199, 0.1923269786861982, 0.17332712407209605, 0.17278938369641272, 0.208290782492898, 0.18845930834951485, 0.19004611175521746, 0.18879553278582917, 0.2158204031131804, 0.15273776273369, 0.14410970562788883, 0.3008015261247238, 0.14191460755098373, 0.19361141585144792, 0.1730945853895799, 0.21111856590878864, 0.18398930356087795, 0.26931768790850297, 0.19446787095092544, 0.26150858711322, 0.2556075287285037, 0.24121070124096855, 0.2794737888853347, 0.22470059909337348, 0.2536433659349655, 0.25229692282913196, 0.22449063210464526, 0.24309972482582165, 0.4011981644342335, 0.40743557254926943, 0.43821777310218435, 0.39842247838773237, 0.3620534961628532, 0.4024392410573804, 0.3731859335240234, 0.42094123480342915, 0.3881285488187244, 0.09903224891131268, 0.061761652118909494, 0.10444103927341564, 0.10706019212916018, 0.07592801826166129, 0.11111802669397197, 0.1287844702859927, 0.09141518471909671, 0.12775508131858837, 0.24233241551541473, 0.20456884304738754, 0.21655758374879863, 0.21100562780948007, 0.21289935573198338, 0.2596240200351796, 0.2208057860577013, 0.2080346438154086, 0.23156171392606706, 0.5806025525042178, 0.6023164377789643, 0.58366055141097, 0.5678401166868272, 0.5967271092599991, 0.6295433936378589, 0.6041481061642383, 0.5545636170050876, 0.5809078280530624, 0.09473600831143181, 0.11539035690655897, 0.09953203239907893, 0.10727335033981034, 0.09541389919918075, 0.10089902743127332, 0.08825020524811478, 0.09574628541046826, 0.0928387113510949, 0.1600485683048295, 0.14415780234683007, 0.14104017850521522, 0.1711352154060345, 0.27258765503964266, 0.14432782864176752, 0.13840624271870294, 0.1426838437181941, 0.14788839310369495, 0.33552699079048676, 0.3494954801821937, 0.34640438237174354, 0.3417330970897622, 0.34298458918430963, 0.36023325538516815, 0.36674380221302805, 0.3664409761536205, 0.35574155484013303, 0.2653615856052868, 0.2628700519283328, 0.2574655691157045, 0.25538918542569045, 0.2668772757440083, 0.2604417961308281, 0.2896690576606763, 0.2885792752006966, 0.2606418073248151, 0.1817734931680376, 0.19794767781152145, 0.21126637505588453, 0.1844468119598358, 0.1877176737470877, 0.18914714321810067, 0.19931382584298651, 0.21465480733271647, 0.19687589556568652, 0.20519345401041267, 0.19541312491242613, 0.2283483383407111, 0.1976734158411405, 0.1907073463038057, 0.21891316179390974, 0.19246169002372526, 0.19878235226320218, 0.20009897729572923, 0.5546737914055621, 0.1811493377865211, 0.7015137842496433, 0.5154710749503182, 0.17241012527931976, 0.37454000162700607, 0.6306896244833089, 0.5858114045779811, 0.17358291785455926, 0.5743271131214355, 0.20080899159423515, 0.5781057853153746, 0.5717558915958849, 0.23238610552533978, 0.18767527654416838, 0.2018939887139226, 0.6589033076500777, 0.7157283046481993, 0.18250110060344493, 0.18791405433585173, 0.17263912641355106, 0.1825545148277914, 0.1789639016681911, 0.18544717847853998, 0.19229735572704199, 0.1760112304322029, 0.17816033887067295, 0.07611276091535513, 0.07952545299926717, 0.07499919850311854, 0.07232476424265422, 0.08836398039182658, 0.07925830477877738, 0.08951578552481987, 0.07645240415288668, 0.0705603183179273]}, "mutation_prompt": null}
{"id": "245c27bb-4449-40f6-a4c5-6f0e5db054fc", "solution": "import numpy as np\n\nclass AdaptiveHybridDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = max(20 * dim, 10)\n        self.F = 0.8\n        self.CR = 0.9\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        \n    def __call__(self, func):\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in population])\n        evals = self.pop_size\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx]\n        \n        while evals < self.budget:\n            for i in range(self.pop_size):\n                indices = np.argsort(fitness)[:self.pop_size//2]\n                if i in indices:\n                    a, b, c = population[np.random.choice(indices, 3, replace=False)]\n                else:\n                    a, b, c = population[np.random.choice(self.pop_size, 3, replace=False)]\n                \n                decay = 1 - evals / self.budget\n                self.F = 0.5 + 0.3 * np.sin(np.pi * evals / self.budget)\n                mutant = np.clip(a + self.F * decay * (b - c), self.lower_bound, self.upper_bound)\n                \n                self.CR = 0.1 if evals > 0.7 * self.budget else 0.9\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                crossover_mask[np.random.randint(0, self.dim)] = True\n                trial = np.where(crossover_mask, mutant, population[i])\n                \n                trial_fitness = func(trial)\n                evals += 1\n                \n                if trial_fitness < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = trial_fitness\n                    if trial_fitness < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial\n                \n                if evals % 80 == 0:\n                    direction = np.random.uniform(-1.0, 1.0, self.dim)\n                    step_size = (0.02 + 0.98 * (evals / self.budget)) * (self.upper_bound - self.lower_bound)\n                    local_trial = np.clip(best_solution + step_size * direction, self.lower_bound, self.upper_bound)\n                    local_fitness = func(local_trial)\n                    evals += 1\n                    if local_fitness < fitness[best_idx]:\n                        best_solution = local_trial\n                        fitness[best_idx] = local_fitness\n        \n        return best_solution", "name": "AdaptiveHybridDE", "description": "Incorporating adaptive population scaling and diversified local search strategies to enhance convergence efficiency.", "configspace": "", "generation": 64, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "df91e617-96d2-494e-be4c-acadeea31c82", "metadata": {"aucs": [0.723276293752772, 0.7067902223655351, 0.6968503176625909, 0.7379607085221316, 0.7112728446389729, 0.7288818218468345, 0.7296789530922216, 0.7134332616837673, 0.7253990168013991, 0.5085245583642966, 0.531329942291587, 0.5011408968925257, 0.5060255372642539, 0.5291805201866326, 0.5507049403255551, 0.5276591778957196, 0.5359934243378364, 0.5294321730948193, 0.13773045538186857, 0.1302018592070754, 0.14426141081540977, 0.12196955283651201, 0.12563255768564685, 0.14372423029401926, 0.12167773541291971, 0.13041855400455682, 0.13336498204072633, 0.10609501688490341, 0.11446244780261072, 0.11369495381526995, 0.12424181060311235, 0.11141257089066825, 0.1174851533268857, 0.12000843440249387, 0.10511546271812933, 0.1159547993872938, 0.8929660110923627, 0.8941818219529424, 0.8757250002531621, 0.8688441352412681, 0.8411839606041717, 0.8467075239100674, 0.9564277731414088, 0.8597316285146108, 0.7322483251242985, 0.35210333944908634, 0.34800698481825654, 0.28987685216197834, 0.3528800090747656, 0.3707253069162032, 0.34310602735767004, 0.3311496362452091, 0.33896375409907054, 0.3499453112940152, 0.6760909707600689, 0.7379222706525269, 0.6711792563634601, 0.698791919925317, 0.6723742652856124, 0.7321030632559807, 0.7143022840907699, 0.7047536320772618, 0.6991241272091375, 0.252909408019508, 0.17385107965290192, 0.19877890222384254, 0.18676222945441034, 0.18192511041257375, 0.18560349613429816, 0.14600325687082294, 0.17437514555205402, 0.17992631860591446, 0.17582593262726443, 0.14218841583859065, 0.14816164338632465, 0.2200165705313869, 0.1976332012288885, 0.2549793033011055, 0.1796428280475535, 0.1990889662136155, 0.1837576789476819, 0.2907447128519284, 0.2818247414031544, 0.285695112245704, 0.27391064628045014, 0.28689523104251324, 0.2943191530330753, 0.313786749498864, 0.32232473685963037, 0.26772565321212416, 0.3807287577750498, 0.40430775789701523, 0.39040433449456236, 0.4247839762376848, 0.3911989025187491, 0.42387417993381116, 0.4516795516918731, 0.4655850985395463, 0.43513553315217013, 0.08278113277954147, 0.11927518007705717, 0.12172252742605538, 0.08380980585375075, 0.14619450014445468, 0.13566135763469755, 0.09386039172559701, 0.08984928159688788, 0.16577588074039484, 0.23949046408214225, 0.24063360480007745, 0.2148160016802333, 0.24324535180436846, 0.24976067431333915, 0.28460993459871675, 0.2319758865978354, 0.23881145743167898, 0.23986513735369785, 0.6042526073405005, 0.6072132138678417, 0.6145234351592841, 0.6069338077235791, 0.6289971816920674, 0.6046360222845432, 0.605766370676037, 0.5985056216185886, 0.6165986262874332, 0.09927414488763064, 0.09786343249291785, 0.1111350257625856, 0.10847135884575787, 0.10156282716012488, 0.10161090295584285, 0.09141688948267734, 0.09631103044355838, 0.10180457742127635, 0.16736905288526882, 0.1536807790556486, 0.15075028735192542, 0.16928519550250243, 0.14565576184484652, 0.1657944017149352, 0.15437448514086827, 0.1423082162005167, 0.1346797883402402, 0.35576447033170455, 0.3565335735910571, 0.3658386394813028, 0.3729740242333658, 0.36945965150344096, 0.38494174087999256, 0.38138787684189224, 0.38557800909024975, 0.3602845989677873, 0.29278259042105315, 0.29377302639208136, 0.2647352759074706, 0.2695722176073062, 0.26294429168530353, 0.2795776210341727, 0.3026411249447909, 0.2962459243911, 0.31857675324272683, 0.19001081001828346, 0.20089052851932654, 0.19561885060902084, 0.20556766791236103, 0.18899618134547025, 0.1880682474947133, 0.19592238085021363, 0.19136881386592397, 0.1881369685225155, 0.1920366950574972, 0.20894334413346594, 0.19865687763757067, 0.1984133255636551, 0.22641372001077054, 0.20556765944553423, 0.18838615049416896, 0.21293923128937142, 0.20324491253160104, 0.6475532563098656, 0.19524524108422636, 0.636378481893793, 0.5025609846040462, 0.19041949642839595, 0.6051550064637894, 0.6301043407837812, 0.571622129238325, 0.5765595357435916, 0.19203467883910663, 0.20099858456951558, 0.5626745930774848, 0.20001658538532607, 0.6042098393363167, 0.680720029006367, 0.20737065087247897, 0.34465174062529036, 0.20477284221064396, 0.17033294490681983, 0.19871497929778825, 0.19776727502619273, 0.1905102762930344, 0.17959103249583241, 0.19355364462118307, 0.17777104718934933, 0.18572454752254108, 0.22197401448948062, 0.07338156451119648, 0.08216186878616605, 0.08747810360311359, 0.07828792184848066, 0.0774781924112049, 0.07678934346791033, 0.07457052138348297, 0.07994857498361618, 0.07403886443858232]}, "mutation_prompt": null}
