import numpy as np
from scipy.optimize import minimize
import random

class MetaHeuristic:
    """
    A metaheuristic algorithm for solving black box optimization problems.
    
    The algorithm uses a combination of local search and gradient-based optimization to find the optimal solution.
    
    Attributes:
    budget (int): The maximum number of function evaluations allowed.
    dim (int): The dimensionality of the search space.
    func (function): The black box function to optimize.
    search_space (list): The range of the search space.
    bounds (list): The bounds of the search space.
    population (list): The current population of solutions.
    fitness (list): The fitness of each solution in the population.
    """

    def __init__(self, budget, dim):
        """
        Initializes the MetaHeuristic algorithm.
        
        Args:
        budget (int): The maximum number of function evaluations allowed.
        dim (int): The dimensionality of the search space.
        """
        self.budget = budget
        self.dim = dim
        self.func = None
        self.search_space = None
        self.bounds = None
        self.population = None
        self.fitness = None

    def __call__(self, func):
        """
        Optimizes the black box function using MetaHeuristic.
        
        Args:
        func (function): The black box function to optimize.
        
        Returns:
        tuple: A tuple containing the optimal solution and its cost.
        """
        if self.func is None:
            raise ValueError("The black box function must be initialized before calling this method.")
        
        # Initialize the search space
        self.search_space = [self.bounds] * self.dim
        self.bounds = [(-5.0, 5.0)] * self.dim
        
        # Initialize the current population of solutions
        self.population = [[random.uniform(-5.0, 5.0) for _ in range(self.dim)] for _ in range(100)]
        
        # Initialize the optimal solution and its cost
        opt_solution = None
        opt_cost = float('inf')
        
        # Perform local search
        for _ in range(self.budget):
            # Generate a new solution by perturbing the current solution
            new_solution = self.perturb(self.search_space, self.bounds)
            
            # Evaluate the new solution using the black box function
            new_cost = self.func(new_solution)
            
            # Update the optimal solution and its cost if necessary
            if new_cost < opt_cost:
                opt_solution = new_solution
                opt_cost = new_cost
        
        # Return the optimal solution and its cost
        return opt_solution, opt_cost

    def perturb(self, search_space, bounds):
        """
        Generates a new solution by perturbing the current solution.
        
        Args:
        search_space (list): The current search space.
        bounds (list): The current bounds of the search space.
        
        Returns:
        list: A new solution generated by perturbing the current solution.
        """
        # Generate a new solution by randomly perturbing the current solution
        new_solution = [self.bounds[0] + np.random.uniform(-1, 1) * (self.bounds[1] - self.bounds[0]) for _ in range(self.dim)]
        
        # Ensure the new solution is within the bounds
        new_solution = [max(bounds[i], min(new_solution[i], bounds[i])) for i in range(self.dim)]
        
        return new_solution

# Description: Evolutionary Optimization using Adaptive MetaHeuristics
# Code: 
# ```python
# Evolutionary Optimization using Adaptive MetaHeuristics
# ```python
metaheuristic = MetaHeuristic(100, 10)
# Evaluate the fitness of the initial population
fitness = [metaheuristic(func) for func in [lambda x: x**2, lambda x: x**3, lambda x: x**4]]
print("Initial Fitness:", fitness)

# Select the fittest individual
fittest_individual = max(zip(fitness, range(len(fitness))), key=lambda x: x[0])[1]
print("Fittest Individual:", fittest_individual)

# Select a random individual
random_individual = random.choice([x for x in range(len(fitness)) if fitness[x] == max(fitness)])
print("Random Individual:", random_individual)

# Perform local search
for _ in range(100):
    # Select a random individual
    individual = random.choice([x for x in range(len(fitness)) if fitness[x] == max(fitness)])
    
    # Perturb the individual
    new_individual = metaheuristic.perturb(metaheuristic.search_space, metaheuristic.bounds)
    
    # Evaluate the new individual
    new_fitness = metaheuristic(func=new_individual)
    
    # Update the individual and its fitness
    metaheuristic.population[metaheuristic.population.index(individual)][0] = new_individual[0]
    metaheuristic.population[metaheuristic.population.index(individual)][1] = new_fitness
    
    # Check if the individual is fitter than the current fittest individual
    if new_fitness < metaheuristic.fitness[metaheuristic.population.index(individual)][1]:
        metaheuristic.fitness[metaheuristic.population.index(individual)] = new_fitness
        metaheuristic.population[metaheuristic.population.index(individual)][1] = new_fitness

# Print the final fitness
print("Final Fitness:", metaheuristic.fitness)

# Print the optimal solution
print("Optimal Solution:", metaheuristic.population[0])