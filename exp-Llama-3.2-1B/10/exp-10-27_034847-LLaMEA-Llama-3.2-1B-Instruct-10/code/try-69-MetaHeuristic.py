import numpy as np
from scipy.optimize import minimize

class MetaHeuristic:
    """
    A metaheuristic algorithm for solving black box optimization problems.
    
    The algorithm uses a combination of local search and gradient-based optimization to find the optimal solution.
    
    Attributes:
    budget (int): The maximum number of function evaluations allowed.
    dim (int): The dimensionality of the search space.
    func (function): The black box function to optimize.
    search_space (list): The range of the search space.
    bounds (list): The bounds of the search space.
    adaptive_strategy (dict): A dictionary containing the adaptive strategy, including the probability of changing the individual lines of the selected solution.
    """

    def __init__(self, budget, dim):
        """
        Initializes the MetaHeuristic algorithm.
        
        Args:
        budget (int): The maximum number of function evaluations allowed.
        dim (int): The dimensionality of the search space.
        """
        self.budget = budget
        self.dim = dim
        self.func = None
        self.search_space = None
        self.bounds = None
        self.adaptive_strategy = None

    def __call__(self, func):
        """
        Optimizes the black box function using MetaHeuristic.
        
        Args:
        func (function): The black box function to optimize.
        
        Returns:
        tuple: A tuple containing the optimal solution and its cost.
        """
        if self.func is None:
            raise ValueError("The black box function must be initialized before calling this method.")
        
        # Initialize the search space
        self.search_space = [self.bounds] * self.dim
        self.bounds = [(-5.0, 5.0)] * self.dim
        
        # Initialize the optimal solution and its cost
        opt_solution = None
        opt_cost = float('inf')
        
        # Perform local search
        for _ in range(self.budget):
            # Generate a new solution by perturbing the current solution
            new_solution = self.perturb(self.search_space, self.bounds)
            
            # Evaluate the new solution using the black box function
            new_cost = self.func(new_solution)
            
            # Update the optimal solution and its cost if necessary
            if new_cost < opt_cost:
                opt_solution = new_solution
                opt_cost = new_cost
            
            # Update the adaptive strategy
            self.update_adaptive_strategy(new_solution, opt_cost)
        
        # Return the optimal solution and its cost
        return opt_solution, opt_cost

    def perturb(self, search_space, bounds):
        """
        Generates a new solution by perturbing the current solution.
        
        Args:
        search_space (list): The current search space.
        bounds (list): The current bounds of the search space.
        
        Returns:
        list: A new solution generated by perturbing the current solution.
        """
        # Generate a new solution by randomly perturbing the current solution
        new_solution = [self.bounds[0] + np.random.uniform(-1, 1) * (self.bounds[1] - self.bounds[0]) for _ in range(self.dim)]
        
        # Ensure the new solution is within the bounds
        new_solution = [max(bounds[i], min(new_solution[i], bounds[i])) for i in range(self.dim)]
        
        return new_solution

    def update_adaptive_strategy(self, new_individual, opt_cost):
        """
        Updates the adaptive strategy based on the new individual and its cost.
        
        Args:
        new_individual (list): The new individual.
        opt_cost (float): The optimal cost of the new individual.
        """
        # Update the adaptive strategy based on the probability of changing the individual lines
        if np.random.rand() < 0.1:  # 10% probability of changing individual lines
            self.adaptive_strategy = {'individual_lines': [np.random.choice([0, 1]), np.random.choice([0, 1])],'strategy': 'line_change'}
        else:
            self.adaptive_strategy = {'individual_lines': [np.random.choice([0, 1])],'strategy': 'constant'}

# Description: Black Box Optimization using MetaHeuristic Algorithm
# Code: 
# ```python
# Black Box Optimization using MetaHeuristic Algorithm
# ```python
# ```python
# import numpy as np
# import random
# import time

# Define the black box function
def func(x):
    return x[0]**2 + x[1]**2

# Define the adaptive strategy
def adaptive_strategy(x, opt_cost):
    individual_lines = x[0:2]
    strategy = random.choice(['line_change', 'constant'])
    if strategy == 'line_change':
        individual_lines = [random.choice([0, 1]), random.choice([0, 1])]
    return individual_lines

# Define the MetaHeuristic algorithm
class MetaHeuristic:
    def __init__(self, budget, dim):
        self.budget = budget
        self.dim = dim
        self.func = func
        self.adaptive_strategy = adaptive_strategy

    def __call__(self, func):
        # Initialize the search space
        self.search_space = [self.adaptive_strategy(0, float('inf'))] * self.dim
        self.bounds = [(-5.0, 5.0)] * self.dim
        
        # Initialize the optimal solution and its cost
        opt_solution = None
        opt_cost = float('inf')
        
        # Perform local search
        for _ in range(self.budget):
            # Generate a new solution by perturbing the current solution
            new_solution = self.perturb(self.search_space, self.bounds)
            
            # Evaluate the new solution using the black box function
            new_cost = self.func(new_solution)
            
            # Update the optimal solution and its cost if necessary
            if new_cost < opt_cost:
                opt_solution = new_solution
                opt_cost = new_cost
            
            # Update the adaptive strategy
            self.update_adaptive_strategy(new_solution, opt_cost)
        
        # Return the optimal solution and its cost
        return opt_solution, opt_cost

# Initialize the MetaHeuristic algorithm
meta_heuristic = MetaHeuristic(100, 2)

# Call the MetaHeuristic algorithm
result = meta_heuristic(func)

# Print the result
print(result)