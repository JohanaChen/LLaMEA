import numpy as np
from scipy.optimize import minimize

class MetaHeuristic:
    """
    A metaheuristic algorithm for solving black box optimization problems.
    
    The algorithm uses a combination of local search and gradient-based optimization to find the optimal solution.
    The adaptive perturbation strategy is used to refine the solution's strategy based on the performance of the current solution.
    """
    def __init__(self, budget, dim):
        """
        Initializes the MetaHeuristic algorithm.
        
        Args:
        budget (int): The maximum number of function evaluations allowed.
        dim (int): The dimensionality of the search space.
        """
        self.budget = budget
        self.dim = dim
        self.func = None
        self.search_space = None
        self.bounds = None
        self.perturbation_strategy = None

    def __call__(self, func):
        """
        Optimizes the black box function using MetaHeuristic.
        
        Args:
        func (function): The black box function to optimize.
        
        Returns:
        tuple: A tuple containing the optimal solution and its cost.
        """
        if self.func is None:
            raise ValueError("The black box function must be initialized before calling this method.")
        
        # Initialize the search space
        self.search_space = [self.bounds] * self.dim
        self.bounds = [(-5.0, 5.0)] * self.dim
        
        # Initialize the optimal solution and its cost
        opt_solution = None
        opt_cost = float('inf')
        
        # Initialize the perturbation strategy
        self.perturbation_strategy = self.perturb_local_search(self.search_space, bounds)
        
        # Perform local search
        for _ in range(self.budget):
            # Generate a new solution by perturbing the current solution
            new_solution = self.perturb(self.search_space, bounds)
            
            # Evaluate the new solution using the black box function
            new_cost = self.func(new_solution)
            
            # Update the optimal solution and its cost if necessary
            if new_cost < opt_cost:
                opt_solution = new_solution
                opt_cost = new_cost
        
        # Return the optimal solution and its cost
        return opt_solution, opt_cost

    def perturb_local_search(self, search_space, bounds):
        """
        Generates a new solution by perturbing the current solution using the perturbation strategy.
        
        Args:
        search_space (list): The current search space.
        bounds (list): The current bounds of the search space.
        
        Returns:
        list: A new solution generated by perturbing the current solution.
        """
        # Generate a new solution by randomly perturbing the current solution
        new_solution = [self.bounds[0] + np.random.uniform(-1, 1) * (self.bounds[1] - self.bounds[0]) for _ in range(self.dim)]
        
        # Ensure the new solution is within the bounds
        new_solution = [max(bounds[i], min(new_solution[i], bounds[i])) for i in range(self.dim)]
        
        # Refine the solution's strategy based on the performance of the current solution
        if self.perturbation_strategy == 'adaptive':
            # Calculate the fitness of the new solution
            new_fitness = self.evaluate_fitness(new_solution)
            
            # Update the perturbation strategy based on the performance of the new solution
            if new_fitness < self.perturbation_strategy['low_fitness_threshold']:
                self.perturbation_strategy = 'random'
            elif new_fitness > self.perturbation_strategy['high_fitness_threshold']:
                self.perturbation_strategy = 'adaptive'
            else:
                self.perturbation_strategy = 'random'
        
        return new_solution

    def evaluate_fitness(self, individual):
        """
        Evaluates the fitness of the given individual.
        
        Args:
        individual (list): The individual to evaluate.
        
        Returns:
        float: The fitness of the individual.
        """
        # Evaluate the fitness of the individual using the black box function
        fitness = self.func(individual)
        
        # Return the fitness of the individual
        return fitness