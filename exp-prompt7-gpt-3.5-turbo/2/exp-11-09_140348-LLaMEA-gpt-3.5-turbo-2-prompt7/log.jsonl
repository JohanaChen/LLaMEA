{"id": "8db3ef4b-bdc2-490a-8904-953d3ade449f", "solution": "import numpy as np\n\nclass DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for _ in range(self.budget):\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "A novel algorithm that combines Particle Swarm Optimization (PSO) with a local search strategy using a dynamic radius based on the distance to the global best solution.", "configspace": "", "generation": 0, "fitness": 0.2819424325313864, "feedback": "The algorithm DynamicRadiusPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.25.", "error": "", "parent_id": null, "metadata": {"aucs": [0.8233925315387355, 0.8253558197141742, 0.8349844386968159, 0.8245143217435766, 0.8237072357603228, 0.8333239726151405, 0.8260595265339674, 0.8216883347364886, 0.8211797872110109, 0.39832813370562525, 0.5216041960538728, 0.30614911465288785, 0.3604612267390257, 0.20478538003169378, 0.23751744463705182, 0.643367161698398, 0.42463468067362786, 0.332121807844836, 0.09849663677719633, 0.1259082167912695, 0.11840906988445643, 0.12790296389854194, 0.13121925372393595, 0.09617948249482122, 0.09933561830726945, 0.12740144408465803, 0.12819724186033432, 0.10746317525612781, 0.11376833264755992, 0.06310747051888466, 0.10819672203815422, 0.12464343673220935, 0.10519022022416158, 0.10969566268345665, 0.1211801234346469, 0.07226787242762112, 0.9733404277334871, 0.9595088815363954, 0.9602063668935775, 0.9277664396899894, 0.9430220550103203, 0.9447808910515034, 0.9632485431234141, 0.9477957741862315, 0.9623960394595215, 0.29324494826089087, 0.588386996448041, 0.5843818539598808, 0.5889669991271954, 0.6237822678853641, 0.5766956128039373, 0.5328047271052441, 0.6002124932993105, 0.44391343286923335, 0.8652526327503139, 0.18160615253829038, 0.7366954807233179, 0.21277100681201233, 0.8895861978279955, 0.18915387848427234, 0.21188796433848933, 0.16670650814735832, 0.2323855976466429, 0.2114145107653479, 0.2162268465222661, 0.32143611862324517, 0.20930523142543278, 0.20518965964558478, 0.2150479752641028, 0.2170414698612565, 0.2193726853289254, 0.2122042626643078, 0.19927450184740214, 0.16693107173287458, 0.23843272378708913, 0.21168595808770796, 0.2141123494516869, 0.21241783055239094, 0.2409276035470297, 0.15895658946563762, 0.2222743204467842, 9.999999999998899e-05, 0.029065238486248424, 0.06209218395843441, 0.02113915243647113, 9.999999999998899e-05, 0.0035910768728445452, 9.999999999998899e-05, 9.999999999998899e-05, 0.06958425380993649, 0.05885475426721387, 0.025805877952177037, 0.07872431503705901, 0.04021973306483573, 0.016798989020514243, 0.042335658655990094, 0.03178323792367066, 0.08360600860607903, 0.042165857541118235, 0.2936181979034619, 0.0449718149642766, 0.16788943254523492, 0.07295356259450125, 0.17361042143691052, 0.19565039591718036, 0.2282762632610036, 0.07544106944319795, 0.0985686383637665, 0.02424773281096748, 0.06648142538101398, 0.15108905467404166, 0.04762703816783853, 0.04353504940634101, 0.080235884341603, 0.09166703304120061, 0.11680928179262495, 0.0877693227934393, 0.5271092823384345, 0.526594151003843, 0.5145589303676745, 0.5101596486014371, 0.4988697847289453, 0.5027471492921578, 0.5066793155216732, 0.5470095839635158, 0.5125641590580363, 0.11978829821247095, 0.1100417488580484, 0.11588832428862894, 0.12415419013798579, 0.1177919427400268, 0.1227152648856823, 0.10357235593420266, 0.10957092471504637, 0.09862128920417923, 0.132846113383581, 0.13761578211042236, 0.14729170725043716, 0.14377940368009112, 0.139476930569306, 0.19589423675647355, 0.13384375138000082, 0.11378159449526104, 0.1351473353764655, 0.4665401737503163, 0.2992903740757935, 0.3624454667478011, 0.41690741800509346, 0.47748132081209493, 0.33472872644008966, 0.5177422638427076, 0.467928656744802, 0.4746663585913711, 0.26853025779179784, 0.17404120898313702, 0.2279205758823013, 0.36371660739402656, 0.22004666171401988, 0.2534859229892934, 0.28931273571105875, 0.25849937380539834, 0.28659982581162147, 0.17742647059805605, 0.17211966870745, 0.2036670922174102, 0.22302277849884433, 0.21321064833501147, 0.1932072176341033, 0.1917712226437539, 0.20649221169202436, 0.18141334959488964, 0.18326300063734768, 0.19352535994140052, 0.18028482575659, 0.1871212187234017, 0.21495040892495465, 0.18699952485707994, 0.21347876240322516, 0.20480415268297592, 0.18734531098242635, 0.8721159882169401, 0.1268040959049891, 0.13717576079593397, 0.8950829533126511, 0.1999287071215029, 0.19943601837271485, 0.1495945847415423, 0.1683971785761914, 0.1649378415164916, 0.7407723126576473, 0.2072498634109594, 0.6620952494004506, 0.10362565497278353, 0.16849034149965159, 0.20341730885624876, 0.09424689439977396, 0.16609547017651916, 0.10445141046264306, 0.16819246520000797, 0.1691722315469416, 0.18025554348706097, 0.1709767398222386, 0.17861903310197635, 0.17386315845771805, 0.23640067203481507, 0.1696036822405136, 0.19792326228538837, 0.07720964129122587, 0.10085697661017634, 0.07621981412646872, 0.09628079803774303, 0.08640230351234623, 0.09445049180719944, 0.07829603537593899, 0.08149963855174103, 0.07622705854156775]}, "mutation_prompt": null}
{"id": "17f71de1-0dc5-4a46-8956-86a00c24bab0", "solution": "import numpy as np\n\nclass DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for _ in range(self.budget):\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "A novel algorithm that combines Particle Swarm Optimization (PSO) with a local search strategy using a dynamic radius based on the distance to the global best solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "8db3ef4b-bdc2-490a-8904-953d3ade449f", "metadata": {"aucs": [0.8233925315387355, 0.8253558197141742, 0.8349844386968159, 0.8245143217435766, 0.8237072357603228, 0.8333239726151405, 0.8260595265339674, 0.8216883347364886, 0.8211797872110109, 0.39832813370562525, 0.5216041960538728, 0.30614911465288785, 0.3604612267390257, 0.20478538003169378, 0.23751744463705182, 0.643367161698398, 0.42463468067362786, 0.332121807844836, 0.09849663677719633, 0.1259082167912695, 0.11840906988445643, 0.12790296389854194, 0.13121925372393595, 0.09617948249482122, 0.09933561830726945, 0.12740144408465803, 0.12819724186033432, 0.10746317525612781, 0.11376833264755992, 0.06310747051888466, 0.10819672203815422, 0.12464343673220935, 0.10519022022416158, 0.10969566268345665, 0.1211801234346469, 0.07226787242762112, 0.9733404277334871, 0.9595088815363954, 0.9602063668935775, 0.9277664396899894, 0.9430220550103203, 0.9447808910515034, 0.9632485431234141, 0.9477957741862315, 0.9623960394595215, 0.29324494826089087, 0.588386996448041, 0.5843818539598808, 0.5889669991271954, 0.6237822678853641, 0.5766956128039373, 0.5328047271052441, 0.6002124932993105, 0.44391343286923335, 0.8652526327503139, 0.18160615253829038, 0.7366954807233179, 0.21277100681201233, 0.8895861978279955, 0.18915387848427234, 0.21188796433848933, 0.16670650814735832, 0.2323855976466429, 0.2114145107653479, 0.2162268465222661, 0.32143611862324517, 0.20930523142543278, 0.20518965964558478, 0.2150479752641028, 0.2170414698612565, 0.2193726853289254, 0.2122042626643078, 0.19927450184740214, 0.16693107173287458, 0.23843272378708913, 0.21168595808770796, 0.2141123494516869, 0.21241783055239094, 0.2409276035470297, 0.15895658946563762, 0.2222743204467842, 9.999999999998899e-05, 0.029065238486248424, 0.06209218395843441, 0.02113915243647113, 9.999999999998899e-05, 0.0035910768728445452, 9.999999999998899e-05, 9.999999999998899e-05, 0.06958425380993649, 0.05885475426721387, 0.025805877952177037, 0.07872431503705901, 0.04021973306483573, 0.016798989020514243, 0.042335658655990094, 0.03178323792367066, 0.08360600860607903, 0.042165857541118235, 0.2936181979034619, 0.0449718149642766, 0.16788943254523492, 0.07295356259450125, 0.17361042143691052, 0.19565039591718036, 0.2282762632610036, 0.07544106944319795, 0.0985686383637665, 0.02424773281096748, 0.06648142538101398, 0.15108905467404166, 0.04762703816783853, 0.04353504940634101, 0.080235884341603, 0.09166703304120061, 0.11680928179262495, 0.0877693227934393, 0.5271092823384345, 0.526594151003843, 0.5145589303676745, 0.5101596486014371, 0.4988697847289453, 0.5027471492921578, 0.5066793155216732, 0.5470095839635158, 0.5125641590580363, 0.11978829821247095, 0.1100417488580484, 0.11588832428862894, 0.12415419013798579, 0.1177919427400268, 0.1227152648856823, 0.10357235593420266, 0.10957092471504637, 0.09862128920417923, 0.132846113383581, 0.13761578211042236, 0.14729170725043716, 0.14377940368009112, 0.139476930569306, 0.19589423675647355, 0.13384375138000082, 0.11378159449526104, 0.1351473353764655, 0.4665401737503163, 0.2992903740757935, 0.3624454667478011, 0.41690741800509346, 0.47748132081209493, 0.33472872644008966, 0.5177422638427076, 0.467928656744802, 0.4746663585913711, 0.26853025779179784, 0.17404120898313702, 0.2279205758823013, 0.36371660739402656, 0.22004666171401988, 0.2534859229892934, 0.28931273571105875, 0.25849937380539834, 0.28659982581162147, 0.17742647059805605, 0.17211966870745, 0.2036670922174102, 0.22302277849884433, 0.21321064833501147, 0.1932072176341033, 0.1917712226437539, 0.20649221169202436, 0.18141334959488964, 0.18326300063734768, 0.19352535994140052, 0.18028482575659, 0.1871212187234017, 0.21495040892495465, 0.18699952485707994, 0.21347876240322516, 0.20480415268297592, 0.18734531098242635, 0.8721159882169401, 0.1268040959049891, 0.13717576079593397, 0.8950829533126511, 0.1999287071215029, 0.19943601837271485, 0.1495945847415423, 0.1683971785761914, 0.1649378415164916, 0.7407723126576473, 0.2072498634109594, 0.6620952494004506, 0.10362565497278353, 0.16849034149965159, 0.20341730885624876, 0.09424689439977396, 0.16609547017651916, 0.10445141046264306, 0.16819246520000797, 0.1691722315469416, 0.18025554348706097, 0.1709767398222386, 0.17861903310197635, 0.17386315845771805, 0.23640067203481507, 0.1696036822405136, 0.19792326228538837, 0.07720964129122587, 0.10085697661017634, 0.07621981412646872, 0.09628079803774303, 0.08640230351234623, 0.09445049180719944, 0.07829603537593899, 0.08149963855174103, 0.07622705854156775]}, "mutation_prompt": null}
{"id": "b8afed21-1146-4d8c-a5ff-dc5bf3ba1f90", "solution": "import numpy as np\n\nclass DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for _ in range(self.budget):\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "A novel algorithm that combines Particle Swarm Optimization (PSO) with a local search strategy using a dynamic radius based on the distance to the global best solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8db3ef4b-bdc2-490a-8904-953d3ade449f", "metadata": {"aucs": [0.8233925315387355, 0.8253558197141742, 0.8349844386968159, 0.8245143217435766, 0.8237072357603228, 0.8333239726151405, 0.8260595265339674, 0.8216883347364886, 0.8211797872110109, 0.39832813370562525, 0.5216041960538728, 0.30614911465288785, 0.3604612267390257, 0.20478538003169378, 0.23751744463705182, 0.643367161698398, 0.42463468067362786, 0.332121807844836, 0.09849663677719633, 0.1259082167912695, 0.11840906988445643, 0.12790296389854194, 0.13121925372393595, 0.09617948249482122, 0.09933561830726945, 0.12740144408465803, 0.12819724186033432, 0.10746317525612781, 0.11376833264755992, 0.06310747051888466, 0.10819672203815422, 0.12464343673220935, 0.10519022022416158, 0.10969566268345665, 0.1211801234346469, 0.07226787242762112, 0.9733404277334871, 0.9595088815363954, 0.9602063668935775, 0.9277664396899894, 0.9430220550103203, 0.9447808910515034, 0.9632485431234141, 0.9477957741862315, 0.9623960394595215, 0.29324494826089087, 0.588386996448041, 0.5843818539598808, 0.5889669991271954, 0.6237822678853641, 0.5766956128039373, 0.5328047271052441, 0.6002124932993105, 0.44391343286923335, 0.8652526327503139, 0.18160615253829038, 0.7366954807233179, 0.21277100681201233, 0.8895861978279955, 0.18915387848427234, 0.21188796433848933, 0.16670650814735832, 0.2323855976466429, 0.2114145107653479, 0.2162268465222661, 0.32143611862324517, 0.20930523142543278, 0.20518965964558478, 0.2150479752641028, 0.2170414698612565, 0.2193726853289254, 0.2122042626643078, 0.19927450184740214, 0.16693107173287458, 0.23843272378708913, 0.21168595808770796, 0.2141123494516869, 0.21241783055239094, 0.2409276035470297, 0.15895658946563762, 0.2222743204467842, 9.999999999998899e-05, 0.029065238486248424, 0.06209218395843441, 0.02113915243647113, 9.999999999998899e-05, 0.0035910768728445452, 9.999999999998899e-05, 9.999999999998899e-05, 0.06958425380993649, 0.05885475426721387, 0.025805877952177037, 0.07872431503705901, 0.04021973306483573, 0.016798989020514243, 0.042335658655990094, 0.03178323792367066, 0.08360600860607903, 0.042165857541118235, 0.2936181979034619, 0.0449718149642766, 0.16788943254523492, 0.07295356259450125, 0.17361042143691052, 0.19565039591718036, 0.2282762632610036, 0.07544106944319795, 0.0985686383637665, 0.02424773281096748, 0.06648142538101398, 0.15108905467404166, 0.04762703816783853, 0.04353504940634101, 0.080235884341603, 0.09166703304120061, 0.11680928179262495, 0.0877693227934393, 0.5271092823384345, 0.526594151003843, 0.5145589303676745, 0.5101596486014371, 0.4988697847289453, 0.5027471492921578, 0.5066793155216732, 0.5470095839635158, 0.5125641590580363, 0.11978829821247095, 0.1100417488580484, 0.11588832428862894, 0.12415419013798579, 0.1177919427400268, 0.1227152648856823, 0.10357235593420266, 0.10957092471504637, 0.09862128920417923, 0.132846113383581, 0.13761578211042236, 0.14729170725043716, 0.14377940368009112, 0.139476930569306, 0.19589423675647355, 0.13384375138000082, 0.11378159449526104, 0.1351473353764655, 0.4665401737503163, 0.2992903740757935, 0.3624454667478011, 0.41690741800509346, 0.47748132081209493, 0.33472872644008966, 0.5177422638427076, 0.467928656744802, 0.4746663585913711, 0.26853025779179784, 0.17404120898313702, 0.2279205758823013, 0.36371660739402656, 0.22004666171401988, 0.2534859229892934, 0.28931273571105875, 0.25849937380539834, 0.28659982581162147, 0.17742647059805605, 0.17211966870745, 0.2036670922174102, 0.22302277849884433, 0.21321064833501147, 0.1932072176341033, 0.1917712226437539, 0.20649221169202436, 0.18141334959488964, 0.18326300063734768, 0.19352535994140052, 0.18028482575659, 0.1871212187234017, 0.21495040892495465, 0.18699952485707994, 0.21347876240322516, 0.20480415268297592, 0.18734531098242635, 0.8721159882169401, 0.1268040959049891, 0.13717576079593397, 0.8950829533126511, 0.1999287071215029, 0.19943601837271485, 0.1495945847415423, 0.1683971785761914, 0.1649378415164916, 0.7407723126576473, 0.2072498634109594, 0.6620952494004506, 0.10362565497278353, 0.16849034149965159, 0.20341730885624876, 0.09424689439977396, 0.16609547017651916, 0.10445141046264306, 0.16819246520000797, 0.1691722315469416, 0.18025554348706097, 0.1709767398222386, 0.17861903310197635, 0.17386315845771805, 0.23640067203481507, 0.1696036822405136, 0.19792326228538837, 0.07720964129122587, 0.10085697661017634, 0.07621981412646872, 0.09628079803774303, 0.08640230351234623, 0.09445049180719944, 0.07829603537593899, 0.08149963855174103, 0.07622705854156775]}, "mutation_prompt": null}
{"id": "4b94e38a-c3b6-4f89-88c8-38c4cd59157a", "solution": "import numpy as np\n\nclass DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for _ in range(self.budget):\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "A novel algorithm that combines Particle Swarm Optimization (PSO) with a local search strategy using a dynamic radius based on the distance to the global best solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8db3ef4b-bdc2-490a-8904-953d3ade449f", "metadata": {"aucs": [0.8233925315387355, 0.8253558197141742, 0.8349844386968159, 0.8245143217435766, 0.8237072357603228, 0.8333239726151405, 0.8260595265339674, 0.8216883347364886, 0.8211797872110109, 0.39832813370562525, 0.5216041960538728, 0.30614911465288785, 0.3604612267390257, 0.20478538003169378, 0.23751744463705182, 0.643367161698398, 0.42463468067362786, 0.332121807844836, 0.09849663677719633, 0.1259082167912695, 0.11840906988445643, 0.12790296389854194, 0.13121925372393595, 0.09617948249482122, 0.09933561830726945, 0.12740144408465803, 0.12819724186033432, 0.10746317525612781, 0.11376833264755992, 0.06310747051888466, 0.10819672203815422, 0.12464343673220935, 0.10519022022416158, 0.10969566268345665, 0.1211801234346469, 0.07226787242762112, 0.9733404277334871, 0.9595088815363954, 0.9602063668935775, 0.9277664396899894, 0.9430220550103203, 0.9447808910515034, 0.9632485431234141, 0.9477957741862315, 0.9623960394595215, 0.29324494826089087, 0.588386996448041, 0.5843818539598808, 0.5889669991271954, 0.6237822678853641, 0.5766956128039373, 0.5328047271052441, 0.6002124932993105, 0.44391343286923335, 0.8652526327503139, 0.18160615253829038, 0.7366954807233179, 0.21277100681201233, 0.8895861978279955, 0.18915387848427234, 0.21188796433848933, 0.16670650814735832, 0.2323855976466429, 0.2114145107653479, 0.2162268465222661, 0.32143611862324517, 0.20930523142543278, 0.20518965964558478, 0.2150479752641028, 0.2170414698612565, 0.2193726853289254, 0.2122042626643078, 0.19927450184740214, 0.16693107173287458, 0.23843272378708913, 0.21168595808770796, 0.2141123494516869, 0.21241783055239094, 0.2409276035470297, 0.15895658946563762, 0.2222743204467842, 9.999999999998899e-05, 0.029065238486248424, 0.06209218395843441, 0.02113915243647113, 9.999999999998899e-05, 0.0035910768728445452, 9.999999999998899e-05, 9.999999999998899e-05, 0.06958425380993649, 0.05885475426721387, 0.025805877952177037, 0.07872431503705901, 0.04021973306483573, 0.016798989020514243, 0.042335658655990094, 0.03178323792367066, 0.08360600860607903, 0.042165857541118235, 0.2936181979034619, 0.0449718149642766, 0.16788943254523492, 0.07295356259450125, 0.17361042143691052, 0.19565039591718036, 0.2282762632610036, 0.07544106944319795, 0.0985686383637665, 0.02424773281096748, 0.06648142538101398, 0.15108905467404166, 0.04762703816783853, 0.04353504940634101, 0.080235884341603, 0.09166703304120061, 0.11680928179262495, 0.0877693227934393, 0.5271092823384345, 0.526594151003843, 0.5145589303676745, 0.5101596486014371, 0.4988697847289453, 0.5027471492921578, 0.5066793155216732, 0.5470095839635158, 0.5125641590580363, 0.11978829821247095, 0.1100417488580484, 0.11588832428862894, 0.12415419013798579, 0.1177919427400268, 0.1227152648856823, 0.10357235593420266, 0.10957092471504637, 0.09862128920417923, 0.132846113383581, 0.13761578211042236, 0.14729170725043716, 0.14377940368009112, 0.139476930569306, 0.19589423675647355, 0.13384375138000082, 0.11378159449526104, 0.1351473353764655, 0.4665401737503163, 0.2992903740757935, 0.3624454667478011, 0.41690741800509346, 0.47748132081209493, 0.33472872644008966, 0.5177422638427076, 0.467928656744802, 0.4746663585913711, 0.26853025779179784, 0.17404120898313702, 0.2279205758823013, 0.36371660739402656, 0.22004666171401988, 0.2534859229892934, 0.28931273571105875, 0.25849937380539834, 0.28659982581162147, 0.17742647059805605, 0.17211966870745, 0.2036670922174102, 0.22302277849884433, 0.21321064833501147, 0.1932072176341033, 0.1917712226437539, 0.20649221169202436, 0.18141334959488964, 0.18326300063734768, 0.19352535994140052, 0.18028482575659, 0.1871212187234017, 0.21495040892495465, 0.18699952485707994, 0.21347876240322516, 0.20480415268297592, 0.18734531098242635, 0.8721159882169401, 0.1268040959049891, 0.13717576079593397, 0.8950829533126511, 0.1999287071215029, 0.19943601837271485, 0.1495945847415423, 0.1683971785761914, 0.1649378415164916, 0.7407723126576473, 0.2072498634109594, 0.6620952494004506, 0.10362565497278353, 0.16849034149965159, 0.20341730885624876, 0.09424689439977396, 0.16609547017651916, 0.10445141046264306, 0.16819246520000797, 0.1691722315469416, 0.18025554348706097, 0.1709767398222386, 0.17861903310197635, 0.17386315845771805, 0.23640067203481507, 0.1696036822405136, 0.19792326228538837, 0.07720964129122587, 0.10085697661017634, 0.07621981412646872, 0.09628079803774303, 0.08640230351234623, 0.09445049180719944, 0.07829603537593899, 0.08149963855174103, 0.07622705854156775]}, "mutation_prompt": null}
{"id": "b07ebbfe-3a21-41a4-a07f-5fa863a482d4", "solution": "import numpy as np\n\nclass DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for _ in range(self.budget):\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "A novel algorithm that combines Particle Swarm Optimization (PSO) with a local search strategy using a dynamic radius based on the distance to the global best solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8db3ef4b-bdc2-490a-8904-953d3ade449f", "metadata": {"aucs": [0.8233925315387355, 0.8253558197141742, 0.8349844386968159, 0.8245143217435766, 0.8237072357603228, 0.8333239726151405, 0.8260595265339674, 0.8216883347364886, 0.8211797872110109, 0.39832813370562525, 0.5216041960538728, 0.30614911465288785, 0.3604612267390257, 0.20478538003169378, 0.23751744463705182, 0.643367161698398, 0.42463468067362786, 0.332121807844836, 0.09849663677719633, 0.1259082167912695, 0.11840906988445643, 0.12790296389854194, 0.13121925372393595, 0.09617948249482122, 0.09933561830726945, 0.12740144408465803, 0.12819724186033432, 0.10746317525612781, 0.11376833264755992, 0.06310747051888466, 0.10819672203815422, 0.12464343673220935, 0.10519022022416158, 0.10969566268345665, 0.1211801234346469, 0.07226787242762112, 0.9733404277334871, 0.9595088815363954, 0.9602063668935775, 0.9277664396899894, 0.9430220550103203, 0.9447808910515034, 0.9632485431234141, 0.9477957741862315, 0.9623960394595215, 0.29324494826089087, 0.588386996448041, 0.5843818539598808, 0.5889669991271954, 0.6237822678853641, 0.5766956128039373, 0.5328047271052441, 0.6002124932993105, 0.44391343286923335, 0.8652526327503139, 0.18160615253829038, 0.7366954807233179, 0.21277100681201233, 0.8895861978279955, 0.18915387848427234, 0.21188796433848933, 0.16670650814735832, 0.2323855976466429, 0.2114145107653479, 0.2162268465222661, 0.32143611862324517, 0.20930523142543278, 0.20518965964558478, 0.2150479752641028, 0.2170414698612565, 0.2193726853289254, 0.2122042626643078, 0.19927450184740214, 0.16693107173287458, 0.23843272378708913, 0.21168595808770796, 0.2141123494516869, 0.21241783055239094, 0.2409276035470297, 0.15895658946563762, 0.2222743204467842, 9.999999999998899e-05, 0.029065238486248424, 0.06209218395843441, 0.02113915243647113, 9.999999999998899e-05, 0.0035910768728445452, 9.999999999998899e-05, 9.999999999998899e-05, 0.06958425380993649, 0.05885475426721387, 0.025805877952177037, 0.07872431503705901, 0.04021973306483573, 0.016798989020514243, 0.042335658655990094, 0.03178323792367066, 0.08360600860607903, 0.042165857541118235, 0.2936181979034619, 0.0449718149642766, 0.16788943254523492, 0.07295356259450125, 0.17361042143691052, 0.19565039591718036, 0.2282762632610036, 0.07544106944319795, 0.0985686383637665, 0.02424773281096748, 0.06648142538101398, 0.15108905467404166, 0.04762703816783853, 0.04353504940634101, 0.080235884341603, 0.09166703304120061, 0.11680928179262495, 0.0877693227934393, 0.5271092823384345, 0.526594151003843, 0.5145589303676745, 0.5101596486014371, 0.4988697847289453, 0.5027471492921578, 0.5066793155216732, 0.5470095839635158, 0.5125641590580363, 0.11978829821247095, 0.1100417488580484, 0.11588832428862894, 0.12415419013798579, 0.1177919427400268, 0.1227152648856823, 0.10357235593420266, 0.10957092471504637, 0.09862128920417923, 0.132846113383581, 0.13761578211042236, 0.14729170725043716, 0.14377940368009112, 0.139476930569306, 0.19589423675647355, 0.13384375138000082, 0.11378159449526104, 0.1351473353764655, 0.4665401737503163, 0.2992903740757935, 0.3624454667478011, 0.41690741800509346, 0.47748132081209493, 0.33472872644008966, 0.5177422638427076, 0.467928656744802, 0.4746663585913711, 0.26853025779179784, 0.17404120898313702, 0.2279205758823013, 0.36371660739402656, 0.22004666171401988, 0.2534859229892934, 0.28931273571105875, 0.25849937380539834, 0.28659982581162147, 0.17742647059805605, 0.17211966870745, 0.2036670922174102, 0.22302277849884433, 0.21321064833501147, 0.1932072176341033, 0.1917712226437539, 0.20649221169202436, 0.18141334959488964, 0.18326300063734768, 0.19352535994140052, 0.18028482575659, 0.1871212187234017, 0.21495040892495465, 0.18699952485707994, 0.21347876240322516, 0.20480415268297592, 0.18734531098242635, 0.8721159882169401, 0.1268040959049891, 0.13717576079593397, 0.8950829533126511, 0.1999287071215029, 0.19943601837271485, 0.1495945847415423, 0.1683971785761914, 0.1649378415164916, 0.7407723126576473, 0.2072498634109594, 0.6620952494004506, 0.10362565497278353, 0.16849034149965159, 0.20341730885624876, 0.09424689439977396, 0.16609547017651916, 0.10445141046264306, 0.16819246520000797, 0.1691722315469416, 0.18025554348706097, 0.1709767398222386, 0.17861903310197635, 0.17386315845771805, 0.23640067203481507, 0.1696036822405136, 0.19792326228538837, 0.07720964129122587, 0.10085697661017634, 0.07621981412646872, 0.09628079803774303, 0.08640230351234623, 0.09445049180719944, 0.07829603537593899, 0.08149963855174103, 0.07622705854156775]}, "mutation_prompt": null}
{"id": "e097f756-cbf4-4aa3-b169-049db9a3957c", "solution": "import numpy as np\n\nclass DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for _ in range(self.budget):\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "A novel algorithm that combines Particle Swarm Optimization (PSO) with a local search strategy using a dynamic radius based on the distance to the global best solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8db3ef4b-bdc2-490a-8904-953d3ade449f", "metadata": {"aucs": [0.8233925315387355, 0.8253558197141742, 0.8349844386968159, 0.8245143217435766, 0.8237072357603228, 0.8333239726151405, 0.8260595265339674, 0.8216883347364886, 0.8211797872110109, 0.39832813370562525, 0.5216041960538728, 0.30614911465288785, 0.3604612267390257, 0.20478538003169378, 0.23751744463705182, 0.643367161698398, 0.42463468067362786, 0.332121807844836, 0.09849663677719633, 0.1259082167912695, 0.11840906988445643, 0.12790296389854194, 0.13121925372393595, 0.09617948249482122, 0.09933561830726945, 0.12740144408465803, 0.12819724186033432, 0.10746317525612781, 0.11376833264755992, 0.06310747051888466, 0.10819672203815422, 0.12464343673220935, 0.10519022022416158, 0.10969566268345665, 0.1211801234346469, 0.07226787242762112, 0.9733404277334871, 0.9595088815363954, 0.9602063668935775, 0.9277664396899894, 0.9430220550103203, 0.9447808910515034, 0.9632485431234141, 0.9477957741862315, 0.9623960394595215, 0.29324494826089087, 0.588386996448041, 0.5843818539598808, 0.5889669991271954, 0.6237822678853641, 0.5766956128039373, 0.5328047271052441, 0.6002124932993105, 0.44391343286923335, 0.8652526327503139, 0.18160615253829038, 0.7366954807233179, 0.21277100681201233, 0.8895861978279955, 0.18915387848427234, 0.21188796433848933, 0.16670650814735832, 0.2323855976466429, 0.2114145107653479, 0.2162268465222661, 0.32143611862324517, 0.20930523142543278, 0.20518965964558478, 0.2150479752641028, 0.2170414698612565, 0.2193726853289254, 0.2122042626643078, 0.19927450184740214, 0.16693107173287458, 0.23843272378708913, 0.21168595808770796, 0.2141123494516869, 0.21241783055239094, 0.2409276035470297, 0.15895658946563762, 0.2222743204467842, 9.999999999998899e-05, 0.029065238486248424, 0.06209218395843441, 0.02113915243647113, 9.999999999998899e-05, 0.0035910768728445452, 9.999999999998899e-05, 9.999999999998899e-05, 0.06958425380993649, 0.05885475426721387, 0.025805877952177037, 0.07872431503705901, 0.04021973306483573, 0.016798989020514243, 0.042335658655990094, 0.03178323792367066, 0.08360600860607903, 0.042165857541118235, 0.2936181979034619, 0.0449718149642766, 0.16788943254523492, 0.07295356259450125, 0.17361042143691052, 0.19565039591718036, 0.2282762632610036, 0.07544106944319795, 0.0985686383637665, 0.02424773281096748, 0.06648142538101398, 0.15108905467404166, 0.04762703816783853, 0.04353504940634101, 0.080235884341603, 0.09166703304120061, 0.11680928179262495, 0.0877693227934393, 0.5271092823384345, 0.526594151003843, 0.5145589303676745, 0.5101596486014371, 0.4988697847289453, 0.5027471492921578, 0.5066793155216732, 0.5470095839635158, 0.5125641590580363, 0.11978829821247095, 0.1100417488580484, 0.11588832428862894, 0.12415419013798579, 0.1177919427400268, 0.1227152648856823, 0.10357235593420266, 0.10957092471504637, 0.09862128920417923, 0.132846113383581, 0.13761578211042236, 0.14729170725043716, 0.14377940368009112, 0.139476930569306, 0.19589423675647355, 0.13384375138000082, 0.11378159449526104, 0.1351473353764655, 0.4665401737503163, 0.2992903740757935, 0.3624454667478011, 0.41690741800509346, 0.47748132081209493, 0.33472872644008966, 0.5177422638427076, 0.467928656744802, 0.4746663585913711, 0.26853025779179784, 0.17404120898313702, 0.2279205758823013, 0.36371660739402656, 0.22004666171401988, 0.2534859229892934, 0.28931273571105875, 0.25849937380539834, 0.28659982581162147, 0.17742647059805605, 0.17211966870745, 0.2036670922174102, 0.22302277849884433, 0.21321064833501147, 0.1932072176341033, 0.1917712226437539, 0.20649221169202436, 0.18141334959488964, 0.18326300063734768, 0.19352535994140052, 0.18028482575659, 0.1871212187234017, 0.21495040892495465, 0.18699952485707994, 0.21347876240322516, 0.20480415268297592, 0.18734531098242635, 0.8721159882169401, 0.1268040959049891, 0.13717576079593397, 0.8950829533126511, 0.1999287071215029, 0.19943601837271485, 0.1495945847415423, 0.1683971785761914, 0.1649378415164916, 0.7407723126576473, 0.2072498634109594, 0.6620952494004506, 0.10362565497278353, 0.16849034149965159, 0.20341730885624876, 0.09424689439977396, 0.16609547017651916, 0.10445141046264306, 0.16819246520000797, 0.1691722315469416, 0.18025554348706097, 0.1709767398222386, 0.17861903310197635, 0.17386315845771805, 0.23640067203481507, 0.1696036822405136, 0.19792326228538837, 0.07720964129122587, 0.10085697661017634, 0.07621981412646872, 0.09628079803774303, 0.08640230351234623, 0.09445049180719944, 0.07829603537593899, 0.08149963855174103, 0.07622705854156775]}, "mutation_prompt": null}
{"id": "38bb7f13-e8fd-4f5d-a518-516e87e478f2", "solution": "import numpy as np\n\nclass DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for _ in range(self.budget):\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "A novel algorithm that combines Particle Swarm Optimization (PSO) with a local search strategy using a dynamic radius based on the distance to the global best solution.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8db3ef4b-bdc2-490a-8904-953d3ade449f", "metadata": {"aucs": [0.8233925315387355, 0.8253558197141742, 0.8349844386968159, 0.8245143217435766, 0.8237072357603228, 0.8333239726151405, 0.8260595265339674, 0.8216883347364886, 0.8211797872110109, 0.39832813370562525, 0.5216041960538728, 0.30614911465288785, 0.3604612267390257, 0.20478538003169378, 0.23751744463705182, 0.643367161698398, 0.42463468067362786, 0.332121807844836, 0.09849663677719633, 0.1259082167912695, 0.11840906988445643, 0.12790296389854194, 0.13121925372393595, 0.09617948249482122, 0.09933561830726945, 0.12740144408465803, 0.12819724186033432, 0.10746317525612781, 0.11376833264755992, 0.06310747051888466, 0.10819672203815422, 0.12464343673220935, 0.10519022022416158, 0.10969566268345665, 0.1211801234346469, 0.07226787242762112, 0.9733404277334871, 0.9595088815363954, 0.9602063668935775, 0.9277664396899894, 0.9430220550103203, 0.9447808910515034, 0.9632485431234141, 0.9477957741862315, 0.9623960394595215, 0.29324494826089087, 0.588386996448041, 0.5843818539598808, 0.5889669991271954, 0.6237822678853641, 0.5766956128039373, 0.5328047271052441, 0.6002124932993105, 0.44391343286923335, 0.8652526327503139, 0.18160615253829038, 0.7366954807233179, 0.21277100681201233, 0.8895861978279955, 0.18915387848427234, 0.21188796433848933, 0.16670650814735832, 0.2323855976466429, 0.2114145107653479, 0.2162268465222661, 0.32143611862324517, 0.20930523142543278, 0.20518965964558478, 0.2150479752641028, 0.2170414698612565, 0.2193726853289254, 0.2122042626643078, 0.19927450184740214, 0.16693107173287458, 0.23843272378708913, 0.21168595808770796, 0.2141123494516869, 0.21241783055239094, 0.2409276035470297, 0.15895658946563762, 0.2222743204467842, 9.999999999998899e-05, 0.029065238486248424, 0.06209218395843441, 0.02113915243647113, 9.999999999998899e-05, 0.0035910768728445452, 9.999999999998899e-05, 9.999999999998899e-05, 0.06958425380993649, 0.05885475426721387, 0.025805877952177037, 0.07872431503705901, 0.04021973306483573, 0.016798989020514243, 0.042335658655990094, 0.03178323792367066, 0.08360600860607903, 0.042165857541118235, 0.2936181979034619, 0.0449718149642766, 0.16788943254523492, 0.07295356259450125, 0.17361042143691052, 0.19565039591718036, 0.2282762632610036, 0.07544106944319795, 0.0985686383637665, 0.02424773281096748, 0.06648142538101398, 0.15108905467404166, 0.04762703816783853, 0.04353504940634101, 0.080235884341603, 0.09166703304120061, 0.11680928179262495, 0.0877693227934393, 0.5271092823384345, 0.526594151003843, 0.5145589303676745, 0.5101596486014371, 0.4988697847289453, 0.5027471492921578, 0.5066793155216732, 0.5470095839635158, 0.5125641590580363, 0.11978829821247095, 0.1100417488580484, 0.11588832428862894, 0.12415419013798579, 0.1177919427400268, 0.1227152648856823, 0.10357235593420266, 0.10957092471504637, 0.09862128920417923, 0.132846113383581, 0.13761578211042236, 0.14729170725043716, 0.14377940368009112, 0.139476930569306, 0.19589423675647355, 0.13384375138000082, 0.11378159449526104, 0.1351473353764655, 0.4665401737503163, 0.2992903740757935, 0.3624454667478011, 0.41690741800509346, 0.47748132081209493, 0.33472872644008966, 0.5177422638427076, 0.467928656744802, 0.4746663585913711, 0.26853025779179784, 0.17404120898313702, 0.2279205758823013, 0.36371660739402656, 0.22004666171401988, 0.2534859229892934, 0.28931273571105875, 0.25849937380539834, 0.28659982581162147, 0.17742647059805605, 0.17211966870745, 0.2036670922174102, 0.22302277849884433, 0.21321064833501147, 0.1932072176341033, 0.1917712226437539, 0.20649221169202436, 0.18141334959488964, 0.18326300063734768, 0.19352535994140052, 0.18028482575659, 0.1871212187234017, 0.21495040892495465, 0.18699952485707994, 0.21347876240322516, 0.20480415268297592, 0.18734531098242635, 0.8721159882169401, 0.1268040959049891, 0.13717576079593397, 0.8950829533126511, 0.1999287071215029, 0.19943601837271485, 0.1495945847415423, 0.1683971785761914, 0.1649378415164916, 0.7407723126576473, 0.2072498634109594, 0.6620952494004506, 0.10362565497278353, 0.16849034149965159, 0.20341730885624876, 0.09424689439977396, 0.16609547017651916, 0.10445141046264306, 0.16819246520000797, 0.1691722315469416, 0.18025554348706097, 0.1709767398222386, 0.17861903310197635, 0.17386315845771805, 0.23640067203481507, 0.1696036822405136, 0.19792326228538837, 0.07720964129122587, 0.10085697661017634, 0.07621981412646872, 0.09628079803774303, 0.08640230351234623, 0.09445049180719944, 0.07829603537593899, 0.08149963855174103, 0.07622705854156775]}, "mutation_prompt": null}
{"id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 7, "fitness": 0.28506923530482225, "feedback": "The algorithm DynamicRadiusPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.26.", "error": "", "parent_id": "8db3ef4b-bdc2-490a-8904-953d3ade449f", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "ae403e66-ef72-42db-a2a9-d1865559e6d3", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "9050b7ef-429e-4f6a-ab77-2977cb290750", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "c1d66135-b5f7-4e9a-946a-66f734903c4d", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "35a134be-1b95-4e7c-9c07-739ec4b94379", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "35030fb9-20dd-40b6-9fc6-42d9e8235762", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "13bc296a-fc1c-451b-8358-ddc28c1aad19", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "714f37c2-dcf6-4f9b-aed7-1a9bb53f22f7", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "b8bd3444-5f71-4189-9cfc-363900a3e4be", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "776cb5e6-42b0-4470-a906-b4eecb17ee55", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "a8efd79b-421d-4138-a522-bc4f26a3a480", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "308483b8-8c33-44ef-b71f-0c4a7ab39912", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "d2d687bf-dced-487c-8f38-4afc64d9ebe9", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "9da8717e-b4f0-431d-b25c-4772d72a1206", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "243ab2aa-27f3-4298-b701-db0c43668dff", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "e266587b-7b1c-40ff-9ce4-c38115c815f3", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "72e5a565-870a-41fb-9522-ab0bf6c6d7e8", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "9af4972f-65e0-4cb7-b261-5242bf2d2042", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "239fde3f-5a03-46e1-925d-1fd715d7a287", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "f63630d8-52c4-412f-a200-bd29642d4464", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "534e603e-46e6-4525-bb7b-80d617aaacc0", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "0d0b4eb7-c8a1-48e5-86e4-2a7b3a882500", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "f7889a51-a077-4dd3-90af-82e875ab0b62", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "c9dc589b-a578-4b06-88a1-aa72fe77df8d", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "ba7987f7-5a90-446d-a2a0-eedf7fa29bba", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "97ca8820-8289-4ac7-8f30-d97f3f372fc3", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "641bdd35-cdbe-440c-8c21-d9cc962f9c22", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "9d1d5bca-b439-4618-90b1-8f348b2877b5", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "3db8e964-7445-415a-ad50-779ca043bc0d", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "b093f310-dfc8-4632-aabb-a9129a7e462e", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "8fcd94c7-ff9c-4cbf-9ffc-e6d7b3525a11", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "5554f91b-075a-4ca0-9449-01ac4cf7f645", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "6a5e15b5-8290-449e-982c-e171d071a6e1", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "86ebce48-1d4b-4cba-9921-8794b91d4f69", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "fee21dea-ed37-4b9f-8374-1bb331145157", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "75817c8d-c346-4166-ae16-22d87c80327f", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "cdba4f9c-0749-4625-85d1-2ed6858d4291", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "a0a392f1-175c-4f1c-8ce6-9e4763581e58", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "6195a42a-0a5b-401b-8345-f30bebdd1034", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "36e8ffbc-ca30-4b02-ad60-3457a7c891fe", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "e94a7fd3-7add-49df-b0f9-3968f9e6d371", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "a21b6ce9-c0b3-447c-9996-707d8a78e5ef", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "b7508bd1-f23a-43e6-9ee2-95a102abf843", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "94e3dd42-73c3-45b6-ae71-41c3573b4488", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "41b91413-81e4-4c66-80df-c9f26a91dc2c", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "e7737466-f03a-441b-b807-b14ef5ad87e4", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "03abcaad-c102-4cd5-923f-84a886a264e3", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "e3838d25-f299-4521-84e5-a41f1b12f380", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "2b7cdc4f-1c63-4d71-a4b2-24d76a79582c", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "2cc6735c-ac27-4e69-b2e2-790ccbd4de7a", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "6f02bb73-83f7-48be-8bb8-e7f7e972547a", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "00b5212a-8bc4-44cd-b479-c3fcaef17dd5", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "f668484b-0dba-49d6-8894-84929f2c9257", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "bd16866c-007a-43d1-9556-a59fac5a8248", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "73881a16-81ab-48a4-98fc-58649c314844", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "958b4cc5-db08-4e18-9e83-f60fa2368116", "solution": "import numpy as np\n\nclass MultiStartDynamicRadiusPSO:\n    def __init__(self, budget, dim, num_starts=5):\n        self.budget = budget\n        self.dim = dim\n        self.num_starts = num_starts\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        global_best_list = []\n        for _ in range(self.num_starts):\n            swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n            velocities = np.zeros((swarm_size, self.dim))\n            personal_bests = swarm.copy()\n            global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n            for t in range(1, self.budget + 1):\n                inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n                for i in range(swarm_size):\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    velocities[i] = (inertia_weight * velocities[i] +\n                                     cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                     social_weight * r2 * (global_best - swarm[i]))\n                    swarm[i] = within_bounds(swarm[i] + velocities[i])\n                    swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                    if func(swarm[i]) < func(personal_bests[i]):\n                        personal_bests[i] = swarm[i]\n                        if func(swarm[i]) < func(global_best):\n                            global_best = swarm[i]\n\n            global_best_list.append(global_best)\n\n        return global_best_list[np.argmin([func(p) for p in global_best_list])]", "name": "MultiStartDynamicRadiusPSO", "description": "Implementing a multi-start strategy by initializing multiple swarms with different random starting points to enhance exploration and convergence speed.", "configspace": "", "generation": 62, "fitness": 0.28506923530482225, "feedback": "The algorithm MultiStartDynamicRadiusPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.26.", "error": "", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "9a15af4a-e14a-4bb0-832a-d60530753002", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "5455dd14-d98e-4d06-96ac-727028b16153", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "1470b555-0a27-464d-a60c-a731474513ac", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "692c80bd-ac74-476e-b88f-ddb72f1df901", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "6a7b4482-d537-4ae8-917b-4bd7b5f5062d", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "67c445e9-cfe3-407f-b5ee-a1676169d5e4", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "46623381-a9cb-47a1-a955-3da68e063598", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "6d47ce5d-6f75-4b8f-8017-2142ec4044dc", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "7aaa13a6-dfd6-446a-9fb1-f225e6fbc3f8", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "1835b4a0-8fef-4479-a5bc-2c6999eca5db", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "4f617ed5-d93a-4d2d-96a4-ea7c5a307218", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "79f88337-3b48-45bb-90a2-887df5923d98", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "45ef3048-9d7a-4ae0-87bd-280d06f0a39a", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "38109ed0-db94-428a-b4ba-b4d6861e8fa6", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "64bf181a-c1ca-4157-909b-0b8b7fbd3090", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "907c71d5-b52f-41b1-9248-4efd01c061c8", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "d9909c27-f8d6-4ba7-acc9-eebc0f6d72b8", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "adb56a8d-8733-42b9-aa4c-b8c330d6b2cd", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "d407688f-beae-44f0-a0cc-cfa0f81f19f0", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "15c24e71-6250-4955-84cd-4b4759f997cf", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "8f1d6685-2149-4714-9304-777e7ce76c95", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "45e4f665-0e34-4035-8788-e832be70fbb1", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "d92e4d0e-4b1b-49d7-8d10-a5af0a856ee3", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "1df426c1-2111-439b-8756-d66aab53ca70", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "993320e4-d259-4780-a2ee-139298c98e37", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "6514a590-c4de-4118-b528-087675992861", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "1d2c84ab-e108-42d3-84fb-51597181d3b8", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "b4152799-70cc-428a-b5b8-c2d1fc51d91b", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "adfb7309-0c2e-42c2-9c7c-6f991e9f5ee6", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "3c34e8d6-434c-4d64-9ff9-e8fad202eafc", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "1ea6c33a-17a3-4317-8c2c-82bb720e1192", "solution": "class DynamicPopulationSizePSO:\n    def __init__(self, budget, dim):\n        self.budget = int(budget * 1.02)  # Increase budget by 2%\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n            if t % (self.budget // 5) == 0:  # Dynamic population size adaptation\n                swarm_size = min(40, int(swarm_size * 1.1))  # Increase swarm size by 10%\n                swarm = np.vstack((swarm, np.random.uniform(-5.0, 5.0, size=(swarm_size - len(swarm), self.dim)))\n                velocities = np.vstack((velocities, np.zeros((swarm_size - len(velocities), self.dim)))\n                personal_bests = np.vstack((personal_bests, swarm[-swarm_size:]))\n\n        return global_best", "name": "DynamicPopulationSizePSO", "description": "Implementing a dynamic population size adaptation strategy to adjust the number of particles based on convergence speed for faster optimization.", "configspace": "", "generation": 93, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 45, 17, '                velocities = np.vstack((velocities, np.zeros((swarm_size - len(velocities), self.dim)))\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 45, 17, '                velocities = np.vstack((velocities, np.zeros((swarm_size - len(velocities), self.dim)))\\n'))", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {}, "mutation_prompt": null}
{"id": "30d0f879-bd39-4f26-a4b0-379d0f8a1371", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "120673bb-59a3-4bd2-9167-5ffc4dae20c2", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "b02d32f6-36ae-4773-9ec5-c1dcfb808750", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "f1f2bbf3-ccea-42de-8548-dd7f55f66a8e", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "9d9c1db5-430b-4b14-be7c-53ad84f592b1", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
{"id": "70a7a25a-26b9-4d4e-8435-db770398659a", "solution": "class DynamicRadiusPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        def local_search(current, global_best, radius):\n            new_point = current + np.random.uniform(-radius, radius, size=current.shape)\n            new_point = within_bounds(new_point)\n            if func(new_point) < func(current):\n                return new_point\n            return current\n\n        swarm_size = 20\n        inertia_weight = 0.5\n        cognitive_weight = social_weight = 1.0\n\n        swarm = np.random.uniform(-5.0, 5.0, size=(swarm_size, self.dim))\n        velocities = np.zeros((swarm_size, self.dim))\n        personal_bests = swarm.copy()\n        global_best = swarm[np.argmin([func(p) for p in swarm])]\n\n        for t in range(1, self.budget + 1):\n            inertia_weight = 0.4 + 0.1 * (1 - t / self.budget)  # Adaptive inertia weight\n\n            for i in range(swarm_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                velocities[i] = (inertia_weight * velocities[i] +\n                                 cognitive_weight * r1 * (personal_bests[i] - swarm[i]) +\n                                 social_weight * r2 * (global_best - swarm[i]))\n                swarm[i] = within_bounds(swarm[i] + velocities[i])\n                swarm[i] = local_search(swarm[i], global_best, np.linalg.norm(global_best - swarm[i]))\n\n                if func(swarm[i]) < func(personal_bests[i]):\n                    personal_bests[i] = swarm[i]\n                    if func(swarm[i]) < func(global_best):\n                        global_best = swarm[i]\n\n        return global_best", "name": "DynamicRadiusPSO", "description": "Introducing an adaptive inertia weight factor to enhance convergence speed by dynamically adjusting the exploration and exploitation trade-off during optimization.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "97ebc0e0-1eb0-4507-91d5-658c3efdcc50", "metadata": {"aucs": [0.8241511342042485, 0.8250311881456187, 0.8290336598065278, 0.824478525456418, 0.824605891618704, 0.8322510501728531, 0.82691583094858, 0.8210525809936612, 0.8222176159826678, 0.3400582710555832, 0.5129766229982426, 0.4742650116272513, 0.2470192630352238, 0.29997143371827983, 0.22736775719655156, 0.6369589880123874, 0.38592079764858533, 0.3658584251465594, 0.11565566702889996, 0.13227762823563805, 0.07873021810979919, 0.11500149574282936, 0.1287160073378827, 0.09768870614552938, 0.10126166722349594, 0.10994017142521895, 0.13168263877095654, 0.10242016079442129, 0.11176845005834135, 0.0629288164069487, 0.11321602244880868, 0.12074176397152625, 0.10245220685436385, 0.11129133946235448, 0.09735604400605191, 0.07503632654465886, 0.9733400701993438, 0.959508869220882, 0.96020621650782, 0.9277620702385485, 0.9430219292956581, 0.9447806499380639, 0.9632484332678264, 0.9477956289840564, 0.9623957876984467, 0.48870255712035815, 0.5968964800924266, 0.5138742542769518, 0.6700359318058007, 0.6307546113137055, 0.5903269420151582, 0.5804011477343579, 0.5372241880829534, 0.6051764428801423, 0.8652526327503139, 0.21205482360841565, 0.5774045373430144, 0.2127709638405264, 0.8895861978279955, 0.18915387848427234, 0.1567088115417331, 0.16670650814735832, 0.7505616184410214, 0.20542792662298281, 0.2068683399515462, 0.3281170895907085, 0.20542860147997466, 0.21137404582796715, 0.21376897887956625, 0.20226014477444543, 0.21677965511894481, 0.20688263676928786, 0.19324171599465978, 0.15885340024034722, 0.2341652115858236, 0.20936395624912763, 0.2125737955154413, 0.20863443035915596, 0.23351007798288193, 0.15930562956322758, 0.23084553626370985, 9.999999999998899e-05, 0.02434088525202882, 0.07233613148968598, 0.016735621677608448, 9.999999999998899e-05, 0.00456883433863442, 9.999999999998899e-05, 9.999999999998899e-05, 0.07361807464815451, 0.062035122917065366, 0.02468204062496715, 0.07809656142900367, 0.03343808141354343, 0.02750644226678811, 0.04300383762982307, 0.03012740563395966, 0.08377125634206206, 0.04064863616606251, 0.30184836382998337, 0.04616071855562276, 0.16008724472497893, 0.07306569166077148, 0.1729031363475737, 0.19626130436759182, 0.2244214245930658, 0.07589414409515449, 0.09550890808609147, 0.029397811258304096, 0.06670873401227695, 0.14821405059038972, 0.041973568497348235, 0.04332921643679333, 0.07031590901663765, 0.09140843648374197, 0.11999893780097481, 0.0905253161475541, 0.5754865770886278, 0.5180418988362812, 0.5044741807116293, 0.513696841716427, 0.4844437555812833, 0.5031615938143836, 0.5196667192252209, 0.5637236943995462, 0.5103779798030377, 0.1104332129551372, 0.1234937161190115, 0.13627521419450495, 0.09208907280938416, 0.11687633212736492, 0.12286608377647057, 0.10952221868030143, 0.09322881273135042, 0.09061076823683867, 0.1155198461234449, 0.12988424721466674, 0.13177148771929859, 0.14403859875394065, 0.1217760158475345, 0.19340074370574356, 0.18893601275256378, 0.11973381908054248, 0.12987500918605, 0.4242284802949665, 0.29728082261486466, 0.3962531185687208, 0.36520152439937004, 0.3666888130660585, 0.37698805342583974, 0.5528801461085748, 0.5536287039117329, 0.4749349776477907, 0.23465799339632099, 0.20167332568153096, 0.27644283148342197, 0.33570555666650803, 0.23097205615221972, 0.26208458356060116, 0.26466273194932544, 0.2553553471898564, 0.3298587796864053, 0.19396063511120476, 0.209544524947608, 0.18487064589825863, 0.19298233765056372, 0.2127931620858705, 0.20821930983423043, 0.1962613084969126, 0.1918249473149466, 0.20840667371998, 0.18328678485228223, 0.19352002469924479, 0.18366659795383478, 0.1839643296137975, 0.21502874470468902, 0.19558558282596472, 0.2133939272645955, 0.2048168694601501, 0.19059338476465804, 0.8721526527606458, 0.12680761278833308, 0.13371966040714545, 0.8948170774535087, 0.1999307116389999, 0.19943608761636122, 0.14959442385628663, 0.1683972823857246, 0.16493840097691936, 0.7400656488823933, 0.20744374630476858, 0.6483353315619204, 0.10362581223592537, 0.1684902918452721, 0.2034181477649668, 0.09424692986596273, 0.16609747502136574, 0.10445147958213852, 0.17250990410392442, 0.18179811362042197, 0.1855202672656745, 0.17697752233337616, 0.19044444805896632, 0.16883991482067084, 0.182103339578657, 0.18405214402532455, 0.16950145932811378, 0.07610850620762155, 0.09692811868650586, 0.08428310688326912, 0.07443231911097448, 0.07304331738748315, 0.10467970564007223, 0.08252995492567516, 0.07396855061105112, 0.08095868801483574]}, "mutation_prompt": null}
