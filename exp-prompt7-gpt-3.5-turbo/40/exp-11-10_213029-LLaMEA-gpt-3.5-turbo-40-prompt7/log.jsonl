{"id": "864f4d38-5f92-4524-ad04-c30103ad600b", "solution": "", "name": "", "description": "", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "No code was extracted.", "error": "", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "82aecf81-4a44-442b-9f93-998f060d5465", "solution": "", "name": "", "description": "", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "864f4d38-5f92-4524-ad04-c30103ad600b", "metadata": {}, "mutation_prompt": null}
{"id": "8b80a576-71ec-4f35-aef6-77c5b01687bd", "solution": "import numpy as np\n\nclass AdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + self.c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + self.c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n        return self.global_best_pos", "name": "AdaptiveInertiaPSO", "description": "Implement a novel variant of Particle Swarm Optimization (PSO) with adaptive inertia weight to improve convergence speed. ", "configspace": "", "generation": 2, "fitness": 0.2278575034997952, "feedback": "The algorithm AdaptiveInertiaPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "864f4d38-5f92-4524-ad04-c30103ad600b", "metadata": {"aucs": [0.5113633293508427, 0.5071289755310789, 0.5126125217133646, 0.5038760058175027, 0.5156072167228665, 0.5028501616223497, 0.5048349132598864, 0.5034790130415553, 0.5131604399587435, 0.15236042323419374, 0.11063455500898467, 0.10948867881152968, 0.0686952255090586, 0.05729544731278857, 0.06964179359888034, 0.03306128752002746, 0.05848462736614024, 0.01735646756185527, 0.10398529447758953, 0.13093458897485366, 0.1012531537974175, 0.11769559750653535, 0.15610760413544644, 0.1079730904867503, 0.1033035223472758, 0.11160874220385342, 0.118817381818479, 0.07929873961850376, 0.09767092003864186, 0.07723544623563428, 0.09783999314129632, 0.10105346032632001, 0.059527263259784524, 0.10266714224497431, 0.08674999314086596, 0.06667955679202953, 0.8847457684958745, 0.8621291094181934, 0.8584122968493906, 0.8379593230061513, 0.8550918209695886, 0.85684474645484, 0.8742463893935312, 0.837740042209513, 0.8371574820006932, 0.3527838768707864, 0.3175052603695876, 0.33277882941445236, 0.3679144174121993, 0.35654711635313774, 0.3446243629794622, 0.33164117827372475, 0.3288596560640187, 0.36109738245869083, 0.7074018975554973, 0.16739231244776132, 0.13381304155792617, 0.278547681937625, 0.26694722428877604, 0.13590842452547114, 0.14987503295192584, 0.14870327410551132, 0.1708410602758329, 0.17510489316063704, 0.21184632964859207, 0.14964187002429663, 0.17361056112945827, 0.17447053405035362, 0.16206738264069698, 0.1956198504610993, 0.12775372077888536, 0.18823510431746504, 0.16674412886916856, 0.16329818506770133, 0.18226129321358953, 0.17386912696063406, 0.17678541453355479, 0.1324890451220786, 0.19483604468194005, 0.18387267152834985, 0.1927976916120523, 0.00047604891064911836, 0.01289050390968971, 0.07265250049471983, 0.008560874230441384, 0.0654760740074487, 0.034582951418208774, 0.03789561145563969, 9.999999999998899e-05, 0.04916062827216361, 0.10483183515119532, 0.10101831769954284, 0.1348373263349164, 0.03758618887797971, 0.00556169974729781, 0.046980952671551446, 0.18434028518311596, 0.0730191297151821, 0.0468495761224198, 9.999999999998899e-05, 0.004365636508199211, 0.03320444957510149, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007427215533434173, 0.014089033946806051, 0.0027391467478787845, 0.14579603479222591, 0.08919952852197599, 0.10533539861024166, 0.07698465610111183, 0.062222517826731716, 0.07075579155989997, 0.08842206332581248, 0.1332092022790291, 0.07742501379760758, 0.4475201182592832, 0.4298763610719266, 0.4739060303175716, 0.48287881255517706, 0.4448733552558013, 0.45243216335736003, 0.4637425139892358, 0.44137355326164174, 0.48390864639586795, 0.048346075991461346, 0.06380567990674313, 0.037598398008039435, 0.11644779704006014, 0.09324551798850045, 0.09031757041395305, 0.08972022612992858, 0.10834267578559087, 0.10954221864734659, 0.2167626950893934, 0.18673090689660665, 0.18677496514882574, 0.24497259212029898, 0.30400460754284087, 0.24375176035398294, 0.27497993545332733, 0.22165331439132197, 0.29145715961984386, 0.1546241969215314, 0.31529787594100434, 0.2059616032696988, 0.25083687502311747, 0.24351523652106655, 0.3081922091573104, 0.1668394567067515, 0.3210403901402906, 0.20572530500446207, 0.1513652398588542, 0.2016235880702939, 0.12460676122890091, 0.22510442901711125, 0.19569856438703614, 0.1579184516314761, 0.16357837770858352, 0.2402685103667518, 0.15988792692124065, 0.25143762509983525, 0.19608946478728362, 0.21840153124084283, 0.23875984266730133, 0.2136321800525911, 0.21643801391253903, 0.219295887998616, 0.2272273052592022, 0.2243642042917705, 0.16750294009268074, 0.19304925927284688, 0.20129207126848703, 0.18154915318277554, 0.20351926147592136, 0.17908148054085793, 0.18866579332716027, 0.1803083584544427, 0.17819150816016627, 0.1260996516802143, 0.12317048081953708, 0.13156046988738745, 0.8077513779021924, 0.20037704478516138, 0.7727215305540612, 0.11999390711539548, 0.7642452257319415, 0.7477032302189881, 0.5311574358403541, 0.15544090199964544, 0.593532688459355, 0.5330881409577453, 0.20581125874763362, 0.2034779957137225, 0.09304618941438436, 0.6222682915168092, 0.4575949610276362, 0.17864521278724876, 0.1903581507495533, 0.18460041427274487, 0.18110329647254098, 0.18927516490734486, 0.1820683199221943, 0.1806500928660667, 0.18550996708888212, 0.19776869061916946, 0.0913429572123523, 0.07730594216284503, 0.07477127054336474, 0.09125359019215462, 0.09203797713097517, 0.07543716008216239, 0.07425412784013374, 0.07980347291389622, 0.09859601261040718]}, "mutation_prompt": null}
{"id": "ce6fd261-3236-46ba-87e5-ae126a8bec9b", "solution": "import numpy as np\n\nclass AdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + self.c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + self.c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n        return self.global_best_pos", "name": "AdaptiveInertiaPSO", "description": "Implement a novel variant of Particle Swarm Optimization (PSO) with adaptive inertia weight to improve convergence speed. ", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8b80a576-71ec-4f35-aef6-77c5b01687bd", "metadata": {"aucs": [0.5113633293508427, 0.5071289755310789, 0.5126125217133646, 0.5038760058175027, 0.5156072167228665, 0.5028501616223497, 0.5048349132598864, 0.5034790130415553, 0.5131604399587435, 0.15236042323419374, 0.11063455500898467, 0.10948867881152968, 0.0686952255090586, 0.05729544731278857, 0.06964179359888034, 0.03306128752002746, 0.05848462736614024, 0.01735646756185527, 0.10398529447758953, 0.13093458897485366, 0.1012531537974175, 0.11769559750653535, 0.15610760413544644, 0.1079730904867503, 0.1033035223472758, 0.11160874220385342, 0.118817381818479, 0.07929873961850376, 0.09767092003864186, 0.07723544623563428, 0.09783999314129632, 0.10105346032632001, 0.059527263259784524, 0.10266714224497431, 0.08674999314086596, 0.06667955679202953, 0.8847457684958745, 0.8621291094181934, 0.8584122968493906, 0.8379593230061513, 0.8550918209695886, 0.85684474645484, 0.8742463893935312, 0.837740042209513, 0.8371574820006932, 0.3527838768707864, 0.3175052603695876, 0.33277882941445236, 0.3679144174121993, 0.35654711635313774, 0.3446243629794622, 0.33164117827372475, 0.3288596560640187, 0.36109738245869083, 0.7074018975554973, 0.16739231244776132, 0.13381304155792617, 0.278547681937625, 0.26694722428877604, 0.13590842452547114, 0.14987503295192584, 0.14870327410551132, 0.1708410602758329, 0.17510489316063704, 0.21184632964859207, 0.14964187002429663, 0.17361056112945827, 0.17447053405035362, 0.16206738264069698, 0.1956198504610993, 0.12775372077888536, 0.18823510431746504, 0.16674412886916856, 0.16329818506770133, 0.18226129321358953, 0.17386912696063406, 0.17678541453355479, 0.1324890451220786, 0.19483604468194005, 0.18387267152834985, 0.1927976916120523, 0.00047604891064911836, 0.01289050390968971, 0.07265250049471983, 0.008560874230441384, 0.0654760740074487, 0.034582951418208774, 0.03789561145563969, 9.999999999998899e-05, 0.04916062827216361, 0.10483183515119532, 0.10101831769954284, 0.1348373263349164, 0.03758618887797971, 0.00556169974729781, 0.046980952671551446, 0.18434028518311596, 0.0730191297151821, 0.0468495761224198, 9.999999999998899e-05, 0.004365636508199211, 0.03320444957510149, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007427215533434173, 0.014089033946806051, 0.0027391467478787845, 0.14579603479222591, 0.08919952852197599, 0.10533539861024166, 0.07698465610111183, 0.062222517826731716, 0.07075579155989997, 0.08842206332581248, 0.1332092022790291, 0.07742501379760758, 0.4475201182592832, 0.4298763610719266, 0.4739060303175716, 0.48287881255517706, 0.4448733552558013, 0.45243216335736003, 0.4637425139892358, 0.44137355326164174, 0.48390864639586795, 0.048346075991461346, 0.06380567990674313, 0.037598398008039435, 0.11644779704006014, 0.09324551798850045, 0.09031757041395305, 0.08972022612992858, 0.10834267578559087, 0.10954221864734659, 0.2167626950893934, 0.18673090689660665, 0.18677496514882574, 0.24497259212029898, 0.30400460754284087, 0.24375176035398294, 0.27497993545332733, 0.22165331439132197, 0.29145715961984386, 0.1546241969215314, 0.31529787594100434, 0.2059616032696988, 0.25083687502311747, 0.24351523652106655, 0.3081922091573104, 0.1668394567067515, 0.3210403901402906, 0.20572530500446207, 0.1513652398588542, 0.2016235880702939, 0.12460676122890091, 0.22510442901711125, 0.19569856438703614, 0.1579184516314761, 0.16357837770858352, 0.2402685103667518, 0.15988792692124065, 0.25143762509983525, 0.19608946478728362, 0.21840153124084283, 0.23875984266730133, 0.2136321800525911, 0.21643801391253903, 0.219295887998616, 0.2272273052592022, 0.2243642042917705, 0.16750294009268074, 0.19304925927284688, 0.20129207126848703, 0.18154915318277554, 0.20351926147592136, 0.17908148054085793, 0.18866579332716027, 0.1803083584544427, 0.17819150816016627, 0.1260996516802143, 0.12317048081953708, 0.13156046988738745, 0.8077513779021924, 0.20037704478516138, 0.7727215305540612, 0.11999390711539548, 0.7642452257319415, 0.7477032302189881, 0.5311574358403541, 0.15544090199964544, 0.593532688459355, 0.5330881409577453, 0.20581125874763362, 0.2034779957137225, 0.09304618941438436, 0.6222682915168092, 0.4575949610276362, 0.17864521278724876, 0.1903581507495533, 0.18460041427274487, 0.18110329647254098, 0.18927516490734486, 0.1820683199221943, 0.1806500928660667, 0.18550996708888212, 0.19776869061916946, 0.0913429572123523, 0.07730594216284503, 0.07477127054336474, 0.09125359019215462, 0.09203797713097517, 0.07543716008216239, 0.07425412784013374, 0.07980347291389622, 0.09859601261040718]}, "mutation_prompt": null}
{"id": "09ba8c20-d164-4090-84cf-1d11dc3f4eb3", "solution": "import numpy as np\n\nclass AdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + self.c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + self.c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n        return self.global_best_pos", "name": "AdaptiveInertiaPSO", "description": "Implement a novel variant of Particle Swarm Optimization (PSO) with adaptive inertia weight to improve convergence speed. ", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8b80a576-71ec-4f35-aef6-77c5b01687bd", "metadata": {"aucs": [0.5113633293508427, 0.5071289755310789, 0.5126125217133646, 0.5038760058175027, 0.5156072167228665, 0.5028501616223497, 0.5048349132598864, 0.5034790130415553, 0.5131604399587435, 0.15236042323419374, 0.11063455500898467, 0.10948867881152968, 0.0686952255090586, 0.05729544731278857, 0.06964179359888034, 0.03306128752002746, 0.05848462736614024, 0.01735646756185527, 0.10398529447758953, 0.13093458897485366, 0.1012531537974175, 0.11769559750653535, 0.15610760413544644, 0.1079730904867503, 0.1033035223472758, 0.11160874220385342, 0.118817381818479, 0.07929873961850376, 0.09767092003864186, 0.07723544623563428, 0.09783999314129632, 0.10105346032632001, 0.059527263259784524, 0.10266714224497431, 0.08674999314086596, 0.06667955679202953, 0.8847457684958745, 0.8621291094181934, 0.8584122968493906, 0.8379593230061513, 0.8550918209695886, 0.85684474645484, 0.8742463893935312, 0.837740042209513, 0.8371574820006932, 0.3527838768707864, 0.3175052603695876, 0.33277882941445236, 0.3679144174121993, 0.35654711635313774, 0.3446243629794622, 0.33164117827372475, 0.3288596560640187, 0.36109738245869083, 0.7074018975554973, 0.16739231244776132, 0.13381304155792617, 0.278547681937625, 0.26694722428877604, 0.13590842452547114, 0.14987503295192584, 0.14870327410551132, 0.1708410602758329, 0.17510489316063704, 0.21184632964859207, 0.14964187002429663, 0.17361056112945827, 0.17447053405035362, 0.16206738264069698, 0.1956198504610993, 0.12775372077888536, 0.18823510431746504, 0.16674412886916856, 0.16329818506770133, 0.18226129321358953, 0.17386912696063406, 0.17678541453355479, 0.1324890451220786, 0.19483604468194005, 0.18387267152834985, 0.1927976916120523, 0.00047604891064911836, 0.01289050390968971, 0.07265250049471983, 0.008560874230441384, 0.0654760740074487, 0.034582951418208774, 0.03789561145563969, 9.999999999998899e-05, 0.04916062827216361, 0.10483183515119532, 0.10101831769954284, 0.1348373263349164, 0.03758618887797971, 0.00556169974729781, 0.046980952671551446, 0.18434028518311596, 0.0730191297151821, 0.0468495761224198, 9.999999999998899e-05, 0.004365636508199211, 0.03320444957510149, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007427215533434173, 0.014089033946806051, 0.0027391467478787845, 0.14579603479222591, 0.08919952852197599, 0.10533539861024166, 0.07698465610111183, 0.062222517826731716, 0.07075579155989997, 0.08842206332581248, 0.1332092022790291, 0.07742501379760758, 0.4475201182592832, 0.4298763610719266, 0.4739060303175716, 0.48287881255517706, 0.4448733552558013, 0.45243216335736003, 0.4637425139892358, 0.44137355326164174, 0.48390864639586795, 0.048346075991461346, 0.06380567990674313, 0.037598398008039435, 0.11644779704006014, 0.09324551798850045, 0.09031757041395305, 0.08972022612992858, 0.10834267578559087, 0.10954221864734659, 0.2167626950893934, 0.18673090689660665, 0.18677496514882574, 0.24497259212029898, 0.30400460754284087, 0.24375176035398294, 0.27497993545332733, 0.22165331439132197, 0.29145715961984386, 0.1546241969215314, 0.31529787594100434, 0.2059616032696988, 0.25083687502311747, 0.24351523652106655, 0.3081922091573104, 0.1668394567067515, 0.3210403901402906, 0.20572530500446207, 0.1513652398588542, 0.2016235880702939, 0.12460676122890091, 0.22510442901711125, 0.19569856438703614, 0.1579184516314761, 0.16357837770858352, 0.2402685103667518, 0.15988792692124065, 0.25143762509983525, 0.19608946478728362, 0.21840153124084283, 0.23875984266730133, 0.2136321800525911, 0.21643801391253903, 0.219295887998616, 0.2272273052592022, 0.2243642042917705, 0.16750294009268074, 0.19304925927284688, 0.20129207126848703, 0.18154915318277554, 0.20351926147592136, 0.17908148054085793, 0.18866579332716027, 0.1803083584544427, 0.17819150816016627, 0.1260996516802143, 0.12317048081953708, 0.13156046988738745, 0.8077513779021924, 0.20037704478516138, 0.7727215305540612, 0.11999390711539548, 0.7642452257319415, 0.7477032302189881, 0.5311574358403541, 0.15544090199964544, 0.593532688459355, 0.5330881409577453, 0.20581125874763362, 0.2034779957137225, 0.09304618941438436, 0.6222682915168092, 0.4575949610276362, 0.17864521278724876, 0.1903581507495533, 0.18460041427274487, 0.18110329647254098, 0.18927516490734486, 0.1820683199221943, 0.1806500928660667, 0.18550996708888212, 0.19776869061916946, 0.0913429572123523, 0.07730594216284503, 0.07477127054336474, 0.09125359019215462, 0.09203797713097517, 0.07543716008216239, 0.07425412784013374, 0.07980347291389622, 0.09859601261040718]}, "mutation_prompt": null}
{"id": "17f0dc48-a195-415e-92eb-9302a2b96002", "solution": "import numpy as np\n\nclass AdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + self.c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + self.c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n        return self.global_best_pos", "name": "AdaptiveInertiaPSO", "description": "Implement a novel variant of Particle Swarm Optimization (PSO) with adaptive inertia weight to improve convergence speed. ", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8b80a576-71ec-4f35-aef6-77c5b01687bd", "metadata": {"aucs": [0.5113633293508427, 0.5071289755310789, 0.5126125217133646, 0.5038760058175027, 0.5156072167228665, 0.5028501616223497, 0.5048349132598864, 0.5034790130415553, 0.5131604399587435, 0.15236042323419374, 0.11063455500898467, 0.10948867881152968, 0.0686952255090586, 0.05729544731278857, 0.06964179359888034, 0.03306128752002746, 0.05848462736614024, 0.01735646756185527, 0.10398529447758953, 0.13093458897485366, 0.1012531537974175, 0.11769559750653535, 0.15610760413544644, 0.1079730904867503, 0.1033035223472758, 0.11160874220385342, 0.118817381818479, 0.07929873961850376, 0.09767092003864186, 0.07723544623563428, 0.09783999314129632, 0.10105346032632001, 0.059527263259784524, 0.10266714224497431, 0.08674999314086596, 0.06667955679202953, 0.8847457684958745, 0.8621291094181934, 0.8584122968493906, 0.8379593230061513, 0.8550918209695886, 0.85684474645484, 0.8742463893935312, 0.837740042209513, 0.8371574820006932, 0.3527838768707864, 0.3175052603695876, 0.33277882941445236, 0.3679144174121993, 0.35654711635313774, 0.3446243629794622, 0.33164117827372475, 0.3288596560640187, 0.36109738245869083, 0.7074018975554973, 0.16739231244776132, 0.13381304155792617, 0.278547681937625, 0.26694722428877604, 0.13590842452547114, 0.14987503295192584, 0.14870327410551132, 0.1708410602758329, 0.17510489316063704, 0.21184632964859207, 0.14964187002429663, 0.17361056112945827, 0.17447053405035362, 0.16206738264069698, 0.1956198504610993, 0.12775372077888536, 0.18823510431746504, 0.16674412886916856, 0.16329818506770133, 0.18226129321358953, 0.17386912696063406, 0.17678541453355479, 0.1324890451220786, 0.19483604468194005, 0.18387267152834985, 0.1927976916120523, 0.00047604891064911836, 0.01289050390968971, 0.07265250049471983, 0.008560874230441384, 0.0654760740074487, 0.034582951418208774, 0.03789561145563969, 9.999999999998899e-05, 0.04916062827216361, 0.10483183515119532, 0.10101831769954284, 0.1348373263349164, 0.03758618887797971, 0.00556169974729781, 0.046980952671551446, 0.18434028518311596, 0.0730191297151821, 0.0468495761224198, 9.999999999998899e-05, 0.004365636508199211, 0.03320444957510149, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007427215533434173, 0.014089033946806051, 0.0027391467478787845, 0.14579603479222591, 0.08919952852197599, 0.10533539861024166, 0.07698465610111183, 0.062222517826731716, 0.07075579155989997, 0.08842206332581248, 0.1332092022790291, 0.07742501379760758, 0.4475201182592832, 0.4298763610719266, 0.4739060303175716, 0.48287881255517706, 0.4448733552558013, 0.45243216335736003, 0.4637425139892358, 0.44137355326164174, 0.48390864639586795, 0.048346075991461346, 0.06380567990674313, 0.037598398008039435, 0.11644779704006014, 0.09324551798850045, 0.09031757041395305, 0.08972022612992858, 0.10834267578559087, 0.10954221864734659, 0.2167626950893934, 0.18673090689660665, 0.18677496514882574, 0.24497259212029898, 0.30400460754284087, 0.24375176035398294, 0.27497993545332733, 0.22165331439132197, 0.29145715961984386, 0.1546241969215314, 0.31529787594100434, 0.2059616032696988, 0.25083687502311747, 0.24351523652106655, 0.3081922091573104, 0.1668394567067515, 0.3210403901402906, 0.20572530500446207, 0.1513652398588542, 0.2016235880702939, 0.12460676122890091, 0.22510442901711125, 0.19569856438703614, 0.1579184516314761, 0.16357837770858352, 0.2402685103667518, 0.15988792692124065, 0.25143762509983525, 0.19608946478728362, 0.21840153124084283, 0.23875984266730133, 0.2136321800525911, 0.21643801391253903, 0.219295887998616, 0.2272273052592022, 0.2243642042917705, 0.16750294009268074, 0.19304925927284688, 0.20129207126848703, 0.18154915318277554, 0.20351926147592136, 0.17908148054085793, 0.18866579332716027, 0.1803083584544427, 0.17819150816016627, 0.1260996516802143, 0.12317048081953708, 0.13156046988738745, 0.8077513779021924, 0.20037704478516138, 0.7727215305540612, 0.11999390711539548, 0.7642452257319415, 0.7477032302189881, 0.5311574358403541, 0.15544090199964544, 0.593532688459355, 0.5330881409577453, 0.20581125874763362, 0.2034779957137225, 0.09304618941438436, 0.6222682915168092, 0.4575949610276362, 0.17864521278724876, 0.1903581507495533, 0.18460041427274487, 0.18110329647254098, 0.18927516490734486, 0.1820683199221943, 0.1806500928660667, 0.18550996708888212, 0.19776869061916946, 0.0913429572123523, 0.07730594216284503, 0.07477127054336474, 0.09125359019215462, 0.09203797713097517, 0.07543716008216239, 0.07425412784013374, 0.07980347291389622, 0.09859601261040718]}, "mutation_prompt": null}
{"id": "0b7f8a66-3341-4a56-8801-f7a8ec86c730", "solution": "import numpy as np\n\nclass AdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + self.c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + self.c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n        return self.global_best_pos", "name": "AdaptiveInertiaPSO", "description": "Implement a novel variant of Particle Swarm Optimization (PSO) with adaptive inertia weight to improve convergence speed. ", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8b80a576-71ec-4f35-aef6-77c5b01687bd", "metadata": {"aucs": [0.5113633293508427, 0.5071289755310789, 0.5126125217133646, 0.5038760058175027, 0.5156072167228665, 0.5028501616223497, 0.5048349132598864, 0.5034790130415553, 0.5131604399587435, 0.15236042323419374, 0.11063455500898467, 0.10948867881152968, 0.0686952255090586, 0.05729544731278857, 0.06964179359888034, 0.03306128752002746, 0.05848462736614024, 0.01735646756185527, 0.10398529447758953, 0.13093458897485366, 0.1012531537974175, 0.11769559750653535, 0.15610760413544644, 0.1079730904867503, 0.1033035223472758, 0.11160874220385342, 0.118817381818479, 0.07929873961850376, 0.09767092003864186, 0.07723544623563428, 0.09783999314129632, 0.10105346032632001, 0.059527263259784524, 0.10266714224497431, 0.08674999314086596, 0.06667955679202953, 0.8847457684958745, 0.8621291094181934, 0.8584122968493906, 0.8379593230061513, 0.8550918209695886, 0.85684474645484, 0.8742463893935312, 0.837740042209513, 0.8371574820006932, 0.3527838768707864, 0.3175052603695876, 0.33277882941445236, 0.3679144174121993, 0.35654711635313774, 0.3446243629794622, 0.33164117827372475, 0.3288596560640187, 0.36109738245869083, 0.7074018975554973, 0.16739231244776132, 0.13381304155792617, 0.278547681937625, 0.26694722428877604, 0.13590842452547114, 0.14987503295192584, 0.14870327410551132, 0.1708410602758329, 0.17510489316063704, 0.21184632964859207, 0.14964187002429663, 0.17361056112945827, 0.17447053405035362, 0.16206738264069698, 0.1956198504610993, 0.12775372077888536, 0.18823510431746504, 0.16674412886916856, 0.16329818506770133, 0.18226129321358953, 0.17386912696063406, 0.17678541453355479, 0.1324890451220786, 0.19483604468194005, 0.18387267152834985, 0.1927976916120523, 0.00047604891064911836, 0.01289050390968971, 0.07265250049471983, 0.008560874230441384, 0.0654760740074487, 0.034582951418208774, 0.03789561145563969, 9.999999999998899e-05, 0.04916062827216361, 0.10483183515119532, 0.10101831769954284, 0.1348373263349164, 0.03758618887797971, 0.00556169974729781, 0.046980952671551446, 0.18434028518311596, 0.0730191297151821, 0.0468495761224198, 9.999999999998899e-05, 0.004365636508199211, 0.03320444957510149, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007427215533434173, 0.014089033946806051, 0.0027391467478787845, 0.14579603479222591, 0.08919952852197599, 0.10533539861024166, 0.07698465610111183, 0.062222517826731716, 0.07075579155989997, 0.08842206332581248, 0.1332092022790291, 0.07742501379760758, 0.4475201182592832, 0.4298763610719266, 0.4739060303175716, 0.48287881255517706, 0.4448733552558013, 0.45243216335736003, 0.4637425139892358, 0.44137355326164174, 0.48390864639586795, 0.048346075991461346, 0.06380567990674313, 0.037598398008039435, 0.11644779704006014, 0.09324551798850045, 0.09031757041395305, 0.08972022612992858, 0.10834267578559087, 0.10954221864734659, 0.2167626950893934, 0.18673090689660665, 0.18677496514882574, 0.24497259212029898, 0.30400460754284087, 0.24375176035398294, 0.27497993545332733, 0.22165331439132197, 0.29145715961984386, 0.1546241969215314, 0.31529787594100434, 0.2059616032696988, 0.25083687502311747, 0.24351523652106655, 0.3081922091573104, 0.1668394567067515, 0.3210403901402906, 0.20572530500446207, 0.1513652398588542, 0.2016235880702939, 0.12460676122890091, 0.22510442901711125, 0.19569856438703614, 0.1579184516314761, 0.16357837770858352, 0.2402685103667518, 0.15988792692124065, 0.25143762509983525, 0.19608946478728362, 0.21840153124084283, 0.23875984266730133, 0.2136321800525911, 0.21643801391253903, 0.219295887998616, 0.2272273052592022, 0.2243642042917705, 0.16750294009268074, 0.19304925927284688, 0.20129207126848703, 0.18154915318277554, 0.20351926147592136, 0.17908148054085793, 0.18866579332716027, 0.1803083584544427, 0.17819150816016627, 0.1260996516802143, 0.12317048081953708, 0.13156046988738745, 0.8077513779021924, 0.20037704478516138, 0.7727215305540612, 0.11999390711539548, 0.7642452257319415, 0.7477032302189881, 0.5311574358403541, 0.15544090199964544, 0.593532688459355, 0.5330881409577453, 0.20581125874763362, 0.2034779957137225, 0.09304618941438436, 0.6222682915168092, 0.4575949610276362, 0.17864521278724876, 0.1903581507495533, 0.18460041427274487, 0.18110329647254098, 0.18927516490734486, 0.1820683199221943, 0.1806500928660667, 0.18550996708888212, 0.19776869061916946, 0.0913429572123523, 0.07730594216284503, 0.07477127054336474, 0.09125359019215462, 0.09203797713097517, 0.07543716008216239, 0.07425412784013374, 0.07980347291389622, 0.09859601261040718]}, "mutation_prompt": null}
{"id": "f9bf4c76-9c59-4983-ad98-4405c0ee79c3", "solution": "import numpy as np\n\nclass AdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + self.c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + self.c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n        return self.global_best_pos", "name": "AdaptiveInertiaPSO", "description": "Implement a novel variant of Particle Swarm Optimization (PSO) with adaptive inertia weight to improve convergence speed. ", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8b80a576-71ec-4f35-aef6-77c5b01687bd", "metadata": {"aucs": [0.5113633293508427, 0.5071289755310789, 0.5126125217133646, 0.5038760058175027, 0.5156072167228665, 0.5028501616223497, 0.5048349132598864, 0.5034790130415553, 0.5131604399587435, 0.15236042323419374, 0.11063455500898467, 0.10948867881152968, 0.0686952255090586, 0.05729544731278857, 0.06964179359888034, 0.03306128752002746, 0.05848462736614024, 0.01735646756185527, 0.10398529447758953, 0.13093458897485366, 0.1012531537974175, 0.11769559750653535, 0.15610760413544644, 0.1079730904867503, 0.1033035223472758, 0.11160874220385342, 0.118817381818479, 0.07929873961850376, 0.09767092003864186, 0.07723544623563428, 0.09783999314129632, 0.10105346032632001, 0.059527263259784524, 0.10266714224497431, 0.08674999314086596, 0.06667955679202953, 0.8847457684958745, 0.8621291094181934, 0.8584122968493906, 0.8379593230061513, 0.8550918209695886, 0.85684474645484, 0.8742463893935312, 0.837740042209513, 0.8371574820006932, 0.3527838768707864, 0.3175052603695876, 0.33277882941445236, 0.3679144174121993, 0.35654711635313774, 0.3446243629794622, 0.33164117827372475, 0.3288596560640187, 0.36109738245869083, 0.7074018975554973, 0.16739231244776132, 0.13381304155792617, 0.278547681937625, 0.26694722428877604, 0.13590842452547114, 0.14987503295192584, 0.14870327410551132, 0.1708410602758329, 0.17510489316063704, 0.21184632964859207, 0.14964187002429663, 0.17361056112945827, 0.17447053405035362, 0.16206738264069698, 0.1956198504610993, 0.12775372077888536, 0.18823510431746504, 0.16674412886916856, 0.16329818506770133, 0.18226129321358953, 0.17386912696063406, 0.17678541453355479, 0.1324890451220786, 0.19483604468194005, 0.18387267152834985, 0.1927976916120523, 0.00047604891064911836, 0.01289050390968971, 0.07265250049471983, 0.008560874230441384, 0.0654760740074487, 0.034582951418208774, 0.03789561145563969, 9.999999999998899e-05, 0.04916062827216361, 0.10483183515119532, 0.10101831769954284, 0.1348373263349164, 0.03758618887797971, 0.00556169974729781, 0.046980952671551446, 0.18434028518311596, 0.0730191297151821, 0.0468495761224198, 9.999999999998899e-05, 0.004365636508199211, 0.03320444957510149, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007427215533434173, 0.014089033946806051, 0.0027391467478787845, 0.14579603479222591, 0.08919952852197599, 0.10533539861024166, 0.07698465610111183, 0.062222517826731716, 0.07075579155989997, 0.08842206332581248, 0.1332092022790291, 0.07742501379760758, 0.4475201182592832, 0.4298763610719266, 0.4739060303175716, 0.48287881255517706, 0.4448733552558013, 0.45243216335736003, 0.4637425139892358, 0.44137355326164174, 0.48390864639586795, 0.048346075991461346, 0.06380567990674313, 0.037598398008039435, 0.11644779704006014, 0.09324551798850045, 0.09031757041395305, 0.08972022612992858, 0.10834267578559087, 0.10954221864734659, 0.2167626950893934, 0.18673090689660665, 0.18677496514882574, 0.24497259212029898, 0.30400460754284087, 0.24375176035398294, 0.27497993545332733, 0.22165331439132197, 0.29145715961984386, 0.1546241969215314, 0.31529787594100434, 0.2059616032696988, 0.25083687502311747, 0.24351523652106655, 0.3081922091573104, 0.1668394567067515, 0.3210403901402906, 0.20572530500446207, 0.1513652398588542, 0.2016235880702939, 0.12460676122890091, 0.22510442901711125, 0.19569856438703614, 0.1579184516314761, 0.16357837770858352, 0.2402685103667518, 0.15988792692124065, 0.25143762509983525, 0.19608946478728362, 0.21840153124084283, 0.23875984266730133, 0.2136321800525911, 0.21643801391253903, 0.219295887998616, 0.2272273052592022, 0.2243642042917705, 0.16750294009268074, 0.19304925927284688, 0.20129207126848703, 0.18154915318277554, 0.20351926147592136, 0.17908148054085793, 0.18866579332716027, 0.1803083584544427, 0.17819150816016627, 0.1260996516802143, 0.12317048081953708, 0.13156046988738745, 0.8077513779021924, 0.20037704478516138, 0.7727215305540612, 0.11999390711539548, 0.7642452257319415, 0.7477032302189881, 0.5311574358403541, 0.15544090199964544, 0.593532688459355, 0.5330881409577453, 0.20581125874763362, 0.2034779957137225, 0.09304618941438436, 0.6222682915168092, 0.4575949610276362, 0.17864521278724876, 0.1903581507495533, 0.18460041427274487, 0.18110329647254098, 0.18927516490734486, 0.1820683199221943, 0.1806500928660667, 0.18550996708888212, 0.19776869061916946, 0.0913429572123523, 0.07730594216284503, 0.07477127054336474, 0.09125359019215462, 0.09203797713097517, 0.07543716008216239, 0.07425412784013374, 0.07980347291389622, 0.09859601261040718]}, "mutation_prompt": null}
{"id": "618f9a4e-6d94-4454-8df3-5573c3368f28", "solution": "import numpy as np\n\nclass AdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + self.c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + self.c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n        return self.global_best_pos", "name": "AdaptiveInertiaPSO", "description": "Implement a novel variant of Particle Swarm Optimization (PSO) with adaptive inertia weight to improve convergence speed. ", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8b80a576-71ec-4f35-aef6-77c5b01687bd", "metadata": {"aucs": [0.5113633293508427, 0.5071289755310789, 0.5126125217133646, 0.5038760058175027, 0.5156072167228665, 0.5028501616223497, 0.5048349132598864, 0.5034790130415553, 0.5131604399587435, 0.15236042323419374, 0.11063455500898467, 0.10948867881152968, 0.0686952255090586, 0.05729544731278857, 0.06964179359888034, 0.03306128752002746, 0.05848462736614024, 0.01735646756185527, 0.10398529447758953, 0.13093458897485366, 0.1012531537974175, 0.11769559750653535, 0.15610760413544644, 0.1079730904867503, 0.1033035223472758, 0.11160874220385342, 0.118817381818479, 0.07929873961850376, 0.09767092003864186, 0.07723544623563428, 0.09783999314129632, 0.10105346032632001, 0.059527263259784524, 0.10266714224497431, 0.08674999314086596, 0.06667955679202953, 0.8847457684958745, 0.8621291094181934, 0.8584122968493906, 0.8379593230061513, 0.8550918209695886, 0.85684474645484, 0.8742463893935312, 0.837740042209513, 0.8371574820006932, 0.3527838768707864, 0.3175052603695876, 0.33277882941445236, 0.3679144174121993, 0.35654711635313774, 0.3446243629794622, 0.33164117827372475, 0.3288596560640187, 0.36109738245869083, 0.7074018975554973, 0.16739231244776132, 0.13381304155792617, 0.278547681937625, 0.26694722428877604, 0.13590842452547114, 0.14987503295192584, 0.14870327410551132, 0.1708410602758329, 0.17510489316063704, 0.21184632964859207, 0.14964187002429663, 0.17361056112945827, 0.17447053405035362, 0.16206738264069698, 0.1956198504610993, 0.12775372077888536, 0.18823510431746504, 0.16674412886916856, 0.16329818506770133, 0.18226129321358953, 0.17386912696063406, 0.17678541453355479, 0.1324890451220786, 0.19483604468194005, 0.18387267152834985, 0.1927976916120523, 0.00047604891064911836, 0.01289050390968971, 0.07265250049471983, 0.008560874230441384, 0.0654760740074487, 0.034582951418208774, 0.03789561145563969, 9.999999999998899e-05, 0.04916062827216361, 0.10483183515119532, 0.10101831769954284, 0.1348373263349164, 0.03758618887797971, 0.00556169974729781, 0.046980952671551446, 0.18434028518311596, 0.0730191297151821, 0.0468495761224198, 9.999999999998899e-05, 0.004365636508199211, 0.03320444957510149, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007427215533434173, 0.014089033946806051, 0.0027391467478787845, 0.14579603479222591, 0.08919952852197599, 0.10533539861024166, 0.07698465610111183, 0.062222517826731716, 0.07075579155989997, 0.08842206332581248, 0.1332092022790291, 0.07742501379760758, 0.4475201182592832, 0.4298763610719266, 0.4739060303175716, 0.48287881255517706, 0.4448733552558013, 0.45243216335736003, 0.4637425139892358, 0.44137355326164174, 0.48390864639586795, 0.048346075991461346, 0.06380567990674313, 0.037598398008039435, 0.11644779704006014, 0.09324551798850045, 0.09031757041395305, 0.08972022612992858, 0.10834267578559087, 0.10954221864734659, 0.2167626950893934, 0.18673090689660665, 0.18677496514882574, 0.24497259212029898, 0.30400460754284087, 0.24375176035398294, 0.27497993545332733, 0.22165331439132197, 0.29145715961984386, 0.1546241969215314, 0.31529787594100434, 0.2059616032696988, 0.25083687502311747, 0.24351523652106655, 0.3081922091573104, 0.1668394567067515, 0.3210403901402906, 0.20572530500446207, 0.1513652398588542, 0.2016235880702939, 0.12460676122890091, 0.22510442901711125, 0.19569856438703614, 0.1579184516314761, 0.16357837770858352, 0.2402685103667518, 0.15988792692124065, 0.25143762509983525, 0.19608946478728362, 0.21840153124084283, 0.23875984266730133, 0.2136321800525911, 0.21643801391253903, 0.219295887998616, 0.2272273052592022, 0.2243642042917705, 0.16750294009268074, 0.19304925927284688, 0.20129207126848703, 0.18154915318277554, 0.20351926147592136, 0.17908148054085793, 0.18866579332716027, 0.1803083584544427, 0.17819150816016627, 0.1260996516802143, 0.12317048081953708, 0.13156046988738745, 0.8077513779021924, 0.20037704478516138, 0.7727215305540612, 0.11999390711539548, 0.7642452257319415, 0.7477032302189881, 0.5311574358403541, 0.15544090199964544, 0.593532688459355, 0.5330881409577453, 0.20581125874763362, 0.2034779957137225, 0.09304618941438436, 0.6222682915168092, 0.4575949610276362, 0.17864521278724876, 0.1903581507495533, 0.18460041427274487, 0.18110329647254098, 0.18927516490734486, 0.1820683199221943, 0.1806500928660667, 0.18550996708888212, 0.19776869061916946, 0.0913429572123523, 0.07730594216284503, 0.07477127054336474, 0.09125359019215462, 0.09203797713097517, 0.07543716008216239, 0.07425412784013374, 0.07980347291389622, 0.09859601261040718]}, "mutation_prompt": null}
{"id": "0b5aa249-d6a5-46a1-b1db-192a71c2c28a", "solution": "import numpy as np\n\nclass AdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + self.c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + self.c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n        return self.global_best_pos", "name": "AdaptiveInertiaPSO", "description": "Implement a novel variant of Particle Swarm Optimization (PSO) with adaptive inertia weight to improve convergence speed. ", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8b80a576-71ec-4f35-aef6-77c5b01687bd", "metadata": {"aucs": [0.5113633293508427, 0.5071289755310789, 0.5126125217133646, 0.5038760058175027, 0.5156072167228665, 0.5028501616223497, 0.5048349132598864, 0.5034790130415553, 0.5131604399587435, 0.15236042323419374, 0.11063455500898467, 0.10948867881152968, 0.0686952255090586, 0.05729544731278857, 0.06964179359888034, 0.03306128752002746, 0.05848462736614024, 0.01735646756185527, 0.10398529447758953, 0.13093458897485366, 0.1012531537974175, 0.11769559750653535, 0.15610760413544644, 0.1079730904867503, 0.1033035223472758, 0.11160874220385342, 0.118817381818479, 0.07929873961850376, 0.09767092003864186, 0.07723544623563428, 0.09783999314129632, 0.10105346032632001, 0.059527263259784524, 0.10266714224497431, 0.08674999314086596, 0.06667955679202953, 0.8847457684958745, 0.8621291094181934, 0.8584122968493906, 0.8379593230061513, 0.8550918209695886, 0.85684474645484, 0.8742463893935312, 0.837740042209513, 0.8371574820006932, 0.3527838768707864, 0.3175052603695876, 0.33277882941445236, 0.3679144174121993, 0.35654711635313774, 0.3446243629794622, 0.33164117827372475, 0.3288596560640187, 0.36109738245869083, 0.7074018975554973, 0.16739231244776132, 0.13381304155792617, 0.278547681937625, 0.26694722428877604, 0.13590842452547114, 0.14987503295192584, 0.14870327410551132, 0.1708410602758329, 0.17510489316063704, 0.21184632964859207, 0.14964187002429663, 0.17361056112945827, 0.17447053405035362, 0.16206738264069698, 0.1956198504610993, 0.12775372077888536, 0.18823510431746504, 0.16674412886916856, 0.16329818506770133, 0.18226129321358953, 0.17386912696063406, 0.17678541453355479, 0.1324890451220786, 0.19483604468194005, 0.18387267152834985, 0.1927976916120523, 0.00047604891064911836, 0.01289050390968971, 0.07265250049471983, 0.008560874230441384, 0.0654760740074487, 0.034582951418208774, 0.03789561145563969, 9.999999999998899e-05, 0.04916062827216361, 0.10483183515119532, 0.10101831769954284, 0.1348373263349164, 0.03758618887797971, 0.00556169974729781, 0.046980952671551446, 0.18434028518311596, 0.0730191297151821, 0.0468495761224198, 9.999999999998899e-05, 0.004365636508199211, 0.03320444957510149, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007427215533434173, 0.014089033946806051, 0.0027391467478787845, 0.14579603479222591, 0.08919952852197599, 0.10533539861024166, 0.07698465610111183, 0.062222517826731716, 0.07075579155989997, 0.08842206332581248, 0.1332092022790291, 0.07742501379760758, 0.4475201182592832, 0.4298763610719266, 0.4739060303175716, 0.48287881255517706, 0.4448733552558013, 0.45243216335736003, 0.4637425139892358, 0.44137355326164174, 0.48390864639586795, 0.048346075991461346, 0.06380567990674313, 0.037598398008039435, 0.11644779704006014, 0.09324551798850045, 0.09031757041395305, 0.08972022612992858, 0.10834267578559087, 0.10954221864734659, 0.2167626950893934, 0.18673090689660665, 0.18677496514882574, 0.24497259212029898, 0.30400460754284087, 0.24375176035398294, 0.27497993545332733, 0.22165331439132197, 0.29145715961984386, 0.1546241969215314, 0.31529787594100434, 0.2059616032696988, 0.25083687502311747, 0.24351523652106655, 0.3081922091573104, 0.1668394567067515, 0.3210403901402906, 0.20572530500446207, 0.1513652398588542, 0.2016235880702939, 0.12460676122890091, 0.22510442901711125, 0.19569856438703614, 0.1579184516314761, 0.16357837770858352, 0.2402685103667518, 0.15988792692124065, 0.25143762509983525, 0.19608946478728362, 0.21840153124084283, 0.23875984266730133, 0.2136321800525911, 0.21643801391253903, 0.219295887998616, 0.2272273052592022, 0.2243642042917705, 0.16750294009268074, 0.19304925927284688, 0.20129207126848703, 0.18154915318277554, 0.20351926147592136, 0.17908148054085793, 0.18866579332716027, 0.1803083584544427, 0.17819150816016627, 0.1260996516802143, 0.12317048081953708, 0.13156046988738745, 0.8077513779021924, 0.20037704478516138, 0.7727215305540612, 0.11999390711539548, 0.7642452257319415, 0.7477032302189881, 0.5311574358403541, 0.15544090199964544, 0.593532688459355, 0.5330881409577453, 0.20581125874763362, 0.2034779957137225, 0.09304618941438436, 0.6222682915168092, 0.4575949610276362, 0.17864521278724876, 0.1903581507495533, 0.18460041427274487, 0.18110329647254098, 0.18927516490734486, 0.1820683199221943, 0.1806500928660667, 0.18550996708888212, 0.19776869061916946, 0.0913429572123523, 0.07730594216284503, 0.07477127054336474, 0.09125359019215462, 0.09203797713097517, 0.07543716008216239, 0.07425412784013374, 0.07980347291389622, 0.09859601261040718]}, "mutation_prompt": null}
{"id": "7b3d92f0-5b96-4bd4-863c-9c22d686fff9", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass ParallelAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        with ThreadPoolExecutor() as executor:\n            for _ in range(self.budget):\n                fitness = executor.map(func, self.position)\n                for i, fit in enumerate(fitness):\n                    if fit < self.personal_best_val[i]:\n                        self.personal_best_val[i] = fit\n                        self.personal_best_pos[i] = np.copy(self.position[i])\n                    if fit < self.global_best_val:\n                        self.global_best_val = fit\n                        self.global_best_pos = np.copy(self.position[i])\n                inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n                for i in range(self.pop_size):\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    self.velocity[i] = inertia_weight * self.velocity[i] + self.c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + self.c2 * r2 * (self.global_best_pos - self.position[i])\n                    self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                    self.position[i] += self.velocity[i]\n                    self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n        return self.global_best_pos", "name": "ParallelAdaptiveInertiaPSO", "description": "Implement a parallelized version of AdaptiveInertiaPSO to enhance convergence speed by processing multiple particles simultaneously.", "configspace": "", "generation": 10, "fitness": 0.2278575034997952, "feedback": "The algorithm ParallelAdaptiveInertiaPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "8b80a576-71ec-4f35-aef6-77c5b01687bd", "metadata": {"aucs": [0.5113633293508427, 0.5071289755310789, 0.5126125217133646, 0.5038760058175027, 0.5156072167228665, 0.5028501616223497, 0.5048349132598864, 0.5034790130415553, 0.5131604399587435, 0.15236042323419374, 0.11063455500898467, 0.10948867881152968, 0.0686952255090586, 0.05729544731278857, 0.06964179359888034, 0.03306128752002746, 0.05848462736614024, 0.01735646756185527, 0.10398529447758953, 0.13093458897485366, 0.1012531537974175, 0.11769559750653535, 0.15610760413544644, 0.1079730904867503, 0.1033035223472758, 0.11160874220385342, 0.118817381818479, 0.07929873961850376, 0.09767092003864186, 0.07723544623563428, 0.09783999314129632, 0.10105346032632001, 0.059527263259784524, 0.10266714224497431, 0.08674999314086596, 0.06667955679202953, 0.8847457684958745, 0.8621291094181934, 0.8584122968493906, 0.8379593230061513, 0.8550918209695886, 0.85684474645484, 0.8742463893935312, 0.837740042209513, 0.8371574820006932, 0.3527838768707864, 0.3175052603695876, 0.33277882941445236, 0.3679144174121993, 0.35654711635313774, 0.3446243629794622, 0.33164117827372475, 0.3288596560640187, 0.36109738245869083, 0.7074018975554973, 0.16739231244776132, 0.13381304155792617, 0.278547681937625, 0.26694722428877604, 0.13590842452547114, 0.14987503295192584, 0.14870327410551132, 0.1708410602758329, 0.17510489316063704, 0.21184632964859207, 0.14964187002429663, 0.17361056112945827, 0.17447053405035362, 0.16206738264069698, 0.1956198504610993, 0.12775372077888536, 0.18823510431746504, 0.16674412886916856, 0.16329818506770133, 0.18226129321358953, 0.17386912696063406, 0.17678541453355479, 0.1324890451220786, 0.19483604468194005, 0.18387267152834985, 0.1927976916120523, 0.00047604891064911836, 0.01289050390968971, 0.07265250049471983, 0.008560874230441384, 0.0654760740074487, 0.034582951418208774, 0.03789561145563969, 9.999999999998899e-05, 0.04916062827216361, 0.10483183515119532, 0.10101831769954284, 0.1348373263349164, 0.03758618887797971, 0.00556169974729781, 0.046980952671551446, 0.18434028518311596, 0.0730191297151821, 0.0468495761224198, 9.999999999998899e-05, 0.004365636508199211, 0.03320444957510149, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007427215533434173, 0.014089033946806051, 0.0027391467478787845, 0.14579603479222591, 0.08919952852197599, 0.10533539861024166, 0.07698465610111183, 0.062222517826731716, 0.07075579155989997, 0.08842206332581248, 0.1332092022790291, 0.07742501379760758, 0.4475201182592832, 0.4298763610719266, 0.4739060303175716, 0.48287881255517706, 0.4448733552558013, 0.45243216335736003, 0.4637425139892358, 0.44137355326164174, 0.48390864639586795, 0.048346075991461346, 0.06380567990674313, 0.037598398008039435, 0.11644779704006014, 0.09324551798850045, 0.09031757041395305, 0.08972022612992858, 0.10834267578559087, 0.10954221864734659, 0.2167626950893934, 0.18673090689660665, 0.18677496514882574, 0.24497259212029898, 0.30400460754284087, 0.24375176035398294, 0.27497993545332733, 0.22165331439132197, 0.29145715961984386, 0.1546241969215314, 0.31529787594100434, 0.2059616032696988, 0.25083687502311747, 0.24351523652106655, 0.3081922091573104, 0.1668394567067515, 0.3210403901402906, 0.20572530500446207, 0.1513652398588542, 0.2016235880702939, 0.12460676122890091, 0.22510442901711125, 0.19569856438703614, 0.1579184516314761, 0.16357837770858352, 0.2402685103667518, 0.15988792692124065, 0.25143762509983525, 0.19608946478728362, 0.21840153124084283, 0.23875984266730133, 0.2136321800525911, 0.21643801391253903, 0.219295887998616, 0.2272273052592022, 0.2243642042917705, 0.16750294009268074, 0.19304925927284688, 0.20129207126848703, 0.18154915318277554, 0.20351926147592136, 0.17908148054085793, 0.18866579332716027, 0.1803083584544427, 0.17819150816016627, 0.1260996516802143, 0.12317048081953708, 0.13156046988738745, 0.8077513779021924, 0.20037704478516138, 0.7727215305540612, 0.11999390711539548, 0.7642452257319415, 0.7477032302189881, 0.5311574358403541, 0.15544090199964544, 0.593532688459355, 0.5330881409577453, 0.20581125874763362, 0.2034779957137225, 0.09304618941438436, 0.6222682915168092, 0.4575949610276362, 0.17864521278724876, 0.1903581507495533, 0.18460041427274487, 0.18110329647254098, 0.18927516490734486, 0.1820683199221943, 0.1806500928660667, 0.18550996708888212, 0.19776869061916946, 0.0913429572123523, 0.07730594216284503, 0.07477127054336474, 0.09125359019215462, 0.09203797713097517, 0.07543716008216239, 0.07425412784013374, 0.07980347291389622, 0.09859601261040718]}, "mutation_prompt": null}
{"id": "f5ea21e7-b14b-425a-9c2a-d11bb5063c25", "solution": "import numpy as np\n\nclass AcceleratedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.max_acc = 0.1  # New acceleration term\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + self.c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + self.c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] += np.clip((np.random.rand() - 0.5) * self.max_acc, -self.max_acc, self.max_acc)  # New acceleration term\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n        return self.global_best_pos", "name": "AcceleratedPSO", "description": "Introducing a velocity clamping acceleration term to enhance exploration and convergence speed in the Particle Swarm Optimization algorithm.", "configspace": "", "generation": 11, "fitness": 0.2222293551093383, "feedback": "The algorithm AcceleratedPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "8b80a576-71ec-4f35-aef6-77c5b01687bd", "metadata": {"aucs": [0.47958701592021646, 0.4704932240085852, 0.47168059473341195, 0.4613662393681971, 0.45018587415504085, 0.48921063797073716, 0.4853528141354154, 0.488272183238756, 0.4647993346553133, 0.07658828062192569, 0.08198614156317763, 0.044040726712328615, 9.999999999998899e-05, 0.00027148729777415337, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10493954842704478, 0.12424654478110475, 0.09095146231366857, 0.09684032610723536, 0.11771235395288127, 0.1255502300046002, 0.08614564128573043, 0.14190635066403479, 0.12476465596362452, 0.08449011154674901, 0.11212383389541514, 0.07982634760494656, 0.09123761977465983, 0.13353242315772418, 0.05514529600691276, 0.068281779255147, 0.07560966967823823, 0.08205476791941635, 0.8910028104527439, 0.893535483009938, 0.8712375291393312, 0.829734533918734, 0.847290593843623, 0.829866950472423, 0.8701093119242411, 0.8510207234725372, 0.8772376336023909, 0.3572996919452923, 0.3161687151792264, 0.3421860399669918, 0.3424992951233615, 0.3126186269858243, 0.32103769786472103, 0.33267540944621965, 0.3326561945038815, 0.32555344960921917, 0.2139784284193763, 0.1544940417012216, 0.1345907320098111, 0.7563064004818573, 0.20602686389368452, 0.2057729827610808, 0.12825259953598034, 0.14673893508017988, 0.14976582340711753, 0.17106912220431658, 0.18090755562542182, 0.16799571117807022, 0.17852400510201027, 0.17836002070625256, 0.19555554992500424, 0.20497233764893175, 0.195643416755936, 0.18841624461023676, 0.16450641860821758, 0.24248062633818324, 0.12212555630621447, 0.19130599549847738, 0.155722366575878, 0.13140451847526513, 0.1819945660465252, 0.1795379381627552, 0.1577736136107658, 0.037498651791687765, 0.07245229410896814, 0.05753253715885953, 0.05104572258283169, 0.009219716418355839, 0.0035406745575606857, 0.000253384370770271, 9.999999999998899e-05, 0.04406592054416181, 0.11938780547120043, 0.08935501212061003, 0.09421566046714436, 0.03633896762843847, 0.03380100380395601, 0.0397678454208088, 0.12874513367496, 0.09544822821561427, 0.04273548708887609, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00171774990212048, 0.008259706856182158, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021175146209293394, 0.08807563436870258, 0.07239161693205154, 0.110350416774463, 0.11455317106302443, 0.10870642364417182, 0.07067289068107552, 0.07457622911033446, 0.1265410346612008, 0.09478397866487098, 0.4234550178391917, 0.4932158168733888, 0.4255887782062999, 0.4297803314887959, 0.42614216218325285, 0.44991694619287326, 0.4619246403422026, 0.43532536044593495, 0.42354265357778187, 0.06406960835427822, 0.06524857209759449, 0.05669188372863487, 0.0890785454069648, 0.08517545643062185, 0.0878662210369453, 0.10271201533654861, 0.10371359116400547, 0.08827243451026245, 0.1586092691765747, 0.20912946126941734, 0.19529787956764233, 0.15836119974252216, 0.24968763825220053, 0.1271159101629764, 0.20690106729655533, 0.3136798861694551, 0.22200356898588725, 0.16939739220691663, 0.28294100355071194, 0.22554690743284767, 0.3034330944461737, 0.26875400254953286, 0.3290598496548941, 0.22542412900399034, 0.2743043234067165, 0.14810670191083353, 0.18492971330078467, 0.20298406152162296, 0.1457435451809178, 0.21541836339615006, 0.16641250910110372, 0.19414329413200726, 0.1766071842589637, 0.21032631340551344, 0.1514308296634137, 0.23457847576634694, 0.18849140025873035, 0.2115630994409462, 0.24225587385586533, 0.22241084180274506, 0.22905673598698806, 0.22663273123827055, 0.217117150689077, 0.22758951496695046, 0.1852768453095337, 0.19900200601853668, 0.19619480624762553, 0.17222034599316027, 0.2171694316553644, 0.18787716246711494, 0.18259571022206356, 0.20419296092825923, 0.18407543166436202, 0.12556160637109148, 0.12372748414048818, 0.15126985910261104, 0.7122544227427797, 0.1999494543795307, 0.7344752440911251, 0.11959834549319204, 0.7083354993650357, 0.7742707998111535, 0.6044081953529865, 0.1560981065250484, 0.5471779240844916, 0.20365123100953553, 0.16744085077601611, 0.6563962386547908, 0.38289212744975276, 0.4672395489665885, 0.4806059219473734, 0.17829624032164648, 0.1848839361642376, 0.17839243745960243, 0.18094633177147035, 0.1903246464716145, 0.1826013565339195, 0.20120148016938189, 0.19166476974558888, 0.19572738633908782, 0.08109892531769636, 0.06606560721093924, 0.07620955133475438, 0.07438968057128281, 0.08836808700798504, 0.09255871201715804, 0.07695273060558627, 0.08348899976254776, 0.07169268393336148]}, "mutation_prompt": null}
{"id": "9b470bd9-3066-47c5-9b20-2dbcea6e14a6", "solution": "import numpy as np\n\nclass DynamicParamPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.cognitive_param = 2.0\n        self.social_param = 2.0\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            diversity_factor = len(set(map(tuple, self.position))) / self.pop_size\n            cognitive_param = self.cognitive_param + diversity_factor\n            social_param = self.social_param - diversity_factor\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + cognitive_param * r1 * (self.personal_best_pos[i] - self.position[i]) + social_param * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n        return self.global_best_pos", "name": "DynamicParamPSO", "description": "Implement a novel approach to dynamically adjust the cognitive and social parameters of the Particle Swarm Optimization (PSO) algorithm based on population diversity to enhance convergence speed.", "configspace": "", "generation": 12, "fitness": 0.22256119415497821, "feedback": "The algorithm DynamicParamPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "8b80a576-71ec-4f35-aef6-77c5b01687bd", "metadata": {"aucs": [0.4884632967996313, 0.5196322506551361, 0.5205659773748104, 0.5055648504104888, 0.5156770048017733, 0.4838357051813109, 0.4812777313591361, 0.5067189780620214, 0.5462918399559925, 0.1277275921088845, 0.08577118897357483, 0.009514211030334674, 0.033348185386657625, 0.11308899674943318, 0.010389106879790222, 0.015825134720511946, 0.021911606652472937, 9.999999999998899e-05, 0.10975370575648724, 0.11440641251103612, 0.096628823448625, 0.08864343878136582, 0.13132969861589827, 0.11821407007281559, 0.0882633482200923, 0.12467818134377917, 0.12236694294074146, 0.09378576898329627, 0.08910956602547992, 0.07835360978716399, 0.13219707355846222, 0.10892160182612765, 0.07402636952394148, 0.10358311564137945, 0.08255120214830969, 0.06204485459593512, 0.8757422405916788, 0.8611015748605176, 0.8451795969510341, 0.843013344132989, 0.8422225429604444, 0.845236937485984, 0.8710566058454766, 0.8323652521972468, 0.8507951088583104, 0.3575221268622383, 0.3301590473600805, 0.33212872845365693, 0.34210120108434583, 0.3294011951577148, 0.33155042746661945, 0.3413288740546797, 0.33386917173548125, 0.3287338011113772, 0.27976149979183906, 0.16720102542165494, 0.16726026078282197, 0.2803239592834528, 0.20326013746032312, 0.21212529705509164, 0.17279433098733865, 0.14888185540223653, 0.1763354813361402, 0.17926485143819226, 0.12304821742695526, 0.12456724184906831, 0.1660864236123376, 0.16621049943671629, 0.16772402453533974, 0.18420246511144778, 0.2182987212927323, 0.16144608900575097, 0.13267214385152926, 0.16686940459460986, 0.2420472277622321, 0.12629471543620696, 0.1576419283512418, 0.13165592598831177, 0.20739332424378853, 0.1977888754879541, 0.2161782822905307, 0.021187446717676695, 0.030672156852578514, 0.015915293397549934, 0.024194081931332545, 0.07363934514816828, 0.0165003636054335, 0.011555425169162858, 9.999999999998899e-05, 0.1393285720703843, 0.20131862416644575, 0.12660546890815116, 0.09087701213100208, 0.07983187789131696, 0.018503478551623265, 0.04497934715269292, 0.12248089656205308, 0.0905342459286318, 0.07815797863720853, 0.004893962449522227, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11999084197353926, 0.07208465998048419, 0.07111749247312005, 0.07525282253591736, 0.12334168289836311, 0.0684752578295762, 0.10585759588544952, 0.09526060136540004, 0.0779114569675774, 0.45087917930052146, 0.4660235242584173, 0.4515364442694947, 0.4345612525452336, 0.4348460134768125, 0.43607835520545246, 0.4414039536168679, 0.4587195863657413, 0.4628631923944968, 0.06223349049661664, 0.06524937040663603, 0.02517332390496485, 0.104091810944419, 0.11719289106296349, 0.10389119185284357, 0.10357650519934392, 0.13585876777040484, 0.07554467712645296, 0.2883425625145456, 0.26783090740447846, 0.174797350264024, 0.2065679084364931, 0.2532943319591764, 0.1990016890490498, 0.1520495775923757, 0.18732702327178608, 0.1661542574941861, 0.17144469287368191, 0.3016191505100011, 0.18712902384954055, 0.32370660018221675, 0.24337119909361915, 0.2512818102647728, 0.22177253601770397, 0.30372972103765394, 0.2016790462964132, 0.16581077877735573, 0.22688354274205702, 0.17223059924731476, 0.23817730815231808, 0.19004957558988245, 0.163865344516686, 0.14110833973777026, 0.25040309766143143, 0.18016116222872713, 0.2525029131509644, 0.2079983956550332, 0.17875376436900825, 0.23170352746883116, 0.22811004650486688, 0.22342562593393633, 0.22685854676946682, 0.24023564868815916, 0.21249169501910026, 0.19459628403259344, 0.19989926655279622, 0.1861855515821147, 0.2034558499351069, 0.1918243419643385, 0.1837899874193034, 0.1831954325102807, 0.1922699736659932, 0.1861559897772579, 0.1241712775085071, 0.11183646650991463, 0.13054722312264855, 0.7295177086868763, 0.20010814695793, 0.7419064140439418, 0.11935245205788103, 0.6524286472998551, 0.7398266478244239, 0.4822870940367793, 0.15574718697265832, 0.48510147438099993, 0.6181228022090968, 0.20488478949814593, 0.48947777193753905, 0.0937059580697085, 0.39154937224643493, 0.43766447587986146, 0.17852447043542274, 0.18450924398588486, 0.18166142761608262, 0.1905162142646304, 0.17236617426498013, 0.1788428026667087, 0.19027734421308973, 0.20894895298353255, 0.19727231742112494, 0.07813359060452763, 0.08010008696032367, 0.07951161671779905, 0.08952146720967735, 0.09175744361943472, 0.07295357691236626, 0.07991931597846147, 0.07204229658526562, 0.07838676136169453]}, "mutation_prompt": null}
{"id": "df1a435c-807c-4be7-a0d0-efe07a9c526a", "solution": "import numpy as np\n\nclass AdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + self.c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + self.c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n        return self.global_best_pos", "name": "AdaptiveInertiaPSO", "description": "Implement a novel variant of Particle Swarm Optimization (PSO) with adaptive inertia weight to improve convergence speed. ", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8b80a576-71ec-4f35-aef6-77c5b01687bd", "metadata": {"aucs": [0.5113633293508427, 0.5071289755310789, 0.5126125217133646, 0.5038760058175027, 0.5156072167228665, 0.5028501616223497, 0.5048349132598864, 0.5034790130415553, 0.5131604399587435, 0.15236042323419374, 0.11063455500898467, 0.10948867881152968, 0.0686952255090586, 0.05729544731278857, 0.06964179359888034, 0.03306128752002746, 0.05848462736614024, 0.01735646756185527, 0.10398529447758953, 0.13093458897485366, 0.1012531537974175, 0.11769559750653535, 0.15610760413544644, 0.1079730904867503, 0.1033035223472758, 0.11160874220385342, 0.118817381818479, 0.07929873961850376, 0.09767092003864186, 0.07723544623563428, 0.09783999314129632, 0.10105346032632001, 0.059527263259784524, 0.10266714224497431, 0.08674999314086596, 0.06667955679202953, 0.8847457684958745, 0.8621291094181934, 0.8584122968493906, 0.8379593230061513, 0.8550918209695886, 0.85684474645484, 0.8742463893935312, 0.837740042209513, 0.8371574820006932, 0.3527838768707864, 0.3175052603695876, 0.33277882941445236, 0.3679144174121993, 0.35654711635313774, 0.3446243629794622, 0.33164117827372475, 0.3288596560640187, 0.36109738245869083, 0.7074018975554973, 0.16739231244776132, 0.13381304155792617, 0.278547681937625, 0.26694722428877604, 0.13590842452547114, 0.14987503295192584, 0.14870327410551132, 0.1708410602758329, 0.17510489316063704, 0.21184632964859207, 0.14964187002429663, 0.17361056112945827, 0.17447053405035362, 0.16206738264069698, 0.1956198504610993, 0.12775372077888536, 0.18823510431746504, 0.16674412886916856, 0.16329818506770133, 0.18226129321358953, 0.17386912696063406, 0.17678541453355479, 0.1324890451220786, 0.19483604468194005, 0.18387267152834985, 0.1927976916120523, 0.00047604891064911836, 0.01289050390968971, 0.07265250049471983, 0.008560874230441384, 0.0654760740074487, 0.034582951418208774, 0.03789561145563969, 9.999999999998899e-05, 0.04916062827216361, 0.10483183515119532, 0.10101831769954284, 0.1348373263349164, 0.03758618887797971, 0.00556169974729781, 0.046980952671551446, 0.18434028518311596, 0.0730191297151821, 0.0468495761224198, 9.999999999998899e-05, 0.004365636508199211, 0.03320444957510149, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007427215533434173, 0.014089033946806051, 0.0027391467478787845, 0.14579603479222591, 0.08919952852197599, 0.10533539861024166, 0.07698465610111183, 0.062222517826731716, 0.07075579155989997, 0.08842206332581248, 0.1332092022790291, 0.07742501379760758, 0.4475201182592832, 0.4298763610719266, 0.4739060303175716, 0.48287881255517706, 0.4448733552558013, 0.45243216335736003, 0.4637425139892358, 0.44137355326164174, 0.48390864639586795, 0.048346075991461346, 0.06380567990674313, 0.037598398008039435, 0.11644779704006014, 0.09324551798850045, 0.09031757041395305, 0.08972022612992858, 0.10834267578559087, 0.10954221864734659, 0.2167626950893934, 0.18673090689660665, 0.18677496514882574, 0.24497259212029898, 0.30400460754284087, 0.24375176035398294, 0.27497993545332733, 0.22165331439132197, 0.29145715961984386, 0.1546241969215314, 0.31529787594100434, 0.2059616032696988, 0.25083687502311747, 0.24351523652106655, 0.3081922091573104, 0.1668394567067515, 0.3210403901402906, 0.20572530500446207, 0.1513652398588542, 0.2016235880702939, 0.12460676122890091, 0.22510442901711125, 0.19569856438703614, 0.1579184516314761, 0.16357837770858352, 0.2402685103667518, 0.15988792692124065, 0.25143762509983525, 0.19608946478728362, 0.21840153124084283, 0.23875984266730133, 0.2136321800525911, 0.21643801391253903, 0.219295887998616, 0.2272273052592022, 0.2243642042917705, 0.16750294009268074, 0.19304925927284688, 0.20129207126848703, 0.18154915318277554, 0.20351926147592136, 0.17908148054085793, 0.18866579332716027, 0.1803083584544427, 0.17819150816016627, 0.1260996516802143, 0.12317048081953708, 0.13156046988738745, 0.8077513779021924, 0.20037704478516138, 0.7727215305540612, 0.11999390711539548, 0.7642452257319415, 0.7477032302189881, 0.5311574358403541, 0.15544090199964544, 0.593532688459355, 0.5330881409577453, 0.20581125874763362, 0.2034779957137225, 0.09304618941438436, 0.6222682915168092, 0.4575949610276362, 0.17864521278724876, 0.1903581507495533, 0.18460041427274487, 0.18110329647254098, 0.18927516490734486, 0.1820683199221943, 0.1806500928660667, 0.18550996708888212, 0.19776869061916946, 0.0913429572123523, 0.07730594216284503, 0.07477127054336474, 0.09125359019215462, 0.09203797713097517, 0.07543716008216239, 0.07425412784013374, 0.07980347291389622, 0.09859601261040718]}, "mutation_prompt": null}
{"id": "ef9c95aa-dc1e-46db-a2d6-3af25e74093c", "solution": "import numpy as np\n\nclass AdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + self.c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + self.c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n        return self.global_best_pos", "name": "AdaptiveInertiaPSO", "description": "Implement a novel variant of Particle Swarm Optimization (PSO) with adaptive inertia weight to improve convergence speed. ", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8b80a576-71ec-4f35-aef6-77c5b01687bd", "metadata": {"aucs": [0.5113633293508427, 0.5071289755310789, 0.5126125217133646, 0.5038760058175027, 0.5156072167228665, 0.5028501616223497, 0.5048349132598864, 0.5034790130415553, 0.5131604399587435, 0.15236042323419374, 0.11063455500898467, 0.10948867881152968, 0.0686952255090586, 0.05729544731278857, 0.06964179359888034, 0.03306128752002746, 0.05848462736614024, 0.01735646756185527, 0.10398529447758953, 0.13093458897485366, 0.1012531537974175, 0.11769559750653535, 0.15610760413544644, 0.1079730904867503, 0.1033035223472758, 0.11160874220385342, 0.118817381818479, 0.07929873961850376, 0.09767092003864186, 0.07723544623563428, 0.09783999314129632, 0.10105346032632001, 0.059527263259784524, 0.10266714224497431, 0.08674999314086596, 0.06667955679202953, 0.8847457684958745, 0.8621291094181934, 0.8584122968493906, 0.8379593230061513, 0.8550918209695886, 0.85684474645484, 0.8742463893935312, 0.837740042209513, 0.8371574820006932, 0.3527838768707864, 0.3175052603695876, 0.33277882941445236, 0.3679144174121993, 0.35654711635313774, 0.3446243629794622, 0.33164117827372475, 0.3288596560640187, 0.36109738245869083, 0.7074018975554973, 0.16739231244776132, 0.13381304155792617, 0.278547681937625, 0.26694722428877604, 0.13590842452547114, 0.14987503295192584, 0.14870327410551132, 0.1708410602758329, 0.17510489316063704, 0.21184632964859207, 0.14964187002429663, 0.17361056112945827, 0.17447053405035362, 0.16206738264069698, 0.1956198504610993, 0.12775372077888536, 0.18823510431746504, 0.16674412886916856, 0.16329818506770133, 0.18226129321358953, 0.17386912696063406, 0.17678541453355479, 0.1324890451220786, 0.19483604468194005, 0.18387267152834985, 0.1927976916120523, 0.00047604891064911836, 0.01289050390968971, 0.07265250049471983, 0.008560874230441384, 0.0654760740074487, 0.034582951418208774, 0.03789561145563969, 9.999999999998899e-05, 0.04916062827216361, 0.10483183515119532, 0.10101831769954284, 0.1348373263349164, 0.03758618887797971, 0.00556169974729781, 0.046980952671551446, 0.18434028518311596, 0.0730191297151821, 0.0468495761224198, 9.999999999998899e-05, 0.004365636508199211, 0.03320444957510149, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007427215533434173, 0.014089033946806051, 0.0027391467478787845, 0.14579603479222591, 0.08919952852197599, 0.10533539861024166, 0.07698465610111183, 0.062222517826731716, 0.07075579155989997, 0.08842206332581248, 0.1332092022790291, 0.07742501379760758, 0.4475201182592832, 0.4298763610719266, 0.4739060303175716, 0.48287881255517706, 0.4448733552558013, 0.45243216335736003, 0.4637425139892358, 0.44137355326164174, 0.48390864639586795, 0.048346075991461346, 0.06380567990674313, 0.037598398008039435, 0.11644779704006014, 0.09324551798850045, 0.09031757041395305, 0.08972022612992858, 0.10834267578559087, 0.10954221864734659, 0.2167626950893934, 0.18673090689660665, 0.18677496514882574, 0.24497259212029898, 0.30400460754284087, 0.24375176035398294, 0.27497993545332733, 0.22165331439132197, 0.29145715961984386, 0.1546241969215314, 0.31529787594100434, 0.2059616032696988, 0.25083687502311747, 0.24351523652106655, 0.3081922091573104, 0.1668394567067515, 0.3210403901402906, 0.20572530500446207, 0.1513652398588542, 0.2016235880702939, 0.12460676122890091, 0.22510442901711125, 0.19569856438703614, 0.1579184516314761, 0.16357837770858352, 0.2402685103667518, 0.15988792692124065, 0.25143762509983525, 0.19608946478728362, 0.21840153124084283, 0.23875984266730133, 0.2136321800525911, 0.21643801391253903, 0.219295887998616, 0.2272273052592022, 0.2243642042917705, 0.16750294009268074, 0.19304925927284688, 0.20129207126848703, 0.18154915318277554, 0.20351926147592136, 0.17908148054085793, 0.18866579332716027, 0.1803083584544427, 0.17819150816016627, 0.1260996516802143, 0.12317048081953708, 0.13156046988738745, 0.8077513779021924, 0.20037704478516138, 0.7727215305540612, 0.11999390711539548, 0.7642452257319415, 0.7477032302189881, 0.5311574358403541, 0.15544090199964544, 0.593532688459355, 0.5330881409577453, 0.20581125874763362, 0.2034779957137225, 0.09304618941438436, 0.6222682915168092, 0.4575949610276362, 0.17864521278724876, 0.1903581507495533, 0.18460041427274487, 0.18110329647254098, 0.18927516490734486, 0.1820683199221943, 0.1806500928660667, 0.18550996708888212, 0.19776869061916946, 0.0913429572123523, 0.07730594216284503, 0.07477127054336474, 0.09125359019215462, 0.09203797713097517, 0.07543716008216239, 0.07425412784013374, 0.07980347291389622, 0.09859601261040718]}, "mutation_prompt": null}
{"id": "b347e5f2-f0f9-49b3-90f3-e750d26e03b5", "solution": "import numpy as np\n\nclass AdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + self.c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + self.c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n        return self.global_best_pos", "name": "AdaptiveInertiaPSO", "description": "Implement a novel variant of Particle Swarm Optimization (PSO) with adaptive inertia weight to improve convergence speed. ", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8b80a576-71ec-4f35-aef6-77c5b01687bd", "metadata": {"aucs": [0.5113633293508427, 0.5071289755310789, 0.5126125217133646, 0.5038760058175027, 0.5156072167228665, 0.5028501616223497, 0.5048349132598864, 0.5034790130415553, 0.5131604399587435, 0.15236042323419374, 0.11063455500898467, 0.10948867881152968, 0.0686952255090586, 0.05729544731278857, 0.06964179359888034, 0.03306128752002746, 0.05848462736614024, 0.01735646756185527, 0.10398529447758953, 0.13093458897485366, 0.1012531537974175, 0.11769559750653535, 0.15610760413544644, 0.1079730904867503, 0.1033035223472758, 0.11160874220385342, 0.118817381818479, 0.07929873961850376, 0.09767092003864186, 0.07723544623563428, 0.09783999314129632, 0.10105346032632001, 0.059527263259784524, 0.10266714224497431, 0.08674999314086596, 0.06667955679202953, 0.8847457684958745, 0.8621291094181934, 0.8584122968493906, 0.8379593230061513, 0.8550918209695886, 0.85684474645484, 0.8742463893935312, 0.837740042209513, 0.8371574820006932, 0.3527838768707864, 0.3175052603695876, 0.33277882941445236, 0.3679144174121993, 0.35654711635313774, 0.3446243629794622, 0.33164117827372475, 0.3288596560640187, 0.36109738245869083, 0.7074018975554973, 0.16739231244776132, 0.13381304155792617, 0.278547681937625, 0.26694722428877604, 0.13590842452547114, 0.14987503295192584, 0.14870327410551132, 0.1708410602758329, 0.17510489316063704, 0.21184632964859207, 0.14964187002429663, 0.17361056112945827, 0.17447053405035362, 0.16206738264069698, 0.1956198504610993, 0.12775372077888536, 0.18823510431746504, 0.16674412886916856, 0.16329818506770133, 0.18226129321358953, 0.17386912696063406, 0.17678541453355479, 0.1324890451220786, 0.19483604468194005, 0.18387267152834985, 0.1927976916120523, 0.00047604891064911836, 0.01289050390968971, 0.07265250049471983, 0.008560874230441384, 0.0654760740074487, 0.034582951418208774, 0.03789561145563969, 9.999999999998899e-05, 0.04916062827216361, 0.10483183515119532, 0.10101831769954284, 0.1348373263349164, 0.03758618887797971, 0.00556169974729781, 0.046980952671551446, 0.18434028518311596, 0.0730191297151821, 0.0468495761224198, 9.999999999998899e-05, 0.004365636508199211, 0.03320444957510149, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007427215533434173, 0.014089033946806051, 0.0027391467478787845, 0.14579603479222591, 0.08919952852197599, 0.10533539861024166, 0.07698465610111183, 0.062222517826731716, 0.07075579155989997, 0.08842206332581248, 0.1332092022790291, 0.07742501379760758, 0.4475201182592832, 0.4298763610719266, 0.4739060303175716, 0.48287881255517706, 0.4448733552558013, 0.45243216335736003, 0.4637425139892358, 0.44137355326164174, 0.48390864639586795, 0.048346075991461346, 0.06380567990674313, 0.037598398008039435, 0.11644779704006014, 0.09324551798850045, 0.09031757041395305, 0.08972022612992858, 0.10834267578559087, 0.10954221864734659, 0.2167626950893934, 0.18673090689660665, 0.18677496514882574, 0.24497259212029898, 0.30400460754284087, 0.24375176035398294, 0.27497993545332733, 0.22165331439132197, 0.29145715961984386, 0.1546241969215314, 0.31529787594100434, 0.2059616032696988, 0.25083687502311747, 0.24351523652106655, 0.3081922091573104, 0.1668394567067515, 0.3210403901402906, 0.20572530500446207, 0.1513652398588542, 0.2016235880702939, 0.12460676122890091, 0.22510442901711125, 0.19569856438703614, 0.1579184516314761, 0.16357837770858352, 0.2402685103667518, 0.15988792692124065, 0.25143762509983525, 0.19608946478728362, 0.21840153124084283, 0.23875984266730133, 0.2136321800525911, 0.21643801391253903, 0.219295887998616, 0.2272273052592022, 0.2243642042917705, 0.16750294009268074, 0.19304925927284688, 0.20129207126848703, 0.18154915318277554, 0.20351926147592136, 0.17908148054085793, 0.18866579332716027, 0.1803083584544427, 0.17819150816016627, 0.1260996516802143, 0.12317048081953708, 0.13156046988738745, 0.8077513779021924, 0.20037704478516138, 0.7727215305540612, 0.11999390711539548, 0.7642452257319415, 0.7477032302189881, 0.5311574358403541, 0.15544090199964544, 0.593532688459355, 0.5330881409577453, 0.20581125874763362, 0.2034779957137225, 0.09304618941438436, 0.6222682915168092, 0.4575949610276362, 0.17864521278724876, 0.1903581507495533, 0.18460041427274487, 0.18110329647254098, 0.18927516490734486, 0.1820683199221943, 0.1806500928660667, 0.18550996708888212, 0.19776869061916946, 0.0913429572123523, 0.07730594216284503, 0.07477127054336474, 0.09125359019215462, 0.09203797713097517, 0.07543716008216239, 0.07425412784013374, 0.07980347291389622, 0.09859601261040718]}, "mutation_prompt": null}
{"id": "490d81cb-574f-4a12-a252-f10dff82823b", "solution": "import numpy as np\n\nclass AdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30  # Adjust population size dynamically based on convergence\n        self.max_vel = 0.2\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + self.c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + self.c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            # Dynamic population size adjustment based on convergence\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget)))\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "AdaptiveInertiaPSO", "description": "Incorporate a dynamic population size adjustment strategy to enhance convergence speed.", "configspace": "", "generation": 16, "fitness": 0.22973560206934054, "feedback": "The algorithm AdaptiveInertiaPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "8b80a576-71ec-4f35-aef6-77c5b01687bd", "metadata": {"aucs": [0.5416388678033173, 0.5071481374902304, 0.5032006330462224, 0.5038023582980542, 0.49740900762452533, 0.4838587480194969, 0.5174706930251679, 0.5642386911978235, 0.5128714633500302, 0.10480344563860311, 0.08184536026253886, 0.02974842208431705, 0.07811968173913952, 0.11393552660791939, 0.07215879428075911, 0.029415353580921733, 0.016252921185567315, 0.04294998471791989, 0.08144379347622632, 0.1377502010467615, 0.0859691862360683, 0.09266065457273176, 0.14169680467767998, 0.11072609624709961, 0.09339902042257942, 0.08272952242200227, 0.10665629888697281, 0.1514577800589686, 0.07239328687885593, 0.08609939554176926, 0.1026008964585009, 0.10830778533183272, 0.044049961255761216, 0.09438894641721163, 0.08018550436051952, 0.09132049192192904, 0.8753193819791603, 0.8291437357760684, 0.8409735956112352, 0.8613428892444164, 0.8613430702249466, 0.8462371122645452, 0.8754451423416532, 0.8074771869028606, 0.8586348025911351, 0.35002601799512945, 0.33999621263564694, 0.37285479473695327, 0.36337823371563516, 0.40005843119112405, 0.38147571521153645, 0.34666043011831127, 0.327850461896506, 0.37620981228201533, 0.21162033400811497, 0.153892042102999, 0.12969264582716422, 0.27490693176705017, 0.5409517012491931, 0.21091752031267996, 0.14905158172731203, 0.14693100063618802, 0.17476394995761602, 0.20838069551274951, 0.2081714633436128, 0.1472489862851022, 0.2223805495237391, 0.16725740237377373, 0.16741790068502793, 0.1771513126967379, 0.12654277059788566, 0.16569258639112527, 0.19715908468144205, 0.17598032003916053, 0.19529145709184714, 0.1729467826204676, 0.1699496552335963, 0.12969002203479163, 0.1797068037346502, 0.16820927241852202, 0.19109171414765191, 0.06115312578082943, 0.06561451133407736, 0.07081712595718836, 0.07094624962140528, 0.035989581772017165, 0.028052588088828823, 0.009249186160976586, 9.999999999998899e-05, 0.09180650056177242, 0.11982796484541103, 0.097303703395342, 0.12931232119957126, 0.0485933416085792, 0.0221263103094963, 0.03882824916053973, 0.13341901629288055, 0.07598146019997254, 0.05229196285910798, 0.002434194225661157, 0.014381902610952402, 0.018528117458628035, 9.999999999998899e-05, 0.0030002906754794667, 0.002275446341678644, 0.002563527094988638, 0.04219915127273011, 0.059324983520431696, 0.12254115996286163, 0.10436697136314399, 0.11568701532285175, 0.060846752768504486, 0.11664495919851381, 0.07228450339948922, 0.13048429724240485, 0.11183812558060979, 0.07856382133648498, 0.45999142530703485, 0.45365523687680054, 0.4308988806506613, 0.4361263783949465, 0.4553332513883348, 0.4759216682674944, 0.4755572431395989, 0.4591996021236402, 0.44849014889365213, 0.041222344324639226, 0.05645297653562997, 0.020706007158471595, 0.07355281345518216, 0.08585543745284863, 0.08684686250408813, 0.14803206154257875, 0.0828637934160994, 0.07326347675813627, 0.14436612788176184, 0.22291465247083164, 0.18883669477050602, 0.24186615902558795, 0.21568310425187187, 0.18617564092227956, 0.33459102496511395, 0.27137716491354313, 0.21271103216697373, 0.16852381029708918, 0.2662054351611538, 0.18516625577298207, 0.2697031121467569, 0.2410185293277981, 0.2676912068643502, 0.16094035659712158, 0.3217581343699175, 0.15584933265038214, 0.19477098278754157, 0.13188959318644267, 0.13225160530114355, 0.271716647776981, 0.2026205527920374, 0.15627558292082044, 0.1280330770600956, 0.21636636533294484, 0.13638205120918812, 0.21037785716114255, 0.20078147919318157, 0.22512032725418163, 0.2354103713075365, 0.19136715901673673, 0.23977359108427887, 0.25078617306170414, 0.20629893503178998, 0.21790484022021517, 0.17944132322432993, 0.19992446976276168, 0.1834824018050556, 0.1906053466903609, 0.19210899858962882, 0.185246335417514, 0.17589129539165538, 0.2001734655673576, 0.1796006439118628, 0.12563902782785064, 0.12440281514333706, 0.1522301075567266, 0.7689524787572413, 0.20040431266650338, 0.9058760263916888, 0.10040353551946446, 0.7680828168801894, 0.7607722247943898, 0.5452561380499799, 0.15630935189196804, 0.6971299201763681, 0.20492860511716238, 0.20507569315967233, 0.6021112339940001, 0.4619001197938021, 0.5407340759709236, 0.5244910397727719, 0.18983061322241523, 0.1906874838100575, 0.19115286014403177, 0.1714621933965189, 0.1942222118287229, 0.19818416865369304, 0.19195253293288195, 0.19257153229576196, 0.18550868134502874, 0.08358729044175883, 0.07256391842017096, 0.07514344868144074, 0.09869066942842697, 0.10622863196114374, 0.08921509879201384, 0.07115487456884151, 0.08266968890692827, 0.08781012147081346]}, "mutation_prompt": null}
{"id": "fe2c2bae-748b-42db-900e-2034a422883d", "solution": "import numpy as np\n\nclass AdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30  # Adjust population size dynamically based on convergence\n        self.max_vel = 0.2\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + self.c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + self.c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            # Dynamic population size adjustment based on convergence\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget)))\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "AdaptiveInertiaPSO", "description": "Incorporate a dynamic population size adjustment strategy to enhance convergence speed.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490d81cb-574f-4a12-a252-f10dff82823b", "metadata": {"aucs": [0.5416388678033173, 0.5071481374902304, 0.5032006330462224, 0.5038023582980542, 0.49740900762452533, 0.4838587480194969, 0.5174706930251679, 0.5642386911978235, 0.5128714633500302, 0.10480344563860311, 0.08184536026253886, 0.02974842208431705, 0.07811968173913952, 0.11393552660791939, 0.07215879428075911, 0.029415353580921733, 0.016252921185567315, 0.04294998471791989, 0.08144379347622632, 0.1377502010467615, 0.0859691862360683, 0.09266065457273176, 0.14169680467767998, 0.11072609624709961, 0.09339902042257942, 0.08272952242200227, 0.10665629888697281, 0.1514577800589686, 0.07239328687885593, 0.08609939554176926, 0.1026008964585009, 0.10830778533183272, 0.044049961255761216, 0.09438894641721163, 0.08018550436051952, 0.09132049192192904, 0.8753193819791603, 0.8291437357760684, 0.8409735956112352, 0.8613428892444164, 0.8613430702249466, 0.8462371122645452, 0.8754451423416532, 0.8074771869028606, 0.8586348025911351, 0.35002601799512945, 0.33999621263564694, 0.37285479473695327, 0.36337823371563516, 0.40005843119112405, 0.38147571521153645, 0.34666043011831127, 0.327850461896506, 0.37620981228201533, 0.21162033400811497, 0.153892042102999, 0.12969264582716422, 0.27490693176705017, 0.5409517012491931, 0.21091752031267996, 0.14905158172731203, 0.14693100063618802, 0.17476394995761602, 0.20838069551274951, 0.2081714633436128, 0.1472489862851022, 0.2223805495237391, 0.16725740237377373, 0.16741790068502793, 0.1771513126967379, 0.12654277059788566, 0.16569258639112527, 0.19715908468144205, 0.17598032003916053, 0.19529145709184714, 0.1729467826204676, 0.1699496552335963, 0.12969002203479163, 0.1797068037346502, 0.16820927241852202, 0.19109171414765191, 0.06115312578082943, 0.06561451133407736, 0.07081712595718836, 0.07094624962140528, 0.035989581772017165, 0.028052588088828823, 0.009249186160976586, 9.999999999998899e-05, 0.09180650056177242, 0.11982796484541103, 0.097303703395342, 0.12931232119957126, 0.0485933416085792, 0.0221263103094963, 0.03882824916053973, 0.13341901629288055, 0.07598146019997254, 0.05229196285910798, 0.002434194225661157, 0.014381902610952402, 0.018528117458628035, 9.999999999998899e-05, 0.0030002906754794667, 0.002275446341678644, 0.002563527094988638, 0.04219915127273011, 0.059324983520431696, 0.12254115996286163, 0.10436697136314399, 0.11568701532285175, 0.060846752768504486, 0.11664495919851381, 0.07228450339948922, 0.13048429724240485, 0.11183812558060979, 0.07856382133648498, 0.45999142530703485, 0.45365523687680054, 0.4308988806506613, 0.4361263783949465, 0.4553332513883348, 0.4759216682674944, 0.4755572431395989, 0.4591996021236402, 0.44849014889365213, 0.041222344324639226, 0.05645297653562997, 0.020706007158471595, 0.07355281345518216, 0.08585543745284863, 0.08684686250408813, 0.14803206154257875, 0.0828637934160994, 0.07326347675813627, 0.14436612788176184, 0.22291465247083164, 0.18883669477050602, 0.24186615902558795, 0.21568310425187187, 0.18617564092227956, 0.33459102496511395, 0.27137716491354313, 0.21271103216697373, 0.16852381029708918, 0.2662054351611538, 0.18516625577298207, 0.2697031121467569, 0.2410185293277981, 0.2676912068643502, 0.16094035659712158, 0.3217581343699175, 0.15584933265038214, 0.19477098278754157, 0.13188959318644267, 0.13225160530114355, 0.271716647776981, 0.2026205527920374, 0.15627558292082044, 0.1280330770600956, 0.21636636533294484, 0.13638205120918812, 0.21037785716114255, 0.20078147919318157, 0.22512032725418163, 0.2354103713075365, 0.19136715901673673, 0.23977359108427887, 0.25078617306170414, 0.20629893503178998, 0.21790484022021517, 0.17944132322432993, 0.19992446976276168, 0.1834824018050556, 0.1906053466903609, 0.19210899858962882, 0.185246335417514, 0.17589129539165538, 0.2001734655673576, 0.1796006439118628, 0.12563902782785064, 0.12440281514333706, 0.1522301075567266, 0.7689524787572413, 0.20040431266650338, 0.9058760263916888, 0.10040353551946446, 0.7680828168801894, 0.7607722247943898, 0.5452561380499799, 0.15630935189196804, 0.6971299201763681, 0.20492860511716238, 0.20507569315967233, 0.6021112339940001, 0.4619001197938021, 0.5407340759709236, 0.5244910397727719, 0.18983061322241523, 0.1906874838100575, 0.19115286014403177, 0.1714621933965189, 0.1942222118287229, 0.19818416865369304, 0.19195253293288195, 0.19257153229576196, 0.18550868134502874, 0.08358729044175883, 0.07256391842017096, 0.07514344868144074, 0.09869066942842697, 0.10622863196114374, 0.08921509879201384, 0.07115487456884151, 0.08266968890692827, 0.08781012147081346]}, "mutation_prompt": null}
{"id": "afde088c-2c75-48e2-b925-9ff33db43748", "solution": "import numpy as np\n\nclass AdaptiveMutationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30  # Adjust population size dynamically based on convergence\n        self.max_vel = 0.2\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.mutation_rate = 0.1  # Introduce a mutation rate for adaptive exploration\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                mutation_vector = np.random.uniform(-self.mutation_rate, self.mutation_rate, self.dim)  # Introduce mutation\n                self.velocity[i] = inertia_weight * self.velocity[i] + self.c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + self.c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i] + mutation_vector  # Apply mutation\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            # Dynamic population size adjustment based on convergence\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget)))\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "AdaptiveMutationPSO", "description": "Implement an adaptive mutation mechanism to explore the search space more effectively and improve convergence speed.", "configspace": "", "generation": 18, "fitness": 0.21907454301770685, "feedback": "The algorithm AdaptiveMutationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "490d81cb-574f-4a12-a252-f10dff82823b", "metadata": {"aucs": [0.45561783239278875, 0.4299301597642815, 0.4397178930446629, 0.4292172599029114, 0.46843234108094134, 0.4296282099674922, 0.4501186010739062, 0.4600550143666945, 0.4204962585557245, 0.0369189795796685, 0.09759463957860248, 9.999999999998899e-05, 0.0011269226778176655, 0.009633119284274239, 9.999999999998899e-05, 9.999999999998899e-05, 0.0014586514332891598, 9.999999999998899e-05, 0.10129047330561425, 0.10089939047689844, 0.0908707027810679, 0.09818282828316827, 0.1324182752006966, 0.0973395256695383, 0.08943893855146157, 0.09262458941429208, 0.11453882880251298, 0.1039186314850149, 0.0621915516620023, 0.08043441316742228, 0.09813034012836874, 0.06678449575981849, 0.04761127625503869, 0.08618168260967107, 0.06371061814760337, 0.07119254618281645, 0.8754449024227449, 0.8745036732659874, 0.8599438692835821, 0.8632738929567825, 0.8418649539277738, 0.8563968905668059, 0.8831417445158634, 0.8341120014616239, 0.8442489016864853, 0.3056570976488884, 0.29316977685416334, 0.3298528402315918, 0.33482212827586666, 0.3027710263597423, 0.31617148581741983, 0.32723728355094495, 0.2832152159506588, 0.31025993255010154, 0.6987918670006161, 0.16641838034845113, 0.15978489876270574, 0.276221500974861, 0.654322545843232, 0.20211361062570155, 0.1473447716241375, 0.14953340219234346, 0.14819268305804634, 0.1643506237373642, 0.1913393417938889, 0.17721021072055387, 0.19797733543741203, 0.17195613446198, 0.10217348430560846, 0.17952222288634734, 0.12409829871981914, 0.1605580078362151, 0.1706795133968141, 0.1572153381792477, 0.22593019247699375, 0.17375993542449997, 0.177453594951842, 0.12981158083978916, 0.19078784318282094, 0.14009088897777178, 0.1727426537780986, 0.03940322208349134, 0.05590519710800457, 0.0487119626332827, 0.030643352970840865, 9.999999999998899e-05, 0.009643507808580809, 0.05922916196281125, 9.999999999998899e-05, 0.07205971046080628, 0.20016562824062023, 0.11674500201651006, 0.10760910615023189, 0.07998233647138042, 0.015251287874639141, 0.05854248501879933, 0.11641893984712004, 0.10942960718690808, 0.045734355925627135, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09943363179411102, 0.07733728830635067, 0.08596890646865452, 0.056854864406109096, 0.09861991930851433, 0.07482909941340332, 0.07239134248431767, 0.11852516169519622, 0.07585310052211058, 0.42620743525365445, 0.4056148979729802, 0.4188244235299454, 0.42657218066636016, 0.40308533289716586, 0.41394100557278357, 0.41749377126876397, 0.48155245604972075, 0.42818728072023726, 0.0715883903928689, 0.07674417892943164, 0.02813146890119622, 0.07999070073521575, 0.10176002947272733, 0.08919855682363809, 0.07980101243963944, 0.09944203472833102, 0.09712901821479514, 0.18149497674919768, 0.20753035378461526, 0.1819891588093252, 0.18116597365351494, 0.2789371178464787, 0.17379314791029754, 0.26883134935586317, 0.26751230545818283, 0.22397938727298916, 0.1697922782046658, 0.1967496964216744, 0.22167391768497968, 0.3011301258962501, 0.23322905796566618, 0.3078275514875607, 0.22674242414253698, 0.31773714296946265, 0.25886069662531896, 0.1951342493272783, 0.2506387585914097, 0.18641477277185803, 0.24103229444919338, 0.16609669992696396, 0.21606143941871825, 0.11462445331622018, 0.21480433730899517, 0.18983755638674726, 0.21902468219611937, 0.20560588069777763, 0.20824207228327185, 0.2503970096996009, 0.23431948231193112, 0.23562108921185032, 0.24099125474535732, 0.23488990206457294, 0.23752553518555186, 0.18138612161018663, 0.1972656147877878, 0.18146564025172585, 0.1800078394138943, 0.18905343171992706, 0.1846483805241692, 0.18410575512769045, 0.20577960889163704, 0.17235708282069495, 0.13762056839912185, 0.1259495348851759, 0.1840602214183834, 0.6806394536275964, 0.2001884092826739, 0.6453693576665362, 0.12072046375125178, 0.7034148233334758, 0.652796256280483, 0.5259817907195192, 0.15620793296624214, 0.4581126316923323, 0.20381311274512914, 0.2050446580127857, 0.5460579697522567, 0.4128505047953712, 0.46938701943104, 0.4174010362030717, 0.19808481170146686, 0.17970296988540613, 0.18365544243733034, 0.19129960057963347, 0.19229788293998396, 0.18747871938132588, 0.17695457448453722, 0.19348002201138503, 0.18335543634100804, 0.07119396811348011, 0.075674299360598, 0.06774463972202482, 0.0886915065739391, 0.09856523301969733, 0.08374429589625176, 0.10428646699899569, 0.05918460311430429, 0.07655764484302885]}, "mutation_prompt": null}
{"id": "482be25f-9ba6-422e-a01f-7e00278d67b2", "solution": "import numpy as np\n\nclass AdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30  # Adjust population size dynamically based on convergence\n        self.max_vel = 0.2\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + self.c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + self.c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            # Dynamic population size adjustment based on convergence\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget)))\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "AdaptiveInertiaPSO", "description": "Incorporate a dynamic population size adjustment strategy to enhance convergence speed.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490d81cb-574f-4a12-a252-f10dff82823b", "metadata": {"aucs": [0.5416388678033173, 0.5071481374902304, 0.5032006330462224, 0.5038023582980542, 0.49740900762452533, 0.4838587480194969, 0.5174706930251679, 0.5642386911978235, 0.5128714633500302, 0.10480344563860311, 0.08184536026253886, 0.02974842208431705, 0.07811968173913952, 0.11393552660791939, 0.07215879428075911, 0.029415353580921733, 0.016252921185567315, 0.04294998471791989, 0.08144379347622632, 0.1377502010467615, 0.0859691862360683, 0.09266065457273176, 0.14169680467767998, 0.11072609624709961, 0.09339902042257942, 0.08272952242200227, 0.10665629888697281, 0.1514577800589686, 0.07239328687885593, 0.08609939554176926, 0.1026008964585009, 0.10830778533183272, 0.044049961255761216, 0.09438894641721163, 0.08018550436051952, 0.09132049192192904, 0.8753193819791603, 0.8291437357760684, 0.8409735956112352, 0.8613428892444164, 0.8613430702249466, 0.8462371122645452, 0.8754451423416532, 0.8074771869028606, 0.8586348025911351, 0.35002601799512945, 0.33999621263564694, 0.37285479473695327, 0.36337823371563516, 0.40005843119112405, 0.38147571521153645, 0.34666043011831127, 0.327850461896506, 0.37620981228201533, 0.21162033400811497, 0.153892042102999, 0.12969264582716422, 0.27490693176705017, 0.5409517012491931, 0.21091752031267996, 0.14905158172731203, 0.14693100063618802, 0.17476394995761602, 0.20838069551274951, 0.2081714633436128, 0.1472489862851022, 0.2223805495237391, 0.16725740237377373, 0.16741790068502793, 0.1771513126967379, 0.12654277059788566, 0.16569258639112527, 0.19715908468144205, 0.17598032003916053, 0.19529145709184714, 0.1729467826204676, 0.1699496552335963, 0.12969002203479163, 0.1797068037346502, 0.16820927241852202, 0.19109171414765191, 0.06115312578082943, 0.06561451133407736, 0.07081712595718836, 0.07094624962140528, 0.035989581772017165, 0.028052588088828823, 0.009249186160976586, 9.999999999998899e-05, 0.09180650056177242, 0.11982796484541103, 0.097303703395342, 0.12931232119957126, 0.0485933416085792, 0.0221263103094963, 0.03882824916053973, 0.13341901629288055, 0.07598146019997254, 0.05229196285910798, 0.002434194225661157, 0.014381902610952402, 0.018528117458628035, 9.999999999998899e-05, 0.0030002906754794667, 0.002275446341678644, 0.002563527094988638, 0.04219915127273011, 0.059324983520431696, 0.12254115996286163, 0.10436697136314399, 0.11568701532285175, 0.060846752768504486, 0.11664495919851381, 0.07228450339948922, 0.13048429724240485, 0.11183812558060979, 0.07856382133648498, 0.45999142530703485, 0.45365523687680054, 0.4308988806506613, 0.4361263783949465, 0.4553332513883348, 0.4759216682674944, 0.4755572431395989, 0.4591996021236402, 0.44849014889365213, 0.041222344324639226, 0.05645297653562997, 0.020706007158471595, 0.07355281345518216, 0.08585543745284863, 0.08684686250408813, 0.14803206154257875, 0.0828637934160994, 0.07326347675813627, 0.14436612788176184, 0.22291465247083164, 0.18883669477050602, 0.24186615902558795, 0.21568310425187187, 0.18617564092227956, 0.33459102496511395, 0.27137716491354313, 0.21271103216697373, 0.16852381029708918, 0.2662054351611538, 0.18516625577298207, 0.2697031121467569, 0.2410185293277981, 0.2676912068643502, 0.16094035659712158, 0.3217581343699175, 0.15584933265038214, 0.19477098278754157, 0.13188959318644267, 0.13225160530114355, 0.271716647776981, 0.2026205527920374, 0.15627558292082044, 0.1280330770600956, 0.21636636533294484, 0.13638205120918812, 0.21037785716114255, 0.20078147919318157, 0.22512032725418163, 0.2354103713075365, 0.19136715901673673, 0.23977359108427887, 0.25078617306170414, 0.20629893503178998, 0.21790484022021517, 0.17944132322432993, 0.19992446976276168, 0.1834824018050556, 0.1906053466903609, 0.19210899858962882, 0.185246335417514, 0.17589129539165538, 0.2001734655673576, 0.1796006439118628, 0.12563902782785064, 0.12440281514333706, 0.1522301075567266, 0.7689524787572413, 0.20040431266650338, 0.9058760263916888, 0.10040353551946446, 0.7680828168801894, 0.7607722247943898, 0.5452561380499799, 0.15630935189196804, 0.6971299201763681, 0.20492860511716238, 0.20507569315967233, 0.6021112339940001, 0.4619001197938021, 0.5407340759709236, 0.5244910397727719, 0.18983061322241523, 0.1906874838100575, 0.19115286014403177, 0.1714621933965189, 0.1942222118287229, 0.19818416865369304, 0.19195253293288195, 0.19257153229576196, 0.18550868134502874, 0.08358729044175883, 0.07256391842017096, 0.07514344868144074, 0.09869066942842697, 0.10622863196114374, 0.08921509879201384, 0.07115487456884151, 0.08266968890692827, 0.08781012147081346]}, "mutation_prompt": null}
{"id": "e348c45f-f30f-41ef-ad6b-afc3f372ae1b", "solution": "import numpy as np\n\nclass AdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30  # Adjust population size dynamically based on convergence\n        self.max_vel = 0.2\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + self.c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + self.c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            # Dynamic population size adjustment based on convergence\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget)))\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "AdaptiveInertiaPSO", "description": "Incorporate a dynamic population size adjustment strategy to enhance convergence speed.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490d81cb-574f-4a12-a252-f10dff82823b", "metadata": {"aucs": [0.5416388678033173, 0.5071481374902304, 0.5032006330462224, 0.5038023582980542, 0.49740900762452533, 0.4838587480194969, 0.5174706930251679, 0.5642386911978235, 0.5128714633500302, 0.10480344563860311, 0.08184536026253886, 0.02974842208431705, 0.07811968173913952, 0.11393552660791939, 0.07215879428075911, 0.029415353580921733, 0.016252921185567315, 0.04294998471791989, 0.08144379347622632, 0.1377502010467615, 0.0859691862360683, 0.09266065457273176, 0.14169680467767998, 0.11072609624709961, 0.09339902042257942, 0.08272952242200227, 0.10665629888697281, 0.1514577800589686, 0.07239328687885593, 0.08609939554176926, 0.1026008964585009, 0.10830778533183272, 0.044049961255761216, 0.09438894641721163, 0.08018550436051952, 0.09132049192192904, 0.8753193819791603, 0.8291437357760684, 0.8409735956112352, 0.8613428892444164, 0.8613430702249466, 0.8462371122645452, 0.8754451423416532, 0.8074771869028606, 0.8586348025911351, 0.35002601799512945, 0.33999621263564694, 0.37285479473695327, 0.36337823371563516, 0.40005843119112405, 0.38147571521153645, 0.34666043011831127, 0.327850461896506, 0.37620981228201533, 0.21162033400811497, 0.153892042102999, 0.12969264582716422, 0.27490693176705017, 0.5409517012491931, 0.21091752031267996, 0.14905158172731203, 0.14693100063618802, 0.17476394995761602, 0.20838069551274951, 0.2081714633436128, 0.1472489862851022, 0.2223805495237391, 0.16725740237377373, 0.16741790068502793, 0.1771513126967379, 0.12654277059788566, 0.16569258639112527, 0.19715908468144205, 0.17598032003916053, 0.19529145709184714, 0.1729467826204676, 0.1699496552335963, 0.12969002203479163, 0.1797068037346502, 0.16820927241852202, 0.19109171414765191, 0.06115312578082943, 0.06561451133407736, 0.07081712595718836, 0.07094624962140528, 0.035989581772017165, 0.028052588088828823, 0.009249186160976586, 9.999999999998899e-05, 0.09180650056177242, 0.11982796484541103, 0.097303703395342, 0.12931232119957126, 0.0485933416085792, 0.0221263103094963, 0.03882824916053973, 0.13341901629288055, 0.07598146019997254, 0.05229196285910798, 0.002434194225661157, 0.014381902610952402, 0.018528117458628035, 9.999999999998899e-05, 0.0030002906754794667, 0.002275446341678644, 0.002563527094988638, 0.04219915127273011, 0.059324983520431696, 0.12254115996286163, 0.10436697136314399, 0.11568701532285175, 0.060846752768504486, 0.11664495919851381, 0.07228450339948922, 0.13048429724240485, 0.11183812558060979, 0.07856382133648498, 0.45999142530703485, 0.45365523687680054, 0.4308988806506613, 0.4361263783949465, 0.4553332513883348, 0.4759216682674944, 0.4755572431395989, 0.4591996021236402, 0.44849014889365213, 0.041222344324639226, 0.05645297653562997, 0.020706007158471595, 0.07355281345518216, 0.08585543745284863, 0.08684686250408813, 0.14803206154257875, 0.0828637934160994, 0.07326347675813627, 0.14436612788176184, 0.22291465247083164, 0.18883669477050602, 0.24186615902558795, 0.21568310425187187, 0.18617564092227956, 0.33459102496511395, 0.27137716491354313, 0.21271103216697373, 0.16852381029708918, 0.2662054351611538, 0.18516625577298207, 0.2697031121467569, 0.2410185293277981, 0.2676912068643502, 0.16094035659712158, 0.3217581343699175, 0.15584933265038214, 0.19477098278754157, 0.13188959318644267, 0.13225160530114355, 0.271716647776981, 0.2026205527920374, 0.15627558292082044, 0.1280330770600956, 0.21636636533294484, 0.13638205120918812, 0.21037785716114255, 0.20078147919318157, 0.22512032725418163, 0.2354103713075365, 0.19136715901673673, 0.23977359108427887, 0.25078617306170414, 0.20629893503178998, 0.21790484022021517, 0.17944132322432993, 0.19992446976276168, 0.1834824018050556, 0.1906053466903609, 0.19210899858962882, 0.185246335417514, 0.17589129539165538, 0.2001734655673576, 0.1796006439118628, 0.12563902782785064, 0.12440281514333706, 0.1522301075567266, 0.7689524787572413, 0.20040431266650338, 0.9058760263916888, 0.10040353551946446, 0.7680828168801894, 0.7607722247943898, 0.5452561380499799, 0.15630935189196804, 0.6971299201763681, 0.20492860511716238, 0.20507569315967233, 0.6021112339940001, 0.4619001197938021, 0.5407340759709236, 0.5244910397727719, 0.18983061322241523, 0.1906874838100575, 0.19115286014403177, 0.1714621933965189, 0.1942222118287229, 0.19818416865369304, 0.19195253293288195, 0.19257153229576196, 0.18550868134502874, 0.08358729044175883, 0.07256391842017096, 0.07514344868144074, 0.09869066942842697, 0.10622863196114374, 0.08921509879201384, 0.07115487456884151, 0.08266968890692827, 0.08781012147081346]}, "mutation_prompt": null}
{"id": "a90ad1ea-875f-4b49-9e31-a4d8bf96191d", "solution": "import numpy as np\n\nclass ChaoticMapPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            chaotic_map = np.sin(self.velocity) ** 2\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = chaotic_map[i] * (inertia_weight * self.velocity[i] + self.c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + self.c2 * r2 * (self.global_best_pos - self.position[i]))\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget)))\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ChaoticMapPSO", "description": "Introducing a novel velocity update mechanism using a chaotic map to enhance convergence speed by enhancing exploration-exploitation balance.", "configspace": "", "generation": 21, "fitness": 0.05532415418465226, "feedback": "The algorithm ChaoticMapPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.06.", "error": "", "parent_id": "490d81cb-574f-4a12-a252-f10dff82823b", "metadata": {"aucs": [0.13192334452271426, 0.11015151734382123, 0.11148756737650178, 0.11056141122100993, 0.12408655927505585, 0.10534562595315478, 0.1067195709926676, 0.10331679129412163, 0.09841392549443118, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014566917910275312, 0.015680937936142225, 0.019439369130639927, 0.0193164890773585, 0.02687968127395779, 0.014199714182645984, 0.023282623158231597, 0.008123470067262106, 0.021938711954133217, 0.0040099665784071314, 0.005196666451378729, 0.004659206663139459, 0.01970753455883245, 0.004705504980826891, 0.003890709354070765, 0.007130787678662043, 0.023024341718628438, 0.018649943347957776, 0.05683888966556494, 0.05094356194739269, 0.05197066973174991, 0.0533424925374667, 0.05649427586793554, 0.061264793608406753, 0.0638860334912611, 0.05332639024000041, 0.05601148840265846, 0.017925902172380104, 0.016822803565446742, 0.01709535179729449, 0.017534054954814193, 0.004840469800429292, 0.04876479694560987, 0.012919511279312457, 0.011320442697953847, 0.0035183278274522056, 0.10027683525177622, 0.08214627745614456, 0.05751772896913643, 0.06977723962694127, 0.0575795087501374, 0.08113750807280684, 0.08573759676854731, 0.059780304349710045, 0.06318366138672005, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0009699686494510917, 9.999999999998899e-05, 9.999999999998899e-05, 0.001794165685062965, 9.999999999998899e-05, 9.999999999998899e-05, 0.003207269301475524, 0.002969566605113494, 0.033549449309031254, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18908012235408467, 0.14053842466697375, 0.16114510330847265, 0.12964052215690713, 0.11551153970403849, 0.13412123946758236, 0.16236104656759875, 0.1400595448542199, 0.1532542871803928, 0.011869249113387603, 0.015587854923409084, 0.020703668866154712, 0.01710063991242572, 0.01548189232122199, 0.017617002701386775, 0.020028755962084532, 0.0059245710095128246, 0.0267656688986897, 0.09489946058790466, 0.105201326757983, 0.09132114617143439, 0.11040535127482254, 0.11189401015141887, 0.0748675551227197, 0.08878606389621668, 0.09089237428638886, 0.11257370372250874, 0.1443041999305511, 0.1375562089809379, 0.14403571342824084, 0.1410244589435795, 0.15092004287378769, 0.1606349156063014, 0.14221115077195268, 0.17377774300845283, 0.13081689013451492, 0.08210839289667726, 0.06021590888469486, 0.07932781890031748, 0.08528098649446003, 0.09836657792106585, 0.08630271778839438, 0.08697393800663267, 0.10245428798929901, 0.0782434169552243, 0.11943364695601921, 0.1269233315182683, 0.13345086981233123, 0.10880810040708966, 0.10833830238877384, 0.1367972416536386, 0.12360580273872857, 0.10817897168280544, 0.13706060808043563, 0.09788281630678652, 0.02133127272161217, 0.09841399583193466, 0.039464617062707874, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011882928229149492, 9.999999999998899e-05, 0.09405029809555654, 0.10170377236003147, 0.11093482824647838, 0.11529867272547234, 0.1207914665021157, 0.10188417226544022, 0.08946559383336483, 0.11244849437913818, 0.10141785316462315, 0.11040265245322212, 0.1157256566524899, 0.06825537377562063, 0.0824109952789076, 0.09386898246533015, 0.09095660666470506, 0.08496432069525495, 0.08236531651834289, 0.07671843756589602, 0.1532214677540975, 0.15712735862056726, 0.17989077369983153, 0.15147118934479076, 0.18233443478619715, 0.1574801766908528, 0.15261706069101588, 0.15602776563264875, 0.15958995250556252, 0.03154648944800498, 0.0319014648672864, 0.03610230302279793, 0.04093278469331252, 0.038560594145436555, 0.03241210175628062, 0.026356551274530626, 0.03673582249505747, 0.04122929175810841]}, "mutation_prompt": null}
{"id": "23d0ddc8-1ec7-4c21-9f32-56a766bff998", "solution": "import numpy as np\n\nclass AdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30  # Adjust population size dynamically based on convergence\n        self.max_vel = 0.2\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + self.c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + self.c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            # Dynamic population size adjustment based on convergence\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget)))\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "AdaptiveInertiaPSO", "description": "Incorporate a dynamic population size adjustment strategy to enhance convergence speed.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "490d81cb-574f-4a12-a252-f10dff82823b", "metadata": {"aucs": [0.5416388678033173, 0.5071481374902304, 0.5032006330462224, 0.5038023582980542, 0.49740900762452533, 0.4838587480194969, 0.5174706930251679, 0.5642386911978235, 0.5128714633500302, 0.10480344563860311, 0.08184536026253886, 0.02974842208431705, 0.07811968173913952, 0.11393552660791939, 0.07215879428075911, 0.029415353580921733, 0.016252921185567315, 0.04294998471791989, 0.08144379347622632, 0.1377502010467615, 0.0859691862360683, 0.09266065457273176, 0.14169680467767998, 0.11072609624709961, 0.09339902042257942, 0.08272952242200227, 0.10665629888697281, 0.1514577800589686, 0.07239328687885593, 0.08609939554176926, 0.1026008964585009, 0.10830778533183272, 0.044049961255761216, 0.09438894641721163, 0.08018550436051952, 0.09132049192192904, 0.8753193819791603, 0.8291437357760684, 0.8409735956112352, 0.8613428892444164, 0.8613430702249466, 0.8462371122645452, 0.8754451423416532, 0.8074771869028606, 0.8586348025911351, 0.35002601799512945, 0.33999621263564694, 0.37285479473695327, 0.36337823371563516, 0.40005843119112405, 0.38147571521153645, 0.34666043011831127, 0.327850461896506, 0.37620981228201533, 0.21162033400811497, 0.153892042102999, 0.12969264582716422, 0.27490693176705017, 0.5409517012491931, 0.21091752031267996, 0.14905158172731203, 0.14693100063618802, 0.17476394995761602, 0.20838069551274951, 0.2081714633436128, 0.1472489862851022, 0.2223805495237391, 0.16725740237377373, 0.16741790068502793, 0.1771513126967379, 0.12654277059788566, 0.16569258639112527, 0.19715908468144205, 0.17598032003916053, 0.19529145709184714, 0.1729467826204676, 0.1699496552335963, 0.12969002203479163, 0.1797068037346502, 0.16820927241852202, 0.19109171414765191, 0.06115312578082943, 0.06561451133407736, 0.07081712595718836, 0.07094624962140528, 0.035989581772017165, 0.028052588088828823, 0.009249186160976586, 9.999999999998899e-05, 0.09180650056177242, 0.11982796484541103, 0.097303703395342, 0.12931232119957126, 0.0485933416085792, 0.0221263103094963, 0.03882824916053973, 0.13341901629288055, 0.07598146019997254, 0.05229196285910798, 0.002434194225661157, 0.014381902610952402, 0.018528117458628035, 9.999999999998899e-05, 0.0030002906754794667, 0.002275446341678644, 0.002563527094988638, 0.04219915127273011, 0.059324983520431696, 0.12254115996286163, 0.10436697136314399, 0.11568701532285175, 0.060846752768504486, 0.11664495919851381, 0.07228450339948922, 0.13048429724240485, 0.11183812558060979, 0.07856382133648498, 0.45999142530703485, 0.45365523687680054, 0.4308988806506613, 0.4361263783949465, 0.4553332513883348, 0.4759216682674944, 0.4755572431395989, 0.4591996021236402, 0.44849014889365213, 0.041222344324639226, 0.05645297653562997, 0.020706007158471595, 0.07355281345518216, 0.08585543745284863, 0.08684686250408813, 0.14803206154257875, 0.0828637934160994, 0.07326347675813627, 0.14436612788176184, 0.22291465247083164, 0.18883669477050602, 0.24186615902558795, 0.21568310425187187, 0.18617564092227956, 0.33459102496511395, 0.27137716491354313, 0.21271103216697373, 0.16852381029708918, 0.2662054351611538, 0.18516625577298207, 0.2697031121467569, 0.2410185293277981, 0.2676912068643502, 0.16094035659712158, 0.3217581343699175, 0.15584933265038214, 0.19477098278754157, 0.13188959318644267, 0.13225160530114355, 0.271716647776981, 0.2026205527920374, 0.15627558292082044, 0.1280330770600956, 0.21636636533294484, 0.13638205120918812, 0.21037785716114255, 0.20078147919318157, 0.22512032725418163, 0.2354103713075365, 0.19136715901673673, 0.23977359108427887, 0.25078617306170414, 0.20629893503178998, 0.21790484022021517, 0.17944132322432993, 0.19992446976276168, 0.1834824018050556, 0.1906053466903609, 0.19210899858962882, 0.185246335417514, 0.17589129539165538, 0.2001734655673576, 0.1796006439118628, 0.12563902782785064, 0.12440281514333706, 0.1522301075567266, 0.7689524787572413, 0.20040431266650338, 0.9058760263916888, 0.10040353551946446, 0.7680828168801894, 0.7607722247943898, 0.5452561380499799, 0.15630935189196804, 0.6971299201763681, 0.20492860511716238, 0.20507569315967233, 0.6021112339940001, 0.4619001197938021, 0.5407340759709236, 0.5244910397727719, 0.18983061322241523, 0.1906874838100575, 0.19115286014403177, 0.1714621933965189, 0.1942222118287229, 0.19818416865369304, 0.19195253293288195, 0.19257153229576196, 0.18550868134502874, 0.08358729044175883, 0.07256391842017096, 0.07514344868144074, 0.09869066942842697, 0.10622863196114374, 0.08921509879201384, 0.07115487456884151, 0.08266968890692827, 0.08781012147081346]}, "mutation_prompt": null}
{"id": "03932e79-514b-47d4-b8fc-3b03d7c06625", "solution": "import numpy as np\n\nclass FastAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30  # Adjust population size dynamically based on convergence\n        self.max_vel = 0.2\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.mutation_rate = 0.1  # New mutation rate for diversification\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + self.c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + self.c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n                # New mutation operator for diversification\n                if np.random.rand() < self.mutation_rate:\n                    self.position[i] += np.random.normal(0, 1, self.dim)\n                    self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            # Dynamic population size adjustment based on convergence\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget)))\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "FastAdaptiveInertiaPSO", "description": "Implement a novel mutation operator to diversify the search space and enhance exploration, leading to faster convergence.", "configspace": "", "generation": 23, "fitness": 0.22437269616046296, "feedback": "The algorithm FastAdaptiveInertiaPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "490d81cb-574f-4a12-a252-f10dff82823b", "metadata": {"aucs": [0.4461116346992393, 0.4790643510516851, 0.48973660058424906, 0.46064499582446317, 0.4483435913542214, 0.4816983486613372, 0.4518736281370961, 0.45299372991816744, 0.469807935938677, 0.11639993302130847, 0.05151866224541313, 0.0028291235027372297, 0.0017382662072384925, 0.04419868824355, 0.0034899961554610837, 0.0018201183045790659, 0.004996471933387925, 9.999999999998899e-05, 0.09783093825474498, 0.09912573172832584, 0.09532519995365107, 0.096831040187641, 0.13730998682401296, 0.13002792002457264, 0.08803585926993795, 0.13445277409166068, 0.09013230770065295, 0.09395587804894423, 0.08568494632006374, 0.08382993430379537, 0.1062811293659548, 0.09563800631563812, 0.07777946957296122, 0.11986885962893634, 0.11102753265902976, 0.08528026882162998, 0.8785080916612009, 0.8766016331310503, 0.8558058576327146, 0.8149223362032042, 0.8759270942735283, 0.8346531122700105, 0.8594121928485816, 0.8307027768150907, 0.8791658425542198, 0.3123393179880837, 0.2946229392397781, 0.31511249695893817, 0.31703171259730767, 0.2976549143912134, 0.3010348017008949, 0.30537697374835737, 0.29263201090437874, 0.27869088721874247, 0.7803617047890838, 0.16981407787463776, 0.19497346594542453, 0.2136954359897255, 0.2614871008042956, 0.1854973238996921, 0.1965755151636367, 0.1911543749207273, 0.382505129256154, 0.16344881243517795, 0.19433364704039713, 0.15521240901770306, 0.15701917046529834, 0.16123437353344472, 0.15631932955981143, 0.19357901776155673, 0.18685817608841127, 0.1407173309064752, 0.19991841579058722, 0.15065549047349747, 0.22920056811674105, 0.17309744065861432, 0.11643119987897332, 0.16850980848891506, 0.1979884540124165, 0.16373519418283267, 0.1655958374356562, 0.028318353532224005, 0.030948665489475613, 0.03469077232750917, 9.999999999998899e-05, 0.011282698692501203, 0.008609748047066934, 0.0058514224997766595, 0.0045779930636170585, 0.040474393184226076, 0.1459816638751661, 0.10134602764183287, 0.09399425449592924, 0.08567605516908383, 0.021988832897313793, 0.04948018181304048, 0.1614981519191102, 0.06921059282416953, 0.08965769752192665, 9.999999999998899e-05, 0.038152492471874355, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0719632708114093, 0.05474780001667656, 0.13337239893072583, 0.08672956028248424, 0.07760198363613269, 0.07527030865578277, 0.11016863647372444, 0.09161379082938603, 0.11449832063713017, 0.43618748659599804, 0.40347657312386975, 0.42172224578215833, 0.40755719891039854, 0.4089995528667708, 0.40824206392056217, 0.42341254717646926, 0.39338171703584146, 0.4432027358159748, 0.08479317779927475, 0.08380695063061416, 0.08197817448607514, 0.11955560512440355, 0.10909889466361311, 0.09871914664800774, 0.12367385989806257, 0.07959152672248182, 0.1388033888509077, 0.17254185063469163, 0.19763971675007053, 0.25035943353316603, 0.2102451286043081, 0.24812864153076952, 0.23128403774428574, 0.2801378804401151, 0.23799408553372048, 0.17028555074057317, 0.28427613419473596, 0.2552076686743898, 0.2182665285813855, 0.24208106718388744, 0.2876888120467632, 0.250194571309428, 0.2035490426123605, 0.2938913821644671, 0.28360247160875274, 0.17385558947340518, 0.24649628937121948, 0.14933331140562056, 0.2447804080044127, 0.20895656056802714, 0.14933405136145206, 0.17356561436196316, 0.2084259658054154, 0.175241132844546, 0.20895357522605595, 0.21330948496424018, 0.19783859181766617, 0.1848935380958182, 0.22567694104211555, 0.2258351292877684, 0.21772403292163, 0.2024056701637802, 0.2195455586466465, 0.1798455847098065, 0.21652538560261092, 0.16917865278638633, 0.2025794374320269, 0.2338343121653419, 0.21088262678226688, 0.2118844371681179, 0.20460845273046568, 0.17956644827509738, 0.15735332570372307, 0.1847104423058462, 0.18281839936755884, 0.630181185408405, 0.20019378692624346, 0.6878503607747046, 0.12739425851000274, 0.7093132387247522, 0.6281976408269885, 0.5172112829863953, 0.4475768456841891, 0.610772348565912, 0.609090224496502, 0.2061938168031675, 0.5865559943333707, 0.431624145896806, 0.16017355197687067, 0.37079407041010226, 0.18251303415606512, 0.1965432835325318, 0.18046060115758222, 0.17586614613462448, 0.1719822132249883, 0.18363701340503225, 0.1808321452772913, 0.18961440544665098, 0.19701218232387296, 0.08929256557956955, 0.07869654950707483, 0.07517310194116567, 0.08577395437388569, 0.09718311355407916, 0.0905514769463378, 0.0811487179462902, 0.09962082438534559, 0.09743876589136757]}, "mutation_prompt": null}
{"id": "cf31910b-7246-4dc6-addc-6299983e14ee", "solution": "import numpy as np\n\nclass RandomRestartAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30  # Adjust population size dynamically based on convergence\n        self.max_vel = 0.2\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + self.c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + self.c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            # Dynamic population size adjustment based on convergence\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget)))\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n            # Random restart to escape local optima\n            if np.random.rand() < 0.1:\n                self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n                self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        return self.global_best_pos", "name": "RandomRestartAdaptiveInertiaPSO", "description": "Utilize a random restart strategy to escape local optima and improve exploration during optimization.", "configspace": "", "generation": 24, "fitness": 0.15855613500529275, "feedback": "The algorithm RandomRestartAdaptiveInertiaPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.11.", "error": "", "parent_id": "490d81cb-574f-4a12-a252-f10dff82823b", "metadata": {"aucs": [0.36782192854996754, 0.3936569814165699, 0.41063523106990085, 0.3412887670863456, 0.37361904866547935, 0.3754393015909523, 0.32738838918399016, 0.37733058951691933, 0.41197314837029997, 9.999999999998899e-05, 0.024475750594937562, 0.013033178456223649, 0.004084258960906251, 0.05266883049690607, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08726441705641352, 0.09106129524652029, 0.07530599886546974, 0.09672243884984677, 0.0859719813834654, 0.1166951788173839, 0.08183529053738314, 0.08658278226845872, 0.0936454156141614, 0.07756661225587214, 0.077560004578073, 0.07758298372016392, 0.07339636525640603, 0.07838058408223891, 0.08953473534958589, 0.05975686827551785, 0.06568368207785003, 0.11470954391274368, 0.09985951560983408, 0.14203581537347199, 0.13972809781623696, 0.11869998002494053, 0.4390121362857917, 0.11124340793940224, 0.08991461133539802, 0.18714834459548124, 0.09563269824066267, 0.14353103415364876, 0.2071738278636619, 0.2117684180765519, 0.11937543059060385, 0.2166801705114052, 0.21754019842347183, 0.14360866109235482, 0.18494523440009547, 0.1915972382794927, 0.15606810584565278, 0.2004613215412523, 0.18343900128941815, 0.31632658947587766, 0.2656770940341292, 0.23923402311706998, 0.2120278606314303, 0.2169219733693054, 0.17292551861726535, 0.12188711892796877, 0.17274097956836265, 0.21537615223088125, 0.1019933518966798, 0.12762119170817443, 0.15839185427438018, 0.12957957361334516, 0.16989587904701187, 0.1540072817853626, 0.12747459597175181, 0.14624074601418235, 0.12418247002090788, 0.11891458346675954, 0.11825616422642893, 0.12160587823519542, 0.14020803076140453, 0.18685146234652694, 0.19416310699520367, 9.999999999998899e-05, 0.0009633692764277058, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0152835059785561, 0.006364357875369042, 9.999999999998899e-05, 0.13819488645113664, 0.13832273889303304, 0.09045243465620001, 0.10520935668645037, 0.07092874419254835, 0.07113899635938448, 0.10433590286409655, 0.13129502179971386, 0.07062182352272306, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.048594415995368734, 0.01993244064417754, 0.04973401881663486, 0.04386640368650929, 0.026251548066333785, 0.07927221722158484, 0.004243912593352439, 0.048612051795740796, 0.05056347653700377, 0.3518792716197109, 0.39446289222048714, 0.37161767005574964, 0.3337880416659694, 0.37286132080416556, 0.32656535838246004, 0.3625165581360328, 0.3676458062678124, 0.38827689729418313, 0.04997767175994172, 0.07530555985674803, 0.08402650631043818, 0.06449795927409374, 0.0921236242074931, 0.09459057473640986, 0.07716260989274248, 0.06865772702304618, 0.0823839294999541, 0.2009675072522985, 0.17687522147661772, 0.17496903521530727, 0.15153249331225127, 0.17392113063394432, 0.15647742205711934, 0.15139495331207564, 0.17784758031059955, 0.12857017145812044, 0.2402545376850863, 0.24541818316147912, 0.20741904687114987, 0.2875862425375991, 0.24669145728976605, 0.2115124486989921, 0.18379084086272057, 0.23725897817564767, 0.1997859610996363, 0.19184354789592595, 0.16936030816695802, 0.1693102580567687, 0.1449559857091155, 0.16234155531932215, 0.1494973743543645, 0.161113499433032, 0.17205270023955033, 0.12608580890146515, 0.20521181949865075, 0.21397964963646376, 0.20347821844520564, 0.19448243380788222, 0.1945160413349868, 0.202106747278737, 0.18933378279162005, 0.23146659655361457, 0.23192396753742084, 0.1764224264675044, 0.19477462535530343, 0.17350379911165115, 0.17426055482490843, 0.17944182848073653, 0.18774205292885549, 0.16146675969696644, 0.19780985679187002, 0.16967835740699244, 0.16384378972235536, 0.28555957412917465, 0.1837233964582452, 0.29728952607012005, 0.18234642088489594, 0.3376850609015766, 0.5779972630731608, 0.5009736338914696, 0.24425945967239981, 0.29757983360411044, 0.3471881092283958, 0.16777106094799088, 0.24633464391080617, 0.4201636378796352, 0.2866430968298731, 0.2663860094551792, 0.3659026055693728, 0.31890028468509235, 0.1812844759124692, 0.18074114300160948, 0.19533836560599604, 0.17271528022952076, 0.1867090855894915, 0.19444848440168683, 0.18798801680805777, 0.18133966143397917, 0.1801560775710246, 0.07688621724262334, 0.07402957024511303, 0.06676358259237436, 0.0900023265827189, 0.08554273237605048, 0.06724505493741506, 0.08254339265805066, 0.07484794766173708, 0.06940265729200679]}, "mutation_prompt": null}
{"id": "1033080e-2cc8-4631-812d-1c455b8a139f", "solution": "import numpy as np\nfrom joblib import Parallel, delayed\n\nclass ParallelAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30  # Adjust population size dynamically based on convergence\n        self.max_vel = 0.2\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def evaluate_fitness(self, func, pos):\n        return func(pos)\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = Parallel(n_jobs=-1)(delayed(self.evaluate_fitness)(func, pos) for pos in self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + self.c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + self.c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            # Dynamic population size adjustment based on convergence\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget)))\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ParallelAdaptiveInertiaPSO", "description": "Implementing a parallel evaluation strategy to speed up fitness evaluations and exploit multiple cores for optimization.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "An exception occurred: ModuleNotFoundError(\"No module named 'joblib'\").", "error": "ModuleNotFoundError(\"No module named 'joblib'\")", "parent_id": "490d81cb-574f-4a12-a252-f10dff82823b", "metadata": {}, "mutation_prompt": null}
{"id": "9bad30f4-fa96-4c28-9bdc-14eddece5632", "solution": "import numpy as np\n\nclass AdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30  # Adjust population size dynamically based on convergence\n        self.max_vel = 0.2\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + self.c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + self.c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            # Dynamic population size adjustment based on convergence\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget)))\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "AdaptiveInertiaPSO", "description": "Incorporate a dynamic population size adjustment strategy to enhance convergence speed.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490d81cb-574f-4a12-a252-f10dff82823b", "metadata": {"aucs": [0.5416388678033173, 0.5071481374902304, 0.5032006330462224, 0.5038023582980542, 0.49740900762452533, 0.4838587480194969, 0.5174706930251679, 0.5642386911978235, 0.5128714633500302, 0.10480344563860311, 0.08184536026253886, 0.02974842208431705, 0.07811968173913952, 0.11393552660791939, 0.07215879428075911, 0.029415353580921733, 0.016252921185567315, 0.04294998471791989, 0.08144379347622632, 0.1377502010467615, 0.0859691862360683, 0.09266065457273176, 0.14169680467767998, 0.11072609624709961, 0.09339902042257942, 0.08272952242200227, 0.10665629888697281, 0.1514577800589686, 0.07239328687885593, 0.08609939554176926, 0.1026008964585009, 0.10830778533183272, 0.044049961255761216, 0.09438894641721163, 0.08018550436051952, 0.09132049192192904, 0.8753193819791603, 0.8291437357760684, 0.8409735956112352, 0.8613428892444164, 0.8613430702249466, 0.8462371122645452, 0.8754451423416532, 0.8074771869028606, 0.8586348025911351, 0.35002601799512945, 0.33999621263564694, 0.37285479473695327, 0.36337823371563516, 0.40005843119112405, 0.38147571521153645, 0.34666043011831127, 0.327850461896506, 0.37620981228201533, 0.21162033400811497, 0.153892042102999, 0.12969264582716422, 0.27490693176705017, 0.5409517012491931, 0.21091752031267996, 0.14905158172731203, 0.14693100063618802, 0.17476394995761602, 0.20838069551274951, 0.2081714633436128, 0.1472489862851022, 0.2223805495237391, 0.16725740237377373, 0.16741790068502793, 0.1771513126967379, 0.12654277059788566, 0.16569258639112527, 0.19715908468144205, 0.17598032003916053, 0.19529145709184714, 0.1729467826204676, 0.1699496552335963, 0.12969002203479163, 0.1797068037346502, 0.16820927241852202, 0.19109171414765191, 0.06115312578082943, 0.06561451133407736, 0.07081712595718836, 0.07094624962140528, 0.035989581772017165, 0.028052588088828823, 0.009249186160976586, 9.999999999998899e-05, 0.09180650056177242, 0.11982796484541103, 0.097303703395342, 0.12931232119957126, 0.0485933416085792, 0.0221263103094963, 0.03882824916053973, 0.13341901629288055, 0.07598146019997254, 0.05229196285910798, 0.002434194225661157, 0.014381902610952402, 0.018528117458628035, 9.999999999998899e-05, 0.0030002906754794667, 0.002275446341678644, 0.002563527094988638, 0.04219915127273011, 0.059324983520431696, 0.12254115996286163, 0.10436697136314399, 0.11568701532285175, 0.060846752768504486, 0.11664495919851381, 0.07228450339948922, 0.13048429724240485, 0.11183812558060979, 0.07856382133648498, 0.45999142530703485, 0.45365523687680054, 0.4308988806506613, 0.4361263783949465, 0.4553332513883348, 0.4759216682674944, 0.4755572431395989, 0.4591996021236402, 0.44849014889365213, 0.041222344324639226, 0.05645297653562997, 0.020706007158471595, 0.07355281345518216, 0.08585543745284863, 0.08684686250408813, 0.14803206154257875, 0.0828637934160994, 0.07326347675813627, 0.14436612788176184, 0.22291465247083164, 0.18883669477050602, 0.24186615902558795, 0.21568310425187187, 0.18617564092227956, 0.33459102496511395, 0.27137716491354313, 0.21271103216697373, 0.16852381029708918, 0.2662054351611538, 0.18516625577298207, 0.2697031121467569, 0.2410185293277981, 0.2676912068643502, 0.16094035659712158, 0.3217581343699175, 0.15584933265038214, 0.19477098278754157, 0.13188959318644267, 0.13225160530114355, 0.271716647776981, 0.2026205527920374, 0.15627558292082044, 0.1280330770600956, 0.21636636533294484, 0.13638205120918812, 0.21037785716114255, 0.20078147919318157, 0.22512032725418163, 0.2354103713075365, 0.19136715901673673, 0.23977359108427887, 0.25078617306170414, 0.20629893503178998, 0.21790484022021517, 0.17944132322432993, 0.19992446976276168, 0.1834824018050556, 0.1906053466903609, 0.19210899858962882, 0.185246335417514, 0.17589129539165538, 0.2001734655673576, 0.1796006439118628, 0.12563902782785064, 0.12440281514333706, 0.1522301075567266, 0.7689524787572413, 0.20040431266650338, 0.9058760263916888, 0.10040353551946446, 0.7680828168801894, 0.7607722247943898, 0.5452561380499799, 0.15630935189196804, 0.6971299201763681, 0.20492860511716238, 0.20507569315967233, 0.6021112339940001, 0.4619001197938021, 0.5407340759709236, 0.5244910397727719, 0.18983061322241523, 0.1906874838100575, 0.19115286014403177, 0.1714621933965189, 0.1942222118287229, 0.19818416865369304, 0.19195253293288195, 0.19257153229576196, 0.18550868134502874, 0.08358729044175883, 0.07256391842017096, 0.07514344868144074, 0.09869066942842697, 0.10622863196114374, 0.08921509879201384, 0.07115487456884151, 0.08266968890692827, 0.08781012147081346]}, "mutation_prompt": null}
{"id": "b41db1be-d41c-4038-8dd5-ce9abfdfa0ba", "solution": "import numpy as np\n\nclass AdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30  # Adjust population size dynamically based on convergence\n        self.max_vel = 0.2\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + self.c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + self.c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            # Dynamic population size adjustment based on convergence\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget)))\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "AdaptiveInertiaPSO", "description": "Incorporate a dynamic population size adjustment strategy to enhance convergence speed.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490d81cb-574f-4a12-a252-f10dff82823b", "metadata": {"aucs": [0.5416388678033173, 0.5071481374902304, 0.5032006330462224, 0.5038023582980542, 0.49740900762452533, 0.4838587480194969, 0.5174706930251679, 0.5642386911978235, 0.5128714633500302, 0.10480344563860311, 0.08184536026253886, 0.02974842208431705, 0.07811968173913952, 0.11393552660791939, 0.07215879428075911, 0.029415353580921733, 0.016252921185567315, 0.04294998471791989, 0.08144379347622632, 0.1377502010467615, 0.0859691862360683, 0.09266065457273176, 0.14169680467767998, 0.11072609624709961, 0.09339902042257942, 0.08272952242200227, 0.10665629888697281, 0.1514577800589686, 0.07239328687885593, 0.08609939554176926, 0.1026008964585009, 0.10830778533183272, 0.044049961255761216, 0.09438894641721163, 0.08018550436051952, 0.09132049192192904, 0.8753193819791603, 0.8291437357760684, 0.8409735956112352, 0.8613428892444164, 0.8613430702249466, 0.8462371122645452, 0.8754451423416532, 0.8074771869028606, 0.8586348025911351, 0.35002601799512945, 0.33999621263564694, 0.37285479473695327, 0.36337823371563516, 0.40005843119112405, 0.38147571521153645, 0.34666043011831127, 0.327850461896506, 0.37620981228201533, 0.21162033400811497, 0.153892042102999, 0.12969264582716422, 0.27490693176705017, 0.5409517012491931, 0.21091752031267996, 0.14905158172731203, 0.14693100063618802, 0.17476394995761602, 0.20838069551274951, 0.2081714633436128, 0.1472489862851022, 0.2223805495237391, 0.16725740237377373, 0.16741790068502793, 0.1771513126967379, 0.12654277059788566, 0.16569258639112527, 0.19715908468144205, 0.17598032003916053, 0.19529145709184714, 0.1729467826204676, 0.1699496552335963, 0.12969002203479163, 0.1797068037346502, 0.16820927241852202, 0.19109171414765191, 0.06115312578082943, 0.06561451133407736, 0.07081712595718836, 0.07094624962140528, 0.035989581772017165, 0.028052588088828823, 0.009249186160976586, 9.999999999998899e-05, 0.09180650056177242, 0.11982796484541103, 0.097303703395342, 0.12931232119957126, 0.0485933416085792, 0.0221263103094963, 0.03882824916053973, 0.13341901629288055, 0.07598146019997254, 0.05229196285910798, 0.002434194225661157, 0.014381902610952402, 0.018528117458628035, 9.999999999998899e-05, 0.0030002906754794667, 0.002275446341678644, 0.002563527094988638, 0.04219915127273011, 0.059324983520431696, 0.12254115996286163, 0.10436697136314399, 0.11568701532285175, 0.060846752768504486, 0.11664495919851381, 0.07228450339948922, 0.13048429724240485, 0.11183812558060979, 0.07856382133648498, 0.45999142530703485, 0.45365523687680054, 0.4308988806506613, 0.4361263783949465, 0.4553332513883348, 0.4759216682674944, 0.4755572431395989, 0.4591996021236402, 0.44849014889365213, 0.041222344324639226, 0.05645297653562997, 0.020706007158471595, 0.07355281345518216, 0.08585543745284863, 0.08684686250408813, 0.14803206154257875, 0.0828637934160994, 0.07326347675813627, 0.14436612788176184, 0.22291465247083164, 0.18883669477050602, 0.24186615902558795, 0.21568310425187187, 0.18617564092227956, 0.33459102496511395, 0.27137716491354313, 0.21271103216697373, 0.16852381029708918, 0.2662054351611538, 0.18516625577298207, 0.2697031121467569, 0.2410185293277981, 0.2676912068643502, 0.16094035659712158, 0.3217581343699175, 0.15584933265038214, 0.19477098278754157, 0.13188959318644267, 0.13225160530114355, 0.271716647776981, 0.2026205527920374, 0.15627558292082044, 0.1280330770600956, 0.21636636533294484, 0.13638205120918812, 0.21037785716114255, 0.20078147919318157, 0.22512032725418163, 0.2354103713075365, 0.19136715901673673, 0.23977359108427887, 0.25078617306170414, 0.20629893503178998, 0.21790484022021517, 0.17944132322432993, 0.19992446976276168, 0.1834824018050556, 0.1906053466903609, 0.19210899858962882, 0.185246335417514, 0.17589129539165538, 0.2001734655673576, 0.1796006439118628, 0.12563902782785064, 0.12440281514333706, 0.1522301075567266, 0.7689524787572413, 0.20040431266650338, 0.9058760263916888, 0.10040353551946446, 0.7680828168801894, 0.7607722247943898, 0.5452561380499799, 0.15630935189196804, 0.6971299201763681, 0.20492860511716238, 0.20507569315967233, 0.6021112339940001, 0.4619001197938021, 0.5407340759709236, 0.5244910397727719, 0.18983061322241523, 0.1906874838100575, 0.19115286014403177, 0.1714621933965189, 0.1942222118287229, 0.19818416865369304, 0.19195253293288195, 0.19257153229576196, 0.18550868134502874, 0.08358729044175883, 0.07256391842017096, 0.07514344868144074, 0.09869066942842697, 0.10622863196114374, 0.08921509879201384, 0.07115487456884151, 0.08266968890692827, 0.08781012147081346]}, "mutation_prompt": null}
{"id": "d7ed9fa9-a11d-4eef-91a3-65ce2a4e447e", "solution": "import numpy as np\n\nclass AdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30  # Adjust population size dynamically based on convergence\n        self.max_vel = 0.2\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + self.c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + self.c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            # Dynamic population size adjustment based on convergence\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget)))\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "AdaptiveInertiaPSO", "description": "Incorporate a dynamic population size adjustment strategy to enhance convergence speed.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490d81cb-574f-4a12-a252-f10dff82823b", "metadata": {"aucs": [0.5416388678033173, 0.5071481374902304, 0.5032006330462224, 0.5038023582980542, 0.49740900762452533, 0.4838587480194969, 0.5174706930251679, 0.5642386911978235, 0.5128714633500302, 0.10480344563860311, 0.08184536026253886, 0.02974842208431705, 0.07811968173913952, 0.11393552660791939, 0.07215879428075911, 0.029415353580921733, 0.016252921185567315, 0.04294998471791989, 0.08144379347622632, 0.1377502010467615, 0.0859691862360683, 0.09266065457273176, 0.14169680467767998, 0.11072609624709961, 0.09339902042257942, 0.08272952242200227, 0.10665629888697281, 0.1514577800589686, 0.07239328687885593, 0.08609939554176926, 0.1026008964585009, 0.10830778533183272, 0.044049961255761216, 0.09438894641721163, 0.08018550436051952, 0.09132049192192904, 0.8753193819791603, 0.8291437357760684, 0.8409735956112352, 0.8613428892444164, 0.8613430702249466, 0.8462371122645452, 0.8754451423416532, 0.8074771869028606, 0.8586348025911351, 0.35002601799512945, 0.33999621263564694, 0.37285479473695327, 0.36337823371563516, 0.40005843119112405, 0.38147571521153645, 0.34666043011831127, 0.327850461896506, 0.37620981228201533, 0.21162033400811497, 0.153892042102999, 0.12969264582716422, 0.27490693176705017, 0.5409517012491931, 0.21091752031267996, 0.14905158172731203, 0.14693100063618802, 0.17476394995761602, 0.20838069551274951, 0.2081714633436128, 0.1472489862851022, 0.2223805495237391, 0.16725740237377373, 0.16741790068502793, 0.1771513126967379, 0.12654277059788566, 0.16569258639112527, 0.19715908468144205, 0.17598032003916053, 0.19529145709184714, 0.1729467826204676, 0.1699496552335963, 0.12969002203479163, 0.1797068037346502, 0.16820927241852202, 0.19109171414765191, 0.06115312578082943, 0.06561451133407736, 0.07081712595718836, 0.07094624962140528, 0.035989581772017165, 0.028052588088828823, 0.009249186160976586, 9.999999999998899e-05, 0.09180650056177242, 0.11982796484541103, 0.097303703395342, 0.12931232119957126, 0.0485933416085792, 0.0221263103094963, 0.03882824916053973, 0.13341901629288055, 0.07598146019997254, 0.05229196285910798, 0.002434194225661157, 0.014381902610952402, 0.018528117458628035, 9.999999999998899e-05, 0.0030002906754794667, 0.002275446341678644, 0.002563527094988638, 0.04219915127273011, 0.059324983520431696, 0.12254115996286163, 0.10436697136314399, 0.11568701532285175, 0.060846752768504486, 0.11664495919851381, 0.07228450339948922, 0.13048429724240485, 0.11183812558060979, 0.07856382133648498, 0.45999142530703485, 0.45365523687680054, 0.4308988806506613, 0.4361263783949465, 0.4553332513883348, 0.4759216682674944, 0.4755572431395989, 0.4591996021236402, 0.44849014889365213, 0.041222344324639226, 0.05645297653562997, 0.020706007158471595, 0.07355281345518216, 0.08585543745284863, 0.08684686250408813, 0.14803206154257875, 0.0828637934160994, 0.07326347675813627, 0.14436612788176184, 0.22291465247083164, 0.18883669477050602, 0.24186615902558795, 0.21568310425187187, 0.18617564092227956, 0.33459102496511395, 0.27137716491354313, 0.21271103216697373, 0.16852381029708918, 0.2662054351611538, 0.18516625577298207, 0.2697031121467569, 0.2410185293277981, 0.2676912068643502, 0.16094035659712158, 0.3217581343699175, 0.15584933265038214, 0.19477098278754157, 0.13188959318644267, 0.13225160530114355, 0.271716647776981, 0.2026205527920374, 0.15627558292082044, 0.1280330770600956, 0.21636636533294484, 0.13638205120918812, 0.21037785716114255, 0.20078147919318157, 0.22512032725418163, 0.2354103713075365, 0.19136715901673673, 0.23977359108427887, 0.25078617306170414, 0.20629893503178998, 0.21790484022021517, 0.17944132322432993, 0.19992446976276168, 0.1834824018050556, 0.1906053466903609, 0.19210899858962882, 0.185246335417514, 0.17589129539165538, 0.2001734655673576, 0.1796006439118628, 0.12563902782785064, 0.12440281514333706, 0.1522301075567266, 0.7689524787572413, 0.20040431266650338, 0.9058760263916888, 0.10040353551946446, 0.7680828168801894, 0.7607722247943898, 0.5452561380499799, 0.15630935189196804, 0.6971299201763681, 0.20492860511716238, 0.20507569315967233, 0.6021112339940001, 0.4619001197938021, 0.5407340759709236, 0.5244910397727719, 0.18983061322241523, 0.1906874838100575, 0.19115286014403177, 0.1714621933965189, 0.1942222118287229, 0.19818416865369304, 0.19195253293288195, 0.19257153229576196, 0.18550868134502874, 0.08358729044175883, 0.07256391842017096, 0.07514344868144074, 0.09869066942842697, 0.10622863196114374, 0.08921509879201384, 0.07115487456884151, 0.08266968890692827, 0.08781012147081346]}, "mutation_prompt": null}
{"id": "62b82626-b936-4ed7-89fb-197604361684", "solution": "import numpy as np\n\nclass MutativeInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30  # Adjust population size dynamically based on convergence\n        self.max_vel = 0.2\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.mutation_rate = 0.05  # Introduce mutation for exploration\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + self.c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + self.c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n                # Introduce mutation for exploration\n                if np.random.rand() < self.mutation_rate:\n                    self.position[i] += np.random.uniform(-0.5, 0.5, self.dim)\n                    self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            # Dynamic population size adjustment based on convergence\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget)))\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "MutativeInertiaPSO", "description": "Utilize a mutation operator to introduce diversity and exploration by randomly perturbing particle positions.", "configspace": "", "generation": 29, "fitness": 0.21837298060292185, "feedback": "The algorithm MutativeInertiaPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "490d81cb-574f-4a12-a252-f10dff82823b", "metadata": {"aucs": [0.514460477765389, 0.47844835132281816, 0.5440684557206736, 0.4567641491283453, 0.47365548352608156, 0.456874286699427, 0.4681338704588375, 0.482120491722415, 0.4751791280771458, 0.07709110515177509, 0.04795463656199772, 0.03978204962457088, 0.011311269932337331, 0.03553509368372709, 0.030477842261069976, 9.999999999998899e-05, 0.002392724180275363, 9.999999999998899e-05, 0.1123961989326121, 0.14993468970975077, 0.10492954241375607, 0.08902705168496161, 0.12640983783527804, 0.10846055335367166, 0.0734509941214212, 0.09061869187119642, 0.10068468972924716, 0.10426567628342187, 0.10345662414388412, 0.08327950938850393, 0.13879139193032952, 0.08436491737045326, 0.08782422409067003, 0.0856400184880951, 0.0709831321220612, 0.08920063382914234, 0.857268645873627, 0.8497418401550577, 0.8531485899025157, 0.8397650632751765, 0.8636396148490952, 0.8618579524819843, 0.8446967747880404, 0.80457310146076, 0.8619638476573102, 0.3228230186921167, 0.33363201066564563, 0.32107255326141404, 0.32680045880463415, 0.35070023961187347, 0.3253420306469491, 0.32404258764244764, 0.3184592983228651, 0.33501881168283776, 0.2401275214417642, 0.16731421866499496, 0.15402418768821535, 0.26310489944549376, 0.27064992491326434, 0.18449766333564876, 0.12991165837820118, 0.12874950664316442, 0.17313255165036845, 0.19158568310328827, 0.11810993397217318, 0.17846130064606436, 0.1695916370294892, 0.18710855649432256, 0.1627971380127441, 0.23940338598841882, 0.2013961345598978, 0.24014881706260216, 0.19046044776524795, 0.17393076274350838, 0.12458895006376747, 0.17045891432409466, 0.16612996176746142, 0.12903933859569117, 0.22357519660099423, 0.15964917726929995, 0.12832305165204472, 0.033530644307280144, 0.062039075429151436, 0.0310279915316527, 0.012656930586334103, 0.0035103171034521763, 0.028519166257881423, 0.053497345414259545, 9.999999999998899e-05, 0.040376230283583614, 0.14918904390559962, 0.07354785629422345, 0.10306753666376067, 0.03778971604733994, 0.03515398513455181, 0.04614087984007542, 0.12461953223313704, 0.07818177969747775, 0.05314310441529435, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00023163808815118703, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0016253750495088815, 0.1228410540051289, 0.08258848423222953, 0.09673223712420764, 0.07692725268839296, 0.11957201478475599, 0.09289307919141487, 0.09105739310816208, 0.10904383525677508, 0.10377394585592992, 0.44174124986917074, 0.42502192714043463, 0.4387492445944352, 0.4508053503562435, 0.45082291561402876, 0.41732270636757796, 0.46065221234444487, 0.43206535961105674, 0.43814845658266977, 0.08144102878864867, 0.0461145276094459, 0.048983144068411866, 0.09910895165148026, 0.09250021842575684, 0.11628157080353907, 0.10578466954242871, 0.1188568402670267, 0.08035142308376964, 0.3054626829230668, 0.2604137805830232, 0.18089396391326995, 0.183701109735263, 0.2222287805748422, 0.18300285732362742, 0.16729112591296003, 0.23105250784526177, 0.3011900438426729, 0.17898657961327213, 0.2423602617950832, 0.2117332212530043, 0.313051753954505, 0.20644407980194734, 0.2554015789553955, 0.1720950484841285, 0.3116349634943384, 0.17848567293640627, 0.20104102460738804, 0.21646711160149534, 0.18808680140809997, 0.2265999631981751, 0.17795168725236832, 0.15588058523947745, 0.16193447264882543, 0.2568047721786123, 0.14377872142864545, 0.1948843706648189, 0.20767673784585017, 0.20391138556618815, 0.19716166233145904, 0.22447160078629946, 0.2455351028326972, 0.23803998980739693, 0.2187006936629846, 0.2234959127476348, 0.16809151800798627, 0.2022682830095801, 0.2220650566188237, 0.17459642417937615, 0.20226031853667614, 0.19126453301767288, 0.16843083116460644, 0.18426994794825957, 0.19283376505604088, 0.14293755090149685, 0.12417311716364643, 0.18487920351557563, 0.7137575484018346, 0.20066753328317377, 0.7163435698567315, 0.10333425440007471, 0.1697044363456076, 0.7262008143771767, 0.6487252588571577, 0.15632179257553402, 0.6120179628855511, 0.47292261048293005, 0.2051512950132267, 0.20368115137819065, 0.3934169687517428, 0.506563448784368, 0.43238890497758153, 0.1818392103445824, 0.18653037775340142, 0.18098970103320766, 0.20234591738893237, 0.18025494388869467, 0.18971697457057968, 0.17685698209806033, 0.19150477025050872, 0.19465828392950169, 0.08910553710655988, 0.08706498463752121, 0.10819295201117207, 0.07606848849202197, 0.08847268930932528, 0.08615992666230576, 0.11363043151384777, 0.07126279143214997, 0.0889741456154376]}, "mutation_prompt": null}
{"id": "9b71bba7-437f-4e9e-b497-1af7e0ee252c", "solution": "import numpy as np\n\nclass AdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30  # Adjust population size dynamically based on convergence\n        self.max_vel = 0.2\n        self.c1 = 2.0\n        self.c2 = 2.0\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + self.c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + self.c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            # Dynamic population size adjustment based on convergence\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget)))\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "AdaptiveInertiaPSO", "description": "Incorporate a dynamic population size adjustment strategy to enhance convergence speed.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "490d81cb-574f-4a12-a252-f10dff82823b", "metadata": {"aucs": [0.5416388678033173, 0.5071481374902304, 0.5032006330462224, 0.5038023582980542, 0.49740900762452533, 0.4838587480194969, 0.5174706930251679, 0.5642386911978235, 0.5128714633500302, 0.10480344563860311, 0.08184536026253886, 0.02974842208431705, 0.07811968173913952, 0.11393552660791939, 0.07215879428075911, 0.029415353580921733, 0.016252921185567315, 0.04294998471791989, 0.08144379347622632, 0.1377502010467615, 0.0859691862360683, 0.09266065457273176, 0.14169680467767998, 0.11072609624709961, 0.09339902042257942, 0.08272952242200227, 0.10665629888697281, 0.1514577800589686, 0.07239328687885593, 0.08609939554176926, 0.1026008964585009, 0.10830778533183272, 0.044049961255761216, 0.09438894641721163, 0.08018550436051952, 0.09132049192192904, 0.8753193819791603, 0.8291437357760684, 0.8409735956112352, 0.8613428892444164, 0.8613430702249466, 0.8462371122645452, 0.8754451423416532, 0.8074771869028606, 0.8586348025911351, 0.35002601799512945, 0.33999621263564694, 0.37285479473695327, 0.36337823371563516, 0.40005843119112405, 0.38147571521153645, 0.34666043011831127, 0.327850461896506, 0.37620981228201533, 0.21162033400811497, 0.153892042102999, 0.12969264582716422, 0.27490693176705017, 0.5409517012491931, 0.21091752031267996, 0.14905158172731203, 0.14693100063618802, 0.17476394995761602, 0.20838069551274951, 0.2081714633436128, 0.1472489862851022, 0.2223805495237391, 0.16725740237377373, 0.16741790068502793, 0.1771513126967379, 0.12654277059788566, 0.16569258639112527, 0.19715908468144205, 0.17598032003916053, 0.19529145709184714, 0.1729467826204676, 0.1699496552335963, 0.12969002203479163, 0.1797068037346502, 0.16820927241852202, 0.19109171414765191, 0.06115312578082943, 0.06561451133407736, 0.07081712595718836, 0.07094624962140528, 0.035989581772017165, 0.028052588088828823, 0.009249186160976586, 9.999999999998899e-05, 0.09180650056177242, 0.11982796484541103, 0.097303703395342, 0.12931232119957126, 0.0485933416085792, 0.0221263103094963, 0.03882824916053973, 0.13341901629288055, 0.07598146019997254, 0.05229196285910798, 0.002434194225661157, 0.014381902610952402, 0.018528117458628035, 9.999999999998899e-05, 0.0030002906754794667, 0.002275446341678644, 0.002563527094988638, 0.04219915127273011, 0.059324983520431696, 0.12254115996286163, 0.10436697136314399, 0.11568701532285175, 0.060846752768504486, 0.11664495919851381, 0.07228450339948922, 0.13048429724240485, 0.11183812558060979, 0.07856382133648498, 0.45999142530703485, 0.45365523687680054, 0.4308988806506613, 0.4361263783949465, 0.4553332513883348, 0.4759216682674944, 0.4755572431395989, 0.4591996021236402, 0.44849014889365213, 0.041222344324639226, 0.05645297653562997, 0.020706007158471595, 0.07355281345518216, 0.08585543745284863, 0.08684686250408813, 0.14803206154257875, 0.0828637934160994, 0.07326347675813627, 0.14436612788176184, 0.22291465247083164, 0.18883669477050602, 0.24186615902558795, 0.21568310425187187, 0.18617564092227956, 0.33459102496511395, 0.27137716491354313, 0.21271103216697373, 0.16852381029708918, 0.2662054351611538, 0.18516625577298207, 0.2697031121467569, 0.2410185293277981, 0.2676912068643502, 0.16094035659712158, 0.3217581343699175, 0.15584933265038214, 0.19477098278754157, 0.13188959318644267, 0.13225160530114355, 0.271716647776981, 0.2026205527920374, 0.15627558292082044, 0.1280330770600956, 0.21636636533294484, 0.13638205120918812, 0.21037785716114255, 0.20078147919318157, 0.22512032725418163, 0.2354103713075365, 0.19136715901673673, 0.23977359108427887, 0.25078617306170414, 0.20629893503178998, 0.21790484022021517, 0.17944132322432993, 0.19992446976276168, 0.1834824018050556, 0.1906053466903609, 0.19210899858962882, 0.185246335417514, 0.17589129539165538, 0.2001734655673576, 0.1796006439118628, 0.12563902782785064, 0.12440281514333706, 0.1522301075567266, 0.7689524787572413, 0.20040431266650338, 0.9058760263916888, 0.10040353551946446, 0.7680828168801894, 0.7607722247943898, 0.5452561380499799, 0.15630935189196804, 0.6971299201763681, 0.20492860511716238, 0.20507569315967233, 0.6021112339940001, 0.4619001197938021, 0.5407340759709236, 0.5244910397727719, 0.18983061322241523, 0.1906874838100575, 0.19115286014403177, 0.1714621933965189, 0.1942222118287229, 0.19818416865369304, 0.19195253293288195, 0.19257153229576196, 0.18550868134502874, 0.08358729044175883, 0.07256391842017096, 0.07514344868144074, 0.09869066942842697, 0.10622863196114374, 0.08921509879201384, 0.07115487456884151, 0.08266968890692827, 0.08781012147081346]}, "mutation_prompt": null}
{"id": "7e8155fa-e389-4228-bfdd-0d0e78c0db4a", "solution": "import numpy as np\n\nclass FastAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget)))\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "FastAdaptiveInertiaPSO", "description": "Introducing dynamic adjustment of cognitive and social factors to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 31, "fitness": 0.24100028504214455, "feedback": "The algorithm FastAdaptiveInertiaPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.21.", "error": "", "parent_id": "490d81cb-574f-4a12-a252-f10dff82823b", "metadata": {"aucs": [0.5915348431045162, 0.5628271727016075, 0.5676366301827975, 0.5617523669165096, 0.5781642692931309, 0.5761386781197744, 0.636521862605507, 0.5749335816009081, 0.6146246825538757, 0.18992206119230948, 0.18125422599658847, 0.1991607715833088, 0.18456157892986824, 0.13444241121949563, 0.12326653215829209, 0.10925406206220778, 0.12216170626524503, 0.12900849130310144, 0.10378525963492358, 0.1383096881160727, 0.09103964039832912, 0.10039084877284166, 0.13705715752765024, 0.10112768332671762, 0.07882218702815369, 0.10166353898197522, 0.10371792953477832, 0.12007609998665414, 0.07473751031995268, 0.0632787599114355, 0.09284808533318634, 0.07195956231371803, 0.06153927637557699, 0.11142341504656472, 0.11253363845554976, 0.09181027941533793, 0.8710246190089889, 0.8607927434108376, 0.851588502426822, 0.8435057236351424, 0.8447741240143409, 0.8430262266047905, 0.8808304939291907, 0.8274181486806813, 0.8560980620275027, 0.3880131574420742, 0.364202119373225, 0.39108365560778435, 0.3898609175431733, 0.39366652044105577, 0.38510273028659237, 0.38772857437179675, 0.3671460826295765, 0.3847988478088413, 0.9020629301587773, 0.13381590681462185, 0.13914442940253013, 0.27381003255678715, 0.16994721250116018, 0.20538558959322295, 0.12816961771213686, 0.1492095576061221, 0.1753518951389611, 0.20122744879848609, 0.23303097052856303, 0.1512438908208753, 0.28380282727098716, 0.17668462465554036, 0.168745078709175, 0.18225540514342897, 0.12322423783502856, 0.17406143321091572, 0.12579974327451326, 0.1850037198771448, 0.20016137924423827, 0.18087323968263436, 0.19277677457067333, 0.13058831783298208, 0.1260042463953177, 0.20752123464681882, 0.16596731058466507, 0.03479856380966395, 0.006836809026453561, 0.03022666104647631, 0.046549081080251575, 0.042387184653952525, 0.006368003052177107, 0.0520898029668897, 9.999999999998899e-05, 0.10454964362572283, 0.13917422333635965, 0.10183609162377383, 0.11167755014536163, 0.07010235905754247, 0.01622136933623408, 0.03563402336116217, 0.17388615472809543, 0.09301493573872888, 0.052742673200637524, 0.05998502749417345, 0.1040912478793643, 0.03453873407866559, 0.055294584506156985, 0.06001098028662599, 0.06973479451832931, 0.054351192852051144, 0.046297695073823864, 0.04193502153703499, 0.1320300288390901, 0.09451317924125247, 0.1074376176515065, 0.08091520165074928, 0.1094542911474915, 0.09098828736720699, 0.0984265714809679, 0.07625725334455769, 0.08063073699297696, 0.4841153837188673, 0.47640575503843297, 0.48041758346513674, 0.4703431481982756, 0.45691199358196277, 0.44725859752699704, 0.48287250279196203, 0.47717819831252317, 0.47470400942792923, 0.04456830833267289, 0.054693883820336464, 0.02541042058324705, 0.09906101249562038, 0.07783659672809318, 0.12280116301981603, 0.09356918802508485, 0.11337263982917589, 0.07728500272103211, 0.17426167683115235, 0.3682202034425194, 0.20567277056272415, 0.22519618263151142, 0.27233154759361755, 0.2375497725891249, 0.21992424400372834, 0.17733067899973287, 0.1700077026618907, 0.16369751854075143, 0.2511448315912038, 0.2048718214122065, 0.28929776695921283, 0.23565687138510516, 0.34918126238398106, 0.2486054089993236, 0.3559490208665519, 0.1983409472464176, 0.16116881575678854, 0.14593652035444593, 0.14622881295473666, 0.2833848960864127, 0.20731594472291948, 0.2630056903847321, 0.19527033613854705, 0.26672699783339626, 0.14243616208222498, 0.24953631525122943, 0.17536439455068253, 0.19083746138509528, 0.25275010167463374, 0.21101471182133202, 0.21269266889362448, 0.23202732985160524, 0.2208116182731663, 0.20739055533998307, 0.1803066111356908, 0.24413334827886424, 0.185257744116196, 0.1874685386565077, 0.19236282532856352, 0.1869983089831465, 0.1758142723748911, 0.2037824393746226, 0.18373060499995575, 0.12580170574284943, 0.12452721845155157, 0.15074475223067674, 0.1709210232958951, 0.20006071102136047, 0.8477143107942231, 0.1205862612116505, 0.8397404645613562, 0.8593746505295153, 0.5737390649085252, 0.1544524729278972, 0.5886117419912112, 0.2040067993764233, 0.20543692303875483, 0.6957310672342283, 0.5562243187648366, 0.16478552836492488, 0.5783471507456496, 0.18445302424194865, 0.19121497313128943, 0.19486797770262954, 0.18951471036781453, 0.19243345666309286, 0.18670332552788182, 0.18530717590523205, 0.19882255808849614, 0.17497885664209079, 0.09561639401908706, 0.07946728613841392, 0.1096617479636145, 0.09307967616488788, 0.10158592360621277, 0.10052251867467898, 0.07613735956740963, 0.07949266610814609, 0.12669176266815518]}, "mutation_prompt": null}
{"id": "cbb576a4-e763-4f25-981e-929fdf6b5b36", "solution": "import numpy as np\n\nclass FastAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            chaos_map = np.sin(self.position + np.pi/2)  # New velocity update based on chaotic map\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * chaos_map[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget)))\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:]))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "FastAdaptiveInertiaPSO", "description": "Introducing a novel velocity update strategy based on chaotic maps to enhance exploration capabilities and accelerate convergence speed.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 44, 13, '            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 44, 13, '            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\\n'))", "parent_id": "7e8155fa-e389-4228-bfdd-0d0e78c0db4a", "metadata": {}, "mutation_prompt": null}
{"id": "eeb62ab4-6f7c-4bfa-97ad-fee08c0e4633", "solution": "import numpy as np\n\nclass FastAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget)))\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "FastAdaptiveInertiaPSO", "description": "Introducing dynamic adjustment of cognitive and social factors to enhance exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7e8155fa-e389-4228-bfdd-0d0e78c0db4a", "metadata": {"aucs": [0.5915348431045162, 0.5628271727016075, 0.5676366301827975, 0.5617523669165096, 0.5781642692931309, 0.5761386781197744, 0.636521862605507, 0.5749335816009081, 0.6146246825538757, 0.18992206119230948, 0.18125422599658847, 0.1991607715833088, 0.18456157892986824, 0.13444241121949563, 0.12326653215829209, 0.10925406206220778, 0.12216170626524503, 0.12900849130310144, 0.10378525963492358, 0.1383096881160727, 0.09103964039832912, 0.10039084877284166, 0.13705715752765024, 0.10112768332671762, 0.07882218702815369, 0.10166353898197522, 0.10371792953477832, 0.12007609998665414, 0.07473751031995268, 0.0632787599114355, 0.09284808533318634, 0.07195956231371803, 0.06153927637557699, 0.11142341504656472, 0.11253363845554976, 0.09181027941533793, 0.8710246190089889, 0.8607927434108376, 0.851588502426822, 0.8435057236351424, 0.8447741240143409, 0.8430262266047905, 0.8808304939291907, 0.8274181486806813, 0.8560980620275027, 0.3880131574420742, 0.364202119373225, 0.39108365560778435, 0.3898609175431733, 0.39366652044105577, 0.38510273028659237, 0.38772857437179675, 0.3671460826295765, 0.3847988478088413, 0.9020629301587773, 0.13381590681462185, 0.13914442940253013, 0.27381003255678715, 0.16994721250116018, 0.20538558959322295, 0.12816961771213686, 0.1492095576061221, 0.1753518951389611, 0.20122744879848609, 0.23303097052856303, 0.1512438908208753, 0.28380282727098716, 0.17668462465554036, 0.168745078709175, 0.18225540514342897, 0.12322423783502856, 0.17406143321091572, 0.12579974327451326, 0.1850037198771448, 0.20016137924423827, 0.18087323968263436, 0.19277677457067333, 0.13058831783298208, 0.1260042463953177, 0.20752123464681882, 0.16596731058466507, 0.03479856380966395, 0.006836809026453561, 0.03022666104647631, 0.046549081080251575, 0.042387184653952525, 0.006368003052177107, 0.0520898029668897, 9.999999999998899e-05, 0.10454964362572283, 0.13917422333635965, 0.10183609162377383, 0.11167755014536163, 0.07010235905754247, 0.01622136933623408, 0.03563402336116217, 0.17388615472809543, 0.09301493573872888, 0.052742673200637524, 0.05998502749417345, 0.1040912478793643, 0.03453873407866559, 0.055294584506156985, 0.06001098028662599, 0.06973479451832931, 0.054351192852051144, 0.046297695073823864, 0.04193502153703499, 0.1320300288390901, 0.09451317924125247, 0.1074376176515065, 0.08091520165074928, 0.1094542911474915, 0.09098828736720699, 0.0984265714809679, 0.07625725334455769, 0.08063073699297696, 0.4841153837188673, 0.47640575503843297, 0.48041758346513674, 0.4703431481982756, 0.45691199358196277, 0.44725859752699704, 0.48287250279196203, 0.47717819831252317, 0.47470400942792923, 0.04456830833267289, 0.054693883820336464, 0.02541042058324705, 0.09906101249562038, 0.07783659672809318, 0.12280116301981603, 0.09356918802508485, 0.11337263982917589, 0.07728500272103211, 0.17426167683115235, 0.3682202034425194, 0.20567277056272415, 0.22519618263151142, 0.27233154759361755, 0.2375497725891249, 0.21992424400372834, 0.17733067899973287, 0.1700077026618907, 0.16369751854075143, 0.2511448315912038, 0.2048718214122065, 0.28929776695921283, 0.23565687138510516, 0.34918126238398106, 0.2486054089993236, 0.3559490208665519, 0.1983409472464176, 0.16116881575678854, 0.14593652035444593, 0.14622881295473666, 0.2833848960864127, 0.20731594472291948, 0.2630056903847321, 0.19527033613854705, 0.26672699783339626, 0.14243616208222498, 0.24953631525122943, 0.17536439455068253, 0.19083746138509528, 0.25275010167463374, 0.21101471182133202, 0.21269266889362448, 0.23202732985160524, 0.2208116182731663, 0.20739055533998307, 0.1803066111356908, 0.24413334827886424, 0.185257744116196, 0.1874685386565077, 0.19236282532856352, 0.1869983089831465, 0.1758142723748911, 0.2037824393746226, 0.18373060499995575, 0.12580170574284943, 0.12452721845155157, 0.15074475223067674, 0.1709210232958951, 0.20006071102136047, 0.8477143107942231, 0.1205862612116505, 0.8397404645613562, 0.8593746505295153, 0.5737390649085252, 0.1544524729278972, 0.5886117419912112, 0.2040067993764233, 0.20543692303875483, 0.6957310672342283, 0.5562243187648366, 0.16478552836492488, 0.5783471507456496, 0.18445302424194865, 0.19121497313128943, 0.19486797770262954, 0.18951471036781453, 0.19243345666309286, 0.18670332552788182, 0.18530717590523205, 0.19882255808849614, 0.17497885664209079, 0.09561639401908706, 0.07946728613841392, 0.1096617479636145, 0.09307967616488788, 0.10158592360621277, 0.10052251867467898, 0.07613735956740963, 0.07949266610814609, 0.12669176266815518]}, "mutation_prompt": null}
{"id": "c7f3015c-ebe0-4aac-a540-5dff341b5485", "solution": "import numpy as np\n\nclass ImprovedFastAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size  # Dynamic population adjustment every 5% of the budget\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedFastAdaptiveInertiaPSO", "description": "Implementing a novel mechanism to dynamically adjust the population size based on individual performance to enhance convergence speed.", "configspace": "", "generation": 34, "fitness": 0.24444550808696755, "feedback": "The algorithm ImprovedFastAdaptiveInertiaPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.22.", "error": "", "parent_id": "7e8155fa-e389-4228-bfdd-0d0e78c0db4a", "metadata": {"aucs": [0.6183145227542862, 0.5847094749095562, 0.5894513974052874, 0.599572421802951, 0.6036219179588009, 0.5705760180566251, 0.5694757834283644, 0.5900611322870065, 0.6243963505687219, 0.16340610490241603, 0.14183844908599297, 0.13357792510835664, 0.13888020869847462, 0.12436442931826319, 0.124450448717363, 0.16385012559854895, 0.11800277494085953, 0.14883543654402243, 0.08688219675049491, 0.09650721277373486, 0.08535864802154991, 0.09286732596033975, 0.1259789233363039, 0.15811269977447429, 0.08195631412765747, 0.10371317153419768, 0.1406971750054139, 0.10358554372747608, 0.06555569834748531, 0.08937345539070085, 0.08281853514498294, 0.11970184625633296, 0.07897797399606898, 0.08850405712975695, 0.0802626459002771, 0.05232197676756245, 0.882490201386976, 0.8434426152598338, 0.8272843842842847, 0.8402854816103794, 0.8609327067052169, 0.8483117457179643, 0.8804849865570135, 0.8320198377447583, 0.8472749895150827, 0.4031690373531027, 0.39319431005949623, 0.39486570500621965, 0.4333700400696453, 0.39057040441387203, 0.37551391904690967, 0.36089735044633175, 0.3536134315257967, 0.3897712331078306, 0.20663566256025034, 0.13337005282293235, 0.11620365103172514, 0.20954173324640868, 0.16723150077064652, 0.2645792656760426, 0.15073293239690388, 0.1496039273804467, 0.17477509545405678, 0.2058970381629025, 0.24283689091147964, 0.18388348845089697, 0.16982987495045287, 0.19897160259559454, 0.1779131390378319, 0.20460779633121962, 0.13039520731961307, 0.18189232696682078, 0.18262304616307512, 0.1783307956723018, 0.22814944217526667, 0.12916847321036962, 0.17776329804585, 0.1942067246179512, 0.18094368257256532, 0.1964177469017867, 0.12580297908773042, 0.11549224100926514, 0.0006301766826354305, 9.999999999998899e-05, 0.07166920861298809, 0.04116882207940087, 0.039505316184880734, 0.008801684259546305, 9.999999999998899e-05, 0.023804283702438256, 0.09824652969385739, 0.08808744378417088, 0.11689099987010887, 0.05465333575242626, 0.016760046731113865, 0.04054936932502462, 0.17523909038080743, 0.09411761946427177, 0.046925571657189025, 0.07846020941526533, 0.15961502740187083, 0.06636605766326265, 0.049347893352781336, 0.05235921513302233, 0.00874976061175059, 0.06889622738605683, 0.06826133355466246, 0.04585134149209957, 0.18973913688861666, 0.07461190396366768, 0.07529644333701402, 0.0740038054666855, 0.11181257472344042, 0.05186353376636266, 0.13022106228420638, 0.1657416964212689, 0.08053452978715181, 0.48952823403585266, 0.5026871930270679, 0.4770841558687725, 0.4702820033458147, 0.4826940373518972, 0.47994141101706844, 0.521233429945716, 0.46316207806489584, 0.49698525379511815, 0.04257790959154495, 0.05551049276650133, 0.041443000543253894, 0.05931434347959297, 0.077776819714791, 0.08707205678119423, 0.09821759038992717, 0.09428164961191521, 0.062197010906851924, 0.2511227832572187, 0.3383499375928075, 0.19022446084500666, 0.29165865886642206, 0.2502770576354547, 0.13940379511743417, 0.22470905560556764, 0.1795363848530538, 0.32194128766732955, 0.15617609667774923, 0.2611436682418887, 0.19325664526518727, 0.27853115509362747, 0.23475873181931706, 0.2593455548829695, 0.2190892092262955, 0.3281300366284221, 0.1661780977569024, 0.19758777440394437, 0.13556673281131248, 0.18671595832588317, 0.2630746155915419, 0.2153087293068413, 0.16527121042609083, 0.17851964314682078, 0.2396413508597951, 0.11906574065358022, 0.21775716483107732, 0.18434507387257348, 0.20376518728752424, 0.2465290184328215, 0.2046697452465539, 0.2507425871700828, 0.23716004143264746, 0.21147895680033257, 0.19951633434550986, 0.17749623800593128, 0.24512708696687446, 0.19567288444400088, 0.17253567813073445, 0.19230355510402397, 0.18148710950053393, 0.18254871324927946, 0.2046056380965351, 0.1860098329613995, 0.1259810270324635, 0.12265238446728677, 0.1314171503513617, 0.8741348045652921, 0.20050513518248292, 0.8755720307382442, 0.11747613032121407, 0.8512833767840615, 0.865999592290469, 0.5474963450006157, 0.15590258995344086, 0.7610822098154718, 0.7405220942462274, 0.2053630001446557, 0.7119078671832175, 0.09324536521270055, 0.69442608128418, 0.5948344004000115, 0.17756433907757674, 0.1920052832335175, 0.1837159651286222, 0.19013323523560643, 0.19406485898177928, 0.18696385641462543, 0.2218979898736565, 0.18290085895597108, 0.18542892986246673, 0.0999842208134778, 0.07994945919100194, 0.0846191163073432, 0.08379420927922221, 0.09513077481017085, 0.08551823392854818, 0.10234817481630143, 0.0800360245100965, 0.07921517452308469]}, "mutation_prompt": null}
{"id": "ca5fb629-2ed9-4f81-a245-aae1d7712ad1", "solution": "import numpy as np\n\nclass ImprovedFastAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size  # Dynamic population adjustment every 5% of the budget\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedFastAdaptiveInertiaPSO", "description": "Implementing a novel mechanism to dynamically adjust the population size based on individual performance to enhance convergence speed.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c7f3015c-ebe0-4aac-a540-5dff341b5485", "metadata": {"aucs": [0.6183145227542862, 0.5847094749095562, 0.5894513974052874, 0.599572421802951, 0.6036219179588009, 0.5705760180566251, 0.5694757834283644, 0.5900611322870065, 0.6243963505687219, 0.16340610490241603, 0.14183844908599297, 0.13357792510835664, 0.13888020869847462, 0.12436442931826319, 0.124450448717363, 0.16385012559854895, 0.11800277494085953, 0.14883543654402243, 0.08688219675049491, 0.09650721277373486, 0.08535864802154991, 0.09286732596033975, 0.1259789233363039, 0.15811269977447429, 0.08195631412765747, 0.10371317153419768, 0.1406971750054139, 0.10358554372747608, 0.06555569834748531, 0.08937345539070085, 0.08281853514498294, 0.11970184625633296, 0.07897797399606898, 0.08850405712975695, 0.0802626459002771, 0.05232197676756245, 0.882490201386976, 0.8434426152598338, 0.8272843842842847, 0.8402854816103794, 0.8609327067052169, 0.8483117457179643, 0.8804849865570135, 0.8320198377447583, 0.8472749895150827, 0.4031690373531027, 0.39319431005949623, 0.39486570500621965, 0.4333700400696453, 0.39057040441387203, 0.37551391904690967, 0.36089735044633175, 0.3536134315257967, 0.3897712331078306, 0.20663566256025034, 0.13337005282293235, 0.11620365103172514, 0.20954173324640868, 0.16723150077064652, 0.2645792656760426, 0.15073293239690388, 0.1496039273804467, 0.17477509545405678, 0.2058970381629025, 0.24283689091147964, 0.18388348845089697, 0.16982987495045287, 0.19897160259559454, 0.1779131390378319, 0.20460779633121962, 0.13039520731961307, 0.18189232696682078, 0.18262304616307512, 0.1783307956723018, 0.22814944217526667, 0.12916847321036962, 0.17776329804585, 0.1942067246179512, 0.18094368257256532, 0.1964177469017867, 0.12580297908773042, 0.11549224100926514, 0.0006301766826354305, 9.999999999998899e-05, 0.07166920861298809, 0.04116882207940087, 0.039505316184880734, 0.008801684259546305, 9.999999999998899e-05, 0.023804283702438256, 0.09824652969385739, 0.08808744378417088, 0.11689099987010887, 0.05465333575242626, 0.016760046731113865, 0.04054936932502462, 0.17523909038080743, 0.09411761946427177, 0.046925571657189025, 0.07846020941526533, 0.15961502740187083, 0.06636605766326265, 0.049347893352781336, 0.05235921513302233, 0.00874976061175059, 0.06889622738605683, 0.06826133355466246, 0.04585134149209957, 0.18973913688861666, 0.07461190396366768, 0.07529644333701402, 0.0740038054666855, 0.11181257472344042, 0.05186353376636266, 0.13022106228420638, 0.1657416964212689, 0.08053452978715181, 0.48952823403585266, 0.5026871930270679, 0.4770841558687725, 0.4702820033458147, 0.4826940373518972, 0.47994141101706844, 0.521233429945716, 0.46316207806489584, 0.49698525379511815, 0.04257790959154495, 0.05551049276650133, 0.041443000543253894, 0.05931434347959297, 0.077776819714791, 0.08707205678119423, 0.09821759038992717, 0.09428164961191521, 0.062197010906851924, 0.2511227832572187, 0.3383499375928075, 0.19022446084500666, 0.29165865886642206, 0.2502770576354547, 0.13940379511743417, 0.22470905560556764, 0.1795363848530538, 0.32194128766732955, 0.15617609667774923, 0.2611436682418887, 0.19325664526518727, 0.27853115509362747, 0.23475873181931706, 0.2593455548829695, 0.2190892092262955, 0.3281300366284221, 0.1661780977569024, 0.19758777440394437, 0.13556673281131248, 0.18671595832588317, 0.2630746155915419, 0.2153087293068413, 0.16527121042609083, 0.17851964314682078, 0.2396413508597951, 0.11906574065358022, 0.21775716483107732, 0.18434507387257348, 0.20376518728752424, 0.2465290184328215, 0.2046697452465539, 0.2507425871700828, 0.23716004143264746, 0.21147895680033257, 0.19951633434550986, 0.17749623800593128, 0.24512708696687446, 0.19567288444400088, 0.17253567813073445, 0.19230355510402397, 0.18148710950053393, 0.18254871324927946, 0.2046056380965351, 0.1860098329613995, 0.1259810270324635, 0.12265238446728677, 0.1314171503513617, 0.8741348045652921, 0.20050513518248292, 0.8755720307382442, 0.11747613032121407, 0.8512833767840615, 0.865999592290469, 0.5474963450006157, 0.15590258995344086, 0.7610822098154718, 0.7405220942462274, 0.2053630001446557, 0.7119078671832175, 0.09324536521270055, 0.69442608128418, 0.5948344004000115, 0.17756433907757674, 0.1920052832335175, 0.1837159651286222, 0.19013323523560643, 0.19406485898177928, 0.18696385641462543, 0.2218979898736565, 0.18290085895597108, 0.18542892986246673, 0.0999842208134778, 0.07994945919100194, 0.0846191163073432, 0.08379420927922221, 0.09513077481017085, 0.08551823392854818, 0.10234817481630143, 0.0800360245100965, 0.07921517452308469]}, "mutation_prompt": null}
{"id": "25eb12ed-f6f3-4429-87d2-c41289804b69", "solution": "import numpy as np\n\nclass ImprovedFastAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size  # Dynamic population adjustment every 5% of the budget\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedFastAdaptiveInertiaPSO", "description": "Implementing a novel mechanism to dynamically adjust the population size based on individual performance to enhance convergence speed.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c7f3015c-ebe0-4aac-a540-5dff341b5485", "metadata": {"aucs": [0.6183145227542862, 0.5847094749095562, 0.5894513974052874, 0.599572421802951, 0.6036219179588009, 0.5705760180566251, 0.5694757834283644, 0.5900611322870065, 0.6243963505687219, 0.16340610490241603, 0.14183844908599297, 0.13357792510835664, 0.13888020869847462, 0.12436442931826319, 0.124450448717363, 0.16385012559854895, 0.11800277494085953, 0.14883543654402243, 0.08688219675049491, 0.09650721277373486, 0.08535864802154991, 0.09286732596033975, 0.1259789233363039, 0.15811269977447429, 0.08195631412765747, 0.10371317153419768, 0.1406971750054139, 0.10358554372747608, 0.06555569834748531, 0.08937345539070085, 0.08281853514498294, 0.11970184625633296, 0.07897797399606898, 0.08850405712975695, 0.0802626459002771, 0.05232197676756245, 0.882490201386976, 0.8434426152598338, 0.8272843842842847, 0.8402854816103794, 0.8609327067052169, 0.8483117457179643, 0.8804849865570135, 0.8320198377447583, 0.8472749895150827, 0.4031690373531027, 0.39319431005949623, 0.39486570500621965, 0.4333700400696453, 0.39057040441387203, 0.37551391904690967, 0.36089735044633175, 0.3536134315257967, 0.3897712331078306, 0.20663566256025034, 0.13337005282293235, 0.11620365103172514, 0.20954173324640868, 0.16723150077064652, 0.2645792656760426, 0.15073293239690388, 0.1496039273804467, 0.17477509545405678, 0.2058970381629025, 0.24283689091147964, 0.18388348845089697, 0.16982987495045287, 0.19897160259559454, 0.1779131390378319, 0.20460779633121962, 0.13039520731961307, 0.18189232696682078, 0.18262304616307512, 0.1783307956723018, 0.22814944217526667, 0.12916847321036962, 0.17776329804585, 0.1942067246179512, 0.18094368257256532, 0.1964177469017867, 0.12580297908773042, 0.11549224100926514, 0.0006301766826354305, 9.999999999998899e-05, 0.07166920861298809, 0.04116882207940087, 0.039505316184880734, 0.008801684259546305, 9.999999999998899e-05, 0.023804283702438256, 0.09824652969385739, 0.08808744378417088, 0.11689099987010887, 0.05465333575242626, 0.016760046731113865, 0.04054936932502462, 0.17523909038080743, 0.09411761946427177, 0.046925571657189025, 0.07846020941526533, 0.15961502740187083, 0.06636605766326265, 0.049347893352781336, 0.05235921513302233, 0.00874976061175059, 0.06889622738605683, 0.06826133355466246, 0.04585134149209957, 0.18973913688861666, 0.07461190396366768, 0.07529644333701402, 0.0740038054666855, 0.11181257472344042, 0.05186353376636266, 0.13022106228420638, 0.1657416964212689, 0.08053452978715181, 0.48952823403585266, 0.5026871930270679, 0.4770841558687725, 0.4702820033458147, 0.4826940373518972, 0.47994141101706844, 0.521233429945716, 0.46316207806489584, 0.49698525379511815, 0.04257790959154495, 0.05551049276650133, 0.041443000543253894, 0.05931434347959297, 0.077776819714791, 0.08707205678119423, 0.09821759038992717, 0.09428164961191521, 0.062197010906851924, 0.2511227832572187, 0.3383499375928075, 0.19022446084500666, 0.29165865886642206, 0.2502770576354547, 0.13940379511743417, 0.22470905560556764, 0.1795363848530538, 0.32194128766732955, 0.15617609667774923, 0.2611436682418887, 0.19325664526518727, 0.27853115509362747, 0.23475873181931706, 0.2593455548829695, 0.2190892092262955, 0.3281300366284221, 0.1661780977569024, 0.19758777440394437, 0.13556673281131248, 0.18671595832588317, 0.2630746155915419, 0.2153087293068413, 0.16527121042609083, 0.17851964314682078, 0.2396413508597951, 0.11906574065358022, 0.21775716483107732, 0.18434507387257348, 0.20376518728752424, 0.2465290184328215, 0.2046697452465539, 0.2507425871700828, 0.23716004143264746, 0.21147895680033257, 0.19951633434550986, 0.17749623800593128, 0.24512708696687446, 0.19567288444400088, 0.17253567813073445, 0.19230355510402397, 0.18148710950053393, 0.18254871324927946, 0.2046056380965351, 0.1860098329613995, 0.1259810270324635, 0.12265238446728677, 0.1314171503513617, 0.8741348045652921, 0.20050513518248292, 0.8755720307382442, 0.11747613032121407, 0.8512833767840615, 0.865999592290469, 0.5474963450006157, 0.15590258995344086, 0.7610822098154718, 0.7405220942462274, 0.2053630001446557, 0.7119078671832175, 0.09324536521270055, 0.69442608128418, 0.5948344004000115, 0.17756433907757674, 0.1920052832335175, 0.1837159651286222, 0.19013323523560643, 0.19406485898177928, 0.18696385641462543, 0.2218979898736565, 0.18290085895597108, 0.18542892986246673, 0.0999842208134778, 0.07994945919100194, 0.0846191163073432, 0.08379420927922221, 0.09513077481017085, 0.08551823392854818, 0.10234817481630143, 0.0800360245100965, 0.07921517452308469]}, "mutation_prompt": null}
{"id": "fbbe336c-c543-499a-b5f9-8cb812bb030e", "solution": "import numpy as np\n\nclass ImprovedFastAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            acceleration_factor = 2.0 - 2.0 * _ / self.budget\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = acceleration_factor * (self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i]))\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedFastAdaptiveInertiaPSO", "description": "Implementing a novel acceleration mechanism to adjust the velocity update based on individual and global best positions to enhance convergence speed.", "configspace": "", "generation": 37, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'c1' is not defined\").", "error": "NameError(\"name 'c1' is not defined\")", "parent_id": "c7f3015c-ebe0-4aac-a540-5dff341b5485", "metadata": {}, "mutation_prompt": null}
{"id": "22e2deaf-59f4-4eaf-82c3-8d2c5be7e758", "solution": "import numpy as np\n\nclass ImprovedFastAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            vel_scaling_factor = np.mean(np.abs(self.global_best_pos)) if self.global_best_pos is not None else 1.0\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * vel_scaling_factor * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size  # Dynamic population adjustment every 5% of the budget\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedFastAdaptiveInertiaPSO", "description": "Implementing a dynamic strategy to adapt the velocity scaling factor based on the magnitude of the global best position to accelerate convergence speed.", "configspace": "", "generation": 38, "fitness": 0.20725727487123222, "feedback": "The algorithm ImprovedFastAdaptiveInertiaPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.18.", "error": "", "parent_id": "c7f3015c-ebe0-4aac-a540-5dff341b5485", "metadata": {"aucs": [0.41787856446485017, 0.4281842066347423, 0.43604695534338567, 0.36984930221057877, 0.3481052778330468, 0.374949404246148, 0.3632115913949536, 0.4129258493799477, 0.38080052799730646, 0.00726310225595117, 0.02731551093217388, 0.0012651218371766415, 0.3245972191549077, 0.16181483291760546, 0.32630679937551055, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0907541749119104, 0.11386472461033537, 0.07716332776424373, 0.10305584166807025, 0.11861548769394048, 0.1049301619295866, 0.09835087321972824, 0.0884923113377949, 0.10672199637130975, 0.11394797784739163, 0.08159216521574586, 0.07186591091026728, 0.08645839024104518, 0.08206668695478714, 0.07548936949198015, 0.08596007311383402, 0.08533172913769138, 0.07315101220181841, 0.7965888620644843, 0.8747509904908555, 0.8795971321067909, 0.7929910580058923, 0.8982688462819385, 0.8048617012234678, 0.8699450005035411, 0.8239789816119361, 0.8861269595536606, 0.2624865611368894, 0.24477131210969805, 0.2764429563451083, 0.2891509875320789, 0.2618556832036184, 0.26194989616766784, 0.24967333805584735, 0.27214213224017325, 0.2439644705775943, 0.34073908300090705, 0.14730754160954862, 0.13453229100997466, 0.33031957114937527, 0.2686577189244209, 0.26141629123397514, 0.15015666218857915, 0.17331893662576636, 0.1395053106929257, 0.22187329349347273, 0.11775517405348546, 0.13841036349664593, 0.16324602326514592, 0.119320666773158, 0.16287169806289492, 0.18197374787026588, 0.09873218034224052, 0.16544837927615952, 0.1280196791230339, 0.12095637343249566, 0.18509107404205538, 0.13657739939188196, 0.1487796821805235, 0.32058166074546035, 0.16389262451408482, 0.10321638197395022, 0.15665455218701996, 0.02485996032381721, 0.01725440264756073, 0.006119494885781229, 0.00440603794082528, 0.03341542777697504, 0.03524584656093188, 0.0084435427045082, 9.999999999998899e-05, 0.21726451306999295, 0.10071019792128222, 0.11796585513960234, 0.11436239402630743, 0.07462883751296101, 0.00857445777330812, 0.0451146335203475, 0.1736093988228138, 0.09433614990150363, 0.08519515210865813, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08519613033306084, 0.07978265551496766, 0.10678766357927139, 0.05442895744124521, 0.08485906690664213, 0.06597486847405709, 0.08463729881434134, 0.08823702707365721, 0.09881540100771946, 0.38455822427842246, 0.3913223570199309, 0.3919990837992092, 0.3708978630582844, 0.3767806025370377, 0.3591833899271425, 0.4140232909273762, 0.39154132424542, 0.3987151505196106, 0.07300087843653147, 0.07674526602563869, 0.08599199118328649, 0.0991120872577248, 0.09304192049513826, 0.08652325895791113, 0.08191584908846561, 0.13095723798996262, 0.08334867969941773, 0.15163724549028845, 0.15706263262663978, 0.19038463784616155, 0.22420329298932595, 0.20999041777813565, 0.1983436865369015, 0.1642109629026034, 0.14920340498742513, 0.13943730044938252, 0.18540077497687746, 0.2673631650663538, 0.20103505238994201, 0.22801081601911533, 0.2539548843857007, 0.23799925018295698, 0.2203288517682136, 0.26292340288347826, 0.18827261624823555, 0.18313268065290444, 0.22576092511416568, 0.15857806522921436, 0.24701766935333125, 0.16920830416322497, 0.178938394189333, 0.19745466666859157, 0.21305259846618285, 0.144657175283066, 0.3100918089360083, 0.18411557510976517, 0.21903847699260248, 0.23958756012799798, 0.2252935042933294, 0.19063260382497937, 0.20240631772405226, 0.20544091294178402, 0.21362986453512822, 0.18040007218111298, 0.20815057038696505, 0.17961483761940222, 0.20018527120572327, 0.18687526365906137, 0.17834688920552777, 0.18483011768696245, 0.21711575200230804, 0.19881917487121203, 0.1249067901636558, 0.1235282363836997, 0.15020291595676483, 0.582761093770011, 0.19849758085270297, 0.5873993728633177, 0.1161204905158656, 0.5587448076212294, 0.6035496044402284, 0.5621185191143849, 0.1545662133341249, 0.6250639770037746, 0.20391408093299745, 0.20432889654895703, 0.4803301400059622, 0.09283601681068299, 0.40422444687446424, 0.4057088378267866, 0.18898909320954138, 0.18147851523856984, 0.18605206516857875, 0.1906432116070247, 0.21639456832572723, 0.1828284211588116, 0.19309881813232432, 0.17745390266987904, 0.1806444984275073, 0.09326516155145748, 0.07938211579140209, 0.08946336577569802, 0.09369487801816212, 0.09784619575524589, 0.08776818378369244, 0.0791254764484336, 0.0732594446980851, 0.11683244975562868]}, "mutation_prompt": null}
{"id": "541d09ef-94bb-4041-9d14-d42fdfd7d976", "solution": "import numpy as np\n\nclass ImprovedFastAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size  # Dynamic population adjustment every 5% of the budget\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedFastAdaptiveInertiaPSO", "description": "Implementing a novel mechanism to dynamically adjust the population size based on individual performance to enhance convergence speed.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c7f3015c-ebe0-4aac-a540-5dff341b5485", "metadata": {"aucs": [0.6183145227542862, 0.5847094749095562, 0.5894513974052874, 0.599572421802951, 0.6036219179588009, 0.5705760180566251, 0.5694757834283644, 0.5900611322870065, 0.6243963505687219, 0.16340610490241603, 0.14183844908599297, 0.13357792510835664, 0.13888020869847462, 0.12436442931826319, 0.124450448717363, 0.16385012559854895, 0.11800277494085953, 0.14883543654402243, 0.08688219675049491, 0.09650721277373486, 0.08535864802154991, 0.09286732596033975, 0.1259789233363039, 0.15811269977447429, 0.08195631412765747, 0.10371317153419768, 0.1406971750054139, 0.10358554372747608, 0.06555569834748531, 0.08937345539070085, 0.08281853514498294, 0.11970184625633296, 0.07897797399606898, 0.08850405712975695, 0.0802626459002771, 0.05232197676756245, 0.882490201386976, 0.8434426152598338, 0.8272843842842847, 0.8402854816103794, 0.8609327067052169, 0.8483117457179643, 0.8804849865570135, 0.8320198377447583, 0.8472749895150827, 0.4031690373531027, 0.39319431005949623, 0.39486570500621965, 0.4333700400696453, 0.39057040441387203, 0.37551391904690967, 0.36089735044633175, 0.3536134315257967, 0.3897712331078306, 0.20663566256025034, 0.13337005282293235, 0.11620365103172514, 0.20954173324640868, 0.16723150077064652, 0.2645792656760426, 0.15073293239690388, 0.1496039273804467, 0.17477509545405678, 0.2058970381629025, 0.24283689091147964, 0.18388348845089697, 0.16982987495045287, 0.19897160259559454, 0.1779131390378319, 0.20460779633121962, 0.13039520731961307, 0.18189232696682078, 0.18262304616307512, 0.1783307956723018, 0.22814944217526667, 0.12916847321036962, 0.17776329804585, 0.1942067246179512, 0.18094368257256532, 0.1964177469017867, 0.12580297908773042, 0.11549224100926514, 0.0006301766826354305, 9.999999999998899e-05, 0.07166920861298809, 0.04116882207940087, 0.039505316184880734, 0.008801684259546305, 9.999999999998899e-05, 0.023804283702438256, 0.09824652969385739, 0.08808744378417088, 0.11689099987010887, 0.05465333575242626, 0.016760046731113865, 0.04054936932502462, 0.17523909038080743, 0.09411761946427177, 0.046925571657189025, 0.07846020941526533, 0.15961502740187083, 0.06636605766326265, 0.049347893352781336, 0.05235921513302233, 0.00874976061175059, 0.06889622738605683, 0.06826133355466246, 0.04585134149209957, 0.18973913688861666, 0.07461190396366768, 0.07529644333701402, 0.0740038054666855, 0.11181257472344042, 0.05186353376636266, 0.13022106228420638, 0.1657416964212689, 0.08053452978715181, 0.48952823403585266, 0.5026871930270679, 0.4770841558687725, 0.4702820033458147, 0.4826940373518972, 0.47994141101706844, 0.521233429945716, 0.46316207806489584, 0.49698525379511815, 0.04257790959154495, 0.05551049276650133, 0.041443000543253894, 0.05931434347959297, 0.077776819714791, 0.08707205678119423, 0.09821759038992717, 0.09428164961191521, 0.062197010906851924, 0.2511227832572187, 0.3383499375928075, 0.19022446084500666, 0.29165865886642206, 0.2502770576354547, 0.13940379511743417, 0.22470905560556764, 0.1795363848530538, 0.32194128766732955, 0.15617609667774923, 0.2611436682418887, 0.19325664526518727, 0.27853115509362747, 0.23475873181931706, 0.2593455548829695, 0.2190892092262955, 0.3281300366284221, 0.1661780977569024, 0.19758777440394437, 0.13556673281131248, 0.18671595832588317, 0.2630746155915419, 0.2153087293068413, 0.16527121042609083, 0.17851964314682078, 0.2396413508597951, 0.11906574065358022, 0.21775716483107732, 0.18434507387257348, 0.20376518728752424, 0.2465290184328215, 0.2046697452465539, 0.2507425871700828, 0.23716004143264746, 0.21147895680033257, 0.19951633434550986, 0.17749623800593128, 0.24512708696687446, 0.19567288444400088, 0.17253567813073445, 0.19230355510402397, 0.18148710950053393, 0.18254871324927946, 0.2046056380965351, 0.1860098329613995, 0.1259810270324635, 0.12265238446728677, 0.1314171503513617, 0.8741348045652921, 0.20050513518248292, 0.8755720307382442, 0.11747613032121407, 0.8512833767840615, 0.865999592290469, 0.5474963450006157, 0.15590258995344086, 0.7610822098154718, 0.7405220942462274, 0.2053630001446557, 0.7119078671832175, 0.09324536521270055, 0.69442608128418, 0.5948344004000115, 0.17756433907757674, 0.1920052832335175, 0.1837159651286222, 0.19013323523560643, 0.19406485898177928, 0.18696385641462543, 0.2218979898736565, 0.18290085895597108, 0.18542892986246673, 0.0999842208134778, 0.07994945919100194, 0.0846191163073432, 0.08379420927922221, 0.09513077481017085, 0.08551823392854818, 0.10234817481630143, 0.0800360245100965, 0.07921517452308469]}, "mutation_prompt": null}
{"id": "5cc9ddc9-2c73-4a99-870a-5d1c43220510", "solution": "import numpy as np\n\nclass ImprovedFastAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size  # Dynamic population adjustment every 5% of the budget\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedFastAdaptiveInertiaPSO", "description": "Implementing a novel mechanism to dynamically adjust the population size based on individual performance to enhance convergence speed.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c7f3015c-ebe0-4aac-a540-5dff341b5485", "metadata": {"aucs": [0.6183145227542862, 0.5847094749095562, 0.5894513974052874, 0.599572421802951, 0.6036219179588009, 0.5705760180566251, 0.5694757834283644, 0.5900611322870065, 0.6243963505687219, 0.16340610490241603, 0.14183844908599297, 0.13357792510835664, 0.13888020869847462, 0.12436442931826319, 0.124450448717363, 0.16385012559854895, 0.11800277494085953, 0.14883543654402243, 0.08688219675049491, 0.09650721277373486, 0.08535864802154991, 0.09286732596033975, 0.1259789233363039, 0.15811269977447429, 0.08195631412765747, 0.10371317153419768, 0.1406971750054139, 0.10358554372747608, 0.06555569834748531, 0.08937345539070085, 0.08281853514498294, 0.11970184625633296, 0.07897797399606898, 0.08850405712975695, 0.0802626459002771, 0.05232197676756245, 0.882490201386976, 0.8434426152598338, 0.8272843842842847, 0.8402854816103794, 0.8609327067052169, 0.8483117457179643, 0.8804849865570135, 0.8320198377447583, 0.8472749895150827, 0.4031690373531027, 0.39319431005949623, 0.39486570500621965, 0.4333700400696453, 0.39057040441387203, 0.37551391904690967, 0.36089735044633175, 0.3536134315257967, 0.3897712331078306, 0.20663566256025034, 0.13337005282293235, 0.11620365103172514, 0.20954173324640868, 0.16723150077064652, 0.2645792656760426, 0.15073293239690388, 0.1496039273804467, 0.17477509545405678, 0.2058970381629025, 0.24283689091147964, 0.18388348845089697, 0.16982987495045287, 0.19897160259559454, 0.1779131390378319, 0.20460779633121962, 0.13039520731961307, 0.18189232696682078, 0.18262304616307512, 0.1783307956723018, 0.22814944217526667, 0.12916847321036962, 0.17776329804585, 0.1942067246179512, 0.18094368257256532, 0.1964177469017867, 0.12580297908773042, 0.11549224100926514, 0.0006301766826354305, 9.999999999998899e-05, 0.07166920861298809, 0.04116882207940087, 0.039505316184880734, 0.008801684259546305, 9.999999999998899e-05, 0.023804283702438256, 0.09824652969385739, 0.08808744378417088, 0.11689099987010887, 0.05465333575242626, 0.016760046731113865, 0.04054936932502462, 0.17523909038080743, 0.09411761946427177, 0.046925571657189025, 0.07846020941526533, 0.15961502740187083, 0.06636605766326265, 0.049347893352781336, 0.05235921513302233, 0.00874976061175059, 0.06889622738605683, 0.06826133355466246, 0.04585134149209957, 0.18973913688861666, 0.07461190396366768, 0.07529644333701402, 0.0740038054666855, 0.11181257472344042, 0.05186353376636266, 0.13022106228420638, 0.1657416964212689, 0.08053452978715181, 0.48952823403585266, 0.5026871930270679, 0.4770841558687725, 0.4702820033458147, 0.4826940373518972, 0.47994141101706844, 0.521233429945716, 0.46316207806489584, 0.49698525379511815, 0.04257790959154495, 0.05551049276650133, 0.041443000543253894, 0.05931434347959297, 0.077776819714791, 0.08707205678119423, 0.09821759038992717, 0.09428164961191521, 0.062197010906851924, 0.2511227832572187, 0.3383499375928075, 0.19022446084500666, 0.29165865886642206, 0.2502770576354547, 0.13940379511743417, 0.22470905560556764, 0.1795363848530538, 0.32194128766732955, 0.15617609667774923, 0.2611436682418887, 0.19325664526518727, 0.27853115509362747, 0.23475873181931706, 0.2593455548829695, 0.2190892092262955, 0.3281300366284221, 0.1661780977569024, 0.19758777440394437, 0.13556673281131248, 0.18671595832588317, 0.2630746155915419, 0.2153087293068413, 0.16527121042609083, 0.17851964314682078, 0.2396413508597951, 0.11906574065358022, 0.21775716483107732, 0.18434507387257348, 0.20376518728752424, 0.2465290184328215, 0.2046697452465539, 0.2507425871700828, 0.23716004143264746, 0.21147895680033257, 0.19951633434550986, 0.17749623800593128, 0.24512708696687446, 0.19567288444400088, 0.17253567813073445, 0.19230355510402397, 0.18148710950053393, 0.18254871324927946, 0.2046056380965351, 0.1860098329613995, 0.1259810270324635, 0.12265238446728677, 0.1314171503513617, 0.8741348045652921, 0.20050513518248292, 0.8755720307382442, 0.11747613032121407, 0.8512833767840615, 0.865999592290469, 0.5474963450006157, 0.15590258995344086, 0.7610822098154718, 0.7405220942462274, 0.2053630001446557, 0.7119078671832175, 0.09324536521270055, 0.69442608128418, 0.5948344004000115, 0.17756433907757674, 0.1920052832335175, 0.1837159651286222, 0.19013323523560643, 0.19406485898177928, 0.18696385641462543, 0.2218979898736565, 0.18290085895597108, 0.18542892986246673, 0.0999842208134778, 0.07994945919100194, 0.0846191163073432, 0.08379420927922221, 0.09513077481017085, 0.08551823392854818, 0.10234817481630143, 0.0800360245100965, 0.07921517452308469]}, "mutation_prompt": null}
{"id": "fb505b2d-9173-48d7-86f8-c870d59b11be", "solution": "import numpy as np\n\nclass ImprovedFastAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size  # Dynamic population adjustment every 5% of the budget\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedFastAdaptiveInertiaPSO", "description": "Implementing a novel mechanism to dynamically adjust the population size based on individual performance to enhance convergence speed.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c7f3015c-ebe0-4aac-a540-5dff341b5485", "metadata": {"aucs": [0.6183145227542862, 0.5847094749095562, 0.5894513974052874, 0.599572421802951, 0.6036219179588009, 0.5705760180566251, 0.5694757834283644, 0.5900611322870065, 0.6243963505687219, 0.16340610490241603, 0.14183844908599297, 0.13357792510835664, 0.13888020869847462, 0.12436442931826319, 0.124450448717363, 0.16385012559854895, 0.11800277494085953, 0.14883543654402243, 0.08688219675049491, 0.09650721277373486, 0.08535864802154991, 0.09286732596033975, 0.1259789233363039, 0.15811269977447429, 0.08195631412765747, 0.10371317153419768, 0.1406971750054139, 0.10358554372747608, 0.06555569834748531, 0.08937345539070085, 0.08281853514498294, 0.11970184625633296, 0.07897797399606898, 0.08850405712975695, 0.0802626459002771, 0.05232197676756245, 0.882490201386976, 0.8434426152598338, 0.8272843842842847, 0.8402854816103794, 0.8609327067052169, 0.8483117457179643, 0.8804849865570135, 0.8320198377447583, 0.8472749895150827, 0.4031690373531027, 0.39319431005949623, 0.39486570500621965, 0.4333700400696453, 0.39057040441387203, 0.37551391904690967, 0.36089735044633175, 0.3536134315257967, 0.3897712331078306, 0.20663566256025034, 0.13337005282293235, 0.11620365103172514, 0.20954173324640868, 0.16723150077064652, 0.2645792656760426, 0.15073293239690388, 0.1496039273804467, 0.17477509545405678, 0.2058970381629025, 0.24283689091147964, 0.18388348845089697, 0.16982987495045287, 0.19897160259559454, 0.1779131390378319, 0.20460779633121962, 0.13039520731961307, 0.18189232696682078, 0.18262304616307512, 0.1783307956723018, 0.22814944217526667, 0.12916847321036962, 0.17776329804585, 0.1942067246179512, 0.18094368257256532, 0.1964177469017867, 0.12580297908773042, 0.11549224100926514, 0.0006301766826354305, 9.999999999998899e-05, 0.07166920861298809, 0.04116882207940087, 0.039505316184880734, 0.008801684259546305, 9.999999999998899e-05, 0.023804283702438256, 0.09824652969385739, 0.08808744378417088, 0.11689099987010887, 0.05465333575242626, 0.016760046731113865, 0.04054936932502462, 0.17523909038080743, 0.09411761946427177, 0.046925571657189025, 0.07846020941526533, 0.15961502740187083, 0.06636605766326265, 0.049347893352781336, 0.05235921513302233, 0.00874976061175059, 0.06889622738605683, 0.06826133355466246, 0.04585134149209957, 0.18973913688861666, 0.07461190396366768, 0.07529644333701402, 0.0740038054666855, 0.11181257472344042, 0.05186353376636266, 0.13022106228420638, 0.1657416964212689, 0.08053452978715181, 0.48952823403585266, 0.5026871930270679, 0.4770841558687725, 0.4702820033458147, 0.4826940373518972, 0.47994141101706844, 0.521233429945716, 0.46316207806489584, 0.49698525379511815, 0.04257790959154495, 0.05551049276650133, 0.041443000543253894, 0.05931434347959297, 0.077776819714791, 0.08707205678119423, 0.09821759038992717, 0.09428164961191521, 0.062197010906851924, 0.2511227832572187, 0.3383499375928075, 0.19022446084500666, 0.29165865886642206, 0.2502770576354547, 0.13940379511743417, 0.22470905560556764, 0.1795363848530538, 0.32194128766732955, 0.15617609667774923, 0.2611436682418887, 0.19325664526518727, 0.27853115509362747, 0.23475873181931706, 0.2593455548829695, 0.2190892092262955, 0.3281300366284221, 0.1661780977569024, 0.19758777440394437, 0.13556673281131248, 0.18671595832588317, 0.2630746155915419, 0.2153087293068413, 0.16527121042609083, 0.17851964314682078, 0.2396413508597951, 0.11906574065358022, 0.21775716483107732, 0.18434507387257348, 0.20376518728752424, 0.2465290184328215, 0.2046697452465539, 0.2507425871700828, 0.23716004143264746, 0.21147895680033257, 0.19951633434550986, 0.17749623800593128, 0.24512708696687446, 0.19567288444400088, 0.17253567813073445, 0.19230355510402397, 0.18148710950053393, 0.18254871324927946, 0.2046056380965351, 0.1860098329613995, 0.1259810270324635, 0.12265238446728677, 0.1314171503513617, 0.8741348045652921, 0.20050513518248292, 0.8755720307382442, 0.11747613032121407, 0.8512833767840615, 0.865999592290469, 0.5474963450006157, 0.15590258995344086, 0.7610822098154718, 0.7405220942462274, 0.2053630001446557, 0.7119078671832175, 0.09324536521270055, 0.69442608128418, 0.5948344004000115, 0.17756433907757674, 0.1920052832335175, 0.1837159651286222, 0.19013323523560643, 0.19406485898177928, 0.18696385641462543, 0.2218979898736565, 0.18290085895597108, 0.18542892986246673, 0.0999842208134778, 0.07994945919100194, 0.0846191163073432, 0.08379420927922221, 0.09513077481017085, 0.08551823392854818, 0.10234817481630143, 0.0800360245100965, 0.07921517452308469]}, "mutation_prompt": null}
{"id": "bce2a436-4390-4d86-88e8-df201fd07d64", "solution": "import numpy as np\n\nclass ImprovedFastAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size  # Dynamic population adjustment every 5% of the budget\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedFastAdaptiveInertiaPSO", "description": "Implementing a novel mechanism to dynamically adjust the population size based on individual performance to enhance convergence speed.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c7f3015c-ebe0-4aac-a540-5dff341b5485", "metadata": {"aucs": [0.6183145227542862, 0.5847094749095562, 0.5894513974052874, 0.599572421802951, 0.6036219179588009, 0.5705760180566251, 0.5694757834283644, 0.5900611322870065, 0.6243963505687219, 0.16340610490241603, 0.14183844908599297, 0.13357792510835664, 0.13888020869847462, 0.12436442931826319, 0.124450448717363, 0.16385012559854895, 0.11800277494085953, 0.14883543654402243, 0.08688219675049491, 0.09650721277373486, 0.08535864802154991, 0.09286732596033975, 0.1259789233363039, 0.15811269977447429, 0.08195631412765747, 0.10371317153419768, 0.1406971750054139, 0.10358554372747608, 0.06555569834748531, 0.08937345539070085, 0.08281853514498294, 0.11970184625633296, 0.07897797399606898, 0.08850405712975695, 0.0802626459002771, 0.05232197676756245, 0.882490201386976, 0.8434426152598338, 0.8272843842842847, 0.8402854816103794, 0.8609327067052169, 0.8483117457179643, 0.8804849865570135, 0.8320198377447583, 0.8472749895150827, 0.4031690373531027, 0.39319431005949623, 0.39486570500621965, 0.4333700400696453, 0.39057040441387203, 0.37551391904690967, 0.36089735044633175, 0.3536134315257967, 0.3897712331078306, 0.20663566256025034, 0.13337005282293235, 0.11620365103172514, 0.20954173324640868, 0.16723150077064652, 0.2645792656760426, 0.15073293239690388, 0.1496039273804467, 0.17477509545405678, 0.2058970381629025, 0.24283689091147964, 0.18388348845089697, 0.16982987495045287, 0.19897160259559454, 0.1779131390378319, 0.20460779633121962, 0.13039520731961307, 0.18189232696682078, 0.18262304616307512, 0.1783307956723018, 0.22814944217526667, 0.12916847321036962, 0.17776329804585, 0.1942067246179512, 0.18094368257256532, 0.1964177469017867, 0.12580297908773042, 0.11549224100926514, 0.0006301766826354305, 9.999999999998899e-05, 0.07166920861298809, 0.04116882207940087, 0.039505316184880734, 0.008801684259546305, 9.999999999998899e-05, 0.023804283702438256, 0.09824652969385739, 0.08808744378417088, 0.11689099987010887, 0.05465333575242626, 0.016760046731113865, 0.04054936932502462, 0.17523909038080743, 0.09411761946427177, 0.046925571657189025, 0.07846020941526533, 0.15961502740187083, 0.06636605766326265, 0.049347893352781336, 0.05235921513302233, 0.00874976061175059, 0.06889622738605683, 0.06826133355466246, 0.04585134149209957, 0.18973913688861666, 0.07461190396366768, 0.07529644333701402, 0.0740038054666855, 0.11181257472344042, 0.05186353376636266, 0.13022106228420638, 0.1657416964212689, 0.08053452978715181, 0.48952823403585266, 0.5026871930270679, 0.4770841558687725, 0.4702820033458147, 0.4826940373518972, 0.47994141101706844, 0.521233429945716, 0.46316207806489584, 0.49698525379511815, 0.04257790959154495, 0.05551049276650133, 0.041443000543253894, 0.05931434347959297, 0.077776819714791, 0.08707205678119423, 0.09821759038992717, 0.09428164961191521, 0.062197010906851924, 0.2511227832572187, 0.3383499375928075, 0.19022446084500666, 0.29165865886642206, 0.2502770576354547, 0.13940379511743417, 0.22470905560556764, 0.1795363848530538, 0.32194128766732955, 0.15617609667774923, 0.2611436682418887, 0.19325664526518727, 0.27853115509362747, 0.23475873181931706, 0.2593455548829695, 0.2190892092262955, 0.3281300366284221, 0.1661780977569024, 0.19758777440394437, 0.13556673281131248, 0.18671595832588317, 0.2630746155915419, 0.2153087293068413, 0.16527121042609083, 0.17851964314682078, 0.2396413508597951, 0.11906574065358022, 0.21775716483107732, 0.18434507387257348, 0.20376518728752424, 0.2465290184328215, 0.2046697452465539, 0.2507425871700828, 0.23716004143264746, 0.21147895680033257, 0.19951633434550986, 0.17749623800593128, 0.24512708696687446, 0.19567288444400088, 0.17253567813073445, 0.19230355510402397, 0.18148710950053393, 0.18254871324927946, 0.2046056380965351, 0.1860098329613995, 0.1259810270324635, 0.12265238446728677, 0.1314171503513617, 0.8741348045652921, 0.20050513518248292, 0.8755720307382442, 0.11747613032121407, 0.8512833767840615, 0.865999592290469, 0.5474963450006157, 0.15590258995344086, 0.7610822098154718, 0.7405220942462274, 0.2053630001446557, 0.7119078671832175, 0.09324536521270055, 0.69442608128418, 0.5948344004000115, 0.17756433907757674, 0.1920052832335175, 0.1837159651286222, 0.19013323523560643, 0.19406485898177928, 0.18696385641462543, 0.2218979898736565, 0.18290085895597108, 0.18542892986246673, 0.0999842208134778, 0.07994945919100194, 0.0846191163073432, 0.08379420927922221, 0.09513077481017085, 0.08551823392854818, 0.10234817481630143, 0.0800360245100965, 0.07921517452308469]}, "mutation_prompt": null}
{"id": "872b7b07-b8f4-4f89-a712-a38361f2f7f3", "solution": "import numpy as np\n\nclass ImprovedFastAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size  # Dynamic population adjustment every 5% of the budget\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedFastAdaptiveInertiaPSO", "description": "Implementing a novel mechanism to dynamically adjust the population size based on individual performance to enhance convergence speed.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c7f3015c-ebe0-4aac-a540-5dff341b5485", "metadata": {"aucs": [0.6183145227542862, 0.5847094749095562, 0.5894513974052874, 0.599572421802951, 0.6036219179588009, 0.5705760180566251, 0.5694757834283644, 0.5900611322870065, 0.6243963505687219, 0.16340610490241603, 0.14183844908599297, 0.13357792510835664, 0.13888020869847462, 0.12436442931826319, 0.124450448717363, 0.16385012559854895, 0.11800277494085953, 0.14883543654402243, 0.08688219675049491, 0.09650721277373486, 0.08535864802154991, 0.09286732596033975, 0.1259789233363039, 0.15811269977447429, 0.08195631412765747, 0.10371317153419768, 0.1406971750054139, 0.10358554372747608, 0.06555569834748531, 0.08937345539070085, 0.08281853514498294, 0.11970184625633296, 0.07897797399606898, 0.08850405712975695, 0.0802626459002771, 0.05232197676756245, 0.882490201386976, 0.8434426152598338, 0.8272843842842847, 0.8402854816103794, 0.8609327067052169, 0.8483117457179643, 0.8804849865570135, 0.8320198377447583, 0.8472749895150827, 0.4031690373531027, 0.39319431005949623, 0.39486570500621965, 0.4333700400696453, 0.39057040441387203, 0.37551391904690967, 0.36089735044633175, 0.3536134315257967, 0.3897712331078306, 0.20663566256025034, 0.13337005282293235, 0.11620365103172514, 0.20954173324640868, 0.16723150077064652, 0.2645792656760426, 0.15073293239690388, 0.1496039273804467, 0.17477509545405678, 0.2058970381629025, 0.24283689091147964, 0.18388348845089697, 0.16982987495045287, 0.19897160259559454, 0.1779131390378319, 0.20460779633121962, 0.13039520731961307, 0.18189232696682078, 0.18262304616307512, 0.1783307956723018, 0.22814944217526667, 0.12916847321036962, 0.17776329804585, 0.1942067246179512, 0.18094368257256532, 0.1964177469017867, 0.12580297908773042, 0.11549224100926514, 0.0006301766826354305, 9.999999999998899e-05, 0.07166920861298809, 0.04116882207940087, 0.039505316184880734, 0.008801684259546305, 9.999999999998899e-05, 0.023804283702438256, 0.09824652969385739, 0.08808744378417088, 0.11689099987010887, 0.05465333575242626, 0.016760046731113865, 0.04054936932502462, 0.17523909038080743, 0.09411761946427177, 0.046925571657189025, 0.07846020941526533, 0.15961502740187083, 0.06636605766326265, 0.049347893352781336, 0.05235921513302233, 0.00874976061175059, 0.06889622738605683, 0.06826133355466246, 0.04585134149209957, 0.18973913688861666, 0.07461190396366768, 0.07529644333701402, 0.0740038054666855, 0.11181257472344042, 0.05186353376636266, 0.13022106228420638, 0.1657416964212689, 0.08053452978715181, 0.48952823403585266, 0.5026871930270679, 0.4770841558687725, 0.4702820033458147, 0.4826940373518972, 0.47994141101706844, 0.521233429945716, 0.46316207806489584, 0.49698525379511815, 0.04257790959154495, 0.05551049276650133, 0.041443000543253894, 0.05931434347959297, 0.077776819714791, 0.08707205678119423, 0.09821759038992717, 0.09428164961191521, 0.062197010906851924, 0.2511227832572187, 0.3383499375928075, 0.19022446084500666, 0.29165865886642206, 0.2502770576354547, 0.13940379511743417, 0.22470905560556764, 0.1795363848530538, 0.32194128766732955, 0.15617609667774923, 0.2611436682418887, 0.19325664526518727, 0.27853115509362747, 0.23475873181931706, 0.2593455548829695, 0.2190892092262955, 0.3281300366284221, 0.1661780977569024, 0.19758777440394437, 0.13556673281131248, 0.18671595832588317, 0.2630746155915419, 0.2153087293068413, 0.16527121042609083, 0.17851964314682078, 0.2396413508597951, 0.11906574065358022, 0.21775716483107732, 0.18434507387257348, 0.20376518728752424, 0.2465290184328215, 0.2046697452465539, 0.2507425871700828, 0.23716004143264746, 0.21147895680033257, 0.19951633434550986, 0.17749623800593128, 0.24512708696687446, 0.19567288444400088, 0.17253567813073445, 0.19230355510402397, 0.18148710950053393, 0.18254871324927946, 0.2046056380965351, 0.1860098329613995, 0.1259810270324635, 0.12265238446728677, 0.1314171503513617, 0.8741348045652921, 0.20050513518248292, 0.8755720307382442, 0.11747613032121407, 0.8512833767840615, 0.865999592290469, 0.5474963450006157, 0.15590258995344086, 0.7610822098154718, 0.7405220942462274, 0.2053630001446557, 0.7119078671832175, 0.09324536521270055, 0.69442608128418, 0.5948344004000115, 0.17756433907757674, 0.1920052832335175, 0.1837159651286222, 0.19013323523560643, 0.19406485898177928, 0.18696385641462543, 0.2218979898736565, 0.18290085895597108, 0.18542892986246673, 0.0999842208134778, 0.07994945919100194, 0.0846191163073432, 0.08379420927922221, 0.09513077481017085, 0.08551823392854818, 0.10234817481630143, 0.0800360245100965, 0.07921517452308469]}, "mutation_prompt": null}
{"id": "3415e368-000a-4708-bdc8-c9daf48eef81", "solution": "import numpy as np\n\nclass ImprovedFastAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size  # Dynamic population adjustment every 5% of the budget\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedFastAdaptiveInertiaPSO", "description": "Implementing a novel mechanism to dynamically adjust the population size based on individual performance to enhance convergence speed.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c7f3015c-ebe0-4aac-a540-5dff341b5485", "metadata": {"aucs": [0.6183145227542862, 0.5847094749095562, 0.5894513974052874, 0.599572421802951, 0.6036219179588009, 0.5705760180566251, 0.5694757834283644, 0.5900611322870065, 0.6243963505687219, 0.16340610490241603, 0.14183844908599297, 0.13357792510835664, 0.13888020869847462, 0.12436442931826319, 0.124450448717363, 0.16385012559854895, 0.11800277494085953, 0.14883543654402243, 0.08688219675049491, 0.09650721277373486, 0.08535864802154991, 0.09286732596033975, 0.1259789233363039, 0.15811269977447429, 0.08195631412765747, 0.10371317153419768, 0.1406971750054139, 0.10358554372747608, 0.06555569834748531, 0.08937345539070085, 0.08281853514498294, 0.11970184625633296, 0.07897797399606898, 0.08850405712975695, 0.0802626459002771, 0.05232197676756245, 0.882490201386976, 0.8434426152598338, 0.8272843842842847, 0.8402854816103794, 0.8609327067052169, 0.8483117457179643, 0.8804849865570135, 0.8320198377447583, 0.8472749895150827, 0.4031690373531027, 0.39319431005949623, 0.39486570500621965, 0.4333700400696453, 0.39057040441387203, 0.37551391904690967, 0.36089735044633175, 0.3536134315257967, 0.3897712331078306, 0.20663566256025034, 0.13337005282293235, 0.11620365103172514, 0.20954173324640868, 0.16723150077064652, 0.2645792656760426, 0.15073293239690388, 0.1496039273804467, 0.17477509545405678, 0.2058970381629025, 0.24283689091147964, 0.18388348845089697, 0.16982987495045287, 0.19897160259559454, 0.1779131390378319, 0.20460779633121962, 0.13039520731961307, 0.18189232696682078, 0.18262304616307512, 0.1783307956723018, 0.22814944217526667, 0.12916847321036962, 0.17776329804585, 0.1942067246179512, 0.18094368257256532, 0.1964177469017867, 0.12580297908773042, 0.11549224100926514, 0.0006301766826354305, 9.999999999998899e-05, 0.07166920861298809, 0.04116882207940087, 0.039505316184880734, 0.008801684259546305, 9.999999999998899e-05, 0.023804283702438256, 0.09824652969385739, 0.08808744378417088, 0.11689099987010887, 0.05465333575242626, 0.016760046731113865, 0.04054936932502462, 0.17523909038080743, 0.09411761946427177, 0.046925571657189025, 0.07846020941526533, 0.15961502740187083, 0.06636605766326265, 0.049347893352781336, 0.05235921513302233, 0.00874976061175059, 0.06889622738605683, 0.06826133355466246, 0.04585134149209957, 0.18973913688861666, 0.07461190396366768, 0.07529644333701402, 0.0740038054666855, 0.11181257472344042, 0.05186353376636266, 0.13022106228420638, 0.1657416964212689, 0.08053452978715181, 0.48952823403585266, 0.5026871930270679, 0.4770841558687725, 0.4702820033458147, 0.4826940373518972, 0.47994141101706844, 0.521233429945716, 0.46316207806489584, 0.49698525379511815, 0.04257790959154495, 0.05551049276650133, 0.041443000543253894, 0.05931434347959297, 0.077776819714791, 0.08707205678119423, 0.09821759038992717, 0.09428164961191521, 0.062197010906851924, 0.2511227832572187, 0.3383499375928075, 0.19022446084500666, 0.29165865886642206, 0.2502770576354547, 0.13940379511743417, 0.22470905560556764, 0.1795363848530538, 0.32194128766732955, 0.15617609667774923, 0.2611436682418887, 0.19325664526518727, 0.27853115509362747, 0.23475873181931706, 0.2593455548829695, 0.2190892092262955, 0.3281300366284221, 0.1661780977569024, 0.19758777440394437, 0.13556673281131248, 0.18671595832588317, 0.2630746155915419, 0.2153087293068413, 0.16527121042609083, 0.17851964314682078, 0.2396413508597951, 0.11906574065358022, 0.21775716483107732, 0.18434507387257348, 0.20376518728752424, 0.2465290184328215, 0.2046697452465539, 0.2507425871700828, 0.23716004143264746, 0.21147895680033257, 0.19951633434550986, 0.17749623800593128, 0.24512708696687446, 0.19567288444400088, 0.17253567813073445, 0.19230355510402397, 0.18148710950053393, 0.18254871324927946, 0.2046056380965351, 0.1860098329613995, 0.1259810270324635, 0.12265238446728677, 0.1314171503513617, 0.8741348045652921, 0.20050513518248292, 0.8755720307382442, 0.11747613032121407, 0.8512833767840615, 0.865999592290469, 0.5474963450006157, 0.15590258995344086, 0.7610822098154718, 0.7405220942462274, 0.2053630001446557, 0.7119078671832175, 0.09324536521270055, 0.69442608128418, 0.5948344004000115, 0.17756433907757674, 0.1920052832335175, 0.1837159651286222, 0.19013323523560643, 0.19406485898177928, 0.18696385641462543, 0.2218979898736565, 0.18290085895597108, 0.18542892986246673, 0.0999842208134778, 0.07994945919100194, 0.0846191163073432, 0.08379420927922221, 0.09513077481017085, 0.08551823392854818, 0.10234817481630143, 0.0800360245100965, 0.07921517452308469]}, "mutation_prompt": null}
{"id": "2cb5951f-831c-419b-9b03-1817e12cb38b", "solution": "import numpy as np\n\nclass ImprovedFastAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n                if np.random.rand() < 0.1:\n                    self.position[i] = np.random.uniform(-5.0, 5.0, self.dim)  # Introduce random mutation with 10% probability\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedFastAdaptiveInertiaPSO", "description": "Implementing a novel mutation operation to explore new search spaces and escape local optima.", "configspace": "", "generation": 45, "fitness": 0.19080826247236793, "feedback": "The algorithm ImprovedFastAdaptiveInertiaPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.15.", "error": "", "parent_id": "c7f3015c-ebe0-4aac-a540-5dff341b5485", "metadata": {"aucs": [0.4565436133485947, 0.45766472669536584, 0.4628289107099386, 0.3730933204405038, 0.3830303842413817, 0.41650069731313577, 0.4111463395371675, 0.4156319625230639, 0.4268013896875744, 0.046134456573821314, 0.011164359825974635, 0.013288906499634878, 0.04436490670779858, 0.022782610518926827, 0.004702284132291568, 0.009616329997235495, 0.00019563787481979844, 0.0028651851014322993, 0.09979717976734281, 0.09121371208975437, 0.10763520746664201, 0.08093143656300383, 0.10812144251900646, 0.11901991004076007, 0.09143721294767637, 0.1033176470728635, 0.11605057089745863, 0.07806023595346945, 0.08381907135370548, 0.08578369641664307, 0.10127333945592365, 0.07867845483305214, 0.10862144460054479, 0.08218036809393747, 0.09386387578415656, 0.0944695170196721, 0.18262740632719987, 0.4757870222388284, 0.8128811555408975, 0.46739259654785326, 0.533720695275226, 0.6770126486346362, 0.5200811627474338, 0.4303393600419493, 0.8306280955239326, 0.23333941545811976, 0.18706437170391654, 0.2758932178188719, 0.24581599404745869, 0.23195367692574254, 0.21475773012938404, 0.2412674346755319, 0.19271661179946908, 0.16621332399580702, 0.22723702341289198, 0.1930029215804927, 0.1402525204494316, 0.26119178357331774, 0.24024768272136654, 0.18229184494443473, 0.16979506861564309, 0.1766073799405382, 0.16449648656989102, 0.1661426035460487, 0.12366428089820347, 0.16814132412579275, 0.2474753117047228, 0.16196288003779769, 0.15528854795697078, 0.14090187865954718, 0.1356272980008174, 0.15174189350358447, 0.18967201617533802, 0.12379395967652895, 0.11679867425779178, 0.12148160887200465, 0.14307708770377414, 0.12064362505028037, 0.1959015123089053, 0.1412973173519716, 0.17331993540317037, 0.0019381194213589081, 9.999999999998899e-05, 9.999999999998899e-05, 0.006906934246153518, 0.00015127963344607753, 9.999999999998899e-05, 0.004043111069959915, 0.030517396979418132, 9.999999999998899e-05, 0.1627357788265522, 0.08485775407240637, 0.11471016958447067, 0.09131399525570827, 0.07615166984803123, 0.08301787400708782, 0.1301085611973678, 0.0937575036703644, 0.11416361183208623, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07865400036904846, 0.06693791895446466, 0.05379663219700037, 0.09929961242489294, 0.08679471508435221, 0.09747028449103523, 0.05963060078510518, 0.07363581480103132, 0.0675264379809567, 0.393294230271099, 0.37328836015317035, 0.39265481044707284, 0.36835986515689634, 0.3638585046652102, 0.377891048782118, 0.38953011197816934, 0.36732195458656003, 0.4065450282315044, 0.08390569666051684, 0.06329162054468596, 0.06511584057323849, 0.08049463755577257, 0.08953332157628557, 0.06639794028163504, 0.0898159127452427, 0.09188481385274994, 0.07207087068108031, 0.1994138120567822, 0.1638587809557912, 0.16505193880354474, 0.14674724507009118, 0.1855391387340043, 0.17937192082295517, 0.17296966409533143, 0.21303399731477723, 0.22409383695856355, 0.24488026298765053, 0.21666621762240124, 0.1743431447956334, 0.259868647015157, 0.18840355401508713, 0.22526793528025102, 0.1850602248592672, 0.25186377616297606, 0.22329210596826865, 0.15849033737349838, 0.19860357682420704, 0.13803922852269224, 0.18280849378100106, 0.20477483653468542, 0.11511334806483864, 0.16896548221522556, 0.20570309305350554, 0.17160004028629683, 0.20364196463464335, 0.20129815920347705, 0.21008076052190294, 0.19738903310635547, 0.23461345419825397, 0.20380240974354258, 0.20370225261070396, 0.20403868421562432, 0.2010308042292127, 0.1709061501869703, 0.22262768636764385, 0.19367467222215518, 0.1892998203691757, 0.19960279478652854, 0.167516812691216, 0.1740884474617571, 0.1847051367027721, 0.17479041019850572, 0.18359362622784425, 0.24061191546956084, 0.4042547753019008, 0.6073282137270246, 0.5646817166248637, 0.4976910225915907, 0.5057796030793454, 0.5986025045554848, 0.5629004913713633, 0.4093959534491499, 0.4109146371159793, 0.4793767019413878, 0.20507895135112075, 0.24905626325954255, 0.3576305072988817, 0.25271157941372246, 0.32750586803610515, 0.3097890737659549, 0.17693477396692592, 0.1786380748557611, 0.20228811158788296, 0.1913825244546138, 0.1862492267347966, 0.1816920916433874, 0.18455167821200502, 0.18271201097732992, 0.19899496821276585, 0.08073993784757694, 0.07998475673486338, 0.08244466659535898, 0.0804091704514418, 0.07297013621273052, 0.07709192773222806, 0.0940488452860393, 0.07525924193893274, 0.07180397582798304]}, "mutation_prompt": null}
{"id": "092f11a9-29c5-4bf1-a580-cf747598fd13", "solution": "import numpy as np\n\nclass ImprovedFastAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size  # Dynamic population adjustment every 5% of the budget\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedFastAdaptiveInertiaPSO", "description": "Implementing a novel mechanism to dynamically adjust the population size based on individual performance to enhance convergence speed.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c7f3015c-ebe0-4aac-a540-5dff341b5485", "metadata": {"aucs": [0.6183145227542862, 0.5847094749095562, 0.5894513974052874, 0.599572421802951, 0.6036219179588009, 0.5705760180566251, 0.5694757834283644, 0.5900611322870065, 0.6243963505687219, 0.16340610490241603, 0.14183844908599297, 0.13357792510835664, 0.13888020869847462, 0.12436442931826319, 0.124450448717363, 0.16385012559854895, 0.11800277494085953, 0.14883543654402243, 0.08688219675049491, 0.09650721277373486, 0.08535864802154991, 0.09286732596033975, 0.1259789233363039, 0.15811269977447429, 0.08195631412765747, 0.10371317153419768, 0.1406971750054139, 0.10358554372747608, 0.06555569834748531, 0.08937345539070085, 0.08281853514498294, 0.11970184625633296, 0.07897797399606898, 0.08850405712975695, 0.0802626459002771, 0.05232197676756245, 0.882490201386976, 0.8434426152598338, 0.8272843842842847, 0.8402854816103794, 0.8609327067052169, 0.8483117457179643, 0.8804849865570135, 0.8320198377447583, 0.8472749895150827, 0.4031690373531027, 0.39319431005949623, 0.39486570500621965, 0.4333700400696453, 0.39057040441387203, 0.37551391904690967, 0.36089735044633175, 0.3536134315257967, 0.3897712331078306, 0.20663566256025034, 0.13337005282293235, 0.11620365103172514, 0.20954173324640868, 0.16723150077064652, 0.2645792656760426, 0.15073293239690388, 0.1496039273804467, 0.17477509545405678, 0.2058970381629025, 0.24283689091147964, 0.18388348845089697, 0.16982987495045287, 0.19897160259559454, 0.1779131390378319, 0.20460779633121962, 0.13039520731961307, 0.18189232696682078, 0.18262304616307512, 0.1783307956723018, 0.22814944217526667, 0.12916847321036962, 0.17776329804585, 0.1942067246179512, 0.18094368257256532, 0.1964177469017867, 0.12580297908773042, 0.11549224100926514, 0.0006301766826354305, 9.999999999998899e-05, 0.07166920861298809, 0.04116882207940087, 0.039505316184880734, 0.008801684259546305, 9.999999999998899e-05, 0.023804283702438256, 0.09824652969385739, 0.08808744378417088, 0.11689099987010887, 0.05465333575242626, 0.016760046731113865, 0.04054936932502462, 0.17523909038080743, 0.09411761946427177, 0.046925571657189025, 0.07846020941526533, 0.15961502740187083, 0.06636605766326265, 0.049347893352781336, 0.05235921513302233, 0.00874976061175059, 0.06889622738605683, 0.06826133355466246, 0.04585134149209957, 0.18973913688861666, 0.07461190396366768, 0.07529644333701402, 0.0740038054666855, 0.11181257472344042, 0.05186353376636266, 0.13022106228420638, 0.1657416964212689, 0.08053452978715181, 0.48952823403585266, 0.5026871930270679, 0.4770841558687725, 0.4702820033458147, 0.4826940373518972, 0.47994141101706844, 0.521233429945716, 0.46316207806489584, 0.49698525379511815, 0.04257790959154495, 0.05551049276650133, 0.041443000543253894, 0.05931434347959297, 0.077776819714791, 0.08707205678119423, 0.09821759038992717, 0.09428164961191521, 0.062197010906851924, 0.2511227832572187, 0.3383499375928075, 0.19022446084500666, 0.29165865886642206, 0.2502770576354547, 0.13940379511743417, 0.22470905560556764, 0.1795363848530538, 0.32194128766732955, 0.15617609667774923, 0.2611436682418887, 0.19325664526518727, 0.27853115509362747, 0.23475873181931706, 0.2593455548829695, 0.2190892092262955, 0.3281300366284221, 0.1661780977569024, 0.19758777440394437, 0.13556673281131248, 0.18671595832588317, 0.2630746155915419, 0.2153087293068413, 0.16527121042609083, 0.17851964314682078, 0.2396413508597951, 0.11906574065358022, 0.21775716483107732, 0.18434507387257348, 0.20376518728752424, 0.2465290184328215, 0.2046697452465539, 0.2507425871700828, 0.23716004143264746, 0.21147895680033257, 0.19951633434550986, 0.17749623800593128, 0.24512708696687446, 0.19567288444400088, 0.17253567813073445, 0.19230355510402397, 0.18148710950053393, 0.18254871324927946, 0.2046056380965351, 0.1860098329613995, 0.1259810270324635, 0.12265238446728677, 0.1314171503513617, 0.8741348045652921, 0.20050513518248292, 0.8755720307382442, 0.11747613032121407, 0.8512833767840615, 0.865999592290469, 0.5474963450006157, 0.15590258995344086, 0.7610822098154718, 0.7405220942462274, 0.2053630001446557, 0.7119078671832175, 0.09324536521270055, 0.69442608128418, 0.5948344004000115, 0.17756433907757674, 0.1920052832335175, 0.1837159651286222, 0.19013323523560643, 0.19406485898177928, 0.18696385641462543, 0.2218979898736565, 0.18290085895597108, 0.18542892986246673, 0.0999842208134778, 0.07994945919100194, 0.0846191163073432, 0.08379420927922221, 0.09513077481017085, 0.08551823392854818, 0.10234817481630143, 0.0800360245100965, 0.07921517452308469]}, "mutation_prompt": null}
{"id": "7a261290-02c3-4ffd-85a3-c9e3e58221cd", "solution": "import numpy as np\n\nclass ImprovedFastAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel_min, self.max_vel_max = 0.1, 0.3  # Modified maximum velocity range\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel_min, self.max_vel_min, (self.pop_size, self.dim))  # Initialized with modified max velocity\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            max_vel = self.max_vel_min + (_ / self.budget) * (self.max_vel_max - self.max_vel_min)  # Adaptive max velocity update\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -max_vel, max_vel)  # Adaptively limit velocity\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel_min, self.max_vel_min, (30 - self.pop_size, self.dim)))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedFastAdaptiveInertiaPSO", "description": "Implementing a mechanism to adaptively adjust the maximum velocity of particles based on individual and global performance to improve convergence speed.", "configspace": "", "generation": 47, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 43, 13, '            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 43, 13, '            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\\n'))", "parent_id": "c7f3015c-ebe0-4aac-a540-5dff341b5485", "metadata": {}, "mutation_prompt": null}
{"id": "f601b202-34ea-4da9-9726-48d56f47ba56", "solution": "import numpy as np\n\nclass FastAdaptiveSinusoidalPSO(ImprovedFastAdaptiveInertiaPSO):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n    \n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - np.sin(_/self.budget*np.pi))**2)) if _ % (self.budget // 20) == 0 else self.pop_size\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "FastAdaptiveSinusoidalPSO", "description": "Implementing a dynamic population resizing strategy based on a sinusoidal function to promote exploration and exploitation balance.", "configspace": "", "generation": 48, "fitness": 0.24444550808696755, "feedback": "The algorithm FastAdaptiveSinusoidalPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.22.", "error": "", "parent_id": "c7f3015c-ebe0-4aac-a540-5dff341b5485", "metadata": {"aucs": [0.6183145227542862, 0.5847094749095562, 0.5894513974052874, 0.599572421802951, 0.6036219179588009, 0.5705760180566251, 0.5694757834283644, 0.5900611322870065, 0.6243963505687219, 0.16340610490241603, 0.14183844908599297, 0.13357792510835664, 0.13888020869847462, 0.12436442931826319, 0.124450448717363, 0.16385012559854895, 0.11800277494085953, 0.14883543654402243, 0.08688219675049491, 0.09650721277373486, 0.08535864802154991, 0.09286732596033975, 0.1259789233363039, 0.15811269977447429, 0.08195631412765747, 0.10371317153419768, 0.1406971750054139, 0.10358554372747608, 0.06555569834748531, 0.08937345539070085, 0.08281853514498294, 0.11970184625633296, 0.07897797399606898, 0.08850405712975695, 0.0802626459002771, 0.05232197676756245, 0.882490201386976, 0.8434426152598338, 0.8272843842842847, 0.8402854816103794, 0.8609327067052169, 0.8483117457179643, 0.8804849865570135, 0.8320198377447583, 0.8472749895150827, 0.4031690373531027, 0.39319431005949623, 0.39486570500621965, 0.4333700400696453, 0.39057040441387203, 0.37551391904690967, 0.36089735044633175, 0.3536134315257967, 0.3897712331078306, 0.20663566256025034, 0.13337005282293235, 0.11620365103172514, 0.20954173324640868, 0.16723150077064652, 0.2645792656760426, 0.15073293239690388, 0.1496039273804467, 0.17477509545405678, 0.2058970381629025, 0.24283689091147964, 0.18388348845089697, 0.16982987495045287, 0.19897160259559454, 0.1779131390378319, 0.20460779633121962, 0.13039520731961307, 0.18189232696682078, 0.18262304616307512, 0.1783307956723018, 0.22814944217526667, 0.12916847321036962, 0.17776329804585, 0.1942067246179512, 0.18094368257256532, 0.1964177469017867, 0.12580297908773042, 0.11549224100926514, 0.0006301766826354305, 9.999999999998899e-05, 0.07166920861298809, 0.04116882207940087, 0.039505316184880734, 0.008801684259546305, 9.999999999998899e-05, 0.023804283702438256, 0.09824652969385739, 0.08808744378417088, 0.11689099987010887, 0.05465333575242626, 0.016760046731113865, 0.04054936932502462, 0.17523909038080743, 0.09411761946427177, 0.046925571657189025, 0.07846020941526533, 0.15961502740187083, 0.06636605766326265, 0.049347893352781336, 0.05235921513302233, 0.00874976061175059, 0.06889622738605683, 0.06826133355466246, 0.04585134149209957, 0.18973913688861666, 0.07461190396366768, 0.07529644333701402, 0.0740038054666855, 0.11181257472344042, 0.05186353376636266, 0.13022106228420638, 0.1657416964212689, 0.08053452978715181, 0.48952823403585266, 0.5026871930270679, 0.4770841558687725, 0.4702820033458147, 0.4826940373518972, 0.47994141101706844, 0.521233429945716, 0.46316207806489584, 0.49698525379511815, 0.04257790959154495, 0.05551049276650133, 0.041443000543253894, 0.05931434347959297, 0.077776819714791, 0.08707205678119423, 0.09821759038992717, 0.09428164961191521, 0.062197010906851924, 0.2511227832572187, 0.3383499375928075, 0.19022446084500666, 0.29165865886642206, 0.2502770576354547, 0.13940379511743417, 0.22470905560556764, 0.1795363848530538, 0.32194128766732955, 0.15617609667774923, 0.2611436682418887, 0.19325664526518727, 0.27853115509362747, 0.23475873181931706, 0.2593455548829695, 0.2190892092262955, 0.3281300366284221, 0.1661780977569024, 0.19758777440394437, 0.13556673281131248, 0.18671595832588317, 0.2630746155915419, 0.2153087293068413, 0.16527121042609083, 0.17851964314682078, 0.2396413508597951, 0.11906574065358022, 0.21775716483107732, 0.18434507387257348, 0.20376518728752424, 0.2465290184328215, 0.2046697452465539, 0.2507425871700828, 0.23716004143264746, 0.21147895680033257, 0.19951633434550986, 0.17749623800593128, 0.24512708696687446, 0.19567288444400088, 0.17253567813073445, 0.19230355510402397, 0.18148710950053393, 0.18254871324927946, 0.2046056380965351, 0.1860098329613995, 0.1259810270324635, 0.12265238446728677, 0.1314171503513617, 0.8741348045652921, 0.20050513518248292, 0.8755720307382442, 0.11747613032121407, 0.8512833767840615, 0.865999592290469, 0.5474963450006157, 0.15590258995344086, 0.7610822098154718, 0.7405220942462274, 0.2053630001446557, 0.7119078671832175, 0.09324536521270055, 0.69442608128418, 0.5948344004000115, 0.17756433907757674, 0.1920052832335175, 0.1837159651286222, 0.19013323523560643, 0.19406485898177928, 0.18696385641462543, 0.2218979898736565, 0.18290085895597108, 0.18542892986246673, 0.0999842208134778, 0.07994945919100194, 0.0846191163073432, 0.08379420927922221, 0.09513077481017085, 0.08551823392854818, 0.10234817481630143, 0.0800360245100965, 0.07921517452308469]}, "mutation_prompt": null}
{"id": "212d09dd-9c01-47d6-a088-3691cbe3bf93", "solution": "import numpy as np\n\nclass ImprovedFastAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.mutation_rate_min = 0.05  # Modified: Added mutation rate parameters\n        self.mutation_rate_max = 0.2   # Modified: Added mutation rate parameters\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            mutation_rate = self.mutation_rate_min + (_ / self.budget) * (self.mutation_rate_max - self.mutation_rate_min)  # Modified: Dynamic mutation rate adjustment\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += mutation_rate * self.velocity[i]  # Modified: Adaptive mutation applied\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:]))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedFastAdaptiveInertiaPSO", "description": "Implementing a dynamic mutation strategy to adaptively adjust the mutation rate for enhanced exploration and exploitation balance.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 46, 13, '            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 46, 13, '            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\\n'))", "parent_id": "c7f3015c-ebe0-4aac-a540-5dff341b5485", "metadata": {}, "mutation_prompt": null}
{"id": "5aae9cd3-bcd1-45fb-a2d1-d3b9b2d711b0", "solution": "import numpy as np\n\nclass ImprovedFastAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size  # Dynamic population adjustment every 5% of the budget\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedFastAdaptiveInertiaPSO", "description": "Implementing a novel mechanism to dynamically adjust the population size based on individual performance to enhance convergence speed.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c7f3015c-ebe0-4aac-a540-5dff341b5485", "metadata": {"aucs": [0.6183145227542862, 0.5847094749095562, 0.5894513974052874, 0.599572421802951, 0.6036219179588009, 0.5705760180566251, 0.5694757834283644, 0.5900611322870065, 0.6243963505687219, 0.16340610490241603, 0.14183844908599297, 0.13357792510835664, 0.13888020869847462, 0.12436442931826319, 0.124450448717363, 0.16385012559854895, 0.11800277494085953, 0.14883543654402243, 0.08688219675049491, 0.09650721277373486, 0.08535864802154991, 0.09286732596033975, 0.1259789233363039, 0.15811269977447429, 0.08195631412765747, 0.10371317153419768, 0.1406971750054139, 0.10358554372747608, 0.06555569834748531, 0.08937345539070085, 0.08281853514498294, 0.11970184625633296, 0.07897797399606898, 0.08850405712975695, 0.0802626459002771, 0.05232197676756245, 0.882490201386976, 0.8434426152598338, 0.8272843842842847, 0.8402854816103794, 0.8609327067052169, 0.8483117457179643, 0.8804849865570135, 0.8320198377447583, 0.8472749895150827, 0.4031690373531027, 0.39319431005949623, 0.39486570500621965, 0.4333700400696453, 0.39057040441387203, 0.37551391904690967, 0.36089735044633175, 0.3536134315257967, 0.3897712331078306, 0.20663566256025034, 0.13337005282293235, 0.11620365103172514, 0.20954173324640868, 0.16723150077064652, 0.2645792656760426, 0.15073293239690388, 0.1496039273804467, 0.17477509545405678, 0.2058970381629025, 0.24283689091147964, 0.18388348845089697, 0.16982987495045287, 0.19897160259559454, 0.1779131390378319, 0.20460779633121962, 0.13039520731961307, 0.18189232696682078, 0.18262304616307512, 0.1783307956723018, 0.22814944217526667, 0.12916847321036962, 0.17776329804585, 0.1942067246179512, 0.18094368257256532, 0.1964177469017867, 0.12580297908773042, 0.11549224100926514, 0.0006301766826354305, 9.999999999998899e-05, 0.07166920861298809, 0.04116882207940087, 0.039505316184880734, 0.008801684259546305, 9.999999999998899e-05, 0.023804283702438256, 0.09824652969385739, 0.08808744378417088, 0.11689099987010887, 0.05465333575242626, 0.016760046731113865, 0.04054936932502462, 0.17523909038080743, 0.09411761946427177, 0.046925571657189025, 0.07846020941526533, 0.15961502740187083, 0.06636605766326265, 0.049347893352781336, 0.05235921513302233, 0.00874976061175059, 0.06889622738605683, 0.06826133355466246, 0.04585134149209957, 0.18973913688861666, 0.07461190396366768, 0.07529644333701402, 0.0740038054666855, 0.11181257472344042, 0.05186353376636266, 0.13022106228420638, 0.1657416964212689, 0.08053452978715181, 0.48952823403585266, 0.5026871930270679, 0.4770841558687725, 0.4702820033458147, 0.4826940373518972, 0.47994141101706844, 0.521233429945716, 0.46316207806489584, 0.49698525379511815, 0.04257790959154495, 0.05551049276650133, 0.041443000543253894, 0.05931434347959297, 0.077776819714791, 0.08707205678119423, 0.09821759038992717, 0.09428164961191521, 0.062197010906851924, 0.2511227832572187, 0.3383499375928075, 0.19022446084500666, 0.29165865886642206, 0.2502770576354547, 0.13940379511743417, 0.22470905560556764, 0.1795363848530538, 0.32194128766732955, 0.15617609667774923, 0.2611436682418887, 0.19325664526518727, 0.27853115509362747, 0.23475873181931706, 0.2593455548829695, 0.2190892092262955, 0.3281300366284221, 0.1661780977569024, 0.19758777440394437, 0.13556673281131248, 0.18671595832588317, 0.2630746155915419, 0.2153087293068413, 0.16527121042609083, 0.17851964314682078, 0.2396413508597951, 0.11906574065358022, 0.21775716483107732, 0.18434507387257348, 0.20376518728752424, 0.2465290184328215, 0.2046697452465539, 0.2507425871700828, 0.23716004143264746, 0.21147895680033257, 0.19951633434550986, 0.17749623800593128, 0.24512708696687446, 0.19567288444400088, 0.17253567813073445, 0.19230355510402397, 0.18148710950053393, 0.18254871324927946, 0.2046056380965351, 0.1860098329613995, 0.1259810270324635, 0.12265238446728677, 0.1314171503513617, 0.8741348045652921, 0.20050513518248292, 0.8755720307382442, 0.11747613032121407, 0.8512833767840615, 0.865999592290469, 0.5474963450006157, 0.15590258995344086, 0.7610822098154718, 0.7405220942462274, 0.2053630001446557, 0.7119078671832175, 0.09324536521270055, 0.69442608128418, 0.5948344004000115, 0.17756433907757674, 0.1920052832335175, 0.1837159651286222, 0.19013323523560643, 0.19406485898177928, 0.18696385641462543, 0.2218979898736565, 0.18290085895597108, 0.18542892986246673, 0.0999842208134778, 0.07994945919100194, 0.0846191163073432, 0.08379420927922221, 0.09513077481017085, 0.08551823392854818, 0.10234817481630143, 0.0800360245100965, 0.07921517452308469]}, "mutation_prompt": null}
{"id": "c933cfc5-fa1a-4a95-86bd-13c2caf6ff36", "solution": "import numpy as np\n\nclass ImprovedFastAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size  # Dynamic population adjustment every 5% of the budget\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedFastAdaptiveInertiaPSO", "description": "Implementing a novel mechanism to dynamically adjust the population size based on individual performance to enhance convergence speed.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c7f3015c-ebe0-4aac-a540-5dff341b5485", "metadata": {"aucs": [0.6183145227542862, 0.5847094749095562, 0.5894513974052874, 0.599572421802951, 0.6036219179588009, 0.5705760180566251, 0.5694757834283644, 0.5900611322870065, 0.6243963505687219, 0.16340610490241603, 0.14183844908599297, 0.13357792510835664, 0.13888020869847462, 0.12436442931826319, 0.124450448717363, 0.16385012559854895, 0.11800277494085953, 0.14883543654402243, 0.08688219675049491, 0.09650721277373486, 0.08535864802154991, 0.09286732596033975, 0.1259789233363039, 0.15811269977447429, 0.08195631412765747, 0.10371317153419768, 0.1406971750054139, 0.10358554372747608, 0.06555569834748531, 0.08937345539070085, 0.08281853514498294, 0.11970184625633296, 0.07897797399606898, 0.08850405712975695, 0.0802626459002771, 0.05232197676756245, 0.882490201386976, 0.8434426152598338, 0.8272843842842847, 0.8402854816103794, 0.8609327067052169, 0.8483117457179643, 0.8804849865570135, 0.8320198377447583, 0.8472749895150827, 0.4031690373531027, 0.39319431005949623, 0.39486570500621965, 0.4333700400696453, 0.39057040441387203, 0.37551391904690967, 0.36089735044633175, 0.3536134315257967, 0.3897712331078306, 0.20663566256025034, 0.13337005282293235, 0.11620365103172514, 0.20954173324640868, 0.16723150077064652, 0.2645792656760426, 0.15073293239690388, 0.1496039273804467, 0.17477509545405678, 0.2058970381629025, 0.24283689091147964, 0.18388348845089697, 0.16982987495045287, 0.19897160259559454, 0.1779131390378319, 0.20460779633121962, 0.13039520731961307, 0.18189232696682078, 0.18262304616307512, 0.1783307956723018, 0.22814944217526667, 0.12916847321036962, 0.17776329804585, 0.1942067246179512, 0.18094368257256532, 0.1964177469017867, 0.12580297908773042, 0.11549224100926514, 0.0006301766826354305, 9.999999999998899e-05, 0.07166920861298809, 0.04116882207940087, 0.039505316184880734, 0.008801684259546305, 9.999999999998899e-05, 0.023804283702438256, 0.09824652969385739, 0.08808744378417088, 0.11689099987010887, 0.05465333575242626, 0.016760046731113865, 0.04054936932502462, 0.17523909038080743, 0.09411761946427177, 0.046925571657189025, 0.07846020941526533, 0.15961502740187083, 0.06636605766326265, 0.049347893352781336, 0.05235921513302233, 0.00874976061175059, 0.06889622738605683, 0.06826133355466246, 0.04585134149209957, 0.18973913688861666, 0.07461190396366768, 0.07529644333701402, 0.0740038054666855, 0.11181257472344042, 0.05186353376636266, 0.13022106228420638, 0.1657416964212689, 0.08053452978715181, 0.48952823403585266, 0.5026871930270679, 0.4770841558687725, 0.4702820033458147, 0.4826940373518972, 0.47994141101706844, 0.521233429945716, 0.46316207806489584, 0.49698525379511815, 0.04257790959154495, 0.05551049276650133, 0.041443000543253894, 0.05931434347959297, 0.077776819714791, 0.08707205678119423, 0.09821759038992717, 0.09428164961191521, 0.062197010906851924, 0.2511227832572187, 0.3383499375928075, 0.19022446084500666, 0.29165865886642206, 0.2502770576354547, 0.13940379511743417, 0.22470905560556764, 0.1795363848530538, 0.32194128766732955, 0.15617609667774923, 0.2611436682418887, 0.19325664526518727, 0.27853115509362747, 0.23475873181931706, 0.2593455548829695, 0.2190892092262955, 0.3281300366284221, 0.1661780977569024, 0.19758777440394437, 0.13556673281131248, 0.18671595832588317, 0.2630746155915419, 0.2153087293068413, 0.16527121042609083, 0.17851964314682078, 0.2396413508597951, 0.11906574065358022, 0.21775716483107732, 0.18434507387257348, 0.20376518728752424, 0.2465290184328215, 0.2046697452465539, 0.2507425871700828, 0.23716004143264746, 0.21147895680033257, 0.19951633434550986, 0.17749623800593128, 0.24512708696687446, 0.19567288444400088, 0.17253567813073445, 0.19230355510402397, 0.18148710950053393, 0.18254871324927946, 0.2046056380965351, 0.1860098329613995, 0.1259810270324635, 0.12265238446728677, 0.1314171503513617, 0.8741348045652921, 0.20050513518248292, 0.8755720307382442, 0.11747613032121407, 0.8512833767840615, 0.865999592290469, 0.5474963450006157, 0.15590258995344086, 0.7610822098154718, 0.7405220942462274, 0.2053630001446557, 0.7119078671832175, 0.09324536521270055, 0.69442608128418, 0.5948344004000115, 0.17756433907757674, 0.1920052832335175, 0.1837159651286222, 0.19013323523560643, 0.19406485898177928, 0.18696385641462543, 0.2218979898736565, 0.18290085895597108, 0.18542892986246673, 0.0999842208134778, 0.07994945919100194, 0.0846191163073432, 0.08379420927922221, 0.09513077481017085, 0.08551823392854818, 0.10234817481630143, 0.0800360245100965, 0.07921517452308469]}, "mutation_prompt": null}
{"id": "72fabdc8-cdbf-4c4e-a523-5539b97224d5", "solution": "import numpy as np\n\nclass ImprovedFastAdaptiveInertiaPSO_Mutation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.mutation_rate = 0.1\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                mutation = np.random.uniform(-self.mutation_rate, self.mutation_rate, self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i]) + mutation\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedFastAdaptiveInertiaPSO_Mutation", "description": "Utilizing a mutation-based optimization strategy by incorporating mutation operation in the velocity update to explore the search space more effectively.", "configspace": "", "generation": 52, "fitness": 0.21694457922674215, "feedback": "The algorithm ImprovedFastAdaptiveInertiaPSO_Mutation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "c7f3015c-ebe0-4aac-a540-5dff341b5485", "metadata": {"aucs": [0.4642104287270187, 0.46522265932830453, 0.4809843060832828, 0.43165740782233697, 0.4528236925298815, 0.4316612000073433, 0.47306274264477133, 0.43666225915401224, 0.4472140465257358, 0.0748289239232226, 0.08292300289907184, 9.999999999998899e-05, 0.0004304689676523088, 0.027757503895993296, 0.0006541257764016706, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11671214023001952, 0.0907812540378885, 0.1299188091165865, 0.09527059395727033, 0.11193954188318334, 0.09864650800848906, 0.08234371016136266, 0.10482775689883417, 0.10389619186498256, 0.0680731724533905, 0.10689472320189342, 0.08749350804772438, 0.10291710916797525, 0.08094691544283938, 0.06881860891692071, 0.10236678071229799, 0.09581822942336038, 0.07589108788755272, 0.8632456370248165, 0.8444887655059076, 0.8545450571239159, 0.8344080861071196, 0.8532727995736851, 0.8276663923608575, 0.8753483436320899, 0.8372787569050308, 0.8739741506933746, 0.3525766342081491, 0.30304007769710517, 0.3078618541797816, 0.31648472877390854, 0.33046834556379157, 0.32977511274575866, 0.33397613574020824, 0.301598089289264, 0.30883779646729326, 0.32050898186748566, 0.1333066331266426, 0.13411723295698008, 0.27742562746357136, 0.5653889457325116, 0.26165904743631385, 0.14885097983739837, 0.14876088697880274, 0.14873661083886203, 0.16247227749917836, 0.2233725526288648, 0.1161039435696144, 0.22552744503217248, 0.15736001873885108, 0.13226742699781913, 0.16870239917577678, 0.18257041203224045, 0.15994100947074297, 0.1561049241705028, 0.17641237161695988, 0.16810507788550744, 0.16065118889911534, 0.1803486205525966, 0.1741251980746945, 0.17574152993771242, 0.10259278405976069, 0.1817406872556141, 0.050731986230428405, 0.07774029404949945, 0.04939852041663839, 0.04546539533352678, 0.0016182163807172412, 0.016083761840366972, 0.03132839611829308, 9.999999999998899e-05, 0.03153191227826224, 0.12075096037344724, 0.05791378968431271, 0.0820359928621367, 0.04399197076436012, 0.010745873775724446, 0.036942576728539955, 0.10511484057234943, 0.09575187574881583, 0.044419172625142944, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09043598314654988, 0.11241831778320643, 0.14096970410279863, 0.08980030608844003, 0.07795832890028054, 0.06465741655723811, 0.06932736572009235, 0.10350244893844684, 0.07485120126175548, 0.45394318867432315, 0.5129913524308038, 0.4346568620007071, 0.40821461061021513, 0.4262492139442955, 0.42964534829483103, 0.44660538184382503, 0.43928936114862194, 0.4768684737377462, 0.05899823703831519, 0.04643832751466925, 0.030612456369350727, 0.08595277526880762, 0.09578557142013233, 0.1003248784282208, 0.08229558080170007, 0.14295009197231134, 0.06848544243858856, 0.2330210524104851, 0.23331627096788476, 0.2372662587206923, 0.17794999157464297, 0.28174880727992924, 0.1713963435926571, 0.2587318132231582, 0.2702176232284136, 0.171134312980894, 0.17681832608136105, 0.22757184884716064, 0.1926173677123283, 0.3055029923788407, 0.2015740610997806, 0.30104212468575364, 0.23068271547083974, 0.3233368515296744, 0.20280161646424955, 0.19199388366894488, 0.1458751169989546, 0.15470500704522472, 0.2146710589416031, 0.1995066841727382, 0.1578946036108042, 0.18535702851212832, 0.2334561190495651, 0.16277363350341179, 0.2072353626007324, 0.18499309097405947, 0.2228493855574537, 0.20513934378665488, 0.24345974097724254, 0.22116283610559118, 0.2990137561273605, 0.22249573517793741, 0.20963835372722872, 0.18540931669824612, 0.20030404713816663, 0.186760401814272, 0.18224447242577224, 0.18546196532312542, 0.18254870994673789, 0.19386112872646377, 0.18678724633532195, 0.1928014937456245, 0.12574073620447757, 0.12348482361830171, 0.13250871714885637, 0.706163502387006, 0.19910673398846646, 0.6769004909318288, 0.099546568669728, 0.6770376125730828, 0.7025461473775134, 0.4954277629913879, 0.15566699984542143, 0.6397348149209237, 0.2005193542666729, 0.2058388011038763, 0.5936899272098868, 0.09396401692977141, 0.4662090106616986, 0.41567389590508264, 0.1705345256205617, 0.18161888287939032, 0.189892614070301, 0.18789783421956652, 0.1881397531454725, 0.18430948120528046, 0.19653963674735664, 0.1942604663629045, 0.18183173257513274, 0.08692250099150478, 0.07547586186924837, 0.08950326225686478, 0.09793343432841517, 0.10127777964772577, 0.09809441247495598, 0.07410475777292724, 0.07035671422600331, 0.07386089556381925]}, "mutation_prompt": null}
{"id": "e2ca8aca-b428-4942-9cc2-3bca268a3d15", "solution": "import numpy as np\n\nclass ImprovedFastAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size  # Dynamic population adjustment every 5% of the budget\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedFastAdaptiveInertiaPSO", "description": "Implementing a novel mechanism to dynamically adjust the population size based on individual performance to enhance convergence speed.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c7f3015c-ebe0-4aac-a540-5dff341b5485", "metadata": {"aucs": [0.6183145227542862, 0.5847094749095562, 0.5894513974052874, 0.599572421802951, 0.6036219179588009, 0.5705760180566251, 0.5694757834283644, 0.5900611322870065, 0.6243963505687219, 0.16340610490241603, 0.14183844908599297, 0.13357792510835664, 0.13888020869847462, 0.12436442931826319, 0.124450448717363, 0.16385012559854895, 0.11800277494085953, 0.14883543654402243, 0.08688219675049491, 0.09650721277373486, 0.08535864802154991, 0.09286732596033975, 0.1259789233363039, 0.15811269977447429, 0.08195631412765747, 0.10371317153419768, 0.1406971750054139, 0.10358554372747608, 0.06555569834748531, 0.08937345539070085, 0.08281853514498294, 0.11970184625633296, 0.07897797399606898, 0.08850405712975695, 0.0802626459002771, 0.05232197676756245, 0.882490201386976, 0.8434426152598338, 0.8272843842842847, 0.8402854816103794, 0.8609327067052169, 0.8483117457179643, 0.8804849865570135, 0.8320198377447583, 0.8472749895150827, 0.4031690373531027, 0.39319431005949623, 0.39486570500621965, 0.4333700400696453, 0.39057040441387203, 0.37551391904690967, 0.36089735044633175, 0.3536134315257967, 0.3897712331078306, 0.20663566256025034, 0.13337005282293235, 0.11620365103172514, 0.20954173324640868, 0.16723150077064652, 0.2645792656760426, 0.15073293239690388, 0.1496039273804467, 0.17477509545405678, 0.2058970381629025, 0.24283689091147964, 0.18388348845089697, 0.16982987495045287, 0.19897160259559454, 0.1779131390378319, 0.20460779633121962, 0.13039520731961307, 0.18189232696682078, 0.18262304616307512, 0.1783307956723018, 0.22814944217526667, 0.12916847321036962, 0.17776329804585, 0.1942067246179512, 0.18094368257256532, 0.1964177469017867, 0.12580297908773042, 0.11549224100926514, 0.0006301766826354305, 9.999999999998899e-05, 0.07166920861298809, 0.04116882207940087, 0.039505316184880734, 0.008801684259546305, 9.999999999998899e-05, 0.023804283702438256, 0.09824652969385739, 0.08808744378417088, 0.11689099987010887, 0.05465333575242626, 0.016760046731113865, 0.04054936932502462, 0.17523909038080743, 0.09411761946427177, 0.046925571657189025, 0.07846020941526533, 0.15961502740187083, 0.06636605766326265, 0.049347893352781336, 0.05235921513302233, 0.00874976061175059, 0.06889622738605683, 0.06826133355466246, 0.04585134149209957, 0.18973913688861666, 0.07461190396366768, 0.07529644333701402, 0.0740038054666855, 0.11181257472344042, 0.05186353376636266, 0.13022106228420638, 0.1657416964212689, 0.08053452978715181, 0.48952823403585266, 0.5026871930270679, 0.4770841558687725, 0.4702820033458147, 0.4826940373518972, 0.47994141101706844, 0.521233429945716, 0.46316207806489584, 0.49698525379511815, 0.04257790959154495, 0.05551049276650133, 0.041443000543253894, 0.05931434347959297, 0.077776819714791, 0.08707205678119423, 0.09821759038992717, 0.09428164961191521, 0.062197010906851924, 0.2511227832572187, 0.3383499375928075, 0.19022446084500666, 0.29165865886642206, 0.2502770576354547, 0.13940379511743417, 0.22470905560556764, 0.1795363848530538, 0.32194128766732955, 0.15617609667774923, 0.2611436682418887, 0.19325664526518727, 0.27853115509362747, 0.23475873181931706, 0.2593455548829695, 0.2190892092262955, 0.3281300366284221, 0.1661780977569024, 0.19758777440394437, 0.13556673281131248, 0.18671595832588317, 0.2630746155915419, 0.2153087293068413, 0.16527121042609083, 0.17851964314682078, 0.2396413508597951, 0.11906574065358022, 0.21775716483107732, 0.18434507387257348, 0.20376518728752424, 0.2465290184328215, 0.2046697452465539, 0.2507425871700828, 0.23716004143264746, 0.21147895680033257, 0.19951633434550986, 0.17749623800593128, 0.24512708696687446, 0.19567288444400088, 0.17253567813073445, 0.19230355510402397, 0.18148710950053393, 0.18254871324927946, 0.2046056380965351, 0.1860098329613995, 0.1259810270324635, 0.12265238446728677, 0.1314171503513617, 0.8741348045652921, 0.20050513518248292, 0.8755720307382442, 0.11747613032121407, 0.8512833767840615, 0.865999592290469, 0.5474963450006157, 0.15590258995344086, 0.7610822098154718, 0.7405220942462274, 0.2053630001446557, 0.7119078671832175, 0.09324536521270055, 0.69442608128418, 0.5948344004000115, 0.17756433907757674, 0.1920052832335175, 0.1837159651286222, 0.19013323523560643, 0.19406485898177928, 0.18696385641462543, 0.2218979898736565, 0.18290085895597108, 0.18542892986246673, 0.0999842208134778, 0.07994945919100194, 0.0846191163073432, 0.08379420927922221, 0.09513077481017085, 0.08551823392854818, 0.10234817481630143, 0.0800360245100965, 0.07921517452308469]}, "mutation_prompt": null}
{"id": "507b88ef-5b9d-4fcd-aa1f-ae5db6053edb", "solution": "import numpy as np\n\nclass HybridDEImprovedFastAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size  # Dynamic population adjustment every 5% of the budget\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n            if np.random.rand() < 0.2:  # Integrate Differential Evolution for global exploration\n                for i in range(self.pop_size):\n                    idxs = np.random.choice(range(self.pop_size), 3, replace=False)\n                    mutant = self.position[idxs[0]] + 0.5 * (self.position[idxs[1]] - self.position[idxs[2]])\n                    cross_points = np.random.rand(self.dim) < 0.9\n                    self.position[i] = np.where(cross_points, mutant, self.position[i])\n        return self.global_best_pos", "name": "HybridDEImprovedFastAdaptiveInertiaPSO", "description": "Implementing a hybrid approach by integrating Differential Evolution to enhance global exploration and exploit the population's diversity, significantly improving convergence speed.", "configspace": "", "generation": 54, "fitness": 0.2074920618834799, "feedback": "The algorithm HybridDEImprovedFastAdaptiveInertiaPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.18.", "error": "", "parent_id": "c7f3015c-ebe0-4aac-a540-5dff341b5485", "metadata": {"aucs": [0.4502843649581807, 0.45048209543134965, 0.43441756390453934, 0.44269775718918436, 0.4145797911805774, 0.4334618619302666, 0.4666463633991438, 0.4653268815233117, 0.4353461566302925, 0.038221755645016176, 0.09492901581422952, 0.055363470259039205, 0.07506088592273519, 0.02953398940226215, 9.999999999998899e-05, 0.06747990047834918, 0.0005940387748494258, 0.05659725261557014, 0.11862088435458573, 0.11555141971424221, 0.14583699348720147, 0.10355058029115716, 0.13242819682761842, 0.07823755441989177, 0.09988212417220932, 0.08321678059553528, 0.1459027226838554, 0.06886387987439191, 0.11004772061101409, 0.08044238364666545, 0.0741021540886988, 0.10806430657283672, 0.04742706445646494, 0.07983443936389789, 0.08885932883427572, 0.08308309877151099, 0.9396635410793742, 0.9016095770262083, 0.8675278250771109, 0.6964532198255942, 0.7111700826022567, 0.7728843883439418, 0.7679816254826846, 0.6806013119686729, 0.7223431571337944, 0.3027473231988128, 0.27261485781806205, 0.2947533972198566, 0.2595795621464497, 0.30134290941649156, 0.27938698534097184, 0.2936563947626488, 0.2866903519360968, 0.2723737279821299, 0.21251412237489464, 0.21949787032407608, 0.20226736526732148, 0.27190700881201124, 0.2653792014658145, 0.1527103299421515, 0.19836598049315146, 0.4714909128065954, 0.2218121137492275, 0.10424709754435502, 0.11656423125013715, 0.1397618146725459, 0.15487588387863727, 0.19692808131471495, 0.1240930882479444, 0.21202222037436047, 0.18054348686090305, 0.2073131241712226, 0.17070484288235943, 0.11843591391841113, 0.16033917530707698, 0.22584644990895464, 0.22078353432692188, 0.17977512569676624, 0.15601451819926337, 0.20800638409809225, 0.09672579161972594, 9.999999999998899e-05, 0.02887024260000126, 0.05382131681903479, 0.08278784591777699, 0.04966006076944629, 0.03831954925778469, 9.999999999998899e-05, 9.999999999998899e-05, 0.01865516375489462, 0.11018186601059665, 0.05860297116572599, 0.07606676454803185, 0.11437805042133309, 0.05310842802531757, 0.0583467795643694, 0.21875360912139863, 0.11264335019126615, 0.09995346848579556, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00028061724091899, 0.09682179859661377, 0.09176358788421679, 0.031040368582973543, 0.10055278302755599, 0.09428223706456462, 0.09815981176517075, 0.07734071542530785, 0.1025932589793892, 0.0680097480364329, 0.4209322116328572, 0.42984874046329, 0.4020611730430552, 0.4004956573011679, 0.40878358444013296, 0.3911409275183485, 0.4099826408194345, 0.41020707599785333, 0.3991827813562574, 0.10440004429307681, 0.054885741978065394, 0.08095803548484382, 0.07543554432928778, 0.10791630551459164, 0.10875369059667628, 0.06432909188746039, 0.08026787333577179, 0.08124229002722516, 0.15527516393371066, 0.2595817710777045, 0.1457338941698617, 0.16793371762381393, 0.24078338860463833, 0.2103937323980446, 0.19091829060745957, 0.17222259370155113, 0.2087081921754842, 0.2609985675564077, 0.20588820835249022, 0.26897823915116426, 0.2871781891590699, 0.2934068278813655, 0.28146640121118416, 0.2970969745724532, 0.24514572636640208, 0.2286620967120786, 0.2357982061239815, 0.20837835407869132, 0.21424938118375125, 0.20603996348954867, 0.19098183849180117, 0.1842074265219239, 0.24597772834765175, 0.20841768431286867, 0.19929878885961183, 0.22473046005080688, 0.19914903548636098, 0.19762807568848673, 0.21050335818668575, 0.2265568661527484, 0.23631723913540903, 0.20062109839244813, 0.22289656284010773, 0.20799705471532037, 0.21512337897726597, 0.18421498120984925, 0.18950685591319483, 0.16988083587727776, 0.1897751322637593, 0.16733252825460565, 0.20582903639764882, 0.1982386904401484, 0.19654202745438387, 0.18305574413570458, 0.6832932267844467, 0.17825362670885225, 0.1625168557000608, 0.1997714130456265, 0.5199983487351483, 0.17145037021705067, 0.6270639273530085, 0.15632222148994845, 0.5191555095820268, 0.15416094713891493, 0.37390742551293266, 0.11100382178554369, 0.20005331022143613, 0.19535427127704286, 0.14642802721930293, 0.4294317588958355, 0.42427181790013946, 0.18036906220341875, 0.20184378469017494, 0.17663591432014802, 0.18538065568243556, 0.18655606371729339, 0.18565687854276047, 0.1781388330104996, 0.180184190902819, 0.18931459116865912, 0.088387617734342, 0.07719849735823336, 0.07864271918777066, 0.07386559717400032, 0.08379057477920848, 0.07540745892571687, 0.06147755241321973, 0.09001519580053374, 0.07906450244712648]}, "mutation_prompt": null}
{"id": "81a9c6a4-40e4-4fb9-882a-36f9d867898f", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass ImprovedFastAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            with ThreadPoolExecutor() as executor:\n                futures = [executor.submit(self._update_particle, i, fitness, func) for i in range(self.pop_size)]\n                for future in futures:\n                    future.result()\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size  \n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos\n\n    def _update_particle(self, i, fitness, func):\n        if fitness[i] < self.personal_best_val[i]:\n            self.personal_best_val[i] = fitness[i]\n            self.personal_best_pos[i] = np.copy(self.position[i])\n        if fitness[i] < self.global_best_val:\n            self.global_best_val = fitness[i]\n            self.global_best_pos = np.copy(self.position[i])", "name": "ImprovedFastAdaptiveInertiaPSO", "description": "Introducing a parallel processing strategy to update particle positions concurrently to speed up optimization convergence.", "configspace": "", "generation": 55, "fitness": 0.24106272383129704, "feedback": "The algorithm ImprovedFastAdaptiveInertiaPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.22.", "error": "", "parent_id": "c7f3015c-ebe0-4aac-a540-5dff341b5485", "metadata": {"aucs": [0.6183145227542862, 0.5847094749095562, 0.5894513974052874, 0.6128448022049029, 0.5571874168163782, 0.6134695822428815, 0.5987897216896045, 0.5900611322870065, 0.6243963505687219, 0.16340610490241603, 0.15984113022274504, 0.13357792510835664, 0.13888020869847462, 0.12436442931826319, 0.124450448717363, 0.12736006792443355, 0.13316432007657308, 0.14883543654402243, 0.08688219675049491, 0.09650721277373486, 0.08535864802154991, 0.09286732596033975, 0.1259789233363039, 0.1277712634121464, 0.08195631412765747, 0.11417382097183526, 0.1406971750054139, 0.10358554372747608, 0.06555569834748531, 0.08937345539070085, 0.08281853514498294, 0.11970184625633296, 0.07897797399606898, 0.08850405712975695, 0.0802626459002771, 0.05232197676756245, 0.882490201386976, 0.8453830487692852, 0.8242629359608621, 0.8402854816103794, 0.8609327067052169, 0.8483117457179643, 0.8387779420679037, 0.8320198377447583, 0.0392018832149682, 0.40481529947719996, 0.39319431005949623, 0.39486570500621965, 0.3952409900545999, 0.39057040441387203, 0.3940811108413017, 0.36089735044633175, 0.37405618044146594, 0.3897712331078306, 0.20663566256025034, 0.1380053897325021, 0.11620365103172514, 0.20954173324640868, 0.16723150077064652, 0.2645792656760426, 0.15073293239690388, 0.1496039273804467, 0.17477509545405678, 0.2058970381629025, 0.24283689091147964, 0.18388348845089697, 0.16982987495045287, 0.19897160259559454, 0.1779131390378319, 0.20460779633121962, 0.13039520731961307, 0.18189232696682078, 0.18262304616307512, 0.1783307956723018, 0.22814944217526667, 0.17127058881906487, 0.17776329804585, 0.1942067246179512, 0.18094368257256532, 0.1964177469017867, 0.12580297908773042, 0.11549224100926514, 0.0006301766826354305, 0.06421470051579126, 0.07166920861298809, 0.04116882207940087, 0.039505316184880734, 0.008801684259546305, 9.999999999998899e-05, 0.023804283702438256, 0.09824652969385739, 0.06980307533960062, 0.11689099987010887, 0.05465333575242626, 0.016760046731113865, 0.04054936932502462, 0.17523909038080743, 0.09411761946427177, 0.046925571657189025, 0.10214271519982265, 0.15961502740187083, 0.06636605766326265, 0.049347893352781336, 0.05235921513302233, 0.00874976061175059, 0.08145259196952814, 0.06826133355466246, 0.04585134149209957, 0.18973913688861666, 0.07461190396366768, 0.07529644333701402, 0.07230557525822512, 0.11181257472344042, 0.05186353376636266, 0.13022106228420638, 0.1657416964212689, 0.08053452978715181, 0.48952823403585266, 0.5026871930270679, 0.4770841558687725, 0.4702820033458147, 0.4826940373518972, 0.47994141101706844, 0.521233429945716, 0.46316207806489584, 0.49698525379511815, 0.04257790959154495, 0.05551049276650133, 0.041443000543253894, 0.05931434347959297, 0.077776819714791, 0.08707205678119423, 0.09821759038992717, 0.09428164961191521, 0.062197010906851924, 0.2511227832572187, 0.3383499375928075, 0.19022446084500666, 0.29165865886642206, 0.2502770576354547, 0.13940379511743417, 0.22470905560556764, 0.1795363848530538, 0.32194128766732955, 0.15617609667774923, 0.2611436682418887, 0.19325664526518727, 0.27853115509362747, 0.23475873181931706, 0.2593455548829695, 0.2190892092262955, 0.3281300366284221, 0.1661780977569024, 0.19758777440394437, 0.13556673281131248, 0.18671595832588317, 0.2630746155915419, 0.2153087293068413, 0.16527121042609083, 0.17851964314682078, 0.2396413508597951, 0.11906574065358022, 0.21775716483107732, 0.18434507387257348, 0.20376518728752424, 0.2465290184328215, 0.2046697452465539, 0.2507425871700828, 0.23716004143264746, 0.21147895680033257, 0.19951633434550986, 0.17749623800593128, 0.24512708696687446, 0.19567288444400088, 0.17253567813073445, 0.19230355510402397, 0.18148710950053393, 0.19022928893348667, 0.2046056380965351, 0.1860098329613995, 0.1259810270324635, 0.12265238446728677, 0.1314171503513617, 0.8866014341083972, 0.20052857613338204, 0.8755720307382442, 0.11747613032121407, 0.8512833767840615, 0.865999592290469, 0.5474963450006157, 0.1559028161785707, 0.7610822098154718, 0.7405220942462274, 0.2053630001446557, 0.7119078671832175, 0.09324536521270055, 0.6489606343103438, 0.5948344004000115, 0.17756433907757674, 0.1920052832335175, 0.1837159651286222, 0.19013323523560643, 0.19406485898177928, 0.18696385641462543, 0.2218979898736565, 0.18290085895597108, 0.18542892986246673, 0.0999842208134778, 0.07994945919100194, 0.0846191163073432, 0.08379420927922221, 0.09513077481017085, 0.08551823392854818, 0.10234817481630143, 0.0800360245100965, 0.07921517452308469]}, "mutation_prompt": null}
{"id": "11c72ccb-af71-4d27-a74d-35b644e6c52b", "solution": "import numpy as np\n\nclass ImprovedFastAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size  # Dynamic population adjustment every 5% of the budget\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedFastAdaptiveInertiaPSO", "description": "Implementing a novel mechanism to dynamically adjust the population size based on individual performance to enhance convergence speed.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c7f3015c-ebe0-4aac-a540-5dff341b5485", "metadata": {"aucs": [0.6183145227542862, 0.5847094749095562, 0.5894513974052874, 0.599572421802951, 0.6036219179588009, 0.5705760180566251, 0.5694757834283644, 0.5900611322870065, 0.6243963505687219, 0.16340610490241603, 0.14183844908599297, 0.13357792510835664, 0.13888020869847462, 0.12436442931826319, 0.124450448717363, 0.16385012559854895, 0.11800277494085953, 0.14883543654402243, 0.08688219675049491, 0.09650721277373486, 0.08535864802154991, 0.09286732596033975, 0.1259789233363039, 0.15811269977447429, 0.08195631412765747, 0.10371317153419768, 0.1406971750054139, 0.10358554372747608, 0.06555569834748531, 0.08937345539070085, 0.08281853514498294, 0.11970184625633296, 0.07897797399606898, 0.08850405712975695, 0.0802626459002771, 0.05232197676756245, 0.882490201386976, 0.8434426152598338, 0.8272843842842847, 0.8402854816103794, 0.8609327067052169, 0.8483117457179643, 0.8804849865570135, 0.8320198377447583, 0.8472749895150827, 0.4031690373531027, 0.39319431005949623, 0.39486570500621965, 0.4333700400696453, 0.39057040441387203, 0.37551391904690967, 0.36089735044633175, 0.3536134315257967, 0.3897712331078306, 0.20663566256025034, 0.13337005282293235, 0.11620365103172514, 0.20954173324640868, 0.16723150077064652, 0.2645792656760426, 0.15073293239690388, 0.1496039273804467, 0.17477509545405678, 0.2058970381629025, 0.24283689091147964, 0.18388348845089697, 0.16982987495045287, 0.19897160259559454, 0.1779131390378319, 0.20460779633121962, 0.13039520731961307, 0.18189232696682078, 0.18262304616307512, 0.1783307956723018, 0.22814944217526667, 0.12916847321036962, 0.17776329804585, 0.1942067246179512, 0.18094368257256532, 0.1964177469017867, 0.12580297908773042, 0.11549224100926514, 0.0006301766826354305, 9.999999999998899e-05, 0.07166920861298809, 0.04116882207940087, 0.039505316184880734, 0.008801684259546305, 9.999999999998899e-05, 0.023804283702438256, 0.09824652969385739, 0.08808744378417088, 0.11689099987010887, 0.05465333575242626, 0.016760046731113865, 0.04054936932502462, 0.17523909038080743, 0.09411761946427177, 0.046925571657189025, 0.07846020941526533, 0.15961502740187083, 0.06636605766326265, 0.049347893352781336, 0.05235921513302233, 0.00874976061175059, 0.06889622738605683, 0.06826133355466246, 0.04585134149209957, 0.18973913688861666, 0.07461190396366768, 0.07529644333701402, 0.0740038054666855, 0.11181257472344042, 0.05186353376636266, 0.13022106228420638, 0.1657416964212689, 0.08053452978715181, 0.48952823403585266, 0.5026871930270679, 0.4770841558687725, 0.4702820033458147, 0.4826940373518972, 0.47994141101706844, 0.521233429945716, 0.46316207806489584, 0.49698525379511815, 0.04257790959154495, 0.05551049276650133, 0.041443000543253894, 0.05931434347959297, 0.077776819714791, 0.08707205678119423, 0.09821759038992717, 0.09428164961191521, 0.062197010906851924, 0.2511227832572187, 0.3383499375928075, 0.19022446084500666, 0.29165865886642206, 0.2502770576354547, 0.13940379511743417, 0.22470905560556764, 0.1795363848530538, 0.32194128766732955, 0.15617609667774923, 0.2611436682418887, 0.19325664526518727, 0.27853115509362747, 0.23475873181931706, 0.2593455548829695, 0.2190892092262955, 0.3281300366284221, 0.1661780977569024, 0.19758777440394437, 0.13556673281131248, 0.18671595832588317, 0.2630746155915419, 0.2153087293068413, 0.16527121042609083, 0.17851964314682078, 0.2396413508597951, 0.11906574065358022, 0.21775716483107732, 0.18434507387257348, 0.20376518728752424, 0.2465290184328215, 0.2046697452465539, 0.2507425871700828, 0.23716004143264746, 0.21147895680033257, 0.19951633434550986, 0.17749623800593128, 0.24512708696687446, 0.19567288444400088, 0.17253567813073445, 0.19230355510402397, 0.18148710950053393, 0.18254871324927946, 0.2046056380965351, 0.1860098329613995, 0.1259810270324635, 0.12265238446728677, 0.1314171503513617, 0.8741348045652921, 0.20050513518248292, 0.8755720307382442, 0.11747613032121407, 0.8512833767840615, 0.865999592290469, 0.5474963450006157, 0.15590258995344086, 0.7610822098154718, 0.7405220942462274, 0.2053630001446557, 0.7119078671832175, 0.09324536521270055, 0.69442608128418, 0.5948344004000115, 0.17756433907757674, 0.1920052832335175, 0.1837159651286222, 0.19013323523560643, 0.19406485898177928, 0.18696385641462543, 0.2218979898736565, 0.18290085895597108, 0.18542892986246673, 0.0999842208134778, 0.07994945919100194, 0.0846191163073432, 0.08379420927922221, 0.09513077481017085, 0.08551823392854818, 0.10234817481630143, 0.0800360245100965, 0.07921517452308469]}, "mutation_prompt": null}
{"id": "40b4d056-8c6d-4131-a87f-3a92e6e7dfd8", "solution": "import numpy as np\n\nclass ImprovedFastAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size  # Dynamic population adjustment every 5% of the budget\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedFastAdaptiveInertiaPSO", "description": "Implementing a novel mechanism to adaptively adjust inertia weight and cognitive parameters based on individual and global performance for faster convergence.", "configspace": "", "generation": 57, "fitness": 0.24444550808696755, "feedback": "The algorithm ImprovedFastAdaptiveInertiaPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.22.", "error": "", "parent_id": "c7f3015c-ebe0-4aac-a540-5dff341b5485", "metadata": {"aucs": [0.6183145227542862, 0.5847094749095562, 0.5894513974052874, 0.599572421802951, 0.6036219179588009, 0.5705760180566251, 0.5694757834283644, 0.5900611322870065, 0.6243963505687219, 0.16340610490241603, 0.14183844908599297, 0.13357792510835664, 0.13888020869847462, 0.12436442931826319, 0.124450448717363, 0.16385012559854895, 0.11800277494085953, 0.14883543654402243, 0.08688219675049491, 0.09650721277373486, 0.08535864802154991, 0.09286732596033975, 0.1259789233363039, 0.15811269977447429, 0.08195631412765747, 0.10371317153419768, 0.1406971750054139, 0.10358554372747608, 0.06555569834748531, 0.08937345539070085, 0.08281853514498294, 0.11970184625633296, 0.07897797399606898, 0.08850405712975695, 0.0802626459002771, 0.05232197676756245, 0.882490201386976, 0.8434426152598338, 0.8272843842842847, 0.8402854816103794, 0.8609327067052169, 0.8483117457179643, 0.8804849865570135, 0.8320198377447583, 0.8472749895150827, 0.4031690373531027, 0.39319431005949623, 0.39486570500621965, 0.4333700400696453, 0.39057040441387203, 0.37551391904690967, 0.36089735044633175, 0.3536134315257967, 0.3897712331078306, 0.20663566256025034, 0.13337005282293235, 0.11620365103172514, 0.20954173324640868, 0.16723150077064652, 0.2645792656760426, 0.15073293239690388, 0.1496039273804467, 0.17477509545405678, 0.2058970381629025, 0.24283689091147964, 0.18388348845089697, 0.16982987495045287, 0.19897160259559454, 0.1779131390378319, 0.20460779633121962, 0.13039520731961307, 0.18189232696682078, 0.18262304616307512, 0.1783307956723018, 0.22814944217526667, 0.12916847321036962, 0.17776329804585, 0.1942067246179512, 0.18094368257256532, 0.1964177469017867, 0.12580297908773042, 0.11549224100926514, 0.0006301766826354305, 9.999999999998899e-05, 0.07166920861298809, 0.04116882207940087, 0.039505316184880734, 0.008801684259546305, 9.999999999998899e-05, 0.023804283702438256, 0.09824652969385739, 0.08808744378417088, 0.11689099987010887, 0.05465333575242626, 0.016760046731113865, 0.04054936932502462, 0.17523909038080743, 0.09411761946427177, 0.046925571657189025, 0.07846020941526533, 0.15961502740187083, 0.06636605766326265, 0.049347893352781336, 0.05235921513302233, 0.00874976061175059, 0.06889622738605683, 0.06826133355466246, 0.04585134149209957, 0.18973913688861666, 0.07461190396366768, 0.07529644333701402, 0.0740038054666855, 0.11181257472344042, 0.05186353376636266, 0.13022106228420638, 0.1657416964212689, 0.08053452978715181, 0.48952823403585266, 0.5026871930270679, 0.4770841558687725, 0.4702820033458147, 0.4826940373518972, 0.47994141101706844, 0.521233429945716, 0.46316207806489584, 0.49698525379511815, 0.04257790959154495, 0.05551049276650133, 0.041443000543253894, 0.05931434347959297, 0.077776819714791, 0.08707205678119423, 0.09821759038992717, 0.09428164961191521, 0.062197010906851924, 0.2511227832572187, 0.3383499375928075, 0.19022446084500666, 0.29165865886642206, 0.2502770576354547, 0.13940379511743417, 0.22470905560556764, 0.1795363848530538, 0.32194128766732955, 0.15617609667774923, 0.2611436682418887, 0.19325664526518727, 0.27853115509362747, 0.23475873181931706, 0.2593455548829695, 0.2190892092262955, 0.3281300366284221, 0.1661780977569024, 0.19758777440394437, 0.13556673281131248, 0.18671595832588317, 0.2630746155915419, 0.2153087293068413, 0.16527121042609083, 0.17851964314682078, 0.2396413508597951, 0.11906574065358022, 0.21775716483107732, 0.18434507387257348, 0.20376518728752424, 0.2465290184328215, 0.2046697452465539, 0.2507425871700828, 0.23716004143264746, 0.21147895680033257, 0.19951633434550986, 0.17749623800593128, 0.24512708696687446, 0.19567288444400088, 0.17253567813073445, 0.19230355510402397, 0.18148710950053393, 0.18254871324927946, 0.2046056380965351, 0.1860098329613995, 0.1259810270324635, 0.12265238446728677, 0.1314171503513617, 0.8741348045652921, 0.20050513518248292, 0.8755720307382442, 0.11747613032121407, 0.8512833767840615, 0.865999592290469, 0.5474963450006157, 0.15590258995344086, 0.7610822098154718, 0.7405220942462274, 0.2053630001446557, 0.7119078671832175, 0.09324536521270055, 0.69442608128418, 0.5948344004000115, 0.17756433907757674, 0.1920052832335175, 0.1837159651286222, 0.19013323523560643, 0.19406485898177928, 0.18696385641462543, 0.2218979898736565, 0.18290085895597108, 0.18542892986246673, 0.0999842208134778, 0.07994945919100194, 0.0846191163073432, 0.08379420927922221, 0.09513077481017085, 0.08551823392854818, 0.10234817481630143, 0.0800360245100965, 0.07921517452308469]}, "mutation_prompt": null}
{"id": "d60b234b-6259-4fd0-9940-dce37a776b5c", "solution": "import numpy as np\n\nclass ImprovedFastAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size  # Dynamic population adjustment every 5% of the budget\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedFastAdaptiveInertiaPSO", "description": "Implementing a novel mechanism to dynamically adjust the population size based on individual performance to enhance convergence speed.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c7f3015c-ebe0-4aac-a540-5dff341b5485", "metadata": {"aucs": [0.6183145227542862, 0.5847094749095562, 0.5894513974052874, 0.599572421802951, 0.6036219179588009, 0.5705760180566251, 0.5694757834283644, 0.5900611322870065, 0.6243963505687219, 0.16340610490241603, 0.14183844908599297, 0.13357792510835664, 0.13888020869847462, 0.12436442931826319, 0.124450448717363, 0.16385012559854895, 0.11800277494085953, 0.14883543654402243, 0.08688219675049491, 0.09650721277373486, 0.08535864802154991, 0.09286732596033975, 0.1259789233363039, 0.15811269977447429, 0.08195631412765747, 0.10371317153419768, 0.1406971750054139, 0.10358554372747608, 0.06555569834748531, 0.08937345539070085, 0.08281853514498294, 0.11970184625633296, 0.07897797399606898, 0.08850405712975695, 0.0802626459002771, 0.05232197676756245, 0.882490201386976, 0.8434426152598338, 0.8272843842842847, 0.8402854816103794, 0.8609327067052169, 0.8483117457179643, 0.8804849865570135, 0.8320198377447583, 0.8472749895150827, 0.4031690373531027, 0.39319431005949623, 0.39486570500621965, 0.4333700400696453, 0.39057040441387203, 0.37551391904690967, 0.36089735044633175, 0.3536134315257967, 0.3897712331078306, 0.20663566256025034, 0.13337005282293235, 0.11620365103172514, 0.20954173324640868, 0.16723150077064652, 0.2645792656760426, 0.15073293239690388, 0.1496039273804467, 0.17477509545405678, 0.2058970381629025, 0.24283689091147964, 0.18388348845089697, 0.16982987495045287, 0.19897160259559454, 0.1779131390378319, 0.20460779633121962, 0.13039520731961307, 0.18189232696682078, 0.18262304616307512, 0.1783307956723018, 0.22814944217526667, 0.12916847321036962, 0.17776329804585, 0.1942067246179512, 0.18094368257256532, 0.1964177469017867, 0.12580297908773042, 0.11549224100926514, 0.0006301766826354305, 9.999999999998899e-05, 0.07166920861298809, 0.04116882207940087, 0.039505316184880734, 0.008801684259546305, 9.999999999998899e-05, 0.023804283702438256, 0.09824652969385739, 0.08808744378417088, 0.11689099987010887, 0.05465333575242626, 0.016760046731113865, 0.04054936932502462, 0.17523909038080743, 0.09411761946427177, 0.046925571657189025, 0.07846020941526533, 0.15961502740187083, 0.06636605766326265, 0.049347893352781336, 0.05235921513302233, 0.00874976061175059, 0.06889622738605683, 0.06826133355466246, 0.04585134149209957, 0.18973913688861666, 0.07461190396366768, 0.07529644333701402, 0.0740038054666855, 0.11181257472344042, 0.05186353376636266, 0.13022106228420638, 0.1657416964212689, 0.08053452978715181, 0.48952823403585266, 0.5026871930270679, 0.4770841558687725, 0.4702820033458147, 0.4826940373518972, 0.47994141101706844, 0.521233429945716, 0.46316207806489584, 0.49698525379511815, 0.04257790959154495, 0.05551049276650133, 0.041443000543253894, 0.05931434347959297, 0.077776819714791, 0.08707205678119423, 0.09821759038992717, 0.09428164961191521, 0.062197010906851924, 0.2511227832572187, 0.3383499375928075, 0.19022446084500666, 0.29165865886642206, 0.2502770576354547, 0.13940379511743417, 0.22470905560556764, 0.1795363848530538, 0.32194128766732955, 0.15617609667774923, 0.2611436682418887, 0.19325664526518727, 0.27853115509362747, 0.23475873181931706, 0.2593455548829695, 0.2190892092262955, 0.3281300366284221, 0.1661780977569024, 0.19758777440394437, 0.13556673281131248, 0.18671595832588317, 0.2630746155915419, 0.2153087293068413, 0.16527121042609083, 0.17851964314682078, 0.2396413508597951, 0.11906574065358022, 0.21775716483107732, 0.18434507387257348, 0.20376518728752424, 0.2465290184328215, 0.2046697452465539, 0.2507425871700828, 0.23716004143264746, 0.21147895680033257, 0.19951633434550986, 0.17749623800593128, 0.24512708696687446, 0.19567288444400088, 0.17253567813073445, 0.19230355510402397, 0.18148710950053393, 0.18254871324927946, 0.2046056380965351, 0.1860098329613995, 0.1259810270324635, 0.12265238446728677, 0.1314171503513617, 0.8741348045652921, 0.20050513518248292, 0.8755720307382442, 0.11747613032121407, 0.8512833767840615, 0.865999592290469, 0.5474963450006157, 0.15590258995344086, 0.7610822098154718, 0.7405220942462274, 0.2053630001446557, 0.7119078671832175, 0.09324536521270055, 0.69442608128418, 0.5948344004000115, 0.17756433907757674, 0.1920052832335175, 0.1837159651286222, 0.19013323523560643, 0.19406485898177928, 0.18696385641462543, 0.2218979898736565, 0.18290085895597108, 0.18542892986246673, 0.0999842208134778, 0.07994945919100194, 0.0846191163073432, 0.08379420927922221, 0.09513077481017085, 0.08551823392854818, 0.10234817481630143, 0.0800360245100965, 0.07921517452308469]}, "mutation_prompt": null}
{"id": "87db7d02-7dfd-42e2-b254-075a7318c0a2", "solution": "import numpy as np\n\nclass ImprovedFastAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size  # Dynamic population adjustment every 5% of the budget\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedFastAdaptiveInertiaPSO", "description": "Implementing a novel mechanism to dynamically adjust the population size based on individual performance to enhance convergence speed.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c7f3015c-ebe0-4aac-a540-5dff341b5485", "metadata": {"aucs": [0.6183145227542862, 0.5847094749095562, 0.5894513974052874, 0.599572421802951, 0.6036219179588009, 0.5705760180566251, 0.5694757834283644, 0.5900611322870065, 0.6243963505687219, 0.16340610490241603, 0.14183844908599297, 0.13357792510835664, 0.13888020869847462, 0.12436442931826319, 0.124450448717363, 0.16385012559854895, 0.11800277494085953, 0.14883543654402243, 0.08688219675049491, 0.09650721277373486, 0.08535864802154991, 0.09286732596033975, 0.1259789233363039, 0.15811269977447429, 0.08195631412765747, 0.10371317153419768, 0.1406971750054139, 0.10358554372747608, 0.06555569834748531, 0.08937345539070085, 0.08281853514498294, 0.11970184625633296, 0.07897797399606898, 0.08850405712975695, 0.0802626459002771, 0.05232197676756245, 0.882490201386976, 0.8434426152598338, 0.8272843842842847, 0.8402854816103794, 0.8609327067052169, 0.8483117457179643, 0.8804849865570135, 0.8320198377447583, 0.8472749895150827, 0.4031690373531027, 0.39319431005949623, 0.39486570500621965, 0.4333700400696453, 0.39057040441387203, 0.37551391904690967, 0.36089735044633175, 0.3536134315257967, 0.3897712331078306, 0.20663566256025034, 0.13337005282293235, 0.11620365103172514, 0.20954173324640868, 0.16723150077064652, 0.2645792656760426, 0.15073293239690388, 0.1496039273804467, 0.17477509545405678, 0.2058970381629025, 0.24283689091147964, 0.18388348845089697, 0.16982987495045287, 0.19897160259559454, 0.1779131390378319, 0.20460779633121962, 0.13039520731961307, 0.18189232696682078, 0.18262304616307512, 0.1783307956723018, 0.22814944217526667, 0.12916847321036962, 0.17776329804585, 0.1942067246179512, 0.18094368257256532, 0.1964177469017867, 0.12580297908773042, 0.11549224100926514, 0.0006301766826354305, 9.999999999998899e-05, 0.07166920861298809, 0.04116882207940087, 0.039505316184880734, 0.008801684259546305, 9.999999999998899e-05, 0.023804283702438256, 0.09824652969385739, 0.08808744378417088, 0.11689099987010887, 0.05465333575242626, 0.016760046731113865, 0.04054936932502462, 0.17523909038080743, 0.09411761946427177, 0.046925571657189025, 0.07846020941526533, 0.15961502740187083, 0.06636605766326265, 0.049347893352781336, 0.05235921513302233, 0.00874976061175059, 0.06889622738605683, 0.06826133355466246, 0.04585134149209957, 0.18973913688861666, 0.07461190396366768, 0.07529644333701402, 0.0740038054666855, 0.11181257472344042, 0.05186353376636266, 0.13022106228420638, 0.1657416964212689, 0.08053452978715181, 0.48952823403585266, 0.5026871930270679, 0.4770841558687725, 0.4702820033458147, 0.4826940373518972, 0.47994141101706844, 0.521233429945716, 0.46316207806489584, 0.49698525379511815, 0.04257790959154495, 0.05551049276650133, 0.041443000543253894, 0.05931434347959297, 0.077776819714791, 0.08707205678119423, 0.09821759038992717, 0.09428164961191521, 0.062197010906851924, 0.2511227832572187, 0.3383499375928075, 0.19022446084500666, 0.29165865886642206, 0.2502770576354547, 0.13940379511743417, 0.22470905560556764, 0.1795363848530538, 0.32194128766732955, 0.15617609667774923, 0.2611436682418887, 0.19325664526518727, 0.27853115509362747, 0.23475873181931706, 0.2593455548829695, 0.2190892092262955, 0.3281300366284221, 0.1661780977569024, 0.19758777440394437, 0.13556673281131248, 0.18671595832588317, 0.2630746155915419, 0.2153087293068413, 0.16527121042609083, 0.17851964314682078, 0.2396413508597951, 0.11906574065358022, 0.21775716483107732, 0.18434507387257348, 0.20376518728752424, 0.2465290184328215, 0.2046697452465539, 0.2507425871700828, 0.23716004143264746, 0.21147895680033257, 0.19951633434550986, 0.17749623800593128, 0.24512708696687446, 0.19567288444400088, 0.17253567813073445, 0.19230355510402397, 0.18148710950053393, 0.18254871324927946, 0.2046056380965351, 0.1860098329613995, 0.1259810270324635, 0.12265238446728677, 0.1314171503513617, 0.8741348045652921, 0.20050513518248292, 0.8755720307382442, 0.11747613032121407, 0.8512833767840615, 0.865999592290469, 0.5474963450006157, 0.15590258995344086, 0.7610822098154718, 0.7405220942462274, 0.2053630001446557, 0.7119078671832175, 0.09324536521270055, 0.69442608128418, 0.5948344004000115, 0.17756433907757674, 0.1920052832335175, 0.1837159651286222, 0.19013323523560643, 0.19406485898177928, 0.18696385641462543, 0.2218979898736565, 0.18290085895597108, 0.18542892986246673, 0.0999842208134778, 0.07994945919100194, 0.0846191163073432, 0.08379420927922221, 0.09513077481017085, 0.08551823392854818, 0.10234817481630143, 0.0800360245100965, 0.07921517452308469]}, "mutation_prompt": null}
{"id": "481fd84e-6ee7-49d5-9be2-5988c9d97897", "solution": "import numpy as np\n\nclass ImprovedFastAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        chaos_map = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i] + chaos_map[i]  # Adding chaotic map acceleration\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size  # Dynamic population adjustment every 5% of the budget\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedFastAdaptiveInertiaPSO", "description": "Implementing a novel acceleration mechanism based on a chaotic map to enhance exploration-exploitation balance.", "configspace": "", "generation": 60, "fitness": 0.07828779687047366, "feedback": "The algorithm ImprovedFastAdaptiveInertiaPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.17.", "error": "", "parent_id": "c7f3015c-ebe0-4aac-a540-5dff341b5485", "metadata": {"aucs": [0.09542459534696957, 0.06432772651221763, 0.09169502728636048, 0.08952233024927114, 0.06477484150281476, 0.09049547649788492, 0.11464562128624967, 0.07431300570909605, 0.0735176718123286, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 0.02088444528057576, 0.02265960127593536, 0.0012186513362246743, 0.006669962766643223, 0.018248263482334326, 9.999999999998899e-05, 0.010674738340807233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 0.0004952459975243739, 9.999999999998899e-05, 0.007045139372484521, 9.999999999998899e-05, 9.999999999998899e-05, 0.07528605899253293, 0.991224907206724, 0.9452456114400919, 0.9859710597735907, 0.15794047100758257, 0.9563178763757884, 0.99193672930866, 0.983123371459757, 0.9874541399722604, 9.999999999998899e-05, 0.04773096282082301, 9.999999999998899e-05, 0.007981442204734623, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 0.036056417499867766, 0.06537668523448448, 0.10027683525177622, 0.03775594762470191, 0.052233822106523387, 0.0667108215001172, 0.06158823486803344, 9.999999999998899e-05, 0.026279303607937843, 0.06607700830668928, 0.03561091140444861, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023934603734102722, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0057955625967420765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00814357698295276, 9.999999999998899e-05, 9.999999999998899e-05, 0.012399186435032461, 9.999999999998899e-05, 0.006560164299577953, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11574299478947492, 0.13879659513922615, 0.14838054695461433, 0.11624321440773833, 0.09708865527373767, 0.11009705202202258, 0.18337355905882158, 0.09716408355800721, 0.1210557193025883, 0.011790280479524684, 0.0018795596329944653, 9.999999999998899e-05, 0.011268557601409879, 0.0030439034891626138, 0.01759993274736349, 0.01063946793103443, 0.006013354805136206, 0.0267656688986897, 0.09322676009136688, 0.11472855447076402, 0.10852620185413575, 0.106438700962741, 0.10852972522114013, 0.10899199415172012, 0.08886595660178986, 0.08913717493734696, 0.14473737097657757, 0.10653116227307713, 0.10676103221723732, 0.14352810184653642, 0.13800672315110074, 0.1138073754026484, 0.11904154495704933, 0.12028165949079228, 0.17377774300845283, 0.11363346445524236, 0.04239146810502992, 0.05997513775268615, 0.07843235219147315, 0.056957211629895754, 0.06406947898089654, 0.06342850570876157, 0.0837317855149382, 0.0997711199450243, 0.06412526395900253, 0.11943364695601921, 0.09388200728521401, 0.13345086981233123, 0.11322735855655641, 0.10570305455510665, 0.12366298397100328, 0.12570688199446634, 0.07872931414554718, 0.1261963614278906, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07420406767427434, 0.13135494507407763, 0.08167024703901915, 0.12041204249338111, 0.1207914665021157, 0.06661401029160186, 0.07406883421472854, 0.09643604708838482, 0.0847928396241201, 0.11040265245322212, 0.10051730792859848, 0.04203183121100407, 0.10435756675532681, 0.03738259240699027, 0.045511073114331335, 0.06294474674545514, 0.06367593810046424, 0.08812053127344555, 0.16006359555783745, 0.18516944235583221, 0.18339941426332318, 0.16055463737600728, 0.1899364595667895, 0.1954211906702782, 0.18276749795415947, 0.16822480705788945, 0.20294148873475326, 0.025170667788650958, 0.015916393435176368, 0.031393493129599714, 0.027015293023570086, 0.03425093938292756, 0.020045516730027746, 0.016228383701229143, 0.013367966104130047, 0.0203289317216091]}, "mutation_prompt": null}
{"id": "9466835a-e956-414c-ac33-e931c739c793", "solution": "import numpy as np\n\nclass ImprovedFastAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size  # Dynamic population adjustment every 5% of the budget\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedFastAdaptiveInertiaPSO", "description": "Implementing a novel mechanism to adaptively update the individual velocities based on their personal best positions to expedite convergence speed.", "configspace": "", "generation": 61, "fitness": 0.24444550808696755, "feedback": "The algorithm ImprovedFastAdaptiveInertiaPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.22.", "error": "", "parent_id": "c7f3015c-ebe0-4aac-a540-5dff341b5485", "metadata": {"aucs": [0.6183145227542862, 0.5847094749095562, 0.5894513974052874, 0.599572421802951, 0.6036219179588009, 0.5705760180566251, 0.5694757834283644, 0.5900611322870065, 0.6243963505687219, 0.16340610490241603, 0.14183844908599297, 0.13357792510835664, 0.13888020869847462, 0.12436442931826319, 0.124450448717363, 0.16385012559854895, 0.11800277494085953, 0.14883543654402243, 0.08688219675049491, 0.09650721277373486, 0.08535864802154991, 0.09286732596033975, 0.1259789233363039, 0.15811269977447429, 0.08195631412765747, 0.10371317153419768, 0.1406971750054139, 0.10358554372747608, 0.06555569834748531, 0.08937345539070085, 0.08281853514498294, 0.11970184625633296, 0.07897797399606898, 0.08850405712975695, 0.0802626459002771, 0.05232197676756245, 0.882490201386976, 0.8434426152598338, 0.8272843842842847, 0.8402854816103794, 0.8609327067052169, 0.8483117457179643, 0.8804849865570135, 0.8320198377447583, 0.8472749895150827, 0.4031690373531027, 0.39319431005949623, 0.39486570500621965, 0.4333700400696453, 0.39057040441387203, 0.37551391904690967, 0.36089735044633175, 0.3536134315257967, 0.3897712331078306, 0.20663566256025034, 0.13337005282293235, 0.11620365103172514, 0.20954173324640868, 0.16723150077064652, 0.2645792656760426, 0.15073293239690388, 0.1496039273804467, 0.17477509545405678, 0.2058970381629025, 0.24283689091147964, 0.18388348845089697, 0.16982987495045287, 0.19897160259559454, 0.1779131390378319, 0.20460779633121962, 0.13039520731961307, 0.18189232696682078, 0.18262304616307512, 0.1783307956723018, 0.22814944217526667, 0.12916847321036962, 0.17776329804585, 0.1942067246179512, 0.18094368257256532, 0.1964177469017867, 0.12580297908773042, 0.11549224100926514, 0.0006301766826354305, 9.999999999998899e-05, 0.07166920861298809, 0.04116882207940087, 0.039505316184880734, 0.008801684259546305, 9.999999999998899e-05, 0.023804283702438256, 0.09824652969385739, 0.08808744378417088, 0.11689099987010887, 0.05465333575242626, 0.016760046731113865, 0.04054936932502462, 0.17523909038080743, 0.09411761946427177, 0.046925571657189025, 0.07846020941526533, 0.15961502740187083, 0.06636605766326265, 0.049347893352781336, 0.05235921513302233, 0.00874976061175059, 0.06889622738605683, 0.06826133355466246, 0.04585134149209957, 0.18973913688861666, 0.07461190396366768, 0.07529644333701402, 0.0740038054666855, 0.11181257472344042, 0.05186353376636266, 0.13022106228420638, 0.1657416964212689, 0.08053452978715181, 0.48952823403585266, 0.5026871930270679, 0.4770841558687725, 0.4702820033458147, 0.4826940373518972, 0.47994141101706844, 0.521233429945716, 0.46316207806489584, 0.49698525379511815, 0.04257790959154495, 0.05551049276650133, 0.041443000543253894, 0.05931434347959297, 0.077776819714791, 0.08707205678119423, 0.09821759038992717, 0.09428164961191521, 0.062197010906851924, 0.2511227832572187, 0.3383499375928075, 0.19022446084500666, 0.29165865886642206, 0.2502770576354547, 0.13940379511743417, 0.22470905560556764, 0.1795363848530538, 0.32194128766732955, 0.15617609667774923, 0.2611436682418887, 0.19325664526518727, 0.27853115509362747, 0.23475873181931706, 0.2593455548829695, 0.2190892092262955, 0.3281300366284221, 0.1661780977569024, 0.19758777440394437, 0.13556673281131248, 0.18671595832588317, 0.2630746155915419, 0.2153087293068413, 0.16527121042609083, 0.17851964314682078, 0.2396413508597951, 0.11906574065358022, 0.21775716483107732, 0.18434507387257348, 0.20376518728752424, 0.2465290184328215, 0.2046697452465539, 0.2507425871700828, 0.23716004143264746, 0.21147895680033257, 0.19951633434550986, 0.17749623800593128, 0.24512708696687446, 0.19567288444400088, 0.17253567813073445, 0.19230355510402397, 0.18148710950053393, 0.18254871324927946, 0.2046056380965351, 0.1860098329613995, 0.1259810270324635, 0.12265238446728677, 0.1314171503513617, 0.8741348045652921, 0.20050513518248292, 0.8755720307382442, 0.11747613032121407, 0.8512833767840615, 0.865999592290469, 0.5474963450006157, 0.15590258995344086, 0.7610822098154718, 0.7405220942462274, 0.2053630001446557, 0.7119078671832175, 0.09324536521270055, 0.69442608128418, 0.5948344004000115, 0.17756433907757674, 0.1920052832335175, 0.1837159651286222, 0.19013323523560643, 0.19406485898177928, 0.18696385641462543, 0.2218979898736565, 0.18290085895597108, 0.18542892986246673, 0.0999842208134778, 0.07994945919100194, 0.0846191163073432, 0.08379420927922221, 0.09513077481017085, 0.08551823392854818, 0.10234817481630143, 0.0800360245100965, 0.07921517452308469]}, "mutation_prompt": null}
{"id": "628514c3-9d37-4d85-aa46-a58b54746b27", "solution": "import numpy as np\n\nclass ImprovedFastAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size  # Dynamic population adjustment every 5% of the budget\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedFastAdaptiveInertiaPSO", "description": "Implementing a novel mechanism to dynamically adjust the population size based on individual performance to enhance convergence speed.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c7f3015c-ebe0-4aac-a540-5dff341b5485", "metadata": {"aucs": [0.6183145227542862, 0.5847094749095562, 0.5894513974052874, 0.599572421802951, 0.6036219179588009, 0.5705760180566251, 0.5694757834283644, 0.5900611322870065, 0.6243963505687219, 0.16340610490241603, 0.14183844908599297, 0.13357792510835664, 0.13888020869847462, 0.12436442931826319, 0.124450448717363, 0.16385012559854895, 0.11800277494085953, 0.14883543654402243, 0.08688219675049491, 0.09650721277373486, 0.08535864802154991, 0.09286732596033975, 0.1259789233363039, 0.15811269977447429, 0.08195631412765747, 0.10371317153419768, 0.1406971750054139, 0.10358554372747608, 0.06555569834748531, 0.08937345539070085, 0.08281853514498294, 0.11970184625633296, 0.07897797399606898, 0.08850405712975695, 0.0802626459002771, 0.05232197676756245, 0.882490201386976, 0.8434426152598338, 0.8272843842842847, 0.8402854816103794, 0.8609327067052169, 0.8483117457179643, 0.8804849865570135, 0.8320198377447583, 0.8472749895150827, 0.4031690373531027, 0.39319431005949623, 0.39486570500621965, 0.4333700400696453, 0.39057040441387203, 0.37551391904690967, 0.36089735044633175, 0.3536134315257967, 0.3897712331078306, 0.20663566256025034, 0.13337005282293235, 0.11620365103172514, 0.20954173324640868, 0.16723150077064652, 0.2645792656760426, 0.15073293239690388, 0.1496039273804467, 0.17477509545405678, 0.2058970381629025, 0.24283689091147964, 0.18388348845089697, 0.16982987495045287, 0.19897160259559454, 0.1779131390378319, 0.20460779633121962, 0.13039520731961307, 0.18189232696682078, 0.18262304616307512, 0.1783307956723018, 0.22814944217526667, 0.12916847321036962, 0.17776329804585, 0.1942067246179512, 0.18094368257256532, 0.1964177469017867, 0.12580297908773042, 0.11549224100926514, 0.0006301766826354305, 9.999999999998899e-05, 0.07166920861298809, 0.04116882207940087, 0.039505316184880734, 0.008801684259546305, 9.999999999998899e-05, 0.023804283702438256, 0.09824652969385739, 0.08808744378417088, 0.11689099987010887, 0.05465333575242626, 0.016760046731113865, 0.04054936932502462, 0.17523909038080743, 0.09411761946427177, 0.046925571657189025, 0.07846020941526533, 0.15961502740187083, 0.06636605766326265, 0.049347893352781336, 0.05235921513302233, 0.00874976061175059, 0.06889622738605683, 0.06826133355466246, 0.04585134149209957, 0.18973913688861666, 0.07461190396366768, 0.07529644333701402, 0.0740038054666855, 0.11181257472344042, 0.05186353376636266, 0.13022106228420638, 0.1657416964212689, 0.08053452978715181, 0.48952823403585266, 0.5026871930270679, 0.4770841558687725, 0.4702820033458147, 0.4826940373518972, 0.47994141101706844, 0.521233429945716, 0.46316207806489584, 0.49698525379511815, 0.04257790959154495, 0.05551049276650133, 0.041443000543253894, 0.05931434347959297, 0.077776819714791, 0.08707205678119423, 0.09821759038992717, 0.09428164961191521, 0.062197010906851924, 0.2511227832572187, 0.3383499375928075, 0.19022446084500666, 0.29165865886642206, 0.2502770576354547, 0.13940379511743417, 0.22470905560556764, 0.1795363848530538, 0.32194128766732955, 0.15617609667774923, 0.2611436682418887, 0.19325664526518727, 0.27853115509362747, 0.23475873181931706, 0.2593455548829695, 0.2190892092262955, 0.3281300366284221, 0.1661780977569024, 0.19758777440394437, 0.13556673281131248, 0.18671595832588317, 0.2630746155915419, 0.2153087293068413, 0.16527121042609083, 0.17851964314682078, 0.2396413508597951, 0.11906574065358022, 0.21775716483107732, 0.18434507387257348, 0.20376518728752424, 0.2465290184328215, 0.2046697452465539, 0.2507425871700828, 0.23716004143264746, 0.21147895680033257, 0.19951633434550986, 0.17749623800593128, 0.24512708696687446, 0.19567288444400088, 0.17253567813073445, 0.19230355510402397, 0.18148710950053393, 0.18254871324927946, 0.2046056380965351, 0.1860098329613995, 0.1259810270324635, 0.12265238446728677, 0.1314171503513617, 0.8741348045652921, 0.20050513518248292, 0.8755720307382442, 0.11747613032121407, 0.8512833767840615, 0.865999592290469, 0.5474963450006157, 0.15590258995344086, 0.7610822098154718, 0.7405220942462274, 0.2053630001446557, 0.7119078671832175, 0.09324536521270055, 0.69442608128418, 0.5948344004000115, 0.17756433907757674, 0.1920052832335175, 0.1837159651286222, 0.19013323523560643, 0.19406485898177928, 0.18696385641462543, 0.2218979898736565, 0.18290085895597108, 0.18542892986246673, 0.0999842208134778, 0.07994945919100194, 0.0846191163073432, 0.08379420927922221, 0.09513077481017085, 0.08551823392854818, 0.10234817481630143, 0.0800360245100965, 0.07921517452308469]}, "mutation_prompt": null}
{"id": "1e9fe2e3-c51b-4b1c-8bc6-20c4b0b80c08", "solution": "import numpy as np\n\nclass ImprovedFastAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size  # Dynamic population adjustment every 5% of the budget\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedFastAdaptiveInertiaPSO", "description": "Implementing a novel mechanism to dynamically adjust the population size based on individual performance to enhance convergence speed.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c7f3015c-ebe0-4aac-a540-5dff341b5485", "metadata": {"aucs": [0.6183145227542862, 0.5847094749095562, 0.5894513974052874, 0.599572421802951, 0.6036219179588009, 0.5705760180566251, 0.5694757834283644, 0.5900611322870065, 0.6243963505687219, 0.16340610490241603, 0.14183844908599297, 0.13357792510835664, 0.13888020869847462, 0.12436442931826319, 0.124450448717363, 0.16385012559854895, 0.11800277494085953, 0.14883543654402243, 0.08688219675049491, 0.09650721277373486, 0.08535864802154991, 0.09286732596033975, 0.1259789233363039, 0.15811269977447429, 0.08195631412765747, 0.10371317153419768, 0.1406971750054139, 0.10358554372747608, 0.06555569834748531, 0.08937345539070085, 0.08281853514498294, 0.11970184625633296, 0.07897797399606898, 0.08850405712975695, 0.0802626459002771, 0.05232197676756245, 0.882490201386976, 0.8434426152598338, 0.8272843842842847, 0.8402854816103794, 0.8609327067052169, 0.8483117457179643, 0.8804849865570135, 0.8320198377447583, 0.8472749895150827, 0.4031690373531027, 0.39319431005949623, 0.39486570500621965, 0.4333700400696453, 0.39057040441387203, 0.37551391904690967, 0.36089735044633175, 0.3536134315257967, 0.3897712331078306, 0.20663566256025034, 0.13337005282293235, 0.11620365103172514, 0.20954173324640868, 0.16723150077064652, 0.2645792656760426, 0.15073293239690388, 0.1496039273804467, 0.17477509545405678, 0.2058970381629025, 0.24283689091147964, 0.18388348845089697, 0.16982987495045287, 0.19897160259559454, 0.1779131390378319, 0.20460779633121962, 0.13039520731961307, 0.18189232696682078, 0.18262304616307512, 0.1783307956723018, 0.22814944217526667, 0.12916847321036962, 0.17776329804585, 0.1942067246179512, 0.18094368257256532, 0.1964177469017867, 0.12580297908773042, 0.11549224100926514, 0.0006301766826354305, 9.999999999998899e-05, 0.07166920861298809, 0.04116882207940087, 0.039505316184880734, 0.008801684259546305, 9.999999999998899e-05, 0.023804283702438256, 0.09824652969385739, 0.08808744378417088, 0.11689099987010887, 0.05465333575242626, 0.016760046731113865, 0.04054936932502462, 0.17523909038080743, 0.09411761946427177, 0.046925571657189025, 0.07846020941526533, 0.15961502740187083, 0.06636605766326265, 0.049347893352781336, 0.05235921513302233, 0.00874976061175059, 0.06889622738605683, 0.06826133355466246, 0.04585134149209957, 0.18973913688861666, 0.07461190396366768, 0.07529644333701402, 0.0740038054666855, 0.11181257472344042, 0.05186353376636266, 0.13022106228420638, 0.1657416964212689, 0.08053452978715181, 0.48952823403585266, 0.5026871930270679, 0.4770841558687725, 0.4702820033458147, 0.4826940373518972, 0.47994141101706844, 0.521233429945716, 0.46316207806489584, 0.49698525379511815, 0.04257790959154495, 0.05551049276650133, 0.041443000543253894, 0.05931434347959297, 0.077776819714791, 0.08707205678119423, 0.09821759038992717, 0.09428164961191521, 0.062197010906851924, 0.2511227832572187, 0.3383499375928075, 0.19022446084500666, 0.29165865886642206, 0.2502770576354547, 0.13940379511743417, 0.22470905560556764, 0.1795363848530538, 0.32194128766732955, 0.15617609667774923, 0.2611436682418887, 0.19325664526518727, 0.27853115509362747, 0.23475873181931706, 0.2593455548829695, 0.2190892092262955, 0.3281300366284221, 0.1661780977569024, 0.19758777440394437, 0.13556673281131248, 0.18671595832588317, 0.2630746155915419, 0.2153087293068413, 0.16527121042609083, 0.17851964314682078, 0.2396413508597951, 0.11906574065358022, 0.21775716483107732, 0.18434507387257348, 0.20376518728752424, 0.2465290184328215, 0.2046697452465539, 0.2507425871700828, 0.23716004143264746, 0.21147895680033257, 0.19951633434550986, 0.17749623800593128, 0.24512708696687446, 0.19567288444400088, 0.17253567813073445, 0.19230355510402397, 0.18148710950053393, 0.18254871324927946, 0.2046056380965351, 0.1860098329613995, 0.1259810270324635, 0.12265238446728677, 0.1314171503513617, 0.8741348045652921, 0.20050513518248292, 0.8755720307382442, 0.11747613032121407, 0.8512833767840615, 0.865999592290469, 0.5474963450006157, 0.15590258995344086, 0.7610822098154718, 0.7405220942462274, 0.2053630001446557, 0.7119078671832175, 0.09324536521270055, 0.69442608128418, 0.5948344004000115, 0.17756433907757674, 0.1920052832335175, 0.1837159651286222, 0.19013323523560643, 0.19406485898177928, 0.18696385641462543, 0.2218979898736565, 0.18290085895597108, 0.18542892986246673, 0.0999842208134778, 0.07994945919100194, 0.0846191163073432, 0.08379420927922221, 0.09513077481017085, 0.08551823392854818, 0.10234817481630143, 0.0800360245100965, 0.07921517452308469]}, "mutation_prompt": null}
{"id": "5d400996-f0cd-4d29-919d-bf69940b374d", "solution": "import numpy as np\n\nclass ImprovedFasterAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 40\n        self.max_vel = 0.25\n        self.c1_min, self.c1_max = 1.3, 2.7\n        self.c2_min, self.c2_max = 1.3, 2.7\n        self.inertia_min = 0.35\n        self.inertia_max = 0.95\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(40 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size  # Dynamic population adjustment every 5% of the budget\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (40 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (40 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(40 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedFasterAdaptiveInertiaPSO", "description": "Implementing a novel strategy to dynamically adjust the velocity update coefficients and population size more aggressively to enhance convergence speed.", "configspace": "", "generation": 64, "fitness": 0.2308843690037796, "feedback": "The algorithm ImprovedFasterAdaptiveInertiaPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "c7f3015c-ebe0-4aac-a540-5dff341b5485", "metadata": {"aucs": [0.5195231314988654, 0.47971399524066205, 0.5473269175886524, 0.5193771963740967, 0.5052105066067516, 0.5088315438438795, 0.484597100448628, 0.49063683177546025, 0.5360360961622669, 0.09598269133248671, 0.070739771654721, 0.07926593064156584, 0.0018160981554959932, 0.08429572939797658, 0.07611142569462304, 0.04058714001257391, 0.025932336131798128, 0.015593051619410825, 0.11246990235626686, 0.13281317359485378, 0.09120869622218253, 0.09574063335960292, 0.12192772398437812, 0.12677888895406053, 0.10696654136475814, 0.15497965629566024, 0.14050091882671334, 0.1119305882355639, 0.08645823075892023, 0.07653073406641742, 0.09614971372409253, 0.11116130677700553, 0.08992401284288065, 0.09072573594121058, 0.11418704450285644, 0.09092144446892003, 0.8669776623189072, 0.8697326377483581, 0.8609827340143497, 0.8491610118882011, 0.8397752668499988, 0.8548926322263891, 0.8578670749810711, 0.8450699488954159, 0.8578138263868023, 0.32460709083289163, 0.33859348335745376, 0.29359970349246467, 0.3609019929905537, 0.3207275370041093, 0.3377068226376184, 0.3176027627937802, 0.3094663000452349, 0.3360546957061491, 0.8740033372400515, 0.15470330773208119, 0.13898024209924476, 0.2530633562562222, 0.20687687407455124, 0.7293205885002091, 0.15048683252947248, 0.17482152331828327, 0.21559381412020517, 0.1647586851150652, 0.13147491362579222, 0.19963195487696894, 0.16343297897332598, 0.18830763273622286, 0.10813437830846906, 0.25799348385023013, 0.24946935042020957, 0.1645467257487775, 0.12869130023423947, 0.12722507594423982, 0.19091545991704917, 0.19877183205775684, 0.15866944376948344, 0.1310825310360446, 0.18159968184610076, 0.20126503328147471, 0.1953471617472835, 0.009527330819191548, 9.999999999998899e-05, 0.11057342809182624, 0.01516516688710745, 9.999999999998899e-05, 9.999999999998899e-05, 0.04228928610237326, 9.999999999998899e-05, 9.999999999998899e-05, 0.1242018275026856, 0.10799091941842376, 0.215212342557209, 0.07872123498816241, 0.030046610804784213, 0.0463381209387016, 0.08750401262423324, 0.09820830831461203, 0.045945088524599664, 0.003867756867769967, 9.999999999998899e-05, 0.001139726070635283, 0.02074270671411982, 0.027110620812252684, 0.00016457569477246192, 0.015186818332634133, 0.0007727497980442033, 0.001585992625317556, 0.07707597360849816, 0.13584138809327073, 0.07680946829903823, 0.07680240300211849, 0.09668244257774838, 0.06734664566379511, 0.09156474390862879, 0.1335594655599558, 0.07505367430735654, 0.4254050686806703, 0.43667641800166634, 0.4239488081695507, 0.4421604619476366, 0.42327864517553704, 0.42712888349817724, 0.4517865982255006, 0.4253972155086623, 0.44061445560348833, 0.05500792851770331, 0.06930100660779426, 0.057852276275939585, 0.08888336735806257, 0.08552112955889402, 0.12896441170083017, 0.10756957442526416, 0.11075321313372644, 0.0991646401242735, 0.15431148720130383, 0.1569962781751577, 0.17802373890034706, 0.29463837994750486, 0.2522025813318042, 0.16972000787510022, 0.24976506630603212, 0.24921266529016917, 0.2094493201126112, 0.20372101441667, 0.27015085097757974, 0.21224871150425428, 0.3037082383563974, 0.2468498278516177, 0.3410185983279064, 0.23633538564545697, 0.31257566991790886, 0.246715632548418, 0.20523929177088407, 0.22662203771920264, 0.2057849096083133, 0.1914065699788029, 0.17866592506220658, 0.17071526121103053, 0.17765391753863546, 0.26367067979557224, 0.22654768140640635, 0.23492640150995192, 0.2232885977712158, 0.1934804026947755, 0.21348057296703593, 0.23460814825476894, 0.21067462885871469, 0.2359020007706455, 0.26139772188666244, 0.17281486036861493, 0.1901353820211843, 0.2393125908115532, 0.17006841654709626, 0.18566190088356704, 0.20724062710196767, 0.1886657368427106, 0.18206019789790007, 0.21897687606024363, 0.1687919112331574, 0.12316197078403002, 0.1742095407296096, 0.18458201930615992, 0.7390353429720344, 0.19835940085136172, 0.7468655776829031, 0.1423868642832482, 0.7931616694802244, 0.7116925986870684, 0.5317579198262661, 0.1557517206011806, 0.7097627295173605, 0.2018812262200802, 0.20422179978411203, 0.15013658421451126, 0.3615971079544458, 0.5552702946331057, 0.48327402961164156, 0.18285779539337887, 0.18245203032025725, 0.20749204069919847, 0.19572445858908627, 0.1809324382343226, 0.1814176681370605, 0.1935339334721372, 0.18168581703255926, 0.18788047853215084, 0.09024139884450944, 0.09988498730630668, 0.08765909590485332, 0.09053977736187457, 0.11756096128321514, 0.07755492869828673, 0.10776758667008057, 0.06445459857213032, 0.08214055335827597]}, "mutation_prompt": null}
{"id": "d83993f6-2fc9-46cb-a645-e12ee09a4723", "solution": "import numpy as np\n\nclass ImprovedFastAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size  # Dynamic population adjustment every 5% of the budget\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedFastAdaptiveInertiaPSO", "description": "Implementing a novel mechanism to dynamically adjust the population size based on individual performance to enhance convergence speed.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c7f3015c-ebe0-4aac-a540-5dff341b5485", "metadata": {"aucs": [0.6183145227542862, 0.5847094749095562, 0.5894513974052874, 0.599572421802951, 0.6036219179588009, 0.5705760180566251, 0.5694757834283644, 0.5900611322870065, 0.6243963505687219, 0.16340610490241603, 0.14183844908599297, 0.13357792510835664, 0.13888020869847462, 0.12436442931826319, 0.124450448717363, 0.16385012559854895, 0.11800277494085953, 0.14883543654402243, 0.08688219675049491, 0.09650721277373486, 0.08535864802154991, 0.09286732596033975, 0.1259789233363039, 0.15811269977447429, 0.08195631412765747, 0.10371317153419768, 0.1406971750054139, 0.10358554372747608, 0.06555569834748531, 0.08937345539070085, 0.08281853514498294, 0.11970184625633296, 0.07897797399606898, 0.08850405712975695, 0.0802626459002771, 0.05232197676756245, 0.882490201386976, 0.8434426152598338, 0.8272843842842847, 0.8402854816103794, 0.8609327067052169, 0.8483117457179643, 0.8804849865570135, 0.8320198377447583, 0.8472749895150827, 0.4031690373531027, 0.39319431005949623, 0.39486570500621965, 0.4333700400696453, 0.39057040441387203, 0.37551391904690967, 0.36089735044633175, 0.3536134315257967, 0.3897712331078306, 0.20663566256025034, 0.13337005282293235, 0.11620365103172514, 0.20954173324640868, 0.16723150077064652, 0.2645792656760426, 0.15073293239690388, 0.1496039273804467, 0.17477509545405678, 0.2058970381629025, 0.24283689091147964, 0.18388348845089697, 0.16982987495045287, 0.19897160259559454, 0.1779131390378319, 0.20460779633121962, 0.13039520731961307, 0.18189232696682078, 0.18262304616307512, 0.1783307956723018, 0.22814944217526667, 0.12916847321036962, 0.17776329804585, 0.1942067246179512, 0.18094368257256532, 0.1964177469017867, 0.12580297908773042, 0.11549224100926514, 0.0006301766826354305, 9.999999999998899e-05, 0.07166920861298809, 0.04116882207940087, 0.039505316184880734, 0.008801684259546305, 9.999999999998899e-05, 0.023804283702438256, 0.09824652969385739, 0.08808744378417088, 0.11689099987010887, 0.05465333575242626, 0.016760046731113865, 0.04054936932502462, 0.17523909038080743, 0.09411761946427177, 0.046925571657189025, 0.07846020941526533, 0.15961502740187083, 0.06636605766326265, 0.049347893352781336, 0.05235921513302233, 0.00874976061175059, 0.06889622738605683, 0.06826133355466246, 0.04585134149209957, 0.18973913688861666, 0.07461190396366768, 0.07529644333701402, 0.0740038054666855, 0.11181257472344042, 0.05186353376636266, 0.13022106228420638, 0.1657416964212689, 0.08053452978715181, 0.48952823403585266, 0.5026871930270679, 0.4770841558687725, 0.4702820033458147, 0.4826940373518972, 0.47994141101706844, 0.521233429945716, 0.46316207806489584, 0.49698525379511815, 0.04257790959154495, 0.05551049276650133, 0.041443000543253894, 0.05931434347959297, 0.077776819714791, 0.08707205678119423, 0.09821759038992717, 0.09428164961191521, 0.062197010906851924, 0.2511227832572187, 0.3383499375928075, 0.19022446084500666, 0.29165865886642206, 0.2502770576354547, 0.13940379511743417, 0.22470905560556764, 0.1795363848530538, 0.32194128766732955, 0.15617609667774923, 0.2611436682418887, 0.19325664526518727, 0.27853115509362747, 0.23475873181931706, 0.2593455548829695, 0.2190892092262955, 0.3281300366284221, 0.1661780977569024, 0.19758777440394437, 0.13556673281131248, 0.18671595832588317, 0.2630746155915419, 0.2153087293068413, 0.16527121042609083, 0.17851964314682078, 0.2396413508597951, 0.11906574065358022, 0.21775716483107732, 0.18434507387257348, 0.20376518728752424, 0.2465290184328215, 0.2046697452465539, 0.2507425871700828, 0.23716004143264746, 0.21147895680033257, 0.19951633434550986, 0.17749623800593128, 0.24512708696687446, 0.19567288444400088, 0.17253567813073445, 0.19230355510402397, 0.18148710950053393, 0.18254871324927946, 0.2046056380965351, 0.1860098329613995, 0.1259810270324635, 0.12265238446728677, 0.1314171503513617, 0.8741348045652921, 0.20050513518248292, 0.8755720307382442, 0.11747613032121407, 0.8512833767840615, 0.865999592290469, 0.5474963450006157, 0.15590258995344086, 0.7610822098154718, 0.7405220942462274, 0.2053630001446557, 0.7119078671832175, 0.09324536521270055, 0.69442608128418, 0.5948344004000115, 0.17756433907757674, 0.1920052832335175, 0.1837159651286222, 0.19013323523560643, 0.19406485898177928, 0.18696385641462543, 0.2218979898736565, 0.18290085895597108, 0.18542892986246673, 0.0999842208134778, 0.07994945919100194, 0.0846191163073432, 0.08379420927922221, 0.09513077481017085, 0.08551823392854818, 0.10234817481630143, 0.0800360245100965, 0.07921517452308469]}, "mutation_prompt": null}
{"id": "539bce3d-de02-43c0-9e2d-7de9c862300d", "solution": "import numpy as np\nimport concurrent.futures\n\nclass ImprovedFastAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        with concurrent.futures.ThreadPoolExecutor() as executor:\n            for _ in range(self.budget):\n                fitness = np.array(list(executor.map(func, self.position)))\n                for i in range(self.pop_size):\n                    if fitness[i] < self.personal_best_val[i]:\n                        self.personal_best_val[i] = fitness[i]\n                        self.personal_best_pos[i] = np.copy(self.position[i])\n                    if fitness[i] < self.global_best_val:\n                        self.global_best_val = fitness[i]\n                        self.global_best_pos = np.copy(self.position[i])\n                inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n                c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n                c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n                for i in range(self.pop_size):\n                    r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                    self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                    self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                    self.position[i] += self.velocity[i]\n                    self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n                self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size  # Dynamic population adjustment every 5% of the budget\n                self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n                self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n                self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n                self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedFastAdaptiveInertiaPSO", "description": "Implementing a parallel evaluation strategy for fitness function computations to enhance optimization speed.", "configspace": "", "generation": 66, "fitness": 0.24424505721011572, "feedback": "The algorithm ImprovedFastAdaptiveInertiaPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.22.", "error": "", "parent_id": "c7f3015c-ebe0-4aac-a540-5dff341b5485", "metadata": {"aucs": [0.6183145227542862, 0.5847094749095562, 0.5894513974052874, 0.599572421802951, 0.6036219179588009, 0.5705760180566251, 0.5694757834283644, 0.5900611322870065, 0.6243963505687219, 0.16340610490241603, 0.14183844908599297, 0.13357792510835664, 0.18537242391226505, 0.12436442931826319, 0.124450448717363, 0.16385012559854895, 0.11800277494085953, 0.14883543654402243, 0.08688219675049491, 0.09650721277373486, 0.08535864802154991, 0.09286732596033975, 0.1259789233363039, 0.15811269977447429, 0.08195631412765747, 0.10371317153419768, 0.1406971750054139, 0.10358554372747608, 0.06555569834748531, 0.08937345539070085, 0.08281853514498294, 0.1191919232897859, 0.07897797399606898, 0.08850405712975695, 0.0802626459002771, 0.05232197676756245, 0.882490201386976, 0.8434426152598338, 0.8272843842842847, 0.8402854816103794, 0.8609327067052169, 0.8483117457179643, 0.8804849865570135, 0.8320198377447583, 0.8472749895150827, 0.4031690373531027, 0.39319431005949623, 0.39486570500621965, 0.4333700400696453, 0.39057040441387203, 0.37551391904690967, 0.36089735044633175, 0.3536134315257967, 0.3897712331078306, 0.20663566256025034, 0.13337005282293235, 0.11620365103172514, 0.20954173324640868, 0.16723150077064652, 0.2645792656760426, 0.15073293239690388, 0.1496039273804467, 0.17477509545405678, 0.2058970381629025, 0.24283689091147964, 0.18388348845089697, 0.16982987495045287, 0.19897160259559454, 0.1779131390378319, 0.20460779633121962, 0.13039520731961307, 0.18189232696682078, 0.1817215066357627, 0.1783307956723018, 0.22814944217526667, 0.12916847321036962, 0.17776329804585, 0.1942067246179512, 0.18094368257256532, 0.1964177469017867, 0.12580297908773042, 0.11549224100926514, 0.0006301766826354305, 9.999999999998899e-05, 0.07166920861298809, 0.04116882207940087, 0.039505316184880734, 0.008801684259546305, 9.999999999998899e-05, 0.023804283702438256, 0.09824652969385739, 0.08808744378417088, 0.11689099987010887, 0.05465333575242626, 0.016760046731113865, 0.04054936932502462, 0.17523909038080743, 0.09411761946427177, 0.046925571657189025, 0.07846020941526533, 0.15961502740187083, 0.06636605766326265, 0.049347893352781336, 0.05235921513302233, 0.00874976061175059, 0.06889622738605683, 0.06826133355466246, 0.04585134149209957, 0.18973913688861666, 0.07461190396366768, 0.07529644333701402, 0.0740038054666855, 0.11181257472344042, 0.05186353376636266, 0.13022106228420638, 0.16719455525631943, 0.08053452978715181, 0.48952823403585266, 0.5026871930270679, 0.4770841558687725, 0.4702820033458147, 0.4826940373518972, 0.47994141101706844, 0.521233429945716, 0.46316207806489584, 0.49698525379511815, 0.04257790959154495, 0.05551049276650133, 0.041443000543253894, 0.05931434347959297, 0.077776819714791, 0.08707205678119423, 0.09821759038992717, 0.09428164961191521, 0.062197010906851924, 0.2511227832572187, 0.3383499375928075, 0.19022446084500666, 0.29165865886642206, 0.2502770576354547, 0.13940379511743417, 0.22470905560556764, 0.1795363848530538, 0.32194128766732955, 0.15617609667774923, 0.2611436682418887, 0.19325664526518727, 0.27853115509362747, 0.23475873181931706, 0.2593455548829695, 0.2190892092262955, 0.3281300366284221, 0.1661780977569024, 0.19758777440394437, 0.13556673281131248, 0.18671595832588317, 0.2630746155915419, 0.2153087293068413, 0.16527121042609083, 0.17851964314682078, 0.2396413508597951, 0.11906574065358022, 0.21775716483107732, 0.18434507387257348, 0.20376518728752424, 0.2465290184328215, 0.2046697452465539, 0.2507425871700828, 0.23716004143264746, 0.21147895680033257, 0.19951633434550986, 0.17749623800593128, 0.24512708696687446, 0.19567288444400088, 0.17253567813073445, 0.19230355510402397, 0.18148710950053393, 0.18254871324927946, 0.2046056380965351, 0.1860098329613995, 0.1259810270324635, 0.12265238446728677, 0.1314171503513617, 0.8741348045652921, 0.20050513518248292, 0.8755720307382442, 0.11747613032121407, 0.8512833767840615, 0.865999592290469, 0.5474963450006157, 0.15590258995344086, 0.7610822098154718, 0.7405220942462274, 0.2053630001446557, 0.7119078671832175, 0.09324536521270055, 0.69442608128418, 0.5128195658914589, 0.17756433907757674, 0.1920052832335175, 0.1837159651286222, 0.19013323523560643, 0.19406485898177928, 0.17914768996819697, 0.2218979898736565, 0.18290085895597108, 0.18542892986246673, 0.0999842208134778, 0.07994945919100194, 0.0846191163073432, 0.08379420927922221, 0.09513077481017085, 0.08551823392854818, 0.10234817481630143, 0.0800360245100965, 0.07921517452308469]}, "mutation_prompt": null}
{"id": "a3b11399-80de-4fa4-8ce1-8b9f6ec17e27", "solution": "import numpy as np\n\nclass ImprovedFastAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.mutation_rate = 0.1\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n                if np.random.random() < self.mutation_rate:\n                    self.position[i] = np.random.uniform(-5.0, 5.0, self.dim)  # Stochastic mutation operation\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size  # Dynamic population adjustment every 5% of the budget\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedFastAdaptiveInertiaPSO", "description": "Implementing a novel stochastic mutation operation to explore new solutions and potentially improve convergence speed.", "configspace": "", "generation": 67, "fitness": 0.19080826247236793, "feedback": "The algorithm ImprovedFastAdaptiveInertiaPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.15.", "error": "", "parent_id": "c7f3015c-ebe0-4aac-a540-5dff341b5485", "metadata": {"aucs": [0.4565436133485947, 0.45766472669536584, 0.4628289107099386, 0.3730933204405038, 0.3830303842413817, 0.41650069731313577, 0.4111463395371675, 0.4156319625230639, 0.4268013896875744, 0.046134456573821314, 0.011164359825974635, 0.013288906499634878, 0.04436490670779858, 0.022782610518926827, 0.004702284132291568, 0.009616329997235495, 0.00019563787481979844, 0.0028651851014322993, 0.09979717976734281, 0.09121371208975437, 0.10763520746664201, 0.08093143656300383, 0.10812144251900646, 0.11901991004076007, 0.09143721294767637, 0.1033176470728635, 0.11605057089745863, 0.07806023595346945, 0.08381907135370548, 0.08578369641664307, 0.10127333945592365, 0.07867845483305214, 0.10862144460054479, 0.08218036809393747, 0.09386387578415656, 0.0944695170196721, 0.18262740632719987, 0.4757870222388284, 0.8128811555408975, 0.46739259654785326, 0.533720695275226, 0.6770126486346362, 0.5200811627474338, 0.4303393600419493, 0.8306280955239326, 0.23333941545811976, 0.18706437170391654, 0.2758932178188719, 0.24581599404745869, 0.23195367692574254, 0.21475773012938404, 0.2412674346755319, 0.19271661179946908, 0.16621332399580702, 0.22723702341289198, 0.1930029215804927, 0.1402525204494316, 0.26119178357331774, 0.24024768272136654, 0.18229184494443473, 0.16979506861564309, 0.1766073799405382, 0.16449648656989102, 0.1661426035460487, 0.12366428089820347, 0.16814132412579275, 0.2474753117047228, 0.16196288003779769, 0.15528854795697078, 0.14090187865954718, 0.1356272980008174, 0.15174189350358447, 0.18967201617533802, 0.12379395967652895, 0.11679867425779178, 0.12148160887200465, 0.14307708770377414, 0.12064362505028037, 0.1959015123089053, 0.1412973173519716, 0.17331993540317037, 0.0019381194213589081, 9.999999999998899e-05, 9.999999999998899e-05, 0.006906934246153518, 0.00015127963344607753, 9.999999999998899e-05, 0.004043111069959915, 0.030517396979418132, 9.999999999998899e-05, 0.1627357788265522, 0.08485775407240637, 0.11471016958447067, 0.09131399525570827, 0.07615166984803123, 0.08301787400708782, 0.1301085611973678, 0.0937575036703644, 0.11416361183208623, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07865400036904846, 0.06693791895446466, 0.05379663219700037, 0.09929961242489294, 0.08679471508435221, 0.09747028449103523, 0.05963060078510518, 0.07363581480103132, 0.0675264379809567, 0.393294230271099, 0.37328836015317035, 0.39265481044707284, 0.36835986515689634, 0.3638585046652102, 0.377891048782118, 0.38953011197816934, 0.36732195458656003, 0.4065450282315044, 0.08390569666051684, 0.06329162054468596, 0.06511584057323849, 0.08049463755577257, 0.08953332157628557, 0.06639794028163504, 0.0898159127452427, 0.09188481385274994, 0.07207087068108031, 0.1994138120567822, 0.1638587809557912, 0.16505193880354474, 0.14674724507009118, 0.1855391387340043, 0.17937192082295517, 0.17296966409533143, 0.21303399731477723, 0.22409383695856355, 0.24488026298765053, 0.21666621762240124, 0.1743431447956334, 0.259868647015157, 0.18840355401508713, 0.22526793528025102, 0.1850602248592672, 0.25186377616297606, 0.22329210596826865, 0.15849033737349838, 0.19860357682420704, 0.13803922852269224, 0.18280849378100106, 0.20477483653468542, 0.11511334806483864, 0.16896548221522556, 0.20570309305350554, 0.17160004028629683, 0.20364196463464335, 0.20129815920347705, 0.21008076052190294, 0.19738903310635547, 0.23461345419825397, 0.20380240974354258, 0.20370225261070396, 0.20403868421562432, 0.2010308042292127, 0.1709061501869703, 0.22262768636764385, 0.19367467222215518, 0.1892998203691757, 0.19960279478652854, 0.167516812691216, 0.1740884474617571, 0.1847051367027721, 0.17479041019850572, 0.18359362622784425, 0.24061191546956084, 0.4042547753019008, 0.6073282137270246, 0.5646817166248637, 0.4976910225915907, 0.5057796030793454, 0.5986025045554848, 0.5629004913713633, 0.4093959534491499, 0.4109146371159793, 0.4793767019413878, 0.20507895135112075, 0.24905626325954255, 0.3576305072988817, 0.25271157941372246, 0.32750586803610515, 0.3097890737659549, 0.17693477396692592, 0.1786380748557611, 0.20228811158788296, 0.1913825244546138, 0.1862492267347966, 0.1816920916433874, 0.18455167821200502, 0.18271201097732992, 0.19899496821276585, 0.08073993784757694, 0.07998475673486338, 0.08244466659535898, 0.0804091704514418, 0.07297013621273052, 0.07709192773222806, 0.0940488452860393, 0.07525924193893274, 0.07180397582798304]}, "mutation_prompt": null}
{"id": "653851cb-0439-4215-9140-b227c35df271", "solution": "import numpy as np\n\nclass ImprovedFastAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size  # Dynamic population adjustment every 5% of the budget\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedFastAdaptiveInertiaPSO", "description": "Implementing a novel mechanism to dynamically adjust the population size based on individual performance to enhance convergence speed.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c7f3015c-ebe0-4aac-a540-5dff341b5485", "metadata": {"aucs": [0.6183145227542862, 0.5847094749095562, 0.5894513974052874, 0.599572421802951, 0.6036219179588009, 0.5705760180566251, 0.5694757834283644, 0.5900611322870065, 0.6243963505687219, 0.16340610490241603, 0.14183844908599297, 0.13357792510835664, 0.13888020869847462, 0.12436442931826319, 0.124450448717363, 0.16385012559854895, 0.11800277494085953, 0.14883543654402243, 0.08688219675049491, 0.09650721277373486, 0.08535864802154991, 0.09286732596033975, 0.1259789233363039, 0.15811269977447429, 0.08195631412765747, 0.10371317153419768, 0.1406971750054139, 0.10358554372747608, 0.06555569834748531, 0.08937345539070085, 0.08281853514498294, 0.11970184625633296, 0.07897797399606898, 0.08850405712975695, 0.0802626459002771, 0.05232197676756245, 0.882490201386976, 0.8434426152598338, 0.8272843842842847, 0.8402854816103794, 0.8609327067052169, 0.8483117457179643, 0.8804849865570135, 0.8320198377447583, 0.8472749895150827, 0.4031690373531027, 0.39319431005949623, 0.39486570500621965, 0.4333700400696453, 0.39057040441387203, 0.37551391904690967, 0.36089735044633175, 0.3536134315257967, 0.3897712331078306, 0.20663566256025034, 0.13337005282293235, 0.11620365103172514, 0.20954173324640868, 0.16723150077064652, 0.2645792656760426, 0.15073293239690388, 0.1496039273804467, 0.17477509545405678, 0.2058970381629025, 0.24283689091147964, 0.18388348845089697, 0.16982987495045287, 0.19897160259559454, 0.1779131390378319, 0.20460779633121962, 0.13039520731961307, 0.18189232696682078, 0.18262304616307512, 0.1783307956723018, 0.22814944217526667, 0.12916847321036962, 0.17776329804585, 0.1942067246179512, 0.18094368257256532, 0.1964177469017867, 0.12580297908773042, 0.11549224100926514, 0.0006301766826354305, 9.999999999998899e-05, 0.07166920861298809, 0.04116882207940087, 0.039505316184880734, 0.008801684259546305, 9.999999999998899e-05, 0.023804283702438256, 0.09824652969385739, 0.08808744378417088, 0.11689099987010887, 0.05465333575242626, 0.016760046731113865, 0.04054936932502462, 0.17523909038080743, 0.09411761946427177, 0.046925571657189025, 0.07846020941526533, 0.15961502740187083, 0.06636605766326265, 0.049347893352781336, 0.05235921513302233, 0.00874976061175059, 0.06889622738605683, 0.06826133355466246, 0.04585134149209957, 0.18973913688861666, 0.07461190396366768, 0.07529644333701402, 0.0740038054666855, 0.11181257472344042, 0.05186353376636266, 0.13022106228420638, 0.1657416964212689, 0.08053452978715181, 0.48952823403585266, 0.5026871930270679, 0.4770841558687725, 0.4702820033458147, 0.4826940373518972, 0.47994141101706844, 0.521233429945716, 0.46316207806489584, 0.49698525379511815, 0.04257790959154495, 0.05551049276650133, 0.041443000543253894, 0.05931434347959297, 0.077776819714791, 0.08707205678119423, 0.09821759038992717, 0.09428164961191521, 0.062197010906851924, 0.2511227832572187, 0.3383499375928075, 0.19022446084500666, 0.29165865886642206, 0.2502770576354547, 0.13940379511743417, 0.22470905560556764, 0.1795363848530538, 0.32194128766732955, 0.15617609667774923, 0.2611436682418887, 0.19325664526518727, 0.27853115509362747, 0.23475873181931706, 0.2593455548829695, 0.2190892092262955, 0.3281300366284221, 0.1661780977569024, 0.19758777440394437, 0.13556673281131248, 0.18671595832588317, 0.2630746155915419, 0.2153087293068413, 0.16527121042609083, 0.17851964314682078, 0.2396413508597951, 0.11906574065358022, 0.21775716483107732, 0.18434507387257348, 0.20376518728752424, 0.2465290184328215, 0.2046697452465539, 0.2507425871700828, 0.23716004143264746, 0.21147895680033257, 0.19951633434550986, 0.17749623800593128, 0.24512708696687446, 0.19567288444400088, 0.17253567813073445, 0.19230355510402397, 0.18148710950053393, 0.18254871324927946, 0.2046056380965351, 0.1860098329613995, 0.1259810270324635, 0.12265238446728677, 0.1314171503513617, 0.8741348045652921, 0.20050513518248292, 0.8755720307382442, 0.11747613032121407, 0.8512833767840615, 0.865999592290469, 0.5474963450006157, 0.15590258995344086, 0.7610822098154718, 0.7405220942462274, 0.2053630001446557, 0.7119078671832175, 0.09324536521270055, 0.69442608128418, 0.5948344004000115, 0.17756433907757674, 0.1920052832335175, 0.1837159651286222, 0.19013323523560643, 0.19406485898177928, 0.18696385641462543, 0.2218979898736565, 0.18290085895597108, 0.18542892986246673, 0.0999842208134778, 0.07994945919100194, 0.0846191163073432, 0.08379420927922221, 0.09513077481017085, 0.08551823392854818, 0.10234817481630143, 0.0800360245100965, 0.07921517452308469]}, "mutation_prompt": null}
{"id": "9c324775-9d45-47cd-878d-0140ec428a3d", "solution": "import numpy as np\n\nclass AcceleratedImprovedFastAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)  # Updated coefficient calculation\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)  # Updated coefficient calculation\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:]))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos\n", "name": "AcceleratedImprovedFastAdaptiveInertiaPSO", "description": "Implementing a strategy to dynamically adjust the velocity update coefficients based on individual performance to accelerate convergence speed.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 43, 13, '            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 43, 13, '            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\\n'))", "parent_id": "c7f3015c-ebe0-4aac-a540-5dff341b5485", "metadata": {}, "mutation_prompt": null}
{"id": "68d40142-c31c-4364-bb2f-5a3208216152", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass ImprovedFastAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        with ThreadPoolExecutor() as executor:\n            for _ in range(self.budget):\n                fitness = func(self.position)\n                futures = [executor.submit(self.update_particle, i, fitness, func) for i in range(self.pop_size)]\n                for future in futures:\n                    result = future.result()\n                    i, new_fitness = result\n                    if new_fitness < self.global_best_val:\n                        self.global_best_val = new_fitness\n                        self.global_best_pos = np.copy(self.position[i])\n            return self.global_best_pos\n\n    def update_particle(self, i, fitness, func):\n        new_fitness = fitness[i]\n        if new_fitness < self.personal_best_val[i]:\n            self.personal_best_val[i] = new_fitness\n            self.personal_best_pos[i] = np.copy(self.position[i])\n        inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n        c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n        c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n        self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n        self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n        self.position[i] += self.velocity[i]\n        self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n        return i, new_fitness", "name": "ImprovedFastAdaptiveInertiaPSO", "description": "Introducing a parallel computation strategy to update particle positions and velocities concurrently, aiming to boost convergence speed.", "configspace": "", "generation": 70, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name '_' is not defined\").", "error": "NameError(\"name '_' is not defined\")", "parent_id": "c7f3015c-ebe0-4aac-a540-5dff341b5485", "metadata": {}, "mutation_prompt": null}
{"id": "8ffcf9f2-3a58-4fd3-9db4-586568560c9a", "solution": "import numpy as np\n\nclass ImprovedFastAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size  # Dynamic population adjustment every 5% of the budget\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedFastAdaptiveInertiaPSO", "description": "Implementing a novel mechanism to dynamically adjust the population size based on individual performance to enhance convergence speed.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c7f3015c-ebe0-4aac-a540-5dff341b5485", "metadata": {"aucs": [0.6183145227542862, 0.5847094749095562, 0.5894513974052874, 0.599572421802951, 0.6036219179588009, 0.5705760180566251, 0.5694757834283644, 0.5900611322870065, 0.6243963505687219, 0.16340610490241603, 0.14183844908599297, 0.13357792510835664, 0.13888020869847462, 0.12436442931826319, 0.124450448717363, 0.16385012559854895, 0.11800277494085953, 0.14883543654402243, 0.08688219675049491, 0.09650721277373486, 0.08535864802154991, 0.09286732596033975, 0.1259789233363039, 0.15811269977447429, 0.08195631412765747, 0.10371317153419768, 0.1406971750054139, 0.10358554372747608, 0.06555569834748531, 0.08937345539070085, 0.08281853514498294, 0.11970184625633296, 0.07897797399606898, 0.08850405712975695, 0.0802626459002771, 0.05232197676756245, 0.882490201386976, 0.8434426152598338, 0.8272843842842847, 0.8402854816103794, 0.8609327067052169, 0.8483117457179643, 0.8804849865570135, 0.8320198377447583, 0.8472749895150827, 0.4031690373531027, 0.39319431005949623, 0.39486570500621965, 0.4333700400696453, 0.39057040441387203, 0.37551391904690967, 0.36089735044633175, 0.3536134315257967, 0.3897712331078306, 0.20663566256025034, 0.13337005282293235, 0.11620365103172514, 0.20954173324640868, 0.16723150077064652, 0.2645792656760426, 0.15073293239690388, 0.1496039273804467, 0.17477509545405678, 0.2058970381629025, 0.24283689091147964, 0.18388348845089697, 0.16982987495045287, 0.19897160259559454, 0.1779131390378319, 0.20460779633121962, 0.13039520731961307, 0.18189232696682078, 0.18262304616307512, 0.1783307956723018, 0.22814944217526667, 0.12916847321036962, 0.17776329804585, 0.1942067246179512, 0.18094368257256532, 0.1964177469017867, 0.12580297908773042, 0.11549224100926514, 0.0006301766826354305, 9.999999999998899e-05, 0.07166920861298809, 0.04116882207940087, 0.039505316184880734, 0.008801684259546305, 9.999999999998899e-05, 0.023804283702438256, 0.09824652969385739, 0.08808744378417088, 0.11689099987010887, 0.05465333575242626, 0.016760046731113865, 0.04054936932502462, 0.17523909038080743, 0.09411761946427177, 0.046925571657189025, 0.07846020941526533, 0.15961502740187083, 0.06636605766326265, 0.049347893352781336, 0.05235921513302233, 0.00874976061175059, 0.06889622738605683, 0.06826133355466246, 0.04585134149209957, 0.18973913688861666, 0.07461190396366768, 0.07529644333701402, 0.0740038054666855, 0.11181257472344042, 0.05186353376636266, 0.13022106228420638, 0.1657416964212689, 0.08053452978715181, 0.48952823403585266, 0.5026871930270679, 0.4770841558687725, 0.4702820033458147, 0.4826940373518972, 0.47994141101706844, 0.521233429945716, 0.46316207806489584, 0.49698525379511815, 0.04257790959154495, 0.05551049276650133, 0.041443000543253894, 0.05931434347959297, 0.077776819714791, 0.08707205678119423, 0.09821759038992717, 0.09428164961191521, 0.062197010906851924, 0.2511227832572187, 0.3383499375928075, 0.19022446084500666, 0.29165865886642206, 0.2502770576354547, 0.13940379511743417, 0.22470905560556764, 0.1795363848530538, 0.32194128766732955, 0.15617609667774923, 0.2611436682418887, 0.19325664526518727, 0.27853115509362747, 0.23475873181931706, 0.2593455548829695, 0.2190892092262955, 0.3281300366284221, 0.1661780977569024, 0.19758777440394437, 0.13556673281131248, 0.18671595832588317, 0.2630746155915419, 0.2153087293068413, 0.16527121042609083, 0.17851964314682078, 0.2396413508597951, 0.11906574065358022, 0.21775716483107732, 0.18434507387257348, 0.20376518728752424, 0.2465290184328215, 0.2046697452465539, 0.2507425871700828, 0.23716004143264746, 0.21147895680033257, 0.19951633434550986, 0.17749623800593128, 0.24512708696687446, 0.19567288444400088, 0.17253567813073445, 0.19230355510402397, 0.18148710950053393, 0.18254871324927946, 0.2046056380965351, 0.1860098329613995, 0.1259810270324635, 0.12265238446728677, 0.1314171503513617, 0.8741348045652921, 0.20050513518248292, 0.8755720307382442, 0.11747613032121407, 0.8512833767840615, 0.865999592290469, 0.5474963450006157, 0.15590258995344086, 0.7610822098154718, 0.7405220942462274, 0.2053630001446557, 0.7119078671832175, 0.09324536521270055, 0.69442608128418, 0.5948344004000115, 0.17756433907757674, 0.1920052832335175, 0.1837159651286222, 0.19013323523560643, 0.19406485898177928, 0.18696385641462543, 0.2218979898736565, 0.18290085895597108, 0.18542892986246673, 0.0999842208134778, 0.07994945919100194, 0.0846191163073432, 0.08379420927922221, 0.09513077481017085, 0.08551823392854818, 0.10234817481630143, 0.0800360245100965, 0.07921517452308469]}, "mutation_prompt": null}
{"id": "b86fe504-c579-43af-a05a-9a5b637573b6", "solution": "import numpy as np\n\nclass ImprovedFastAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size  # Dynamic population adjustment every 5% of the budget\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedFastAdaptiveInertiaPSO", "description": "Implementing a novel mechanism to dynamically adjust the population size based on individual performance to enhance convergence speed.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c7f3015c-ebe0-4aac-a540-5dff341b5485", "metadata": {"aucs": [0.6183145227542862, 0.5847094749095562, 0.5894513974052874, 0.599572421802951, 0.6036219179588009, 0.5705760180566251, 0.5694757834283644, 0.5900611322870065, 0.6243963505687219, 0.16340610490241603, 0.14183844908599297, 0.13357792510835664, 0.13888020869847462, 0.12436442931826319, 0.124450448717363, 0.16385012559854895, 0.11800277494085953, 0.14883543654402243, 0.08688219675049491, 0.09650721277373486, 0.08535864802154991, 0.09286732596033975, 0.1259789233363039, 0.15811269977447429, 0.08195631412765747, 0.10371317153419768, 0.1406971750054139, 0.10358554372747608, 0.06555569834748531, 0.08937345539070085, 0.08281853514498294, 0.11970184625633296, 0.07897797399606898, 0.08850405712975695, 0.0802626459002771, 0.05232197676756245, 0.882490201386976, 0.8434426152598338, 0.8272843842842847, 0.8402854816103794, 0.8609327067052169, 0.8483117457179643, 0.8804849865570135, 0.8320198377447583, 0.8472749895150827, 0.4031690373531027, 0.39319431005949623, 0.39486570500621965, 0.4333700400696453, 0.39057040441387203, 0.37551391904690967, 0.36089735044633175, 0.3536134315257967, 0.3897712331078306, 0.20663566256025034, 0.13337005282293235, 0.11620365103172514, 0.20954173324640868, 0.16723150077064652, 0.2645792656760426, 0.15073293239690388, 0.1496039273804467, 0.17477509545405678, 0.2058970381629025, 0.24283689091147964, 0.18388348845089697, 0.16982987495045287, 0.19897160259559454, 0.1779131390378319, 0.20460779633121962, 0.13039520731961307, 0.18189232696682078, 0.18262304616307512, 0.1783307956723018, 0.22814944217526667, 0.12916847321036962, 0.17776329804585, 0.1942067246179512, 0.18094368257256532, 0.1964177469017867, 0.12580297908773042, 0.11549224100926514, 0.0006301766826354305, 9.999999999998899e-05, 0.07166920861298809, 0.04116882207940087, 0.039505316184880734, 0.008801684259546305, 9.999999999998899e-05, 0.023804283702438256, 0.09824652969385739, 0.08808744378417088, 0.11689099987010887, 0.05465333575242626, 0.016760046731113865, 0.04054936932502462, 0.17523909038080743, 0.09411761946427177, 0.046925571657189025, 0.07846020941526533, 0.15961502740187083, 0.06636605766326265, 0.049347893352781336, 0.05235921513302233, 0.00874976061175059, 0.06889622738605683, 0.06826133355466246, 0.04585134149209957, 0.18973913688861666, 0.07461190396366768, 0.07529644333701402, 0.0740038054666855, 0.11181257472344042, 0.05186353376636266, 0.13022106228420638, 0.1657416964212689, 0.08053452978715181, 0.48952823403585266, 0.5026871930270679, 0.4770841558687725, 0.4702820033458147, 0.4826940373518972, 0.47994141101706844, 0.521233429945716, 0.46316207806489584, 0.49698525379511815, 0.04257790959154495, 0.05551049276650133, 0.041443000543253894, 0.05931434347959297, 0.077776819714791, 0.08707205678119423, 0.09821759038992717, 0.09428164961191521, 0.062197010906851924, 0.2511227832572187, 0.3383499375928075, 0.19022446084500666, 0.29165865886642206, 0.2502770576354547, 0.13940379511743417, 0.22470905560556764, 0.1795363848530538, 0.32194128766732955, 0.15617609667774923, 0.2611436682418887, 0.19325664526518727, 0.27853115509362747, 0.23475873181931706, 0.2593455548829695, 0.2190892092262955, 0.3281300366284221, 0.1661780977569024, 0.19758777440394437, 0.13556673281131248, 0.18671595832588317, 0.2630746155915419, 0.2153087293068413, 0.16527121042609083, 0.17851964314682078, 0.2396413508597951, 0.11906574065358022, 0.21775716483107732, 0.18434507387257348, 0.20376518728752424, 0.2465290184328215, 0.2046697452465539, 0.2507425871700828, 0.23716004143264746, 0.21147895680033257, 0.19951633434550986, 0.17749623800593128, 0.24512708696687446, 0.19567288444400088, 0.17253567813073445, 0.19230355510402397, 0.18148710950053393, 0.18254871324927946, 0.2046056380965351, 0.1860098329613995, 0.1259810270324635, 0.12265238446728677, 0.1314171503513617, 0.8741348045652921, 0.20050513518248292, 0.8755720307382442, 0.11747613032121407, 0.8512833767840615, 0.865999592290469, 0.5474963450006157, 0.15590258995344086, 0.7610822098154718, 0.7405220942462274, 0.2053630001446557, 0.7119078671832175, 0.09324536521270055, 0.69442608128418, 0.5948344004000115, 0.17756433907757674, 0.1920052832335175, 0.1837159651286222, 0.19013323523560643, 0.19406485898177928, 0.18696385641462543, 0.2218979898736565, 0.18290085895597108, 0.18542892986246673, 0.0999842208134778, 0.07994945919100194, 0.0846191163073432, 0.08379420927922221, 0.09513077481017085, 0.08551823392854818, 0.10234817481630143, 0.0800360245100965, 0.07921517452308469]}, "mutation_prompt": null}
{"id": "a7794365-3fc2-4750-acdd-d48e8406396a", "solution": "import numpy as np\n\nclass ImprovedFastAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size  # Dynamic population adjustment every 5% of the budget\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedFastAdaptiveInertiaPSO", "description": "Implementing a novel mechanism to dynamically adjust the population size based on individual performance to enhance convergence speed.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c7f3015c-ebe0-4aac-a540-5dff341b5485", "metadata": {"aucs": [0.6183145227542862, 0.5847094749095562, 0.5894513974052874, 0.599572421802951, 0.6036219179588009, 0.5705760180566251, 0.5694757834283644, 0.5900611322870065, 0.6243963505687219, 0.16340610490241603, 0.14183844908599297, 0.13357792510835664, 0.13888020869847462, 0.12436442931826319, 0.124450448717363, 0.16385012559854895, 0.11800277494085953, 0.14883543654402243, 0.08688219675049491, 0.09650721277373486, 0.08535864802154991, 0.09286732596033975, 0.1259789233363039, 0.15811269977447429, 0.08195631412765747, 0.10371317153419768, 0.1406971750054139, 0.10358554372747608, 0.06555569834748531, 0.08937345539070085, 0.08281853514498294, 0.11970184625633296, 0.07897797399606898, 0.08850405712975695, 0.0802626459002771, 0.05232197676756245, 0.882490201386976, 0.8434426152598338, 0.8272843842842847, 0.8402854816103794, 0.8609327067052169, 0.8483117457179643, 0.8804849865570135, 0.8320198377447583, 0.8472749895150827, 0.4031690373531027, 0.39319431005949623, 0.39486570500621965, 0.4333700400696453, 0.39057040441387203, 0.37551391904690967, 0.36089735044633175, 0.3536134315257967, 0.3897712331078306, 0.20663566256025034, 0.13337005282293235, 0.11620365103172514, 0.20954173324640868, 0.16723150077064652, 0.2645792656760426, 0.15073293239690388, 0.1496039273804467, 0.17477509545405678, 0.2058970381629025, 0.24283689091147964, 0.18388348845089697, 0.16982987495045287, 0.19897160259559454, 0.1779131390378319, 0.20460779633121962, 0.13039520731961307, 0.18189232696682078, 0.18262304616307512, 0.1783307956723018, 0.22814944217526667, 0.12916847321036962, 0.17776329804585, 0.1942067246179512, 0.18094368257256532, 0.1964177469017867, 0.12580297908773042, 0.11549224100926514, 0.0006301766826354305, 9.999999999998899e-05, 0.07166920861298809, 0.04116882207940087, 0.039505316184880734, 0.008801684259546305, 9.999999999998899e-05, 0.023804283702438256, 0.09824652969385739, 0.08808744378417088, 0.11689099987010887, 0.05465333575242626, 0.016760046731113865, 0.04054936932502462, 0.17523909038080743, 0.09411761946427177, 0.046925571657189025, 0.07846020941526533, 0.15961502740187083, 0.06636605766326265, 0.049347893352781336, 0.05235921513302233, 0.00874976061175059, 0.06889622738605683, 0.06826133355466246, 0.04585134149209957, 0.18973913688861666, 0.07461190396366768, 0.07529644333701402, 0.0740038054666855, 0.11181257472344042, 0.05186353376636266, 0.13022106228420638, 0.1657416964212689, 0.08053452978715181, 0.48952823403585266, 0.5026871930270679, 0.4770841558687725, 0.4702820033458147, 0.4826940373518972, 0.47994141101706844, 0.521233429945716, 0.46316207806489584, 0.49698525379511815, 0.04257790959154495, 0.05551049276650133, 0.041443000543253894, 0.05931434347959297, 0.077776819714791, 0.08707205678119423, 0.09821759038992717, 0.09428164961191521, 0.062197010906851924, 0.2511227832572187, 0.3383499375928075, 0.19022446084500666, 0.29165865886642206, 0.2502770576354547, 0.13940379511743417, 0.22470905560556764, 0.1795363848530538, 0.32194128766732955, 0.15617609667774923, 0.2611436682418887, 0.19325664526518727, 0.27853115509362747, 0.23475873181931706, 0.2593455548829695, 0.2190892092262955, 0.3281300366284221, 0.1661780977569024, 0.19758777440394437, 0.13556673281131248, 0.18671595832588317, 0.2630746155915419, 0.2153087293068413, 0.16527121042609083, 0.17851964314682078, 0.2396413508597951, 0.11906574065358022, 0.21775716483107732, 0.18434507387257348, 0.20376518728752424, 0.2465290184328215, 0.2046697452465539, 0.2507425871700828, 0.23716004143264746, 0.21147895680033257, 0.19951633434550986, 0.17749623800593128, 0.24512708696687446, 0.19567288444400088, 0.17253567813073445, 0.19230355510402397, 0.18148710950053393, 0.18254871324927946, 0.2046056380965351, 0.1860098329613995, 0.1259810270324635, 0.12265238446728677, 0.1314171503513617, 0.8741348045652921, 0.20050513518248292, 0.8755720307382442, 0.11747613032121407, 0.8512833767840615, 0.865999592290469, 0.5474963450006157, 0.15590258995344086, 0.7610822098154718, 0.7405220942462274, 0.2053630001446557, 0.7119078671832175, 0.09324536521270055, 0.69442608128418, 0.5948344004000115, 0.17756433907757674, 0.1920052832335175, 0.1837159651286222, 0.19013323523560643, 0.19406485898177928, 0.18696385641462543, 0.2218979898736565, 0.18290085895597108, 0.18542892986246673, 0.0999842208134778, 0.07994945919100194, 0.0846191163073432, 0.08379420927922221, 0.09513077481017085, 0.08551823392854818, 0.10234817481630143, 0.0800360245100965, 0.07921517452308469]}, "mutation_prompt": null}
{"id": "f0376f0a-2f66-4e55-8704-68747767bc77", "solution": "import numpy as np\n\nclass ImprovedFastAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size  # Dynamic population adjustment every 5% of the budget\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedFastAdaptiveInertiaPSO", "description": "Implementing a novel mechanism to dynamically adjust the population size based on individual performance to enhance convergence speed.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c7f3015c-ebe0-4aac-a540-5dff341b5485", "metadata": {"aucs": [0.6183145227542862, 0.5847094749095562, 0.5894513974052874, 0.599572421802951, 0.6036219179588009, 0.5705760180566251, 0.5694757834283644, 0.5900611322870065, 0.6243963505687219, 0.16340610490241603, 0.14183844908599297, 0.13357792510835664, 0.13888020869847462, 0.12436442931826319, 0.124450448717363, 0.16385012559854895, 0.11800277494085953, 0.14883543654402243, 0.08688219675049491, 0.09650721277373486, 0.08535864802154991, 0.09286732596033975, 0.1259789233363039, 0.15811269977447429, 0.08195631412765747, 0.10371317153419768, 0.1406971750054139, 0.10358554372747608, 0.06555569834748531, 0.08937345539070085, 0.08281853514498294, 0.11970184625633296, 0.07897797399606898, 0.08850405712975695, 0.0802626459002771, 0.05232197676756245, 0.882490201386976, 0.8434426152598338, 0.8272843842842847, 0.8402854816103794, 0.8609327067052169, 0.8483117457179643, 0.8804849865570135, 0.8320198377447583, 0.8472749895150827, 0.4031690373531027, 0.39319431005949623, 0.39486570500621965, 0.4333700400696453, 0.39057040441387203, 0.37551391904690967, 0.36089735044633175, 0.3536134315257967, 0.3897712331078306, 0.20663566256025034, 0.13337005282293235, 0.11620365103172514, 0.20954173324640868, 0.16723150077064652, 0.2645792656760426, 0.15073293239690388, 0.1496039273804467, 0.17477509545405678, 0.2058970381629025, 0.24283689091147964, 0.18388348845089697, 0.16982987495045287, 0.19897160259559454, 0.1779131390378319, 0.20460779633121962, 0.13039520731961307, 0.18189232696682078, 0.18262304616307512, 0.1783307956723018, 0.22814944217526667, 0.12916847321036962, 0.17776329804585, 0.1942067246179512, 0.18094368257256532, 0.1964177469017867, 0.12580297908773042, 0.11549224100926514, 0.0006301766826354305, 9.999999999998899e-05, 0.07166920861298809, 0.04116882207940087, 0.039505316184880734, 0.008801684259546305, 9.999999999998899e-05, 0.023804283702438256, 0.09824652969385739, 0.08808744378417088, 0.11689099987010887, 0.05465333575242626, 0.016760046731113865, 0.04054936932502462, 0.17523909038080743, 0.09411761946427177, 0.046925571657189025, 0.07846020941526533, 0.15961502740187083, 0.06636605766326265, 0.049347893352781336, 0.05235921513302233, 0.00874976061175059, 0.06889622738605683, 0.06826133355466246, 0.04585134149209957, 0.18973913688861666, 0.07461190396366768, 0.07529644333701402, 0.0740038054666855, 0.11181257472344042, 0.05186353376636266, 0.13022106228420638, 0.1657416964212689, 0.08053452978715181, 0.48952823403585266, 0.5026871930270679, 0.4770841558687725, 0.4702820033458147, 0.4826940373518972, 0.47994141101706844, 0.521233429945716, 0.46316207806489584, 0.49698525379511815, 0.04257790959154495, 0.05551049276650133, 0.041443000543253894, 0.05931434347959297, 0.077776819714791, 0.08707205678119423, 0.09821759038992717, 0.09428164961191521, 0.062197010906851924, 0.2511227832572187, 0.3383499375928075, 0.19022446084500666, 0.29165865886642206, 0.2502770576354547, 0.13940379511743417, 0.22470905560556764, 0.1795363848530538, 0.32194128766732955, 0.15617609667774923, 0.2611436682418887, 0.19325664526518727, 0.27853115509362747, 0.23475873181931706, 0.2593455548829695, 0.2190892092262955, 0.3281300366284221, 0.1661780977569024, 0.19758777440394437, 0.13556673281131248, 0.18671595832588317, 0.2630746155915419, 0.2153087293068413, 0.16527121042609083, 0.17851964314682078, 0.2396413508597951, 0.11906574065358022, 0.21775716483107732, 0.18434507387257348, 0.20376518728752424, 0.2465290184328215, 0.2046697452465539, 0.2507425871700828, 0.23716004143264746, 0.21147895680033257, 0.19951633434550986, 0.17749623800593128, 0.24512708696687446, 0.19567288444400088, 0.17253567813073445, 0.19230355510402397, 0.18148710950053393, 0.18254871324927946, 0.2046056380965351, 0.1860098329613995, 0.1259810270324635, 0.12265238446728677, 0.1314171503513617, 0.8741348045652921, 0.20050513518248292, 0.8755720307382442, 0.11747613032121407, 0.8512833767840615, 0.865999592290469, 0.5474963450006157, 0.15590258995344086, 0.7610822098154718, 0.7405220942462274, 0.2053630001446557, 0.7119078671832175, 0.09324536521270055, 0.69442608128418, 0.5948344004000115, 0.17756433907757674, 0.1920052832335175, 0.1837159651286222, 0.19013323523560643, 0.19406485898177928, 0.18696385641462543, 0.2218979898736565, 0.18290085895597108, 0.18542892986246673, 0.0999842208134778, 0.07994945919100194, 0.0846191163073432, 0.08379420927922221, 0.09513077481017085, 0.08551823392854818, 0.10234817481630143, 0.0800360245100965, 0.07921517452308469]}, "mutation_prompt": null}
{"id": "4b4af26e-db3b-4d90-b01d-5092c1f6fa6a", "solution": "import numpy as np\n\nclass ImprovedFastAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size  # Dynamic population adjustment every 5% of the budget\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedFastAdaptiveInertiaPSO", "description": "Implementing a novel mechanism to dynamically adjust the population size based on individual performance to enhance convergence speed.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c7f3015c-ebe0-4aac-a540-5dff341b5485", "metadata": {"aucs": [0.6183145227542862, 0.5847094749095562, 0.5894513974052874, 0.599572421802951, 0.6036219179588009, 0.5705760180566251, 0.5694757834283644, 0.5900611322870065, 0.6243963505687219, 0.16340610490241603, 0.14183844908599297, 0.13357792510835664, 0.13888020869847462, 0.12436442931826319, 0.124450448717363, 0.16385012559854895, 0.11800277494085953, 0.14883543654402243, 0.08688219675049491, 0.09650721277373486, 0.08535864802154991, 0.09286732596033975, 0.1259789233363039, 0.15811269977447429, 0.08195631412765747, 0.10371317153419768, 0.1406971750054139, 0.10358554372747608, 0.06555569834748531, 0.08937345539070085, 0.08281853514498294, 0.11970184625633296, 0.07897797399606898, 0.08850405712975695, 0.0802626459002771, 0.05232197676756245, 0.882490201386976, 0.8434426152598338, 0.8272843842842847, 0.8402854816103794, 0.8609327067052169, 0.8483117457179643, 0.8804849865570135, 0.8320198377447583, 0.8472749895150827, 0.4031690373531027, 0.39319431005949623, 0.39486570500621965, 0.4333700400696453, 0.39057040441387203, 0.37551391904690967, 0.36089735044633175, 0.3536134315257967, 0.3897712331078306, 0.20663566256025034, 0.13337005282293235, 0.11620365103172514, 0.20954173324640868, 0.16723150077064652, 0.2645792656760426, 0.15073293239690388, 0.1496039273804467, 0.17477509545405678, 0.2058970381629025, 0.24283689091147964, 0.18388348845089697, 0.16982987495045287, 0.19897160259559454, 0.1779131390378319, 0.20460779633121962, 0.13039520731961307, 0.18189232696682078, 0.18262304616307512, 0.1783307956723018, 0.22814944217526667, 0.12916847321036962, 0.17776329804585, 0.1942067246179512, 0.18094368257256532, 0.1964177469017867, 0.12580297908773042, 0.11549224100926514, 0.0006301766826354305, 9.999999999998899e-05, 0.07166920861298809, 0.04116882207940087, 0.039505316184880734, 0.008801684259546305, 9.999999999998899e-05, 0.023804283702438256, 0.09824652969385739, 0.08808744378417088, 0.11689099987010887, 0.05465333575242626, 0.016760046731113865, 0.04054936932502462, 0.17523909038080743, 0.09411761946427177, 0.046925571657189025, 0.07846020941526533, 0.15961502740187083, 0.06636605766326265, 0.049347893352781336, 0.05235921513302233, 0.00874976061175059, 0.06889622738605683, 0.06826133355466246, 0.04585134149209957, 0.18973913688861666, 0.07461190396366768, 0.07529644333701402, 0.0740038054666855, 0.11181257472344042, 0.05186353376636266, 0.13022106228420638, 0.1657416964212689, 0.08053452978715181, 0.48952823403585266, 0.5026871930270679, 0.4770841558687725, 0.4702820033458147, 0.4826940373518972, 0.47994141101706844, 0.521233429945716, 0.46316207806489584, 0.49698525379511815, 0.04257790959154495, 0.05551049276650133, 0.041443000543253894, 0.05931434347959297, 0.077776819714791, 0.08707205678119423, 0.09821759038992717, 0.09428164961191521, 0.062197010906851924, 0.2511227832572187, 0.3383499375928075, 0.19022446084500666, 0.29165865886642206, 0.2502770576354547, 0.13940379511743417, 0.22470905560556764, 0.1795363848530538, 0.32194128766732955, 0.15617609667774923, 0.2611436682418887, 0.19325664526518727, 0.27853115509362747, 0.23475873181931706, 0.2593455548829695, 0.2190892092262955, 0.3281300366284221, 0.1661780977569024, 0.19758777440394437, 0.13556673281131248, 0.18671595832588317, 0.2630746155915419, 0.2153087293068413, 0.16527121042609083, 0.17851964314682078, 0.2396413508597951, 0.11906574065358022, 0.21775716483107732, 0.18434507387257348, 0.20376518728752424, 0.2465290184328215, 0.2046697452465539, 0.2507425871700828, 0.23716004143264746, 0.21147895680033257, 0.19951633434550986, 0.17749623800593128, 0.24512708696687446, 0.19567288444400088, 0.17253567813073445, 0.19230355510402397, 0.18148710950053393, 0.18254871324927946, 0.2046056380965351, 0.1860098329613995, 0.1259810270324635, 0.12265238446728677, 0.1314171503513617, 0.8741348045652921, 0.20050513518248292, 0.8755720307382442, 0.11747613032121407, 0.8512833767840615, 0.865999592290469, 0.5474963450006157, 0.15590258995344086, 0.7610822098154718, 0.7405220942462274, 0.2053630001446557, 0.7119078671832175, 0.09324536521270055, 0.69442608128418, 0.5948344004000115, 0.17756433907757674, 0.1920052832335175, 0.1837159651286222, 0.19013323523560643, 0.19406485898177928, 0.18696385641462543, 0.2218979898736565, 0.18290085895597108, 0.18542892986246673, 0.0999842208134778, 0.07994945919100194, 0.0846191163073432, 0.08379420927922221, 0.09513077481017085, 0.08551823392854818, 0.10234817481630143, 0.0800360245100965, 0.07921517452308469]}, "mutation_prompt": null}
{"id": "a7347574-56e1-49f1-885f-0aa962cf452c", "solution": "import numpy as np\n\nclass ImprovedSpeedAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            if _ % (self.budget // 10) == 0:\n                c1 = np.random.uniform(1.0, 3.0)\n                c2 = np.random.uniform(1.0, 3.0)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedSpeedAdaptiveInertiaPSO", "description": "Introducing a novel mechanism to adaptively update the velocity update coefficients based on a dynamic strategy to accelerate convergence speed.", "configspace": "", "generation": 76, "fitness": 0.24626394187941691, "feedback": "The algorithm ImprovedSpeedAdaptiveInertiaPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "c7f3015c-ebe0-4aac-a540-5dff341b5485", "metadata": {"aucs": [0.6682787844905586, 0.65195105438202, 0.5947257766945921, 0.5715219980703594, 0.5927162344668009, 0.5584452293609157, 0.6061215562138544, 0.604264047766381, 0.668285557236904, 0.24764396506563646, 0.22282780285075754, 0.18839621753399982, 0.1804302705440417, 0.16823696267665833, 0.20515279618852, 0.10795604224001254, 0.17016389877230886, 0.17214039840019013, 0.10877712693673547, 0.11368606368312573, 0.09113782269214865, 0.09781157752718006, 0.1205815859870818, 0.1231487244759013, 0.06010659929073858, 0.12023546365064053, 0.10885496986750987, 0.06904882518266209, 0.08844696657760576, 0.08760113059030317, 0.12084435460575149, 0.0928315696870552, 0.05714302610215238, 0.08915501241361745, 0.07759711217784138, 0.07551433611989145, 0.8999366567321154, 0.8587450535161634, 0.8378554895262658, 0.8627580426907018, 0.8455166060800051, 0.8660293674411971, 0.8829064342283606, 0.8328348896491057, 0.8720984218331849, 0.37199875526663306, 0.36714710951800844, 0.38397941148337933, 0.4347572057104099, 0.38085651161096, 0.3945349077894781, 0.359024428129018, 0.3416752546182209, 0.3825411128138235, 0.1746906737799252, 0.16687668794299892, 0.12976844001750687, 0.2788911687240204, 0.20541386279334817, 0.20726594286563127, 0.14837533722284568, 0.1492222498113499, 0.17225396871873966, 0.2037204001716113, 0.12779782133462192, 0.16229985060608565, 0.2588641919877619, 0.18059802507357814, 0.15314534322250384, 0.198434087071513, 0.12447119437688758, 0.3702183367696791, 0.2010731107361512, 0.19834967626982236, 0.12976370574075768, 0.18523322322582503, 0.16348921205908462, 0.132868131981141, 0.3082678289495355, 0.17812904097509796, 0.21598640546336645, 0.028462156780610925, 0.04618297011032679, 0.05434866883634293, 0.050790709377740106, 0.05610335446003223, 9.999999999998899e-05, 0.07629714406522237, 9.999999999998899e-05, 0.050319711557649915, 0.11210571985094397, 0.0942473997135288, 0.0914779477900951, 0.0825399278890091, 0.020433015796868292, 0.030280876075441165, 0.12838327704593844, 0.07308889258798157, 0.09095280222643654, 0.09213753427441629, 0.039929693014843504, 0.05138115528433407, 0.03261337805092568, 0.05414182262656053, 0.05743325041280678, 0.06407161187974775, 0.06355415412932763, 0.02669125999501143, 0.1391292507024089, 0.11072792790124864, 0.1132647066606709, 0.10930010348161923, 0.09575247735276604, 0.0785736337891011, 0.10763587140743858, 0.17691415892050177, 0.08012335392013703, 0.48653424721467853, 0.4772343909119229, 0.47241404946038035, 0.4821080328679592, 0.4535862959747421, 0.44808474241046303, 0.49746627447739034, 0.4720367832693748, 0.4841371428868597, 0.05599307383181329, 0.04835801429354469, 0.01725544969002002, 0.06871845828607259, 0.08665485712146725, 0.1418928929868012, 0.12174886554646036, 0.11998776389681753, 0.07151467942169398, 0.2286204524558767, 0.2851895539516136, 0.31333943357258087, 0.2362391720318927, 0.31284858927911596, 0.21846971217540834, 0.21936345019186743, 0.2203917919820395, 0.19491858806362627, 0.16083291026159152, 0.3261257712795842, 0.19539486742951673, 0.24268579360822173, 0.24985527208028535, 0.26986121114935235, 0.17902112411677829, 0.35975219952888204, 0.15305195257284376, 0.20478943104488467, 0.11641322688900835, 0.1225762991232594, 0.30559936856011716, 0.19666630573420374, 0.16427055258636047, 0.1852996584952319, 0.23597559474741425, 0.12415680423633968, 0.2591908562922792, 0.19669818229899827, 0.23823760456979204, 0.2107420412085853, 0.23502627921813835, 0.1982448087336086, 0.21899431613240306, 0.2329075853422049, 0.23464118309799287, 0.19479491678569627, 0.1833102289721521, 0.1705594648874894, 0.16567145919778392, 0.19245977434431782, 0.18619655286945913, 0.1794332543549072, 0.19219689893020897, 0.17648699392102896, 0.12593793245318485, 0.12537062602627935, 0.17233306918480285, 0.8768540228338799, 0.20072274251604116, 0.8789697784176717, 0.11823619693338971, 0.869003021638542, 0.85859956946013, 0.5298258847143168, 0.15513921691668964, 0.773362492284594, 0.20423307368581045, 0.16670634944661866, 0.7471626625841427, 0.534238193098924, 0.5269261745341225, 0.5251364741120789, 0.18505275301815494, 0.1857951940175322, 0.18547538825118315, 0.1896383065516012, 0.16833958193430498, 0.179120850360159, 0.18022619243277027, 0.18782990154988777, 0.1775994156329601, 0.07154821418386781, 0.07971310307179502, 0.09302511756953868, 0.08461198442351836, 0.08248150119767483, 0.07984463694307231, 0.07707748386754842, 0.0705890397341935, 0.07102344250076453]}, "mutation_prompt": null}
{"id": "07ba61da-26bf-4e90-a098-d6b17b91ab49", "solution": "import numpy as np\n\nclass ImprovedSpeedAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            if _ % (self.budget // 10) == 0:\n                c1 = np.random.uniform(1.0, 3.0)\n                c2 = np.random.uniform(1.0, 3.0)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedSpeedAdaptiveInertiaPSO", "description": "Introducing a strategy to dynamically adjust the population size based on the fitness progress to enhance convergence speed.", "configspace": "", "generation": 77, "fitness": 0.24626394187941691, "feedback": "The algorithm ImprovedSpeedAdaptiveInertiaPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "a7347574-56e1-49f1-885f-0aa962cf452c", "metadata": {"aucs": [0.6682787844905586, 0.65195105438202, 0.5947257766945921, 0.5715219980703594, 0.5927162344668009, 0.5584452293609157, 0.6061215562138544, 0.604264047766381, 0.668285557236904, 0.24764396506563646, 0.22282780285075754, 0.18839621753399982, 0.1804302705440417, 0.16823696267665833, 0.20515279618852, 0.10795604224001254, 0.17016389877230886, 0.17214039840019013, 0.10877712693673547, 0.11368606368312573, 0.09113782269214865, 0.09781157752718006, 0.1205815859870818, 0.1231487244759013, 0.06010659929073858, 0.12023546365064053, 0.10885496986750987, 0.06904882518266209, 0.08844696657760576, 0.08760113059030317, 0.12084435460575149, 0.0928315696870552, 0.05714302610215238, 0.08915501241361745, 0.07759711217784138, 0.07551433611989145, 0.8999366567321154, 0.8587450535161634, 0.8378554895262658, 0.8627580426907018, 0.8455166060800051, 0.8660293674411971, 0.8829064342283606, 0.8328348896491057, 0.8720984218331849, 0.37199875526663306, 0.36714710951800844, 0.38397941148337933, 0.4347572057104099, 0.38085651161096, 0.3945349077894781, 0.359024428129018, 0.3416752546182209, 0.3825411128138235, 0.1746906737799252, 0.16687668794299892, 0.12976844001750687, 0.2788911687240204, 0.20541386279334817, 0.20726594286563127, 0.14837533722284568, 0.1492222498113499, 0.17225396871873966, 0.2037204001716113, 0.12779782133462192, 0.16229985060608565, 0.2588641919877619, 0.18059802507357814, 0.15314534322250384, 0.198434087071513, 0.12447119437688758, 0.3702183367696791, 0.2010731107361512, 0.19834967626982236, 0.12976370574075768, 0.18523322322582503, 0.16348921205908462, 0.132868131981141, 0.3082678289495355, 0.17812904097509796, 0.21598640546336645, 0.028462156780610925, 0.04618297011032679, 0.05434866883634293, 0.050790709377740106, 0.05610335446003223, 9.999999999998899e-05, 0.07629714406522237, 9.999999999998899e-05, 0.050319711557649915, 0.11210571985094397, 0.0942473997135288, 0.0914779477900951, 0.0825399278890091, 0.020433015796868292, 0.030280876075441165, 0.12838327704593844, 0.07308889258798157, 0.09095280222643654, 0.09213753427441629, 0.039929693014843504, 0.05138115528433407, 0.03261337805092568, 0.05414182262656053, 0.05743325041280678, 0.06407161187974775, 0.06355415412932763, 0.02669125999501143, 0.1391292507024089, 0.11072792790124864, 0.1132647066606709, 0.10930010348161923, 0.09575247735276604, 0.0785736337891011, 0.10763587140743858, 0.17691415892050177, 0.08012335392013703, 0.48653424721467853, 0.4772343909119229, 0.47241404946038035, 0.4821080328679592, 0.4535862959747421, 0.44808474241046303, 0.49746627447739034, 0.4720367832693748, 0.4841371428868597, 0.05599307383181329, 0.04835801429354469, 0.01725544969002002, 0.06871845828607259, 0.08665485712146725, 0.1418928929868012, 0.12174886554646036, 0.11998776389681753, 0.07151467942169398, 0.2286204524558767, 0.2851895539516136, 0.31333943357258087, 0.2362391720318927, 0.31284858927911596, 0.21846971217540834, 0.21936345019186743, 0.2203917919820395, 0.19491858806362627, 0.16083291026159152, 0.3261257712795842, 0.19539486742951673, 0.24268579360822173, 0.24985527208028535, 0.26986121114935235, 0.17902112411677829, 0.35975219952888204, 0.15305195257284376, 0.20478943104488467, 0.11641322688900835, 0.1225762991232594, 0.30559936856011716, 0.19666630573420374, 0.16427055258636047, 0.1852996584952319, 0.23597559474741425, 0.12415680423633968, 0.2591908562922792, 0.19669818229899827, 0.23823760456979204, 0.2107420412085853, 0.23502627921813835, 0.1982448087336086, 0.21899431613240306, 0.2329075853422049, 0.23464118309799287, 0.19479491678569627, 0.1833102289721521, 0.1705594648874894, 0.16567145919778392, 0.19245977434431782, 0.18619655286945913, 0.1794332543549072, 0.19219689893020897, 0.17648699392102896, 0.12593793245318485, 0.12537062602627935, 0.17233306918480285, 0.8768540228338799, 0.20072274251604116, 0.8789697784176717, 0.11823619693338971, 0.869003021638542, 0.85859956946013, 0.5298258847143168, 0.15513921691668964, 0.773362492284594, 0.20423307368581045, 0.16670634944661866, 0.7471626625841427, 0.534238193098924, 0.5269261745341225, 0.5251364741120789, 0.18505275301815494, 0.1857951940175322, 0.18547538825118315, 0.1896383065516012, 0.16833958193430498, 0.179120850360159, 0.18022619243277027, 0.18782990154988777, 0.1775994156329601, 0.07154821418386781, 0.07971310307179502, 0.09302511756953868, 0.08461198442351836, 0.08248150119767483, 0.07984463694307231, 0.07707748386754842, 0.0705890397341935, 0.07102344250076453]}, "mutation_prompt": null}
{"id": "b9587ed4-157c-4c70-ba88-6430a1719cb6", "solution": "import numpy as np\n\nclass ImprovedSpeedAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            if _ % (self.budget // 10) == 0:\n                c1 = np.random.uniform(1.0, 3.0)\n                c2 = np.random.uniform(1.0, 3.0)\n            if np.mean((fitness - self.global_best_val) ** 2) < 1e-3:\n                self.pop_size = max(5, int(30 * (1 - _ / self.budget)))\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedSpeedAdaptiveInertiaPSO", "description": "Implementing a dynamic mechanism to adjust the population size based on the convergence speed of the algorithm.", "configspace": "", "generation": 78, "fitness": -Infinity, "feedback": "An exception occurred: TypeError(\"unsupported operand type(s) for -: 'list' and 'float'\").", "error": "TypeError(\"unsupported operand type(s) for -: 'list' and 'float'\")", "parent_id": "a7347574-56e1-49f1-885f-0aa962cf452c", "metadata": {}, "mutation_prompt": null}
{"id": "0dbed349-cedf-4a87-b7fd-42fcca478716", "solution": "import numpy as np\n\nclass ImprovedSpeedAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            if _ % (self.budget // 10) == 0:\n                c1 = np.random.uniform(1.0, 3.0)\n                c2 = np.random.uniform(1.0, 3.0)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedSpeedAdaptiveInertiaPSO", "description": "Introducing a novel mechanism to adaptively update the velocity update coefficients based on a dynamic strategy to accelerate convergence speed.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7347574-56e1-49f1-885f-0aa962cf452c", "metadata": {"aucs": [0.6682787844905586, 0.65195105438202, 0.5947257766945921, 0.5715219980703594, 0.5927162344668009, 0.5584452293609157, 0.6061215562138544, 0.604264047766381, 0.668285557236904, 0.24764396506563646, 0.22282780285075754, 0.18839621753399982, 0.1804302705440417, 0.16823696267665833, 0.20515279618852, 0.10795604224001254, 0.17016389877230886, 0.17214039840019013, 0.10877712693673547, 0.11368606368312573, 0.09113782269214865, 0.09781157752718006, 0.1205815859870818, 0.1231487244759013, 0.06010659929073858, 0.12023546365064053, 0.10885496986750987, 0.06904882518266209, 0.08844696657760576, 0.08760113059030317, 0.12084435460575149, 0.0928315696870552, 0.05714302610215238, 0.08915501241361745, 0.07759711217784138, 0.07551433611989145, 0.8999366567321154, 0.8587450535161634, 0.8378554895262658, 0.8627580426907018, 0.8455166060800051, 0.8660293674411971, 0.8829064342283606, 0.8328348896491057, 0.8720984218331849, 0.37199875526663306, 0.36714710951800844, 0.38397941148337933, 0.4347572057104099, 0.38085651161096, 0.3945349077894781, 0.359024428129018, 0.3416752546182209, 0.3825411128138235, 0.1746906737799252, 0.16687668794299892, 0.12976844001750687, 0.2788911687240204, 0.20541386279334817, 0.20726594286563127, 0.14837533722284568, 0.1492222498113499, 0.17225396871873966, 0.2037204001716113, 0.12779782133462192, 0.16229985060608565, 0.2588641919877619, 0.18059802507357814, 0.15314534322250384, 0.198434087071513, 0.12447119437688758, 0.3702183367696791, 0.2010731107361512, 0.19834967626982236, 0.12976370574075768, 0.18523322322582503, 0.16348921205908462, 0.132868131981141, 0.3082678289495355, 0.17812904097509796, 0.21598640546336645, 0.028462156780610925, 0.04618297011032679, 0.05434866883634293, 0.050790709377740106, 0.05610335446003223, 9.999999999998899e-05, 0.07629714406522237, 9.999999999998899e-05, 0.050319711557649915, 0.11210571985094397, 0.0942473997135288, 0.0914779477900951, 0.0825399278890091, 0.020433015796868292, 0.030280876075441165, 0.12838327704593844, 0.07308889258798157, 0.09095280222643654, 0.09213753427441629, 0.039929693014843504, 0.05138115528433407, 0.03261337805092568, 0.05414182262656053, 0.05743325041280678, 0.06407161187974775, 0.06355415412932763, 0.02669125999501143, 0.1391292507024089, 0.11072792790124864, 0.1132647066606709, 0.10930010348161923, 0.09575247735276604, 0.0785736337891011, 0.10763587140743858, 0.17691415892050177, 0.08012335392013703, 0.48653424721467853, 0.4772343909119229, 0.47241404946038035, 0.4821080328679592, 0.4535862959747421, 0.44808474241046303, 0.49746627447739034, 0.4720367832693748, 0.4841371428868597, 0.05599307383181329, 0.04835801429354469, 0.01725544969002002, 0.06871845828607259, 0.08665485712146725, 0.1418928929868012, 0.12174886554646036, 0.11998776389681753, 0.07151467942169398, 0.2286204524558767, 0.2851895539516136, 0.31333943357258087, 0.2362391720318927, 0.31284858927911596, 0.21846971217540834, 0.21936345019186743, 0.2203917919820395, 0.19491858806362627, 0.16083291026159152, 0.3261257712795842, 0.19539486742951673, 0.24268579360822173, 0.24985527208028535, 0.26986121114935235, 0.17902112411677829, 0.35975219952888204, 0.15305195257284376, 0.20478943104488467, 0.11641322688900835, 0.1225762991232594, 0.30559936856011716, 0.19666630573420374, 0.16427055258636047, 0.1852996584952319, 0.23597559474741425, 0.12415680423633968, 0.2591908562922792, 0.19669818229899827, 0.23823760456979204, 0.2107420412085853, 0.23502627921813835, 0.1982448087336086, 0.21899431613240306, 0.2329075853422049, 0.23464118309799287, 0.19479491678569627, 0.1833102289721521, 0.1705594648874894, 0.16567145919778392, 0.19245977434431782, 0.18619655286945913, 0.1794332543549072, 0.19219689893020897, 0.17648699392102896, 0.12593793245318485, 0.12537062602627935, 0.17233306918480285, 0.8768540228338799, 0.20072274251604116, 0.8789697784176717, 0.11823619693338971, 0.869003021638542, 0.85859956946013, 0.5298258847143168, 0.15513921691668964, 0.773362492284594, 0.20423307368581045, 0.16670634944661866, 0.7471626625841427, 0.534238193098924, 0.5269261745341225, 0.5251364741120789, 0.18505275301815494, 0.1857951940175322, 0.18547538825118315, 0.1896383065516012, 0.16833958193430498, 0.179120850360159, 0.18022619243277027, 0.18782990154988777, 0.1775994156329601, 0.07154821418386781, 0.07971310307179502, 0.09302511756953868, 0.08461198442351836, 0.08248150119767483, 0.07984463694307231, 0.07707748386754842, 0.0705890397341935, 0.07102344250076453]}, "mutation_prompt": null}
{"id": "f418fb2e-236b-42be-abc2-250062545196", "solution": "import numpy as np\n\nclass ImprovedSpeedAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            if _ % (self.budget // 10) == 0:\n                c1 = np.random.uniform(1.0, 3.0)\n                c2 = np.random.uniform(1.0, 3.0)\n                self.global_best_pos = np.copy(self.position[np.argmin(fitness)])\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:]))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedSpeedAdaptiveInertiaPSO", "description": "Accelerating convergence speed by increasing population diversity through random global best updates and adaptive population resizing.", "configspace": "", "generation": 80, "fitness": -Infinity, "feedback": "An exception occurred: SyntaxError('invalid syntax', ('<string>', 47, 13, '            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\\n')).", "error": "SyntaxError('invalid syntax', ('<string>', 47, 13, '            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\\n'))", "parent_id": "a7347574-56e1-49f1-885f-0aa962cf452c", "metadata": {}, "mutation_prompt": null}
{"id": "63d29dce-4786-46c8-8e03-c280bca0bf00", "solution": "import numpy as np\n\nclass ImprovedSpeedAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            if _ % (self.budget // 10) == 0:\n                c1 = np.random.uniform(1.0, 3.0)\n                c2 = np.random.uniform(1.0, 3.0)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedSpeedAdaptiveInertiaPSO", "description": "Introducing a novel mechanism to adaptively update the velocity update coefficients based on a dynamic strategy to accelerate convergence speed.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7347574-56e1-49f1-885f-0aa962cf452c", "metadata": {"aucs": [0.6682787844905586, 0.65195105438202, 0.5947257766945921, 0.5715219980703594, 0.5927162344668009, 0.5584452293609157, 0.6061215562138544, 0.604264047766381, 0.668285557236904, 0.24764396506563646, 0.22282780285075754, 0.18839621753399982, 0.1804302705440417, 0.16823696267665833, 0.20515279618852, 0.10795604224001254, 0.17016389877230886, 0.17214039840019013, 0.10877712693673547, 0.11368606368312573, 0.09113782269214865, 0.09781157752718006, 0.1205815859870818, 0.1231487244759013, 0.06010659929073858, 0.12023546365064053, 0.10885496986750987, 0.06904882518266209, 0.08844696657760576, 0.08760113059030317, 0.12084435460575149, 0.0928315696870552, 0.05714302610215238, 0.08915501241361745, 0.07759711217784138, 0.07551433611989145, 0.8999366567321154, 0.8587450535161634, 0.8378554895262658, 0.8627580426907018, 0.8455166060800051, 0.8660293674411971, 0.8829064342283606, 0.8328348896491057, 0.8720984218331849, 0.37199875526663306, 0.36714710951800844, 0.38397941148337933, 0.4347572057104099, 0.38085651161096, 0.3945349077894781, 0.359024428129018, 0.3416752546182209, 0.3825411128138235, 0.1746906737799252, 0.16687668794299892, 0.12976844001750687, 0.2788911687240204, 0.20541386279334817, 0.20726594286563127, 0.14837533722284568, 0.1492222498113499, 0.17225396871873966, 0.2037204001716113, 0.12779782133462192, 0.16229985060608565, 0.2588641919877619, 0.18059802507357814, 0.15314534322250384, 0.198434087071513, 0.12447119437688758, 0.3702183367696791, 0.2010731107361512, 0.19834967626982236, 0.12976370574075768, 0.18523322322582503, 0.16348921205908462, 0.132868131981141, 0.3082678289495355, 0.17812904097509796, 0.21598640546336645, 0.028462156780610925, 0.04618297011032679, 0.05434866883634293, 0.050790709377740106, 0.05610335446003223, 9.999999999998899e-05, 0.07629714406522237, 9.999999999998899e-05, 0.050319711557649915, 0.11210571985094397, 0.0942473997135288, 0.0914779477900951, 0.0825399278890091, 0.020433015796868292, 0.030280876075441165, 0.12838327704593844, 0.07308889258798157, 0.09095280222643654, 0.09213753427441629, 0.039929693014843504, 0.05138115528433407, 0.03261337805092568, 0.05414182262656053, 0.05743325041280678, 0.06407161187974775, 0.06355415412932763, 0.02669125999501143, 0.1391292507024089, 0.11072792790124864, 0.1132647066606709, 0.10930010348161923, 0.09575247735276604, 0.0785736337891011, 0.10763587140743858, 0.17691415892050177, 0.08012335392013703, 0.48653424721467853, 0.4772343909119229, 0.47241404946038035, 0.4821080328679592, 0.4535862959747421, 0.44808474241046303, 0.49746627447739034, 0.4720367832693748, 0.4841371428868597, 0.05599307383181329, 0.04835801429354469, 0.01725544969002002, 0.06871845828607259, 0.08665485712146725, 0.1418928929868012, 0.12174886554646036, 0.11998776389681753, 0.07151467942169398, 0.2286204524558767, 0.2851895539516136, 0.31333943357258087, 0.2362391720318927, 0.31284858927911596, 0.21846971217540834, 0.21936345019186743, 0.2203917919820395, 0.19491858806362627, 0.16083291026159152, 0.3261257712795842, 0.19539486742951673, 0.24268579360822173, 0.24985527208028535, 0.26986121114935235, 0.17902112411677829, 0.35975219952888204, 0.15305195257284376, 0.20478943104488467, 0.11641322688900835, 0.1225762991232594, 0.30559936856011716, 0.19666630573420374, 0.16427055258636047, 0.1852996584952319, 0.23597559474741425, 0.12415680423633968, 0.2591908562922792, 0.19669818229899827, 0.23823760456979204, 0.2107420412085853, 0.23502627921813835, 0.1982448087336086, 0.21899431613240306, 0.2329075853422049, 0.23464118309799287, 0.19479491678569627, 0.1833102289721521, 0.1705594648874894, 0.16567145919778392, 0.19245977434431782, 0.18619655286945913, 0.1794332543549072, 0.19219689893020897, 0.17648699392102896, 0.12593793245318485, 0.12537062602627935, 0.17233306918480285, 0.8768540228338799, 0.20072274251604116, 0.8789697784176717, 0.11823619693338971, 0.869003021638542, 0.85859956946013, 0.5298258847143168, 0.15513921691668964, 0.773362492284594, 0.20423307368581045, 0.16670634944661866, 0.7471626625841427, 0.534238193098924, 0.5269261745341225, 0.5251364741120789, 0.18505275301815494, 0.1857951940175322, 0.18547538825118315, 0.1896383065516012, 0.16833958193430498, 0.179120850360159, 0.18022619243277027, 0.18782990154988777, 0.1775994156329601, 0.07154821418386781, 0.07971310307179502, 0.09302511756953868, 0.08461198442351836, 0.08248150119767483, 0.07984463694307231, 0.07707748386754842, 0.0705890397341935, 0.07102344250076453]}, "mutation_prompt": null}
{"id": "1785f46c-84ef-45f1-9c0d-27b37cf901bb", "solution": "import numpy as np\n\nclass FastAdaptivePopulationPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            if _ % (self.budget // 10) == 0:\n                c1 = np.random.uniform(1.0, 3.0)\n                c2 = np.random.uniform(1.0, 3.0)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * np.sin(_ / self.budget * np.pi))) if _ % (self.budget // 20) == 0 else self.pop_size\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "FastAdaptivePopulationPSO", "description": "Utilizing a dynamic population adjustment strategy to improve convergence speed by adapting the population size based on fitness evaluation progress.", "configspace": "", "generation": 82, "fitness": 0.1819060180930949, "feedback": "The algorithm FastAdaptivePopulationPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.18.", "error": "", "parent_id": "a7347574-56e1-49f1-885f-0aa962cf452c", "metadata": {"aucs": [0.502819069066004, 0.5162661151058348, 0.5410587571476568, 0.5019063232637506, 0.18139827393303354, 0.5168112866539513, 0.4759228700892387, 0.5105966673897073, 0.5018146759517806, 0.06285602973002424, 0.0452862020431799, 0.027278428921000852, 0.07548993697475603, 0.012982941839812856, 0.10399169707116818, 0.04822546411338169, 9.999999999998899e-05, 0.1002549879925404, 0.09080818558063763, 0.07417493471083747, 0.046517882809372746, 0.08562248081783086, 0.05562635008101802, 0.04878666688431099, 0.04867674267716593, 0.058968644836722706, 0.0860565696533917, 0.0423210400909797, 0.06065425357620202, 0.023890234897483986, 0.08857713296209435, 0.048589213291251654, 0.028725789903317644, 0.030014536234906464, 0.026842285806788047, 0.040460113452560065, 0.8705892744225104, 0.8272866655737452, 0.8142025016221749, 0.7889932739408947, 0.7492267808257038, 0.7791636523710964, 0.8110962322934749, 0.7944858554807356, 0.7957925843527807, 0.39615656342555783, 0.31116543255294804, 0.18743301484715258, 0.3018497846734446, 0.1422735702284188, 0.13754370143890715, 0.08831086666958166, 0.2728373280140921, 0.2915931736010551, 0.12867111536858522, 0.10781128481449831, 0.09736491942674708, 0.15677283687625654, 0.12806247845019203, 0.10854765105404074, 0.09363652236495068, 0.14634054074909442, 0.11100110702129273, 0.19905949066361484, 0.12419145907728513, 0.1542479053391953, 9.999999999998899e-05, 0.13894084020589814, 0.14061296182130922, 0.2594114871393379, 0.14398457149900346, 0.12269154486890199, 0.16141524365438997, 0.1327235017573909, 0.14251184353562873, 0.11948094925428687, 0.12270637270674034, 0.12518044201294576, 0.2825401559824352, 0.017951141846498264, 0.16061852843003321, 9.999999999998899e-05, 9.999999999998899e-05, 0.003919218412177572, 0.024317912145711995, 9.999999999998899e-05, 0.0192845789270506, 0.002370495775685044, 9.999999999998899e-05, 0.04277425230798304, 0.09163851836663195, 0.06876951694804612, 0.063996114502889, 0.057486627093270126, 0.03474841205951085, 0.06868986119248133, 0.12008569863143781, 0.05843998778245618, 0.053305647777271425, 0.09159140632412377, 0.0008591463019749224, 0.005655440232987585, 0.03555273010723925, 0.019561069500732442, 0.04171635212069669, 0.04743362666714834, 0.0013462509325555816, 0.014802326484015249, 0.1230580030028583, 0.07159598292949287, 0.06504567295545516, 0.14321705892394143, 0.12025742914684456, 0.09820821217850262, 0.12554257749740116, 0.10849702646435966, 0.14095443772300098, 0.39145243789283035, 0.42848873790509556, 0.4431534024932128, 0.4038561727344938, 0.40844040369935775, 0.38633685129830964, 0.4476569029996419, 0.5026994950414571, 0.3989795458372911, 0.03490039112695831, 0.03663113549826835, 0.046277321536993266, 0.040388166392903435, 0.06406150936017496, 0.05895282799244583, 0.05861258939817249, 0.07255877370009278, 0.07955392470846401, 0.1703843272288159, 0.13091398628730533, 0.1360953200426025, 0.15824645124712333, 0.14381620309761567, 0.16191768633987103, 0.27627788920089313, 0.1758338235807727, 0.1340603213758499, 0.15407730314019086, 0.16947574300300383, 0.17718840177463024, 0.16050934732747224, 0.21647800159617048, 0.1620092185001406, 0.19458606358312813, 0.3053045244293612, 0.15957630490512564, 0.09755245573611815, 0.12375621144893134, 0.12612541716853487, 0.10446962325864284, 0.17260261401315435, 0.1150268907676334, 0.1423338235532725, 0.1615199477542727, 0.10721277977572752, 0.22002706923561388, 0.17500754603598812, 0.19711302022192867, 0.19060370002827376, 0.13993044515032105, 0.1878377438282951, 0.2365350580710186, 0.20729765408527567, 0.20302025420956693, 0.16489898049218954, 0.16833287360043836, 0.16981392237322634, 0.17304899878181623, 0.19234569348376618, 0.1640162076082321, 0.17309901084748003, 0.1753889706651942, 0.1723404962278059, 0.745192964145498, 0.1569449914846407, 0.17341741052302895, 0.17376014597147205, 0.1977740996229399, 0.19315220297578795, 0.171088693507784, 0.20073977467684978, 0.20106845732410983, 0.4870541763467763, 0.1637401353633604, 0.28859139346095897, 0.3455188039624353, 0.16497085349702778, 0.20234442410801434, 0.15628669275021168, 0.1500988063083869, 0.23685722228720485, 0.19496945142126165, 0.19262455027326097, 0.1876112064192874, 0.18058586072392135, 0.20591912806459722, 0.18755416426353122, 0.19034566482730375, 0.19043807355139974, 0.17917704196791362, 0.06977757070604562, 0.050506164036250634, 0.05459936349542405, 0.05836393316659183, 0.07392987996029898, 0.05811566300893589, 0.06932214871754827, 0.06394536287490027, 0.06223298839012492]}, "mutation_prompt": null}
{"id": "377fbf7c-0d68-445b-988c-bc856349e785", "solution": "import numpy as np\n\nclass ImprovedSpeedAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            if _ % (self.budget // 10) == 0:\n                c1 = np.random.uniform(1.0, 3.0)\n                c2 = np.random.uniform(1.0, 3.0)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedSpeedAdaptiveInertiaPSO", "description": "Introducing a novel mechanism to adaptively update the velocity update coefficients based on a dynamic strategy to accelerate convergence speed.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7347574-56e1-49f1-885f-0aa962cf452c", "metadata": {"aucs": [0.6682787844905586, 0.65195105438202, 0.5947257766945921, 0.5715219980703594, 0.5927162344668009, 0.5584452293609157, 0.6061215562138544, 0.604264047766381, 0.668285557236904, 0.24764396506563646, 0.22282780285075754, 0.18839621753399982, 0.1804302705440417, 0.16823696267665833, 0.20515279618852, 0.10795604224001254, 0.17016389877230886, 0.17214039840019013, 0.10877712693673547, 0.11368606368312573, 0.09113782269214865, 0.09781157752718006, 0.1205815859870818, 0.1231487244759013, 0.06010659929073858, 0.12023546365064053, 0.10885496986750987, 0.06904882518266209, 0.08844696657760576, 0.08760113059030317, 0.12084435460575149, 0.0928315696870552, 0.05714302610215238, 0.08915501241361745, 0.07759711217784138, 0.07551433611989145, 0.8999366567321154, 0.8587450535161634, 0.8378554895262658, 0.8627580426907018, 0.8455166060800051, 0.8660293674411971, 0.8829064342283606, 0.8328348896491057, 0.8720984218331849, 0.37199875526663306, 0.36714710951800844, 0.38397941148337933, 0.4347572057104099, 0.38085651161096, 0.3945349077894781, 0.359024428129018, 0.3416752546182209, 0.3825411128138235, 0.1746906737799252, 0.16687668794299892, 0.12976844001750687, 0.2788911687240204, 0.20541386279334817, 0.20726594286563127, 0.14837533722284568, 0.1492222498113499, 0.17225396871873966, 0.2037204001716113, 0.12779782133462192, 0.16229985060608565, 0.2588641919877619, 0.18059802507357814, 0.15314534322250384, 0.198434087071513, 0.12447119437688758, 0.3702183367696791, 0.2010731107361512, 0.19834967626982236, 0.12976370574075768, 0.18523322322582503, 0.16348921205908462, 0.132868131981141, 0.3082678289495355, 0.17812904097509796, 0.21598640546336645, 0.028462156780610925, 0.04618297011032679, 0.05434866883634293, 0.050790709377740106, 0.05610335446003223, 9.999999999998899e-05, 0.07629714406522237, 9.999999999998899e-05, 0.050319711557649915, 0.11210571985094397, 0.0942473997135288, 0.0914779477900951, 0.0825399278890091, 0.020433015796868292, 0.030280876075441165, 0.12838327704593844, 0.07308889258798157, 0.09095280222643654, 0.09213753427441629, 0.039929693014843504, 0.05138115528433407, 0.03261337805092568, 0.05414182262656053, 0.05743325041280678, 0.06407161187974775, 0.06355415412932763, 0.02669125999501143, 0.1391292507024089, 0.11072792790124864, 0.1132647066606709, 0.10930010348161923, 0.09575247735276604, 0.0785736337891011, 0.10763587140743858, 0.17691415892050177, 0.08012335392013703, 0.48653424721467853, 0.4772343909119229, 0.47241404946038035, 0.4821080328679592, 0.4535862959747421, 0.44808474241046303, 0.49746627447739034, 0.4720367832693748, 0.4841371428868597, 0.05599307383181329, 0.04835801429354469, 0.01725544969002002, 0.06871845828607259, 0.08665485712146725, 0.1418928929868012, 0.12174886554646036, 0.11998776389681753, 0.07151467942169398, 0.2286204524558767, 0.2851895539516136, 0.31333943357258087, 0.2362391720318927, 0.31284858927911596, 0.21846971217540834, 0.21936345019186743, 0.2203917919820395, 0.19491858806362627, 0.16083291026159152, 0.3261257712795842, 0.19539486742951673, 0.24268579360822173, 0.24985527208028535, 0.26986121114935235, 0.17902112411677829, 0.35975219952888204, 0.15305195257284376, 0.20478943104488467, 0.11641322688900835, 0.1225762991232594, 0.30559936856011716, 0.19666630573420374, 0.16427055258636047, 0.1852996584952319, 0.23597559474741425, 0.12415680423633968, 0.2591908562922792, 0.19669818229899827, 0.23823760456979204, 0.2107420412085853, 0.23502627921813835, 0.1982448087336086, 0.21899431613240306, 0.2329075853422049, 0.23464118309799287, 0.19479491678569627, 0.1833102289721521, 0.1705594648874894, 0.16567145919778392, 0.19245977434431782, 0.18619655286945913, 0.1794332543549072, 0.19219689893020897, 0.17648699392102896, 0.12593793245318485, 0.12537062602627935, 0.17233306918480285, 0.8768540228338799, 0.20072274251604116, 0.8789697784176717, 0.11823619693338971, 0.869003021638542, 0.85859956946013, 0.5298258847143168, 0.15513921691668964, 0.773362492284594, 0.20423307368581045, 0.16670634944661866, 0.7471626625841427, 0.534238193098924, 0.5269261745341225, 0.5251364741120789, 0.18505275301815494, 0.1857951940175322, 0.18547538825118315, 0.1896383065516012, 0.16833958193430498, 0.179120850360159, 0.18022619243277027, 0.18782990154988777, 0.1775994156329601, 0.07154821418386781, 0.07971310307179502, 0.09302511756953868, 0.08461198442351836, 0.08248150119767483, 0.07984463694307231, 0.07707748386754842, 0.0705890397341935, 0.07102344250076453]}, "mutation_prompt": null}
{"id": "31163893-5925-45c1-a48a-39601311f693", "solution": "import numpy as np\n\nclass HybridPSO_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            if _ % (self.budget // 10) == 0:\n                c1 = np.random.uniform(1.0, 3.0)\n                c2 = np.random.uniform(1.0, 3.0)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n            # Integrate Differential Evolution\n            mutation_factor = 0.5\n            crossover_rate = 0.9\n            for i in range(self.pop_size):\n                candidates = [ind for ind in range(self.pop_size) if ind != i]\n                a, b, c = self.position[np.random.choice(candidates, 3, replace=False)]\n                mutant = a + mutation_factor * (b - c)\n                crossover_mask = np.random.rand(self.dim) < crossover_rate\n                self.position[i] = np.where(crossover_mask, mutant, self.position[i])\n        return self.global_best_pos", "name": "HybridPSO_DE", "description": "Implement a hybrid strategy combining Particle Swarm Optimization and Differential Evolution to leverage their respective strengths for faster convergence.", "configspace": "", "generation": 84, "fitness": 0.11402281724431403, "feedback": "The algorithm HybridPSO_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.16.", "error": "", "parent_id": "a7347574-56e1-49f1-885f-0aa962cf452c", "metadata": {"aucs": [0.1849808754218244, 0.18910993098407713, 0.17971790945551835, 0.17229779365689268, 0.16920006953633981, 0.17391160730916033, 0.16140698362569672, 0.13090868402476263, 0.18113706446324995, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05863282857014496, 0.03992875452092581, 0.04495461715944582, 0.03779415464413649, 0.04146696519378279, 0.038876979547329715, 0.06298459115987842, 0.04014106195077982, 0.03269186903661625, 0.035487185301975255, 0.023874780564658304, 0.039587505737745055, 0.025090709943903722, 0.022621220088324345, 0.034493870899375945, 0.024222558854262388, 0.033696641972486896, 0.032562948291406046, 0.9386810744997279, 0.8246855311424128, 0.828434042720162, 0.6804367880646773, 0.9082181876223201, 0.8991068419821817, 0.3725684164468027, 0.8582416261696022, 0.9834545038171395, 0.07540368649044649, 0.06854619994215094, 0.06569466064108531, 0.05338604294941962, 0.11592254870078178, 0.08549381969431202, 0.09954398325072567, 0.10308521939352921, 0.09274089190815615, 0.10870365382005343, 0.1268425710949097, 0.11035367240789906, 0.15083498253942673, 0.13106142785730868, 0.11355764870019336, 0.11036747884991926, 0.1335547220431983, 0.0977180165687116, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0001621628289536492, 9.999999999998899e-05, 9.999999999998899e-05, 0.004733423293059591, 9.999999999998899e-05, 0.019986895916102698, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030415765248944626, 9.999999999998899e-05, 0.0039377276341315826, 9.999999999998899e-05, 0.000987539367507284, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04210654198936281, 0.04789688758659527, 0.05394640634970893, 0.049267281371099814, 0.008420968405080886, 0.0130084743990172, 0.04173326246883058, 0.024503300861424604, 0.0476413791852931, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0038090121493136175, 0.00412689538313793, 9.999999999998899e-05, 9.999999999998899e-05, 0.19420517206004317, 0.16845597538457768, 0.20094348754040425, 0.19420146622243406, 0.20166751557295837, 0.19853392138116233, 0.17995620885996122, 0.1810592653784403, 0.21294650543632343, 0.04548228891727035, 0.06387633026350303, 0.03187430413432868, 0.04222111533601114, 0.03732756786619085, 0.04310834448506007, 0.04575216622902356, 0.03908549725113264, 0.04926555556141643, 0.12483617844573458, 0.13675497733058073, 0.13169244408858116, 0.1214089918210659, 0.11594668605687675, 0.12275272212479682, 0.133005257732985, 0.13916302702255468, 0.11908319874774698, 0.16957677582052233, 0.15785286112168428, 0.1637910305920075, 0.1642601484894225, 0.15223391628410632, 0.15425290434024397, 0.15644115386391355, 0.17377774300845283, 0.15694279031593827, 0.11711537826817953, 0.10067688781260276, 0.10684440593115763, 0.1029634150593971, 0.11102680982146196, 0.10510045632078469, 0.11009010335431724, 0.10719949799658557, 0.09883689710962829, 0.16821295708004547, 0.147721992575361, 0.1488658014408626, 0.16930814441815167, 0.14445262701301964, 0.14427174131431042, 0.14965375124176294, 0.1353340108882456, 0.1474614450566527, 0.15819565555112547, 0.09990296506556462, 0.10952045440583547, 0.14246341622838132, 0.12972666040660585, 0.12676381950234006, 0.16669422719998406, 0.14377006941664572, 0.11897175968714635, 0.11367859343081832, 0.15363096291153977, 0.12574277884227247, 0.1325025498040916, 0.1676519520910006, 0.14827004600377036, 0.1544825842492622, 0.17189029732152472, 0.1545727152654992, 0.16040346249713344, 0.14060114417489278, 0.12313176869692433, 0.13454734155054926, 0.14061354900092482, 0.1403767525665598, 0.14529527295561662, 0.17858653815057746, 0.14175256362527056, 0.16762579452793147, 0.17557189282104024, 0.1709842408006571, 0.19310802716020636, 0.18453368310546525, 0.1657683977903629, 0.17255530025877175, 0.1792720770037518, 0.17295192311632324, 0.06089472914126348, 0.04840960221782242, 0.050328336577183164, 0.05705902729981349, 0.04280216774032941, 0.04797567959216231, 0.03972629367886005, 0.0425400948366188, 0.0445072130419083]}, "mutation_prompt": null}
{"id": "4398333d-93ca-4636-ba31-3daf3474df32", "solution": "import numpy as np\n\nclass ImprovedSpeedAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            if _ % (self.budget // 10) == 0:\n                c1 = np.random.uniform(1.0, 3.0)\n                c2 = np.random.uniform(1.0, 3.0)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size\n            if self.pop_size < 30:\n                self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n                self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n                self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n                self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedSpeedAdaptiveInertiaPSO", "description": "Implementing a dynamic population resizing strategy to maintain diversity and accelerate convergence speed in the PSO algorithm.", "configspace": "", "generation": 85, "fitness": 0.24626394187941691, "feedback": "The algorithm ImprovedSpeedAdaptiveInertiaPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "a7347574-56e1-49f1-885f-0aa962cf452c", "metadata": {"aucs": [0.6682787844905586, 0.65195105438202, 0.5947257766945921, 0.5715219980703594, 0.5927162344668009, 0.5584452293609157, 0.6061215562138544, 0.604264047766381, 0.668285557236904, 0.24764396506563646, 0.22282780285075754, 0.18839621753399982, 0.1804302705440417, 0.16823696267665833, 0.20515279618852, 0.10795604224001254, 0.17016389877230886, 0.17214039840019013, 0.10877712693673547, 0.11368606368312573, 0.09113782269214865, 0.09781157752718006, 0.1205815859870818, 0.1231487244759013, 0.06010659929073858, 0.12023546365064053, 0.10885496986750987, 0.06904882518266209, 0.08844696657760576, 0.08760113059030317, 0.12084435460575149, 0.0928315696870552, 0.05714302610215238, 0.08915501241361745, 0.07759711217784138, 0.07551433611989145, 0.8999366567321154, 0.8587450535161634, 0.8378554895262658, 0.8627580426907018, 0.8455166060800051, 0.8660293674411971, 0.8829064342283606, 0.8328348896491057, 0.8720984218331849, 0.37199875526663306, 0.36714710951800844, 0.38397941148337933, 0.4347572057104099, 0.38085651161096, 0.3945349077894781, 0.359024428129018, 0.3416752546182209, 0.3825411128138235, 0.1746906737799252, 0.16687668794299892, 0.12976844001750687, 0.2788911687240204, 0.20541386279334817, 0.20726594286563127, 0.14837533722284568, 0.1492222498113499, 0.17225396871873966, 0.2037204001716113, 0.12779782133462192, 0.16229985060608565, 0.2588641919877619, 0.18059802507357814, 0.15314534322250384, 0.198434087071513, 0.12447119437688758, 0.3702183367696791, 0.2010731107361512, 0.19834967626982236, 0.12976370574075768, 0.18523322322582503, 0.16348921205908462, 0.132868131981141, 0.3082678289495355, 0.17812904097509796, 0.21598640546336645, 0.028462156780610925, 0.04618297011032679, 0.05434866883634293, 0.050790709377740106, 0.05610335446003223, 9.999999999998899e-05, 0.07629714406522237, 9.999999999998899e-05, 0.050319711557649915, 0.11210571985094397, 0.0942473997135288, 0.0914779477900951, 0.0825399278890091, 0.020433015796868292, 0.030280876075441165, 0.12838327704593844, 0.07308889258798157, 0.09095280222643654, 0.09213753427441629, 0.039929693014843504, 0.05138115528433407, 0.03261337805092568, 0.05414182262656053, 0.05743325041280678, 0.06407161187974775, 0.06355415412932763, 0.02669125999501143, 0.1391292507024089, 0.11072792790124864, 0.1132647066606709, 0.10930010348161923, 0.09575247735276604, 0.0785736337891011, 0.10763587140743858, 0.17691415892050177, 0.08012335392013703, 0.48653424721467853, 0.4772343909119229, 0.47241404946038035, 0.4821080328679592, 0.4535862959747421, 0.44808474241046303, 0.49746627447739034, 0.4720367832693748, 0.4841371428868597, 0.05599307383181329, 0.04835801429354469, 0.01725544969002002, 0.06871845828607259, 0.08665485712146725, 0.1418928929868012, 0.12174886554646036, 0.11998776389681753, 0.07151467942169398, 0.2286204524558767, 0.2851895539516136, 0.31333943357258087, 0.2362391720318927, 0.31284858927911596, 0.21846971217540834, 0.21936345019186743, 0.2203917919820395, 0.19491858806362627, 0.16083291026159152, 0.3261257712795842, 0.19539486742951673, 0.24268579360822173, 0.24985527208028535, 0.26986121114935235, 0.17902112411677829, 0.35975219952888204, 0.15305195257284376, 0.20478943104488467, 0.11641322688900835, 0.1225762991232594, 0.30559936856011716, 0.19666630573420374, 0.16427055258636047, 0.1852996584952319, 0.23597559474741425, 0.12415680423633968, 0.2591908562922792, 0.19669818229899827, 0.23823760456979204, 0.2107420412085853, 0.23502627921813835, 0.1982448087336086, 0.21899431613240306, 0.2329075853422049, 0.23464118309799287, 0.19479491678569627, 0.1833102289721521, 0.1705594648874894, 0.16567145919778392, 0.19245977434431782, 0.18619655286945913, 0.1794332543549072, 0.19219689893020897, 0.17648699392102896, 0.12593793245318485, 0.12537062602627935, 0.17233306918480285, 0.8768540228338799, 0.20072274251604116, 0.8789697784176717, 0.11823619693338971, 0.869003021638542, 0.85859956946013, 0.5298258847143168, 0.15513921691668964, 0.773362492284594, 0.20423307368581045, 0.16670634944661866, 0.7471626625841427, 0.534238193098924, 0.5269261745341225, 0.5251364741120789, 0.18505275301815494, 0.1857951940175322, 0.18547538825118315, 0.1896383065516012, 0.16833958193430498, 0.179120850360159, 0.18022619243277027, 0.18782990154988777, 0.1775994156329601, 0.07154821418386781, 0.07971310307179502, 0.09302511756953868, 0.08461198442351836, 0.08248150119767483, 0.07984463694307231, 0.07707748386754842, 0.0705890397341935, 0.07102344250076453]}, "mutation_prompt": null}
{"id": "7ed69639-5a61-4268-832f-d029d71ef490", "solution": "import numpy as np\n\nclass ImprovedSpeedAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for t in range(1, self.budget + 1):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - t / self.budget * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + t / self.budget * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + t / self.budget * (self.c2_max - self.c2_min)\n            if t % (self.budget // 10) == 0:\n                c1 = np.random.uniform(1.0, 3.0)\n                c2 = np.random.uniform(1.0, 3.0)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            if t % (self.budget // 20) == 0:\n                self.pop_size = max(5, int(30 * (1 - t / self.budget)))\n                self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n                self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n                self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n                self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedSpeedAdaptiveInertiaPSO", "description": "Implementing a novel mechanism to dynamically adjust the population size based on the current iteration progress to enhance convergence speed.", "configspace": "", "generation": 86, "fitness": 0.24346748569167562, "feedback": "The algorithm ImprovedSpeedAdaptiveInertiaPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.22.", "error": "", "parent_id": "a7347574-56e1-49f1-885f-0aa962cf452c", "metadata": {"aucs": [0.6185904805474867, 0.6018031558718031, 0.5914617283884025, 0.6018353915089146, 0.5366775497026617, 0.5844627940942031, 0.6133743145420631, 0.6400355500713841, 0.5680071908354956, 0.17843031858834602, 0.19283321219527783, 0.10899364614345763, 0.1876829755760242, 0.1257941126279487, 0.10374382628348999, 0.09512712105349541, 0.15890299061922197, 0.15364561151247214, 0.08689130962950053, 0.0966394898359314, 0.08199990632314724, 0.09281199509655347, 0.11229045844859575, 0.15831127831038316, 0.08466053193750778, 0.10371435837970189, 0.14060130811987204, 0.10357057902048383, 0.0655073790195071, 0.08935705849577624, 0.08295691501828784, 0.11968619124692181, 0.07898241477869394, 0.08720106142090445, 0.08025082684861484, 0.05182559399643705, 0.882479348892824, 0.8506643210167524, 0.8278985382701356, 0.8402843150928965, 0.8610939175462483, 0.8483213656927363, 0.8804855674628466, 0.8320268121656776, 0.8472814611145132, 0.4135287969501248, 0.37994864153160557, 0.39175034647206486, 0.3836525349517417, 0.4100336835247884, 0.43185863956553017, 0.40951021617948724, 0.36864113931897824, 0.3756283733685236, 0.1904171202829542, 0.13337005282293235, 0.11620365103172514, 0.27699055045542287, 0.16723150077064652, 0.18923082635876431, 0.15073293239690388, 0.1496039273804467, 0.17477509545405678, 0.20413565398216926, 0.24111358472201683, 0.16002730157541956, 0.16336261825869336, 0.1970210299675621, 0.17614241865638047, 0.20240872372233076, 0.13079639349882577, 0.15916146559366318, 0.1851093356529766, 0.17681096332106538, 0.22592738498388343, 0.13054186498116727, 0.1738920017888066, 0.19324899725573097, 0.1908440563609587, 0.2051295146838068, 0.12580986301345332, 0.10337010852093176, 0.0444440474926634, 0.0007579811161158023, 0.06332470570379356, 0.046239541362523395, 0.0435375338427606, 0.011431117490165343, 9.999999999998899e-05, 0.04684007449368999, 0.11528888738084264, 0.08772898339528479, 0.11174515728205692, 0.053320223458876326, 0.01299306223920249, 0.03540394725386853, 0.16930015170907886, 0.09684836868742353, 0.05362611904226755, 0.06306276235310238, 0.004336012329698824, 0.04697612426866549, 0.052452504681555934, 0.040564911758784405, 0.02067125435970607, 0.04420368112294959, 0.05191305883324748, 0.0450213765464903, 0.19710069456615154, 0.06727756521306205, 0.07530054341051506, 0.059976736656206175, 0.11078853718271131, 0.04580321332402726, 0.16026138490228603, 0.18379449882772225, 0.08015402344306932, 0.5012789741344774, 0.48217225857061696, 0.508236264477751, 0.4610384003173219, 0.4469509141255936, 0.4641784576490843, 0.5192083421514677, 0.4699222684640042, 0.4647605876773684, 0.04260120322232519, 0.0555083908039149, 0.04278261541150785, 0.059308025668449726, 0.07436349001588782, 0.08673433601343439, 0.09823483085994977, 0.09428167823254174, 0.06219801032165595, 0.25580358116554147, 0.34316967712182755, 0.1841021124158354, 0.301662640122091, 0.286098429022809, 0.12865014623618154, 0.20717998751408673, 0.17769129000875983, 0.3526425358877041, 0.15524908487165812, 0.26628314639820105, 0.19252822035790196, 0.2740599174578203, 0.23912388480499958, 0.2591962836449776, 0.21903954780194912, 0.3449976236015446, 0.165981170657311, 0.19135517676991043, 0.13114944962956632, 0.17381955433062435, 0.2764091175084098, 0.21546025488769704, 0.16190056231761119, 0.1732026970078837, 0.2274743638232195, 0.09591244452815206, 0.20386924361472003, 0.2014799849913167, 0.21275613645397073, 0.20211734038360396, 0.2293454570780925, 0.2202655357228912, 0.23705988158926095, 0.2681986782054663, 0.24972035939307868, 0.1773667448917211, 0.24495423887607326, 0.19570297396170477, 0.17245202155125827, 0.19230103930158782, 0.18145802573229652, 0.1825211370421186, 0.2046745943947692, 0.18603124629806722, 0.12594638331165375, 0.12265255620606952, 0.13160179536100225, 0.842516983184203, 0.2005297429626075, 0.8697009298337252, 0.11748090297776104, 0.8505089971506039, 0.8357150845107258, 0.5682647807667689, 0.1558991959318451, 0.665864962082536, 0.7456169752807742, 0.20535901420594316, 0.7582259632684829, 0.09324601527842658, 0.6563759749284497, 0.5853588846152974, 0.17359436863711675, 0.1870197740593258, 0.19441659451468385, 0.188974373754063, 0.19470849995845863, 0.1834919758546294, 0.21456978005903615, 0.18236933752981976, 0.1703183507386833, 0.09875551546470618, 0.07973242953885651, 0.1298696578646681, 0.0781863830580154, 0.09534278076796998, 0.08530290127129425, 0.09174678858120855, 0.08445057671901612, 0.07933872324917701]}, "mutation_prompt": null}
{"id": "2ad2fc7e-2661-4a8b-9c2a-110cdd334a87", "solution": "import numpy as np\n\nclass ImprovedSpeedAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            if _ % (self.budget // 10) == 0:\n                c1 = np.random.uniform(1.0, 3.0)\n                c2 = np.random.uniform(1.0, 3.0)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedSpeedAdaptiveInertiaPSO", "description": "Introducing a novel mechanism to adaptively update the velocity update coefficients based on a dynamic strategy to accelerate convergence speed.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7347574-56e1-49f1-885f-0aa962cf452c", "metadata": {"aucs": [0.6682787844905586, 0.65195105438202, 0.5947257766945921, 0.5715219980703594, 0.5927162344668009, 0.5584452293609157, 0.6061215562138544, 0.604264047766381, 0.668285557236904, 0.24764396506563646, 0.22282780285075754, 0.18839621753399982, 0.1804302705440417, 0.16823696267665833, 0.20515279618852, 0.10795604224001254, 0.17016389877230886, 0.17214039840019013, 0.10877712693673547, 0.11368606368312573, 0.09113782269214865, 0.09781157752718006, 0.1205815859870818, 0.1231487244759013, 0.06010659929073858, 0.12023546365064053, 0.10885496986750987, 0.06904882518266209, 0.08844696657760576, 0.08760113059030317, 0.12084435460575149, 0.0928315696870552, 0.05714302610215238, 0.08915501241361745, 0.07759711217784138, 0.07551433611989145, 0.8999366567321154, 0.8587450535161634, 0.8378554895262658, 0.8627580426907018, 0.8455166060800051, 0.8660293674411971, 0.8829064342283606, 0.8328348896491057, 0.8720984218331849, 0.37199875526663306, 0.36714710951800844, 0.38397941148337933, 0.4347572057104099, 0.38085651161096, 0.3945349077894781, 0.359024428129018, 0.3416752546182209, 0.3825411128138235, 0.1746906737799252, 0.16687668794299892, 0.12976844001750687, 0.2788911687240204, 0.20541386279334817, 0.20726594286563127, 0.14837533722284568, 0.1492222498113499, 0.17225396871873966, 0.2037204001716113, 0.12779782133462192, 0.16229985060608565, 0.2588641919877619, 0.18059802507357814, 0.15314534322250384, 0.198434087071513, 0.12447119437688758, 0.3702183367696791, 0.2010731107361512, 0.19834967626982236, 0.12976370574075768, 0.18523322322582503, 0.16348921205908462, 0.132868131981141, 0.3082678289495355, 0.17812904097509796, 0.21598640546336645, 0.028462156780610925, 0.04618297011032679, 0.05434866883634293, 0.050790709377740106, 0.05610335446003223, 9.999999999998899e-05, 0.07629714406522237, 9.999999999998899e-05, 0.050319711557649915, 0.11210571985094397, 0.0942473997135288, 0.0914779477900951, 0.0825399278890091, 0.020433015796868292, 0.030280876075441165, 0.12838327704593844, 0.07308889258798157, 0.09095280222643654, 0.09213753427441629, 0.039929693014843504, 0.05138115528433407, 0.03261337805092568, 0.05414182262656053, 0.05743325041280678, 0.06407161187974775, 0.06355415412932763, 0.02669125999501143, 0.1391292507024089, 0.11072792790124864, 0.1132647066606709, 0.10930010348161923, 0.09575247735276604, 0.0785736337891011, 0.10763587140743858, 0.17691415892050177, 0.08012335392013703, 0.48653424721467853, 0.4772343909119229, 0.47241404946038035, 0.4821080328679592, 0.4535862959747421, 0.44808474241046303, 0.49746627447739034, 0.4720367832693748, 0.4841371428868597, 0.05599307383181329, 0.04835801429354469, 0.01725544969002002, 0.06871845828607259, 0.08665485712146725, 0.1418928929868012, 0.12174886554646036, 0.11998776389681753, 0.07151467942169398, 0.2286204524558767, 0.2851895539516136, 0.31333943357258087, 0.2362391720318927, 0.31284858927911596, 0.21846971217540834, 0.21936345019186743, 0.2203917919820395, 0.19491858806362627, 0.16083291026159152, 0.3261257712795842, 0.19539486742951673, 0.24268579360822173, 0.24985527208028535, 0.26986121114935235, 0.17902112411677829, 0.35975219952888204, 0.15305195257284376, 0.20478943104488467, 0.11641322688900835, 0.1225762991232594, 0.30559936856011716, 0.19666630573420374, 0.16427055258636047, 0.1852996584952319, 0.23597559474741425, 0.12415680423633968, 0.2591908562922792, 0.19669818229899827, 0.23823760456979204, 0.2107420412085853, 0.23502627921813835, 0.1982448087336086, 0.21899431613240306, 0.2329075853422049, 0.23464118309799287, 0.19479491678569627, 0.1833102289721521, 0.1705594648874894, 0.16567145919778392, 0.19245977434431782, 0.18619655286945913, 0.1794332543549072, 0.19219689893020897, 0.17648699392102896, 0.12593793245318485, 0.12537062602627935, 0.17233306918480285, 0.8768540228338799, 0.20072274251604116, 0.8789697784176717, 0.11823619693338971, 0.869003021638542, 0.85859956946013, 0.5298258847143168, 0.15513921691668964, 0.773362492284594, 0.20423307368581045, 0.16670634944661866, 0.7471626625841427, 0.534238193098924, 0.5269261745341225, 0.5251364741120789, 0.18505275301815494, 0.1857951940175322, 0.18547538825118315, 0.1896383065516012, 0.16833958193430498, 0.179120850360159, 0.18022619243277027, 0.18782990154988777, 0.1775994156329601, 0.07154821418386781, 0.07971310307179502, 0.09302511756953868, 0.08461198442351836, 0.08248150119767483, 0.07984463694307231, 0.07707748386754842, 0.0705890397341935, 0.07102344250076453]}, "mutation_prompt": null}
{"id": "10d0f4fa-e737-4dcd-996b-5ddda47dce41", "solution": "import numpy as np\n\nclass ImprovedSpeedAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            if _ % (self.budget // 10) == 0:\n                c1 = np.random.uniform(1.0, 3.0)\n                c2 = np.random.uniform(1.0, 3.0)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedSpeedAdaptiveInertiaPSO", "description": "Introducing a novel mechanism to adaptively update the velocity update coefficients based on a dynamic strategy to accelerate convergence speed.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7347574-56e1-49f1-885f-0aa962cf452c", "metadata": {"aucs": [0.6682787844905586, 0.65195105438202, 0.5947257766945921, 0.5715219980703594, 0.5927162344668009, 0.5584452293609157, 0.6061215562138544, 0.604264047766381, 0.668285557236904, 0.24764396506563646, 0.22282780285075754, 0.18839621753399982, 0.1804302705440417, 0.16823696267665833, 0.20515279618852, 0.10795604224001254, 0.17016389877230886, 0.17214039840019013, 0.10877712693673547, 0.11368606368312573, 0.09113782269214865, 0.09781157752718006, 0.1205815859870818, 0.1231487244759013, 0.06010659929073858, 0.12023546365064053, 0.10885496986750987, 0.06904882518266209, 0.08844696657760576, 0.08760113059030317, 0.12084435460575149, 0.0928315696870552, 0.05714302610215238, 0.08915501241361745, 0.07759711217784138, 0.07551433611989145, 0.8999366567321154, 0.8587450535161634, 0.8378554895262658, 0.8627580426907018, 0.8455166060800051, 0.8660293674411971, 0.8829064342283606, 0.8328348896491057, 0.8720984218331849, 0.37199875526663306, 0.36714710951800844, 0.38397941148337933, 0.4347572057104099, 0.38085651161096, 0.3945349077894781, 0.359024428129018, 0.3416752546182209, 0.3825411128138235, 0.1746906737799252, 0.16687668794299892, 0.12976844001750687, 0.2788911687240204, 0.20541386279334817, 0.20726594286563127, 0.14837533722284568, 0.1492222498113499, 0.17225396871873966, 0.2037204001716113, 0.12779782133462192, 0.16229985060608565, 0.2588641919877619, 0.18059802507357814, 0.15314534322250384, 0.198434087071513, 0.12447119437688758, 0.3702183367696791, 0.2010731107361512, 0.19834967626982236, 0.12976370574075768, 0.18523322322582503, 0.16348921205908462, 0.132868131981141, 0.3082678289495355, 0.17812904097509796, 0.21598640546336645, 0.028462156780610925, 0.04618297011032679, 0.05434866883634293, 0.050790709377740106, 0.05610335446003223, 9.999999999998899e-05, 0.07629714406522237, 9.999999999998899e-05, 0.050319711557649915, 0.11210571985094397, 0.0942473997135288, 0.0914779477900951, 0.0825399278890091, 0.020433015796868292, 0.030280876075441165, 0.12838327704593844, 0.07308889258798157, 0.09095280222643654, 0.09213753427441629, 0.039929693014843504, 0.05138115528433407, 0.03261337805092568, 0.05414182262656053, 0.05743325041280678, 0.06407161187974775, 0.06355415412932763, 0.02669125999501143, 0.1391292507024089, 0.11072792790124864, 0.1132647066606709, 0.10930010348161923, 0.09575247735276604, 0.0785736337891011, 0.10763587140743858, 0.17691415892050177, 0.08012335392013703, 0.48653424721467853, 0.4772343909119229, 0.47241404946038035, 0.4821080328679592, 0.4535862959747421, 0.44808474241046303, 0.49746627447739034, 0.4720367832693748, 0.4841371428868597, 0.05599307383181329, 0.04835801429354469, 0.01725544969002002, 0.06871845828607259, 0.08665485712146725, 0.1418928929868012, 0.12174886554646036, 0.11998776389681753, 0.07151467942169398, 0.2286204524558767, 0.2851895539516136, 0.31333943357258087, 0.2362391720318927, 0.31284858927911596, 0.21846971217540834, 0.21936345019186743, 0.2203917919820395, 0.19491858806362627, 0.16083291026159152, 0.3261257712795842, 0.19539486742951673, 0.24268579360822173, 0.24985527208028535, 0.26986121114935235, 0.17902112411677829, 0.35975219952888204, 0.15305195257284376, 0.20478943104488467, 0.11641322688900835, 0.1225762991232594, 0.30559936856011716, 0.19666630573420374, 0.16427055258636047, 0.1852996584952319, 0.23597559474741425, 0.12415680423633968, 0.2591908562922792, 0.19669818229899827, 0.23823760456979204, 0.2107420412085853, 0.23502627921813835, 0.1982448087336086, 0.21899431613240306, 0.2329075853422049, 0.23464118309799287, 0.19479491678569627, 0.1833102289721521, 0.1705594648874894, 0.16567145919778392, 0.19245977434431782, 0.18619655286945913, 0.1794332543549072, 0.19219689893020897, 0.17648699392102896, 0.12593793245318485, 0.12537062602627935, 0.17233306918480285, 0.8768540228338799, 0.20072274251604116, 0.8789697784176717, 0.11823619693338971, 0.869003021638542, 0.85859956946013, 0.5298258847143168, 0.15513921691668964, 0.773362492284594, 0.20423307368581045, 0.16670634944661866, 0.7471626625841427, 0.534238193098924, 0.5269261745341225, 0.5251364741120789, 0.18505275301815494, 0.1857951940175322, 0.18547538825118315, 0.1896383065516012, 0.16833958193430498, 0.179120850360159, 0.18022619243277027, 0.18782990154988777, 0.1775994156329601, 0.07154821418386781, 0.07971310307179502, 0.09302511756953868, 0.08461198442351836, 0.08248150119767483, 0.07984463694307231, 0.07707748386754842, 0.0705890397341935, 0.07102344250076453]}, "mutation_prompt": null}
{"id": "13621357-2780-46f9-8266-b6b16b21956d", "solution": "import numpy as np\n\nclass ImprovedSpeedAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            if _ % (self.budget // 10) == 0:\n                c1 = np.random.uniform(1.0, 3.0)\n                c2 = np.random.uniform(1.0, 3.0)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            if _ % (self.budget // 20) == 0:\n                self.pop_size = max(5, int(30 * (1 - _ / self.budget)))\n                self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n                self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n                self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n                self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedSpeedAdaptiveInertiaPSO", "description": "Speeding up convergence by applying a dynamic population resizing strategy to focus on promising regions and improve exploration-exploitation balance.", "configspace": "", "generation": 89, "fitness": 0.24626394187941691, "feedback": "The algorithm ImprovedSpeedAdaptiveInertiaPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "a7347574-56e1-49f1-885f-0aa962cf452c", "metadata": {"aucs": [0.6682787844905586, 0.65195105438202, 0.5947257766945921, 0.5715219980703594, 0.5927162344668009, 0.5584452293609157, 0.6061215562138544, 0.604264047766381, 0.668285557236904, 0.24764396506563646, 0.22282780285075754, 0.18839621753399982, 0.1804302705440417, 0.16823696267665833, 0.20515279618852, 0.10795604224001254, 0.17016389877230886, 0.17214039840019013, 0.10877712693673547, 0.11368606368312573, 0.09113782269214865, 0.09781157752718006, 0.1205815859870818, 0.1231487244759013, 0.06010659929073858, 0.12023546365064053, 0.10885496986750987, 0.06904882518266209, 0.08844696657760576, 0.08760113059030317, 0.12084435460575149, 0.0928315696870552, 0.05714302610215238, 0.08915501241361745, 0.07759711217784138, 0.07551433611989145, 0.8999366567321154, 0.8587450535161634, 0.8378554895262658, 0.8627580426907018, 0.8455166060800051, 0.8660293674411971, 0.8829064342283606, 0.8328348896491057, 0.8720984218331849, 0.37199875526663306, 0.36714710951800844, 0.38397941148337933, 0.4347572057104099, 0.38085651161096, 0.3945349077894781, 0.359024428129018, 0.3416752546182209, 0.3825411128138235, 0.1746906737799252, 0.16687668794299892, 0.12976844001750687, 0.2788911687240204, 0.20541386279334817, 0.20726594286563127, 0.14837533722284568, 0.1492222498113499, 0.17225396871873966, 0.2037204001716113, 0.12779782133462192, 0.16229985060608565, 0.2588641919877619, 0.18059802507357814, 0.15314534322250384, 0.198434087071513, 0.12447119437688758, 0.3702183367696791, 0.2010731107361512, 0.19834967626982236, 0.12976370574075768, 0.18523322322582503, 0.16348921205908462, 0.132868131981141, 0.3082678289495355, 0.17812904097509796, 0.21598640546336645, 0.028462156780610925, 0.04618297011032679, 0.05434866883634293, 0.050790709377740106, 0.05610335446003223, 9.999999999998899e-05, 0.07629714406522237, 9.999999999998899e-05, 0.050319711557649915, 0.11210571985094397, 0.0942473997135288, 0.0914779477900951, 0.0825399278890091, 0.020433015796868292, 0.030280876075441165, 0.12838327704593844, 0.07308889258798157, 0.09095280222643654, 0.09213753427441629, 0.039929693014843504, 0.05138115528433407, 0.03261337805092568, 0.05414182262656053, 0.05743325041280678, 0.06407161187974775, 0.06355415412932763, 0.02669125999501143, 0.1391292507024089, 0.11072792790124864, 0.1132647066606709, 0.10930010348161923, 0.09575247735276604, 0.0785736337891011, 0.10763587140743858, 0.17691415892050177, 0.08012335392013703, 0.48653424721467853, 0.4772343909119229, 0.47241404946038035, 0.4821080328679592, 0.4535862959747421, 0.44808474241046303, 0.49746627447739034, 0.4720367832693748, 0.4841371428868597, 0.05599307383181329, 0.04835801429354469, 0.01725544969002002, 0.06871845828607259, 0.08665485712146725, 0.1418928929868012, 0.12174886554646036, 0.11998776389681753, 0.07151467942169398, 0.2286204524558767, 0.2851895539516136, 0.31333943357258087, 0.2362391720318927, 0.31284858927911596, 0.21846971217540834, 0.21936345019186743, 0.2203917919820395, 0.19491858806362627, 0.16083291026159152, 0.3261257712795842, 0.19539486742951673, 0.24268579360822173, 0.24985527208028535, 0.26986121114935235, 0.17902112411677829, 0.35975219952888204, 0.15305195257284376, 0.20478943104488467, 0.11641322688900835, 0.1225762991232594, 0.30559936856011716, 0.19666630573420374, 0.16427055258636047, 0.1852996584952319, 0.23597559474741425, 0.12415680423633968, 0.2591908562922792, 0.19669818229899827, 0.23823760456979204, 0.2107420412085853, 0.23502627921813835, 0.1982448087336086, 0.21899431613240306, 0.2329075853422049, 0.23464118309799287, 0.19479491678569627, 0.1833102289721521, 0.1705594648874894, 0.16567145919778392, 0.19245977434431782, 0.18619655286945913, 0.1794332543549072, 0.19219689893020897, 0.17648699392102896, 0.12593793245318485, 0.12537062602627935, 0.17233306918480285, 0.8768540228338799, 0.20072274251604116, 0.8789697784176717, 0.11823619693338971, 0.869003021638542, 0.85859956946013, 0.5298258847143168, 0.15513921691668964, 0.773362492284594, 0.20423307368581045, 0.16670634944661866, 0.7471626625841427, 0.534238193098924, 0.5269261745341225, 0.5251364741120789, 0.18505275301815494, 0.1857951940175322, 0.18547538825118315, 0.1896383065516012, 0.16833958193430498, 0.179120850360159, 0.18022619243277027, 0.18782990154988777, 0.1775994156329601, 0.07154821418386781, 0.07971310307179502, 0.09302511756953868, 0.08461198442351836, 0.08248150119767483, 0.07984463694307231, 0.07707748386754842, 0.0705890397341935, 0.07102344250076453]}, "mutation_prompt": null}
{"id": "f29fc679-d458-4ea7-934c-fa35d2e32a90", "solution": "import numpy as np\n\nclass ImprovedSpeedAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            if _ % (self.budget // 10) == 0:\n                c1 = np.random.uniform(1.0, 3.0)\n                c2 = np.random.uniform(1.0, 3.0)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedSpeedAdaptiveInertiaPSO", "description": "Introducing a novel mechanism to adaptively update the velocity update coefficients based on a dynamic strategy to accelerate convergence speed.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "a7347574-56e1-49f1-885f-0aa962cf452c", "metadata": {"aucs": [0.6682787844905586, 0.65195105438202, 0.5947257766945921, 0.5715219980703594, 0.5927162344668009, 0.5584452293609157, 0.6061215562138544, 0.604264047766381, 0.668285557236904, 0.24764396506563646, 0.22282780285075754, 0.18839621753399982, 0.1804302705440417, 0.16823696267665833, 0.20515279618852, 0.10795604224001254, 0.17016389877230886, 0.17214039840019013, 0.10877712693673547, 0.11368606368312573, 0.09113782269214865, 0.09781157752718006, 0.1205815859870818, 0.1231487244759013, 0.06010659929073858, 0.12023546365064053, 0.10885496986750987, 0.06904882518266209, 0.08844696657760576, 0.08760113059030317, 0.12084435460575149, 0.0928315696870552, 0.05714302610215238, 0.08915501241361745, 0.07759711217784138, 0.07551433611989145, 0.8999366567321154, 0.8587450535161634, 0.8378554895262658, 0.8627580426907018, 0.8455166060800051, 0.8660293674411971, 0.8829064342283606, 0.8328348896491057, 0.8720984218331849, 0.37199875526663306, 0.36714710951800844, 0.38397941148337933, 0.4347572057104099, 0.38085651161096, 0.3945349077894781, 0.359024428129018, 0.3416752546182209, 0.3825411128138235, 0.1746906737799252, 0.16687668794299892, 0.12976844001750687, 0.2788911687240204, 0.20541386279334817, 0.20726594286563127, 0.14837533722284568, 0.1492222498113499, 0.17225396871873966, 0.2037204001716113, 0.12779782133462192, 0.16229985060608565, 0.2588641919877619, 0.18059802507357814, 0.15314534322250384, 0.198434087071513, 0.12447119437688758, 0.3702183367696791, 0.2010731107361512, 0.19834967626982236, 0.12976370574075768, 0.18523322322582503, 0.16348921205908462, 0.132868131981141, 0.3082678289495355, 0.17812904097509796, 0.21598640546336645, 0.028462156780610925, 0.04618297011032679, 0.05434866883634293, 0.050790709377740106, 0.05610335446003223, 9.999999999998899e-05, 0.07629714406522237, 9.999999999998899e-05, 0.050319711557649915, 0.11210571985094397, 0.0942473997135288, 0.0914779477900951, 0.0825399278890091, 0.020433015796868292, 0.030280876075441165, 0.12838327704593844, 0.07308889258798157, 0.09095280222643654, 0.09213753427441629, 0.039929693014843504, 0.05138115528433407, 0.03261337805092568, 0.05414182262656053, 0.05743325041280678, 0.06407161187974775, 0.06355415412932763, 0.02669125999501143, 0.1391292507024089, 0.11072792790124864, 0.1132647066606709, 0.10930010348161923, 0.09575247735276604, 0.0785736337891011, 0.10763587140743858, 0.17691415892050177, 0.08012335392013703, 0.48653424721467853, 0.4772343909119229, 0.47241404946038035, 0.4821080328679592, 0.4535862959747421, 0.44808474241046303, 0.49746627447739034, 0.4720367832693748, 0.4841371428868597, 0.05599307383181329, 0.04835801429354469, 0.01725544969002002, 0.06871845828607259, 0.08665485712146725, 0.1418928929868012, 0.12174886554646036, 0.11998776389681753, 0.07151467942169398, 0.2286204524558767, 0.2851895539516136, 0.31333943357258087, 0.2362391720318927, 0.31284858927911596, 0.21846971217540834, 0.21936345019186743, 0.2203917919820395, 0.19491858806362627, 0.16083291026159152, 0.3261257712795842, 0.19539486742951673, 0.24268579360822173, 0.24985527208028535, 0.26986121114935235, 0.17902112411677829, 0.35975219952888204, 0.15305195257284376, 0.20478943104488467, 0.11641322688900835, 0.1225762991232594, 0.30559936856011716, 0.19666630573420374, 0.16427055258636047, 0.1852996584952319, 0.23597559474741425, 0.12415680423633968, 0.2591908562922792, 0.19669818229899827, 0.23823760456979204, 0.2107420412085853, 0.23502627921813835, 0.1982448087336086, 0.21899431613240306, 0.2329075853422049, 0.23464118309799287, 0.19479491678569627, 0.1833102289721521, 0.1705594648874894, 0.16567145919778392, 0.19245977434431782, 0.18619655286945913, 0.1794332543549072, 0.19219689893020897, 0.17648699392102896, 0.12593793245318485, 0.12537062602627935, 0.17233306918480285, 0.8768540228338799, 0.20072274251604116, 0.8789697784176717, 0.11823619693338971, 0.869003021638542, 0.85859956946013, 0.5298258847143168, 0.15513921691668964, 0.773362492284594, 0.20423307368581045, 0.16670634944661866, 0.7471626625841427, 0.534238193098924, 0.5269261745341225, 0.5251364741120789, 0.18505275301815494, 0.1857951940175322, 0.18547538825118315, 0.1896383065516012, 0.16833958193430498, 0.179120850360159, 0.18022619243277027, 0.18782990154988777, 0.1775994156329601, 0.07154821418386781, 0.07971310307179502, 0.09302511756953868, 0.08461198442351836, 0.08248150119767483, 0.07984463694307231, 0.07707748386754842, 0.0705890397341935, 0.07102344250076453]}, "mutation_prompt": null}
{"id": "4b372795-5a16-415e-b2af-e3346d7f817a", "solution": "import numpy as np\n\nclass ImprovedSpeedAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            if _ % (self.budget // 10) == 0:\n                c1 = np.random.uniform(1.0, 3.0)\n                c2 = np.random.uniform(1.0, 3.0)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n                if np.random.rand() < 0.1:  # Introducing mutation with 10% probability\n                    self.position[i] = np.random.uniform(-5.0, 5.0, self.dim)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedSpeedAdaptiveInertiaPSO", "description": "Introducing a mutation operator to explore new regions in the search space and potentially accelerate the convergence speed.", "configspace": "", "generation": 91, "fitness": 0.1901354087493243, "feedback": "The algorithm ImprovedSpeedAdaptiveInertiaPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.15.", "error": "", "parent_id": "a7347574-56e1-49f1-885f-0aa962cf452c", "metadata": {"aucs": [0.44520242290375256, 0.45328623518208, 0.4407590277154212, 0.40043927937929846, 0.36416341683746645, 0.4504836880182441, 0.4213055024112604, 0.41127425066940837, 0.45626946247915234, 0.001448258348534015, 0.01839909404949447, 9.999999999998899e-05, 0.009353423539287031, 0.02703127237294356, 0.008374306675808074, 0.005914868274860652, 9.999999999998899e-05, 9.999999999998899e-05, 0.10058764151332977, 0.12368835411641543, 0.09726385173008334, 0.12293952465735947, 0.11558379178237754, 0.1038591112289472, 0.07860408485318426, 0.0832981641491477, 0.11046333067475589, 0.08592192308010704, 0.05780136648855949, 0.08271200421723957, 0.09789980385431174, 0.06561274871893275, 0.1352691561256424, 0.09321621211443121, 0.0570266892406891, 0.07159914373681908, 0.4713061247216047, 0.592846701700289, 0.7281426664189221, 0.12410769112313969, 0.4077713404464479, 0.7329859565249555, 0.5924797032360474, 0.4271168202612723, 0.6132244489787779, 0.27448216440083584, 0.2324282035711287, 0.2634169401908787, 0.23965347987081032, 0.2107399025677561, 0.2314005630063668, 0.26527348029340536, 0.2132864906186095, 0.2546957914132636, 0.306660403338898, 0.18742174145084034, 0.15278969245782115, 0.21579170792944047, 0.24321933079209734, 0.2307239689496573, 0.16213968393549327, 0.16425757055471912, 0.21949251717621554, 0.14697621799905303, 0.22548045476762335, 0.1282291414409099, 0.17462878362116974, 0.11927577930571354, 0.1663509014509933, 0.20282389772366072, 0.1762743199610557, 0.14097852056169358, 0.12279128266279893, 0.14410072940235408, 0.19757881547245393, 0.14196450722084142, 0.1264147713630167, 0.14599286675420864, 0.12932732960901083, 0.14710243623352948, 0.16283456247652683, 0.011168563587921954, 9.999999999998899e-05, 9.999999999998899e-05, 0.07422692120398156, 9.999999999998899e-05, 0.006548365380022236, 0.00322368152155017, 0.02513213877752618, 9.999999999998899e-05, 0.16118721025833416, 0.08841518043556784, 0.09611381493714422, 0.0379740399069024, 0.07871436052709924, 0.07711528043809524, 0.07904336063515638, 0.10821871319914933, 0.07917702454548292, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024931290360166503, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06908779598279469, 0.08433313593476999, 0.0724852942371681, 0.04371869683974272, 0.07499031865150174, 0.11173172351945526, 0.05399092140453232, 0.07037569775170704, 0.09773292630611885, 0.3958346955028643, 0.3836928655792874, 0.4374315418985544, 0.38059537824898193, 0.36278450073960145, 0.37607520529690286, 0.3708932785810347, 0.37590579438013005, 0.39651460953952056, 0.06510043679751998, 0.054610954328769945, 0.07909093475163176, 0.08203836903033246, 0.10834576108078986, 0.1412714556404513, 0.07987323287334491, 0.11091507666112976, 0.06691587285948497, 0.14516490749636302, 0.16220512204694026, 0.15374077174198486, 0.152896430480564, 0.19184795166403024, 0.14567069571708924, 0.18650853909989995, 0.1619471436278278, 0.22311008247894348, 0.21561574928740024, 0.249289169469054, 0.19341976376653403, 0.20948131559599426, 0.275879291745887, 0.23937180375885414, 0.2046195295357759, 0.2437788119763824, 0.21885796149058467, 0.1518854303325614, 0.1450593331712573, 0.15581725190830475, 0.16626566828318246, 0.2003853176898438, 0.20675409606715267, 0.15279035352217363, 0.17547487738732526, 0.17381218094303474, 0.19326601906219798, 0.20351384697309205, 0.2059678498431078, 0.1996760805876544, 0.2128842513767809, 0.1978269775395184, 0.21704146504299926, 0.19535278210261464, 0.1926911507811132, 0.17914718517238215, 0.1973081701754782, 0.17547198077805692, 0.16936721505452057, 0.19072335469543, 0.16802249745122977, 0.17591221955682945, 0.18320874729907843, 0.17402862384675244, 0.18431203647085737, 0.18052663400045477, 0.430309519020296, 0.5404897928154954, 0.4792306492714452, 0.604998725453368, 0.6084605793580729, 0.46891396309935063, 0.6941670368806294, 0.45678940102471677, 0.4171552586128998, 0.5491656551343492, 0.15114189224064578, 0.2170963142840303, 0.4450507203237699, 0.28528973124299073, 0.11903913954907908, 0.26934856895920223, 0.18573996490271572, 0.17765259309918313, 0.202121118017626, 0.1740552720686479, 0.18185683322361013, 0.193245360622039, 0.18512854296290504, 0.1762205821509658, 0.18038819509634252, 0.07610840115155948, 0.08903812424461521, 0.07763251834529239, 0.0922855261893536, 0.09543461750932747, 0.07892563903960759, 0.06890181088559055, 0.06817484900939397, 0.07873452074197174]}, "mutation_prompt": null}
{"id": "f5f64c57-b0ab-42f3-b180-7b5cf76d08aa", "solution": "import numpy as np\n\nclass ImprovedSpeedAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            if _ % (self.budget // 10) == 0:\n                c1 = np.random.uniform(1.0, 3.0)\n                c2 = np.random.uniform(1.0, 3.0)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedSpeedAdaptiveInertiaPSO", "description": "Utilizing a dynamic population resizing strategy to dynamically adjust the population size during optimization to enhance convergence speed.", "configspace": "", "generation": 92, "fitness": 0.24626394187941691, "feedback": "The algorithm ImprovedSpeedAdaptiveInertiaPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "a7347574-56e1-49f1-885f-0aa962cf452c", "metadata": {"aucs": [0.6682787844905586, 0.65195105438202, 0.5947257766945921, 0.5715219980703594, 0.5927162344668009, 0.5584452293609157, 0.6061215562138544, 0.604264047766381, 0.668285557236904, 0.24764396506563646, 0.22282780285075754, 0.18839621753399982, 0.1804302705440417, 0.16823696267665833, 0.20515279618852, 0.10795604224001254, 0.17016389877230886, 0.17214039840019013, 0.10877712693673547, 0.11368606368312573, 0.09113782269214865, 0.09781157752718006, 0.1205815859870818, 0.1231487244759013, 0.06010659929073858, 0.12023546365064053, 0.10885496986750987, 0.06904882518266209, 0.08844696657760576, 0.08760113059030317, 0.12084435460575149, 0.0928315696870552, 0.05714302610215238, 0.08915501241361745, 0.07759711217784138, 0.07551433611989145, 0.8999366567321154, 0.8587450535161634, 0.8378554895262658, 0.8627580426907018, 0.8455166060800051, 0.8660293674411971, 0.8829064342283606, 0.8328348896491057, 0.8720984218331849, 0.37199875526663306, 0.36714710951800844, 0.38397941148337933, 0.4347572057104099, 0.38085651161096, 0.3945349077894781, 0.359024428129018, 0.3416752546182209, 0.3825411128138235, 0.1746906737799252, 0.16687668794299892, 0.12976844001750687, 0.2788911687240204, 0.20541386279334817, 0.20726594286563127, 0.14837533722284568, 0.1492222498113499, 0.17225396871873966, 0.2037204001716113, 0.12779782133462192, 0.16229985060608565, 0.2588641919877619, 0.18059802507357814, 0.15314534322250384, 0.198434087071513, 0.12447119437688758, 0.3702183367696791, 0.2010731107361512, 0.19834967626982236, 0.12976370574075768, 0.18523322322582503, 0.16348921205908462, 0.132868131981141, 0.3082678289495355, 0.17812904097509796, 0.21598640546336645, 0.028462156780610925, 0.04618297011032679, 0.05434866883634293, 0.050790709377740106, 0.05610335446003223, 9.999999999998899e-05, 0.07629714406522237, 9.999999999998899e-05, 0.050319711557649915, 0.11210571985094397, 0.0942473997135288, 0.0914779477900951, 0.0825399278890091, 0.020433015796868292, 0.030280876075441165, 0.12838327704593844, 0.07308889258798157, 0.09095280222643654, 0.09213753427441629, 0.039929693014843504, 0.05138115528433407, 0.03261337805092568, 0.05414182262656053, 0.05743325041280678, 0.06407161187974775, 0.06355415412932763, 0.02669125999501143, 0.1391292507024089, 0.11072792790124864, 0.1132647066606709, 0.10930010348161923, 0.09575247735276604, 0.0785736337891011, 0.10763587140743858, 0.17691415892050177, 0.08012335392013703, 0.48653424721467853, 0.4772343909119229, 0.47241404946038035, 0.4821080328679592, 0.4535862959747421, 0.44808474241046303, 0.49746627447739034, 0.4720367832693748, 0.4841371428868597, 0.05599307383181329, 0.04835801429354469, 0.01725544969002002, 0.06871845828607259, 0.08665485712146725, 0.1418928929868012, 0.12174886554646036, 0.11998776389681753, 0.07151467942169398, 0.2286204524558767, 0.2851895539516136, 0.31333943357258087, 0.2362391720318927, 0.31284858927911596, 0.21846971217540834, 0.21936345019186743, 0.2203917919820395, 0.19491858806362627, 0.16083291026159152, 0.3261257712795842, 0.19539486742951673, 0.24268579360822173, 0.24985527208028535, 0.26986121114935235, 0.17902112411677829, 0.35975219952888204, 0.15305195257284376, 0.20478943104488467, 0.11641322688900835, 0.1225762991232594, 0.30559936856011716, 0.19666630573420374, 0.16427055258636047, 0.1852996584952319, 0.23597559474741425, 0.12415680423633968, 0.2591908562922792, 0.19669818229899827, 0.23823760456979204, 0.2107420412085853, 0.23502627921813835, 0.1982448087336086, 0.21899431613240306, 0.2329075853422049, 0.23464118309799287, 0.19479491678569627, 0.1833102289721521, 0.1705594648874894, 0.16567145919778392, 0.19245977434431782, 0.18619655286945913, 0.1794332543549072, 0.19219689893020897, 0.17648699392102896, 0.12593793245318485, 0.12537062602627935, 0.17233306918480285, 0.8768540228338799, 0.20072274251604116, 0.8789697784176717, 0.11823619693338971, 0.869003021638542, 0.85859956946013, 0.5298258847143168, 0.15513921691668964, 0.773362492284594, 0.20423307368581045, 0.16670634944661866, 0.7471626625841427, 0.534238193098924, 0.5269261745341225, 0.5251364741120789, 0.18505275301815494, 0.1857951940175322, 0.18547538825118315, 0.1896383065516012, 0.16833958193430498, 0.179120850360159, 0.18022619243277027, 0.18782990154988777, 0.1775994156329601, 0.07154821418386781, 0.07971310307179502, 0.09302511756953868, 0.08461198442351836, 0.08248150119767483, 0.07984463694307231, 0.07707748386754842, 0.0705890397341935, 0.07102344250076453]}, "mutation_prompt": null}
{"id": "b40a1c9e-7e2d-4ce6-a52d-ad3f02e0f309", "solution": "import numpy as np\n\nclass ImprovedSpeedAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            if _ % (self.budget // 10) == 0:\n                c1 = np.random.uniform(1.0, 3.0)\n                c2 = np.random.uniform(1.0, 3.0)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedSpeedAdaptiveInertiaPSO", "description": "Introducing a novel mechanism to adaptively update the velocity update coefficients based on a dynamic strategy to accelerate convergence speed.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7347574-56e1-49f1-885f-0aa962cf452c", "metadata": {"aucs": [0.6682787844905586, 0.65195105438202, 0.5947257766945921, 0.5715219980703594, 0.5927162344668009, 0.5584452293609157, 0.6061215562138544, 0.604264047766381, 0.668285557236904, 0.24764396506563646, 0.22282780285075754, 0.18839621753399982, 0.1804302705440417, 0.16823696267665833, 0.20515279618852, 0.10795604224001254, 0.17016389877230886, 0.17214039840019013, 0.10877712693673547, 0.11368606368312573, 0.09113782269214865, 0.09781157752718006, 0.1205815859870818, 0.1231487244759013, 0.06010659929073858, 0.12023546365064053, 0.10885496986750987, 0.06904882518266209, 0.08844696657760576, 0.08760113059030317, 0.12084435460575149, 0.0928315696870552, 0.05714302610215238, 0.08915501241361745, 0.07759711217784138, 0.07551433611989145, 0.8999366567321154, 0.8587450535161634, 0.8378554895262658, 0.8627580426907018, 0.8455166060800051, 0.8660293674411971, 0.8829064342283606, 0.8328348896491057, 0.8720984218331849, 0.37199875526663306, 0.36714710951800844, 0.38397941148337933, 0.4347572057104099, 0.38085651161096, 0.3945349077894781, 0.359024428129018, 0.3416752546182209, 0.3825411128138235, 0.1746906737799252, 0.16687668794299892, 0.12976844001750687, 0.2788911687240204, 0.20541386279334817, 0.20726594286563127, 0.14837533722284568, 0.1492222498113499, 0.17225396871873966, 0.2037204001716113, 0.12779782133462192, 0.16229985060608565, 0.2588641919877619, 0.18059802507357814, 0.15314534322250384, 0.198434087071513, 0.12447119437688758, 0.3702183367696791, 0.2010731107361512, 0.19834967626982236, 0.12976370574075768, 0.18523322322582503, 0.16348921205908462, 0.132868131981141, 0.3082678289495355, 0.17812904097509796, 0.21598640546336645, 0.028462156780610925, 0.04618297011032679, 0.05434866883634293, 0.050790709377740106, 0.05610335446003223, 9.999999999998899e-05, 0.07629714406522237, 9.999999999998899e-05, 0.050319711557649915, 0.11210571985094397, 0.0942473997135288, 0.0914779477900951, 0.0825399278890091, 0.020433015796868292, 0.030280876075441165, 0.12838327704593844, 0.07308889258798157, 0.09095280222643654, 0.09213753427441629, 0.039929693014843504, 0.05138115528433407, 0.03261337805092568, 0.05414182262656053, 0.05743325041280678, 0.06407161187974775, 0.06355415412932763, 0.02669125999501143, 0.1391292507024089, 0.11072792790124864, 0.1132647066606709, 0.10930010348161923, 0.09575247735276604, 0.0785736337891011, 0.10763587140743858, 0.17691415892050177, 0.08012335392013703, 0.48653424721467853, 0.4772343909119229, 0.47241404946038035, 0.4821080328679592, 0.4535862959747421, 0.44808474241046303, 0.49746627447739034, 0.4720367832693748, 0.4841371428868597, 0.05599307383181329, 0.04835801429354469, 0.01725544969002002, 0.06871845828607259, 0.08665485712146725, 0.1418928929868012, 0.12174886554646036, 0.11998776389681753, 0.07151467942169398, 0.2286204524558767, 0.2851895539516136, 0.31333943357258087, 0.2362391720318927, 0.31284858927911596, 0.21846971217540834, 0.21936345019186743, 0.2203917919820395, 0.19491858806362627, 0.16083291026159152, 0.3261257712795842, 0.19539486742951673, 0.24268579360822173, 0.24985527208028535, 0.26986121114935235, 0.17902112411677829, 0.35975219952888204, 0.15305195257284376, 0.20478943104488467, 0.11641322688900835, 0.1225762991232594, 0.30559936856011716, 0.19666630573420374, 0.16427055258636047, 0.1852996584952319, 0.23597559474741425, 0.12415680423633968, 0.2591908562922792, 0.19669818229899827, 0.23823760456979204, 0.2107420412085853, 0.23502627921813835, 0.1982448087336086, 0.21899431613240306, 0.2329075853422049, 0.23464118309799287, 0.19479491678569627, 0.1833102289721521, 0.1705594648874894, 0.16567145919778392, 0.19245977434431782, 0.18619655286945913, 0.1794332543549072, 0.19219689893020897, 0.17648699392102896, 0.12593793245318485, 0.12537062602627935, 0.17233306918480285, 0.8768540228338799, 0.20072274251604116, 0.8789697784176717, 0.11823619693338971, 0.869003021638542, 0.85859956946013, 0.5298258847143168, 0.15513921691668964, 0.773362492284594, 0.20423307368581045, 0.16670634944661866, 0.7471626625841427, 0.534238193098924, 0.5269261745341225, 0.5251364741120789, 0.18505275301815494, 0.1857951940175322, 0.18547538825118315, 0.1896383065516012, 0.16833958193430498, 0.179120850360159, 0.18022619243277027, 0.18782990154988777, 0.1775994156329601, 0.07154821418386781, 0.07971310307179502, 0.09302511756953868, 0.08461198442351836, 0.08248150119767483, 0.07984463694307231, 0.07707748386754842, 0.0705890397341935, 0.07102344250076453]}, "mutation_prompt": null}
{"id": "cce5ebae-8e05-4bd0-a196-ef16c4bca81c", "solution": "import numpy as np\n\nclass FastImprovedSpeedAdaptiveInertiaPSO(ImprovedSpeedAdaptiveInertiaPSO):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.mutation_rate = 0.2\n        self.mutation_strength = 0.1\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            if _ % (self.budget // 10) == 0:\n                c1 = np.random.uniform(1.0, 3.0)\n                c2 = np.random.uniform(1.0, 3.0)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                if np.random.rand() < self.mutation_rate:\n                    mutation_vector = np.random.uniform(-self.mutation_strength, self.mutation_strength, self.dim)\n                    self.velocity[i] += mutation_vector\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "FastImprovedSpeedAdaptiveInertiaPSO", "description": "Utilizing a dynamic mutation strategy to explore the search space more effectively for faster convergence speed.", "configspace": "", "generation": 94, "fitness": 0.2212743604187857, "feedback": "The algorithm FastImprovedSpeedAdaptiveInertiaPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.20.", "error": "", "parent_id": "a7347574-56e1-49f1-885f-0aa962cf452c", "metadata": {"aucs": [0.5160667310137816, 0.46752099616442133, 0.5037985553958647, 0.4771451408872761, 0.4641539530366766, 0.4696362401940398, 0.4983704568844026, 0.4729847715505643, 0.464400064988603, 0.09042204141915755, 0.14082678756981748, 0.02863197072595136, 9.999999999998899e-05, 0.0024348998591969817, 0.08099880290781836, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11333082331818511, 0.09670287952399281, 0.09051694918710962, 0.10560020479018672, 0.11808269381277137, 0.11235666538447764, 0.08137323569981747, 0.06821934102203775, 0.1271128387987468, 0.10443309996015637, 0.09078238708630182, 0.0929645835120898, 0.09414350030048158, 0.09541644895515766, 0.05505709964362593, 0.0852758078579462, 0.07899835793986909, 0.06222758521553351, 0.8844685289318454, 0.8586529385525674, 0.8265308318376073, 0.8575669950688948, 0.8468360729410684, 0.8850148404216597, 0.8748883831913787, 0.8314791355647656, 0.8539989564129244, 0.35261840213794615, 0.3150947434730669, 0.33179137971991635, 0.3456792351974405, 0.3451757995451863, 0.32463405000907875, 0.3477291610427966, 0.32327787973209565, 0.32224713904565283, 0.21701604901774973, 0.16740055910879093, 0.1379181767641381, 0.2601862873653398, 0.20307076416072956, 0.1866279311671175, 0.150163647110378, 0.12814687702175964, 0.1496582570446513, 0.1953097969638411, 0.1291455896793854, 0.21846939124677667, 0.18105471628148406, 0.17321951617332632, 0.11137845945972913, 0.22871068378179948, 0.11498296478156012, 0.17007601691088525, 0.19468150188128863, 0.1827683822445838, 0.1766181395003692, 0.1275473700351526, 0.1701843022293642, 0.23104266282689068, 0.12864786816236307, 0.17076774945960094, 0.17002994115079761, 0.06949251298829862, 0.056506596370838436, 0.04515729003229607, 0.0525727253102064, 0.007660182636437418, 0.030934729971904384, 0.049826316851041, 9.999999999998899e-05, 0.03145309891237302, 0.1514590550919025, 0.09947749876181056, 0.06574498932175976, 0.02873080817846152, 0.02019340123321567, 0.04942013791980682, 0.16764434817508989, 0.06304444598076098, 0.11314724808636889, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00020063053700125622, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007174624345461789, 0.10146296566825186, 0.08790981139689047, 0.0899445047196914, 0.06717444757655344, 0.12072063577098835, 0.13138779252347954, 0.0815142019066436, 0.12879319535503486, 0.07787504998668282, 0.44889742547992684, 0.47622158022015315, 0.44998681354728354, 0.4453390951726849, 0.4396527256066165, 0.45307094272737036, 0.4481620604521006, 0.4523858288370103, 0.4392675041119658, 0.04138651173518759, 0.05963336555883436, 0.02584011993190105, 0.10022022920258677, 0.08236863719186382, 0.10408725439899169, 0.09585169604224864, 0.10625053189843003, 0.09017502285218792, 0.1859744412681711, 0.17396490487557403, 0.23140411417072393, 0.184215242205638, 0.2508559496315632, 0.1714867559338198, 0.3013655905521435, 0.27993755598741465, 0.15934980988441017, 0.17172836376284828, 0.30519583442678644, 0.19955358124147538, 0.3140369119275819, 0.225292254831724, 0.2921504070591494, 0.20823600416815125, 0.3364322927930491, 0.15551566669386452, 0.19788289768248046, 0.23835415325138898, 0.16760749858260793, 0.16925120957383666, 0.17462337638777103, 0.16096943760360283, 0.1777630184911484, 0.23925312159938383, 0.1130982485618024, 0.22628027729049482, 0.1777200166849725, 0.2551389157956294, 0.23085970521257637, 0.19926355946923802, 0.22134476099178657, 0.21701536836404922, 0.22149069449284975, 0.24349885421423678, 0.19229600073383268, 0.19253451261279342, 0.1950102574347834, 0.17958089892596907, 0.19190956573406015, 0.19062549922188732, 0.18603486801784508, 0.23753061084842786, 0.17715083484151073, 0.12584103667266533, 0.12503074818499715, 0.13215564086930554, 0.7026201676430073, 0.20012259688758227, 0.7605219770061319, 0.11468750074191125, 0.6871713591319044, 0.7276047522909619, 0.5989194669066702, 0.15622824710381678, 0.5746431765577611, 0.2036171937958624, 0.2042961801407358, 0.6423263278817855, 0.47171677048160776, 0.5026954937604549, 0.47761688446950856, 0.20251536673410953, 0.18570233336847264, 0.178956085064071, 0.19028369641868248, 0.16960861603894684, 0.18482821103634373, 0.18437622595985093, 0.17200306773766438, 0.1864781021223122, 0.06926648460299689, 0.0882973393819999, 0.06721768623248159, 0.08365300431840972, 0.08849633857624939, 0.06044293077011753, 0.09160895831001159, 0.07007816525255928, 0.0837352944323122]}, "mutation_prompt": null}
{"id": "9f53e6ba-8d69-42d9-9688-46ae0c288134", "solution": "import numpy as np\n\nclass DynamicPopSizeImprovedSpeedAdaptiveInertiaPSO(ImprovedSpeedAdaptiveInertiaPSO):\n    def __init__(self, budget, dim):\n        super().__init__(budget, dim)\n        self.max_explore_pop_size = 15\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            if _ % (self.budget // 10) == 0:\n                c1 = np.random.uniform(1.0, 3.0)\n                c2 = np.random.uniform(1.0, 3.0)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = self.max_explore_pop_size if _ < self.budget // 2 else 30\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "DynamicPopSizeImprovedSpeedAdaptiveInertiaPSO", "description": "Implementing a dynamic mechanism to adjust the population size based on the convergence progress to enhance convergence speed by promoting exploration-exploitation balance.", "configspace": "", "generation": 95, "fitness": 0.21961296419806983, "feedback": "The algorithm DynamicPopSizeImprovedSpeedAdaptiveInertiaPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "a7347574-56e1-49f1-885f-0aa962cf452c", "metadata": {"aucs": [0.5595049345070846, 0.5690060558388628, 0.5648215353559156, 0.5794198884854476, 0.6114156335505695, 0.5883051702835058, 0.5495142364547656, 0.58073148552879, 0.5590882694998625, 0.20363283004238475, 0.08395188898045858, 0.12711374884484228, 0.1837521323856659, 0.05554673630531071, 0.09160553649549619, 0.04830197784077517, 0.08427120497054641, 0.10792556360473116, 0.07192611404595395, 0.11457103180132178, 0.08732672577218414, 0.09079914979977644, 0.0796496586752683, 0.10688744181929177, 0.0779973480459345, 0.08775440707622384, 0.08901161469917473, 0.07298458070542269, 0.05436386183371267, 0.06430677138509511, 0.09639946500486463, 0.06971119136877135, 0.03049896508437233, 0.029910656640432354, 0.06808366315687564, 0.06805537306736364, 0.8951231459281556, 0.812935776488031, 0.8298209171489204, 0.8298457995948749, 0.8432081828986804, 0.8131187942553922, 0.8611386129991576, 0.8189061036419409, 0.8408628999262661, 0.3763081261188833, 0.37376847876509967, 0.3671539380688017, 0.35987866369048804, 0.35136675325645106, 0.36096658749852273, 0.391188537903146, 0.38599657425825284, 0.3682514717327272, 0.14334622784724071, 0.10884501508278865, 0.13448363703899124, 0.24209393383721256, 0.2568584615345402, 0.20482552134027388, 0.1298044490718212, 0.14898509554739625, 0.17291654823579994, 0.19073803376001985, 0.2075418886803302, 0.13534388804366315, 0.1504186232937893, 0.16335722383514417, 0.09483185555582274, 0.18420593116528527, 0.12959990253457598, 0.1578841556935373, 0.12887774808160135, 0.11901217217181748, 0.21565999111784906, 0.13858738760246647, 0.17234177768098868, 0.18386176104601282, 0.17929968068983615, 0.13932303891929387, 0.19243423277038751, 0.04560032079301002, 0.05347758325472918, 0.06405354603083901, 0.04185415364584755, 9.999999999998899e-05, 0.019644858114871044, 9.999999999998899e-05, 9.999999999998899e-05, 0.061464560155096715, 0.062034480304728135, 0.08002080686699176, 0.08118547146130173, 0.04513479364546236, 0.030457571952716145, 0.04147224311622599, 0.12407246258836346, 0.06707024902150915, 0.04987718639558936, 0.07204768643343828, 0.020081913637261972, 0.049755292599406475, 0.05597779235709133, 0.042561203064796826, 0.06347322807045164, 0.06180837160631014, 0.04711311084429359, 0.03667923792151939, 0.15576715869620494, 0.11590615105124047, 0.15925004812406263, 0.18704927388507808, 0.0698895471476233, 0.0969892892495895, 0.08478699805661505, 0.08615054397206368, 0.07984016815171979, 0.4707394242799827, 0.4669521963966159, 0.4712046894009688, 0.4374755766826448, 0.4408008815072535, 0.4134368758327841, 0.4661007907129925, 0.4343641353735863, 0.4718822336771893, 0.03215491430665751, 0.04421496308049133, 0.04371144815896855, 0.10381920764583974, 0.04803580625895065, 0.06783711205316412, 0.13551482949591442, 0.08851258977063314, 0.07062204563722263, 0.16968938358620378, 0.15876753822986123, 0.2148061140258497, 0.20817909586786532, 0.28484948087353357, 0.23557926569754228, 0.15369523854989198, 0.20205446348376221, 0.1574264363194945, 0.15240713950214813, 0.16902710595452897, 0.18283348773943298, 0.1936682236852344, 0.2163737682069794, 0.27948992667518313, 0.15597062585905985, 0.3240225163754853, 0.15891568836815295, 0.09748235880013967, 0.1931649024054456, 0.18572192628870787, 0.12982470670627733, 0.18673080297178635, 0.1499063008344096, 0.10961627277055175, 0.1456410473563987, 0.1373259252291773, 0.20141595995759487, 0.23176103904184486, 0.19704560291850615, 0.19711164351259902, 0.17282199152196187, 0.23213922844503954, 0.19297430328385612, 0.192412940993955, 0.21346028214170698, 0.18599290000910185, 0.17361372531207475, 0.16874702920101314, 0.17879261218824427, 0.20242073676966932, 0.19250548758873687, 0.16727589191990155, 0.2048531614632617, 0.17007184767847816, 0.16772723761019603, 0.14648260468349505, 0.1571527785490736, 0.8141874458954679, 0.1985473484362822, 0.8033759846278281, 0.15068768557047751, 0.7522950790900983, 0.85657616079992, 0.500275580069605, 0.1637523562405484, 0.5311390416008956, 0.2050989888817324, 0.1667649068018583, 0.5733226948982266, 0.1543097440340243, 0.13046863397843556, 0.3503700133103945, 0.18199884581791892, 0.1921641215154698, 0.1830366621373818, 0.19257011029436033, 0.1874542438057658, 0.17724630812094289, 0.17652889096015556, 0.18079330496163837, 0.1778687204255286, 0.07382651366929971, 0.0776346227204231, 0.0780333373243478, 0.06517643509238291, 0.0774531867774918, 0.0634092951406503, 0.07388983708785013, 0.0794695578045237, 0.07303444394050385]}, "mutation_prompt": null}
{"id": "1cbd3586-99e8-4d41-b46a-2ccd15598d17", "solution": "import numpy as np\n\nclass ImprovedSpeedAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            if _ % (self.budget // 10) == 0:\n                c1 = np.random.uniform(1.0, 3.0)\n                c2 = np.random.uniform(1.0, 3.0)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedSpeedAdaptiveInertiaPSO", "description": "Introducing a novel mechanism to adaptively update the velocity update coefficients based on a dynamic strategy to accelerate convergence speed.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "a7347574-56e1-49f1-885f-0aa962cf452c", "metadata": {"aucs": [0.6682787844905586, 0.65195105438202, 0.5947257766945921, 0.5715219980703594, 0.5927162344668009, 0.5584452293609157, 0.6061215562138544, 0.604264047766381, 0.668285557236904, 0.24764396506563646, 0.22282780285075754, 0.18839621753399982, 0.1804302705440417, 0.16823696267665833, 0.20515279618852, 0.10795604224001254, 0.17016389877230886, 0.17214039840019013, 0.10877712693673547, 0.11368606368312573, 0.09113782269214865, 0.09781157752718006, 0.1205815859870818, 0.1231487244759013, 0.06010659929073858, 0.12023546365064053, 0.10885496986750987, 0.06904882518266209, 0.08844696657760576, 0.08760113059030317, 0.12084435460575149, 0.0928315696870552, 0.05714302610215238, 0.08915501241361745, 0.07759711217784138, 0.07551433611989145, 0.8999366567321154, 0.8587450535161634, 0.8378554895262658, 0.8627580426907018, 0.8455166060800051, 0.8660293674411971, 0.8829064342283606, 0.8328348896491057, 0.8720984218331849, 0.37199875526663306, 0.36714710951800844, 0.38397941148337933, 0.4347572057104099, 0.38085651161096, 0.3945349077894781, 0.359024428129018, 0.3416752546182209, 0.3825411128138235, 0.1746906737799252, 0.16687668794299892, 0.12976844001750687, 0.2788911687240204, 0.20541386279334817, 0.20726594286563127, 0.14837533722284568, 0.1492222498113499, 0.17225396871873966, 0.2037204001716113, 0.12779782133462192, 0.16229985060608565, 0.2588641919877619, 0.18059802507357814, 0.15314534322250384, 0.198434087071513, 0.12447119437688758, 0.3702183367696791, 0.2010731107361512, 0.19834967626982236, 0.12976370574075768, 0.18523322322582503, 0.16348921205908462, 0.132868131981141, 0.3082678289495355, 0.17812904097509796, 0.21598640546336645, 0.028462156780610925, 0.04618297011032679, 0.05434866883634293, 0.050790709377740106, 0.05610335446003223, 9.999999999998899e-05, 0.07629714406522237, 9.999999999998899e-05, 0.050319711557649915, 0.11210571985094397, 0.0942473997135288, 0.0914779477900951, 0.0825399278890091, 0.020433015796868292, 0.030280876075441165, 0.12838327704593844, 0.07308889258798157, 0.09095280222643654, 0.09213753427441629, 0.039929693014843504, 0.05138115528433407, 0.03261337805092568, 0.05414182262656053, 0.05743325041280678, 0.06407161187974775, 0.06355415412932763, 0.02669125999501143, 0.1391292507024089, 0.11072792790124864, 0.1132647066606709, 0.10930010348161923, 0.09575247735276604, 0.0785736337891011, 0.10763587140743858, 0.17691415892050177, 0.08012335392013703, 0.48653424721467853, 0.4772343909119229, 0.47241404946038035, 0.4821080328679592, 0.4535862959747421, 0.44808474241046303, 0.49746627447739034, 0.4720367832693748, 0.4841371428868597, 0.05599307383181329, 0.04835801429354469, 0.01725544969002002, 0.06871845828607259, 0.08665485712146725, 0.1418928929868012, 0.12174886554646036, 0.11998776389681753, 0.07151467942169398, 0.2286204524558767, 0.2851895539516136, 0.31333943357258087, 0.2362391720318927, 0.31284858927911596, 0.21846971217540834, 0.21936345019186743, 0.2203917919820395, 0.19491858806362627, 0.16083291026159152, 0.3261257712795842, 0.19539486742951673, 0.24268579360822173, 0.24985527208028535, 0.26986121114935235, 0.17902112411677829, 0.35975219952888204, 0.15305195257284376, 0.20478943104488467, 0.11641322688900835, 0.1225762991232594, 0.30559936856011716, 0.19666630573420374, 0.16427055258636047, 0.1852996584952319, 0.23597559474741425, 0.12415680423633968, 0.2591908562922792, 0.19669818229899827, 0.23823760456979204, 0.2107420412085853, 0.23502627921813835, 0.1982448087336086, 0.21899431613240306, 0.2329075853422049, 0.23464118309799287, 0.19479491678569627, 0.1833102289721521, 0.1705594648874894, 0.16567145919778392, 0.19245977434431782, 0.18619655286945913, 0.1794332543549072, 0.19219689893020897, 0.17648699392102896, 0.12593793245318485, 0.12537062602627935, 0.17233306918480285, 0.8768540228338799, 0.20072274251604116, 0.8789697784176717, 0.11823619693338971, 0.869003021638542, 0.85859956946013, 0.5298258847143168, 0.15513921691668964, 0.773362492284594, 0.20423307368581045, 0.16670634944661866, 0.7471626625841427, 0.534238193098924, 0.5269261745341225, 0.5251364741120789, 0.18505275301815494, 0.1857951940175322, 0.18547538825118315, 0.1896383065516012, 0.16833958193430498, 0.179120850360159, 0.18022619243277027, 0.18782990154988777, 0.1775994156329601, 0.07154821418386781, 0.07971310307179502, 0.09302511756953868, 0.08461198442351836, 0.08248150119767483, 0.07984463694307231, 0.07707748386754842, 0.0705890397341935, 0.07102344250076453]}, "mutation_prompt": null}
{"id": "7595f8a1-e2fd-4b2e-8a45-61c8ab2a7d13", "solution": "import numpy as np\n\nclass ImprovedSpeedAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            if _ % (self.budget // 10) == 0:\n                c1 = np.random.uniform(1.0, 3.0)\n                c2 = np.random.uniform(1.0, 3.0)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedSpeedAdaptiveInertiaPSO", "description": "Introducing a novel population resizing strategy to dynamically adjust the population size based on convergence progress for faster optimization.", "configspace": "", "generation": 97, "fitness": 0.24626394187941691, "feedback": "The algorithm ImprovedSpeedAdaptiveInertiaPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "a7347574-56e1-49f1-885f-0aa962cf452c", "metadata": {"aucs": [0.6682787844905586, 0.65195105438202, 0.5947257766945921, 0.5715219980703594, 0.5927162344668009, 0.5584452293609157, 0.6061215562138544, 0.604264047766381, 0.668285557236904, 0.24764396506563646, 0.22282780285075754, 0.18839621753399982, 0.1804302705440417, 0.16823696267665833, 0.20515279618852, 0.10795604224001254, 0.17016389877230886, 0.17214039840019013, 0.10877712693673547, 0.11368606368312573, 0.09113782269214865, 0.09781157752718006, 0.1205815859870818, 0.1231487244759013, 0.06010659929073858, 0.12023546365064053, 0.10885496986750987, 0.06904882518266209, 0.08844696657760576, 0.08760113059030317, 0.12084435460575149, 0.0928315696870552, 0.05714302610215238, 0.08915501241361745, 0.07759711217784138, 0.07551433611989145, 0.8999366567321154, 0.8587450535161634, 0.8378554895262658, 0.8627580426907018, 0.8455166060800051, 0.8660293674411971, 0.8829064342283606, 0.8328348896491057, 0.8720984218331849, 0.37199875526663306, 0.36714710951800844, 0.38397941148337933, 0.4347572057104099, 0.38085651161096, 0.3945349077894781, 0.359024428129018, 0.3416752546182209, 0.3825411128138235, 0.1746906737799252, 0.16687668794299892, 0.12976844001750687, 0.2788911687240204, 0.20541386279334817, 0.20726594286563127, 0.14837533722284568, 0.1492222498113499, 0.17225396871873966, 0.2037204001716113, 0.12779782133462192, 0.16229985060608565, 0.2588641919877619, 0.18059802507357814, 0.15314534322250384, 0.198434087071513, 0.12447119437688758, 0.3702183367696791, 0.2010731107361512, 0.19834967626982236, 0.12976370574075768, 0.18523322322582503, 0.16348921205908462, 0.132868131981141, 0.3082678289495355, 0.17812904097509796, 0.21598640546336645, 0.028462156780610925, 0.04618297011032679, 0.05434866883634293, 0.050790709377740106, 0.05610335446003223, 9.999999999998899e-05, 0.07629714406522237, 9.999999999998899e-05, 0.050319711557649915, 0.11210571985094397, 0.0942473997135288, 0.0914779477900951, 0.0825399278890091, 0.020433015796868292, 0.030280876075441165, 0.12838327704593844, 0.07308889258798157, 0.09095280222643654, 0.09213753427441629, 0.039929693014843504, 0.05138115528433407, 0.03261337805092568, 0.05414182262656053, 0.05743325041280678, 0.06407161187974775, 0.06355415412932763, 0.02669125999501143, 0.1391292507024089, 0.11072792790124864, 0.1132647066606709, 0.10930010348161923, 0.09575247735276604, 0.0785736337891011, 0.10763587140743858, 0.17691415892050177, 0.08012335392013703, 0.48653424721467853, 0.4772343909119229, 0.47241404946038035, 0.4821080328679592, 0.4535862959747421, 0.44808474241046303, 0.49746627447739034, 0.4720367832693748, 0.4841371428868597, 0.05599307383181329, 0.04835801429354469, 0.01725544969002002, 0.06871845828607259, 0.08665485712146725, 0.1418928929868012, 0.12174886554646036, 0.11998776389681753, 0.07151467942169398, 0.2286204524558767, 0.2851895539516136, 0.31333943357258087, 0.2362391720318927, 0.31284858927911596, 0.21846971217540834, 0.21936345019186743, 0.2203917919820395, 0.19491858806362627, 0.16083291026159152, 0.3261257712795842, 0.19539486742951673, 0.24268579360822173, 0.24985527208028535, 0.26986121114935235, 0.17902112411677829, 0.35975219952888204, 0.15305195257284376, 0.20478943104488467, 0.11641322688900835, 0.1225762991232594, 0.30559936856011716, 0.19666630573420374, 0.16427055258636047, 0.1852996584952319, 0.23597559474741425, 0.12415680423633968, 0.2591908562922792, 0.19669818229899827, 0.23823760456979204, 0.2107420412085853, 0.23502627921813835, 0.1982448087336086, 0.21899431613240306, 0.2329075853422049, 0.23464118309799287, 0.19479491678569627, 0.1833102289721521, 0.1705594648874894, 0.16567145919778392, 0.19245977434431782, 0.18619655286945913, 0.1794332543549072, 0.19219689893020897, 0.17648699392102896, 0.12593793245318485, 0.12537062602627935, 0.17233306918480285, 0.8768540228338799, 0.20072274251604116, 0.8789697784176717, 0.11823619693338971, 0.869003021638542, 0.85859956946013, 0.5298258847143168, 0.15513921691668964, 0.773362492284594, 0.20423307368581045, 0.16670634944661866, 0.7471626625841427, 0.534238193098924, 0.5269261745341225, 0.5251364741120789, 0.18505275301815494, 0.1857951940175322, 0.18547538825118315, 0.1896383065516012, 0.16833958193430498, 0.179120850360159, 0.18022619243277027, 0.18782990154988777, 0.1775994156329601, 0.07154821418386781, 0.07971310307179502, 0.09302511756953868, 0.08461198442351836, 0.08248150119767483, 0.07984463694307231, 0.07707748386754842, 0.0705890397341935, 0.07102344250076453]}, "mutation_prompt": null}
{"id": "f1c6a3cf-0b08-4909-b5c7-6ab6e3609ec8", "solution": "import numpy as np\n\nclass ImprovedSpeedAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            if _ % (self.budget // 10) == 0:\n                c1 = np.random.uniform(1.0, 3.0)\n                c2 = np.random.uniform(1.0, 3.0)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedSpeedAdaptiveInertiaPSO", "description": "Introducing a novel mechanism to adaptively update the velocity update coefficients based on a dynamic strategy to accelerate convergence speed.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a7347574-56e1-49f1-885f-0aa962cf452c", "metadata": {"aucs": [0.6682787844905586, 0.65195105438202, 0.5947257766945921, 0.5715219980703594, 0.5927162344668009, 0.5584452293609157, 0.6061215562138544, 0.604264047766381, 0.668285557236904, 0.24764396506563646, 0.22282780285075754, 0.18839621753399982, 0.1804302705440417, 0.16823696267665833, 0.20515279618852, 0.10795604224001254, 0.17016389877230886, 0.17214039840019013, 0.10877712693673547, 0.11368606368312573, 0.09113782269214865, 0.09781157752718006, 0.1205815859870818, 0.1231487244759013, 0.06010659929073858, 0.12023546365064053, 0.10885496986750987, 0.06904882518266209, 0.08844696657760576, 0.08760113059030317, 0.12084435460575149, 0.0928315696870552, 0.05714302610215238, 0.08915501241361745, 0.07759711217784138, 0.07551433611989145, 0.8999366567321154, 0.8587450535161634, 0.8378554895262658, 0.8627580426907018, 0.8455166060800051, 0.8660293674411971, 0.8829064342283606, 0.8328348896491057, 0.8720984218331849, 0.37199875526663306, 0.36714710951800844, 0.38397941148337933, 0.4347572057104099, 0.38085651161096, 0.3945349077894781, 0.359024428129018, 0.3416752546182209, 0.3825411128138235, 0.1746906737799252, 0.16687668794299892, 0.12976844001750687, 0.2788911687240204, 0.20541386279334817, 0.20726594286563127, 0.14837533722284568, 0.1492222498113499, 0.17225396871873966, 0.2037204001716113, 0.12779782133462192, 0.16229985060608565, 0.2588641919877619, 0.18059802507357814, 0.15314534322250384, 0.198434087071513, 0.12447119437688758, 0.3702183367696791, 0.2010731107361512, 0.19834967626982236, 0.12976370574075768, 0.18523322322582503, 0.16348921205908462, 0.132868131981141, 0.3082678289495355, 0.17812904097509796, 0.21598640546336645, 0.028462156780610925, 0.04618297011032679, 0.05434866883634293, 0.050790709377740106, 0.05610335446003223, 9.999999999998899e-05, 0.07629714406522237, 9.999999999998899e-05, 0.050319711557649915, 0.11210571985094397, 0.0942473997135288, 0.0914779477900951, 0.0825399278890091, 0.020433015796868292, 0.030280876075441165, 0.12838327704593844, 0.07308889258798157, 0.09095280222643654, 0.09213753427441629, 0.039929693014843504, 0.05138115528433407, 0.03261337805092568, 0.05414182262656053, 0.05743325041280678, 0.06407161187974775, 0.06355415412932763, 0.02669125999501143, 0.1391292507024089, 0.11072792790124864, 0.1132647066606709, 0.10930010348161923, 0.09575247735276604, 0.0785736337891011, 0.10763587140743858, 0.17691415892050177, 0.08012335392013703, 0.48653424721467853, 0.4772343909119229, 0.47241404946038035, 0.4821080328679592, 0.4535862959747421, 0.44808474241046303, 0.49746627447739034, 0.4720367832693748, 0.4841371428868597, 0.05599307383181329, 0.04835801429354469, 0.01725544969002002, 0.06871845828607259, 0.08665485712146725, 0.1418928929868012, 0.12174886554646036, 0.11998776389681753, 0.07151467942169398, 0.2286204524558767, 0.2851895539516136, 0.31333943357258087, 0.2362391720318927, 0.31284858927911596, 0.21846971217540834, 0.21936345019186743, 0.2203917919820395, 0.19491858806362627, 0.16083291026159152, 0.3261257712795842, 0.19539486742951673, 0.24268579360822173, 0.24985527208028535, 0.26986121114935235, 0.17902112411677829, 0.35975219952888204, 0.15305195257284376, 0.20478943104488467, 0.11641322688900835, 0.1225762991232594, 0.30559936856011716, 0.19666630573420374, 0.16427055258636047, 0.1852996584952319, 0.23597559474741425, 0.12415680423633968, 0.2591908562922792, 0.19669818229899827, 0.23823760456979204, 0.2107420412085853, 0.23502627921813835, 0.1982448087336086, 0.21899431613240306, 0.2329075853422049, 0.23464118309799287, 0.19479491678569627, 0.1833102289721521, 0.1705594648874894, 0.16567145919778392, 0.19245977434431782, 0.18619655286945913, 0.1794332543549072, 0.19219689893020897, 0.17648699392102896, 0.12593793245318485, 0.12537062602627935, 0.17233306918480285, 0.8768540228338799, 0.20072274251604116, 0.8789697784176717, 0.11823619693338971, 0.869003021638542, 0.85859956946013, 0.5298258847143168, 0.15513921691668964, 0.773362492284594, 0.20423307368581045, 0.16670634944661866, 0.7471626625841427, 0.534238193098924, 0.5269261745341225, 0.5251364741120789, 0.18505275301815494, 0.1857951940175322, 0.18547538825118315, 0.1896383065516012, 0.16833958193430498, 0.179120850360159, 0.18022619243277027, 0.18782990154988777, 0.1775994156329601, 0.07154821418386781, 0.07971310307179502, 0.09302511756953868, 0.08461198442351836, 0.08248150119767483, 0.07984463694307231, 0.07707748386754842, 0.0705890397341935, 0.07102344250076453]}, "mutation_prompt": null}
{"id": "723b82bf-6b46-4ff3-8edf-1aa396ad0136", "solution": "import numpy as np\n\nclass ImprovedSpeedAdaptiveInertiaPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.pop_size = 30\n        self.max_vel = 0.2\n        self.c1_min, self.c1_max = 1.5, 2.5\n        self.c2_min, self.c2_max = 1.5, 2.5\n        self.inertia_min = 0.4\n        self.inertia_max = 0.9\n        self.position = np.random.uniform(-5.0, 5.0, (self.pop_size, self.dim))\n        self.velocity = np.random.uniform(-self.max_vel, self.max_vel, (self.pop_size, self.dim))\n        self.personal_best_pos = np.copy(self.position)\n        self.personal_best_val = np.full(self.pop_size, np.inf)\n        self.global_best_pos = None\n        self.global_best_val = np.inf\n\n    def __call__(self, func):\n        for _ in range(self.budget):\n            fitness = func(self.position)\n            for i in range(self.pop_size):\n                if fitness[i] < self.personal_best_val[i]:\n                    self.personal_best_val[i] = fitness[i]\n                    self.personal_best_pos[i] = np.copy(self.position[i])\n                if fitness[i] < self.global_best_val:\n                    self.global_best_val = fitness[i]\n                    self.global_best_pos = np.copy(self.position[i])\n            inertia_weight = self.inertia_max - (_ / self.budget) * (self.inertia_max - self.inertia_min)\n            c1 = self.c1_min + (_ / self.budget) * (self.c1_max - self.c1_min)\n            c2 = self.c2_min + (_ / self.budget) * (self.c2_max - self.c2_min)\n            if _ % (self.budget // 10) == 0:\n                c1 = np.random.uniform(1.0, 3.0)\n                c2 = np.random.uniform(1.0, 3.0)\n            for i in range(self.pop_size):\n                r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                self.velocity[i] = inertia_weight * self.velocity[i] + c1 * r1 * (self.personal_best_pos[i] - self.position[i]) + c2 * r2 * (self.global_best_pos - self.position[i])\n                self.velocity[i] = np.clip(self.velocity[i], -self.max_vel, self.max_vel)\n                self.position[i] += self.velocity[i]\n                self.position[i] = np.clip(self.position[i], -5.0, 5.0)\n            self.pop_size = max(5, int(30 * (1 - _ / self.budget))) if _ % (self.budget // 20) == 0 else self.pop_size\n            self.position = np.vstack((self.position[:self.pop_size], np.random.uniform(-5.0, 5.0, (30 - self.pop_size, self.dim))))\n            self.velocity = np.vstack((self.velocity[:self.pop_size], np.random.uniform(-self.max_vel, self.max_vel, (30 - self.pop_size, self.dim))))\n            self.personal_best_pos = np.vstack((self.personal_best_pos[:self.pop_size], np.copy(self.position[self.pop_size:])))\n            self.personal_best_val = np.append(self.personal_best_val[:self.pop_size], np.full(30 - self.pop_size, np.inf))\n        return self.global_best_pos", "name": "ImprovedSpeedAdaptiveInertiaPSO", "description": "Introducing a novel mechanism to adaptively update the velocity update coefficients based on a dynamic strategy to accelerate convergence speed.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "a7347574-56e1-49f1-885f-0aa962cf452c", "metadata": {"aucs": [0.6682787844905586, 0.65195105438202, 0.5947257766945921, 0.5715219980703594, 0.5927162344668009, 0.5584452293609157, 0.6061215562138544, 0.604264047766381, 0.668285557236904, 0.24764396506563646, 0.22282780285075754, 0.18839621753399982, 0.1804302705440417, 0.16823696267665833, 0.20515279618852, 0.10795604224001254, 0.17016389877230886, 0.17214039840019013, 0.10877712693673547, 0.11368606368312573, 0.09113782269214865, 0.09781157752718006, 0.1205815859870818, 0.1231487244759013, 0.06010659929073858, 0.12023546365064053, 0.10885496986750987, 0.06904882518266209, 0.08844696657760576, 0.08760113059030317, 0.12084435460575149, 0.0928315696870552, 0.05714302610215238, 0.08915501241361745, 0.07759711217784138, 0.07551433611989145, 0.8999366567321154, 0.8587450535161634, 0.8378554895262658, 0.8627580426907018, 0.8455166060800051, 0.8660293674411971, 0.8829064342283606, 0.8328348896491057, 0.8720984218331849, 0.37199875526663306, 0.36714710951800844, 0.38397941148337933, 0.4347572057104099, 0.38085651161096, 0.3945349077894781, 0.359024428129018, 0.3416752546182209, 0.3825411128138235, 0.1746906737799252, 0.16687668794299892, 0.12976844001750687, 0.2788911687240204, 0.20541386279334817, 0.20726594286563127, 0.14837533722284568, 0.1492222498113499, 0.17225396871873966, 0.2037204001716113, 0.12779782133462192, 0.16229985060608565, 0.2588641919877619, 0.18059802507357814, 0.15314534322250384, 0.198434087071513, 0.12447119437688758, 0.3702183367696791, 0.2010731107361512, 0.19834967626982236, 0.12976370574075768, 0.18523322322582503, 0.16348921205908462, 0.132868131981141, 0.3082678289495355, 0.17812904097509796, 0.21598640546336645, 0.028462156780610925, 0.04618297011032679, 0.05434866883634293, 0.050790709377740106, 0.05610335446003223, 9.999999999998899e-05, 0.07629714406522237, 9.999999999998899e-05, 0.050319711557649915, 0.11210571985094397, 0.0942473997135288, 0.0914779477900951, 0.0825399278890091, 0.020433015796868292, 0.030280876075441165, 0.12838327704593844, 0.07308889258798157, 0.09095280222643654, 0.09213753427441629, 0.039929693014843504, 0.05138115528433407, 0.03261337805092568, 0.05414182262656053, 0.05743325041280678, 0.06407161187974775, 0.06355415412932763, 0.02669125999501143, 0.1391292507024089, 0.11072792790124864, 0.1132647066606709, 0.10930010348161923, 0.09575247735276604, 0.0785736337891011, 0.10763587140743858, 0.17691415892050177, 0.08012335392013703, 0.48653424721467853, 0.4772343909119229, 0.47241404946038035, 0.4821080328679592, 0.4535862959747421, 0.44808474241046303, 0.49746627447739034, 0.4720367832693748, 0.4841371428868597, 0.05599307383181329, 0.04835801429354469, 0.01725544969002002, 0.06871845828607259, 0.08665485712146725, 0.1418928929868012, 0.12174886554646036, 0.11998776389681753, 0.07151467942169398, 0.2286204524558767, 0.2851895539516136, 0.31333943357258087, 0.2362391720318927, 0.31284858927911596, 0.21846971217540834, 0.21936345019186743, 0.2203917919820395, 0.19491858806362627, 0.16083291026159152, 0.3261257712795842, 0.19539486742951673, 0.24268579360822173, 0.24985527208028535, 0.26986121114935235, 0.17902112411677829, 0.35975219952888204, 0.15305195257284376, 0.20478943104488467, 0.11641322688900835, 0.1225762991232594, 0.30559936856011716, 0.19666630573420374, 0.16427055258636047, 0.1852996584952319, 0.23597559474741425, 0.12415680423633968, 0.2591908562922792, 0.19669818229899827, 0.23823760456979204, 0.2107420412085853, 0.23502627921813835, 0.1982448087336086, 0.21899431613240306, 0.2329075853422049, 0.23464118309799287, 0.19479491678569627, 0.1833102289721521, 0.1705594648874894, 0.16567145919778392, 0.19245977434431782, 0.18619655286945913, 0.1794332543549072, 0.19219689893020897, 0.17648699392102896, 0.12593793245318485, 0.12537062602627935, 0.17233306918480285, 0.8768540228338799, 0.20072274251604116, 0.8789697784176717, 0.11823619693338971, 0.869003021638542, 0.85859956946013, 0.5298258847143168, 0.15513921691668964, 0.773362492284594, 0.20423307368581045, 0.16670634944661866, 0.7471626625841427, 0.534238193098924, 0.5269261745341225, 0.5251364741120789, 0.18505275301815494, 0.1857951940175322, 0.18547538825118315, 0.1896383065516012, 0.16833958193430498, 0.179120850360159, 0.18022619243277027, 0.18782990154988777, 0.1775994156329601, 0.07154821418386781, 0.07971310307179502, 0.09302511756953868, 0.08461198442351836, 0.08248150119767483, 0.07984463694307231, 0.07707748386754842, 0.0705890397341935, 0.07102344250076453]}, "mutation_prompt": null}
