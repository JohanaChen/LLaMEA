{"id": "08e65585-6e1a-4f94-a0bf-6c3d101839ea", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        # Initialize particle positions and velocities\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n\n        # Initialize global best position and value\n        global_best_position = np.random.uniform(-5.0, 5.0, self.dim)\n        global_best_value = np.inf\n\n        # Initialize SA temperature\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                # Update particle velocity\n                r1, r2 = np.random.rand(), np.random.rand()\n                swarm_velocity[i] = 0.3 * swarm_velocity[i] + self.c1 * r1 * (global_best_position - swarm_position[i]) + self.c2 * r2 * (global_best_position - swarm_position[i])\n\n                # Update particle position\n                swarm_position[i] = within_bounds(swarm_position[i] + swarm_velocity[i])\n\n                # Calculate fitness value\n                fitness_value = objective_function(swarm_position[i])\n\n                # Update global best\n                if fitness_value < global_best_value:\n                    global_best_value = fitness_value\n                    global_best_position = np.copy(swarm_position[i])\n\n                # Simulated Annealing\n                if np.random.rand() < np.exp((global_best_value - fitness_value) / temperature):\n                    swarm_position[i] = within_bounds(swarm_position[i])\n\n            # Cool down temperature\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to balance exploration and exploitation for black box optimization problems.", "configspace": "", "generation": 0, "fitness": 0.12808350794351048, "feedback": "The algorithm PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": null, "metadata": {"aucs": [0.9241527773705259, 0.1266088647309931, 0.7934551230739131, 0.14119754118636252, 0.008714420338430506, 0.9227950256020047, 0.837338584416201, 0.14981196946987652, 0.05678408781261968, 0.04107421616137075, 9.999999999998899e-05, 9.999999999998899e-05, 0.7826121254389469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06539870461089836, 9.999999999998899e-05, 0.027261646459248334, 0.053512247008518865, 0.006253344547261119, 0.037563974638465836, 0.11825552854843902, 0.024478279863362706, 0.05720606204688394, 0.03944483407281363, 9.999999999998899e-05, 0.0024435366713049245, 0.03886400510961252, 0.022957920363468887, 0.0058835131684249475, 0.06872381945304973, 9.999999999998899e-05, 0.015228791586676338, 0.03815635425254038, 0.09974401655865328, 0.055680573420932356, 0.05570729439633182, 0.03801008477814816, 0.9963790486374636, 0.07507876234447464, 0.04990951227461482, 0.9992245352437383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2154426672765829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05157449290495575, 0.1345837890987297, 0.05559632151195437, 0.20954436960075395, 0.032002881759167434, 9.999999999998899e-05, 9.999999999998899e-05, 0.05404065607714059, 0.08537075572187569, 0.03912223296746631, 9.999999999998899e-05, 9.999999999998899e-05, 0.12362794286251333, 0.10692855532603984, 0.10751206498211507, 9.999999999998899e-05, 9.999999999998899e-05, 0.13525144448700777, 0.2611293191159735, 0.13793555621063458, 0.379217085053585, 0.269324738291298, 0.13538828044602502, 0.5020601155166597, 0.136220335976037, 0.13467485409580493, 9.999999999998899e-05, 0.13298065385147018, 0.0963292326348465, 9.999999999998899e-05, 9.999999999998899e-05, 0.02162980404234427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003887798460415648, 0.024601374105269525, 9.999999999998899e-05, 0.030310447792760153, 9.999999999998899e-05, 9.999999999998899e-05, 0.01375390476670546, 0.01338893075768588, 0.013307821742002846, 9.999999999998899e-05, 0.053253161026460605, 0.17697896307208794, 9.999999999998899e-05, 9.999999999998899e-05, 0.08264835776411561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0777303336864501, 0.20166674269995588, 9.999999999998899e-05, 0.16433633662393443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7028061237931049, 0.8111323293694177, 0.7503671368921594, 0.6262403847690501, 0.06294837870969494, 0.1827479710772315, 0.6130473256089501, 0.09558436414758531, 0.7229020607734424, 0.0521625003353936, 9.999999999998899e-05, 0.0045417273749306375, 0.04082898700384663, 0.038105466874249205, 0.011702019041306078, 0.10163264777775616, 0.02420193283076677, 0.10259182521404053, 0.19229379340632313, 0.06704031396221344, 0.16039545270076538, 0.13795732469402633, 0.15247150116166563, 0.1291635765839677, 0.15723684635692803, 0.0729987790843436, 0.15869104840723725, 0.18603173385566318, 0.09819792655437576, 0.13831856521895647, 0.19632995641561735, 0.09327372641653242, 0.13629441624996763, 0.27404628996378166, 0.08706812580490753, 0.16088444991010276, 0.042451519767365276, 0.01506137462115642, 0.08873657102252042, 0.15080591185645953, 0.026133085121897826, 0.06530121796308319, 0.21537656444641018, 9.999999999998899e-05, 0.06895080563679934, 0.24071703288451352, 0.12680763144743357, 0.1995088063539855, 0.22012531601555907, 0.16445403686111637, 0.15574271759162273, 0.2652809473298756, 0.17084795447630152, 0.17554779326067105, 0.1820812710047779, 0.1903410775367107, 0.19052035969786707, 0.20459724551329672, 0.2252485941319886, 0.1816238407530706, 0.20115692486911407, 9.999999999998899e-05, 9.999999999998899e-05, 0.18990001551555236, 0.14091305561995615, 0.11310381916179502, 0.09534536188030629, 0.11769457834699437, 0.06797726189754971, 0.07977562009819472, 0.06026375701093312, 0.1569522701674172, 0.10906921542511427, 0.21363619473723705, 0.05457605751189798, 0.16304500619177997, 0.06950988970112704, 0.11023380626752333, 0.09499899937530643, 0.1871909610514162, 0.18473646788954778, 0.17890361495072593, 0.14829104352400757, 0.17702049384606966, 0.20516678870808513, 0.10674202807060262, 0.17993799324427873, 0.1629677441472771, 0.11850212542269112, 0.19831520193321217, 0.06303090750613738, 0.037371261197822636, 0.038821955078599646, 0.07322652917450723, 0.009734072061499677, 0.07145272941242442, 0.08585728756891964, 0.05051005345408488, 0.047344492178373554]}, "mutation_prompt": null}
{"id": "dbf34800-a03b-459c-83a2-e6a889a42a28", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        # Initialize particle positions and velocities\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n\n        # Initialize global best position and value\n        global_best_position = np.random.uniform(-5.0, 5.0, self.dim)\n        global_best_value = np.inf\n\n        # Initialize SA temperature\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                # Update particle velocity\n                r1, r2 = np.random.rand(), np.random.rand()\n                swarm_velocity[i] = 0.3 * swarm_velocity[i] + self.c1 * r1 * (global_best_position - swarm_position[i]) + self.c2 * r2 * (global_best_position - swarm_position[i])\n\n                # Update particle position\n                swarm_position[i] = within_bounds(swarm_position[i] + swarm_velocity[i])\n\n                # Calculate fitness value\n                fitness_value = objective_function(swarm_position[i])\n\n                # Update global best\n                if fitness_value < global_best_value:\n                    global_best_value = fitness_value\n                    global_best_position = np.copy(swarm_position[i])\n\n                # Simulated Annealing\n                if np.random.rand() < np.exp((global_best_value - fitness_value) / temperature):\n                    swarm_position[i] = within_bounds(swarm_position[i])\n\n            # Cool down temperature\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to balance exploration and exploitation for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "08e65585-6e1a-4f94-a0bf-6c3d101839ea", "metadata": {"aucs": [0.9241527773705259, 0.1266088647309931, 0.7934551230739131, 0.14119754118636252, 0.008714420338430506, 0.9227950256020047, 0.837338584416201, 0.14981196946987652, 0.05678408781261968, 0.04107421616137075, 9.999999999998899e-05, 9.999999999998899e-05, 0.7826121254389469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06539870461089836, 9.999999999998899e-05, 0.027261646459248334, 0.053512247008518865, 0.006253344547261119, 0.037563974638465836, 0.11825552854843902, 0.024478279863362706, 0.05720606204688394, 0.03944483407281363, 9.999999999998899e-05, 0.0024435366713049245, 0.03886400510961252, 0.022957920363468887, 0.0058835131684249475, 0.06872381945304973, 9.999999999998899e-05, 0.015228791586676338, 0.03815635425254038, 0.09974401655865328, 0.055680573420932356, 0.05570729439633182, 0.03801008477814816, 0.9963790486374636, 0.07507876234447464, 0.04990951227461482, 0.9992245352437383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2154426672765829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05157449290495575, 0.1345837890987297, 0.05559632151195437, 0.20954436960075395, 0.032002881759167434, 9.999999999998899e-05, 9.999999999998899e-05, 0.05404065607714059, 0.08537075572187569, 0.03912223296746631, 9.999999999998899e-05, 9.999999999998899e-05, 0.12362794286251333, 0.10692855532603984, 0.10751206498211507, 9.999999999998899e-05, 9.999999999998899e-05, 0.13525144448700777, 0.2611293191159735, 0.13793555621063458, 0.379217085053585, 0.269324738291298, 0.13538828044602502, 0.5020601155166597, 0.136220335976037, 0.13467485409580493, 9.999999999998899e-05, 0.13298065385147018, 0.0963292326348465, 9.999999999998899e-05, 9.999999999998899e-05, 0.02162980404234427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003887798460415648, 0.024601374105269525, 9.999999999998899e-05, 0.030310447792760153, 9.999999999998899e-05, 9.999999999998899e-05, 0.01375390476670546, 0.01338893075768588, 0.013307821742002846, 9.999999999998899e-05, 0.053253161026460605, 0.17697896307208794, 9.999999999998899e-05, 9.999999999998899e-05, 0.08264835776411561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0777303336864501, 0.20166674269995588, 9.999999999998899e-05, 0.16433633662393443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7028061237931049, 0.8111323293694177, 0.7503671368921594, 0.6262403847690501, 0.06294837870969494, 0.1827479710772315, 0.6130473256089501, 0.09558436414758531, 0.7229020607734424, 0.0521625003353936, 9.999999999998899e-05, 0.0045417273749306375, 0.04082898700384663, 0.038105466874249205, 0.011702019041306078, 0.10163264777775616, 0.02420193283076677, 0.10259182521404053, 0.19229379340632313, 0.06704031396221344, 0.16039545270076538, 0.13795732469402633, 0.15247150116166563, 0.1291635765839677, 0.15723684635692803, 0.0729987790843436, 0.15869104840723725, 0.18603173385566318, 0.09819792655437576, 0.13831856521895647, 0.19632995641561735, 0.09327372641653242, 0.13629441624996763, 0.27404628996378166, 0.08706812580490753, 0.16088444991010276, 0.042451519767365276, 0.01506137462115642, 0.08873657102252042, 0.15080591185645953, 0.026133085121897826, 0.06530121796308319, 0.21537656444641018, 9.999999999998899e-05, 0.06895080563679934, 0.24071703288451352, 0.12680763144743357, 0.1995088063539855, 0.22012531601555907, 0.16445403686111637, 0.15574271759162273, 0.2652809473298756, 0.17084795447630152, 0.17554779326067105, 0.1820812710047779, 0.1903410775367107, 0.19052035969786707, 0.20459724551329672, 0.2252485941319886, 0.1816238407530706, 0.20115692486911407, 9.999999999998899e-05, 9.999999999998899e-05, 0.18990001551555236, 0.14091305561995615, 0.11310381916179502, 0.09534536188030629, 0.11769457834699437, 0.06797726189754971, 0.07977562009819472, 0.06026375701093312, 0.1569522701674172, 0.10906921542511427, 0.21363619473723705, 0.05457605751189798, 0.16304500619177997, 0.06950988970112704, 0.11023380626752333, 0.09499899937530643, 0.1871909610514162, 0.18473646788954778, 0.17890361495072593, 0.14829104352400757, 0.17702049384606966, 0.20516678870808513, 0.10674202807060262, 0.17993799324427873, 0.1629677441472771, 0.11850212542269112, 0.19831520193321217, 0.06303090750613738, 0.037371261197822636, 0.038821955078599646, 0.07322652917450723, 0.009734072061499677, 0.07145272941242442, 0.08585728756891964, 0.05051005345408488, 0.047344492178373554]}, "mutation_prompt": null}
{"id": "8cf9de7b-644f-4e78-8459-4e454d7c1970", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        # Initialize particle positions and velocities\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n\n        # Initialize global best position and value\n        global_best_position = np.random.uniform(-5.0, 5.0, self.dim)\n        global_best_value = np.inf\n\n        # Initialize SA temperature\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                # Update particle velocity\n                r1, r2 = np.random.rand(), np.random.rand()\n                swarm_velocity[i] = 0.3 * swarm_velocity[i] + self.c1 * r1 * (global_best_position - swarm_position[i]) + self.c2 * r2 * (global_best_position - swarm_position[i])\n\n                # Update particle position\n                swarm_position[i] = within_bounds(swarm_position[i] + swarm_velocity[i])\n\n                # Calculate fitness value\n                fitness_value = objective_function(swarm_position[i])\n\n                # Update global best\n                if fitness_value < global_best_value:\n                    global_best_value = fitness_value\n                    global_best_position = np.copy(swarm_position[i])\n\n                # Simulated Annealing\n                if np.random.rand() < np.exp((global_best_value - fitness_value) / temperature):\n                    swarm_position[i] = within_bounds(swarm_position[i])\n\n            # Cool down temperature\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to balance exploration and exploitation for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "08e65585-6e1a-4f94-a0bf-6c3d101839ea", "metadata": {"aucs": [0.9241527773705259, 0.1266088647309931, 0.7934551230739131, 0.14119754118636252, 0.008714420338430506, 0.9227950256020047, 0.837338584416201, 0.14981196946987652, 0.05678408781261968, 0.04107421616137075, 9.999999999998899e-05, 9.999999999998899e-05, 0.7826121254389469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06539870461089836, 9.999999999998899e-05, 0.027261646459248334, 0.053512247008518865, 0.006253344547261119, 0.037563974638465836, 0.11825552854843902, 0.024478279863362706, 0.05720606204688394, 0.03944483407281363, 9.999999999998899e-05, 0.0024435366713049245, 0.03886400510961252, 0.022957920363468887, 0.0058835131684249475, 0.06872381945304973, 9.999999999998899e-05, 0.015228791586676338, 0.03815635425254038, 0.09974401655865328, 0.055680573420932356, 0.05570729439633182, 0.03801008477814816, 0.9963790486374636, 0.07507876234447464, 0.04990951227461482, 0.9992245352437383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2154426672765829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05157449290495575, 0.1345837890987297, 0.05559632151195437, 0.20954436960075395, 0.032002881759167434, 9.999999999998899e-05, 9.999999999998899e-05, 0.05404065607714059, 0.08537075572187569, 0.03912223296746631, 9.999999999998899e-05, 9.999999999998899e-05, 0.12362794286251333, 0.10692855532603984, 0.10751206498211507, 9.999999999998899e-05, 9.999999999998899e-05, 0.13525144448700777, 0.2611293191159735, 0.13793555621063458, 0.379217085053585, 0.269324738291298, 0.13538828044602502, 0.5020601155166597, 0.136220335976037, 0.13467485409580493, 9.999999999998899e-05, 0.13298065385147018, 0.0963292326348465, 9.999999999998899e-05, 9.999999999998899e-05, 0.02162980404234427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003887798460415648, 0.024601374105269525, 9.999999999998899e-05, 0.030310447792760153, 9.999999999998899e-05, 9.999999999998899e-05, 0.01375390476670546, 0.01338893075768588, 0.013307821742002846, 9.999999999998899e-05, 0.053253161026460605, 0.17697896307208794, 9.999999999998899e-05, 9.999999999998899e-05, 0.08264835776411561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0777303336864501, 0.20166674269995588, 9.999999999998899e-05, 0.16433633662393443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7028061237931049, 0.8111323293694177, 0.7503671368921594, 0.6262403847690501, 0.06294837870969494, 0.1827479710772315, 0.6130473256089501, 0.09558436414758531, 0.7229020607734424, 0.0521625003353936, 9.999999999998899e-05, 0.0045417273749306375, 0.04082898700384663, 0.038105466874249205, 0.011702019041306078, 0.10163264777775616, 0.02420193283076677, 0.10259182521404053, 0.19229379340632313, 0.06704031396221344, 0.16039545270076538, 0.13795732469402633, 0.15247150116166563, 0.1291635765839677, 0.15723684635692803, 0.0729987790843436, 0.15869104840723725, 0.18603173385566318, 0.09819792655437576, 0.13831856521895647, 0.19632995641561735, 0.09327372641653242, 0.13629441624996763, 0.27404628996378166, 0.08706812580490753, 0.16088444991010276, 0.042451519767365276, 0.01506137462115642, 0.08873657102252042, 0.15080591185645953, 0.026133085121897826, 0.06530121796308319, 0.21537656444641018, 9.999999999998899e-05, 0.06895080563679934, 0.24071703288451352, 0.12680763144743357, 0.1995088063539855, 0.22012531601555907, 0.16445403686111637, 0.15574271759162273, 0.2652809473298756, 0.17084795447630152, 0.17554779326067105, 0.1820812710047779, 0.1903410775367107, 0.19052035969786707, 0.20459724551329672, 0.2252485941319886, 0.1816238407530706, 0.20115692486911407, 9.999999999998899e-05, 9.999999999998899e-05, 0.18990001551555236, 0.14091305561995615, 0.11310381916179502, 0.09534536188030629, 0.11769457834699437, 0.06797726189754971, 0.07977562009819472, 0.06026375701093312, 0.1569522701674172, 0.10906921542511427, 0.21363619473723705, 0.05457605751189798, 0.16304500619177997, 0.06950988970112704, 0.11023380626752333, 0.09499899937530643, 0.1871909610514162, 0.18473646788954778, 0.17890361495072593, 0.14829104352400757, 0.17702049384606966, 0.20516678870808513, 0.10674202807060262, 0.17993799324427873, 0.1629677441472771, 0.11850212542269112, 0.19831520193321217, 0.06303090750613738, 0.037371261197822636, 0.038821955078599646, 0.07322652917450723, 0.009734072061499677, 0.07145272941242442, 0.08585728756891964, 0.05051005345408488, 0.047344492178373554]}, "mutation_prompt": null}
{"id": "5b5e17f6-9ac6-4ba9-84f4-38482f364529", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        # Initialize particle positions and velocities\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n\n        # Initialize global best position and value\n        global_best_position = np.random.uniform(-5.0, 5.0, self.dim)\n        global_best_value = np.inf\n\n        # Initialize SA temperature\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                # Update particle velocity\n                r1, r2 = np.random.rand(), np.random.rand()\n                swarm_velocity[i] = 0.3 * swarm_velocity[i] + self.c1 * r1 * (global_best_position - swarm_position[i]) + self.c2 * r2 * (global_best_position - swarm_position[i])\n\n                # Update particle position\n                swarm_position[i] = within_bounds(swarm_position[i] + swarm_velocity[i])\n\n                # Calculate fitness value\n                fitness_value = objective_function(swarm_position[i])\n\n                # Update global best\n                if fitness_value < global_best_value:\n                    global_best_value = fitness_value\n                    global_best_position = np.copy(swarm_position[i])\n\n                # Simulated Annealing\n                if np.random.rand() < np.exp((global_best_value - fitness_value) / temperature):\n                    swarm_position[i] = within_bounds(swarm_position[i])\n\n            # Cool down temperature\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to balance exploration and exploitation for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "08e65585-6e1a-4f94-a0bf-6c3d101839ea", "metadata": {"aucs": [0.9241527773705259, 0.1266088647309931, 0.7934551230739131, 0.14119754118636252, 0.008714420338430506, 0.9227950256020047, 0.837338584416201, 0.14981196946987652, 0.05678408781261968, 0.04107421616137075, 9.999999999998899e-05, 9.999999999998899e-05, 0.7826121254389469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06539870461089836, 9.999999999998899e-05, 0.027261646459248334, 0.053512247008518865, 0.006253344547261119, 0.037563974638465836, 0.11825552854843902, 0.024478279863362706, 0.05720606204688394, 0.03944483407281363, 9.999999999998899e-05, 0.0024435366713049245, 0.03886400510961252, 0.022957920363468887, 0.0058835131684249475, 0.06872381945304973, 9.999999999998899e-05, 0.015228791586676338, 0.03815635425254038, 0.09974401655865328, 0.055680573420932356, 0.05570729439633182, 0.03801008477814816, 0.9963790486374636, 0.07507876234447464, 0.04990951227461482, 0.9992245352437383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2154426672765829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05157449290495575, 0.1345837890987297, 0.05559632151195437, 0.20954436960075395, 0.032002881759167434, 9.999999999998899e-05, 9.999999999998899e-05, 0.05404065607714059, 0.08537075572187569, 0.03912223296746631, 9.999999999998899e-05, 9.999999999998899e-05, 0.12362794286251333, 0.10692855532603984, 0.10751206498211507, 9.999999999998899e-05, 9.999999999998899e-05, 0.13525144448700777, 0.2611293191159735, 0.13793555621063458, 0.379217085053585, 0.269324738291298, 0.13538828044602502, 0.5020601155166597, 0.136220335976037, 0.13467485409580493, 9.999999999998899e-05, 0.13298065385147018, 0.0963292326348465, 9.999999999998899e-05, 9.999999999998899e-05, 0.02162980404234427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003887798460415648, 0.024601374105269525, 9.999999999998899e-05, 0.030310447792760153, 9.999999999998899e-05, 9.999999999998899e-05, 0.01375390476670546, 0.01338893075768588, 0.013307821742002846, 9.999999999998899e-05, 0.053253161026460605, 0.17697896307208794, 9.999999999998899e-05, 9.999999999998899e-05, 0.08264835776411561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0777303336864501, 0.20166674269995588, 9.999999999998899e-05, 0.16433633662393443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7028061237931049, 0.8111323293694177, 0.7503671368921594, 0.6262403847690501, 0.06294837870969494, 0.1827479710772315, 0.6130473256089501, 0.09558436414758531, 0.7229020607734424, 0.0521625003353936, 9.999999999998899e-05, 0.0045417273749306375, 0.04082898700384663, 0.038105466874249205, 0.011702019041306078, 0.10163264777775616, 0.02420193283076677, 0.10259182521404053, 0.19229379340632313, 0.06704031396221344, 0.16039545270076538, 0.13795732469402633, 0.15247150116166563, 0.1291635765839677, 0.15723684635692803, 0.0729987790843436, 0.15869104840723725, 0.18603173385566318, 0.09819792655437576, 0.13831856521895647, 0.19632995641561735, 0.09327372641653242, 0.13629441624996763, 0.27404628996378166, 0.08706812580490753, 0.16088444991010276, 0.042451519767365276, 0.01506137462115642, 0.08873657102252042, 0.15080591185645953, 0.026133085121897826, 0.06530121796308319, 0.21537656444641018, 9.999999999998899e-05, 0.06895080563679934, 0.24071703288451352, 0.12680763144743357, 0.1995088063539855, 0.22012531601555907, 0.16445403686111637, 0.15574271759162273, 0.2652809473298756, 0.17084795447630152, 0.17554779326067105, 0.1820812710047779, 0.1903410775367107, 0.19052035969786707, 0.20459724551329672, 0.2252485941319886, 0.1816238407530706, 0.20115692486911407, 9.999999999998899e-05, 9.999999999998899e-05, 0.18990001551555236, 0.14091305561995615, 0.11310381916179502, 0.09534536188030629, 0.11769457834699437, 0.06797726189754971, 0.07977562009819472, 0.06026375701093312, 0.1569522701674172, 0.10906921542511427, 0.21363619473723705, 0.05457605751189798, 0.16304500619177997, 0.06950988970112704, 0.11023380626752333, 0.09499899937530643, 0.1871909610514162, 0.18473646788954778, 0.17890361495072593, 0.14829104352400757, 0.17702049384606966, 0.20516678870808513, 0.10674202807060262, 0.17993799324427873, 0.1629677441472771, 0.11850212542269112, 0.19831520193321217, 0.06303090750613738, 0.037371261197822636, 0.038821955078599646, 0.07322652917450723, 0.009734072061499677, 0.07145272941242442, 0.08585728756891964, 0.05051005345408488, 0.047344492178373554]}, "mutation_prompt": null}
{"id": "5a76fb89-9a51-45d0-9cdc-0d886f7a40f4", "solution": "import numpy as np\n\nclass Improved_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget, self.dim, self.swarm_size, self.max_iter, self.c1, self.c2, self.initial_temp, self.cooling_rate = budget, dim, swarm_size, max_iter, c1, c2, initial_temp, cooling_rate\n\n    def __call__(self, func):\n        obj_func, within_bounds = lambda x: func(x), lambda x: np.clip(x, -5.0, 5.0)\n        swarm_pos, swarm_vel = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim)), np.zeros((self.swarm_size, self.dim))\n        global_best_pos, global_best_val, temperature = np.random.uniform(-5.0, 5.0, self.dim), np.inf, self.initial_temp\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                swarm_vel[i] = 0.3 * swarm_vel[i] + self.c1 * r1 * (global_best_pos - swarm_pos[i]) + self.c2 * r2 * (global_best_pos - swarm_pos[i])\n                swarm_pos[i] = within_bounds(swarm_pos[i] + swarm_vel[i])\n                fitness_val = obj_func(swarm_pos[i])\n\n                if fitness_val < global_best_val:\n                    global_best_val, global_best_pos = fitness_val, np.copy(swarm_pos[i])\n\n                if np.random.rand() < np.exp((global_best_val - fitness_val) / temperature):\n                    swarm_pos[i] = within_bounds(swarm_pos[i])\n\n            temperature *= self.cooling_rate\n\n        return global_best_pos", "name": "Improved_PSO_SA_Optimizer", "description": "Improved PSO_SA_Optimizer algorithm by optimizing data structure initialization and consolidating repeated operations.", "configspace": "", "generation": 4, "fitness": 0.12808350794351048, "feedback": "The algorithm Improved_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "08e65585-6e1a-4f94-a0bf-6c3d101839ea", "metadata": {"aucs": [0.9241527773705259, 0.1266088647309931, 0.7934551230739131, 0.14119754118636252, 0.008714420338430506, 0.9227950256020047, 0.837338584416201, 0.14981196946987652, 0.05678408781261968, 0.04107421616137075, 9.999999999998899e-05, 9.999999999998899e-05, 0.7826121254389469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06539870461089836, 9.999999999998899e-05, 0.027261646459248334, 0.053512247008518865, 0.006253344547261119, 0.037563974638465836, 0.11825552854843902, 0.024478279863362706, 0.05720606204688394, 0.03944483407281363, 9.999999999998899e-05, 0.0024435366713049245, 0.03886400510961252, 0.022957920363468887, 0.0058835131684249475, 0.06872381945304973, 9.999999999998899e-05, 0.015228791586676338, 0.03815635425254038, 0.09974401655865328, 0.055680573420932356, 0.05570729439633182, 0.03801008477814816, 0.9963790486374636, 0.07507876234447464, 0.04990951227461482, 0.9992245352437383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2154426672765829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05157449290495575, 0.1345837890987297, 0.05559632151195437, 0.20954436960075395, 0.032002881759167434, 9.999999999998899e-05, 9.999999999998899e-05, 0.05404065607714059, 0.08537075572187569, 0.03912223296746631, 9.999999999998899e-05, 9.999999999998899e-05, 0.12362794286251333, 0.10692855532603984, 0.10751206498211507, 9.999999999998899e-05, 9.999999999998899e-05, 0.13525144448700777, 0.2611293191159735, 0.13793555621063458, 0.379217085053585, 0.269324738291298, 0.13538828044602502, 0.5020601155166597, 0.136220335976037, 0.13467485409580493, 9.999999999998899e-05, 0.13298065385147018, 0.0963292326348465, 9.999999999998899e-05, 9.999999999998899e-05, 0.02162980404234427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003887798460415648, 0.024601374105269525, 9.999999999998899e-05, 0.030310447792760153, 9.999999999998899e-05, 9.999999999998899e-05, 0.01375390476670546, 0.01338893075768588, 0.013307821742002846, 9.999999999998899e-05, 0.053253161026460605, 0.17697896307208794, 9.999999999998899e-05, 9.999999999998899e-05, 0.08264835776411561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0777303336864501, 0.20166674269995588, 9.999999999998899e-05, 0.16433633662393443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7028061237931049, 0.8111323293694177, 0.7503671368921594, 0.6262403847690501, 0.06294837870969494, 0.1827479710772315, 0.6130473256089501, 0.09558436414758531, 0.7229020607734424, 0.0521625003353936, 9.999999999998899e-05, 0.0045417273749306375, 0.04082898700384663, 0.038105466874249205, 0.011702019041306078, 0.10163264777775616, 0.02420193283076677, 0.10259182521404053, 0.19229379340632313, 0.06704031396221344, 0.16039545270076538, 0.13795732469402633, 0.15247150116166563, 0.1291635765839677, 0.15723684635692803, 0.0729987790843436, 0.15869104840723725, 0.18603173385566318, 0.09819792655437576, 0.13831856521895647, 0.19632995641561735, 0.09327372641653242, 0.13629441624996763, 0.27404628996378166, 0.08706812580490753, 0.16088444991010276, 0.042451519767365276, 0.01506137462115642, 0.08873657102252042, 0.15080591185645953, 0.026133085121897826, 0.06530121796308319, 0.21537656444641018, 9.999999999998899e-05, 0.06895080563679934, 0.24071703288451352, 0.12680763144743357, 0.1995088063539855, 0.22012531601555907, 0.16445403686111637, 0.15574271759162273, 0.2652809473298756, 0.17084795447630152, 0.17554779326067105, 0.1820812710047779, 0.1903410775367107, 0.19052035969786707, 0.20459724551329672, 0.2252485941319886, 0.1816238407530706, 0.20115692486911407, 9.999999999998899e-05, 9.999999999998899e-05, 0.18990001551555236, 0.14091305561995615, 0.11310381916179502, 0.09534536188030629, 0.11769457834699437, 0.06797726189754971, 0.07977562009819472, 0.06026375701093312, 0.1569522701674172, 0.10906921542511427, 0.21363619473723705, 0.05457605751189798, 0.16304500619177997, 0.06950988970112704, 0.11023380626752333, 0.09499899937530643, 0.1871909610514162, 0.18473646788954778, 0.17890361495072593, 0.14829104352400757, 0.17702049384606966, 0.20516678870808513, 0.10674202807060262, 0.17993799324427873, 0.1629677441472771, 0.11850212542269112, 0.19831520193321217, 0.06303090750613738, 0.037371261197822636, 0.038821955078599646, 0.07322652917450723, 0.009734072061499677, 0.07145272941242442, 0.08585728756891964, 0.05051005345408488, 0.047344492178373554]}, "mutation_prompt": null}
{"id": "d20bfcea-108f-4503-9fc0-e3d2eec1a63e", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        # Initialize particle positions and velocities\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n\n        # Initialize global best position and value\n        global_best_position = np.random.uniform(-5.0, 5.0, self.dim)\n        global_best_value = np.inf\n\n        # Initialize SA temperature\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                # Update particle velocity\n                r1, r2 = np.random.rand(), np.random.rand()\n                swarm_velocity[i] = 0.3 * swarm_velocity[i] + self.c1 * r1 * (global_best_position - swarm_position[i]) + self.c2 * r2 * (global_best_position - swarm_position[i])\n\n                # Update particle position\n                swarm_position[i] = within_bounds(swarm_position[i] + swarm_velocity[i])\n\n                # Calculate fitness value\n                fitness_value = objective_function(swarm_position[i])\n\n                # Update global best\n                if fitness_value < global_best_value:\n                    global_best_value = fitness_value\n                    global_best_position = np.copy(swarm_position[i])\n\n                # Simulated Annealing\n                if np.random.rand() < np.exp((global_best_value - fitness_value) / temperature):\n                    swarm_position[i] = within_bounds(swarm_position[i])\n\n            # Cool down temperature\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to balance exploration and exploitation for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "08e65585-6e1a-4f94-a0bf-6c3d101839ea", "metadata": {"aucs": [0.9241527773705259, 0.1266088647309931, 0.7934551230739131, 0.14119754118636252, 0.008714420338430506, 0.9227950256020047, 0.837338584416201, 0.14981196946987652, 0.05678408781261968, 0.04107421616137075, 9.999999999998899e-05, 9.999999999998899e-05, 0.7826121254389469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06539870461089836, 9.999999999998899e-05, 0.027261646459248334, 0.053512247008518865, 0.006253344547261119, 0.037563974638465836, 0.11825552854843902, 0.024478279863362706, 0.05720606204688394, 0.03944483407281363, 9.999999999998899e-05, 0.0024435366713049245, 0.03886400510961252, 0.022957920363468887, 0.0058835131684249475, 0.06872381945304973, 9.999999999998899e-05, 0.015228791586676338, 0.03815635425254038, 0.09974401655865328, 0.055680573420932356, 0.05570729439633182, 0.03801008477814816, 0.9963790486374636, 0.07507876234447464, 0.04990951227461482, 0.9992245352437383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2154426672765829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05157449290495575, 0.1345837890987297, 0.05559632151195437, 0.20954436960075395, 0.032002881759167434, 9.999999999998899e-05, 9.999999999998899e-05, 0.05404065607714059, 0.08537075572187569, 0.03912223296746631, 9.999999999998899e-05, 9.999999999998899e-05, 0.12362794286251333, 0.10692855532603984, 0.10751206498211507, 9.999999999998899e-05, 9.999999999998899e-05, 0.13525144448700777, 0.2611293191159735, 0.13793555621063458, 0.379217085053585, 0.269324738291298, 0.13538828044602502, 0.5020601155166597, 0.136220335976037, 0.13467485409580493, 9.999999999998899e-05, 0.13298065385147018, 0.0963292326348465, 9.999999999998899e-05, 9.999999999998899e-05, 0.02162980404234427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003887798460415648, 0.024601374105269525, 9.999999999998899e-05, 0.030310447792760153, 9.999999999998899e-05, 9.999999999998899e-05, 0.01375390476670546, 0.01338893075768588, 0.013307821742002846, 9.999999999998899e-05, 0.053253161026460605, 0.17697896307208794, 9.999999999998899e-05, 9.999999999998899e-05, 0.08264835776411561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0777303336864501, 0.20166674269995588, 9.999999999998899e-05, 0.16433633662393443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7028061237931049, 0.8111323293694177, 0.7503671368921594, 0.6262403847690501, 0.06294837870969494, 0.1827479710772315, 0.6130473256089501, 0.09558436414758531, 0.7229020607734424, 0.0521625003353936, 9.999999999998899e-05, 0.0045417273749306375, 0.04082898700384663, 0.038105466874249205, 0.011702019041306078, 0.10163264777775616, 0.02420193283076677, 0.10259182521404053, 0.19229379340632313, 0.06704031396221344, 0.16039545270076538, 0.13795732469402633, 0.15247150116166563, 0.1291635765839677, 0.15723684635692803, 0.0729987790843436, 0.15869104840723725, 0.18603173385566318, 0.09819792655437576, 0.13831856521895647, 0.19632995641561735, 0.09327372641653242, 0.13629441624996763, 0.27404628996378166, 0.08706812580490753, 0.16088444991010276, 0.042451519767365276, 0.01506137462115642, 0.08873657102252042, 0.15080591185645953, 0.026133085121897826, 0.06530121796308319, 0.21537656444641018, 9.999999999998899e-05, 0.06895080563679934, 0.24071703288451352, 0.12680763144743357, 0.1995088063539855, 0.22012531601555907, 0.16445403686111637, 0.15574271759162273, 0.2652809473298756, 0.17084795447630152, 0.17554779326067105, 0.1820812710047779, 0.1903410775367107, 0.19052035969786707, 0.20459724551329672, 0.2252485941319886, 0.1816238407530706, 0.20115692486911407, 9.999999999998899e-05, 9.999999999998899e-05, 0.18990001551555236, 0.14091305561995615, 0.11310381916179502, 0.09534536188030629, 0.11769457834699437, 0.06797726189754971, 0.07977562009819472, 0.06026375701093312, 0.1569522701674172, 0.10906921542511427, 0.21363619473723705, 0.05457605751189798, 0.16304500619177997, 0.06950988970112704, 0.11023380626752333, 0.09499899937530643, 0.1871909610514162, 0.18473646788954778, 0.17890361495072593, 0.14829104352400757, 0.17702049384606966, 0.20516678870808513, 0.10674202807060262, 0.17993799324427873, 0.1629677441472771, 0.11850212542269112, 0.19831520193321217, 0.06303090750613738, 0.037371261197822636, 0.038821955078599646, 0.07322652917450723, 0.009734072061499677, 0.07145272941242442, 0.08585728756891964, 0.05051005345408488, 0.047344492178373554]}, "mutation_prompt": null}
{"id": "e4fda165-4376-413e-840a-0aaea7ad06a3", "solution": "import numpy as np\n\nclass Improved_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = np.random.uniform(-5.0, 5.0, self.dim)\n        global_best_value = np.inf\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                swarm_velocity[i] = 0.3 * swarm_velocity[i] + self.c1 * r1 * (global_best_position - swarm_position[i]) + self.c2 * r2 * (global_best_position - swarm_position[i])\n                swarm_position[i] = np.clip(swarm_position[i] + swarm_velocity[i], -5.0, 5.0)\n                fitness_value = objective_function(swarm_position[i])\n\n                if fitness_value < global_best_value:\n                    global_best_value = fitness_value\n                    global_best_position = np.copy(swarm_position[i])\n\n                if np.random.rand() < np.exp((global_best_value - fitness_value) / temperature):\n                    swarm_position[i] = np.clip(swarm_position[i], -5.0, 5.0)\n\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Improved_PSO_SA_Optimizer", "description": "Improved efficiency by consolidating repeated calculations and utilizing numpy operations more effectively.", "configspace": "", "generation": 6, "fitness": 0.12808350794351048, "feedback": "The algorithm Improved_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "08e65585-6e1a-4f94-a0bf-6c3d101839ea", "metadata": {"aucs": [0.9241527773705259, 0.1266088647309931, 0.7934551230739131, 0.14119754118636252, 0.008714420338430506, 0.9227950256020047, 0.837338584416201, 0.14981196946987652, 0.05678408781261968, 0.04107421616137075, 9.999999999998899e-05, 9.999999999998899e-05, 0.7826121254389469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06539870461089836, 9.999999999998899e-05, 0.027261646459248334, 0.053512247008518865, 0.006253344547261119, 0.037563974638465836, 0.11825552854843902, 0.024478279863362706, 0.05720606204688394, 0.03944483407281363, 9.999999999998899e-05, 0.0024435366713049245, 0.03886400510961252, 0.022957920363468887, 0.0058835131684249475, 0.06872381945304973, 9.999999999998899e-05, 0.015228791586676338, 0.03815635425254038, 0.09974401655865328, 0.055680573420932356, 0.05570729439633182, 0.03801008477814816, 0.9963790486374636, 0.07507876234447464, 0.04990951227461482, 0.9992245352437383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2154426672765829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05157449290495575, 0.1345837890987297, 0.05559632151195437, 0.20954436960075395, 0.032002881759167434, 9.999999999998899e-05, 9.999999999998899e-05, 0.05404065607714059, 0.08537075572187569, 0.03912223296746631, 9.999999999998899e-05, 9.999999999998899e-05, 0.12362794286251333, 0.10692855532603984, 0.10751206498211507, 9.999999999998899e-05, 9.999999999998899e-05, 0.13525144448700777, 0.2611293191159735, 0.13793555621063458, 0.379217085053585, 0.269324738291298, 0.13538828044602502, 0.5020601155166597, 0.136220335976037, 0.13467485409580493, 9.999999999998899e-05, 0.13298065385147018, 0.0963292326348465, 9.999999999998899e-05, 9.999999999998899e-05, 0.02162980404234427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003887798460415648, 0.024601374105269525, 9.999999999998899e-05, 0.030310447792760153, 9.999999999998899e-05, 9.999999999998899e-05, 0.01375390476670546, 0.01338893075768588, 0.013307821742002846, 9.999999999998899e-05, 0.053253161026460605, 0.17697896307208794, 9.999999999998899e-05, 9.999999999998899e-05, 0.08264835776411561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0777303336864501, 0.20166674269995588, 9.999999999998899e-05, 0.16433633662393443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7028061237931049, 0.8111323293694177, 0.7503671368921594, 0.6262403847690501, 0.06294837870969494, 0.1827479710772315, 0.6130473256089501, 0.09558436414758531, 0.7229020607734424, 0.0521625003353936, 9.999999999998899e-05, 0.0045417273749306375, 0.04082898700384663, 0.038105466874249205, 0.011702019041306078, 0.10163264777775616, 0.02420193283076677, 0.10259182521404053, 0.19229379340632313, 0.06704031396221344, 0.16039545270076538, 0.13795732469402633, 0.15247150116166563, 0.1291635765839677, 0.15723684635692803, 0.0729987790843436, 0.15869104840723725, 0.18603173385566318, 0.09819792655437576, 0.13831856521895647, 0.19632995641561735, 0.09327372641653242, 0.13629441624996763, 0.27404628996378166, 0.08706812580490753, 0.16088444991010276, 0.042451519767365276, 0.01506137462115642, 0.08873657102252042, 0.15080591185645953, 0.026133085121897826, 0.06530121796308319, 0.21537656444641018, 9.999999999998899e-05, 0.06895080563679934, 0.24071703288451352, 0.12680763144743357, 0.1995088063539855, 0.22012531601555907, 0.16445403686111637, 0.15574271759162273, 0.2652809473298756, 0.17084795447630152, 0.17554779326067105, 0.1820812710047779, 0.1903410775367107, 0.19052035969786707, 0.20459724551329672, 0.2252485941319886, 0.1816238407530706, 0.20115692486911407, 9.999999999998899e-05, 9.999999999998899e-05, 0.18990001551555236, 0.14091305561995615, 0.11310381916179502, 0.09534536188030629, 0.11769457834699437, 0.06797726189754971, 0.07977562009819472, 0.06026375701093312, 0.1569522701674172, 0.10906921542511427, 0.21363619473723705, 0.05457605751189798, 0.16304500619177997, 0.06950988970112704, 0.11023380626752333, 0.09499899937530643, 0.1871909610514162, 0.18473646788954778, 0.17890361495072593, 0.14829104352400757, 0.17702049384606966, 0.20516678870808513, 0.10674202807060262, 0.17993799324427873, 0.1629677441472771, 0.11850212542269112, 0.19831520193321217, 0.06303090750613738, 0.037371261197822636, 0.038821955078599646, 0.07322652917450723, 0.009734072061499677, 0.07145272941242442, 0.08585728756891964, 0.05051005345408488, 0.047344492178373554]}, "mutation_prompt": null}
{"id": "6c948dae-2082-4deb-b414-2ae41236bb26", "solution": "import numpy as np\n\nclass Improved_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget, self.dim, self.swarm_size, self.max_iter, self.c1, self.c2, self.initial_temp, self.cooling_rate = budget, dim, swarm_size, max_iter, c1, c2, initial_temp, cooling_rate\n\n    def __call__(self, func):\n        func, within_bounds = np.vectorize(func), lambda x: np.clip(x, -5.0, 5.0)\n\n        swarm_position, swarm_velocity = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim)), np.zeros((self.swarm_size, self.dim))\n        global_best_position, global_best_value = np.random.uniform(-5.0, 5.0, self.dim), np.inf\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                swarm_velocity[i] = 0.3 * swarm_velocity[i] + self.c1 * r1 * (global_best_position - swarm_position[i]) + self.c2 * r2 * (global_best_position - swarm_position[i])\n                swarm_position[i] = within_bounds(swarm_position[i] + swarm_velocity[i])\n\n                fitness_value = func(swarm_position[i])\n                if fitness_value < global_best_value:\n                    global_best_value, global_best_position = fitness_value, np.copy(swarm_position[i])\n\n                if np.random.rand() < np.exp((global_best_value - fitness_value) / temperature):\n                    swarm_position[i] = within_bounds(swarm_position[i])\n\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Improved_PSO_SA_Optimizer", "description": "Improved efficiency by consolidating repeated operations and optimizing control flow.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "An exception occurred: TypeError('__call__(): incompatible function arguments. The following argument types are supported:\\n    1. (self: ioh.iohcpp.problem.RealSingleObjective, arg0: List[float]) -> float\\n    2. (self: ioh.iohcpp.problem.RealSingleObjective, arg0: List[List[float]]) -> List[float]\\n\\nInvoked with: <RealSingleObjectiveProblem 1. Sphere (iid=1 dim=5)>, -5.0').", "error": "TypeError('__call__(): incompatible function arguments. The following argument types are supported:\\n    1. (self: ioh.iohcpp.problem.RealSingleObjective, arg0: List[float]) -> float\\n    2. (self: ioh.iohcpp.problem.RealSingleObjective, arg0: List[List[float]]) -> List[float]\\n\\nInvoked with: <RealSingleObjectiveProblem 1. Sphere (iid=1 dim=5)>, -5.0')", "parent_id": "08e65585-6e1a-4f94-a0bf-6c3d101839ea", "metadata": {}, "mutation_prompt": null}
{"id": "5d3f4e24-fe64-4b20-8f86-b5e92fafd04f", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        # Initialize particle positions and velocities\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n\n        # Initialize global best position and value\n        global_best_position = np.random.uniform(-5.0, 5.0, self.dim)\n        global_best_value = np.inf\n\n        # Initialize SA temperature\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                # Update particle velocity\n                r1, r2 = np.random.rand(), np.random.rand()\n                swarm_velocity[i] = 0.3 * swarm_velocity[i] + self.c1 * r1 * (global_best_position - swarm_position[i]) + self.c2 * r2 * (global_best_position - swarm_position[i])\n\n                # Update particle position\n                swarm_position[i] = within_bounds(swarm_position[i] + swarm_velocity[i])\n\n                # Calculate fitness value\n                fitness_value = objective_function(swarm_position[i])\n\n                # Update global best\n                if fitness_value < global_best_value:\n                    global_best_value = fitness_value\n                    global_best_position = np.copy(swarm_position[i])\n\n                # Simulated Annealing\n                if np.random.rand() < np.exp((global_best_value - fitness_value) / temperature):\n                    swarm_position[i] = within_bounds(swarm_position[i])\n\n            # Cool down temperature\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to balance exploration and exploitation for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "08e65585-6e1a-4f94-a0bf-6c3d101839ea", "metadata": {"aucs": [0.9241527773705259, 0.1266088647309931, 0.7934551230739131, 0.14119754118636252, 0.008714420338430506, 0.9227950256020047, 0.837338584416201, 0.14981196946987652, 0.05678408781261968, 0.04107421616137075, 9.999999999998899e-05, 9.999999999998899e-05, 0.7826121254389469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06539870461089836, 9.999999999998899e-05, 0.027261646459248334, 0.053512247008518865, 0.006253344547261119, 0.037563974638465836, 0.11825552854843902, 0.024478279863362706, 0.05720606204688394, 0.03944483407281363, 9.999999999998899e-05, 0.0024435366713049245, 0.03886400510961252, 0.022957920363468887, 0.0058835131684249475, 0.06872381945304973, 9.999999999998899e-05, 0.015228791586676338, 0.03815635425254038, 0.09974401655865328, 0.055680573420932356, 0.05570729439633182, 0.03801008477814816, 0.9963790486374636, 0.07507876234447464, 0.04990951227461482, 0.9992245352437383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2154426672765829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05157449290495575, 0.1345837890987297, 0.05559632151195437, 0.20954436960075395, 0.032002881759167434, 9.999999999998899e-05, 9.999999999998899e-05, 0.05404065607714059, 0.08537075572187569, 0.03912223296746631, 9.999999999998899e-05, 9.999999999998899e-05, 0.12362794286251333, 0.10692855532603984, 0.10751206498211507, 9.999999999998899e-05, 9.999999999998899e-05, 0.13525144448700777, 0.2611293191159735, 0.13793555621063458, 0.379217085053585, 0.269324738291298, 0.13538828044602502, 0.5020601155166597, 0.136220335976037, 0.13467485409580493, 9.999999999998899e-05, 0.13298065385147018, 0.0963292326348465, 9.999999999998899e-05, 9.999999999998899e-05, 0.02162980404234427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003887798460415648, 0.024601374105269525, 9.999999999998899e-05, 0.030310447792760153, 9.999999999998899e-05, 9.999999999998899e-05, 0.01375390476670546, 0.01338893075768588, 0.013307821742002846, 9.999999999998899e-05, 0.053253161026460605, 0.17697896307208794, 9.999999999998899e-05, 9.999999999998899e-05, 0.08264835776411561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0777303336864501, 0.20166674269995588, 9.999999999998899e-05, 0.16433633662393443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7028061237931049, 0.8111323293694177, 0.7503671368921594, 0.6262403847690501, 0.06294837870969494, 0.1827479710772315, 0.6130473256089501, 0.09558436414758531, 0.7229020607734424, 0.0521625003353936, 9.999999999998899e-05, 0.0045417273749306375, 0.04082898700384663, 0.038105466874249205, 0.011702019041306078, 0.10163264777775616, 0.02420193283076677, 0.10259182521404053, 0.19229379340632313, 0.06704031396221344, 0.16039545270076538, 0.13795732469402633, 0.15247150116166563, 0.1291635765839677, 0.15723684635692803, 0.0729987790843436, 0.15869104840723725, 0.18603173385566318, 0.09819792655437576, 0.13831856521895647, 0.19632995641561735, 0.09327372641653242, 0.13629441624996763, 0.27404628996378166, 0.08706812580490753, 0.16088444991010276, 0.042451519767365276, 0.01506137462115642, 0.08873657102252042, 0.15080591185645953, 0.026133085121897826, 0.06530121796308319, 0.21537656444641018, 9.999999999998899e-05, 0.06895080563679934, 0.24071703288451352, 0.12680763144743357, 0.1995088063539855, 0.22012531601555907, 0.16445403686111637, 0.15574271759162273, 0.2652809473298756, 0.17084795447630152, 0.17554779326067105, 0.1820812710047779, 0.1903410775367107, 0.19052035969786707, 0.20459724551329672, 0.2252485941319886, 0.1816238407530706, 0.20115692486911407, 9.999999999998899e-05, 9.999999999998899e-05, 0.18990001551555236, 0.14091305561995615, 0.11310381916179502, 0.09534536188030629, 0.11769457834699437, 0.06797726189754971, 0.07977562009819472, 0.06026375701093312, 0.1569522701674172, 0.10906921542511427, 0.21363619473723705, 0.05457605751189798, 0.16304500619177997, 0.06950988970112704, 0.11023380626752333, 0.09499899937530643, 0.1871909610514162, 0.18473646788954778, 0.17890361495072593, 0.14829104352400757, 0.17702049384606966, 0.20516678870808513, 0.10674202807060262, 0.17993799324427873, 0.1629677441472771, 0.11850212542269112, 0.19831520193321217, 0.06303090750613738, 0.037371261197822636, 0.038821955078599646, 0.07322652917450723, 0.009734072061499677, 0.07145272941242442, 0.08585728756891964, 0.05051005345408488, 0.047344492178373554]}, "mutation_prompt": null}
{"id": "97f74c6b-9ce1-4247-bd36-df4c8288ad13", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        # Initialize particle positions and velocities\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n\n        # Initialize global best position and value\n        global_best_position = np.random.uniform(-5.0, 5.0, self.dim)\n        global_best_value = np.inf\n\n        # Initialize SA temperature\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                # Update particle velocity\n                r1, r2 = np.random.rand(), np.random.rand()\n                swarm_velocity[i] = 0.3 * swarm_velocity[i] + self.c1 * r1 * (global_best_position - swarm_position[i]) + self.c2 * r2 * (global_best_position - swarm_position[i])\n\n                # Update particle position\n                swarm_position[i] = within_bounds(swarm_position[i] + swarm_velocity[i])\n\n                # Calculate fitness value\n                fitness_value = objective_function(swarm_position[i])\n\n                # Update global best\n                if fitness_value < global_best_value:\n                    global_best_value = fitness_value\n                    global_best_position = np.copy(swarm_position[i])\n\n                # Simulated Annealing\n                if np.random.rand() < np.exp((global_best_value - fitness_value) / temperature):\n                    swarm_position[i] = within_bounds(swarm_position[i])\n\n            # Cool down temperature\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to balance exploration and exploitation for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "08e65585-6e1a-4f94-a0bf-6c3d101839ea", "metadata": {"aucs": [0.9241527773705259, 0.1266088647309931, 0.7934551230739131, 0.14119754118636252, 0.008714420338430506, 0.9227950256020047, 0.837338584416201, 0.14981196946987652, 0.05678408781261968, 0.04107421616137075, 9.999999999998899e-05, 9.999999999998899e-05, 0.7826121254389469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06539870461089836, 9.999999999998899e-05, 0.027261646459248334, 0.053512247008518865, 0.006253344547261119, 0.037563974638465836, 0.11825552854843902, 0.024478279863362706, 0.05720606204688394, 0.03944483407281363, 9.999999999998899e-05, 0.0024435366713049245, 0.03886400510961252, 0.022957920363468887, 0.0058835131684249475, 0.06872381945304973, 9.999999999998899e-05, 0.015228791586676338, 0.03815635425254038, 0.09974401655865328, 0.055680573420932356, 0.05570729439633182, 0.03801008477814816, 0.9963790486374636, 0.07507876234447464, 0.04990951227461482, 0.9992245352437383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2154426672765829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05157449290495575, 0.1345837890987297, 0.05559632151195437, 0.20954436960075395, 0.032002881759167434, 9.999999999998899e-05, 9.999999999998899e-05, 0.05404065607714059, 0.08537075572187569, 0.03912223296746631, 9.999999999998899e-05, 9.999999999998899e-05, 0.12362794286251333, 0.10692855532603984, 0.10751206498211507, 9.999999999998899e-05, 9.999999999998899e-05, 0.13525144448700777, 0.2611293191159735, 0.13793555621063458, 0.379217085053585, 0.269324738291298, 0.13538828044602502, 0.5020601155166597, 0.136220335976037, 0.13467485409580493, 9.999999999998899e-05, 0.13298065385147018, 0.0963292326348465, 9.999999999998899e-05, 9.999999999998899e-05, 0.02162980404234427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003887798460415648, 0.024601374105269525, 9.999999999998899e-05, 0.030310447792760153, 9.999999999998899e-05, 9.999999999998899e-05, 0.01375390476670546, 0.01338893075768588, 0.013307821742002846, 9.999999999998899e-05, 0.053253161026460605, 0.17697896307208794, 9.999999999998899e-05, 9.999999999998899e-05, 0.08264835776411561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0777303336864501, 0.20166674269995588, 9.999999999998899e-05, 0.16433633662393443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7028061237931049, 0.8111323293694177, 0.7503671368921594, 0.6262403847690501, 0.06294837870969494, 0.1827479710772315, 0.6130473256089501, 0.09558436414758531, 0.7229020607734424, 0.0521625003353936, 9.999999999998899e-05, 0.0045417273749306375, 0.04082898700384663, 0.038105466874249205, 0.011702019041306078, 0.10163264777775616, 0.02420193283076677, 0.10259182521404053, 0.19229379340632313, 0.06704031396221344, 0.16039545270076538, 0.13795732469402633, 0.15247150116166563, 0.1291635765839677, 0.15723684635692803, 0.0729987790843436, 0.15869104840723725, 0.18603173385566318, 0.09819792655437576, 0.13831856521895647, 0.19632995641561735, 0.09327372641653242, 0.13629441624996763, 0.27404628996378166, 0.08706812580490753, 0.16088444991010276, 0.042451519767365276, 0.01506137462115642, 0.08873657102252042, 0.15080591185645953, 0.026133085121897826, 0.06530121796308319, 0.21537656444641018, 9.999999999998899e-05, 0.06895080563679934, 0.24071703288451352, 0.12680763144743357, 0.1995088063539855, 0.22012531601555907, 0.16445403686111637, 0.15574271759162273, 0.2652809473298756, 0.17084795447630152, 0.17554779326067105, 0.1820812710047779, 0.1903410775367107, 0.19052035969786707, 0.20459724551329672, 0.2252485941319886, 0.1816238407530706, 0.20115692486911407, 9.999999999998899e-05, 9.999999999998899e-05, 0.18990001551555236, 0.14091305561995615, 0.11310381916179502, 0.09534536188030629, 0.11769457834699437, 0.06797726189754971, 0.07977562009819472, 0.06026375701093312, 0.1569522701674172, 0.10906921542511427, 0.21363619473723705, 0.05457605751189798, 0.16304500619177997, 0.06950988970112704, 0.11023380626752333, 0.09499899937530643, 0.1871909610514162, 0.18473646788954778, 0.17890361495072593, 0.14829104352400757, 0.17702049384606966, 0.20516678870808513, 0.10674202807060262, 0.17993799324427873, 0.1629677441472771, 0.11850212542269112, 0.19831520193321217, 0.06303090750613738, 0.037371261197822636, 0.038821955078599646, 0.07322652917450723, 0.009734072061499677, 0.07145272941242442, 0.08585728756891964, 0.05051005345408488, 0.047344492178373554]}, "mutation_prompt": null}
{"id": "7ef59385-e06c-44e0-bde3-a501a16a8601", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        # Initialize particle positions and velocities\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n\n        # Initialize global best position and value\n        global_best_position = np.random.uniform(-5.0, 5.0, self.dim)\n        global_best_value = np.inf\n\n        # Initialize SA temperature\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                # Update particle velocity\n                r1, r2 = np.random.rand(), np.random.rand()\n                swarm_velocity[i] = 0.3 * swarm_velocity[i] + self.c1 * r1 * (global_best_position - swarm_position[i]) + self.c2 * r2 * (global_best_position - swarm_position[i])\n\n                # Update particle position\n                swarm_position[i] = within_bounds(swarm_position[i] + swarm_velocity[i])\n\n                # Calculate fitness value\n                fitness_value = objective_function(swarm_position[i])\n\n                # Update global best\n                if fitness_value < global_best_value:\n                    global_best_value = fitness_value\n                    global_best_position = np.copy(swarm_position[i])\n\n                # Simulated Annealing\n                if np.random.rand() < np.exp((global_best_value - fitness_value) / temperature):\n                    swarm_position[i] = within_bounds(swarm_position[i])\n\n            # Cool down temperature\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to balance exploration and exploitation for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "08e65585-6e1a-4f94-a0bf-6c3d101839ea", "metadata": {"aucs": [0.9241527773705259, 0.1266088647309931, 0.7934551230739131, 0.14119754118636252, 0.008714420338430506, 0.9227950256020047, 0.837338584416201, 0.14981196946987652, 0.05678408781261968, 0.04107421616137075, 9.999999999998899e-05, 9.999999999998899e-05, 0.7826121254389469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06539870461089836, 9.999999999998899e-05, 0.027261646459248334, 0.053512247008518865, 0.006253344547261119, 0.037563974638465836, 0.11825552854843902, 0.024478279863362706, 0.05720606204688394, 0.03944483407281363, 9.999999999998899e-05, 0.0024435366713049245, 0.03886400510961252, 0.022957920363468887, 0.0058835131684249475, 0.06872381945304973, 9.999999999998899e-05, 0.015228791586676338, 0.03815635425254038, 0.09974401655865328, 0.055680573420932356, 0.05570729439633182, 0.03801008477814816, 0.9963790486374636, 0.07507876234447464, 0.04990951227461482, 0.9992245352437383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2154426672765829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05157449290495575, 0.1345837890987297, 0.05559632151195437, 0.20954436960075395, 0.032002881759167434, 9.999999999998899e-05, 9.999999999998899e-05, 0.05404065607714059, 0.08537075572187569, 0.03912223296746631, 9.999999999998899e-05, 9.999999999998899e-05, 0.12362794286251333, 0.10692855532603984, 0.10751206498211507, 9.999999999998899e-05, 9.999999999998899e-05, 0.13525144448700777, 0.2611293191159735, 0.13793555621063458, 0.379217085053585, 0.269324738291298, 0.13538828044602502, 0.5020601155166597, 0.136220335976037, 0.13467485409580493, 9.999999999998899e-05, 0.13298065385147018, 0.0963292326348465, 9.999999999998899e-05, 9.999999999998899e-05, 0.02162980404234427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003887798460415648, 0.024601374105269525, 9.999999999998899e-05, 0.030310447792760153, 9.999999999998899e-05, 9.999999999998899e-05, 0.01375390476670546, 0.01338893075768588, 0.013307821742002846, 9.999999999998899e-05, 0.053253161026460605, 0.17697896307208794, 9.999999999998899e-05, 9.999999999998899e-05, 0.08264835776411561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0777303336864501, 0.20166674269995588, 9.999999999998899e-05, 0.16433633662393443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7028061237931049, 0.8111323293694177, 0.7503671368921594, 0.6262403847690501, 0.06294837870969494, 0.1827479710772315, 0.6130473256089501, 0.09558436414758531, 0.7229020607734424, 0.0521625003353936, 9.999999999998899e-05, 0.0045417273749306375, 0.04082898700384663, 0.038105466874249205, 0.011702019041306078, 0.10163264777775616, 0.02420193283076677, 0.10259182521404053, 0.19229379340632313, 0.06704031396221344, 0.16039545270076538, 0.13795732469402633, 0.15247150116166563, 0.1291635765839677, 0.15723684635692803, 0.0729987790843436, 0.15869104840723725, 0.18603173385566318, 0.09819792655437576, 0.13831856521895647, 0.19632995641561735, 0.09327372641653242, 0.13629441624996763, 0.27404628996378166, 0.08706812580490753, 0.16088444991010276, 0.042451519767365276, 0.01506137462115642, 0.08873657102252042, 0.15080591185645953, 0.026133085121897826, 0.06530121796308319, 0.21537656444641018, 9.999999999998899e-05, 0.06895080563679934, 0.24071703288451352, 0.12680763144743357, 0.1995088063539855, 0.22012531601555907, 0.16445403686111637, 0.15574271759162273, 0.2652809473298756, 0.17084795447630152, 0.17554779326067105, 0.1820812710047779, 0.1903410775367107, 0.19052035969786707, 0.20459724551329672, 0.2252485941319886, 0.1816238407530706, 0.20115692486911407, 9.999999999998899e-05, 9.999999999998899e-05, 0.18990001551555236, 0.14091305561995615, 0.11310381916179502, 0.09534536188030629, 0.11769457834699437, 0.06797726189754971, 0.07977562009819472, 0.06026375701093312, 0.1569522701674172, 0.10906921542511427, 0.21363619473723705, 0.05457605751189798, 0.16304500619177997, 0.06950988970112704, 0.11023380626752333, 0.09499899937530643, 0.1871909610514162, 0.18473646788954778, 0.17890361495072593, 0.14829104352400757, 0.17702049384606966, 0.20516678870808513, 0.10674202807060262, 0.17993799324427873, 0.1629677441472771, 0.11850212542269112, 0.19831520193321217, 0.06303090750613738, 0.037371261197822636, 0.038821955078599646, 0.07322652917450723, 0.009734072061499677, 0.07145272941242442, 0.08585728756891964, 0.05051005345408488, 0.047344492178373554]}, "mutation_prompt": null}
{"id": "5c8614e4-2d21-4d30-8d20-5970298b3153", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget, self.dim, self.swarm_size, self.max_iter, self.c1, self.c2, self.initial_temp, self.cooling_rate = budget, dim, swarm_size, max_iter, c1, c2, initial_temp, cooling_rate\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        swarm_position, swarm_velocity = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim)), np.zeros((self.swarm_size, self.dim))\n        global_best_position, global_best_value = np.random.uniform(-5.0, 5.0, self.dim), np.inf\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                swarm_velocity[i] = 0.3 * swarm_velocity[i] + self.c1 * r1 * (global_best_position - swarm_position[i]) + self.c2 * r2 * (global_best_position - swarm_position[i])\n                swarm_position[i] = within_bounds(swarm_position[i] + swarm_velocity[i])\n                fitness_value = objective_function(swarm_position[i])\n\n                if fitness_value < global_best_value:\n                    global_best_value, global_best_position = fitness_value, np.copy(swarm_position[i])\n\n                if np.random.rand() < np.exp((global_best_value - fitness_value) / temperature):\n                    swarm_position[i] = within_bounds(swarm_position[i])\n\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "PSO_SA_Optimizer", "description": "Improved PSO_SA_Optimizer with optimized control flow and consolidated operations.", "configspace": "", "generation": 11, "fitness": 0.12808350794351048, "feedback": "The algorithm PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "08e65585-6e1a-4f94-a0bf-6c3d101839ea", "metadata": {"aucs": [0.9241527773705259, 0.1266088647309931, 0.7934551230739131, 0.14119754118636252, 0.008714420338430506, 0.9227950256020047, 0.837338584416201, 0.14981196946987652, 0.05678408781261968, 0.04107421616137075, 9.999999999998899e-05, 9.999999999998899e-05, 0.7826121254389469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06539870461089836, 9.999999999998899e-05, 0.027261646459248334, 0.053512247008518865, 0.006253344547261119, 0.037563974638465836, 0.11825552854843902, 0.024478279863362706, 0.05720606204688394, 0.03944483407281363, 9.999999999998899e-05, 0.0024435366713049245, 0.03886400510961252, 0.022957920363468887, 0.0058835131684249475, 0.06872381945304973, 9.999999999998899e-05, 0.015228791586676338, 0.03815635425254038, 0.09974401655865328, 0.055680573420932356, 0.05570729439633182, 0.03801008477814816, 0.9963790486374636, 0.07507876234447464, 0.04990951227461482, 0.9992245352437383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2154426672765829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05157449290495575, 0.1345837890987297, 0.05559632151195437, 0.20954436960075395, 0.032002881759167434, 9.999999999998899e-05, 9.999999999998899e-05, 0.05404065607714059, 0.08537075572187569, 0.03912223296746631, 9.999999999998899e-05, 9.999999999998899e-05, 0.12362794286251333, 0.10692855532603984, 0.10751206498211507, 9.999999999998899e-05, 9.999999999998899e-05, 0.13525144448700777, 0.2611293191159735, 0.13793555621063458, 0.379217085053585, 0.269324738291298, 0.13538828044602502, 0.5020601155166597, 0.136220335976037, 0.13467485409580493, 9.999999999998899e-05, 0.13298065385147018, 0.0963292326348465, 9.999999999998899e-05, 9.999999999998899e-05, 0.02162980404234427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003887798460415648, 0.024601374105269525, 9.999999999998899e-05, 0.030310447792760153, 9.999999999998899e-05, 9.999999999998899e-05, 0.01375390476670546, 0.01338893075768588, 0.013307821742002846, 9.999999999998899e-05, 0.053253161026460605, 0.17697896307208794, 9.999999999998899e-05, 9.999999999998899e-05, 0.08264835776411561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0777303336864501, 0.20166674269995588, 9.999999999998899e-05, 0.16433633662393443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7028061237931049, 0.8111323293694177, 0.7503671368921594, 0.6262403847690501, 0.06294837870969494, 0.1827479710772315, 0.6130473256089501, 0.09558436414758531, 0.7229020607734424, 0.0521625003353936, 9.999999999998899e-05, 0.0045417273749306375, 0.04082898700384663, 0.038105466874249205, 0.011702019041306078, 0.10163264777775616, 0.02420193283076677, 0.10259182521404053, 0.19229379340632313, 0.06704031396221344, 0.16039545270076538, 0.13795732469402633, 0.15247150116166563, 0.1291635765839677, 0.15723684635692803, 0.0729987790843436, 0.15869104840723725, 0.18603173385566318, 0.09819792655437576, 0.13831856521895647, 0.19632995641561735, 0.09327372641653242, 0.13629441624996763, 0.27404628996378166, 0.08706812580490753, 0.16088444991010276, 0.042451519767365276, 0.01506137462115642, 0.08873657102252042, 0.15080591185645953, 0.026133085121897826, 0.06530121796308319, 0.21537656444641018, 9.999999999998899e-05, 0.06895080563679934, 0.24071703288451352, 0.12680763144743357, 0.1995088063539855, 0.22012531601555907, 0.16445403686111637, 0.15574271759162273, 0.2652809473298756, 0.17084795447630152, 0.17554779326067105, 0.1820812710047779, 0.1903410775367107, 0.19052035969786707, 0.20459724551329672, 0.2252485941319886, 0.1816238407530706, 0.20115692486911407, 9.999999999998899e-05, 9.999999999998899e-05, 0.18990001551555236, 0.14091305561995615, 0.11310381916179502, 0.09534536188030629, 0.11769457834699437, 0.06797726189754971, 0.07977562009819472, 0.06026375701093312, 0.1569522701674172, 0.10906921542511427, 0.21363619473723705, 0.05457605751189798, 0.16304500619177997, 0.06950988970112704, 0.11023380626752333, 0.09499899937530643, 0.1871909610514162, 0.18473646788954778, 0.17890361495072593, 0.14829104352400757, 0.17702049384606966, 0.20516678870808513, 0.10674202807060262, 0.17993799324427873, 0.1629677441472771, 0.11850212542269112, 0.19831520193321217, 0.06303090750613738, 0.037371261197822636, 0.038821955078599646, 0.07322652917450723, 0.009734072061499677, 0.07145272941242442, 0.08585728756891964, 0.05051005345408488, 0.047344492178373554]}, "mutation_prompt": null}
{"id": "e3187036-2319-498d-82d6-21b8886bd78a", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        # Initialize particle positions and velocities\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n\n        # Initialize global best position and value\n        global_best_position = np.random.uniform(-5.0, 5.0, self.dim)\n        global_best_value = np.inf\n\n        # Initialize SA temperature\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                # Update particle velocity\n                r1, r2 = np.random.rand(), np.random.rand()\n                swarm_velocity[i] = 0.3 * swarm_velocity[i] + self.c1 * r1 * (global_best_position - swarm_position[i]) + self.c2 * r2 * (global_best_position - swarm_position[i])\n\n                # Update particle position\n                swarm_position[i] = within_bounds(swarm_position[i] + swarm_velocity[i])\n\n                # Calculate fitness value\n                fitness_value = objective_function(swarm_position[i])\n\n                # Update global best\n                if fitness_value < global_best_value:\n                    global_best_value = fitness_value\n                    global_best_position = np.copy(swarm_position[i])\n\n                # Simulated Annealing\n                if np.random.rand() < np.exp((global_best_value - fitness_value) / temperature):\n                    swarm_position[i] = within_bounds(swarm_position[i])\n\n            # Cool down temperature\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to balance exploration and exploitation for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "08e65585-6e1a-4f94-a0bf-6c3d101839ea", "metadata": {"aucs": [0.9241527773705259, 0.1266088647309931, 0.7934551230739131, 0.14119754118636252, 0.008714420338430506, 0.9227950256020047, 0.837338584416201, 0.14981196946987652, 0.05678408781261968, 0.04107421616137075, 9.999999999998899e-05, 9.999999999998899e-05, 0.7826121254389469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06539870461089836, 9.999999999998899e-05, 0.027261646459248334, 0.053512247008518865, 0.006253344547261119, 0.037563974638465836, 0.11825552854843902, 0.024478279863362706, 0.05720606204688394, 0.03944483407281363, 9.999999999998899e-05, 0.0024435366713049245, 0.03886400510961252, 0.022957920363468887, 0.0058835131684249475, 0.06872381945304973, 9.999999999998899e-05, 0.015228791586676338, 0.03815635425254038, 0.09974401655865328, 0.055680573420932356, 0.05570729439633182, 0.03801008477814816, 0.9963790486374636, 0.07507876234447464, 0.04990951227461482, 0.9992245352437383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2154426672765829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05157449290495575, 0.1345837890987297, 0.05559632151195437, 0.20954436960075395, 0.032002881759167434, 9.999999999998899e-05, 9.999999999998899e-05, 0.05404065607714059, 0.08537075572187569, 0.03912223296746631, 9.999999999998899e-05, 9.999999999998899e-05, 0.12362794286251333, 0.10692855532603984, 0.10751206498211507, 9.999999999998899e-05, 9.999999999998899e-05, 0.13525144448700777, 0.2611293191159735, 0.13793555621063458, 0.379217085053585, 0.269324738291298, 0.13538828044602502, 0.5020601155166597, 0.136220335976037, 0.13467485409580493, 9.999999999998899e-05, 0.13298065385147018, 0.0963292326348465, 9.999999999998899e-05, 9.999999999998899e-05, 0.02162980404234427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003887798460415648, 0.024601374105269525, 9.999999999998899e-05, 0.030310447792760153, 9.999999999998899e-05, 9.999999999998899e-05, 0.01375390476670546, 0.01338893075768588, 0.013307821742002846, 9.999999999998899e-05, 0.053253161026460605, 0.17697896307208794, 9.999999999998899e-05, 9.999999999998899e-05, 0.08264835776411561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0777303336864501, 0.20166674269995588, 9.999999999998899e-05, 0.16433633662393443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7028061237931049, 0.8111323293694177, 0.7503671368921594, 0.6262403847690501, 0.06294837870969494, 0.1827479710772315, 0.6130473256089501, 0.09558436414758531, 0.7229020607734424, 0.0521625003353936, 9.999999999998899e-05, 0.0045417273749306375, 0.04082898700384663, 0.038105466874249205, 0.011702019041306078, 0.10163264777775616, 0.02420193283076677, 0.10259182521404053, 0.19229379340632313, 0.06704031396221344, 0.16039545270076538, 0.13795732469402633, 0.15247150116166563, 0.1291635765839677, 0.15723684635692803, 0.0729987790843436, 0.15869104840723725, 0.18603173385566318, 0.09819792655437576, 0.13831856521895647, 0.19632995641561735, 0.09327372641653242, 0.13629441624996763, 0.27404628996378166, 0.08706812580490753, 0.16088444991010276, 0.042451519767365276, 0.01506137462115642, 0.08873657102252042, 0.15080591185645953, 0.026133085121897826, 0.06530121796308319, 0.21537656444641018, 9.999999999998899e-05, 0.06895080563679934, 0.24071703288451352, 0.12680763144743357, 0.1995088063539855, 0.22012531601555907, 0.16445403686111637, 0.15574271759162273, 0.2652809473298756, 0.17084795447630152, 0.17554779326067105, 0.1820812710047779, 0.1903410775367107, 0.19052035969786707, 0.20459724551329672, 0.2252485941319886, 0.1816238407530706, 0.20115692486911407, 9.999999999998899e-05, 9.999999999998899e-05, 0.18990001551555236, 0.14091305561995615, 0.11310381916179502, 0.09534536188030629, 0.11769457834699437, 0.06797726189754971, 0.07977562009819472, 0.06026375701093312, 0.1569522701674172, 0.10906921542511427, 0.21363619473723705, 0.05457605751189798, 0.16304500619177997, 0.06950988970112704, 0.11023380626752333, 0.09499899937530643, 0.1871909610514162, 0.18473646788954778, 0.17890361495072593, 0.14829104352400757, 0.17702049384606966, 0.20516678870808513, 0.10674202807060262, 0.17993799324427873, 0.1629677441472771, 0.11850212542269112, 0.19831520193321217, 0.06303090750613738, 0.037371261197822636, 0.038821955078599646, 0.07322652917450723, 0.009734072061499677, 0.07145272941242442, 0.08585728756891964, 0.05051005345408488, 0.047344492178373554]}, "mutation_prompt": null}
{"id": "c7f90a64-dd78-4945-9364-d449baf63578", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        # Initialize particle positions and velocities\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n\n        # Initialize global best position and value\n        global_best_position = np.random.uniform(-5.0, 5.0, self.dim)\n        global_best_value = np.inf\n\n        # Initialize SA temperature\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                # Update particle velocity\n                r1, r2 = np.random.rand(), np.random.rand()\n                swarm_velocity[i] = 0.3 * swarm_velocity[i] + self.c1 * r1 * (global_best_position - swarm_position[i]) + self.c2 * r2 * (global_best_position - swarm_position[i])\n\n                # Update particle position\n                swarm_position[i] = within_bounds(swarm_position[i] + swarm_velocity[i])\n\n                # Calculate fitness value\n                fitness_value = objective_function(swarm_position[i])\n\n                # Update global best\n                if fitness_value < global_best_value:\n                    global_best_value = fitness_value\n                    global_best_position = np.copy(swarm_position[i])\n\n                # Simulated Annealing\n                if np.random.rand() < np.exp((global_best_value - fitness_value) / temperature):\n                    swarm_position[i] = within_bounds(swarm_position[i])\n\n            # Cool down temperature\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to balance exploration and exploitation for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "08e65585-6e1a-4f94-a0bf-6c3d101839ea", "metadata": {"aucs": [0.9241527773705259, 0.1266088647309931, 0.7934551230739131, 0.14119754118636252, 0.008714420338430506, 0.9227950256020047, 0.837338584416201, 0.14981196946987652, 0.05678408781261968, 0.04107421616137075, 9.999999999998899e-05, 9.999999999998899e-05, 0.7826121254389469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06539870461089836, 9.999999999998899e-05, 0.027261646459248334, 0.053512247008518865, 0.006253344547261119, 0.037563974638465836, 0.11825552854843902, 0.024478279863362706, 0.05720606204688394, 0.03944483407281363, 9.999999999998899e-05, 0.0024435366713049245, 0.03886400510961252, 0.022957920363468887, 0.0058835131684249475, 0.06872381945304973, 9.999999999998899e-05, 0.015228791586676338, 0.03815635425254038, 0.09974401655865328, 0.055680573420932356, 0.05570729439633182, 0.03801008477814816, 0.9963790486374636, 0.07507876234447464, 0.04990951227461482, 0.9992245352437383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2154426672765829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05157449290495575, 0.1345837890987297, 0.05559632151195437, 0.20954436960075395, 0.032002881759167434, 9.999999999998899e-05, 9.999999999998899e-05, 0.05404065607714059, 0.08537075572187569, 0.03912223296746631, 9.999999999998899e-05, 9.999999999998899e-05, 0.12362794286251333, 0.10692855532603984, 0.10751206498211507, 9.999999999998899e-05, 9.999999999998899e-05, 0.13525144448700777, 0.2611293191159735, 0.13793555621063458, 0.379217085053585, 0.269324738291298, 0.13538828044602502, 0.5020601155166597, 0.136220335976037, 0.13467485409580493, 9.999999999998899e-05, 0.13298065385147018, 0.0963292326348465, 9.999999999998899e-05, 9.999999999998899e-05, 0.02162980404234427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003887798460415648, 0.024601374105269525, 9.999999999998899e-05, 0.030310447792760153, 9.999999999998899e-05, 9.999999999998899e-05, 0.01375390476670546, 0.01338893075768588, 0.013307821742002846, 9.999999999998899e-05, 0.053253161026460605, 0.17697896307208794, 9.999999999998899e-05, 9.999999999998899e-05, 0.08264835776411561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0777303336864501, 0.20166674269995588, 9.999999999998899e-05, 0.16433633662393443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7028061237931049, 0.8111323293694177, 0.7503671368921594, 0.6262403847690501, 0.06294837870969494, 0.1827479710772315, 0.6130473256089501, 0.09558436414758531, 0.7229020607734424, 0.0521625003353936, 9.999999999998899e-05, 0.0045417273749306375, 0.04082898700384663, 0.038105466874249205, 0.011702019041306078, 0.10163264777775616, 0.02420193283076677, 0.10259182521404053, 0.19229379340632313, 0.06704031396221344, 0.16039545270076538, 0.13795732469402633, 0.15247150116166563, 0.1291635765839677, 0.15723684635692803, 0.0729987790843436, 0.15869104840723725, 0.18603173385566318, 0.09819792655437576, 0.13831856521895647, 0.19632995641561735, 0.09327372641653242, 0.13629441624996763, 0.27404628996378166, 0.08706812580490753, 0.16088444991010276, 0.042451519767365276, 0.01506137462115642, 0.08873657102252042, 0.15080591185645953, 0.026133085121897826, 0.06530121796308319, 0.21537656444641018, 9.999999999998899e-05, 0.06895080563679934, 0.24071703288451352, 0.12680763144743357, 0.1995088063539855, 0.22012531601555907, 0.16445403686111637, 0.15574271759162273, 0.2652809473298756, 0.17084795447630152, 0.17554779326067105, 0.1820812710047779, 0.1903410775367107, 0.19052035969786707, 0.20459724551329672, 0.2252485941319886, 0.1816238407530706, 0.20115692486911407, 9.999999999998899e-05, 9.999999999998899e-05, 0.18990001551555236, 0.14091305561995615, 0.11310381916179502, 0.09534536188030629, 0.11769457834699437, 0.06797726189754971, 0.07977562009819472, 0.06026375701093312, 0.1569522701674172, 0.10906921542511427, 0.21363619473723705, 0.05457605751189798, 0.16304500619177997, 0.06950988970112704, 0.11023380626752333, 0.09499899937530643, 0.1871909610514162, 0.18473646788954778, 0.17890361495072593, 0.14829104352400757, 0.17702049384606966, 0.20516678870808513, 0.10674202807060262, 0.17993799324427873, 0.1629677441472771, 0.11850212542269112, 0.19831520193321217, 0.06303090750613738, 0.037371261197822636, 0.038821955078599646, 0.07322652917450723, 0.009734072061499677, 0.07145272941242442, 0.08585728756891964, 0.05051005345408488, 0.047344492178373554]}, "mutation_prompt": null}
{"id": "e80bda45-a52f-45b5-99bd-b3310e283b9f", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        # Initialize particle positions and velocities\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n\n        # Initialize global best position and value\n        global_best_position = np.random.uniform(-5.0, 5.0, self.dim)\n        global_best_value = np.inf\n\n        # Initialize SA temperature\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                # Update particle velocity\n                r1, r2 = np.random.rand(), np.random.rand()\n                swarm_velocity[i] = 0.3 * swarm_velocity[i] + self.c1 * r1 * (global_best_position - swarm_position[i]) + self.c2 * r2 * (global_best_position - swarm_position[i])\n\n                # Update particle position\n                swarm_position[i] = within_bounds(swarm_position[i] + swarm_velocity[i])\n\n                # Calculate fitness value\n                fitness_value = objective_function(swarm_position[i])\n\n                # Update global best\n                if fitness_value < global_best_value:\n                    global_best_value = fitness_value\n                    global_best_position = np.copy(swarm_position[i])\n\n                # Simulated Annealing\n                if np.random.rand() < np.exp((global_best_value - fitness_value) / temperature):\n                    swarm_position[i] = within_bounds(swarm_position[i])\n\n            # Cool down temperature\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to balance exploration and exploitation for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "08e65585-6e1a-4f94-a0bf-6c3d101839ea", "metadata": {"aucs": [0.9241527773705259, 0.1266088647309931, 0.7934551230739131, 0.14119754118636252, 0.008714420338430506, 0.9227950256020047, 0.837338584416201, 0.14981196946987652, 0.05678408781261968, 0.04107421616137075, 9.999999999998899e-05, 9.999999999998899e-05, 0.7826121254389469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06539870461089836, 9.999999999998899e-05, 0.027261646459248334, 0.053512247008518865, 0.006253344547261119, 0.037563974638465836, 0.11825552854843902, 0.024478279863362706, 0.05720606204688394, 0.03944483407281363, 9.999999999998899e-05, 0.0024435366713049245, 0.03886400510961252, 0.022957920363468887, 0.0058835131684249475, 0.06872381945304973, 9.999999999998899e-05, 0.015228791586676338, 0.03815635425254038, 0.09974401655865328, 0.055680573420932356, 0.05570729439633182, 0.03801008477814816, 0.9963790486374636, 0.07507876234447464, 0.04990951227461482, 0.9992245352437383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2154426672765829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05157449290495575, 0.1345837890987297, 0.05559632151195437, 0.20954436960075395, 0.032002881759167434, 9.999999999998899e-05, 9.999999999998899e-05, 0.05404065607714059, 0.08537075572187569, 0.03912223296746631, 9.999999999998899e-05, 9.999999999998899e-05, 0.12362794286251333, 0.10692855532603984, 0.10751206498211507, 9.999999999998899e-05, 9.999999999998899e-05, 0.13525144448700777, 0.2611293191159735, 0.13793555621063458, 0.379217085053585, 0.269324738291298, 0.13538828044602502, 0.5020601155166597, 0.136220335976037, 0.13467485409580493, 9.999999999998899e-05, 0.13298065385147018, 0.0963292326348465, 9.999999999998899e-05, 9.999999999998899e-05, 0.02162980404234427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003887798460415648, 0.024601374105269525, 9.999999999998899e-05, 0.030310447792760153, 9.999999999998899e-05, 9.999999999998899e-05, 0.01375390476670546, 0.01338893075768588, 0.013307821742002846, 9.999999999998899e-05, 0.053253161026460605, 0.17697896307208794, 9.999999999998899e-05, 9.999999999998899e-05, 0.08264835776411561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0777303336864501, 0.20166674269995588, 9.999999999998899e-05, 0.16433633662393443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7028061237931049, 0.8111323293694177, 0.7503671368921594, 0.6262403847690501, 0.06294837870969494, 0.1827479710772315, 0.6130473256089501, 0.09558436414758531, 0.7229020607734424, 0.0521625003353936, 9.999999999998899e-05, 0.0045417273749306375, 0.04082898700384663, 0.038105466874249205, 0.011702019041306078, 0.10163264777775616, 0.02420193283076677, 0.10259182521404053, 0.19229379340632313, 0.06704031396221344, 0.16039545270076538, 0.13795732469402633, 0.15247150116166563, 0.1291635765839677, 0.15723684635692803, 0.0729987790843436, 0.15869104840723725, 0.18603173385566318, 0.09819792655437576, 0.13831856521895647, 0.19632995641561735, 0.09327372641653242, 0.13629441624996763, 0.27404628996378166, 0.08706812580490753, 0.16088444991010276, 0.042451519767365276, 0.01506137462115642, 0.08873657102252042, 0.15080591185645953, 0.026133085121897826, 0.06530121796308319, 0.21537656444641018, 9.999999999998899e-05, 0.06895080563679934, 0.24071703288451352, 0.12680763144743357, 0.1995088063539855, 0.22012531601555907, 0.16445403686111637, 0.15574271759162273, 0.2652809473298756, 0.17084795447630152, 0.17554779326067105, 0.1820812710047779, 0.1903410775367107, 0.19052035969786707, 0.20459724551329672, 0.2252485941319886, 0.1816238407530706, 0.20115692486911407, 9.999999999998899e-05, 9.999999999998899e-05, 0.18990001551555236, 0.14091305561995615, 0.11310381916179502, 0.09534536188030629, 0.11769457834699437, 0.06797726189754971, 0.07977562009819472, 0.06026375701093312, 0.1569522701674172, 0.10906921542511427, 0.21363619473723705, 0.05457605751189798, 0.16304500619177997, 0.06950988970112704, 0.11023380626752333, 0.09499899937530643, 0.1871909610514162, 0.18473646788954778, 0.17890361495072593, 0.14829104352400757, 0.17702049384606966, 0.20516678870808513, 0.10674202807060262, 0.17993799324427873, 0.1629677441472771, 0.11850212542269112, 0.19831520193321217, 0.06303090750613738, 0.037371261197822636, 0.038821955078599646, 0.07322652917450723, 0.009734072061499677, 0.07145272941242442, 0.08585728756891964, 0.05051005345408488, 0.047344492178373554]}, "mutation_prompt": null}
{"id": "d742f6c5-fd49-4911-8d88-cb5fddcb99b1", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        # Initialize particle positions and velocities\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n\n        # Initialize global best position and value\n        global_best_position = np.random.uniform(-5.0, 5.0, self.dim)\n        global_best_value = np.inf\n\n        # Initialize SA temperature\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                # Update particle velocity\n                r1, r2 = np.random.rand(), np.random.rand()\n                swarm_velocity[i] = 0.3 * swarm_velocity[i] + self.c1 * r1 * (global_best_position - swarm_position[i]) + self.c2 * r2 * (global_best_position - swarm_position[i])\n\n                # Update particle position\n                swarm_position[i] = within_bounds(swarm_position[i] + swarm_velocity[i])\n\n                # Calculate fitness value\n                fitness_value = objective_function(swarm_position[i])\n\n                # Update global best\n                if fitness_value < global_best_value:\n                    global_best_value = fitness_value\n                    global_best_position = np.copy(swarm_position[i])\n\n                # Simulated Annealing\n                if np.random.rand() < np.exp((global_best_value - fitness_value) / temperature):\n                    swarm_position[i] = within_bounds(swarm_position[i])\n\n            # Cool down temperature\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to balance exploration and exploitation for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "08e65585-6e1a-4f94-a0bf-6c3d101839ea", "metadata": {"aucs": [0.9241527773705259, 0.1266088647309931, 0.7934551230739131, 0.14119754118636252, 0.008714420338430506, 0.9227950256020047, 0.837338584416201, 0.14981196946987652, 0.05678408781261968, 0.04107421616137075, 9.999999999998899e-05, 9.999999999998899e-05, 0.7826121254389469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06539870461089836, 9.999999999998899e-05, 0.027261646459248334, 0.053512247008518865, 0.006253344547261119, 0.037563974638465836, 0.11825552854843902, 0.024478279863362706, 0.05720606204688394, 0.03944483407281363, 9.999999999998899e-05, 0.0024435366713049245, 0.03886400510961252, 0.022957920363468887, 0.0058835131684249475, 0.06872381945304973, 9.999999999998899e-05, 0.015228791586676338, 0.03815635425254038, 0.09974401655865328, 0.055680573420932356, 0.05570729439633182, 0.03801008477814816, 0.9963790486374636, 0.07507876234447464, 0.04990951227461482, 0.9992245352437383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2154426672765829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05157449290495575, 0.1345837890987297, 0.05559632151195437, 0.20954436960075395, 0.032002881759167434, 9.999999999998899e-05, 9.999999999998899e-05, 0.05404065607714059, 0.08537075572187569, 0.03912223296746631, 9.999999999998899e-05, 9.999999999998899e-05, 0.12362794286251333, 0.10692855532603984, 0.10751206498211507, 9.999999999998899e-05, 9.999999999998899e-05, 0.13525144448700777, 0.2611293191159735, 0.13793555621063458, 0.379217085053585, 0.269324738291298, 0.13538828044602502, 0.5020601155166597, 0.136220335976037, 0.13467485409580493, 9.999999999998899e-05, 0.13298065385147018, 0.0963292326348465, 9.999999999998899e-05, 9.999999999998899e-05, 0.02162980404234427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003887798460415648, 0.024601374105269525, 9.999999999998899e-05, 0.030310447792760153, 9.999999999998899e-05, 9.999999999998899e-05, 0.01375390476670546, 0.01338893075768588, 0.013307821742002846, 9.999999999998899e-05, 0.053253161026460605, 0.17697896307208794, 9.999999999998899e-05, 9.999999999998899e-05, 0.08264835776411561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0777303336864501, 0.20166674269995588, 9.999999999998899e-05, 0.16433633662393443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7028061237931049, 0.8111323293694177, 0.7503671368921594, 0.6262403847690501, 0.06294837870969494, 0.1827479710772315, 0.6130473256089501, 0.09558436414758531, 0.7229020607734424, 0.0521625003353936, 9.999999999998899e-05, 0.0045417273749306375, 0.04082898700384663, 0.038105466874249205, 0.011702019041306078, 0.10163264777775616, 0.02420193283076677, 0.10259182521404053, 0.19229379340632313, 0.06704031396221344, 0.16039545270076538, 0.13795732469402633, 0.15247150116166563, 0.1291635765839677, 0.15723684635692803, 0.0729987790843436, 0.15869104840723725, 0.18603173385566318, 0.09819792655437576, 0.13831856521895647, 0.19632995641561735, 0.09327372641653242, 0.13629441624996763, 0.27404628996378166, 0.08706812580490753, 0.16088444991010276, 0.042451519767365276, 0.01506137462115642, 0.08873657102252042, 0.15080591185645953, 0.026133085121897826, 0.06530121796308319, 0.21537656444641018, 9.999999999998899e-05, 0.06895080563679934, 0.24071703288451352, 0.12680763144743357, 0.1995088063539855, 0.22012531601555907, 0.16445403686111637, 0.15574271759162273, 0.2652809473298756, 0.17084795447630152, 0.17554779326067105, 0.1820812710047779, 0.1903410775367107, 0.19052035969786707, 0.20459724551329672, 0.2252485941319886, 0.1816238407530706, 0.20115692486911407, 9.999999999998899e-05, 9.999999999998899e-05, 0.18990001551555236, 0.14091305561995615, 0.11310381916179502, 0.09534536188030629, 0.11769457834699437, 0.06797726189754971, 0.07977562009819472, 0.06026375701093312, 0.1569522701674172, 0.10906921542511427, 0.21363619473723705, 0.05457605751189798, 0.16304500619177997, 0.06950988970112704, 0.11023380626752333, 0.09499899937530643, 0.1871909610514162, 0.18473646788954778, 0.17890361495072593, 0.14829104352400757, 0.17702049384606966, 0.20516678870808513, 0.10674202807060262, 0.17993799324427873, 0.1629677441472771, 0.11850212542269112, 0.19831520193321217, 0.06303090750613738, 0.037371261197822636, 0.038821955078599646, 0.07322652917450723, 0.009734072061499677, 0.07145272941242442, 0.08585728756891964, 0.05051005345408488, 0.047344492178373554]}, "mutation_prompt": null}
{"id": "d5707b35-4497-430a-8465-d48009f069c9", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        # Initialize particle positions and velocities\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n\n        # Initialize global best position and value\n        global_best_position = np.random.uniform(-5.0, 5.0, self.dim)\n        global_best_value = np.inf\n\n        # Initialize SA temperature\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                # Update particle velocity\n                r1, r2 = np.random.rand(), np.random.rand()\n                swarm_velocity[i] = 0.3 * swarm_velocity[i] + self.c1 * r1 * (global_best_position - swarm_position[i]) + self.c2 * r2 * (global_best_position - swarm_position[i])\n\n                # Update particle position\n                swarm_position[i] = within_bounds(swarm_position[i] + swarm_velocity[i])\n\n                # Calculate fitness value\n                fitness_value = objective_function(swarm_position[i])\n\n                # Update global best\n                if fitness_value < global_best_value:\n                    global_best_value = fitness_value\n                    global_best_position = np.copy(swarm_position[i])\n\n                # Simulated Annealing\n                if np.random.rand() < np.exp((global_best_value - fitness_value) / temperature):\n                    swarm_position[i] = within_bounds(swarm_position[i])\n\n            # Cool down temperature\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to balance exploration and exploitation for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "08e65585-6e1a-4f94-a0bf-6c3d101839ea", "metadata": {"aucs": [0.9241527773705259, 0.1266088647309931, 0.7934551230739131, 0.14119754118636252, 0.008714420338430506, 0.9227950256020047, 0.837338584416201, 0.14981196946987652, 0.05678408781261968, 0.04107421616137075, 9.999999999998899e-05, 9.999999999998899e-05, 0.7826121254389469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06539870461089836, 9.999999999998899e-05, 0.027261646459248334, 0.053512247008518865, 0.006253344547261119, 0.037563974638465836, 0.11825552854843902, 0.024478279863362706, 0.05720606204688394, 0.03944483407281363, 9.999999999998899e-05, 0.0024435366713049245, 0.03886400510961252, 0.022957920363468887, 0.0058835131684249475, 0.06872381945304973, 9.999999999998899e-05, 0.015228791586676338, 0.03815635425254038, 0.09974401655865328, 0.055680573420932356, 0.05570729439633182, 0.03801008477814816, 0.9963790486374636, 0.07507876234447464, 0.04990951227461482, 0.9992245352437383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2154426672765829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05157449290495575, 0.1345837890987297, 0.05559632151195437, 0.20954436960075395, 0.032002881759167434, 9.999999999998899e-05, 9.999999999998899e-05, 0.05404065607714059, 0.08537075572187569, 0.03912223296746631, 9.999999999998899e-05, 9.999999999998899e-05, 0.12362794286251333, 0.10692855532603984, 0.10751206498211507, 9.999999999998899e-05, 9.999999999998899e-05, 0.13525144448700777, 0.2611293191159735, 0.13793555621063458, 0.379217085053585, 0.269324738291298, 0.13538828044602502, 0.5020601155166597, 0.136220335976037, 0.13467485409580493, 9.999999999998899e-05, 0.13298065385147018, 0.0963292326348465, 9.999999999998899e-05, 9.999999999998899e-05, 0.02162980404234427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003887798460415648, 0.024601374105269525, 9.999999999998899e-05, 0.030310447792760153, 9.999999999998899e-05, 9.999999999998899e-05, 0.01375390476670546, 0.01338893075768588, 0.013307821742002846, 9.999999999998899e-05, 0.053253161026460605, 0.17697896307208794, 9.999999999998899e-05, 9.999999999998899e-05, 0.08264835776411561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0777303336864501, 0.20166674269995588, 9.999999999998899e-05, 0.16433633662393443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7028061237931049, 0.8111323293694177, 0.7503671368921594, 0.6262403847690501, 0.06294837870969494, 0.1827479710772315, 0.6130473256089501, 0.09558436414758531, 0.7229020607734424, 0.0521625003353936, 9.999999999998899e-05, 0.0045417273749306375, 0.04082898700384663, 0.038105466874249205, 0.011702019041306078, 0.10163264777775616, 0.02420193283076677, 0.10259182521404053, 0.19229379340632313, 0.06704031396221344, 0.16039545270076538, 0.13795732469402633, 0.15247150116166563, 0.1291635765839677, 0.15723684635692803, 0.0729987790843436, 0.15869104840723725, 0.18603173385566318, 0.09819792655437576, 0.13831856521895647, 0.19632995641561735, 0.09327372641653242, 0.13629441624996763, 0.27404628996378166, 0.08706812580490753, 0.16088444991010276, 0.042451519767365276, 0.01506137462115642, 0.08873657102252042, 0.15080591185645953, 0.026133085121897826, 0.06530121796308319, 0.21537656444641018, 9.999999999998899e-05, 0.06895080563679934, 0.24071703288451352, 0.12680763144743357, 0.1995088063539855, 0.22012531601555907, 0.16445403686111637, 0.15574271759162273, 0.2652809473298756, 0.17084795447630152, 0.17554779326067105, 0.1820812710047779, 0.1903410775367107, 0.19052035969786707, 0.20459724551329672, 0.2252485941319886, 0.1816238407530706, 0.20115692486911407, 9.999999999998899e-05, 9.999999999998899e-05, 0.18990001551555236, 0.14091305561995615, 0.11310381916179502, 0.09534536188030629, 0.11769457834699437, 0.06797726189754971, 0.07977562009819472, 0.06026375701093312, 0.1569522701674172, 0.10906921542511427, 0.21363619473723705, 0.05457605751189798, 0.16304500619177997, 0.06950988970112704, 0.11023380626752333, 0.09499899937530643, 0.1871909610514162, 0.18473646788954778, 0.17890361495072593, 0.14829104352400757, 0.17702049384606966, 0.20516678870808513, 0.10674202807060262, 0.17993799324427873, 0.1629677441472771, 0.11850212542269112, 0.19831520193321217, 0.06303090750613738, 0.037371261197822636, 0.038821955078599646, 0.07322652917450723, 0.009734072061499677, 0.07145272941242442, 0.08585728756891964, 0.05051005345408488, 0.047344492178373554]}, "mutation_prompt": null}
{"id": "572d12cf-df1b-4e9a-83e6-d7d44f020a08", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        # Initialize particle positions and velocities\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n\n        # Initialize global best position and value\n        global_best_position = np.random.uniform(-5.0, 5.0, self.dim)\n        global_best_value = np.inf\n\n        # Initialize SA temperature\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                # Update particle velocity\n                r1, r2 = np.random.rand(), np.random.rand()\n                swarm_velocity[i] = 0.3 * swarm_velocity[i] + self.c1 * r1 * (global_best_position - swarm_position[i]) + self.c2 * r2 * (global_best_position - swarm_position[i])\n\n                # Update particle position\n                swarm_position[i] = within_bounds(swarm_position[i] + swarm_velocity[i])\n\n                # Calculate fitness value\n                fitness_value = objective_function(swarm_position[i])\n\n                # Update global best\n                if fitness_value < global_best_value:\n                    global_best_value = fitness_value\n                    global_best_position = np.copy(swarm_position[i])\n\n                # Simulated Annealing\n                if np.random.rand() < np.exp((global_best_value - fitness_value) / temperature):\n                    swarm_position[i] = within_bounds(swarm_position[i])\n\n            # Cool down temperature\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to balance exploration and exploitation for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "08e65585-6e1a-4f94-a0bf-6c3d101839ea", "metadata": {"aucs": [0.9241527773705259, 0.1266088647309931, 0.7934551230739131, 0.14119754118636252, 0.008714420338430506, 0.9227950256020047, 0.837338584416201, 0.14981196946987652, 0.05678408781261968, 0.04107421616137075, 9.999999999998899e-05, 9.999999999998899e-05, 0.7826121254389469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06539870461089836, 9.999999999998899e-05, 0.027261646459248334, 0.053512247008518865, 0.006253344547261119, 0.037563974638465836, 0.11825552854843902, 0.024478279863362706, 0.05720606204688394, 0.03944483407281363, 9.999999999998899e-05, 0.0024435366713049245, 0.03886400510961252, 0.022957920363468887, 0.0058835131684249475, 0.06872381945304973, 9.999999999998899e-05, 0.015228791586676338, 0.03815635425254038, 0.09974401655865328, 0.055680573420932356, 0.05570729439633182, 0.03801008477814816, 0.9963790486374636, 0.07507876234447464, 0.04990951227461482, 0.9992245352437383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2154426672765829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05157449290495575, 0.1345837890987297, 0.05559632151195437, 0.20954436960075395, 0.032002881759167434, 9.999999999998899e-05, 9.999999999998899e-05, 0.05404065607714059, 0.08537075572187569, 0.03912223296746631, 9.999999999998899e-05, 9.999999999998899e-05, 0.12362794286251333, 0.10692855532603984, 0.10751206498211507, 9.999999999998899e-05, 9.999999999998899e-05, 0.13525144448700777, 0.2611293191159735, 0.13793555621063458, 0.379217085053585, 0.269324738291298, 0.13538828044602502, 0.5020601155166597, 0.136220335976037, 0.13467485409580493, 9.999999999998899e-05, 0.13298065385147018, 0.0963292326348465, 9.999999999998899e-05, 9.999999999998899e-05, 0.02162980404234427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003887798460415648, 0.024601374105269525, 9.999999999998899e-05, 0.030310447792760153, 9.999999999998899e-05, 9.999999999998899e-05, 0.01375390476670546, 0.01338893075768588, 0.013307821742002846, 9.999999999998899e-05, 0.053253161026460605, 0.17697896307208794, 9.999999999998899e-05, 9.999999999998899e-05, 0.08264835776411561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0777303336864501, 0.20166674269995588, 9.999999999998899e-05, 0.16433633662393443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7028061237931049, 0.8111323293694177, 0.7503671368921594, 0.6262403847690501, 0.06294837870969494, 0.1827479710772315, 0.6130473256089501, 0.09558436414758531, 0.7229020607734424, 0.0521625003353936, 9.999999999998899e-05, 0.0045417273749306375, 0.04082898700384663, 0.038105466874249205, 0.011702019041306078, 0.10163264777775616, 0.02420193283076677, 0.10259182521404053, 0.19229379340632313, 0.06704031396221344, 0.16039545270076538, 0.13795732469402633, 0.15247150116166563, 0.1291635765839677, 0.15723684635692803, 0.0729987790843436, 0.15869104840723725, 0.18603173385566318, 0.09819792655437576, 0.13831856521895647, 0.19632995641561735, 0.09327372641653242, 0.13629441624996763, 0.27404628996378166, 0.08706812580490753, 0.16088444991010276, 0.042451519767365276, 0.01506137462115642, 0.08873657102252042, 0.15080591185645953, 0.026133085121897826, 0.06530121796308319, 0.21537656444641018, 9.999999999998899e-05, 0.06895080563679934, 0.24071703288451352, 0.12680763144743357, 0.1995088063539855, 0.22012531601555907, 0.16445403686111637, 0.15574271759162273, 0.2652809473298756, 0.17084795447630152, 0.17554779326067105, 0.1820812710047779, 0.1903410775367107, 0.19052035969786707, 0.20459724551329672, 0.2252485941319886, 0.1816238407530706, 0.20115692486911407, 9.999999999998899e-05, 9.999999999998899e-05, 0.18990001551555236, 0.14091305561995615, 0.11310381916179502, 0.09534536188030629, 0.11769457834699437, 0.06797726189754971, 0.07977562009819472, 0.06026375701093312, 0.1569522701674172, 0.10906921542511427, 0.21363619473723705, 0.05457605751189798, 0.16304500619177997, 0.06950988970112704, 0.11023380626752333, 0.09499899937530643, 0.1871909610514162, 0.18473646788954778, 0.17890361495072593, 0.14829104352400757, 0.17702049384606966, 0.20516678870808513, 0.10674202807060262, 0.17993799324427873, 0.1629677441472771, 0.11850212542269112, 0.19831520193321217, 0.06303090750613738, 0.037371261197822636, 0.038821955078599646, 0.07322652917450723, 0.009734072061499677, 0.07145272941242442, 0.08585728756891964, 0.05051005345408488, 0.047344492178373554]}, "mutation_prompt": null}
{"id": "9666f70a-5558-4c21-9df2-974a7fa11625", "solution": "import numpy as np\n\nclass Improved_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n        self.lb = -5.0\n        self.ub = 5.0\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, self.lb, self.ub)\n\n        # Initialize particle positions and velocities\n        swarm_position = np.random.uniform(self.lb, self.ub, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n\n        # Initialize global best position and value\n        global_best_position = np.random.uniform(self.lb, self.ub, self.dim)\n        global_best_value = np.inf\n\n        # Initialize SA temperature\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                # Update particle velocity\n                r1, r2 = np.random.rand(), np.random.rand()\n                cognitive_component = self.c1 * r1 * (global_best_position - swarm_position[i])\n                social_component = self.c2 * r2 * (global_best_position - swarm_position[i])\n                swarm_velocity[i] = 0.3 * swarm_velocity[i] + cognitive_component + social_component\n\n                # Update particle position\n                swarm_position[i] = within_bounds(swarm_position[i] + swarm_velocity[i])\n\n                # Calculate fitness value\n                fitness_value = objective_function(swarm_position[i])\n\n                # Update global best\n                if fitness_value < global_best_value:\n                    global_best_value = fitness_value\n                    global_best_position = np.copy(swarm_position[i])\n\n                # Simulated Annealing\n                if np.random.rand() < np.exp((global_best_value - fitness_value) / temperature):\n                    swarm_position[i] = within_bounds(swarm_position[i])\n\n            # Cool down temperature\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Improved_PSO_SA_Optimizer", "description": "Improved PSO_SA_Optimizer algorithm by streamlining the velocity update calculation and optimizing the loop structure.", "configspace": "", "generation": 18, "fitness": 0.12808350794351048, "feedback": "The algorithm Improved_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "08e65585-6e1a-4f94-a0bf-6c3d101839ea", "metadata": {"aucs": [0.9241527773705259, 0.1266088647309931, 0.7934551230739131, 0.14119754118636252, 0.008714420338430506, 0.9227950256020047, 0.837338584416201, 0.14981196946987652, 0.05678408781261968, 0.04107421616137075, 9.999999999998899e-05, 9.999999999998899e-05, 0.7826121254389469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06539870461089836, 9.999999999998899e-05, 0.027261646459248334, 0.053512247008518865, 0.006253344547261119, 0.037563974638465836, 0.11825552854843902, 0.024478279863362706, 0.05720606204688394, 0.03944483407281363, 9.999999999998899e-05, 0.0024435366713049245, 0.03886400510961252, 0.022957920363468887, 0.0058835131684249475, 0.06872381945304973, 9.999999999998899e-05, 0.015228791586676338, 0.03815635425254038, 0.09974401655865328, 0.055680573420932356, 0.05570729439633182, 0.03801008477814816, 0.9963790486374636, 0.07507876234447464, 0.04990951227461482, 0.9992245352437383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2154426672765829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05157449290495575, 0.1345837890987297, 0.05559632151195437, 0.20954436960075395, 0.032002881759167434, 9.999999999998899e-05, 9.999999999998899e-05, 0.05404065607714059, 0.08537075572187569, 0.03912223296746631, 9.999999999998899e-05, 9.999999999998899e-05, 0.12362794286251333, 0.10692855532603984, 0.10751206498211507, 9.999999999998899e-05, 9.999999999998899e-05, 0.13525144448700777, 0.2611293191159735, 0.13793555621063458, 0.379217085053585, 0.269324738291298, 0.13538828044602502, 0.5020601155166597, 0.136220335976037, 0.13467485409580493, 9.999999999998899e-05, 0.13298065385147018, 0.0963292326348465, 9.999999999998899e-05, 9.999999999998899e-05, 0.02162980404234427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003887798460415648, 0.024601374105269525, 9.999999999998899e-05, 0.030310447792760153, 9.999999999998899e-05, 9.999999999998899e-05, 0.01375390476670546, 0.01338893075768588, 0.013307821742002846, 9.999999999998899e-05, 0.053253161026460605, 0.17697896307208794, 9.999999999998899e-05, 9.999999999998899e-05, 0.08264835776411561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0777303336864501, 0.20166674269995588, 9.999999999998899e-05, 0.16433633662393443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7028061237931049, 0.8111323293694177, 0.7503671368921594, 0.6262403847690501, 0.06294837870969494, 0.1827479710772315, 0.6130473256089501, 0.09558436414758531, 0.7229020607734424, 0.0521625003353936, 9.999999999998899e-05, 0.0045417273749306375, 0.04082898700384663, 0.038105466874249205, 0.011702019041306078, 0.10163264777775616, 0.02420193283076677, 0.10259182521404053, 0.19229379340632313, 0.06704031396221344, 0.16039545270076538, 0.13795732469402633, 0.15247150116166563, 0.1291635765839677, 0.15723684635692803, 0.0729987790843436, 0.15869104840723725, 0.18603173385566318, 0.09819792655437576, 0.13831856521895647, 0.19632995641561735, 0.09327372641653242, 0.13629441624996763, 0.27404628996378166, 0.08706812580490753, 0.16088444991010276, 0.042451519767365276, 0.01506137462115642, 0.08873657102252042, 0.15080591185645953, 0.026133085121897826, 0.06530121796308319, 0.21537656444641018, 9.999999999998899e-05, 0.06895080563679934, 0.24071703288451352, 0.12680763144743357, 0.1995088063539855, 0.22012531601555907, 0.16445403686111637, 0.15574271759162273, 0.2652809473298756, 0.17084795447630152, 0.17554779326067105, 0.1820812710047779, 0.1903410775367107, 0.19052035969786707, 0.20459724551329672, 0.2252485941319886, 0.1816238407530706, 0.20115692486911407, 9.999999999998899e-05, 9.999999999998899e-05, 0.18990001551555236, 0.14091305561995615, 0.11310381916179502, 0.09534536188030629, 0.11769457834699437, 0.06797726189754971, 0.07977562009819472, 0.06026375701093312, 0.1569522701674172, 0.10906921542511427, 0.21363619473723705, 0.05457605751189798, 0.16304500619177997, 0.06950988970112704, 0.11023380626752333, 0.09499899937530643, 0.1871909610514162, 0.18473646788954778, 0.17890361495072593, 0.14829104352400757, 0.17702049384606966, 0.20516678870808513, 0.10674202807060262, 0.17993799324427873, 0.1629677441472771, 0.11850212542269112, 0.19831520193321217, 0.06303090750613738, 0.037371261197822636, 0.038821955078599646, 0.07322652917450723, 0.009734072061499677, 0.07145272941242442, 0.08585728756891964, 0.05051005345408488, 0.047344492178373554]}, "mutation_prompt": null}
{"id": "47fe734a-5fba-42e3-9a72-f9060a7e06cc", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        # Initialize particle positions and velocities\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n\n        # Initialize global best position and value\n        global_best_position = np.random.uniform(-5.0, 5.0, self.dim)\n        global_best_value = np.inf\n\n        # Initialize SA temperature\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                # Update particle velocity\n                r1, r2 = np.random.rand(), np.random.rand()\n                swarm_velocity[i] = 0.3 * swarm_velocity[i] + self.c1 * r1 * (global_best_position - swarm_position[i]) + self.c2 * r2 * (global_best_position - swarm_position[i])\n\n                # Update particle position\n                swarm_position[i] = within_bounds(swarm_position[i] + swarm_velocity[i])\n\n                # Calculate fitness value\n                fitness_value = objective_function(swarm_position[i])\n\n                # Update global best\n                if fitness_value < global_best_value:\n                    global_best_value = fitness_value\n                    global_best_position = np.copy(swarm_position[i])\n\n                # Simulated Annealing\n                if np.random.rand() < np.exp((global_best_value - fitness_value) / temperature):\n                    swarm_position[i] = within_bounds(swarm_position[i])\n\n            # Cool down temperature\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to balance exploration and exploitation for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "08e65585-6e1a-4f94-a0bf-6c3d101839ea", "metadata": {"aucs": [0.9241527773705259, 0.1266088647309931, 0.7934551230739131, 0.14119754118636252, 0.008714420338430506, 0.9227950256020047, 0.837338584416201, 0.14981196946987652, 0.05678408781261968, 0.04107421616137075, 9.999999999998899e-05, 9.999999999998899e-05, 0.7826121254389469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06539870461089836, 9.999999999998899e-05, 0.027261646459248334, 0.053512247008518865, 0.006253344547261119, 0.037563974638465836, 0.11825552854843902, 0.024478279863362706, 0.05720606204688394, 0.03944483407281363, 9.999999999998899e-05, 0.0024435366713049245, 0.03886400510961252, 0.022957920363468887, 0.0058835131684249475, 0.06872381945304973, 9.999999999998899e-05, 0.015228791586676338, 0.03815635425254038, 0.09974401655865328, 0.055680573420932356, 0.05570729439633182, 0.03801008477814816, 0.9963790486374636, 0.07507876234447464, 0.04990951227461482, 0.9992245352437383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2154426672765829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05157449290495575, 0.1345837890987297, 0.05559632151195437, 0.20954436960075395, 0.032002881759167434, 9.999999999998899e-05, 9.999999999998899e-05, 0.05404065607714059, 0.08537075572187569, 0.03912223296746631, 9.999999999998899e-05, 9.999999999998899e-05, 0.12362794286251333, 0.10692855532603984, 0.10751206498211507, 9.999999999998899e-05, 9.999999999998899e-05, 0.13525144448700777, 0.2611293191159735, 0.13793555621063458, 0.379217085053585, 0.269324738291298, 0.13538828044602502, 0.5020601155166597, 0.136220335976037, 0.13467485409580493, 9.999999999998899e-05, 0.13298065385147018, 0.0963292326348465, 9.999999999998899e-05, 9.999999999998899e-05, 0.02162980404234427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003887798460415648, 0.024601374105269525, 9.999999999998899e-05, 0.030310447792760153, 9.999999999998899e-05, 9.999999999998899e-05, 0.01375390476670546, 0.01338893075768588, 0.013307821742002846, 9.999999999998899e-05, 0.053253161026460605, 0.17697896307208794, 9.999999999998899e-05, 9.999999999998899e-05, 0.08264835776411561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0777303336864501, 0.20166674269995588, 9.999999999998899e-05, 0.16433633662393443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7028061237931049, 0.8111323293694177, 0.7503671368921594, 0.6262403847690501, 0.06294837870969494, 0.1827479710772315, 0.6130473256089501, 0.09558436414758531, 0.7229020607734424, 0.0521625003353936, 9.999999999998899e-05, 0.0045417273749306375, 0.04082898700384663, 0.038105466874249205, 0.011702019041306078, 0.10163264777775616, 0.02420193283076677, 0.10259182521404053, 0.19229379340632313, 0.06704031396221344, 0.16039545270076538, 0.13795732469402633, 0.15247150116166563, 0.1291635765839677, 0.15723684635692803, 0.0729987790843436, 0.15869104840723725, 0.18603173385566318, 0.09819792655437576, 0.13831856521895647, 0.19632995641561735, 0.09327372641653242, 0.13629441624996763, 0.27404628996378166, 0.08706812580490753, 0.16088444991010276, 0.042451519767365276, 0.01506137462115642, 0.08873657102252042, 0.15080591185645953, 0.026133085121897826, 0.06530121796308319, 0.21537656444641018, 9.999999999998899e-05, 0.06895080563679934, 0.24071703288451352, 0.12680763144743357, 0.1995088063539855, 0.22012531601555907, 0.16445403686111637, 0.15574271759162273, 0.2652809473298756, 0.17084795447630152, 0.17554779326067105, 0.1820812710047779, 0.1903410775367107, 0.19052035969786707, 0.20459724551329672, 0.2252485941319886, 0.1816238407530706, 0.20115692486911407, 9.999999999998899e-05, 9.999999999998899e-05, 0.18990001551555236, 0.14091305561995615, 0.11310381916179502, 0.09534536188030629, 0.11769457834699437, 0.06797726189754971, 0.07977562009819472, 0.06026375701093312, 0.1569522701674172, 0.10906921542511427, 0.21363619473723705, 0.05457605751189798, 0.16304500619177997, 0.06950988970112704, 0.11023380626752333, 0.09499899937530643, 0.1871909610514162, 0.18473646788954778, 0.17890361495072593, 0.14829104352400757, 0.17702049384606966, 0.20516678870808513, 0.10674202807060262, 0.17993799324427873, 0.1629677441472771, 0.11850212542269112, 0.19831520193321217, 0.06303090750613738, 0.037371261197822636, 0.038821955078599646, 0.07322652917450723, 0.009734072061499677, 0.07145272941242442, 0.08585728756891964, 0.05051005345408488, 0.047344492178373554]}, "mutation_prompt": null}
{"id": "6f7c273a-f1ff-4bbf-928a-2dcc30e1754e", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        # Initialize particle positions and velocities\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n\n        # Initialize global best position and value\n        global_best_position = np.random.uniform(-5.0, 5.0, self.dim)\n        global_best_value = np.inf\n\n        # Initialize SA temperature\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                # Update particle velocity\n                r1, r2 = np.random.rand(), np.random.rand()\n                swarm_velocity[i] = 0.3 * swarm_velocity[i] + self.c1 * r1 * (global_best_position - swarm_position[i]) + self.c2 * r2 * (global_best_position - swarm_position[i])\n\n                # Update particle position\n                swarm_position[i] = within_bounds(swarm_position[i] + swarm_velocity[i])\n\n                # Calculate fitness value\n                fitness_value = objective_function(swarm_position[i])\n\n                # Update global best\n                if fitness_value < global_best_value:\n                    global_best_value = fitness_value\n                    global_best_position = np.copy(swarm_position[i])\n\n                # Simulated Annealing\n                if np.random.rand() < np.exp((global_best_value - fitness_value) / temperature):\n                    swarm_position[i] = within_bounds(swarm_position[i])\n\n            # Cool down temperature\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to balance exploration and exploitation for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "08e65585-6e1a-4f94-a0bf-6c3d101839ea", "metadata": {"aucs": [0.9241527773705259, 0.1266088647309931, 0.7934551230739131, 0.14119754118636252, 0.008714420338430506, 0.9227950256020047, 0.837338584416201, 0.14981196946987652, 0.05678408781261968, 0.04107421616137075, 9.999999999998899e-05, 9.999999999998899e-05, 0.7826121254389469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06539870461089836, 9.999999999998899e-05, 0.027261646459248334, 0.053512247008518865, 0.006253344547261119, 0.037563974638465836, 0.11825552854843902, 0.024478279863362706, 0.05720606204688394, 0.03944483407281363, 9.999999999998899e-05, 0.0024435366713049245, 0.03886400510961252, 0.022957920363468887, 0.0058835131684249475, 0.06872381945304973, 9.999999999998899e-05, 0.015228791586676338, 0.03815635425254038, 0.09974401655865328, 0.055680573420932356, 0.05570729439633182, 0.03801008477814816, 0.9963790486374636, 0.07507876234447464, 0.04990951227461482, 0.9992245352437383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2154426672765829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05157449290495575, 0.1345837890987297, 0.05559632151195437, 0.20954436960075395, 0.032002881759167434, 9.999999999998899e-05, 9.999999999998899e-05, 0.05404065607714059, 0.08537075572187569, 0.03912223296746631, 9.999999999998899e-05, 9.999999999998899e-05, 0.12362794286251333, 0.10692855532603984, 0.10751206498211507, 9.999999999998899e-05, 9.999999999998899e-05, 0.13525144448700777, 0.2611293191159735, 0.13793555621063458, 0.379217085053585, 0.269324738291298, 0.13538828044602502, 0.5020601155166597, 0.136220335976037, 0.13467485409580493, 9.999999999998899e-05, 0.13298065385147018, 0.0963292326348465, 9.999999999998899e-05, 9.999999999998899e-05, 0.02162980404234427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003887798460415648, 0.024601374105269525, 9.999999999998899e-05, 0.030310447792760153, 9.999999999998899e-05, 9.999999999998899e-05, 0.01375390476670546, 0.01338893075768588, 0.013307821742002846, 9.999999999998899e-05, 0.053253161026460605, 0.17697896307208794, 9.999999999998899e-05, 9.999999999998899e-05, 0.08264835776411561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0777303336864501, 0.20166674269995588, 9.999999999998899e-05, 0.16433633662393443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7028061237931049, 0.8111323293694177, 0.7503671368921594, 0.6262403847690501, 0.06294837870969494, 0.1827479710772315, 0.6130473256089501, 0.09558436414758531, 0.7229020607734424, 0.0521625003353936, 9.999999999998899e-05, 0.0045417273749306375, 0.04082898700384663, 0.038105466874249205, 0.011702019041306078, 0.10163264777775616, 0.02420193283076677, 0.10259182521404053, 0.19229379340632313, 0.06704031396221344, 0.16039545270076538, 0.13795732469402633, 0.15247150116166563, 0.1291635765839677, 0.15723684635692803, 0.0729987790843436, 0.15869104840723725, 0.18603173385566318, 0.09819792655437576, 0.13831856521895647, 0.19632995641561735, 0.09327372641653242, 0.13629441624996763, 0.27404628996378166, 0.08706812580490753, 0.16088444991010276, 0.042451519767365276, 0.01506137462115642, 0.08873657102252042, 0.15080591185645953, 0.026133085121897826, 0.06530121796308319, 0.21537656444641018, 9.999999999998899e-05, 0.06895080563679934, 0.24071703288451352, 0.12680763144743357, 0.1995088063539855, 0.22012531601555907, 0.16445403686111637, 0.15574271759162273, 0.2652809473298756, 0.17084795447630152, 0.17554779326067105, 0.1820812710047779, 0.1903410775367107, 0.19052035969786707, 0.20459724551329672, 0.2252485941319886, 0.1816238407530706, 0.20115692486911407, 9.999999999998899e-05, 9.999999999998899e-05, 0.18990001551555236, 0.14091305561995615, 0.11310381916179502, 0.09534536188030629, 0.11769457834699437, 0.06797726189754971, 0.07977562009819472, 0.06026375701093312, 0.1569522701674172, 0.10906921542511427, 0.21363619473723705, 0.05457605751189798, 0.16304500619177997, 0.06950988970112704, 0.11023380626752333, 0.09499899937530643, 0.1871909610514162, 0.18473646788954778, 0.17890361495072593, 0.14829104352400757, 0.17702049384606966, 0.20516678870808513, 0.10674202807060262, 0.17993799324427873, 0.1629677441472771, 0.11850212542269112, 0.19831520193321217, 0.06303090750613738, 0.037371261197822636, 0.038821955078599646, 0.07322652917450723, 0.009734072061499677, 0.07145272941242442, 0.08585728756891964, 0.05051005345408488, 0.047344492178373554]}, "mutation_prompt": null}
{"id": "72b5a309-fac1-47c8-8722-605a7c70bc2d", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget, self.dim, self.swarm_size, self.max_iter, self.c1, self.c2, self.initial_temp, self.cooling_rate = budget, dim, swarm_size, max_iter, c1, c2, initial_temp, cooling_rate\n\n    def __call__(self, func):\n        def obj_func(x):\n            return func(x)\n\n        clip_bounds = lambda x: np.clip(x, -5.0, 5.0)\n\n        swarm_pos, swarm_vel = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim)), np.zeros((self.swarm_size, self.dim))\n        g_best_pos, g_best_val = np.random.uniform(-5.0, 5.0, self.dim), np.inf\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                swarm_vel[i] = 0.3 * swarm_vel[i] + self.c1 * r1 * (g_best_pos - swarm_pos[i]) + self.c2 * r2 * (g_best_pos - swarm_pos[i])\n                swarm_pos[i] = clip_bounds(swarm_pos[i] + swarm_vel[i])\n                fitness_val = obj_func(swarm_pos[i])\n                if fitness_val < g_best_val:\n                    g_best_val, g_best_pos = fitness_val, np.copy(swarm_pos[i])\n                if np.random.rand() < np.exp((g_best_val - fitness_val) / temperature):\n                    swarm_pos[i] = clip_bounds(swarm_pos[i])\n            temperature *= self.cooling_rate\n\n        return g_best_pos", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by optimizing memory usage and streamlining velocity updates and position calculations.", "configspace": "", "generation": 21, "fitness": 0.12808350794351048, "feedback": "The algorithm Enhanced_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "08e65585-6e1a-4f94-a0bf-6c3d101839ea", "metadata": {"aucs": [0.9241527773705259, 0.1266088647309931, 0.7934551230739131, 0.14119754118636252, 0.008714420338430506, 0.9227950256020047, 0.837338584416201, 0.14981196946987652, 0.05678408781261968, 0.04107421616137075, 9.999999999998899e-05, 9.999999999998899e-05, 0.7826121254389469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06539870461089836, 9.999999999998899e-05, 0.027261646459248334, 0.053512247008518865, 0.006253344547261119, 0.037563974638465836, 0.11825552854843902, 0.024478279863362706, 0.05720606204688394, 0.03944483407281363, 9.999999999998899e-05, 0.0024435366713049245, 0.03886400510961252, 0.022957920363468887, 0.0058835131684249475, 0.06872381945304973, 9.999999999998899e-05, 0.015228791586676338, 0.03815635425254038, 0.09974401655865328, 0.055680573420932356, 0.05570729439633182, 0.03801008477814816, 0.9963790486374636, 0.07507876234447464, 0.04990951227461482, 0.9992245352437383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2154426672765829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05157449290495575, 0.1345837890987297, 0.05559632151195437, 0.20954436960075395, 0.032002881759167434, 9.999999999998899e-05, 9.999999999998899e-05, 0.05404065607714059, 0.08537075572187569, 0.03912223296746631, 9.999999999998899e-05, 9.999999999998899e-05, 0.12362794286251333, 0.10692855532603984, 0.10751206498211507, 9.999999999998899e-05, 9.999999999998899e-05, 0.13525144448700777, 0.2611293191159735, 0.13793555621063458, 0.379217085053585, 0.269324738291298, 0.13538828044602502, 0.5020601155166597, 0.136220335976037, 0.13467485409580493, 9.999999999998899e-05, 0.13298065385147018, 0.0963292326348465, 9.999999999998899e-05, 9.999999999998899e-05, 0.02162980404234427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003887798460415648, 0.024601374105269525, 9.999999999998899e-05, 0.030310447792760153, 9.999999999998899e-05, 9.999999999998899e-05, 0.01375390476670546, 0.01338893075768588, 0.013307821742002846, 9.999999999998899e-05, 0.053253161026460605, 0.17697896307208794, 9.999999999998899e-05, 9.999999999998899e-05, 0.08264835776411561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0777303336864501, 0.20166674269995588, 9.999999999998899e-05, 0.16433633662393443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7028061237931049, 0.8111323293694177, 0.7503671368921594, 0.6262403847690501, 0.06294837870969494, 0.1827479710772315, 0.6130473256089501, 0.09558436414758531, 0.7229020607734424, 0.0521625003353936, 9.999999999998899e-05, 0.0045417273749306375, 0.04082898700384663, 0.038105466874249205, 0.011702019041306078, 0.10163264777775616, 0.02420193283076677, 0.10259182521404053, 0.19229379340632313, 0.06704031396221344, 0.16039545270076538, 0.13795732469402633, 0.15247150116166563, 0.1291635765839677, 0.15723684635692803, 0.0729987790843436, 0.15869104840723725, 0.18603173385566318, 0.09819792655437576, 0.13831856521895647, 0.19632995641561735, 0.09327372641653242, 0.13629441624996763, 0.27404628996378166, 0.08706812580490753, 0.16088444991010276, 0.042451519767365276, 0.01506137462115642, 0.08873657102252042, 0.15080591185645953, 0.026133085121897826, 0.06530121796308319, 0.21537656444641018, 9.999999999998899e-05, 0.06895080563679934, 0.24071703288451352, 0.12680763144743357, 0.1995088063539855, 0.22012531601555907, 0.16445403686111637, 0.15574271759162273, 0.2652809473298756, 0.17084795447630152, 0.17554779326067105, 0.1820812710047779, 0.1903410775367107, 0.19052035969786707, 0.20459724551329672, 0.2252485941319886, 0.1816238407530706, 0.20115692486911407, 9.999999999998899e-05, 9.999999999998899e-05, 0.18990001551555236, 0.14091305561995615, 0.11310381916179502, 0.09534536188030629, 0.11769457834699437, 0.06797726189754971, 0.07977562009819472, 0.06026375701093312, 0.1569522701674172, 0.10906921542511427, 0.21363619473723705, 0.05457605751189798, 0.16304500619177997, 0.06950988970112704, 0.11023380626752333, 0.09499899937530643, 0.1871909610514162, 0.18473646788954778, 0.17890361495072593, 0.14829104352400757, 0.17702049384606966, 0.20516678870808513, 0.10674202807060262, 0.17993799324427873, 0.1629677441472771, 0.11850212542269112, 0.19831520193321217, 0.06303090750613738, 0.037371261197822636, 0.038821955078599646, 0.07322652917450723, 0.009734072061499677, 0.07145272941242442, 0.08585728756891964, 0.05051005345408488, 0.047344492178373554]}, "mutation_prompt": null}
{"id": "1fcd535f-32a9-4641-a541-c3fe461f175e", "solution": "import numpy as np\n\nclass Optimized_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget, self.dim, self.swarm_size, self.max_iter, self.c1, self.c2, self.initial_temp, self.cooling_rate = budget, dim, swarm_size, max_iter, c1, c2, initial_temp, cooling_rate\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = np.random.uniform(-5.0, 5.0, self.dim)\n        global_best_value = np.inf\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                swarm_velocity[i] = 0.3 * swarm_velocity[i] + self.c1 * r1 * (global_best_position - swarm_position[i]) + self.c2 * r2 * (global_best_position - swarm_position[i])\n                swarm_position[i] = within_bounds(swarm_position[i] + swarm_velocity[i])\n                fitness_value = objective_function(swarm_position[i])\n\n                if fitness_value < global_best_value:\n                    global_best_value, global_best_position = fitness_value, np.copy(swarm_position[i])\n\n                if np.random.rand() < np.exp((global_best_value - fitness_value) / temperature):\n                    swarm_position[i] = within_bounds(swarm_position[i])\n\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Optimized_PSO_SA_Optimizer", "description": "Optimized version of PSO_SA_Optimizer with streamlined control flow and improved efficiency.", "configspace": "", "generation": 22, "fitness": 0.12808350794351048, "feedback": "The algorithm Optimized_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "08e65585-6e1a-4f94-a0bf-6c3d101839ea", "metadata": {"aucs": [0.9241527773705259, 0.1266088647309931, 0.7934551230739131, 0.14119754118636252, 0.008714420338430506, 0.9227950256020047, 0.837338584416201, 0.14981196946987652, 0.05678408781261968, 0.04107421616137075, 9.999999999998899e-05, 9.999999999998899e-05, 0.7826121254389469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06539870461089836, 9.999999999998899e-05, 0.027261646459248334, 0.053512247008518865, 0.006253344547261119, 0.037563974638465836, 0.11825552854843902, 0.024478279863362706, 0.05720606204688394, 0.03944483407281363, 9.999999999998899e-05, 0.0024435366713049245, 0.03886400510961252, 0.022957920363468887, 0.0058835131684249475, 0.06872381945304973, 9.999999999998899e-05, 0.015228791586676338, 0.03815635425254038, 0.09974401655865328, 0.055680573420932356, 0.05570729439633182, 0.03801008477814816, 0.9963790486374636, 0.07507876234447464, 0.04990951227461482, 0.9992245352437383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2154426672765829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05157449290495575, 0.1345837890987297, 0.05559632151195437, 0.20954436960075395, 0.032002881759167434, 9.999999999998899e-05, 9.999999999998899e-05, 0.05404065607714059, 0.08537075572187569, 0.03912223296746631, 9.999999999998899e-05, 9.999999999998899e-05, 0.12362794286251333, 0.10692855532603984, 0.10751206498211507, 9.999999999998899e-05, 9.999999999998899e-05, 0.13525144448700777, 0.2611293191159735, 0.13793555621063458, 0.379217085053585, 0.269324738291298, 0.13538828044602502, 0.5020601155166597, 0.136220335976037, 0.13467485409580493, 9.999999999998899e-05, 0.13298065385147018, 0.0963292326348465, 9.999999999998899e-05, 9.999999999998899e-05, 0.02162980404234427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003887798460415648, 0.024601374105269525, 9.999999999998899e-05, 0.030310447792760153, 9.999999999998899e-05, 9.999999999998899e-05, 0.01375390476670546, 0.01338893075768588, 0.013307821742002846, 9.999999999998899e-05, 0.053253161026460605, 0.17697896307208794, 9.999999999998899e-05, 9.999999999998899e-05, 0.08264835776411561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0777303336864501, 0.20166674269995588, 9.999999999998899e-05, 0.16433633662393443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7028061237931049, 0.8111323293694177, 0.7503671368921594, 0.6262403847690501, 0.06294837870969494, 0.1827479710772315, 0.6130473256089501, 0.09558436414758531, 0.7229020607734424, 0.0521625003353936, 9.999999999998899e-05, 0.0045417273749306375, 0.04082898700384663, 0.038105466874249205, 0.011702019041306078, 0.10163264777775616, 0.02420193283076677, 0.10259182521404053, 0.19229379340632313, 0.06704031396221344, 0.16039545270076538, 0.13795732469402633, 0.15247150116166563, 0.1291635765839677, 0.15723684635692803, 0.0729987790843436, 0.15869104840723725, 0.18603173385566318, 0.09819792655437576, 0.13831856521895647, 0.19632995641561735, 0.09327372641653242, 0.13629441624996763, 0.27404628996378166, 0.08706812580490753, 0.16088444991010276, 0.042451519767365276, 0.01506137462115642, 0.08873657102252042, 0.15080591185645953, 0.026133085121897826, 0.06530121796308319, 0.21537656444641018, 9.999999999998899e-05, 0.06895080563679934, 0.24071703288451352, 0.12680763144743357, 0.1995088063539855, 0.22012531601555907, 0.16445403686111637, 0.15574271759162273, 0.2652809473298756, 0.17084795447630152, 0.17554779326067105, 0.1820812710047779, 0.1903410775367107, 0.19052035969786707, 0.20459724551329672, 0.2252485941319886, 0.1816238407530706, 0.20115692486911407, 9.999999999998899e-05, 9.999999999998899e-05, 0.18990001551555236, 0.14091305561995615, 0.11310381916179502, 0.09534536188030629, 0.11769457834699437, 0.06797726189754971, 0.07977562009819472, 0.06026375701093312, 0.1569522701674172, 0.10906921542511427, 0.21363619473723705, 0.05457605751189798, 0.16304500619177997, 0.06950988970112704, 0.11023380626752333, 0.09499899937530643, 0.1871909610514162, 0.18473646788954778, 0.17890361495072593, 0.14829104352400757, 0.17702049384606966, 0.20516678870808513, 0.10674202807060262, 0.17993799324427873, 0.1629677441472771, 0.11850212542269112, 0.19831520193321217, 0.06303090750613738, 0.037371261197822636, 0.038821955078599646, 0.07322652917450723, 0.009734072061499677, 0.07145272941242442, 0.08585728756891964, 0.05051005345408488, 0.047344492178373554]}, "mutation_prompt": null}
{"id": "3b6e4fbe-4869-4208-bb66-766e4f25bbe4", "solution": "import numpy as np\n\nclass Improved_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget, self.dim, self.swarm_size, self.max_iter, self.c1, self.c2, self.initial_temp, self.cooling_rate = budget, dim, swarm_size, max_iter, c1, c2, initial_temp, cooling_rate\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = np.random.uniform(-5.0, 5.0, self.dim)\n        global_best_value = np.inf\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                swarm_velocity[i] = 0.3 * swarm_velocity[i] + self.c1 * r1 * (global_best_position - swarm_position[i]) + self.c2 * r2 * (global_best_position - swarm_position[i])\n                swarm_position[i] = within_bounds(swarm_position[i] + swarm_velocity[i])\n                fitness_value = objective_function(swarm_position[i])\n\n                if fitness_value < global_best_value:\n                    global_best_value, global_best_position = fitness_value, np.copy(swarm_position[i])\n\n                if np.random.rand() < np.exp((global_best_value - fitness_value) / temperature):\n                    swarm_position[i] = within_bounds(swarm_position[i])\n\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Improved_PSO_SA_Optimizer", "description": "Improved efficiency and readability by consolidating repeated calculations and utilizing numpy operations.", "configspace": "", "generation": 23, "fitness": 0.12808350794351048, "feedback": "The algorithm Improved_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "08e65585-6e1a-4f94-a0bf-6c3d101839ea", "metadata": {"aucs": [0.9241527773705259, 0.1266088647309931, 0.7934551230739131, 0.14119754118636252, 0.008714420338430506, 0.9227950256020047, 0.837338584416201, 0.14981196946987652, 0.05678408781261968, 0.04107421616137075, 9.999999999998899e-05, 9.999999999998899e-05, 0.7826121254389469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06539870461089836, 9.999999999998899e-05, 0.027261646459248334, 0.053512247008518865, 0.006253344547261119, 0.037563974638465836, 0.11825552854843902, 0.024478279863362706, 0.05720606204688394, 0.03944483407281363, 9.999999999998899e-05, 0.0024435366713049245, 0.03886400510961252, 0.022957920363468887, 0.0058835131684249475, 0.06872381945304973, 9.999999999998899e-05, 0.015228791586676338, 0.03815635425254038, 0.09974401655865328, 0.055680573420932356, 0.05570729439633182, 0.03801008477814816, 0.9963790486374636, 0.07507876234447464, 0.04990951227461482, 0.9992245352437383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2154426672765829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05157449290495575, 0.1345837890987297, 0.05559632151195437, 0.20954436960075395, 0.032002881759167434, 9.999999999998899e-05, 9.999999999998899e-05, 0.05404065607714059, 0.08537075572187569, 0.03912223296746631, 9.999999999998899e-05, 9.999999999998899e-05, 0.12362794286251333, 0.10692855532603984, 0.10751206498211507, 9.999999999998899e-05, 9.999999999998899e-05, 0.13525144448700777, 0.2611293191159735, 0.13793555621063458, 0.379217085053585, 0.269324738291298, 0.13538828044602502, 0.5020601155166597, 0.136220335976037, 0.13467485409580493, 9.999999999998899e-05, 0.13298065385147018, 0.0963292326348465, 9.999999999998899e-05, 9.999999999998899e-05, 0.02162980404234427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003887798460415648, 0.024601374105269525, 9.999999999998899e-05, 0.030310447792760153, 9.999999999998899e-05, 9.999999999998899e-05, 0.01375390476670546, 0.01338893075768588, 0.013307821742002846, 9.999999999998899e-05, 0.053253161026460605, 0.17697896307208794, 9.999999999998899e-05, 9.999999999998899e-05, 0.08264835776411561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0777303336864501, 0.20166674269995588, 9.999999999998899e-05, 0.16433633662393443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7028061237931049, 0.8111323293694177, 0.7503671368921594, 0.6262403847690501, 0.06294837870969494, 0.1827479710772315, 0.6130473256089501, 0.09558436414758531, 0.7229020607734424, 0.0521625003353936, 9.999999999998899e-05, 0.0045417273749306375, 0.04082898700384663, 0.038105466874249205, 0.011702019041306078, 0.10163264777775616, 0.02420193283076677, 0.10259182521404053, 0.19229379340632313, 0.06704031396221344, 0.16039545270076538, 0.13795732469402633, 0.15247150116166563, 0.1291635765839677, 0.15723684635692803, 0.0729987790843436, 0.15869104840723725, 0.18603173385566318, 0.09819792655437576, 0.13831856521895647, 0.19632995641561735, 0.09327372641653242, 0.13629441624996763, 0.27404628996378166, 0.08706812580490753, 0.16088444991010276, 0.042451519767365276, 0.01506137462115642, 0.08873657102252042, 0.15080591185645953, 0.026133085121897826, 0.06530121796308319, 0.21537656444641018, 9.999999999998899e-05, 0.06895080563679934, 0.24071703288451352, 0.12680763144743357, 0.1995088063539855, 0.22012531601555907, 0.16445403686111637, 0.15574271759162273, 0.2652809473298756, 0.17084795447630152, 0.17554779326067105, 0.1820812710047779, 0.1903410775367107, 0.19052035969786707, 0.20459724551329672, 0.2252485941319886, 0.1816238407530706, 0.20115692486911407, 9.999999999998899e-05, 9.999999999998899e-05, 0.18990001551555236, 0.14091305561995615, 0.11310381916179502, 0.09534536188030629, 0.11769457834699437, 0.06797726189754971, 0.07977562009819472, 0.06026375701093312, 0.1569522701674172, 0.10906921542511427, 0.21363619473723705, 0.05457605751189798, 0.16304500619177997, 0.06950988970112704, 0.11023380626752333, 0.09499899937530643, 0.1871909610514162, 0.18473646788954778, 0.17890361495072593, 0.14829104352400757, 0.17702049384606966, 0.20516678870808513, 0.10674202807060262, 0.17993799324427873, 0.1629677441472771, 0.11850212542269112, 0.19831520193321217, 0.06303090750613738, 0.037371261197822636, 0.038821955078599646, 0.07322652917450723, 0.009734072061499677, 0.07145272941242442, 0.08585728756891964, 0.05051005345408488, 0.047344492178373554]}, "mutation_prompt": null}
{"id": "f5e9713b-0293-4144-b146-3fbb0c7a61c9", "solution": "import numpy as np\n\nclass Improved_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget, self.dim, self.swarm_size, self.max_iter, self.c1, self.c2, self.initial_temp, self.cooling_rate = budget, dim, swarm_size, max_iter, c1, c2, initial_temp, cooling_rate\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        within_bounds = lambda x: np.clip(x, -5.0, 5.0)\n\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = np.random.uniform(-5.0, 5.0, self.dim)\n        global_best_value = np.inf\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(2)\n                swarm_velocity[i] = 0.3 * swarm_velocity[i] + self.c1 * r1 * (global_best_position - swarm_position[i]) + self.c2 * r2 * (global_best_position - swarm_position[i])\n                swarm_position[i] = within_bounds(swarm_position[i] + swarm_velocity[i])\n                fitness_value = objective_function(swarm_position[i])\n\n                if fitness_value < global_best_value:\n                    global_best_value, global_best_position = fitness_value, np.copy(swarm_position[i])\n\n                if np.random.rand() < np.exp((global_best_value - fitness_value) / temperature):\n                    swarm_position[i] = within_bounds(swarm_position[i])\n\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Improved_PSO_SA_Optimizer", "description": "Enhancing efficiency and readability by consolidating repeated operations and optimizing data structures in the PSO_SA_Optimizer algorithm.", "configspace": "", "generation": 24, "fitness": 0.12808350794351048, "feedback": "The algorithm Improved_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "08e65585-6e1a-4f94-a0bf-6c3d101839ea", "metadata": {"aucs": [0.9241527773705259, 0.1266088647309931, 0.7934551230739131, 0.14119754118636252, 0.008714420338430506, 0.9227950256020047, 0.837338584416201, 0.14981196946987652, 0.05678408781261968, 0.04107421616137075, 9.999999999998899e-05, 9.999999999998899e-05, 0.7826121254389469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06539870461089836, 9.999999999998899e-05, 0.027261646459248334, 0.053512247008518865, 0.006253344547261119, 0.037563974638465836, 0.11825552854843902, 0.024478279863362706, 0.05720606204688394, 0.03944483407281363, 9.999999999998899e-05, 0.0024435366713049245, 0.03886400510961252, 0.022957920363468887, 0.0058835131684249475, 0.06872381945304973, 9.999999999998899e-05, 0.015228791586676338, 0.03815635425254038, 0.09974401655865328, 0.055680573420932356, 0.05570729439633182, 0.03801008477814816, 0.9963790486374636, 0.07507876234447464, 0.04990951227461482, 0.9992245352437383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2154426672765829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05157449290495575, 0.1345837890987297, 0.05559632151195437, 0.20954436960075395, 0.032002881759167434, 9.999999999998899e-05, 9.999999999998899e-05, 0.05404065607714059, 0.08537075572187569, 0.03912223296746631, 9.999999999998899e-05, 9.999999999998899e-05, 0.12362794286251333, 0.10692855532603984, 0.10751206498211507, 9.999999999998899e-05, 9.999999999998899e-05, 0.13525144448700777, 0.2611293191159735, 0.13793555621063458, 0.379217085053585, 0.269324738291298, 0.13538828044602502, 0.5020601155166597, 0.136220335976037, 0.13467485409580493, 9.999999999998899e-05, 0.13298065385147018, 0.0963292326348465, 9.999999999998899e-05, 9.999999999998899e-05, 0.02162980404234427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003887798460415648, 0.024601374105269525, 9.999999999998899e-05, 0.030310447792760153, 9.999999999998899e-05, 9.999999999998899e-05, 0.01375390476670546, 0.01338893075768588, 0.013307821742002846, 9.999999999998899e-05, 0.053253161026460605, 0.17697896307208794, 9.999999999998899e-05, 9.999999999998899e-05, 0.08264835776411561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0777303336864501, 0.20166674269995588, 9.999999999998899e-05, 0.16433633662393443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7028061237931049, 0.8111323293694177, 0.7503671368921594, 0.6262403847690501, 0.06294837870969494, 0.1827479710772315, 0.6130473256089501, 0.09558436414758531, 0.7229020607734424, 0.0521625003353936, 9.999999999998899e-05, 0.0045417273749306375, 0.04082898700384663, 0.038105466874249205, 0.011702019041306078, 0.10163264777775616, 0.02420193283076677, 0.10259182521404053, 0.19229379340632313, 0.06704031396221344, 0.16039545270076538, 0.13795732469402633, 0.15247150116166563, 0.1291635765839677, 0.15723684635692803, 0.0729987790843436, 0.15869104840723725, 0.18603173385566318, 0.09819792655437576, 0.13831856521895647, 0.19632995641561735, 0.09327372641653242, 0.13629441624996763, 0.27404628996378166, 0.08706812580490753, 0.16088444991010276, 0.042451519767365276, 0.01506137462115642, 0.08873657102252042, 0.15080591185645953, 0.026133085121897826, 0.06530121796308319, 0.21537656444641018, 9.999999999998899e-05, 0.06895080563679934, 0.24071703288451352, 0.12680763144743357, 0.1995088063539855, 0.22012531601555907, 0.16445403686111637, 0.15574271759162273, 0.2652809473298756, 0.17084795447630152, 0.17554779326067105, 0.1820812710047779, 0.1903410775367107, 0.19052035969786707, 0.20459724551329672, 0.2252485941319886, 0.1816238407530706, 0.20115692486911407, 9.999999999998899e-05, 9.999999999998899e-05, 0.18990001551555236, 0.14091305561995615, 0.11310381916179502, 0.09534536188030629, 0.11769457834699437, 0.06797726189754971, 0.07977562009819472, 0.06026375701093312, 0.1569522701674172, 0.10906921542511427, 0.21363619473723705, 0.05457605751189798, 0.16304500619177997, 0.06950988970112704, 0.11023380626752333, 0.09499899937530643, 0.1871909610514162, 0.18473646788954778, 0.17890361495072593, 0.14829104352400757, 0.17702049384606966, 0.20516678870808513, 0.10674202807060262, 0.17993799324427873, 0.1629677441472771, 0.11850212542269112, 0.19831520193321217, 0.06303090750613738, 0.037371261197822636, 0.038821955078599646, 0.07322652917450723, 0.009734072061499677, 0.07145272941242442, 0.08585728756891964, 0.05051005345408488, 0.047344492178373554]}, "mutation_prompt": null}
{"id": "09de2063-33f0-4627-85f5-a947195ea2ee", "solution": "import numpy as np\n\nclass Improved_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget, self.dim, self.swarm_size, self.max_iter, self.c1, self.c2, self.initial_temp, self.cooling_rate = budget, dim, swarm_size, max_iter, c1, c2, initial_temp, cooling_rate\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        swarm_position, swarm_velocity = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim)), np.zeros((self.swarm_size, self.dim))\n        global_best_position, global_best_value = np.random.uniform(-5.0, 5.0, self.dim), np.inf\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                swarm_velocity[i] = 0.3 * swarm_velocity[i] + self.c1 * r1 * (global_best_position - swarm_position[i]) + self.c2 * r2 * (global_best_position - swarm_position[i])\n                swarm_position[i] = within_bounds(swarm_position[i] + swarm_velocity[i])\n\n                fitness_value = objective_function(swarm_position[i])\n\n                if fitness_value < global_best_value:\n                    global_best_value, global_best_position = fitness_value, np.copy(swarm_position[i])\n\n                if np.random.rand() < np.exp((global_best_value - fitness_value) / temperature):\n                    swarm_position[i] = within_bounds(swarm_position[i])\n\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Improved_PSO_SA_Optimizer", "description": "Improved PSO_SA_Optimizer algorithm with optimized data structures and simplified control flow.", "configspace": "", "generation": 25, "fitness": 0.12808350794351048, "feedback": "The algorithm Improved_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "08e65585-6e1a-4f94-a0bf-6c3d101839ea", "metadata": {"aucs": [0.9241527773705259, 0.1266088647309931, 0.7934551230739131, 0.14119754118636252, 0.008714420338430506, 0.9227950256020047, 0.837338584416201, 0.14981196946987652, 0.05678408781261968, 0.04107421616137075, 9.999999999998899e-05, 9.999999999998899e-05, 0.7826121254389469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06539870461089836, 9.999999999998899e-05, 0.027261646459248334, 0.053512247008518865, 0.006253344547261119, 0.037563974638465836, 0.11825552854843902, 0.024478279863362706, 0.05720606204688394, 0.03944483407281363, 9.999999999998899e-05, 0.0024435366713049245, 0.03886400510961252, 0.022957920363468887, 0.0058835131684249475, 0.06872381945304973, 9.999999999998899e-05, 0.015228791586676338, 0.03815635425254038, 0.09974401655865328, 0.055680573420932356, 0.05570729439633182, 0.03801008477814816, 0.9963790486374636, 0.07507876234447464, 0.04990951227461482, 0.9992245352437383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2154426672765829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05157449290495575, 0.1345837890987297, 0.05559632151195437, 0.20954436960075395, 0.032002881759167434, 9.999999999998899e-05, 9.999999999998899e-05, 0.05404065607714059, 0.08537075572187569, 0.03912223296746631, 9.999999999998899e-05, 9.999999999998899e-05, 0.12362794286251333, 0.10692855532603984, 0.10751206498211507, 9.999999999998899e-05, 9.999999999998899e-05, 0.13525144448700777, 0.2611293191159735, 0.13793555621063458, 0.379217085053585, 0.269324738291298, 0.13538828044602502, 0.5020601155166597, 0.136220335976037, 0.13467485409580493, 9.999999999998899e-05, 0.13298065385147018, 0.0963292326348465, 9.999999999998899e-05, 9.999999999998899e-05, 0.02162980404234427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003887798460415648, 0.024601374105269525, 9.999999999998899e-05, 0.030310447792760153, 9.999999999998899e-05, 9.999999999998899e-05, 0.01375390476670546, 0.01338893075768588, 0.013307821742002846, 9.999999999998899e-05, 0.053253161026460605, 0.17697896307208794, 9.999999999998899e-05, 9.999999999998899e-05, 0.08264835776411561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0777303336864501, 0.20166674269995588, 9.999999999998899e-05, 0.16433633662393443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7028061237931049, 0.8111323293694177, 0.7503671368921594, 0.6262403847690501, 0.06294837870969494, 0.1827479710772315, 0.6130473256089501, 0.09558436414758531, 0.7229020607734424, 0.0521625003353936, 9.999999999998899e-05, 0.0045417273749306375, 0.04082898700384663, 0.038105466874249205, 0.011702019041306078, 0.10163264777775616, 0.02420193283076677, 0.10259182521404053, 0.19229379340632313, 0.06704031396221344, 0.16039545270076538, 0.13795732469402633, 0.15247150116166563, 0.1291635765839677, 0.15723684635692803, 0.0729987790843436, 0.15869104840723725, 0.18603173385566318, 0.09819792655437576, 0.13831856521895647, 0.19632995641561735, 0.09327372641653242, 0.13629441624996763, 0.27404628996378166, 0.08706812580490753, 0.16088444991010276, 0.042451519767365276, 0.01506137462115642, 0.08873657102252042, 0.15080591185645953, 0.026133085121897826, 0.06530121796308319, 0.21537656444641018, 9.999999999998899e-05, 0.06895080563679934, 0.24071703288451352, 0.12680763144743357, 0.1995088063539855, 0.22012531601555907, 0.16445403686111637, 0.15574271759162273, 0.2652809473298756, 0.17084795447630152, 0.17554779326067105, 0.1820812710047779, 0.1903410775367107, 0.19052035969786707, 0.20459724551329672, 0.2252485941319886, 0.1816238407530706, 0.20115692486911407, 9.999999999998899e-05, 9.999999999998899e-05, 0.18990001551555236, 0.14091305561995615, 0.11310381916179502, 0.09534536188030629, 0.11769457834699437, 0.06797726189754971, 0.07977562009819472, 0.06026375701093312, 0.1569522701674172, 0.10906921542511427, 0.21363619473723705, 0.05457605751189798, 0.16304500619177997, 0.06950988970112704, 0.11023380626752333, 0.09499899937530643, 0.1871909610514162, 0.18473646788954778, 0.17890361495072593, 0.14829104352400757, 0.17702049384606966, 0.20516678870808513, 0.10674202807060262, 0.17993799324427873, 0.1629677441472771, 0.11850212542269112, 0.19831520193321217, 0.06303090750613738, 0.037371261197822636, 0.038821955078599646, 0.07322652917450723, 0.009734072061499677, 0.07145272941242442, 0.08585728756891964, 0.05051005345408488, 0.047344492178373554]}, "mutation_prompt": null}
{"id": "6b6aca49-f53e-44c7-9011-1d09c653da16", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        # Initialize particle positions and velocities\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n\n        # Initialize global best position and value\n        global_best_position = np.random.uniform(-5.0, 5.0, self.dim)\n        global_best_value = np.inf\n\n        # Initialize SA temperature\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                # Update particle velocity\n                r1, r2 = np.random.rand(), np.random.rand()\n                swarm_velocity[i] = 0.3 * swarm_velocity[i] + self.c1 * r1 * (global_best_position - swarm_position[i]) + self.c2 * r2 * (global_best_position - swarm_position[i])\n\n                # Update particle position\n                swarm_position[i] = within_bounds(swarm_position[i] + swarm_velocity[i])\n\n                # Calculate fitness value\n                fitness_value = objective_function(swarm_position[i])\n\n                # Update global best\n                if fitness_value < global_best_value:\n                    global_best_value = fitness_value\n                    global_best_position = np.copy(swarm_position[i])\n\n                # Simulated Annealing\n                if np.random.rand() < np.exp((global_best_value - fitness_value) / temperature):\n                    swarm_position[i] = within_bounds(swarm_position[i])\n\n            # Cool down temperature\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to balance exploration and exploitation for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "08e65585-6e1a-4f94-a0bf-6c3d101839ea", "metadata": {"aucs": [0.9241527773705259, 0.1266088647309931, 0.7934551230739131, 0.14119754118636252, 0.008714420338430506, 0.9227950256020047, 0.837338584416201, 0.14981196946987652, 0.05678408781261968, 0.04107421616137075, 9.999999999998899e-05, 9.999999999998899e-05, 0.7826121254389469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06539870461089836, 9.999999999998899e-05, 0.027261646459248334, 0.053512247008518865, 0.006253344547261119, 0.037563974638465836, 0.11825552854843902, 0.024478279863362706, 0.05720606204688394, 0.03944483407281363, 9.999999999998899e-05, 0.0024435366713049245, 0.03886400510961252, 0.022957920363468887, 0.0058835131684249475, 0.06872381945304973, 9.999999999998899e-05, 0.015228791586676338, 0.03815635425254038, 0.09974401655865328, 0.055680573420932356, 0.05570729439633182, 0.03801008477814816, 0.9963790486374636, 0.07507876234447464, 0.04990951227461482, 0.9992245352437383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2154426672765829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05157449290495575, 0.1345837890987297, 0.05559632151195437, 0.20954436960075395, 0.032002881759167434, 9.999999999998899e-05, 9.999999999998899e-05, 0.05404065607714059, 0.08537075572187569, 0.03912223296746631, 9.999999999998899e-05, 9.999999999998899e-05, 0.12362794286251333, 0.10692855532603984, 0.10751206498211507, 9.999999999998899e-05, 9.999999999998899e-05, 0.13525144448700777, 0.2611293191159735, 0.13793555621063458, 0.379217085053585, 0.269324738291298, 0.13538828044602502, 0.5020601155166597, 0.136220335976037, 0.13467485409580493, 9.999999999998899e-05, 0.13298065385147018, 0.0963292326348465, 9.999999999998899e-05, 9.999999999998899e-05, 0.02162980404234427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003887798460415648, 0.024601374105269525, 9.999999999998899e-05, 0.030310447792760153, 9.999999999998899e-05, 9.999999999998899e-05, 0.01375390476670546, 0.01338893075768588, 0.013307821742002846, 9.999999999998899e-05, 0.053253161026460605, 0.17697896307208794, 9.999999999998899e-05, 9.999999999998899e-05, 0.08264835776411561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0777303336864501, 0.20166674269995588, 9.999999999998899e-05, 0.16433633662393443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7028061237931049, 0.8111323293694177, 0.7503671368921594, 0.6262403847690501, 0.06294837870969494, 0.1827479710772315, 0.6130473256089501, 0.09558436414758531, 0.7229020607734424, 0.0521625003353936, 9.999999999998899e-05, 0.0045417273749306375, 0.04082898700384663, 0.038105466874249205, 0.011702019041306078, 0.10163264777775616, 0.02420193283076677, 0.10259182521404053, 0.19229379340632313, 0.06704031396221344, 0.16039545270076538, 0.13795732469402633, 0.15247150116166563, 0.1291635765839677, 0.15723684635692803, 0.0729987790843436, 0.15869104840723725, 0.18603173385566318, 0.09819792655437576, 0.13831856521895647, 0.19632995641561735, 0.09327372641653242, 0.13629441624996763, 0.27404628996378166, 0.08706812580490753, 0.16088444991010276, 0.042451519767365276, 0.01506137462115642, 0.08873657102252042, 0.15080591185645953, 0.026133085121897826, 0.06530121796308319, 0.21537656444641018, 9.999999999998899e-05, 0.06895080563679934, 0.24071703288451352, 0.12680763144743357, 0.1995088063539855, 0.22012531601555907, 0.16445403686111637, 0.15574271759162273, 0.2652809473298756, 0.17084795447630152, 0.17554779326067105, 0.1820812710047779, 0.1903410775367107, 0.19052035969786707, 0.20459724551329672, 0.2252485941319886, 0.1816238407530706, 0.20115692486911407, 9.999999999998899e-05, 9.999999999998899e-05, 0.18990001551555236, 0.14091305561995615, 0.11310381916179502, 0.09534536188030629, 0.11769457834699437, 0.06797726189754971, 0.07977562009819472, 0.06026375701093312, 0.1569522701674172, 0.10906921542511427, 0.21363619473723705, 0.05457605751189798, 0.16304500619177997, 0.06950988970112704, 0.11023380626752333, 0.09499899937530643, 0.1871909610514162, 0.18473646788954778, 0.17890361495072593, 0.14829104352400757, 0.17702049384606966, 0.20516678870808513, 0.10674202807060262, 0.17993799324427873, 0.1629677441472771, 0.11850212542269112, 0.19831520193321217, 0.06303090750613738, 0.037371261197822636, 0.038821955078599646, 0.07322652917450723, 0.009734072061499677, 0.07145272941242442, 0.08585728756891964, 0.05051005345408488, 0.047344492178373554]}, "mutation_prompt": null}
{"id": "e84bf755-6f63-409f-ac7d-4f1125f42eb0", "solution": "import numpy as np\n\nclass Improved_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget, self.dim, self.swarm_size, self.max_iter, self.c1, self.c2, self.initial_temp, self.cooling_rate = budget, dim, swarm_size, max_iter, c1, c2, initial_temp, cooling_rate\n\n    def __call__(self, func):\n        objective_function = lambda x: func(x)\n        within_bounds = lambda x: np.clip(x, -5.0, 5.0)\n\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n\n        global_best_position, global_best_value = np.random.uniform(-5.0, 5.0, self.dim), np.inf\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                swarm_velocity[i] = 0.3 * swarm_velocity[i] + self.c1 * r1 * (global_best_position - swarm_position[i]) + self.c2 * r2 * (global_best_position - swarm_position[i])\n                swarm_position[i] = within_bounds(swarm_position[i] + swarm_velocity[i])\n\n                fitness_value = objective_function(swarm_position[i])\n\n                if fitness_value < global_best_value:\n                    global_best_value, global_best_position = fitness_value, np.copy(swarm_position[i])\n\n                if np.random.rand() < np.exp((global_best_value - fitness_value) / temperature):\n                    swarm_position[i] = within_bounds(swarm_position[i])\n\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Improved_PSO_SA_Optimizer", "description": "Improved PSO_SA_Optimizer algorithm with optimized control flow and simplified operations.", "configspace": "", "generation": 27, "fitness": 0.12808350794351048, "feedback": "The algorithm Improved_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "08e65585-6e1a-4f94-a0bf-6c3d101839ea", "metadata": {"aucs": [0.9241527773705259, 0.1266088647309931, 0.7934551230739131, 0.14119754118636252, 0.008714420338430506, 0.9227950256020047, 0.837338584416201, 0.14981196946987652, 0.05678408781261968, 0.04107421616137075, 9.999999999998899e-05, 9.999999999998899e-05, 0.7826121254389469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06539870461089836, 9.999999999998899e-05, 0.027261646459248334, 0.053512247008518865, 0.006253344547261119, 0.037563974638465836, 0.11825552854843902, 0.024478279863362706, 0.05720606204688394, 0.03944483407281363, 9.999999999998899e-05, 0.0024435366713049245, 0.03886400510961252, 0.022957920363468887, 0.0058835131684249475, 0.06872381945304973, 9.999999999998899e-05, 0.015228791586676338, 0.03815635425254038, 0.09974401655865328, 0.055680573420932356, 0.05570729439633182, 0.03801008477814816, 0.9963790486374636, 0.07507876234447464, 0.04990951227461482, 0.9992245352437383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2154426672765829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05157449290495575, 0.1345837890987297, 0.05559632151195437, 0.20954436960075395, 0.032002881759167434, 9.999999999998899e-05, 9.999999999998899e-05, 0.05404065607714059, 0.08537075572187569, 0.03912223296746631, 9.999999999998899e-05, 9.999999999998899e-05, 0.12362794286251333, 0.10692855532603984, 0.10751206498211507, 9.999999999998899e-05, 9.999999999998899e-05, 0.13525144448700777, 0.2611293191159735, 0.13793555621063458, 0.379217085053585, 0.269324738291298, 0.13538828044602502, 0.5020601155166597, 0.136220335976037, 0.13467485409580493, 9.999999999998899e-05, 0.13298065385147018, 0.0963292326348465, 9.999999999998899e-05, 9.999999999998899e-05, 0.02162980404234427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003887798460415648, 0.024601374105269525, 9.999999999998899e-05, 0.030310447792760153, 9.999999999998899e-05, 9.999999999998899e-05, 0.01375390476670546, 0.01338893075768588, 0.013307821742002846, 9.999999999998899e-05, 0.053253161026460605, 0.17697896307208794, 9.999999999998899e-05, 9.999999999998899e-05, 0.08264835776411561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0777303336864501, 0.20166674269995588, 9.999999999998899e-05, 0.16433633662393443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7028061237931049, 0.8111323293694177, 0.7503671368921594, 0.6262403847690501, 0.06294837870969494, 0.1827479710772315, 0.6130473256089501, 0.09558436414758531, 0.7229020607734424, 0.0521625003353936, 9.999999999998899e-05, 0.0045417273749306375, 0.04082898700384663, 0.038105466874249205, 0.011702019041306078, 0.10163264777775616, 0.02420193283076677, 0.10259182521404053, 0.19229379340632313, 0.06704031396221344, 0.16039545270076538, 0.13795732469402633, 0.15247150116166563, 0.1291635765839677, 0.15723684635692803, 0.0729987790843436, 0.15869104840723725, 0.18603173385566318, 0.09819792655437576, 0.13831856521895647, 0.19632995641561735, 0.09327372641653242, 0.13629441624996763, 0.27404628996378166, 0.08706812580490753, 0.16088444991010276, 0.042451519767365276, 0.01506137462115642, 0.08873657102252042, 0.15080591185645953, 0.026133085121897826, 0.06530121796308319, 0.21537656444641018, 9.999999999998899e-05, 0.06895080563679934, 0.24071703288451352, 0.12680763144743357, 0.1995088063539855, 0.22012531601555907, 0.16445403686111637, 0.15574271759162273, 0.2652809473298756, 0.17084795447630152, 0.17554779326067105, 0.1820812710047779, 0.1903410775367107, 0.19052035969786707, 0.20459724551329672, 0.2252485941319886, 0.1816238407530706, 0.20115692486911407, 9.999999999998899e-05, 9.999999999998899e-05, 0.18990001551555236, 0.14091305561995615, 0.11310381916179502, 0.09534536188030629, 0.11769457834699437, 0.06797726189754971, 0.07977562009819472, 0.06026375701093312, 0.1569522701674172, 0.10906921542511427, 0.21363619473723705, 0.05457605751189798, 0.16304500619177997, 0.06950988970112704, 0.11023380626752333, 0.09499899937530643, 0.1871909610514162, 0.18473646788954778, 0.17890361495072593, 0.14829104352400757, 0.17702049384606966, 0.20516678870808513, 0.10674202807060262, 0.17993799324427873, 0.1629677441472771, 0.11850212542269112, 0.19831520193321217, 0.06303090750613738, 0.037371261197822636, 0.038821955078599646, 0.07322652917450723, 0.009734072061499677, 0.07145272941242442, 0.08585728756891964, 0.05051005345408488, 0.047344492178373554]}, "mutation_prompt": null}
{"id": "eb5455d7-08f2-427a-a9ab-41f2916b6d45", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        # Initialize particle positions and velocities\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n\n        # Initialize global best position and value\n        global_best_position = np.random.uniform(-5.0, 5.0, self.dim)\n        global_best_value = np.inf\n\n        # Initialize SA temperature\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                # Update particle velocity\n                r1, r2 = np.random.rand(), np.random.rand()\n                swarm_velocity[i] = 0.3 * swarm_velocity[i] + self.c1 * r1 * (global_best_position - swarm_position[i]) + self.c2 * r2 * (global_best_position - swarm_position[i])\n\n                # Update particle position\n                swarm_position[i] = within_bounds(swarm_position[i] + swarm_velocity[i])\n\n                # Calculate fitness value\n                fitness_value = objective_function(swarm_position[i])\n\n                # Update global best\n                if fitness_value < global_best_value:\n                    global_best_value = fitness_value\n                    global_best_position = np.copy(swarm_position[i])\n\n                # Simulated Annealing\n                if np.random.rand() < np.exp((global_best_value - fitness_value) / temperature):\n                    swarm_position[i] = within_bounds(swarm_position[i])\n\n            # Cool down temperature\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to balance exploration and exploitation for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "08e65585-6e1a-4f94-a0bf-6c3d101839ea", "metadata": {"aucs": [0.9241527773705259, 0.1266088647309931, 0.7934551230739131, 0.14119754118636252, 0.008714420338430506, 0.9227950256020047, 0.837338584416201, 0.14981196946987652, 0.05678408781261968, 0.04107421616137075, 9.999999999998899e-05, 9.999999999998899e-05, 0.7826121254389469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06539870461089836, 9.999999999998899e-05, 0.027261646459248334, 0.053512247008518865, 0.006253344547261119, 0.037563974638465836, 0.11825552854843902, 0.024478279863362706, 0.05720606204688394, 0.03944483407281363, 9.999999999998899e-05, 0.0024435366713049245, 0.03886400510961252, 0.022957920363468887, 0.0058835131684249475, 0.06872381945304973, 9.999999999998899e-05, 0.015228791586676338, 0.03815635425254038, 0.09974401655865328, 0.055680573420932356, 0.05570729439633182, 0.03801008477814816, 0.9963790486374636, 0.07507876234447464, 0.04990951227461482, 0.9992245352437383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2154426672765829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05157449290495575, 0.1345837890987297, 0.05559632151195437, 0.20954436960075395, 0.032002881759167434, 9.999999999998899e-05, 9.999999999998899e-05, 0.05404065607714059, 0.08537075572187569, 0.03912223296746631, 9.999999999998899e-05, 9.999999999998899e-05, 0.12362794286251333, 0.10692855532603984, 0.10751206498211507, 9.999999999998899e-05, 9.999999999998899e-05, 0.13525144448700777, 0.2611293191159735, 0.13793555621063458, 0.379217085053585, 0.269324738291298, 0.13538828044602502, 0.5020601155166597, 0.136220335976037, 0.13467485409580493, 9.999999999998899e-05, 0.13298065385147018, 0.0963292326348465, 9.999999999998899e-05, 9.999999999998899e-05, 0.02162980404234427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003887798460415648, 0.024601374105269525, 9.999999999998899e-05, 0.030310447792760153, 9.999999999998899e-05, 9.999999999998899e-05, 0.01375390476670546, 0.01338893075768588, 0.013307821742002846, 9.999999999998899e-05, 0.053253161026460605, 0.17697896307208794, 9.999999999998899e-05, 9.999999999998899e-05, 0.08264835776411561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0777303336864501, 0.20166674269995588, 9.999999999998899e-05, 0.16433633662393443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7028061237931049, 0.8111323293694177, 0.7503671368921594, 0.6262403847690501, 0.06294837870969494, 0.1827479710772315, 0.6130473256089501, 0.09558436414758531, 0.7229020607734424, 0.0521625003353936, 9.999999999998899e-05, 0.0045417273749306375, 0.04082898700384663, 0.038105466874249205, 0.011702019041306078, 0.10163264777775616, 0.02420193283076677, 0.10259182521404053, 0.19229379340632313, 0.06704031396221344, 0.16039545270076538, 0.13795732469402633, 0.15247150116166563, 0.1291635765839677, 0.15723684635692803, 0.0729987790843436, 0.15869104840723725, 0.18603173385566318, 0.09819792655437576, 0.13831856521895647, 0.19632995641561735, 0.09327372641653242, 0.13629441624996763, 0.27404628996378166, 0.08706812580490753, 0.16088444991010276, 0.042451519767365276, 0.01506137462115642, 0.08873657102252042, 0.15080591185645953, 0.026133085121897826, 0.06530121796308319, 0.21537656444641018, 9.999999999998899e-05, 0.06895080563679934, 0.24071703288451352, 0.12680763144743357, 0.1995088063539855, 0.22012531601555907, 0.16445403686111637, 0.15574271759162273, 0.2652809473298756, 0.17084795447630152, 0.17554779326067105, 0.1820812710047779, 0.1903410775367107, 0.19052035969786707, 0.20459724551329672, 0.2252485941319886, 0.1816238407530706, 0.20115692486911407, 9.999999999998899e-05, 9.999999999998899e-05, 0.18990001551555236, 0.14091305561995615, 0.11310381916179502, 0.09534536188030629, 0.11769457834699437, 0.06797726189754971, 0.07977562009819472, 0.06026375701093312, 0.1569522701674172, 0.10906921542511427, 0.21363619473723705, 0.05457605751189798, 0.16304500619177997, 0.06950988970112704, 0.11023380626752333, 0.09499899937530643, 0.1871909610514162, 0.18473646788954778, 0.17890361495072593, 0.14829104352400757, 0.17702049384606966, 0.20516678870808513, 0.10674202807060262, 0.17993799324427873, 0.1629677441472771, 0.11850212542269112, 0.19831520193321217, 0.06303090750613738, 0.037371261197822636, 0.038821955078599646, 0.07322652917450723, 0.009734072061499677, 0.07145272941242442, 0.08585728756891964, 0.05051005345408488, 0.047344492178373554]}, "mutation_prompt": null}
{"id": "90100dd5-cdf3-4129-8e68-46be7d7ced43", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        # Initialize particle positions and velocities\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n\n        # Initialize global best position and value\n        global_best_position = np.random.uniform(-5.0, 5.0, self.dim)\n        global_best_value = np.inf\n\n        # Initialize SA temperature\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                # Update particle velocity\n                r1, r2 = np.random.rand(), np.random.rand()\n                swarm_velocity[i] = 0.3 * swarm_velocity[i] + self.c1 * r1 * (global_best_position - swarm_position[i]) + self.c2 * r2 * (global_best_position - swarm_position[i])\n\n                # Update particle position\n                swarm_position[i] = within_bounds(swarm_position[i] + swarm_velocity[i])\n\n                # Calculate fitness value\n                fitness_value = objective_function(swarm_position[i])\n\n                # Update global best\n                if fitness_value < global_best_value:\n                    global_best_value = fitness_value\n                    global_best_position = np.copy(swarm_position[i])\n\n                # Simulated Annealing\n                if np.random.rand() < np.exp((global_best_value - fitness_value) / temperature):\n                    swarm_position[i] = within_bounds(swarm_position[i])\n\n            # Cool down temperature\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to balance exploration and exploitation for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "08e65585-6e1a-4f94-a0bf-6c3d101839ea", "metadata": {"aucs": [0.9241527773705259, 0.1266088647309931, 0.7934551230739131, 0.14119754118636252, 0.008714420338430506, 0.9227950256020047, 0.837338584416201, 0.14981196946987652, 0.05678408781261968, 0.04107421616137075, 9.999999999998899e-05, 9.999999999998899e-05, 0.7826121254389469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06539870461089836, 9.999999999998899e-05, 0.027261646459248334, 0.053512247008518865, 0.006253344547261119, 0.037563974638465836, 0.11825552854843902, 0.024478279863362706, 0.05720606204688394, 0.03944483407281363, 9.999999999998899e-05, 0.0024435366713049245, 0.03886400510961252, 0.022957920363468887, 0.0058835131684249475, 0.06872381945304973, 9.999999999998899e-05, 0.015228791586676338, 0.03815635425254038, 0.09974401655865328, 0.055680573420932356, 0.05570729439633182, 0.03801008477814816, 0.9963790486374636, 0.07507876234447464, 0.04990951227461482, 0.9992245352437383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2154426672765829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05157449290495575, 0.1345837890987297, 0.05559632151195437, 0.20954436960075395, 0.032002881759167434, 9.999999999998899e-05, 9.999999999998899e-05, 0.05404065607714059, 0.08537075572187569, 0.03912223296746631, 9.999999999998899e-05, 9.999999999998899e-05, 0.12362794286251333, 0.10692855532603984, 0.10751206498211507, 9.999999999998899e-05, 9.999999999998899e-05, 0.13525144448700777, 0.2611293191159735, 0.13793555621063458, 0.379217085053585, 0.269324738291298, 0.13538828044602502, 0.5020601155166597, 0.136220335976037, 0.13467485409580493, 9.999999999998899e-05, 0.13298065385147018, 0.0963292326348465, 9.999999999998899e-05, 9.999999999998899e-05, 0.02162980404234427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003887798460415648, 0.024601374105269525, 9.999999999998899e-05, 0.030310447792760153, 9.999999999998899e-05, 9.999999999998899e-05, 0.01375390476670546, 0.01338893075768588, 0.013307821742002846, 9.999999999998899e-05, 0.053253161026460605, 0.17697896307208794, 9.999999999998899e-05, 9.999999999998899e-05, 0.08264835776411561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0777303336864501, 0.20166674269995588, 9.999999999998899e-05, 0.16433633662393443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7028061237931049, 0.8111323293694177, 0.7503671368921594, 0.6262403847690501, 0.06294837870969494, 0.1827479710772315, 0.6130473256089501, 0.09558436414758531, 0.7229020607734424, 0.0521625003353936, 9.999999999998899e-05, 0.0045417273749306375, 0.04082898700384663, 0.038105466874249205, 0.011702019041306078, 0.10163264777775616, 0.02420193283076677, 0.10259182521404053, 0.19229379340632313, 0.06704031396221344, 0.16039545270076538, 0.13795732469402633, 0.15247150116166563, 0.1291635765839677, 0.15723684635692803, 0.0729987790843436, 0.15869104840723725, 0.18603173385566318, 0.09819792655437576, 0.13831856521895647, 0.19632995641561735, 0.09327372641653242, 0.13629441624996763, 0.27404628996378166, 0.08706812580490753, 0.16088444991010276, 0.042451519767365276, 0.01506137462115642, 0.08873657102252042, 0.15080591185645953, 0.026133085121897826, 0.06530121796308319, 0.21537656444641018, 9.999999999998899e-05, 0.06895080563679934, 0.24071703288451352, 0.12680763144743357, 0.1995088063539855, 0.22012531601555907, 0.16445403686111637, 0.15574271759162273, 0.2652809473298756, 0.17084795447630152, 0.17554779326067105, 0.1820812710047779, 0.1903410775367107, 0.19052035969786707, 0.20459724551329672, 0.2252485941319886, 0.1816238407530706, 0.20115692486911407, 9.999999999998899e-05, 9.999999999998899e-05, 0.18990001551555236, 0.14091305561995615, 0.11310381916179502, 0.09534536188030629, 0.11769457834699437, 0.06797726189754971, 0.07977562009819472, 0.06026375701093312, 0.1569522701674172, 0.10906921542511427, 0.21363619473723705, 0.05457605751189798, 0.16304500619177997, 0.06950988970112704, 0.11023380626752333, 0.09499899937530643, 0.1871909610514162, 0.18473646788954778, 0.17890361495072593, 0.14829104352400757, 0.17702049384606966, 0.20516678870808513, 0.10674202807060262, 0.17993799324427873, 0.1629677441472771, 0.11850212542269112, 0.19831520193321217, 0.06303090750613738, 0.037371261197822636, 0.038821955078599646, 0.07322652917450723, 0.009734072061499677, 0.07145272941242442, 0.08585728756891964, 0.05051005345408488, 0.047344492178373554]}, "mutation_prompt": null}
{"id": "40cd52c0-467a-4ddb-b040-4c77f574767d", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        # Initialize particle positions and velocities\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n\n        # Initialize global best position and value\n        global_best_position = np.random.uniform(-5.0, 5.0, self.dim)\n        global_best_value = np.inf\n\n        # Initialize SA temperature\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                # Update particle velocity\n                r1, r2 = np.random.rand(), np.random.rand()\n                swarm_velocity[i] = 0.3 * swarm_velocity[i] + self.c1 * r1 * (global_best_position - swarm_position[i]) + self.c2 * r2 * (global_best_position - swarm_position[i])\n\n                # Update particle position\n                swarm_position[i] = within_bounds(swarm_position[i] + swarm_velocity[i])\n\n                # Calculate fitness value\n                fitness_value = objective_function(swarm_position[i])\n\n                # Update global best\n                if fitness_value < global_best_value:\n                    global_best_value = fitness_value\n                    global_best_position = np.copy(swarm_position[i])\n\n                # Simulated Annealing\n                if np.random.rand() < np.exp((global_best_value - fitness_value) / temperature):\n                    swarm_position[i] = within_bounds(swarm_position[i])\n\n            # Cool down temperature\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to balance exploration and exploitation for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "08e65585-6e1a-4f94-a0bf-6c3d101839ea", "metadata": {"aucs": [0.9241527773705259, 0.1266088647309931, 0.7934551230739131, 0.14119754118636252, 0.008714420338430506, 0.9227950256020047, 0.837338584416201, 0.14981196946987652, 0.05678408781261968, 0.04107421616137075, 9.999999999998899e-05, 9.999999999998899e-05, 0.7826121254389469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06539870461089836, 9.999999999998899e-05, 0.027261646459248334, 0.053512247008518865, 0.006253344547261119, 0.037563974638465836, 0.11825552854843902, 0.024478279863362706, 0.05720606204688394, 0.03944483407281363, 9.999999999998899e-05, 0.0024435366713049245, 0.03886400510961252, 0.022957920363468887, 0.0058835131684249475, 0.06872381945304973, 9.999999999998899e-05, 0.015228791586676338, 0.03815635425254038, 0.09974401655865328, 0.055680573420932356, 0.05570729439633182, 0.03801008477814816, 0.9963790486374636, 0.07507876234447464, 0.04990951227461482, 0.9992245352437383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2154426672765829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05157449290495575, 0.1345837890987297, 0.05559632151195437, 0.20954436960075395, 0.032002881759167434, 9.999999999998899e-05, 9.999999999998899e-05, 0.05404065607714059, 0.08537075572187569, 0.03912223296746631, 9.999999999998899e-05, 9.999999999998899e-05, 0.12362794286251333, 0.10692855532603984, 0.10751206498211507, 9.999999999998899e-05, 9.999999999998899e-05, 0.13525144448700777, 0.2611293191159735, 0.13793555621063458, 0.379217085053585, 0.269324738291298, 0.13538828044602502, 0.5020601155166597, 0.136220335976037, 0.13467485409580493, 9.999999999998899e-05, 0.13298065385147018, 0.0963292326348465, 9.999999999998899e-05, 9.999999999998899e-05, 0.02162980404234427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003887798460415648, 0.024601374105269525, 9.999999999998899e-05, 0.030310447792760153, 9.999999999998899e-05, 9.999999999998899e-05, 0.01375390476670546, 0.01338893075768588, 0.013307821742002846, 9.999999999998899e-05, 0.053253161026460605, 0.17697896307208794, 9.999999999998899e-05, 9.999999999998899e-05, 0.08264835776411561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0777303336864501, 0.20166674269995588, 9.999999999998899e-05, 0.16433633662393443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7028061237931049, 0.8111323293694177, 0.7503671368921594, 0.6262403847690501, 0.06294837870969494, 0.1827479710772315, 0.6130473256089501, 0.09558436414758531, 0.7229020607734424, 0.0521625003353936, 9.999999999998899e-05, 0.0045417273749306375, 0.04082898700384663, 0.038105466874249205, 0.011702019041306078, 0.10163264777775616, 0.02420193283076677, 0.10259182521404053, 0.19229379340632313, 0.06704031396221344, 0.16039545270076538, 0.13795732469402633, 0.15247150116166563, 0.1291635765839677, 0.15723684635692803, 0.0729987790843436, 0.15869104840723725, 0.18603173385566318, 0.09819792655437576, 0.13831856521895647, 0.19632995641561735, 0.09327372641653242, 0.13629441624996763, 0.27404628996378166, 0.08706812580490753, 0.16088444991010276, 0.042451519767365276, 0.01506137462115642, 0.08873657102252042, 0.15080591185645953, 0.026133085121897826, 0.06530121796308319, 0.21537656444641018, 9.999999999998899e-05, 0.06895080563679934, 0.24071703288451352, 0.12680763144743357, 0.1995088063539855, 0.22012531601555907, 0.16445403686111637, 0.15574271759162273, 0.2652809473298756, 0.17084795447630152, 0.17554779326067105, 0.1820812710047779, 0.1903410775367107, 0.19052035969786707, 0.20459724551329672, 0.2252485941319886, 0.1816238407530706, 0.20115692486911407, 9.999999999998899e-05, 9.999999999998899e-05, 0.18990001551555236, 0.14091305561995615, 0.11310381916179502, 0.09534536188030629, 0.11769457834699437, 0.06797726189754971, 0.07977562009819472, 0.06026375701093312, 0.1569522701674172, 0.10906921542511427, 0.21363619473723705, 0.05457605751189798, 0.16304500619177997, 0.06950988970112704, 0.11023380626752333, 0.09499899937530643, 0.1871909610514162, 0.18473646788954778, 0.17890361495072593, 0.14829104352400757, 0.17702049384606966, 0.20516678870808513, 0.10674202807060262, 0.17993799324427873, 0.1629677441472771, 0.11850212542269112, 0.19831520193321217, 0.06303090750613738, 0.037371261197822636, 0.038821955078599646, 0.07322652917450723, 0.009734072061499677, 0.07145272941242442, 0.08585728756891964, 0.05051005345408488, 0.047344492178373554]}, "mutation_prompt": null}
{"id": "bd8f5d57-1a00-4a64-b905-0680da5d7b82", "solution": "import numpy as np\nfrom collections import deque\n\nclass Improved_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        # Initialize particle positions and velocities\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n\n        # Initialize global best position and value\n        global_best_position = np.random.uniform(-5.0, 5.0, self.dim)\n        global_best_value = np.inf\n\n        # Initialize SA temperature\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                # Update particle velocity\n                r1, r2 = np.random.rand(), np.random.rand()\n                swarm_velocity[i] = 0.3 * swarm_velocity[i] + self.c1 * r1 * (global_best_position - swarm_position[i]) + self.c2 * r2 * (global_best_position - swarm_position[i])\n\n                # Update particle position\n                swarm_position[i] = within_bounds(swarm_position[i] + swarm_velocity[i])\n\n                # Calculate fitness value\n                fitness_value = objective_function(swarm_position[i])\n\n                # Update global best\n                if fitness_value < global_best_value:\n                    global_best_value = fitness_value\n                    global_best_position = swarm_position[i]\n\n                # Simulated Annealing\n                if np.random.rand() < np.exp((global_best_value - fitness_value) / temperature):\n                    swarm_position[i] = within_bounds(swarm_position[i])\n\n            # Cool down temperature\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Improved_PSO_SA_Optimizer", "description": "Utilizing deque for more efficient particle history tracking and avoiding unnecessary copy operations for global best position assignment.", "configspace": "", "generation": 31, "fitness": 0.06406005499303158, "feedback": "The algorithm Improved_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.06 with standard deviation 0.11.", "error": "", "parent_id": "08e65585-6e1a-4f94-a0bf-6c3d101839ea", "metadata": {"aucs": [0.12193878445976514, 0.10457798842539812, 0.18172313748075963, 0.14119265153392502, 0.007913278751230823, 0.15685082385847748, 0.2091731943482814, 0.14978556447940805, 0.05584391312414505, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03421626747454953, 9.999999999998899e-05, 9.999999999998899e-05, 0.04212877490801692, 0.004220412502405679, 0.03958041058264461, 0.026432476187326026, 0.010780286637283809, 0.010502285580568205, 0.025480339745176606, 9.999999999998899e-05, 0.00012172875972704666, 0.08519949372300872, 9.999999999998899e-05, 9.999999999998899e-05, 0.02900121696153346, 9.999999999998899e-05, 0.015736020470021095, 0.03815635425254038, 0.09974401655865328, 0.055680573420932356, 0.05570729439633182, 0.03801008477814816, 0.9963790486374636, 0.07507876234447464, 0.04990951227461482, 0.9992245352437383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01680966717334409, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.051144921871585036, 0.09346057981569633, 0.05559632151195437, 0.15860230833349886, 0.00841571885786585, 9.999999999998899e-05, 9.999999999998899e-05, 0.0401403815469179, 0.08464974113356549, 0.02151827826974373, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07708455305659068, 9.999999999998899e-05, 0.016612902830783427, 0.04995116209823247, 0.043495356906396276, 0.11394713802593015, 0.007074121575966319, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.029105685149389715, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013005402456884418, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004309331407665207, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1436904360528295, 0.18594809468897622, 0.13059213667452463, 0.20009139893012706, 0.042540595419758076, 0.1810867757379221, 0.22542962829361635, 0.08252842819396933, 0.29006396549389535, 0.03741177151516495, 9.999999999998899e-05, 0.004439425148314524, 0.023002848486204153, 0.008363167957571194, 9.999999999998899e-05, 0.014217668017924012, 0.026759698172985402, 0.061753629460646, 0.07614280885071234, 0.06563537296402833, 0.10838839477280093, 0.1000853969102129, 0.12777845622418715, 0.05507779155363712, 0.11229316999340822, 0.0729987790843436, 0.08403986449277967, 0.1305552282726965, 0.09697976624771831, 0.19307507832493898, 0.14891981905459284, 0.10296621456677713, 0.12325090763827562, 0.18887618078026303, 0.08706517850468631, 0.09802656845852709, 0.04232961283037073, 0.015061165907982454, 0.06339911625514139, 0.13448307814532268, 0.02613242954970252, 0.06527860970816013, 0.12356689958874145, 9.999999999998899e-05, 0.07589566053804497, 0.13895902813009076, 0.10974883176901296, 0.1644594082536731, 0.13532214192801206, 0.10805535751992279, 0.13933328388774824, 0.15510650807423532, 0.10486206065437087, 0.15538664811930725, 9.999999999998899e-05, 0.09308967674592372, 9.999999999998899e-05, 0.1295385029807512, 0.17342151813452655, 9.999999999998899e-05, 0.13760666185625436, 9.999999999998899e-05, 9.999999999998899e-05, 0.17267419588917687, 0.14090460485599088, 0.10471921089097014, 0.07272798346538933, 0.04543566647730424, 0.06742828554204938, 0.06808279240355919, 0.05969695176569767, 0.06894123070932678, 0.10886024256125892, 0.16507995885594495, 0.03253877111830583, 0.10669278031546614, 0.02907314822806928, 0.030263510805925598, 0.0775279491922749, 0.16885511496840355, 0.1332791804373895, 0.1512626788082806, 0.15348668202347038, 0.1564891718325434, 0.14724241878547528, 0.10674202807060262, 0.16811405619009712, 0.13556786411659394, 0.11850212542269112, 0.15497857115620917, 0.05800810835749015, 0.0026129356643225243, 0.017863161558613116, 0.02368019064030502, 0.019002588544041688, 0.016168820712278875, 0.04001448446342892, 0.003908036516304669, 0.03652272771070142]}, "mutation_prompt": null}
{"id": "ffd8805a-0add-4bca-8963-119c9beabfc0", "solution": "import numpy as np\n\nclass Improved_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget, self.dim, self.swarm_size, self.max_iter, self.c1, self.c2, self.initial_temp, self.cooling_rate = budget, dim, swarm_size, max_iter, c1, c2, initial_temp, cooling_rate\n\n    def __call__(self, func):\n        objective_function = lambda x: func(x)\n        within_bounds = lambda x: np.clip(x, -5.0, 5.0)\n\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        \n        global_best_position, global_best_value = np.random.uniform(-5.0, 5.0, self.dim), np.inf\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                swarm_velocity[i] = 0.3 * swarm_velocity[i] + self.c1 * r1 * (global_best_position - swarm_position[i]) + self.c2 * r2 * (global_best_position - swarm_position[i])\n                \n                swarm_position[i] = within_bounds(swarm_position[i] + swarm_velocity[i])\n                fitness_value = objective_function(swarm_position[i])\n                \n                if fitness_value < global_best_value:\n                    global_best_value, global_best_position = fitness_value, np.copy(swarm_position[i])\n                \n                if np.random.rand() < np.exp((global_best_value - fitness_value) / temperature):\n                    swarm_position[i] = within_bounds(swarm_position[i])\n                    \n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Improved_PSO_SA_Optimizer", "description": "Improved PSO_SA_Optimizer algorithm by optimizing data structures and simplifying control flow for enhanced performance.", "configspace": "", "generation": 32, "fitness": 0.12808350794351048, "feedback": "The algorithm Improved_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "08e65585-6e1a-4f94-a0bf-6c3d101839ea", "metadata": {"aucs": [0.9241527773705259, 0.1266088647309931, 0.7934551230739131, 0.14119754118636252, 0.008714420338430506, 0.9227950256020047, 0.837338584416201, 0.14981196946987652, 0.05678408781261968, 0.04107421616137075, 9.999999999998899e-05, 9.999999999998899e-05, 0.7826121254389469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06539870461089836, 9.999999999998899e-05, 0.027261646459248334, 0.053512247008518865, 0.006253344547261119, 0.037563974638465836, 0.11825552854843902, 0.024478279863362706, 0.05720606204688394, 0.03944483407281363, 9.999999999998899e-05, 0.0024435366713049245, 0.03886400510961252, 0.022957920363468887, 0.0058835131684249475, 0.06872381945304973, 9.999999999998899e-05, 0.015228791586676338, 0.03815635425254038, 0.09974401655865328, 0.055680573420932356, 0.05570729439633182, 0.03801008477814816, 0.9963790486374636, 0.07507876234447464, 0.04990951227461482, 0.9992245352437383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2154426672765829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05157449290495575, 0.1345837890987297, 0.05559632151195437, 0.20954436960075395, 0.032002881759167434, 9.999999999998899e-05, 9.999999999998899e-05, 0.05404065607714059, 0.08537075572187569, 0.03912223296746631, 9.999999999998899e-05, 9.999999999998899e-05, 0.12362794286251333, 0.10692855532603984, 0.10751206498211507, 9.999999999998899e-05, 9.999999999998899e-05, 0.13525144448700777, 0.2611293191159735, 0.13793555621063458, 0.379217085053585, 0.269324738291298, 0.13538828044602502, 0.5020601155166597, 0.136220335976037, 0.13467485409580493, 9.999999999998899e-05, 0.13298065385147018, 0.0963292326348465, 9.999999999998899e-05, 9.999999999998899e-05, 0.02162980404234427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003887798460415648, 0.024601374105269525, 9.999999999998899e-05, 0.030310447792760153, 9.999999999998899e-05, 9.999999999998899e-05, 0.01375390476670546, 0.01338893075768588, 0.013307821742002846, 9.999999999998899e-05, 0.053253161026460605, 0.17697896307208794, 9.999999999998899e-05, 9.999999999998899e-05, 0.08264835776411561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0777303336864501, 0.20166674269995588, 9.999999999998899e-05, 0.16433633662393443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7028061237931049, 0.8111323293694177, 0.7503671368921594, 0.6262403847690501, 0.06294837870969494, 0.1827479710772315, 0.6130473256089501, 0.09558436414758531, 0.7229020607734424, 0.0521625003353936, 9.999999999998899e-05, 0.0045417273749306375, 0.04082898700384663, 0.038105466874249205, 0.011702019041306078, 0.10163264777775616, 0.02420193283076677, 0.10259182521404053, 0.19229379340632313, 0.06704031396221344, 0.16039545270076538, 0.13795732469402633, 0.15247150116166563, 0.1291635765839677, 0.15723684635692803, 0.0729987790843436, 0.15869104840723725, 0.18603173385566318, 0.09819792655437576, 0.13831856521895647, 0.19632995641561735, 0.09327372641653242, 0.13629441624996763, 0.27404628996378166, 0.08706812580490753, 0.16088444991010276, 0.042451519767365276, 0.01506137462115642, 0.08873657102252042, 0.15080591185645953, 0.026133085121897826, 0.06530121796308319, 0.21537656444641018, 9.999999999998899e-05, 0.06895080563679934, 0.24071703288451352, 0.12680763144743357, 0.1995088063539855, 0.22012531601555907, 0.16445403686111637, 0.15574271759162273, 0.2652809473298756, 0.17084795447630152, 0.17554779326067105, 0.1820812710047779, 0.1903410775367107, 0.19052035969786707, 0.20459724551329672, 0.2252485941319886, 0.1816238407530706, 0.20115692486911407, 9.999999999998899e-05, 9.999999999998899e-05, 0.18990001551555236, 0.14091305561995615, 0.11310381916179502, 0.09534536188030629, 0.11769457834699437, 0.06797726189754971, 0.07977562009819472, 0.06026375701093312, 0.1569522701674172, 0.10906921542511427, 0.21363619473723705, 0.05457605751189798, 0.16304500619177997, 0.06950988970112704, 0.11023380626752333, 0.09499899937530643, 0.1871909610514162, 0.18473646788954778, 0.17890361495072593, 0.14829104352400757, 0.17702049384606966, 0.20516678870808513, 0.10674202807060262, 0.17993799324427873, 0.1629677441472771, 0.11850212542269112, 0.19831520193321217, 0.06303090750613738, 0.037371261197822636, 0.038821955078599646, 0.07322652917450723, 0.009734072061499677, 0.07145272941242442, 0.08585728756891964, 0.05051005345408488, 0.047344492178373554]}, "mutation_prompt": null}
{"id": "06594787-a3db-49f6-ba0b-4986e5d2f783", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        # Initialize particle positions and velocities\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n\n        # Initialize global best position and value\n        global_best_position = np.random.uniform(-5.0, 5.0, self.dim)\n        global_best_value = np.inf\n\n        # Initialize SA temperature\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                # Update particle velocity\n                r1, r2 = np.random.rand(), np.random.rand()\n                swarm_velocity[i] = 0.3 * swarm_velocity[i] + self.c1 * r1 * (global_best_position - swarm_position[i]) + self.c2 * r2 * (global_best_position - swarm_position[i])\n\n                # Update particle position\n                swarm_position[i] = within_bounds(swarm_position[i] + swarm_velocity[i])\n\n                # Calculate fitness value\n                fitness_value = objective_function(swarm_position[i])\n\n                # Update global best\n                if fitness_value < global_best_value:\n                    global_best_value = fitness_value\n                    global_best_position = np.copy(swarm_position[i])\n\n                # Simulated Annealing\n                if np.random.rand() < np.exp((global_best_value - fitness_value) / temperature):\n                    swarm_position[i] = within_bounds(swarm_position[i])\n\n            # Cool down temperature\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to balance exploration and exploitation for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "08e65585-6e1a-4f94-a0bf-6c3d101839ea", "metadata": {"aucs": [0.9241527773705259, 0.1266088647309931, 0.7934551230739131, 0.14119754118636252, 0.008714420338430506, 0.9227950256020047, 0.837338584416201, 0.14981196946987652, 0.05678408781261968, 0.04107421616137075, 9.999999999998899e-05, 9.999999999998899e-05, 0.7826121254389469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06539870461089836, 9.999999999998899e-05, 0.027261646459248334, 0.053512247008518865, 0.006253344547261119, 0.037563974638465836, 0.11825552854843902, 0.024478279863362706, 0.05720606204688394, 0.03944483407281363, 9.999999999998899e-05, 0.0024435366713049245, 0.03886400510961252, 0.022957920363468887, 0.0058835131684249475, 0.06872381945304973, 9.999999999998899e-05, 0.015228791586676338, 0.03815635425254038, 0.09974401655865328, 0.055680573420932356, 0.05570729439633182, 0.03801008477814816, 0.9963790486374636, 0.07507876234447464, 0.04990951227461482, 0.9992245352437383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2154426672765829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05157449290495575, 0.1345837890987297, 0.05559632151195437, 0.20954436960075395, 0.032002881759167434, 9.999999999998899e-05, 9.999999999998899e-05, 0.05404065607714059, 0.08537075572187569, 0.03912223296746631, 9.999999999998899e-05, 9.999999999998899e-05, 0.12362794286251333, 0.10692855532603984, 0.10751206498211507, 9.999999999998899e-05, 9.999999999998899e-05, 0.13525144448700777, 0.2611293191159735, 0.13793555621063458, 0.379217085053585, 0.269324738291298, 0.13538828044602502, 0.5020601155166597, 0.136220335976037, 0.13467485409580493, 9.999999999998899e-05, 0.13298065385147018, 0.0963292326348465, 9.999999999998899e-05, 9.999999999998899e-05, 0.02162980404234427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003887798460415648, 0.024601374105269525, 9.999999999998899e-05, 0.030310447792760153, 9.999999999998899e-05, 9.999999999998899e-05, 0.01375390476670546, 0.01338893075768588, 0.013307821742002846, 9.999999999998899e-05, 0.053253161026460605, 0.17697896307208794, 9.999999999998899e-05, 9.999999999998899e-05, 0.08264835776411561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0777303336864501, 0.20166674269995588, 9.999999999998899e-05, 0.16433633662393443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7028061237931049, 0.8111323293694177, 0.7503671368921594, 0.6262403847690501, 0.06294837870969494, 0.1827479710772315, 0.6130473256089501, 0.09558436414758531, 0.7229020607734424, 0.0521625003353936, 9.999999999998899e-05, 0.0045417273749306375, 0.04082898700384663, 0.038105466874249205, 0.011702019041306078, 0.10163264777775616, 0.02420193283076677, 0.10259182521404053, 0.19229379340632313, 0.06704031396221344, 0.16039545270076538, 0.13795732469402633, 0.15247150116166563, 0.1291635765839677, 0.15723684635692803, 0.0729987790843436, 0.15869104840723725, 0.18603173385566318, 0.09819792655437576, 0.13831856521895647, 0.19632995641561735, 0.09327372641653242, 0.13629441624996763, 0.27404628996378166, 0.08706812580490753, 0.16088444991010276, 0.042451519767365276, 0.01506137462115642, 0.08873657102252042, 0.15080591185645953, 0.026133085121897826, 0.06530121796308319, 0.21537656444641018, 9.999999999998899e-05, 0.06895080563679934, 0.24071703288451352, 0.12680763144743357, 0.1995088063539855, 0.22012531601555907, 0.16445403686111637, 0.15574271759162273, 0.2652809473298756, 0.17084795447630152, 0.17554779326067105, 0.1820812710047779, 0.1903410775367107, 0.19052035969786707, 0.20459724551329672, 0.2252485941319886, 0.1816238407530706, 0.20115692486911407, 9.999999999998899e-05, 9.999999999998899e-05, 0.18990001551555236, 0.14091305561995615, 0.11310381916179502, 0.09534536188030629, 0.11769457834699437, 0.06797726189754971, 0.07977562009819472, 0.06026375701093312, 0.1569522701674172, 0.10906921542511427, 0.21363619473723705, 0.05457605751189798, 0.16304500619177997, 0.06950988970112704, 0.11023380626752333, 0.09499899937530643, 0.1871909610514162, 0.18473646788954778, 0.17890361495072593, 0.14829104352400757, 0.17702049384606966, 0.20516678870808513, 0.10674202807060262, 0.17993799324427873, 0.1629677441472771, 0.11850212542269112, 0.19831520193321217, 0.06303090750613738, 0.037371261197822636, 0.038821955078599646, 0.07322652917450723, 0.009734072061499677, 0.07145272941242442, 0.08585728756891964, 0.05051005345408488, 0.047344492178373554]}, "mutation_prompt": null}
{"id": "f845e42b-9677-4b5f-be5d-9c0000d0455d", "solution": "import numpy as np\n\nclass Improved_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.alpha = 0.3\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        # Initialize particle positions and velocities\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n\n        # Initialize global best position and value\n        global_best_position = np.random.uniform(-5.0, 5.0, self.dim)\n        global_best_value = np.inf\n\n        # Initialize SA temperature\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                # Update particle velocity\n                r1, r2 = np.random.rand(), np.random.rand()\n                swarm_velocity[i] = self.alpha * swarm_velocity[i] + self.c1 * r1 * (global_best_position - swarm_position[i]) + self.c2 * r2 * (global_best_position - swarm_position[i])\n\n                # Update particle position\n                swarm_position[i] = within_bounds(swarm_position[i] + swarm_velocity[i])\n\n                # Calculate fitness value\n                fitness_value = objective_function(swarm_position[i])\n\n                # Update global best\n                if fitness_value < global_best_value:\n                    global_best_value = fitness_value\n                    global_best_position = np.copy(swarm_position[i])\n\n                # Simulated Annealing\n                if np.random.rand() < np.exp((global_best_value - fitness_value) / temperature):\n                    swarm_position[i] = within_bounds(swarm_position[i])\n\n            # Cool down temperature\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Improved_PSO_SA_Optimizer", "description": "Improved the update rule for particle velocity and position in the PSO_SA_Optimizer algorithm to enhance convergence speed.", "configspace": "", "generation": 34, "fitness": 0.12808350794351048, "feedback": "The algorithm Improved_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "08e65585-6e1a-4f94-a0bf-6c3d101839ea", "metadata": {"aucs": [0.9241527773705259, 0.1266088647309931, 0.7934551230739131, 0.14119754118636252, 0.008714420338430506, 0.9227950256020047, 0.837338584416201, 0.14981196946987652, 0.05678408781261968, 0.04107421616137075, 9.999999999998899e-05, 9.999999999998899e-05, 0.7826121254389469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06539870461089836, 9.999999999998899e-05, 0.027261646459248334, 0.053512247008518865, 0.006253344547261119, 0.037563974638465836, 0.11825552854843902, 0.024478279863362706, 0.05720606204688394, 0.03944483407281363, 9.999999999998899e-05, 0.0024435366713049245, 0.03886400510961252, 0.022957920363468887, 0.0058835131684249475, 0.06872381945304973, 9.999999999998899e-05, 0.015228791586676338, 0.03815635425254038, 0.09974401655865328, 0.055680573420932356, 0.05570729439633182, 0.03801008477814816, 0.9963790486374636, 0.07507876234447464, 0.04990951227461482, 0.9992245352437383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2154426672765829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05157449290495575, 0.1345837890987297, 0.05559632151195437, 0.20954436960075395, 0.032002881759167434, 9.999999999998899e-05, 9.999999999998899e-05, 0.05404065607714059, 0.08537075572187569, 0.03912223296746631, 9.999999999998899e-05, 9.999999999998899e-05, 0.12362794286251333, 0.10692855532603984, 0.10751206498211507, 9.999999999998899e-05, 9.999999999998899e-05, 0.13525144448700777, 0.2611293191159735, 0.13793555621063458, 0.379217085053585, 0.269324738291298, 0.13538828044602502, 0.5020601155166597, 0.136220335976037, 0.13467485409580493, 9.999999999998899e-05, 0.13298065385147018, 0.0963292326348465, 9.999999999998899e-05, 9.999999999998899e-05, 0.02162980404234427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003887798460415648, 0.024601374105269525, 9.999999999998899e-05, 0.030310447792760153, 9.999999999998899e-05, 9.999999999998899e-05, 0.01375390476670546, 0.01338893075768588, 0.013307821742002846, 9.999999999998899e-05, 0.053253161026460605, 0.17697896307208794, 9.999999999998899e-05, 9.999999999998899e-05, 0.08264835776411561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0777303336864501, 0.20166674269995588, 9.999999999998899e-05, 0.16433633662393443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7028061237931049, 0.8111323293694177, 0.7503671368921594, 0.6262403847690501, 0.06294837870969494, 0.1827479710772315, 0.6130473256089501, 0.09558436414758531, 0.7229020607734424, 0.0521625003353936, 9.999999999998899e-05, 0.0045417273749306375, 0.04082898700384663, 0.038105466874249205, 0.011702019041306078, 0.10163264777775616, 0.02420193283076677, 0.10259182521404053, 0.19229379340632313, 0.06704031396221344, 0.16039545270076538, 0.13795732469402633, 0.15247150116166563, 0.1291635765839677, 0.15723684635692803, 0.0729987790843436, 0.15869104840723725, 0.18603173385566318, 0.09819792655437576, 0.13831856521895647, 0.19632995641561735, 0.09327372641653242, 0.13629441624996763, 0.27404628996378166, 0.08706812580490753, 0.16088444991010276, 0.042451519767365276, 0.01506137462115642, 0.08873657102252042, 0.15080591185645953, 0.026133085121897826, 0.06530121796308319, 0.21537656444641018, 9.999999999998899e-05, 0.06895080563679934, 0.24071703288451352, 0.12680763144743357, 0.1995088063539855, 0.22012531601555907, 0.16445403686111637, 0.15574271759162273, 0.2652809473298756, 0.17084795447630152, 0.17554779326067105, 0.1820812710047779, 0.1903410775367107, 0.19052035969786707, 0.20459724551329672, 0.2252485941319886, 0.1816238407530706, 0.20115692486911407, 9.999999999998899e-05, 9.999999999998899e-05, 0.18990001551555236, 0.14091305561995615, 0.11310381916179502, 0.09534536188030629, 0.11769457834699437, 0.06797726189754971, 0.07977562009819472, 0.06026375701093312, 0.1569522701674172, 0.10906921542511427, 0.21363619473723705, 0.05457605751189798, 0.16304500619177997, 0.06950988970112704, 0.11023380626752333, 0.09499899937530643, 0.1871909610514162, 0.18473646788954778, 0.17890361495072593, 0.14829104352400757, 0.17702049384606966, 0.20516678870808513, 0.10674202807060262, 0.17993799324427873, 0.1629677441472771, 0.11850212542269112, 0.19831520193321217, 0.06303090750613738, 0.037371261197822636, 0.038821955078599646, 0.07322652917450723, 0.009734072061499677, 0.07145272941242442, 0.08585728756891964, 0.05051005345408488, 0.047344492178373554]}, "mutation_prompt": null}
{"id": "b4775866-c55d-40b4-9882-f0e7525c5818", "solution": "import numpy as np\n\nclass Improved_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = np.random.uniform(-5.0, 5.0, self.dim)\n        global_best_value = np.inf\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                r1, r2 = np.random.rand(), np.random.rand()\n                swarm_velocity[i] = 0.3 * swarm_velocity[i] + self.c1 * r1 * (global_best_position - swarm_position[i]) + self.c2 * r2 * (global_best_position - swarm_position[i])\n                swarm_position[i] = within_bounds(swarm_position[i] + swarm_velocity[i])\n                fitness_value = objective_function(swarm_position[i])\n\n                if fitness_value < global_best_value:\n                    global_best_value, global_best_position = fitness_value, np.copy(swarm_position[i])\n\n                if np.random.rand() < np.exp((global_best_value - fitness_value) / temperature):\n                    swarm_position[i] = within_bounds(swarm_position[i])\n\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Improved_PSO_SA_Optimizer", "description": "Improved PSO_SA_Optimizer algorithm by consolidating repeated operations and optimizing data structures.", "configspace": "", "generation": 35, "fitness": 0.12808350794351048, "feedback": "The algorithm Improved_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "08e65585-6e1a-4f94-a0bf-6c3d101839ea", "metadata": {"aucs": [0.9241527773705259, 0.1266088647309931, 0.7934551230739131, 0.14119754118636252, 0.008714420338430506, 0.9227950256020047, 0.837338584416201, 0.14981196946987652, 0.05678408781261968, 0.04107421616137075, 9.999999999998899e-05, 9.999999999998899e-05, 0.7826121254389469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06539870461089836, 9.999999999998899e-05, 0.027261646459248334, 0.053512247008518865, 0.006253344547261119, 0.037563974638465836, 0.11825552854843902, 0.024478279863362706, 0.05720606204688394, 0.03944483407281363, 9.999999999998899e-05, 0.0024435366713049245, 0.03886400510961252, 0.022957920363468887, 0.0058835131684249475, 0.06872381945304973, 9.999999999998899e-05, 0.015228791586676338, 0.03815635425254038, 0.09974401655865328, 0.055680573420932356, 0.05570729439633182, 0.03801008477814816, 0.9963790486374636, 0.07507876234447464, 0.04990951227461482, 0.9992245352437383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2154426672765829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05157449290495575, 0.1345837890987297, 0.05559632151195437, 0.20954436960075395, 0.032002881759167434, 9.999999999998899e-05, 9.999999999998899e-05, 0.05404065607714059, 0.08537075572187569, 0.03912223296746631, 9.999999999998899e-05, 9.999999999998899e-05, 0.12362794286251333, 0.10692855532603984, 0.10751206498211507, 9.999999999998899e-05, 9.999999999998899e-05, 0.13525144448700777, 0.2611293191159735, 0.13793555621063458, 0.379217085053585, 0.269324738291298, 0.13538828044602502, 0.5020601155166597, 0.136220335976037, 0.13467485409580493, 9.999999999998899e-05, 0.13298065385147018, 0.0963292326348465, 9.999999999998899e-05, 9.999999999998899e-05, 0.02162980404234427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003887798460415648, 0.024601374105269525, 9.999999999998899e-05, 0.030310447792760153, 9.999999999998899e-05, 9.999999999998899e-05, 0.01375390476670546, 0.01338893075768588, 0.013307821742002846, 9.999999999998899e-05, 0.053253161026460605, 0.17697896307208794, 9.999999999998899e-05, 9.999999999998899e-05, 0.08264835776411561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0777303336864501, 0.20166674269995588, 9.999999999998899e-05, 0.16433633662393443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7028061237931049, 0.8111323293694177, 0.7503671368921594, 0.6262403847690501, 0.06294837870969494, 0.1827479710772315, 0.6130473256089501, 0.09558436414758531, 0.7229020607734424, 0.0521625003353936, 9.999999999998899e-05, 0.0045417273749306375, 0.04082898700384663, 0.038105466874249205, 0.011702019041306078, 0.10163264777775616, 0.02420193283076677, 0.10259182521404053, 0.19229379340632313, 0.06704031396221344, 0.16039545270076538, 0.13795732469402633, 0.15247150116166563, 0.1291635765839677, 0.15723684635692803, 0.0729987790843436, 0.15869104840723725, 0.18603173385566318, 0.09819792655437576, 0.13831856521895647, 0.19632995641561735, 0.09327372641653242, 0.13629441624996763, 0.27404628996378166, 0.08706812580490753, 0.16088444991010276, 0.042451519767365276, 0.01506137462115642, 0.08873657102252042, 0.15080591185645953, 0.026133085121897826, 0.06530121796308319, 0.21537656444641018, 9.999999999998899e-05, 0.06895080563679934, 0.24071703288451352, 0.12680763144743357, 0.1995088063539855, 0.22012531601555907, 0.16445403686111637, 0.15574271759162273, 0.2652809473298756, 0.17084795447630152, 0.17554779326067105, 0.1820812710047779, 0.1903410775367107, 0.19052035969786707, 0.20459724551329672, 0.2252485941319886, 0.1816238407530706, 0.20115692486911407, 9.999999999998899e-05, 9.999999999998899e-05, 0.18990001551555236, 0.14091305561995615, 0.11310381916179502, 0.09534536188030629, 0.11769457834699437, 0.06797726189754971, 0.07977562009819472, 0.06026375701093312, 0.1569522701674172, 0.10906921542511427, 0.21363619473723705, 0.05457605751189798, 0.16304500619177997, 0.06950988970112704, 0.11023380626752333, 0.09499899937530643, 0.1871909610514162, 0.18473646788954778, 0.17890361495072593, 0.14829104352400757, 0.17702049384606966, 0.20516678870808513, 0.10674202807060262, 0.17993799324427873, 0.1629677441472771, 0.11850212542269112, 0.19831520193321217, 0.06303090750613738, 0.037371261197822636, 0.038821955078599646, 0.07322652917450723, 0.009734072061499677, 0.07145272941242442, 0.08585728756891964, 0.05051005345408488, 0.047344492178373554]}, "mutation_prompt": null}
{"id": "4d4bcccd-c513-478f-a53e-588dbd0cd51c", "solution": "import numpy as np\n\nclass Optimized_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget, self.dim, self.swarm_size, self.max_iter, self.c1, self.c2, self.initial_temp, self.cooling_rate = budget, dim, swarm_size, max_iter, c1, c2, initial_temp, cooling_rate\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        within_bounds = lambda x: np.clip(x, -5.0, 5.0)\n        get_rand = np.random.rand\n\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = np.random.uniform(-5.0, 5.0, self.dim)\n        global_best_value = np.inf\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                r1, r2 = get_rand(), get_rand()\n                swarm_velocity[i] = 0.3 * swarm_velocity[i] + self.c1 * r1 * (global_best_position - swarm_position[i]) + self.c2 * r2 * (global_best_position - swarm_position[i])\n                swarm_position[i] = within_bounds(swarm_position[i] + swarm_velocity[i])\n                fitness_value = objective_function(swarm_position[i])\n\n                if fitness_value < global_best_value:\n                    global_best_value, global_best_position = fitness_value, np.copy(swarm_position[i])\n\n                if get_rand() < np.exp((global_best_value - fitness_value) / temperature):\n                    swarm_position[i] = within_bounds(swarm_position[i])\n\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Optimized_PSO_SA_Optimizer", "description": "Optimizing the particle update process for enhanced efficiency.", "configspace": "", "generation": 36, "fitness": 0.12808350794351048, "feedback": "The algorithm Optimized_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "08e65585-6e1a-4f94-a0bf-6c3d101839ea", "metadata": {"aucs": [0.9241527773705259, 0.1266088647309931, 0.7934551230739131, 0.14119754118636252, 0.008714420338430506, 0.9227950256020047, 0.837338584416201, 0.14981196946987652, 0.05678408781261968, 0.04107421616137075, 9.999999999998899e-05, 9.999999999998899e-05, 0.7826121254389469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06539870461089836, 9.999999999998899e-05, 0.027261646459248334, 0.053512247008518865, 0.006253344547261119, 0.037563974638465836, 0.11825552854843902, 0.024478279863362706, 0.05720606204688394, 0.03944483407281363, 9.999999999998899e-05, 0.0024435366713049245, 0.03886400510961252, 0.022957920363468887, 0.0058835131684249475, 0.06872381945304973, 9.999999999998899e-05, 0.015228791586676338, 0.03815635425254038, 0.09974401655865328, 0.055680573420932356, 0.05570729439633182, 0.03801008477814816, 0.9963790486374636, 0.07507876234447464, 0.04990951227461482, 0.9992245352437383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2154426672765829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05157449290495575, 0.1345837890987297, 0.05559632151195437, 0.20954436960075395, 0.032002881759167434, 9.999999999998899e-05, 9.999999999998899e-05, 0.05404065607714059, 0.08537075572187569, 0.03912223296746631, 9.999999999998899e-05, 9.999999999998899e-05, 0.12362794286251333, 0.10692855532603984, 0.10751206498211507, 9.999999999998899e-05, 9.999999999998899e-05, 0.13525144448700777, 0.2611293191159735, 0.13793555621063458, 0.379217085053585, 0.269324738291298, 0.13538828044602502, 0.5020601155166597, 0.136220335976037, 0.13467485409580493, 9.999999999998899e-05, 0.13298065385147018, 0.0963292326348465, 9.999999999998899e-05, 9.999999999998899e-05, 0.02162980404234427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003887798460415648, 0.024601374105269525, 9.999999999998899e-05, 0.030310447792760153, 9.999999999998899e-05, 9.999999999998899e-05, 0.01375390476670546, 0.01338893075768588, 0.013307821742002846, 9.999999999998899e-05, 0.053253161026460605, 0.17697896307208794, 9.999999999998899e-05, 9.999999999998899e-05, 0.08264835776411561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0777303336864501, 0.20166674269995588, 9.999999999998899e-05, 0.16433633662393443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7028061237931049, 0.8111323293694177, 0.7503671368921594, 0.6262403847690501, 0.06294837870969494, 0.1827479710772315, 0.6130473256089501, 0.09558436414758531, 0.7229020607734424, 0.0521625003353936, 9.999999999998899e-05, 0.0045417273749306375, 0.04082898700384663, 0.038105466874249205, 0.011702019041306078, 0.10163264777775616, 0.02420193283076677, 0.10259182521404053, 0.19229379340632313, 0.06704031396221344, 0.16039545270076538, 0.13795732469402633, 0.15247150116166563, 0.1291635765839677, 0.15723684635692803, 0.0729987790843436, 0.15869104840723725, 0.18603173385566318, 0.09819792655437576, 0.13831856521895647, 0.19632995641561735, 0.09327372641653242, 0.13629441624996763, 0.27404628996378166, 0.08706812580490753, 0.16088444991010276, 0.042451519767365276, 0.01506137462115642, 0.08873657102252042, 0.15080591185645953, 0.026133085121897826, 0.06530121796308319, 0.21537656444641018, 9.999999999998899e-05, 0.06895080563679934, 0.24071703288451352, 0.12680763144743357, 0.1995088063539855, 0.22012531601555907, 0.16445403686111637, 0.15574271759162273, 0.2652809473298756, 0.17084795447630152, 0.17554779326067105, 0.1820812710047779, 0.1903410775367107, 0.19052035969786707, 0.20459724551329672, 0.2252485941319886, 0.1816238407530706, 0.20115692486911407, 9.999999999998899e-05, 9.999999999998899e-05, 0.18990001551555236, 0.14091305561995615, 0.11310381916179502, 0.09534536188030629, 0.11769457834699437, 0.06797726189754971, 0.07977562009819472, 0.06026375701093312, 0.1569522701674172, 0.10906921542511427, 0.21363619473723705, 0.05457605751189798, 0.16304500619177997, 0.06950988970112704, 0.11023380626752333, 0.09499899937530643, 0.1871909610514162, 0.18473646788954778, 0.17890361495072593, 0.14829104352400757, 0.17702049384606966, 0.20516678870808513, 0.10674202807060262, 0.17993799324427873, 0.1629677441472771, 0.11850212542269112, 0.19831520193321217, 0.06303090750613738, 0.037371261197822636, 0.038821955078599646, 0.07322652917450723, 0.009734072061499677, 0.07145272941242442, 0.08585728756891964, 0.05051005345408488, 0.047344492178373554]}, "mutation_prompt": null}
{"id": "295f07e5-161e-4f83-bf23-7f4df8268cd5", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        # Initialize particle positions and velocities\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n\n        # Initialize global best position and value\n        global_best_position = np.random.uniform(-5.0, 5.0, self.dim)\n        global_best_value = np.inf\n\n        # Initialize SA temperature\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                # Update particle velocity\n                r1, r2 = np.random.rand(), np.random.rand()\n                swarm_velocity[i] = 0.3 * swarm_velocity[i] + self.c1 * r1 * (global_best_position - swarm_position[i]) + self.c2 * r2 * (global_best_position - swarm_position[i])\n\n                # Update particle position\n                swarm_position[i] = within_bounds(swarm_position[i] + swarm_velocity[i])\n\n                # Calculate fitness value\n                fitness_value = objective_function(swarm_position[i])\n\n                # Update global best\n                if fitness_value < global_best_value:\n                    global_best_value = fitness_value\n                    global_best_position = np.copy(swarm_position[i])\n\n                # Simulated Annealing\n                if np.random.rand() < np.exp((global_best_value - fitness_value) / temperature):\n                    swarm_position[i] = within_bounds(swarm_position[i])\n\n            # Cool down temperature\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to balance exploration and exploitation for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "08e65585-6e1a-4f94-a0bf-6c3d101839ea", "metadata": {"aucs": [0.9241527773705259, 0.1266088647309931, 0.7934551230739131, 0.14119754118636252, 0.008714420338430506, 0.9227950256020047, 0.837338584416201, 0.14981196946987652, 0.05678408781261968, 0.04107421616137075, 9.999999999998899e-05, 9.999999999998899e-05, 0.7826121254389469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06539870461089836, 9.999999999998899e-05, 0.027261646459248334, 0.053512247008518865, 0.006253344547261119, 0.037563974638465836, 0.11825552854843902, 0.024478279863362706, 0.05720606204688394, 0.03944483407281363, 9.999999999998899e-05, 0.0024435366713049245, 0.03886400510961252, 0.022957920363468887, 0.0058835131684249475, 0.06872381945304973, 9.999999999998899e-05, 0.015228791586676338, 0.03815635425254038, 0.09974401655865328, 0.055680573420932356, 0.05570729439633182, 0.03801008477814816, 0.9963790486374636, 0.07507876234447464, 0.04990951227461482, 0.9992245352437383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2154426672765829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05157449290495575, 0.1345837890987297, 0.05559632151195437, 0.20954436960075395, 0.032002881759167434, 9.999999999998899e-05, 9.999999999998899e-05, 0.05404065607714059, 0.08537075572187569, 0.03912223296746631, 9.999999999998899e-05, 9.999999999998899e-05, 0.12362794286251333, 0.10692855532603984, 0.10751206498211507, 9.999999999998899e-05, 9.999999999998899e-05, 0.13525144448700777, 0.2611293191159735, 0.13793555621063458, 0.379217085053585, 0.269324738291298, 0.13538828044602502, 0.5020601155166597, 0.136220335976037, 0.13467485409580493, 9.999999999998899e-05, 0.13298065385147018, 0.0963292326348465, 9.999999999998899e-05, 9.999999999998899e-05, 0.02162980404234427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003887798460415648, 0.024601374105269525, 9.999999999998899e-05, 0.030310447792760153, 9.999999999998899e-05, 9.999999999998899e-05, 0.01375390476670546, 0.01338893075768588, 0.013307821742002846, 9.999999999998899e-05, 0.053253161026460605, 0.17697896307208794, 9.999999999998899e-05, 9.999999999998899e-05, 0.08264835776411561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0777303336864501, 0.20166674269995588, 9.999999999998899e-05, 0.16433633662393443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7028061237931049, 0.8111323293694177, 0.7503671368921594, 0.6262403847690501, 0.06294837870969494, 0.1827479710772315, 0.6130473256089501, 0.09558436414758531, 0.7229020607734424, 0.0521625003353936, 9.999999999998899e-05, 0.0045417273749306375, 0.04082898700384663, 0.038105466874249205, 0.011702019041306078, 0.10163264777775616, 0.02420193283076677, 0.10259182521404053, 0.19229379340632313, 0.06704031396221344, 0.16039545270076538, 0.13795732469402633, 0.15247150116166563, 0.1291635765839677, 0.15723684635692803, 0.0729987790843436, 0.15869104840723725, 0.18603173385566318, 0.09819792655437576, 0.13831856521895647, 0.19632995641561735, 0.09327372641653242, 0.13629441624996763, 0.27404628996378166, 0.08706812580490753, 0.16088444991010276, 0.042451519767365276, 0.01506137462115642, 0.08873657102252042, 0.15080591185645953, 0.026133085121897826, 0.06530121796308319, 0.21537656444641018, 9.999999999998899e-05, 0.06895080563679934, 0.24071703288451352, 0.12680763144743357, 0.1995088063539855, 0.22012531601555907, 0.16445403686111637, 0.15574271759162273, 0.2652809473298756, 0.17084795447630152, 0.17554779326067105, 0.1820812710047779, 0.1903410775367107, 0.19052035969786707, 0.20459724551329672, 0.2252485941319886, 0.1816238407530706, 0.20115692486911407, 9.999999999998899e-05, 9.999999999998899e-05, 0.18990001551555236, 0.14091305561995615, 0.11310381916179502, 0.09534536188030629, 0.11769457834699437, 0.06797726189754971, 0.07977562009819472, 0.06026375701093312, 0.1569522701674172, 0.10906921542511427, 0.21363619473723705, 0.05457605751189798, 0.16304500619177997, 0.06950988970112704, 0.11023380626752333, 0.09499899937530643, 0.1871909610514162, 0.18473646788954778, 0.17890361495072593, 0.14829104352400757, 0.17702049384606966, 0.20516678870808513, 0.10674202807060262, 0.17993799324427873, 0.1629677441472771, 0.11850212542269112, 0.19831520193321217, 0.06303090750613738, 0.037371261197822636, 0.038821955078599646, 0.07322652917450723, 0.009734072061499677, 0.07145272941242442, 0.08585728756891964, 0.05051005345408488, 0.047344492178373554]}, "mutation_prompt": null}
{"id": "9fe95098-8d7a-4ace-b38b-d55b8bc07095", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        # Initialize particle positions and velocities\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n\n        # Initialize global best position and value\n        global_best_position = np.random.uniform(-5.0, 5.0, self.dim)\n        global_best_value = np.inf\n\n        # Initialize SA temperature\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                # Update particle velocity\n                r1, r2 = np.random.rand(), np.random.rand()\n                swarm_velocity[i] = 0.3 * swarm_velocity[i] + self.c1 * r1 * (global_best_position - swarm_position[i]) + self.c2 * r2 * (global_best_position - swarm_position[i])\n\n                # Update particle position\n                swarm_position[i] = within_bounds(swarm_position[i] + swarm_velocity[i])\n\n                # Calculate fitness value\n                fitness_value = objective_function(swarm_position[i])\n\n                # Update global best\n                if fitness_value < global_best_value:\n                    global_best_value = fitness_value\n                    global_best_position = np.copy(swarm_position[i])\n\n                # Simulated Annealing\n                if np.random.rand() < np.exp((global_best_value - fitness_value) / temperature):\n                    swarm_position[i] = within_bounds(swarm_position[i])\n\n            # Cool down temperature\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to balance exploration and exploitation for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "08e65585-6e1a-4f94-a0bf-6c3d101839ea", "metadata": {"aucs": [0.9241527773705259, 0.1266088647309931, 0.7934551230739131, 0.14119754118636252, 0.008714420338430506, 0.9227950256020047, 0.837338584416201, 0.14981196946987652, 0.05678408781261968, 0.04107421616137075, 9.999999999998899e-05, 9.999999999998899e-05, 0.7826121254389469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06539870461089836, 9.999999999998899e-05, 0.027261646459248334, 0.053512247008518865, 0.006253344547261119, 0.037563974638465836, 0.11825552854843902, 0.024478279863362706, 0.05720606204688394, 0.03944483407281363, 9.999999999998899e-05, 0.0024435366713049245, 0.03886400510961252, 0.022957920363468887, 0.0058835131684249475, 0.06872381945304973, 9.999999999998899e-05, 0.015228791586676338, 0.03815635425254038, 0.09974401655865328, 0.055680573420932356, 0.05570729439633182, 0.03801008477814816, 0.9963790486374636, 0.07507876234447464, 0.04990951227461482, 0.9992245352437383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2154426672765829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05157449290495575, 0.1345837890987297, 0.05559632151195437, 0.20954436960075395, 0.032002881759167434, 9.999999999998899e-05, 9.999999999998899e-05, 0.05404065607714059, 0.08537075572187569, 0.03912223296746631, 9.999999999998899e-05, 9.999999999998899e-05, 0.12362794286251333, 0.10692855532603984, 0.10751206498211507, 9.999999999998899e-05, 9.999999999998899e-05, 0.13525144448700777, 0.2611293191159735, 0.13793555621063458, 0.379217085053585, 0.269324738291298, 0.13538828044602502, 0.5020601155166597, 0.136220335976037, 0.13467485409580493, 9.999999999998899e-05, 0.13298065385147018, 0.0963292326348465, 9.999999999998899e-05, 9.999999999998899e-05, 0.02162980404234427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003887798460415648, 0.024601374105269525, 9.999999999998899e-05, 0.030310447792760153, 9.999999999998899e-05, 9.999999999998899e-05, 0.01375390476670546, 0.01338893075768588, 0.013307821742002846, 9.999999999998899e-05, 0.053253161026460605, 0.17697896307208794, 9.999999999998899e-05, 9.999999999998899e-05, 0.08264835776411561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0777303336864501, 0.20166674269995588, 9.999999999998899e-05, 0.16433633662393443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7028061237931049, 0.8111323293694177, 0.7503671368921594, 0.6262403847690501, 0.06294837870969494, 0.1827479710772315, 0.6130473256089501, 0.09558436414758531, 0.7229020607734424, 0.0521625003353936, 9.999999999998899e-05, 0.0045417273749306375, 0.04082898700384663, 0.038105466874249205, 0.011702019041306078, 0.10163264777775616, 0.02420193283076677, 0.10259182521404053, 0.19229379340632313, 0.06704031396221344, 0.16039545270076538, 0.13795732469402633, 0.15247150116166563, 0.1291635765839677, 0.15723684635692803, 0.0729987790843436, 0.15869104840723725, 0.18603173385566318, 0.09819792655437576, 0.13831856521895647, 0.19632995641561735, 0.09327372641653242, 0.13629441624996763, 0.27404628996378166, 0.08706812580490753, 0.16088444991010276, 0.042451519767365276, 0.01506137462115642, 0.08873657102252042, 0.15080591185645953, 0.026133085121897826, 0.06530121796308319, 0.21537656444641018, 9.999999999998899e-05, 0.06895080563679934, 0.24071703288451352, 0.12680763144743357, 0.1995088063539855, 0.22012531601555907, 0.16445403686111637, 0.15574271759162273, 0.2652809473298756, 0.17084795447630152, 0.17554779326067105, 0.1820812710047779, 0.1903410775367107, 0.19052035969786707, 0.20459724551329672, 0.2252485941319886, 0.1816238407530706, 0.20115692486911407, 9.999999999998899e-05, 9.999999999998899e-05, 0.18990001551555236, 0.14091305561995615, 0.11310381916179502, 0.09534536188030629, 0.11769457834699437, 0.06797726189754971, 0.07977562009819472, 0.06026375701093312, 0.1569522701674172, 0.10906921542511427, 0.21363619473723705, 0.05457605751189798, 0.16304500619177997, 0.06950988970112704, 0.11023380626752333, 0.09499899937530643, 0.1871909610514162, 0.18473646788954778, 0.17890361495072593, 0.14829104352400757, 0.17702049384606966, 0.20516678870808513, 0.10674202807060262, 0.17993799324427873, 0.1629677441472771, 0.11850212542269112, 0.19831520193321217, 0.06303090750613738, 0.037371261197822636, 0.038821955078599646, 0.07322652917450723, 0.009734072061499677, 0.07145272941242442, 0.08585728756891964, 0.05051005345408488, 0.047344492178373554]}, "mutation_prompt": null}
{"id": "b8fc1fc5-acb0-4047-bd63-acbb4deab140", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        # Initialize particle positions and velocities\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n\n        # Initialize global best position and value\n        global_best_position = np.random.uniform(-5.0, 5.0, self.dim)\n        global_best_value = np.inf\n\n        # Initialize SA temperature\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                # Update particle velocity\n                r1, r2 = np.random.rand(), np.random.rand()\n                swarm_velocity[i] = 0.3 * swarm_velocity[i] + self.c1 * r1 * (global_best_position - swarm_position[i]) + self.c2 * r2 * (global_best_position - swarm_position[i])\n\n                # Update particle position\n                swarm_position[i] = within_bounds(swarm_position[i] + swarm_velocity[i])\n\n                # Calculate fitness value\n                fitness_value = objective_function(swarm_position[i])\n\n                # Update global best\n                if fitness_value < global_best_value:\n                    global_best_value = fitness_value\n                    global_best_position = np.copy(swarm_position[i])\n\n                # Simulated Annealing\n                if np.random.rand() < np.exp((global_best_value - fitness_value) / temperature):\n                    swarm_position[i] = within_bounds(swarm_position[i])\n\n            # Cool down temperature\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to balance exploration and exploitation for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "08e65585-6e1a-4f94-a0bf-6c3d101839ea", "metadata": {"aucs": [0.9241527773705259, 0.1266088647309931, 0.7934551230739131, 0.14119754118636252, 0.008714420338430506, 0.9227950256020047, 0.837338584416201, 0.14981196946987652, 0.05678408781261968, 0.04107421616137075, 9.999999999998899e-05, 9.999999999998899e-05, 0.7826121254389469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06539870461089836, 9.999999999998899e-05, 0.027261646459248334, 0.053512247008518865, 0.006253344547261119, 0.037563974638465836, 0.11825552854843902, 0.024478279863362706, 0.05720606204688394, 0.03944483407281363, 9.999999999998899e-05, 0.0024435366713049245, 0.03886400510961252, 0.022957920363468887, 0.0058835131684249475, 0.06872381945304973, 9.999999999998899e-05, 0.015228791586676338, 0.03815635425254038, 0.09974401655865328, 0.055680573420932356, 0.05570729439633182, 0.03801008477814816, 0.9963790486374636, 0.07507876234447464, 0.04990951227461482, 0.9992245352437383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2154426672765829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05157449290495575, 0.1345837890987297, 0.05559632151195437, 0.20954436960075395, 0.032002881759167434, 9.999999999998899e-05, 9.999999999998899e-05, 0.05404065607714059, 0.08537075572187569, 0.03912223296746631, 9.999999999998899e-05, 9.999999999998899e-05, 0.12362794286251333, 0.10692855532603984, 0.10751206498211507, 9.999999999998899e-05, 9.999999999998899e-05, 0.13525144448700777, 0.2611293191159735, 0.13793555621063458, 0.379217085053585, 0.269324738291298, 0.13538828044602502, 0.5020601155166597, 0.136220335976037, 0.13467485409580493, 9.999999999998899e-05, 0.13298065385147018, 0.0963292326348465, 9.999999999998899e-05, 9.999999999998899e-05, 0.02162980404234427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003887798460415648, 0.024601374105269525, 9.999999999998899e-05, 0.030310447792760153, 9.999999999998899e-05, 9.999999999998899e-05, 0.01375390476670546, 0.01338893075768588, 0.013307821742002846, 9.999999999998899e-05, 0.053253161026460605, 0.17697896307208794, 9.999999999998899e-05, 9.999999999998899e-05, 0.08264835776411561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0777303336864501, 0.20166674269995588, 9.999999999998899e-05, 0.16433633662393443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7028061237931049, 0.8111323293694177, 0.7503671368921594, 0.6262403847690501, 0.06294837870969494, 0.1827479710772315, 0.6130473256089501, 0.09558436414758531, 0.7229020607734424, 0.0521625003353936, 9.999999999998899e-05, 0.0045417273749306375, 0.04082898700384663, 0.038105466874249205, 0.011702019041306078, 0.10163264777775616, 0.02420193283076677, 0.10259182521404053, 0.19229379340632313, 0.06704031396221344, 0.16039545270076538, 0.13795732469402633, 0.15247150116166563, 0.1291635765839677, 0.15723684635692803, 0.0729987790843436, 0.15869104840723725, 0.18603173385566318, 0.09819792655437576, 0.13831856521895647, 0.19632995641561735, 0.09327372641653242, 0.13629441624996763, 0.27404628996378166, 0.08706812580490753, 0.16088444991010276, 0.042451519767365276, 0.01506137462115642, 0.08873657102252042, 0.15080591185645953, 0.026133085121897826, 0.06530121796308319, 0.21537656444641018, 9.999999999998899e-05, 0.06895080563679934, 0.24071703288451352, 0.12680763144743357, 0.1995088063539855, 0.22012531601555907, 0.16445403686111637, 0.15574271759162273, 0.2652809473298756, 0.17084795447630152, 0.17554779326067105, 0.1820812710047779, 0.1903410775367107, 0.19052035969786707, 0.20459724551329672, 0.2252485941319886, 0.1816238407530706, 0.20115692486911407, 9.999999999998899e-05, 9.999999999998899e-05, 0.18990001551555236, 0.14091305561995615, 0.11310381916179502, 0.09534536188030629, 0.11769457834699437, 0.06797726189754971, 0.07977562009819472, 0.06026375701093312, 0.1569522701674172, 0.10906921542511427, 0.21363619473723705, 0.05457605751189798, 0.16304500619177997, 0.06950988970112704, 0.11023380626752333, 0.09499899937530643, 0.1871909610514162, 0.18473646788954778, 0.17890361495072593, 0.14829104352400757, 0.17702049384606966, 0.20516678870808513, 0.10674202807060262, 0.17993799324427873, 0.1629677441472771, 0.11850212542269112, 0.19831520193321217, 0.06303090750613738, 0.037371261197822636, 0.038821955078599646, 0.07322652917450723, 0.009734072061499677, 0.07145272941242442, 0.08585728756891964, 0.05051005345408488, 0.047344492178373554]}, "mutation_prompt": null}
{"id": "fb8c6b82-10f9-4e6f-ae75-f49b097f030c", "solution": "import numpy as np\n\nclass PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        def objective_function(x):\n            return func(x)\n\n        def within_bounds(x):\n            return np.clip(x, -5.0, 5.0)\n\n        # Initialize particle positions and velocities\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n\n        # Initialize global best position and value\n        global_best_position = np.random.uniform(-5.0, 5.0, self.dim)\n        global_best_value = np.inf\n\n        # Initialize SA temperature\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            for i in range(self.swarm_size):\n                # Update particle velocity\n                r1, r2 = np.random.rand(), np.random.rand()\n                swarm_velocity[i] = 0.3 * swarm_velocity[i] + self.c1 * r1 * (global_best_position - swarm_position[i]) + self.c2 * r2 * (global_best_position - swarm_position[i])\n\n                # Update particle position\n                swarm_position[i] = within_bounds(swarm_position[i] + swarm_velocity[i])\n\n                # Calculate fitness value\n                fitness_value = objective_function(swarm_position[i])\n\n                # Update global best\n                if fitness_value < global_best_value:\n                    global_best_value = fitness_value\n                    global_best_position = np.copy(swarm_position[i])\n\n                # Simulated Annealing\n                if np.random.rand() < np.exp((global_best_value - fitness_value) / temperature):\n                    swarm_position[i] = within_bounds(swarm_position[i])\n\n            # Cool down temperature\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "PSO_SA_Optimizer", "description": "A novel metaheuristic algorithm combining Particle Swarm Optimization (PSO) and Simulated Annealing (SA) to balance exploration and exploitation for black box optimization problems.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "08e65585-6e1a-4f94-a0bf-6c3d101839ea", "metadata": {"aucs": [0.9241527773705259, 0.1266088647309931, 0.7934551230739131, 0.14119754118636252, 0.008714420338430506, 0.9227950256020047, 0.837338584416201, 0.14981196946987652, 0.05678408781261968, 0.04107421616137075, 9.999999999998899e-05, 9.999999999998899e-05, 0.7826121254389469, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06539870461089836, 9.999999999998899e-05, 0.027261646459248334, 0.053512247008518865, 0.006253344547261119, 0.037563974638465836, 0.11825552854843902, 0.024478279863362706, 0.05720606204688394, 0.03944483407281363, 9.999999999998899e-05, 0.0024435366713049245, 0.03886400510961252, 0.022957920363468887, 0.0058835131684249475, 0.06872381945304973, 9.999999999998899e-05, 0.015228791586676338, 0.03815635425254038, 0.09974401655865328, 0.055680573420932356, 0.05570729439633182, 0.03801008477814816, 0.9963790486374636, 0.07507876234447464, 0.04990951227461482, 0.9992245352437383, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2154426672765829, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05157449290495575, 0.1345837890987297, 0.05559632151195437, 0.20954436960075395, 0.032002881759167434, 9.999999999998899e-05, 9.999999999998899e-05, 0.05404065607714059, 0.08537075572187569, 0.03912223296746631, 9.999999999998899e-05, 9.999999999998899e-05, 0.12362794286251333, 0.10692855532603984, 0.10751206498211507, 9.999999999998899e-05, 9.999999999998899e-05, 0.13525144448700777, 0.2611293191159735, 0.13793555621063458, 0.379217085053585, 0.269324738291298, 0.13538828044602502, 0.5020601155166597, 0.136220335976037, 0.13467485409580493, 9.999999999998899e-05, 0.13298065385147018, 0.0963292326348465, 9.999999999998899e-05, 9.999999999998899e-05, 0.02162980404234427, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003887798460415648, 0.024601374105269525, 9.999999999998899e-05, 0.030310447792760153, 9.999999999998899e-05, 9.999999999998899e-05, 0.01375390476670546, 0.01338893075768588, 0.013307821742002846, 9.999999999998899e-05, 0.053253161026460605, 0.17697896307208794, 9.999999999998899e-05, 9.999999999998899e-05, 0.08264835776411561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0777303336864501, 0.20166674269995588, 9.999999999998899e-05, 0.16433633662393443, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7028061237931049, 0.8111323293694177, 0.7503671368921594, 0.6262403847690501, 0.06294837870969494, 0.1827479710772315, 0.6130473256089501, 0.09558436414758531, 0.7229020607734424, 0.0521625003353936, 9.999999999998899e-05, 0.0045417273749306375, 0.04082898700384663, 0.038105466874249205, 0.011702019041306078, 0.10163264777775616, 0.02420193283076677, 0.10259182521404053, 0.19229379340632313, 0.06704031396221344, 0.16039545270076538, 0.13795732469402633, 0.15247150116166563, 0.1291635765839677, 0.15723684635692803, 0.0729987790843436, 0.15869104840723725, 0.18603173385566318, 0.09819792655437576, 0.13831856521895647, 0.19632995641561735, 0.09327372641653242, 0.13629441624996763, 0.27404628996378166, 0.08706812580490753, 0.16088444991010276, 0.042451519767365276, 0.01506137462115642, 0.08873657102252042, 0.15080591185645953, 0.026133085121897826, 0.06530121796308319, 0.21537656444641018, 9.999999999998899e-05, 0.06895080563679934, 0.24071703288451352, 0.12680763144743357, 0.1995088063539855, 0.22012531601555907, 0.16445403686111637, 0.15574271759162273, 0.2652809473298756, 0.17084795447630152, 0.17554779326067105, 0.1820812710047779, 0.1903410775367107, 0.19052035969786707, 0.20459724551329672, 0.2252485941319886, 0.1816238407530706, 0.20115692486911407, 9.999999999998899e-05, 9.999999999998899e-05, 0.18990001551555236, 0.14091305561995615, 0.11310381916179502, 0.09534536188030629, 0.11769457834699437, 0.06797726189754971, 0.07977562009819472, 0.06026375701093312, 0.1569522701674172, 0.10906921542511427, 0.21363619473723705, 0.05457605751189798, 0.16304500619177997, 0.06950988970112704, 0.11023380626752333, 0.09499899937530643, 0.1871909610514162, 0.18473646788954778, 0.17890361495072593, 0.14829104352400757, 0.17702049384606966, 0.20516678870808513, 0.10674202807060262, 0.17993799324427873, 0.1629677441472771, 0.11850212542269112, 0.19831520193321217, 0.06303090750613738, 0.037371261197822636, 0.038821955078599646, 0.07322652917450723, 0.009734072061499677, 0.07145272941242442, 0.08585728756891964, 0.05051005345408488, 0.047344492178373554]}, "mutation_prompt": null}
{"id": "8a6588da-f759-424e-99d8-105e52160a30", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 41, "fitness": 0.1824494739672596, "feedback": "The algorithm Enhanced_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.22.", "error": "", "parent_id": "08e65585-6e1a-4f94-a0bf-6c3d101839ea", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "f74cb6d9-a1b7-4b25-8be5-64660b206896", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "f358a92f-5204-482e-9c48-243a4e301eb7", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "a76da425-c6be-4702-963b-ab02bb481380", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "23d17948-ecb2-49cc-9d9e-4afa88807698", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "befee22b-5114-4a5c-8527-0ebe1bce2072", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "61949d9d-f2b0-4e93-994d-d21b0623b666", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "ba9f3453-5865-499d-960f-b6652dd137e9", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "ac7185c6-4de1-4323-a4cd-0c5fd78db2c0", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "64e5cff2-5a4d-4dd7-9d81-6d943ee7cddc", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "5873698f-180d-49f4-a44b-70a5b5281ef3", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "21705b87-2c3d-4d58-8c81-6ab3b97d69d6", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "0966b6c5-f1bd-4318-864e-929b25fb73f4", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "a8a5c4c9-907c-46a1-8c25-7e00aa3380c5", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "aea7fc04-833c-4304-b6b5-1872628afea3", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "54e6c4a0-196a-47c0-a4dd-682bab43fe6e", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "a3544d74-704a-406b-ae8c-22a8eea8a4b2", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "a550dffe-6694-4e3c-aab2-f2e462685b1b", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "c148d532-2ceb-45f9-9122-ce889afa5fde", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "ec824129-2bf2-48bd-ac76-b5426dfd6ef2", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "d6460441-262a-4aa0-b860-e3c45757a655", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "04d645d1-4cf8-4823-9df4-d972c662828d", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "5669787b-7ecb-4554-9cac-566cda759e64", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "2117de78-a773-4d28-a495-ffe4d17f6f47", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "b7912032-bccb-42aa-8cdb-b54ed5333c6b", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "0164b6ef-9c75-411a-8548-b939be845b9e", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "ea5e7667-f04f-4e72-ab5f-589f5f2a69f0", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "3e07e46e-336f-4846-8696-cb4baab183ff", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "3b7ed88d-0a96-4543-bf48-f659c852498b", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "6c7dd9af-a7ad-4052-bcb8-9b230000679e", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "fd6d793c-e95b-4ab8-83ee-46b38ffc3527", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "00ebd7c6-a8de-4307-b395-5a6fcbf7cb16", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "4330edd9-aecf-4567-848c-6f843fbd7ca1", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "dccfa82d-ea14-48d1-8f0b-dc1c30bf0786", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "5a270490-14c8-4301-9ee6-eae18f351b73", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "c5b5dc19-a0d0-4c1b-8e86-5ff2a58ecb02", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "6a5e3885-3b5b-48be-beb8-f677065238f2", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "4eef84f9-191e-4c8b-8abe-ae0cbb8a4c12", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "989788e5-e3d4-4d14-85fd-8dcfa5461b53", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "6e7156a3-49fa-495a-865a-0392c38c81a0", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "97d0806b-b87f-46c3-95ac-8628ec3557e8", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "0c0acfc8-54e8-4e6c-9223-e1b04d874721", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "4e374532-bd93-4880-9884-f8c5d5f4ed19", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "0fb512ea-d4d2-4258-aacc-88e0289c9647", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "3e8ae298-97c4-4625-8906-5d6f22aaa174", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "95c16ee9-317a-4f3f-9211-49a06d6b6e86", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "c6498224-2bb2-4066-8239-9e53447233d6", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "a0692825-01b7-4781-9f9a-cb29a523e27d", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "13852c82-caf7-4ef5-9018-ea21fef21290", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "f1988625-a9bf-4f0c-9383-cd64a9d3e225", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "c2c1304c-9c6a-47fe-9fce-978bbe5d52b8", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "18da910c-c81e-4130-87b6-00093d3742cd", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "70045611-b348-400b-8bfe-9715d2065ee4", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "e5893603-65cc-442d-ba5d-5df53dab3ff0", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "4e774759-f8eb-4cfb-a624-b2fb32931168", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "65f151b9-5ab2-4fe1-9af6-505d15dc7ae4", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(2, self.swarm_size, 1), np.random.rand(2, self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1[0] * (global_best_position - swarm_position) + self.c2 * r2[0] * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhancing efficiency through parallel computation and adaptive inertia weight adjustment.", "configspace": "", "generation": 96, "fitness": 0.17647006744282656, "feedback": "The algorithm Enhanced_PSO_SA_Optimizer got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.22.", "error": "", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.9228259718182495, 0.1266934984030491, 0.6018928125231104, 0.18317692641800043, 0.1412023617617788, 0.16097322158557759, 0.14951714939168037, 0.18168684396126666, 0.17552787909518097, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05433745268348189, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06266645018354555, 0.11944007779042931, 0.036468696681841495, 0.056085414629667873, 0.06611553732325648, 0.051547584821645565, 0.08769171423870303, 0.09385044426717526, 0.11897096528166495, 0.04926581292146692, 0.03342111089935429, 0.030439115322041133, 0.0804944509286657, 0.10551506039867564, 0.03689002073997272, 0.03176662773764716, 0.024928410240818044, 0.0751632165447409, 0.9956578792020392, 0.9969087537611317, 0.9947161060443187, 0.9879658648296671, 0.99435592525729, 0.9913134747429501, 0.9942948022301996, 0.9917753478063552, 0.9942743594287432, 0.02838548542595165, 0.03329577167654896, 0.05572073917328524, 0.1536172301611749, 0.1480417165918143, 0.1533784241922138, 0.08373587351811984, 0.05187343186521154, 9.999999999998899e-05, 0.13039709950951617, 0.08429116443324325, 0.13039519404314492, 0.18734692554925314, 0.1173575351734496, 0.19411418248525603, 0.03910819100011542, 0.22631986099728651, 0.09012915647976028, 0.32806219690328997, 0.1398636228872716, 0.16587823566751247, 9.999999999998899e-05, 0.1642942021321605, 9.999999999998899e-05, 0.1310594054648856, 0.13036151488141445, 0.14669849845458027, 0.2398756980856973, 0.11560238777542253, 0.20515666485333983, 0.1345375246507865, 0.11214817294668211, 0.12943358169486818, 0.12022797716071587, 9.999999999998899e-05, 0.07204222575446073, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04730595769152224, 9.999999999998899e-05, 0.00350366034390992, 9.999999999998899e-05, 9.999999999998899e-05, 0.05923706651561389, 0.05172659160485238, 0.030640629260026753, 0.15203038410230052, 0.035161245555076714, 0.017549553098917703, 0.03839624814229736, 0.05327067101985816, 0.06532068552378556, 0.02586031734531824, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10421795135750367, 9.999999999998899e-05, 9.999999999998899e-05, 0.06799453098961872, 0.19646680211952505, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006595345949769182, 0.11811566355966208, 0.05046914429910976, 9.999999999998899e-05, 0.0837208576944789, 0.5702303076362616, 0.6531980824163088, 0.5797919602349213, 0.2084944417453043, 0.1381295580808113, 0.20918284682930022, 0.4304935777291592, 0.8327795154963201, 0.5034279185027954, 0.04525278694674306, 0.072319606565872, 0.023400001938330806, 0.08542336182507226, 0.05597206692601553, 0.06148036793998779, 0.041654694061971864, 0.046218761171741396, 0.056535968408220505, 0.2523538081890605, 0.11317449642847899, 0.44106811589233774, 0.19900837465331644, 0.3221791591207396, 0.17099386984636278, 0.1777588823145696, 0.18224981616499403, 0.16038751083402603, 0.2962446890504419, 0.16877441806586935, 0.20261305431399956, 0.19352341673046336, 0.18513416648942027, 0.24669436759651575, 0.17702224086672325, 0.2078548259116254, 0.23718141405069604, 0.06847787279429629, 0.04011555678752354, 0.19100420159191311, 0.13417987818018995, 0.1294118485578043, 0.23221433709539874, 0.1799803923540163, 0.19358904338279503, 0.184913585238916, 0.22016516967150934, 0.1407753146588222, 0.17523525618397506, 0.14626269754524146, 0.19341151885315444, 0.18059583692517012, 0.2530899737158495, 0.19791619649553982, 0.1831506143258056, 0.17669967130092135, 0.20278663324988788, 0.1995288198574009, 0.18360594174520894, 0.18063459206386723, 0.16860822514911344, 0.20061187638894906, 0.20019827091103193, 0.1810770107877624, 0.6361894878708745, 0.12710742038027623, 0.11310146829690149, 0.1695857585592423, 0.20183943337941257, 0.200836647031984, 0.0905020126851458, 0.170466679574246, 0.20962310642612914, 0.9212557044102054, 0.15786878944261862, 0.16822266163051225, 0.10471946366788654, 0.1692788493894466, 0.20875013998518266, 0.11391148185191191, 0.07017229952665271, 0.2380446672391361, 0.17881088882159024, 0.17318072008532726, 0.25321581737915067, 0.12239294239129284, 0.24443341079768233, 0.19121828974098387, 0.2593513867017523, 0.16203862539445912, 0.23811642089624196, 0.061295483749609025, 0.04923179752046214, 0.07630663638645552, 0.08430439874255535, 0.10241786918669382, 0.1028780342878336, 0.0645365357640052, 0.05320372629157377, 0.0896321857212945]}, "mutation_prompt": null}
{"id": "433d9026-8a78-456a-a275-87f9ad9f4630", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "5cb12b09-8b75-46a6-a913-534747c386d0", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
{"id": "5bd3e18c-082e-4ce8-acf7-b01202d3412a", "solution": "import numpy as np\n\nclass Enhanced_PSO_SA_Optimizer:\n    def __init__(self, budget, dim, swarm_size=30, max_iter=1000, c1=2.0, c2=2.0, initial_temp=10.0, cooling_rate=0.95):\n        self.budget = budget\n        self.dim = dim\n        self.swarm_size = swarm_size\n        self.max_iter = max_iter\n        self.c1 = c1\n        self.c2 = c2\n        self.initial_temp = initial_temp\n        self.cooling_rate = cooling_rate\n\n    def __call__(self, func):\n        swarm_position = np.random.uniform(-5.0, 5.0, (self.swarm_size, self.dim))\n        swarm_velocity = np.zeros((self.swarm_size, self.dim))\n        global_best_position = swarm_position[np.argmin(np.apply_along_axis(func, 1, swarm_position))]\n        global_best_value = func(global_best_position)\n        temperature = self.initial_temp\n\n        for _ in range(self.max_iter):\n            r1, r2 = np.random.rand(self.swarm_size, 1), np.random.rand(self.swarm_size, 1)\n            swarm_velocity = 0.3 * swarm_velocity + self.c1 * r1 * (global_best_position - swarm_position) + self.c2 * r2 * (global_best_position - swarm_position)\n            swarm_position = np.clip(swarm_position + swarm_velocity, -5.0, 5.0)\n            fitness_values = np.apply_along_axis(func, 1, swarm_position)\n            best_idx = np.argmin(fitness_values)\n            if fitness_values[best_idx] < global_best_value:\n                global_best_value = fitness_values[best_idx]\n                global_best_position = np.copy(swarm_position[best_idx])\n            acceptance_prob = np.exp((global_best_value - fitness_values) / temperature)\n            accept_mask = np.random.rand(self.swarm_size) < acceptance_prob.flatten()\n            swarm_position[accept_mask] = np.clip(swarm_position[accept_mask], -5.0, 5.0)\n            temperature *= self.cooling_rate\n\n        return global_best_position", "name": "Enhanced_PSO_SA_Optimizer", "description": "Enhanced PSO_SA_Optimizer algorithm by vectorizing operations and eliminating redundant calculations for improved efficiency.", "configspace": "", "generation": 42, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8a6588da-f759-424e-99d8-105e52160a30", "metadata": {"aucs": [0.5718964754602063, 0.820636157175087, 0.6916963303303696, 0.15716384601973765, 0.15718790552423634, 0.19030334008691152, 0.18316719667015824, 0.6249485082730676, 0.11666674522597675, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04324874946117818, 9.999999999998899e-05, 9.999999999998899e-05, 0.09090454802844705, 0.042806242496695845, 0.10236725467002528, 0.0710787909423376, 0.09437449593649927, 0.07300190164017117, 0.0531579254239235, 0.048960290160067754, 0.04226834451607997, 0.13553091306154852, 0.05477743184328543, 0.058941731164563915, 0.13514388761541418, 0.1530297060468605, 0.08380419970177133, 0.036187504138346815, 0.010365693946654209, 0.0329728532739344, 0.036919326585515555, 0.056201139206123796, 0.9944313500971885, 0.9969107976330082, 0.9948189834552374, 0.09984778020898688, 0.9941813554652629, 0.9888144594822434, 0.9943880945649646, 0.9942823159685684, 0.9940537995709199, 0.24220748828112026, 0.045623363455184696, 0.05482772544039105, 0.15330733216499026, 0.15370897264143057, 0.5189257962193312, 0.07934694827408295, 0.051898967601299195, 9.999999999998899e-05, 0.17916471955494695, 0.09972699394260309, 0.20829254349515103, 0.17953787941327137, 0.16661496918709562, 0.03033941594678835, 0.06809475649020114, 0.09479081394110922, 0.15102115111410808, 0.158675144248148, 0.1347567506945183, 0.10943550679044878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.14555104046960876, 0.1884291700490256, 0.05539794557022193, 0.14546816166270504, 0.13495156033104283, 0.12485637177497444, 0.30329682475358055, 0.13775345610707013, 0.10814815233305985, 0.1092204825790426, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019324592384330708, 0.037525410100698764, 9.999999999998899e-05, 0.2725347158498884, 0.0489688340172848, 0.032147030225358475, 0.0808121209751238, 0.20404059299557298, 9.999999999998899e-05, 0.11107646968532625, 0.12640274405137075, 0.04851900515247165, 0.10016061868044257, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0830751485236837, 9.999999999998899e-05, 0.08135984770528981, 9.999999999998899e-05, 0.1056462333096122, 0.07513551989333811, 0.188256838890283, 0.04343108257816153, 0.11346682858261081, 9.999999999998899e-05, 9.999999999998899e-05, 0.17993283741232613, 9.999999999998899e-05, 9.999999999998899e-05, 0.08347166663164152, 0.49137153839476866, 0.39747137244456776, 0.6260019182320438, 0.46016230774042377, 0.1378974715639646, 0.5777383640499836, 0.40107160708844514, 0.538411650669659, 0.33215673206722274, 0.05645040065661855, 0.056937002415383686, 0.02715950640652609, 0.10458331209691074, 0.02569662367092518, 0.07117629095734301, 0.047822919581783974, 0.05299220230409085, 0.09110765311358338, 0.2692877712289442, 0.17683882367475612, 0.13582600008044776, 0.2148900909880711, 0.1680135364330878, 0.13362064622569758, 0.19099088012498067, 0.129684022130642, 0.18441276748682323, 0.3435980572540054, 0.2122688600373771, 0.25200096728089794, 0.31663944062988225, 0.20389499439736603, 0.26938605249143643, 0.21421398572578032, 0.2711181280137688, 0.26535953794562495, 0.1347797460045811, 0.07321171217724565, 0.18159909371595495, 0.18078163318288465, 0.08214276255024067, 0.16131652290616405, 0.15616522189774118, 0.18758580050038753, 0.22289341873450108, 0.20383407909712337, 0.12723038077098614, 0.1683718259839665, 0.16078788875594108, 0.19680909995813023, 0.16140275392494752, 0.26525778871676764, 0.25521207892742637, 0.16086359100046577, 0.17465269091515567, 0.22580648710230167, 0.17246815073991328, 0.18442914741654148, 0.17648090020897456, 0.178524781412702, 0.16340538006965, 0.20511139244054943, 0.17314691734465082, 0.1872748225025963, 0.12706757684087666, 0.11309123420493683, 0.7880020046121724, 0.2015087280989052, 0.2003832174837491, 0.09044134233447143, 0.1701503962802704, 0.8302207298565283, 0.5783186340145188, 0.1576001013849493, 0.10633962324593871, 0.10516234290336379, 0.11509443325390056, 0.20882196684193366, 0.1139528821640291, 0.18653214329219414, 0.23164913142262733, 0.16746615925639285, 0.2017805998944695, 0.16558842437727594, 0.20529273770402134, 0.2624585823128841, 0.24853081422146317, 0.16785878089682227, 0.23374398335624347, 0.2271061993258079, 0.05675090427908269, 0.041968154648846956, 0.06679026357428042, 0.044060968558483515, 0.057120043272097965, 0.05351073791423, 0.06118864760490628, 0.028637746304728928, 0.03219972338540189]}, "mutation_prompt": null}
