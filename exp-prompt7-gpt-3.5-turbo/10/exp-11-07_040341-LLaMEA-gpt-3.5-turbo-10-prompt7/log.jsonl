{"id": "83388760-5a94-4104-a71f-6aee57ee5e05", "solution": "import numpy as np\n\nclass AdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def attractiveness(distance):\n            return np.exp(-distance)\n\n        def move_fireflies(current_pos, best_pos, attractiveness):\n            beta = 1.0\n            step_size = np.random.uniform(0, 0.1, self.dim)  # Exploration\n            current_pos = current_pos * (1 - beta) + best_pos * beta + step_size\n\n            for _ in range(self.dim):  # Exploitation\n                current_pos[_] = np.clip(current_pos[_], self.lower_bound, self.upper_bound)\n\n            return current_pos\n\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n            if current_fitness < best_fitness:\n                best_solution = current_solution\n                best_fitness = current_fitness\n\n            for _ in range(self.budget):\n                if func(current_solution) < func(best_solution):\n                    best_solution = current_solution\n                for _ in range(self.budget):\n                    new_solution = move_fireflies(current_solution, best_solution, attractiveness(np.linalg.norm(current_solution - best_solution)))\n                    if func(new_solution) < func(current_solution):\n                        current_solution = new_solution\n        return best_solution", "name": "AdaptiveFireflyAlgorithm", "description": "An Adaptive Firefly Algorithm that adjusts its behavior based on the exploration and exploitation phases during the optimization process.", "configspace": "", "generation": 0, "fitness": 0.02778626145102312, "feedback": "The algorithm AdaptiveFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.03 with standard deviation 0.05.", "error": "", "parent_id": null, "metadata": {"aucs": [0.07043970596353777, 0.04018950902908769, 0.06184265326542626, 0.008756873465102899, 0.05421825374990563, 0.02629776320477817, 0.03222514068478122, 0.05174190322828254, 0.06814758349416938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024974642931165025, 0.0021511649887937523, 0.0010008546110990002, 0.01010736149114344, 0.014335414382335654, 0.002104820731743118, 0.008491490835569548, 0.015276382028763469, 0.003627502328951926, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037091774948561085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032420390398068766, 9.999999999998899e-05, 9.999999999998899e-05, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.040069733773308136, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06577939320409276, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009930335692046044, 0.07320718434856754, 0.15259321500276835, 0.07035550083223352, 9.999999999998899e-05, 9.999999999998899e-05, 0.09520777293702543, 0.05535881522859487, 0.017539220468559713, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003130746674123719, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013384495440652566, 0.07893789976471122, 0.06165695004286886, 0.008195038578340252, 0.05993598864890026, 0.05848297668734226, 0.014295223905019472, 0.027753834137097533, 0.03903582445788101, 0.10173947772418945, 0.0935600014123884, 0.06302706709408634, 0.13148352904732907, 0.06970456890920773, 0.09298845158309599, 0.12610946739402173, 0.07771468170040574, 0.0758663884031423, 0.042898964122248806, 0.014258165088978814, 0.010943780623025257, 0.06450270545705039, 0.022754966331058113, 0.044680582676729697, 0.05648699256316181, 0.010315639129930942, 0.01065270614632352, 0.1637402272956484, 0.05229584921820207, 0.10550061507997344, 0.18529934431982154, 0.07002299850340099, 0.07959709732736153, 0.17543399965031004, 0.05847034573080834, 0.12122337111684156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03090643975003371, 0.03275365392665386, 0.053375288439584945, 0.06901397489144079, 0.016974736909051713, 0.018123362347879035, 0.035584279055268286, 0.05876847232704818, 0.053674301379695866, 0.03600096115587692, 0.053315466940767164, 0.017708773784011256, 0.011164931995690464, 0.010127785135449763, 0.047133290813187845, 0.01369131593921169, 0.012031712755742219, 0.016691409446466077, 0.17041831754474734, 0.20530180000887477, 0.1825487445420204, 0.1837907999857331, 0.15842809807759262, 0.16113200805724992, 0.15943857056660182, 0.19829187136398385, 0.1425311936793765, 0.021775227541332653, 0.016034335414746748, 0.03148774834808443, 0.035286995274768196, 0.010965423133654673, 0.021585341487496912, 0.038264546576241454, 0.035883378713918, 0.030402648296750656]}, "mutation_prompt": null}
{"id": "7758e629-a69e-4fa2-9e61-7fea67990151", "solution": "import numpy as np\n\nclass AdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def attractiveness(distance):\n            return np.exp(-distance)\n\n        def move_fireflies(current_pos, best_pos, attractiveness):\n            beta = 1.0\n            step_size = np.random.uniform(0, 0.1, self.dim)  # Exploration\n            current_pos = current_pos * (1 - beta) + best_pos * beta + step_size\n\n            for _ in range(self.dim):  # Exploitation\n                current_pos[_] = np.clip(current_pos[_], self.lower_bound, self.upper_bound)\n\n            return current_pos\n\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n            if current_fitness < best_fitness:\n                best_solution = current_solution\n                best_fitness = current_fitness\n\n            for _ in range(self.budget):\n                if func(current_solution) < func(best_solution):\n                    best_solution = current_solution\n                for _ in range(self.budget):\n                    new_solution = move_fireflies(current_solution, best_solution, attractiveness(np.linalg.norm(current_solution - best_solution)))\n                    if func(new_solution) < func(current_solution):\n                        current_solution = new_solution\n        return best_solution", "name": "AdaptiveFireflyAlgorithm", "description": "An Adaptive Firefly Algorithm that adjusts its behavior based on the exploration and exploitation phases during the optimization process.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83388760-5a94-4104-a71f-6aee57ee5e05", "metadata": {"aucs": [0.07043970596353777, 0.04018950902908769, 0.06184265326542626, 0.008756873465102899, 0.05421825374990563, 0.02629776320477817, 0.03222514068478122, 0.05174190322828254, 0.06814758349416938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024974642931165025, 0.0021511649887937523, 0.0010008546110990002, 0.01010736149114344, 0.014335414382335654, 0.002104820731743118, 0.008491490835569548, 0.015276382028763469, 0.003627502328951926, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037091774948561085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032420390398068766, 9.999999999998899e-05, 9.999999999998899e-05, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.040069733773308136, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06577939320409276, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009930335692046044, 0.07320718434856754, 0.15259321500276835, 0.07035550083223352, 9.999999999998899e-05, 9.999999999998899e-05, 0.09520777293702543, 0.05535881522859487, 0.017539220468559713, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003130746674123719, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013384495440652566, 0.07893789976471122, 0.06165695004286886, 0.008195038578340252, 0.05993598864890026, 0.05848297668734226, 0.014295223905019472, 0.027753834137097533, 0.03903582445788101, 0.10173947772418945, 0.0935600014123884, 0.06302706709408634, 0.13148352904732907, 0.06970456890920773, 0.09298845158309599, 0.12610946739402173, 0.07771468170040574, 0.0758663884031423, 0.042898964122248806, 0.014258165088978814, 0.010943780623025257, 0.06450270545705039, 0.022754966331058113, 0.044680582676729697, 0.05648699256316181, 0.010315639129930942, 0.01065270614632352, 0.1637402272956484, 0.05229584921820207, 0.10550061507997344, 0.18529934431982154, 0.07002299850340099, 0.07959709732736153, 0.17543399965031004, 0.05847034573080834, 0.12122337111684156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03090643975003371, 0.03275365392665386, 0.053375288439584945, 0.06901397489144079, 0.016974736909051713, 0.018123362347879035, 0.035584279055268286, 0.05876847232704818, 0.053674301379695866, 0.03600096115587692, 0.053315466940767164, 0.017708773784011256, 0.011164931995690464, 0.010127785135449763, 0.047133290813187845, 0.01369131593921169, 0.012031712755742219, 0.016691409446466077, 0.17041831754474734, 0.20530180000887477, 0.1825487445420204, 0.1837907999857331, 0.15842809807759262, 0.16113200805724992, 0.15943857056660182, 0.19829187136398385, 0.1425311936793765, 0.021775227541332653, 0.016034335414746748, 0.03148774834808443, 0.035286995274768196, 0.010965423133654673, 0.021585341487496912, 0.038264546576241454, 0.035883378713918, 0.030402648296750656]}, "mutation_prompt": null}
{"id": "f6f10547-79e7-433f-8cad-16ef294478a1", "solution": "import numpy as np\n\nclass ImprovedAdaptiveFireflyAlgorithm: \n    def __init__(self, budget, dim):\n        self.budget, self.dim, self.lower_bound, self.upper_bound = budget, dim, -5.0, 5.0\n\n    def __call__(self, func):\n        def attractiveness(distance):\n            return np.exp(-distance)\n\n        def move_fireflies(current_pos, best_pos, beta):\n            step_size = np.random.uniform(0, 0.1, self.dim)\n            current_pos = current_pos * (1 - beta) + best_pos * beta + step_size\n            current_pos = np.clip(current_pos, self.lower_bound, self.upper_bound)\n            return current_pos\n\n        best_solution, best_fitness = np.random.uniform(self.lower_bound, self.upper_bound, self.dim), func(np.inf)\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            for _ in range(self.budget):\n                if func(current_solution) < func(best_solution):\n                    best_solution = current_solution\n                for _ in range(self.budget):\n                    new_solution = move_fireflies(current_solution, best_solution, attractiveness(np.linalg.norm(current_solution - best_solution)))\n                    if func(new_solution) < func(current_solution):\n                        current_solution = new_solution\n        return best_solution", "name": "ImprovedAdaptiveFireflyAlgorithm", "description": "Improved Adaptive Firefly Algorithm with optimized control flow and consolidated repeated operations.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "An exception occurred: TypeError('__call__(): incompatible function arguments. The following argument types are supported:\\n    1. (self: ioh.iohcpp.problem.RealSingleObjective, arg0: List[float]) -> float\\n    2. (self: ioh.iohcpp.problem.RealSingleObjective, arg0: List[List[float]]) -> List[float]\\n\\nInvoked with: <RealSingleObjectiveProblem 1. Sphere (iid=1 dim=5)>, inf').", "error": "TypeError('__call__(): incompatible function arguments. The following argument types are supported:\\n    1. (self: ioh.iohcpp.problem.RealSingleObjective, arg0: List[float]) -> float\\n    2. (self: ioh.iohcpp.problem.RealSingleObjective, arg0: List[List[float]]) -> List[float]\\n\\nInvoked with: <RealSingleObjectiveProblem 1. Sphere (iid=1 dim=5)>, inf')", "parent_id": "83388760-5a94-4104-a71f-6aee57ee5e05", "metadata": {}, "mutation_prompt": null}
{"id": "a9378ff8-39b4-47d9-816b-b6acf5120ddd", "solution": "import numpy as np\n\nclass OptimizedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def attractiveness(distance):\n            return np.exp(-distance)\n\n        def move_fireflies(current_pos, best_pos, attractiveness):\n            beta = 1.0\n            step_size = np.random.uniform(0, 0.1, self.dim)  # Exploration\n            current_pos = current_pos * (1 - beta) + best_pos * beta + step_size\n\n            current_pos = np.clip(current_pos, self.lower_bound, self.upper_bound)  # Exploitation\n\n            return current_pos\n\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            for _ in range(self.budget):\n                if func(current_solution) < func(best_solution):\n                    best_solution = current_solution\n                for _ in range(self.budget):\n                    new_solution = move_fireflies(current_solution, best_solution, attractiveness(np.linalg.norm(current_solution - best_solution)))\n                    if func(new_solution) < func(current_solution):\n                        current_solution = new_solution\n        return best_solution", "name": "OptimizedFireflyAlgorithm", "description": "Improved version of AdaptiveFireflyAlgorithm with optimized control flow and reduced redundant operations.", "configspace": "", "generation": 3, "fitness": 0.02778626145102312, "feedback": "The algorithm OptimizedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.03 with standard deviation 0.05.", "error": "", "parent_id": "83388760-5a94-4104-a71f-6aee57ee5e05", "metadata": {"aucs": [0.07043970596353777, 0.04018950902908769, 0.06184265326542626, 0.008756873465102899, 0.05421825374990563, 0.02629776320477817, 0.03222514068478122, 0.05174190322828254, 0.06814758349416938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024974642931165025, 0.0021511649887937523, 0.0010008546110990002, 0.01010736149114344, 0.014335414382335654, 0.002104820731743118, 0.008491490835569548, 0.015276382028763469, 0.003627502328951926, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037091774948561085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032420390398068766, 9.999999999998899e-05, 9.999999999998899e-05, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.040069733773308136, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06577939320409276, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009930335692046044, 0.07320718434856754, 0.15259321500276835, 0.07035550083223352, 9.999999999998899e-05, 9.999999999998899e-05, 0.09520777293702543, 0.05535881522859487, 0.017539220468559713, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003130746674123719, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013384495440652566, 0.07893789976471122, 0.06165695004286886, 0.008195038578340252, 0.05993598864890026, 0.05848297668734226, 0.014295223905019472, 0.027753834137097533, 0.03903582445788101, 0.10173947772418945, 0.0935600014123884, 0.06302706709408634, 0.13148352904732907, 0.06970456890920773, 0.09298845158309599, 0.12610946739402173, 0.07771468170040574, 0.0758663884031423, 0.042898964122248806, 0.014258165088978814, 0.010943780623025257, 0.06450270545705039, 0.022754966331058113, 0.044680582676729697, 0.05648699256316181, 0.010315639129930942, 0.01065270614632352, 0.1637402272956484, 0.05229584921820207, 0.10550061507997344, 0.18529934431982154, 0.07002299850340099, 0.07959709732736153, 0.17543399965031004, 0.05847034573080834, 0.12122337111684156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03090643975003371, 0.03275365392665386, 0.053375288439584945, 0.06901397489144079, 0.016974736909051713, 0.018123362347879035, 0.035584279055268286, 0.05876847232704818, 0.053674301379695866, 0.03600096115587692, 0.053315466940767164, 0.017708773784011256, 0.011164931995690464, 0.010127785135449763, 0.047133290813187845, 0.01369131593921169, 0.012031712755742219, 0.016691409446466077, 0.17041831754474734, 0.20530180000887477, 0.1825487445420204, 0.1837907999857331, 0.15842809807759262, 0.16113200805724992, 0.15943857056660182, 0.19829187136398385, 0.1425311936793765, 0.021775227541332653, 0.016034335414746748, 0.03148774834808443, 0.035286995274768196, 0.010965423133654673, 0.021585341487496912, 0.038264546576241454, 0.035883378713918, 0.030402648296750656]}, "mutation_prompt": null}
{"id": "aff4fedb-cd26-49e6-868e-ab70e22d46bc", "solution": "import numpy as np\n\nclass AdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def attractiveness(distance):\n            return np.exp(-distance)\n\n        def move_fireflies(current_pos, best_pos):\n            beta = 1.0\n            step_size = np.random.uniform(0, 0.1, self.dim)\n            current_pos = current_pos * (1 - beta) + best_pos * beta + step_size\n\n            current_pos = np.clip(current_pos, self.lower_bound, self.upper_bound)\n\n            return current_pos\n\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            for _ in range(self.budget):\n                if func(current_solution) < func(best_solution):\n                    best_solution = current_solution\n                for _ in range(self.budget):\n                    new_solution = move_fireflies(current_solution, best_solution)\n                    if func(new_solution) < func(current_solution):\n                        current_solution = new_solution\n        return best_solution", "name": "AdaptiveFireflyAlgorithm", "description": "Optimizing the firefly movement by consolidating repeated operations and simplifying control flow.", "configspace": "", "generation": 4, "fitness": 0.02778626145102312, "feedback": "The algorithm AdaptiveFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.03 with standard deviation 0.05.", "error": "", "parent_id": "83388760-5a94-4104-a71f-6aee57ee5e05", "metadata": {"aucs": [0.07043970596353777, 0.04018950902908769, 0.06184265326542626, 0.008756873465102899, 0.05421825374990563, 0.02629776320477817, 0.03222514068478122, 0.05174190322828254, 0.06814758349416938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024974642931165025, 0.0021511649887937523, 0.0010008546110990002, 0.01010736149114344, 0.014335414382335654, 0.002104820731743118, 0.008491490835569548, 0.015276382028763469, 0.003627502328951926, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037091774948561085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032420390398068766, 9.999999999998899e-05, 9.999999999998899e-05, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.040069733773308136, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06577939320409276, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009930335692046044, 0.07320718434856754, 0.15259321500276835, 0.07035550083223352, 9.999999999998899e-05, 9.999999999998899e-05, 0.09520777293702543, 0.05535881522859487, 0.017539220468559713, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003130746674123719, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013384495440652566, 0.07893789976471122, 0.06165695004286886, 0.008195038578340252, 0.05993598864890026, 0.05848297668734226, 0.014295223905019472, 0.027753834137097533, 0.03903582445788101, 0.10173947772418945, 0.0935600014123884, 0.06302706709408634, 0.13148352904732907, 0.06970456890920773, 0.09298845158309599, 0.12610946739402173, 0.07771468170040574, 0.0758663884031423, 0.042898964122248806, 0.014258165088978814, 0.010943780623025257, 0.06450270545705039, 0.022754966331058113, 0.044680582676729697, 0.05648699256316181, 0.010315639129930942, 0.01065270614632352, 0.1637402272956484, 0.05229584921820207, 0.10550061507997344, 0.18529934431982154, 0.07002299850340099, 0.07959709732736153, 0.17543399965031004, 0.05847034573080834, 0.12122337111684156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03090643975003371, 0.03275365392665386, 0.053375288439584945, 0.06901397489144079, 0.016974736909051713, 0.018123362347879035, 0.035584279055268286, 0.05876847232704818, 0.053674301379695866, 0.03600096115587692, 0.053315466940767164, 0.017708773784011256, 0.011164931995690464, 0.010127785135449763, 0.047133290813187845, 0.01369131593921169, 0.012031712755742219, 0.016691409446466077, 0.17041831754474734, 0.20530180000887477, 0.1825487445420204, 0.1837907999857331, 0.15842809807759262, 0.16113200805724992, 0.15943857056660182, 0.19829187136398385, 0.1425311936793765, 0.021775227541332653, 0.016034335414746748, 0.03148774834808443, 0.035286995274768196, 0.010965423133654673, 0.021585341487496912, 0.038264546576241454, 0.035883378713918, 0.030402648296750656]}, "mutation_prompt": null}
{"id": "e0991a85-8983-46c4-ba58-466c564b795d", "solution": "import numpy as np\n\nclass AdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def attractiveness(distance):\n            return np.exp(-distance)\n\n        def move_fireflies(current_pos, best_pos, attractiveness):\n            beta = 1.0\n            step_size = np.random.uniform(0, 0.1, self.dim)  # Exploration\n            current_pos = current_pos * (1 - beta) + best_pos * beta + step_size\n\n            for _ in range(self.dim):  # Exploitation\n                current_pos[_] = np.clip(current_pos[_], self.lower_bound, self.upper_bound)\n\n            return current_pos\n\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n            if current_fitness < best_fitness:\n                best_solution = current_solution\n                best_fitness = current_fitness\n\n            for _ in range(self.budget):\n                if func(current_solution) < func(best_solution):\n                    best_solution = current_solution\n                for _ in range(self.budget):\n                    new_solution = move_fireflies(current_solution, best_solution, attractiveness(np.linalg.norm(current_solution - best_solution)))\n                    if func(new_solution) < func(current_solution):\n                        current_solution = new_solution\n        return best_solution", "name": "AdaptiveFireflyAlgorithm", "description": "An Adaptive Firefly Algorithm that adjusts its behavior based on the exploration and exploitation phases during the optimization process.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "83388760-5a94-4104-a71f-6aee57ee5e05", "metadata": {"aucs": [0.07043970596353777, 0.04018950902908769, 0.06184265326542626, 0.008756873465102899, 0.05421825374990563, 0.02629776320477817, 0.03222514068478122, 0.05174190322828254, 0.06814758349416938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024974642931165025, 0.0021511649887937523, 0.0010008546110990002, 0.01010736149114344, 0.014335414382335654, 0.002104820731743118, 0.008491490835569548, 0.015276382028763469, 0.003627502328951926, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037091774948561085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032420390398068766, 9.999999999998899e-05, 9.999999999998899e-05, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.040069733773308136, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06577939320409276, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009930335692046044, 0.07320718434856754, 0.15259321500276835, 0.07035550083223352, 9.999999999998899e-05, 9.999999999998899e-05, 0.09520777293702543, 0.05535881522859487, 0.017539220468559713, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003130746674123719, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013384495440652566, 0.07893789976471122, 0.06165695004286886, 0.008195038578340252, 0.05993598864890026, 0.05848297668734226, 0.014295223905019472, 0.027753834137097533, 0.03903582445788101, 0.10173947772418945, 0.0935600014123884, 0.06302706709408634, 0.13148352904732907, 0.06970456890920773, 0.09298845158309599, 0.12610946739402173, 0.07771468170040574, 0.0758663884031423, 0.042898964122248806, 0.014258165088978814, 0.010943780623025257, 0.06450270545705039, 0.022754966331058113, 0.044680582676729697, 0.05648699256316181, 0.010315639129930942, 0.01065270614632352, 0.1637402272956484, 0.05229584921820207, 0.10550061507997344, 0.18529934431982154, 0.07002299850340099, 0.07959709732736153, 0.17543399965031004, 0.05847034573080834, 0.12122337111684156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03090643975003371, 0.03275365392665386, 0.053375288439584945, 0.06901397489144079, 0.016974736909051713, 0.018123362347879035, 0.035584279055268286, 0.05876847232704818, 0.053674301379695866, 0.03600096115587692, 0.053315466940767164, 0.017708773784011256, 0.011164931995690464, 0.010127785135449763, 0.047133290813187845, 0.01369131593921169, 0.012031712755742219, 0.016691409446466077, 0.17041831754474734, 0.20530180000887477, 0.1825487445420204, 0.1837907999857331, 0.15842809807759262, 0.16113200805724992, 0.15943857056660182, 0.19829187136398385, 0.1425311936793765, 0.021775227541332653, 0.016034335414746748, 0.03148774834808443, 0.035286995274768196, 0.010965423133654673, 0.021585341487496912, 0.038264546576241454, 0.035883378713918, 0.030402648296750656]}, "mutation_prompt": null}
{"id": "859fc6a0-11bf-453f-bc6c-dd7e92600ee2", "solution": "import numpy as np\n\nclass AdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def attractiveness(distance):\n            return np.exp(-distance)\n\n        def move_fireflies(current_pos, best_pos, attractiveness):\n            beta = 1.0\n            step_size = np.random.uniform(0, 0.1, self.dim)  # Exploration\n            current_pos = current_pos * (1 - beta) + best_pos * beta + step_size\n            current_pos = np.clip(current_pos, self.lower_bound, self.upper_bound)  # Exploitation\n\n            return current_pos\n\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n            if current_fitness < best_fitness:\n                best_solution = current_solution\n                best_fitness = current_fitness\n\n            for _ in range(self.budget):\n                if func(current_solution) < func(best_solution):\n                    best_solution = current_solution\n                for _ in range(self.budget):\n                    new_solution = move_fireflies(current_solution, best_solution, attractiveness(np.linalg.norm(current_solution - best_solution)))\n                    if func(new_solution) < func(current_solution):\n                        current_solution = new_solution\n        return best_solution", "name": "AdaptiveFireflyAlgorithm", "description": "Simplified the move_fireflies function by removing unnecessary loop and optimized the exploration and exploitation steps for improved efficiency.", "configspace": "", "generation": 6, "fitness": 0.02778626145102312, "feedback": "The algorithm AdaptiveFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.03 with standard deviation 0.05.", "error": "", "parent_id": "83388760-5a94-4104-a71f-6aee57ee5e05", "metadata": {"aucs": [0.07043970596353777, 0.04018950902908769, 0.06184265326542626, 0.008756873465102899, 0.05421825374990563, 0.02629776320477817, 0.03222514068478122, 0.05174190322828254, 0.06814758349416938, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024974642931165025, 0.0021511649887937523, 0.0010008546110990002, 0.01010736149114344, 0.014335414382335654, 0.002104820731743118, 0.008491490835569548, 0.015276382028763469, 0.003627502328951926, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0037091774948561085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032420390398068766, 9.999999999998899e-05, 9.999999999998899e-05, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.040069733773308136, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06577939320409276, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009930335692046044, 0.07320718434856754, 0.15259321500276835, 0.07035550083223352, 9.999999999998899e-05, 9.999999999998899e-05, 0.09520777293702543, 0.05535881522859487, 0.017539220468559713, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0003130746674123719, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013384495440652566, 0.07893789976471122, 0.06165695004286886, 0.008195038578340252, 0.05993598864890026, 0.05848297668734226, 0.014295223905019472, 0.027753834137097533, 0.03903582445788101, 0.10173947772418945, 0.0935600014123884, 0.06302706709408634, 0.13148352904732907, 0.06970456890920773, 0.09298845158309599, 0.12610946739402173, 0.07771468170040574, 0.0758663884031423, 0.042898964122248806, 0.014258165088978814, 0.010943780623025257, 0.06450270545705039, 0.022754966331058113, 0.044680582676729697, 0.05648699256316181, 0.010315639129930942, 0.01065270614632352, 0.1637402272956484, 0.05229584921820207, 0.10550061507997344, 0.18529934431982154, 0.07002299850340099, 0.07959709732736153, 0.17543399965031004, 0.05847034573080834, 0.12122337111684156, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03090643975003371, 0.03275365392665386, 0.053375288439584945, 0.06901397489144079, 0.016974736909051713, 0.018123362347879035, 0.035584279055268286, 0.05876847232704818, 0.053674301379695866, 0.03600096115587692, 0.053315466940767164, 0.017708773784011256, 0.011164931995690464, 0.010127785135449763, 0.047133290813187845, 0.01369131593921169, 0.012031712755742219, 0.016691409446466077, 0.17041831754474734, 0.20530180000887477, 0.1825487445420204, 0.1837907999857331, 0.15842809807759262, 0.16113200805724992, 0.15943857056660182, 0.19829187136398385, 0.1425311936793765, 0.021775227541332653, 0.016034335414746748, 0.03148774834808443, 0.035286995274768196, 0.010965423133654673, 0.021585341487496912, 0.038264546576241454, 0.035883378713918, 0.030402648296750656]}, "mutation_prompt": null}
{"id": "a3e4a754-bc04-4b35-bfb7-5ca738f06db8", "solution": "import numpy as np\n\nclass ImprovedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def attractiveness(distance):\n            return np.exp(-distance)\n\n        def move_fireflies(current_pos, best_pos, beta):\n            step_size = np.random.uniform(0, 0.1, self.dim)\n            current_pos = current_pos * (1 - beta) + best_pos * beta + step_size\n            current_pos = np.clip(current_pos, self.lower_bound, self.upper_bound)\n            return current_pos\n\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            for _ in range(self.budget):\n                if func(current_solution) < func(best_solution):\n                    best_solution = current_solution\n                for _ in range(self.budget):\n                    new_solution = move_fireflies(current_solution, best_solution, attractiveness(np.linalg.norm(current_solution - best_solution)))\n                    if func(new_solution) < func(current_solution):\n                        current_solution = new_solution\n        return best_solution", "name": "ImprovedFireflyAlgorithm", "description": "Improved Adaptive Firefly Algorithm with optimized control flow and reduced redundant operations.", "configspace": "", "generation": 7, "fitness": 0.02668652638781434, "feedback": "The algorithm ImprovedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.03 with standard deviation 0.04.", "error": "", "parent_id": "83388760-5a94-4104-a71f-6aee57ee5e05", "metadata": {"aucs": [0.07014120149131509, 0.040615082556828, 0.06677243485616402, 0.008412792100028876, 0.054485217509415484, 0.02645588854652181, 0.03222514068478122, 0.05185934138668058, 0.06825602765604855, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02511772329989359, 0.0036329753553075994, 0.0010894735654850551, 0.010132523447871411, 0.01403421191803611, 0.002131626354908489, 0.00851316803707336, 0.015039070566202462, 0.0036431122872696564, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00031549654350837564, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032420390398068766, 9.999999999998899e-05, 9.999999999998899e-05, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.040069733773308136, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04244746457568149, 0.01959688385874414, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008617486609551306, 0.07369765671495587, 0.15359241296663662, 0.06711180782050574, 0.10815305676997233, 9.999999999998899e-05, 0.09461470627041313, 0.05596177597534191, 0.017819239577490986, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002883446733254136, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013837657115104207, 0.07872755202037829, 0.05468846648487902, 0.09240174418296232, 0.0651021205664194, 0.07031696301992618, 0.055228500825369564, 0.05690671751676635, 0.03704847575734149, 0.09229315275313843, 0.07002381117691492, 0.09307980408352035, 0.10273960207795751, 0.0740428519224744, 0.09324228421231251, 0.11420206329748472, 0.07851363722399396, 0.07717950918265137, 0.029865793834821686, 9.999999999998899e-05, 0.010653710304322495, 0.044650675553987496, 0.02241379653211739, 0.039354085083422086, 0.05648699256316181, 0.0052957361934719005, 9.999999999998899e-05, 0.0916346253723066, 0.0533909319121072, 0.1077686411178056, 0.09130231661935506, 0.07011235446602482, 0.08058697726366515, 0.12245976138762271, 0.05878175363376936, 0.11789728855750403, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.028015673491834092, 0.03275365392665386, 0.055604621613027816, 0.06919288829319625, 0.016978099996799223, 0.01827300761215278, 0.03391929261879634, 0.056615725614002965, 0.053674301379695866, 0.03600096115587692, 0.03967402848431323, 0.01795626136467232, 0.011030978839133287, 0.011357050978076266, 0.04728578120672633, 0.013782085745970507, 0.016800630022529517, 0.015968679650421702, 0.18571388846314463, 0.16237508687089974, 0.1735295536947542, 0.1636752812617115, 0.16138306679613124, 0.17891824058425043, 0.15138326743193797, 0.1561390150626938, 0.14328104224039018, 0.005995490554134619, 0.017537301589769627, 0.02240470292979857, 9.999999999998899e-05, 0.01265445899925921, 0.026911283510681838, 0.00378771705097114, 0.035539075577725066, 0.030126363092403352]}, "mutation_prompt": null}
{"id": "39f1a2fb-bf53-4670-b92c-466c8cfb3cfe", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget, self.dim = budget, dim\n        self.lower_bound, self.upper_bound = -5.0, 5.0\n\n    def __call__(self, func):\n        def attractiveness(distance):\n            return np.exp(-distance)\n\n        def move_fireflies(current_pos, best_pos, attractiveness):\n            beta = 1.0\n            step_size = np.random.uniform(0, 0.1, self.dim)  # Exploration\n            current_pos = current_pos * (1 - beta) + best_pos * beta + step_size\n            current_pos = np.clip(current_pos, self.lower_bound, self.upper_bound)\n\n            best_solution, best_fitness = current_pos, func(current_pos)\n            for _ in range(self.budget):\n                current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                current_fitness = func(current_solution)\n                if current_fitness < best_fitness:\n                    best_solution, best_fitness = current_solution, current_fitness\n\n                for _ in range(self.budget):\n                    if func(current_solution) < func(best_solution):\n                        best_solution = current_solution\n                    for _ in range(self.budget):\n                        new_solution = move_fireflies(current_solution, best_solution, attractiveness(np.linalg.norm(current_solution - best_solution)))\n                        if func(new_solution) < func(current_solution):\n                            current_solution = new_solution\n            return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithm", "description": "Enhanced Adaptive Firefly Algorithm with improved efficiency by consolidating repeated operations and optimizing control flow.", "configspace": "", "generation": 8, "fitness": 0.0, "feedback": "The algorithm EnhancedAdaptiveFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.00 with standard deviation 0.00.", "error": "", "parent_id": "83388760-5a94-4104-a71f-6aee57ee5e05", "metadata": {"aucs": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]}, "mutation_prompt": null}
{"id": "7b85523f-15d1-4774-9e3b-95141c1da953", "solution": "import numpy as np\n\nclass ImprovedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def attractiveness(distance):\n            return np.exp(-distance)\n\n        def move_fireflies(current_pos, best_pos, attractiveness, beta):\n            step_size = np.random.uniform(0, 0.1, self.dim)  # Exploration\n            current_pos = current_pos * (1 - beta) + best_pos * beta + step_size\n\n            for i in range(self.dim):  # Exploitation\n                current_pos[i] = np.clip(current_pos[i], self.lower_bound, self.upper_bound)\n\n            return current_pos\n\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution = current_solution\n                best_fitness = current_fitness\n\n            for _ in range(self.budget):\n                if func(current_solution) < func(best_solution):\n                    best_solution = current_solution\n\n                new_solution = move_fireflies(current_solution, best_solution, attractiveness(np.linalg.norm(current_solution - best_solution)), 1.0)\n                if func(new_solution) < func(current_solution):\n                    current_solution = new_solution\n        return best_solution", "name": "ImprovedAdaptiveFireflyAlgorithm", "description": "Optimizing loop structure and avoiding redundant function evaluations to enhance efficiency.", "configspace": "", "generation": 9, "fitness": 0.03495062165067448, "feedback": "The algorithm ImprovedAdaptiveFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.03 with standard deviation 0.05.", "error": "", "parent_id": "83388760-5a94-4104-a71f-6aee57ee5e05", "metadata": {"aucs": [0.070677763944196, 0.06015330020105525, 0.07548280782523975, 0.009693699157546143, 0.06766017886332554, 0.0313826553317178, 0.03222514068478122, 0.05382265711003653, 0.07080221905685646, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03175701256037322, 0.02328418211560601, 0.018724919093744186, 0.010310448087994195, 0.02226284632424158, 0.007585012418182435, 0.008675131800721325, 0.02046401027522715, 0.007193554848626826, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03215511463701948, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032420390398068766, 9.999999999998899e-05, 0.012204813572851747, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.040069733773308136, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059233246964325414, 0.05389206071432551, 0.06899892229578275, 0.037646651864985836, 0.049681156074708244, 0.14207066084713915, 0.04354131014664797, 0.015290773533212287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01911517685519737, 0.08819685642882835, 0.18511271362404091, 0.07990751509408855, 0.09067004780959143, 0.07584588539189152, 0.09578735642532787, 0.09922787224619423, 0.054222855783432555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00857972110770866, 0.0012735629305454799, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007454137474132372, 0.06921359143996464, 0.0556641964512804, 0.007493911886445548, 0.06957725218484734, 0.04756034148080002, 0.06296146287205595, 0.026256182824197505, 0.034215031853265465, 0.09179485556846667, 0.08767494064535586, 0.09366789925635999, 0.1301475460290067, 0.061136655578723054, 0.09167237736539569, 0.12026498302377497, 0.09044609838598139, 0.07582972686343159, 0.0461944297250273, 0.03338671749920963, 0.010654848720895282, 0.06337011131695158, 0.013090791813118674, 0.0528233243691999, 0.05648699256316181, 0.007097281683664414, 0.003579028922930272, 0.15065501614298915, 0.14584796595917326, 0.12334940795943872, 0.1717846828059535, 0.10335706080626894, 0.1349277199073342, 0.1534792546961664, 0.11445041544601897, 0.13679134857049047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1352993459436258, 9.999999999998899e-05, 0.04314859211064448, 0.03274442034298097, 0.09820421978977989, 0.0691561656796863, 0.016977872452856313, 0.021365834225147595, 0.0396595486881024, 0.061577017675464085, 0.053674301379695866, 0.03600096115587692, 0.06762129710089526, 0.09857962979542512, 0.011218640337008812, 0.010801324259365752, 0.04691249120074026, 0.06075078843031567, 0.014929975695405662, 0.17135243574822012, 0.17042887626677727, 0.17543024926328543, 0.16817429813418316, 0.16744181169195194, 0.18096349831094216, 0.15625534267780383, 0.15287450892719023, 0.13674763080388053, 0.1410019392801789, 0.019205765850710876, 0.019333006683133647, 0.026493616380059204, 0.032957452758636596, 0.022593431003316566, 0.043893916197447314, 0.02591286970745388, 0.03014197724073453, 0.023187477005558677]}, "mutation_prompt": null}
{"id": "f487ae4a-d693-46e8-8bd5-266150455182", "solution": "import numpy as np\n\nclass ImprovedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def attractiveness(distance):\n            return np.exp(-distance)\n\n        def move_fireflies(current_pos, best_pos, attractiveness, beta):\n            step_size = np.random.uniform(0, 0.1, self.dim)  # Exploration\n            current_pos = current_pos * (1 - beta) + best_pos * beta + step_size\n\n            for i in range(self.dim):  # Exploitation\n                current_pos[i] = np.clip(current_pos[i], self.lower_bound, self.upper_bound)\n\n            return current_pos\n\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution = current_solution\n                best_fitness = current_fitness\n\n            for _ in range(self.budget):\n                if func(current_solution) < func(best_solution):\n                    best_solution = current_solution\n\n                new_solution = move_fireflies(current_solution, best_solution, attractiveness(np.linalg.norm(current_solution - best_solution)), 1.0)\n                if func(new_solution) < func(current_solution):\n                    current_solution = new_solution\n        return best_solution", "name": "ImprovedAdaptiveFireflyAlgorithm", "description": "Optimizing loop structure and avoiding redundant function evaluations to enhance efficiency.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7b85523f-15d1-4774-9e3b-95141c1da953", "metadata": {"aucs": [0.070677763944196, 0.06015330020105525, 0.07548280782523975, 0.009693699157546143, 0.06766017886332554, 0.0313826553317178, 0.03222514068478122, 0.05382265711003653, 0.07080221905685646, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03175701256037322, 0.02328418211560601, 0.018724919093744186, 0.010310448087994195, 0.02226284632424158, 0.007585012418182435, 0.008675131800721325, 0.02046401027522715, 0.007193554848626826, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03215511463701948, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032420390398068766, 9.999999999998899e-05, 0.012204813572851747, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.040069733773308136, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059233246964325414, 0.05389206071432551, 0.06899892229578275, 0.037646651864985836, 0.049681156074708244, 0.14207066084713915, 0.04354131014664797, 0.015290773533212287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01911517685519737, 0.08819685642882835, 0.18511271362404091, 0.07990751509408855, 0.09067004780959143, 0.07584588539189152, 0.09578735642532787, 0.09922787224619423, 0.054222855783432555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00857972110770866, 0.0012735629305454799, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007454137474132372, 0.06921359143996464, 0.0556641964512804, 0.007493911886445548, 0.06957725218484734, 0.04756034148080002, 0.06296146287205595, 0.026256182824197505, 0.034215031853265465, 0.09179485556846667, 0.08767494064535586, 0.09366789925635999, 0.1301475460290067, 0.061136655578723054, 0.09167237736539569, 0.12026498302377497, 0.09044609838598139, 0.07582972686343159, 0.0461944297250273, 0.03338671749920963, 0.010654848720895282, 0.06337011131695158, 0.013090791813118674, 0.0528233243691999, 0.05648699256316181, 0.007097281683664414, 0.003579028922930272, 0.15065501614298915, 0.14584796595917326, 0.12334940795943872, 0.1717846828059535, 0.10335706080626894, 0.1349277199073342, 0.1534792546961664, 0.11445041544601897, 0.13679134857049047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1352993459436258, 9.999999999998899e-05, 0.04314859211064448, 0.03274442034298097, 0.09820421978977989, 0.0691561656796863, 0.016977872452856313, 0.021365834225147595, 0.0396595486881024, 0.061577017675464085, 0.053674301379695866, 0.03600096115587692, 0.06762129710089526, 0.09857962979542512, 0.011218640337008812, 0.010801324259365752, 0.04691249120074026, 0.06075078843031567, 0.014929975695405662, 0.17135243574822012, 0.17042887626677727, 0.17543024926328543, 0.16817429813418316, 0.16744181169195194, 0.18096349831094216, 0.15625534267780383, 0.15287450892719023, 0.13674763080388053, 0.1410019392801789, 0.019205765850710876, 0.019333006683133647, 0.026493616380059204, 0.032957452758636596, 0.022593431003316566, 0.043893916197447314, 0.02591286970745388, 0.03014197724073453, 0.023187477005558677]}, "mutation_prompt": null}
{"id": "70da259b-d248-4168-aec9-5ae18afc0f14", "solution": "import numpy as np\n\nclass EnhancedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def attractiveness(distance):\n            return np.exp(-distance)\n\n        def move_fireflies(current_pos, best_pos, attractiveness, beta):\n            step_size = np.random.uniform(0, 0.1, self.dim)  # Exploration\n            current_pos = current_pos * (1 - beta) + best_pos * beta + step_size\n\n            current_pos = np.clip(current_pos, self.lower_bound, self.upper_bound)\n\n            return current_pos\n\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution = current_solution\n                best_fitness = current_fitness\n\n            for _ in range(self.budget):\n                if func(current_solution) < func(best_solution):\n                    best_solution = current_solution\n\n                new_solution = move_fireflies(current_solution, best_solution, attractiveness(np.linalg.norm(current_solution - best_solution)), 1.0)\n                if func(new_solution) < func(current_solution):\n                    current_solution = new_solution\n        return best_solution", "name": "EnhancedFireflyAlgorithm", "description": "Optimizing population initialization and reducing redundant function evaluations for improved efficiency.", "configspace": "", "generation": 11, "fitness": 0.03495062165067448, "feedback": "The algorithm EnhancedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.03 with standard deviation 0.05.", "error": "", "parent_id": "7b85523f-15d1-4774-9e3b-95141c1da953", "metadata": {"aucs": [0.070677763944196, 0.06015330020105525, 0.07548280782523975, 0.009693699157546143, 0.06766017886332554, 0.0313826553317178, 0.03222514068478122, 0.05382265711003653, 0.07080221905685646, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03175701256037322, 0.02328418211560601, 0.018724919093744186, 0.010310448087994195, 0.02226284632424158, 0.007585012418182435, 0.008675131800721325, 0.02046401027522715, 0.007193554848626826, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03215511463701948, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032420390398068766, 9.999999999998899e-05, 0.012204813572851747, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.040069733773308136, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059233246964325414, 0.05389206071432551, 0.06899892229578275, 0.037646651864985836, 0.049681156074708244, 0.14207066084713915, 0.04354131014664797, 0.015290773533212287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01911517685519737, 0.08819685642882835, 0.18511271362404091, 0.07990751509408855, 0.09067004780959143, 0.07584588539189152, 0.09578735642532787, 0.09922787224619423, 0.054222855783432555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00857972110770866, 0.0012735629305454799, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007454137474132372, 0.06921359143996464, 0.0556641964512804, 0.007493911886445548, 0.06957725218484734, 0.04756034148080002, 0.06296146287205595, 0.026256182824197505, 0.034215031853265465, 0.09179485556846667, 0.08767494064535586, 0.09366789925635999, 0.1301475460290067, 0.061136655578723054, 0.09167237736539569, 0.12026498302377497, 0.09044609838598139, 0.07582972686343159, 0.0461944297250273, 0.03338671749920963, 0.010654848720895282, 0.06337011131695158, 0.013090791813118674, 0.0528233243691999, 0.05648699256316181, 0.007097281683664414, 0.003579028922930272, 0.15065501614298915, 0.14584796595917326, 0.12334940795943872, 0.1717846828059535, 0.10335706080626894, 0.1349277199073342, 0.1534792546961664, 0.11445041544601897, 0.13679134857049047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1352993459436258, 9.999999999998899e-05, 0.04314859211064448, 0.03274442034298097, 0.09820421978977989, 0.0691561656796863, 0.016977872452856313, 0.021365834225147595, 0.0396595486881024, 0.061577017675464085, 0.053674301379695866, 0.03600096115587692, 0.06762129710089526, 0.09857962979542512, 0.011218640337008812, 0.010801324259365752, 0.04691249120074026, 0.06075078843031567, 0.014929975695405662, 0.17135243574822012, 0.17042887626677727, 0.17543024926328543, 0.16817429813418316, 0.16744181169195194, 0.18096349831094216, 0.15625534267780383, 0.15287450892719023, 0.13674763080388053, 0.1410019392801789, 0.019205765850710876, 0.019333006683133647, 0.026493616380059204, 0.032957452758636596, 0.022593431003316566, 0.043893916197447314, 0.02591286970745388, 0.03014197724073453, 0.023187477005558677]}, "mutation_prompt": null}
{"id": "c89ddddf-e4ce-4dde-83d4-a06a741dada2", "solution": "import numpy as np\n\nclass ImprovedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def attractiveness(distance):\n            return np.exp(-distance)\n\n        def move_fireflies(current_pos, best_pos, attractiveness, beta):\n            step_size = np.random.uniform(0, 0.1, self.dim)  # Exploration\n            current_pos = current_pos * (1 - beta) + best_pos * beta + step_size\n\n            for i in range(self.dim):  # Exploitation\n                current_pos[i] = np.clip(current_pos[i], self.lower_bound, self.upper_bound)\n\n            return current_pos\n\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution = current_solution\n                best_fitness = current_fitness\n\n            for _ in range(self.budget):\n                if func(current_solution) < func(best_solution):\n                    best_solution = current_solution\n\n                new_solution = move_fireflies(current_solution, best_solution, attractiveness(np.linalg.norm(current_solution - best_solution)), 1.0)\n                if func(new_solution) < func(current_solution):\n                    current_solution = new_solution\n        return best_solution", "name": "ImprovedAdaptiveFireflyAlgorithm", "description": "Optimizing loop structure and avoiding redundant function evaluations to enhance efficiency.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7b85523f-15d1-4774-9e3b-95141c1da953", "metadata": {"aucs": [0.070677763944196, 0.06015330020105525, 0.07548280782523975, 0.009693699157546143, 0.06766017886332554, 0.0313826553317178, 0.03222514068478122, 0.05382265711003653, 0.07080221905685646, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03175701256037322, 0.02328418211560601, 0.018724919093744186, 0.010310448087994195, 0.02226284632424158, 0.007585012418182435, 0.008675131800721325, 0.02046401027522715, 0.007193554848626826, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03215511463701948, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032420390398068766, 9.999999999998899e-05, 0.012204813572851747, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.040069733773308136, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059233246964325414, 0.05389206071432551, 0.06899892229578275, 0.037646651864985836, 0.049681156074708244, 0.14207066084713915, 0.04354131014664797, 0.015290773533212287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01911517685519737, 0.08819685642882835, 0.18511271362404091, 0.07990751509408855, 0.09067004780959143, 0.07584588539189152, 0.09578735642532787, 0.09922787224619423, 0.054222855783432555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00857972110770866, 0.0012735629305454799, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007454137474132372, 0.06921359143996464, 0.0556641964512804, 0.007493911886445548, 0.06957725218484734, 0.04756034148080002, 0.06296146287205595, 0.026256182824197505, 0.034215031853265465, 0.09179485556846667, 0.08767494064535586, 0.09366789925635999, 0.1301475460290067, 0.061136655578723054, 0.09167237736539569, 0.12026498302377497, 0.09044609838598139, 0.07582972686343159, 0.0461944297250273, 0.03338671749920963, 0.010654848720895282, 0.06337011131695158, 0.013090791813118674, 0.0528233243691999, 0.05648699256316181, 0.007097281683664414, 0.003579028922930272, 0.15065501614298915, 0.14584796595917326, 0.12334940795943872, 0.1717846828059535, 0.10335706080626894, 0.1349277199073342, 0.1534792546961664, 0.11445041544601897, 0.13679134857049047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1352993459436258, 9.999999999998899e-05, 0.04314859211064448, 0.03274442034298097, 0.09820421978977989, 0.0691561656796863, 0.016977872452856313, 0.021365834225147595, 0.0396595486881024, 0.061577017675464085, 0.053674301379695866, 0.03600096115587692, 0.06762129710089526, 0.09857962979542512, 0.011218640337008812, 0.010801324259365752, 0.04691249120074026, 0.06075078843031567, 0.014929975695405662, 0.17135243574822012, 0.17042887626677727, 0.17543024926328543, 0.16817429813418316, 0.16744181169195194, 0.18096349831094216, 0.15625534267780383, 0.15287450892719023, 0.13674763080388053, 0.1410019392801789, 0.019205765850710876, 0.019333006683133647, 0.026493616380059204, 0.032957452758636596, 0.022593431003316566, 0.043893916197447314, 0.02591286970745388, 0.03014197724073453, 0.023187477005558677]}, "mutation_prompt": null}
{"id": "d309eac7-91e9-4ae9-9c92-fb7fb938ab4c", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def attractiveness(distance):\n            return np.exp(-distance)\n\n        def move_fireflies(current_pos, best_pos, beta):\n            step_size = np.random.uniform(0, 0.1, self.dim)  # Exploration\n            current_pos = current_pos * (1 - beta) + best_pos * beta + step_size\n\n            current_pos = np.clip(current_pos, self.lower_bound, self.upper_bound)\n\n            return current_pos\n\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution = current_solution\n                best_fitness = current_fitness\n\n            for _ in range(self.budget):\n                if func(current_solution) < func(best_solution):\n                    best_solution = current_solution\n\n                new_solution = move_fireflies(current_solution, best_solution, 1.0)\n                if func(new_solution) < func(current_solution):\n                    current_solution = new_solution\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithm", "description": "Optimizing parameter update process for improved convergence speed.", "configspace": "", "generation": 13, "fitness": 0.03495062165067448, "feedback": "The algorithm EnhancedAdaptiveFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.03 with standard deviation 0.05.", "error": "", "parent_id": "7b85523f-15d1-4774-9e3b-95141c1da953", "metadata": {"aucs": [0.070677763944196, 0.06015330020105525, 0.07548280782523975, 0.009693699157546143, 0.06766017886332554, 0.0313826553317178, 0.03222514068478122, 0.05382265711003653, 0.07080221905685646, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03175701256037322, 0.02328418211560601, 0.018724919093744186, 0.010310448087994195, 0.02226284632424158, 0.007585012418182435, 0.008675131800721325, 0.02046401027522715, 0.007193554848626826, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03215511463701948, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032420390398068766, 9.999999999998899e-05, 0.012204813572851747, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.040069733773308136, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059233246964325414, 0.05389206071432551, 0.06899892229578275, 0.037646651864985836, 0.049681156074708244, 0.14207066084713915, 0.04354131014664797, 0.015290773533212287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01911517685519737, 0.08819685642882835, 0.18511271362404091, 0.07990751509408855, 0.09067004780959143, 0.07584588539189152, 0.09578735642532787, 0.09922787224619423, 0.054222855783432555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00857972110770866, 0.0012735629305454799, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007454137474132372, 0.06921359143996464, 0.0556641964512804, 0.007493911886445548, 0.06957725218484734, 0.04756034148080002, 0.06296146287205595, 0.026256182824197505, 0.034215031853265465, 0.09179485556846667, 0.08767494064535586, 0.09366789925635999, 0.1301475460290067, 0.061136655578723054, 0.09167237736539569, 0.12026498302377497, 0.09044609838598139, 0.07582972686343159, 0.0461944297250273, 0.03338671749920963, 0.010654848720895282, 0.06337011131695158, 0.013090791813118674, 0.0528233243691999, 0.05648699256316181, 0.007097281683664414, 0.003579028922930272, 0.15065501614298915, 0.14584796595917326, 0.12334940795943872, 0.1717846828059535, 0.10335706080626894, 0.1349277199073342, 0.1534792546961664, 0.11445041544601897, 0.13679134857049047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1352993459436258, 9.999999999998899e-05, 0.04314859211064448, 0.03274442034298097, 0.09820421978977989, 0.0691561656796863, 0.016977872452856313, 0.021365834225147595, 0.0396595486881024, 0.061577017675464085, 0.053674301379695866, 0.03600096115587692, 0.06762129710089526, 0.09857962979542512, 0.011218640337008812, 0.010801324259365752, 0.04691249120074026, 0.06075078843031567, 0.014929975695405662, 0.17135243574822012, 0.17042887626677727, 0.17543024926328543, 0.16817429813418316, 0.16744181169195194, 0.18096349831094216, 0.15625534267780383, 0.15287450892719023, 0.13674763080388053, 0.1410019392801789, 0.019205765850710876, 0.019333006683133647, 0.026493616380059204, 0.032957452758636596, 0.022593431003316566, 0.043893916197447314, 0.02591286970745388, 0.03014197724073453, 0.023187477005558677]}, "mutation_prompt": null}
{"id": "9d3fd327-099d-4603-8f1c-a1bb478c5249", "solution": "import numpy as np\n\nclass ImprovedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def attractiveness(distance):\n            return np.exp(-distance)\n\n        def move_fireflies(current_pos, best_pos, attractiveness, beta):\n            step_size = np.random.uniform(0, 0.1, self.dim)  # Exploration\n            current_pos = current_pos * (1 - beta) + best_pos * beta + step_size\n\n            for i in range(self.dim):  # Exploitation\n                current_pos[i] = np.clip(current_pos[i], self.lower_bound, self.upper_bound)\n\n            return current_pos\n\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution = current_solution\n                best_fitness = current_fitness\n\n            for _ in range(self.budget):\n                if func(current_solution) < func(best_solution):\n                    best_solution = current_solution\n\n                new_solution = move_fireflies(current_solution, best_solution, attractiveness(np.linalg.norm(current_solution - best_solution)), 1.0)\n                if func(new_solution) < func(current_solution):\n                    current_solution = new_solution\n        return best_solution", "name": "ImprovedAdaptiveFireflyAlgorithm", "description": "Optimizing loop structure and avoiding redundant function evaluations to enhance efficiency.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7b85523f-15d1-4774-9e3b-95141c1da953", "metadata": {"aucs": [0.070677763944196, 0.06015330020105525, 0.07548280782523975, 0.009693699157546143, 0.06766017886332554, 0.0313826553317178, 0.03222514068478122, 0.05382265711003653, 0.07080221905685646, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03175701256037322, 0.02328418211560601, 0.018724919093744186, 0.010310448087994195, 0.02226284632424158, 0.007585012418182435, 0.008675131800721325, 0.02046401027522715, 0.007193554848626826, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03215511463701948, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032420390398068766, 9.999999999998899e-05, 0.012204813572851747, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.040069733773308136, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059233246964325414, 0.05389206071432551, 0.06899892229578275, 0.037646651864985836, 0.049681156074708244, 0.14207066084713915, 0.04354131014664797, 0.015290773533212287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01911517685519737, 0.08819685642882835, 0.18511271362404091, 0.07990751509408855, 0.09067004780959143, 0.07584588539189152, 0.09578735642532787, 0.09922787224619423, 0.054222855783432555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00857972110770866, 0.0012735629305454799, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007454137474132372, 0.06921359143996464, 0.0556641964512804, 0.007493911886445548, 0.06957725218484734, 0.04756034148080002, 0.06296146287205595, 0.026256182824197505, 0.034215031853265465, 0.09179485556846667, 0.08767494064535586, 0.09366789925635999, 0.1301475460290067, 0.061136655578723054, 0.09167237736539569, 0.12026498302377497, 0.09044609838598139, 0.07582972686343159, 0.0461944297250273, 0.03338671749920963, 0.010654848720895282, 0.06337011131695158, 0.013090791813118674, 0.0528233243691999, 0.05648699256316181, 0.007097281683664414, 0.003579028922930272, 0.15065501614298915, 0.14584796595917326, 0.12334940795943872, 0.1717846828059535, 0.10335706080626894, 0.1349277199073342, 0.1534792546961664, 0.11445041544601897, 0.13679134857049047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1352993459436258, 9.999999999998899e-05, 0.04314859211064448, 0.03274442034298097, 0.09820421978977989, 0.0691561656796863, 0.016977872452856313, 0.021365834225147595, 0.0396595486881024, 0.061577017675464085, 0.053674301379695866, 0.03600096115587692, 0.06762129710089526, 0.09857962979542512, 0.011218640337008812, 0.010801324259365752, 0.04691249120074026, 0.06075078843031567, 0.014929975695405662, 0.17135243574822012, 0.17042887626677727, 0.17543024926328543, 0.16817429813418316, 0.16744181169195194, 0.18096349831094216, 0.15625534267780383, 0.15287450892719023, 0.13674763080388053, 0.1410019392801789, 0.019205765850710876, 0.019333006683133647, 0.026493616380059204, 0.032957452758636596, 0.022593431003316566, 0.043893916197447314, 0.02591286970745388, 0.03014197724073453, 0.023187477005558677]}, "mutation_prompt": null}
{"id": "0025a74a-7d59-416f-b850-2a55b40ef475", "solution": "import numpy as np\n\nclass ImprovedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def attractiveness(distance):\n            return np.exp(-distance)\n\n        def move_fireflies(current_pos, best_pos, attractiveness, beta):\n            step_size = np.random.uniform(0, 0.1, self.dim)  # Exploration\n            current_pos = current_pos * (1 - beta) + best_pos * beta + step_size\n\n            for i in range(self.dim):  # Exploitation\n                current_pos[i] = np.clip(current_pos[i], self.lower_bound, self.upper_bound)\n\n            return current_pos\n\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution = current_solution\n                best_fitness = current_fitness\n\n            for _ in range(self.budget):\n                if func(current_solution) < func(best_solution):\n                    best_solution = current_solution\n\n                new_solution = move_fireflies(current_solution, best_solution, attractiveness(np.linalg.norm(current_solution - best_solution)), 1.0)\n                if func(new_solution) < func(current_solution):\n                    current_solution = new_solution\n        return best_solution", "name": "ImprovedAdaptiveFireflyAlgorithm", "description": "Optimizing loop structure and avoiding redundant function evaluations to enhance efficiency.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "7b85523f-15d1-4774-9e3b-95141c1da953", "metadata": {"aucs": [0.070677763944196, 0.06015330020105525, 0.07548280782523975, 0.009693699157546143, 0.06766017886332554, 0.0313826553317178, 0.03222514068478122, 0.05382265711003653, 0.07080221905685646, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03175701256037322, 0.02328418211560601, 0.018724919093744186, 0.010310448087994195, 0.02226284632424158, 0.007585012418182435, 0.008675131800721325, 0.02046401027522715, 0.007193554848626826, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03215511463701948, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032420390398068766, 9.999999999998899e-05, 0.012204813572851747, 0.004562218041036625, 9.999999999998899e-05, 9.999999999998899e-05, 0.040069733773308136, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059233246964325414, 0.05389206071432551, 0.06899892229578275, 0.037646651864985836, 0.049681156074708244, 0.14207066084713915, 0.04354131014664797, 0.015290773533212287, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01911517685519737, 0.08819685642882835, 0.18511271362404091, 0.07990751509408855, 0.09067004780959143, 0.07584588539189152, 0.09578735642532787, 0.09922787224619423, 0.054222855783432555, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00857972110770866, 0.0012735629305454799, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007454137474132372, 0.06921359143996464, 0.0556641964512804, 0.007493911886445548, 0.06957725218484734, 0.04756034148080002, 0.06296146287205595, 0.026256182824197505, 0.034215031853265465, 0.09179485556846667, 0.08767494064535586, 0.09366789925635999, 0.1301475460290067, 0.061136655578723054, 0.09167237736539569, 0.12026498302377497, 0.09044609838598139, 0.07582972686343159, 0.0461944297250273, 0.03338671749920963, 0.010654848720895282, 0.06337011131695158, 0.013090791813118674, 0.0528233243691999, 0.05648699256316181, 0.007097281683664414, 0.003579028922930272, 0.15065501614298915, 0.14584796595917326, 0.12334940795943872, 0.1717846828059535, 0.10335706080626894, 0.1349277199073342, 0.1534792546961664, 0.11445041544601897, 0.13679134857049047, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1352993459436258, 9.999999999998899e-05, 0.04314859211064448, 0.03274442034298097, 0.09820421978977989, 0.0691561656796863, 0.016977872452856313, 0.021365834225147595, 0.0396595486881024, 0.061577017675464085, 0.053674301379695866, 0.03600096115587692, 0.06762129710089526, 0.09857962979542512, 0.011218640337008812, 0.010801324259365752, 0.04691249120074026, 0.06075078843031567, 0.014929975695405662, 0.17135243574822012, 0.17042887626677727, 0.17543024926328543, 0.16817429813418316, 0.16744181169195194, 0.18096349831094216, 0.15625534267780383, 0.15287450892719023, 0.13674763080388053, 0.1410019392801789, 0.019205765850710876, 0.019333006683133647, 0.026493616380059204, 0.032957452758636596, 0.022593431003316566, 0.043893916197447314, 0.02591286970745388, 0.03014197724073453, 0.023187477005558677]}, "mutation_prompt": null}
{"id": "e390ae5d-58d2-448e-bf9c-f159865f5367", "solution": "import numpy as np\n\nclass ImprovedAdaptiveFireflyAlgorithmOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def attractiveness(distance):\n            return np.exp(-distance)\n\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution = current_solution\n                best_fitness = current_fitness\n\n            for _ in range(self.budget):\n                if func(current_solution) < func(best_solution):\n                    best_solution = current_solution\n\n                step_size = np.random.uniform(0, 0.1, self.dim)  # Exploration\n                current_solution = current_solution * 0.9 + best_solution * 0.1 + step_size\n                \n                for i in range(self.dim):  # Exploitation\n                    current_solution[i] = np.clip(current_solution[i], self.lower_bound, self.upper_bound)\n\n                new_solution = current_solution * (1 - attractiveness(np.linalg.norm(current_solution - best_solution))) + best_solution * attractiveness(np.linalg.norm(current_solution - best_solution))\n                if func(new_solution) < func(current_solution):\n                    current_solution = new_solution\n        return best_solution", "name": "ImprovedAdaptiveFireflyAlgorithmOptimized", "description": "Improved Adaptive Firefly Algorithm with optimized control flow and reduced redundant operations.", "configspace": "", "generation": 16, "fitness": 0.037357729379301256, "feedback": "The algorithm ImprovedAdaptiveFireflyAlgorithmOptimized got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.05.", "error": "", "parent_id": "7b85523f-15d1-4774-9e3b-95141c1da953", "metadata": {"aucs": [0.07025438008084384, 0.058600341912825704, 0.07956775133901317, 0.009401052570669477, 0.06575626485295138, 0.030307003211619277, 0.03222514068478122, 0.053547329277057854, 0.06992601614399663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030513986962565243, 0.021147601382201398, 0.017244929883242888, 0.010150997155277564, 0.02002428340173612, 0.006296796959401552, 0.008687676296292746, 0.018631339741552844, 0.005898368093889772, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02646121124190015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03464377518529471, 0.16565045223812158, 0.015146381428849054, 0.02480363372825467, 9.999999999998899e-05, 9.999999999998899e-05, 0.04549567497876761, 0.00014354133212035602, 0.048581676278632746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0027052068409290086, 9.999999999998899e-05, 9.999999999998899e-05, 0.037002787863794184, 0.04770409322888702, 0.06825507491037974, 0.039166635731346156, 0.050607378270270065, 0.12089078684623633, 0.04522003998524726, 0.014663784271600866, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010277757432362145, 0.08510789263033292, 0.18365213488812304, 0.07173850148271521, 0.10715289171297171, 0.07480724857082166, 0.0953203350437849, 0.09604510474739514, 0.05055211909656809, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006735738263603186, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0136504840048709, 0.07459550538933946, 0.060896188925601225, 0.08107220068635579, 0.07184153875300126, 0.04531424830567288, 0.04072327681724219, 0.0403120589292576, 0.045395822949880094, 0.0982153771072175, 0.08313527619070227, 0.08753908190089366, 0.10749162909016508, 0.08355702895100936, 0.09215328338920648, 0.12624345966201656, 0.09552819577016125, 0.07483443386016819, 0.03279054909858237, 0.007709420917669352, 0.0195973416099674, 0.05491220477327807, 0.05154030392712228, 0.04778699856005819, 0.060787912969894387, 0.024777548646938485, 0.01105350678307826, 0.11427641069772543, 0.15053607470196406, 0.15632984502661607, 0.11967374008318532, 0.13698594580097723, 0.1591940467757208, 0.14489902883483663, 0.11445239118008121, 0.20177126093826292, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13147521239625604, 9.999999999998899e-05, 0.03350800295352352, 0.03274442034298097, 0.09853541858122394, 0.06868509139020629, 0.016926696221115756, 0.020799015259978626, 0.03787902130829568, 0.06098461496028518, 0.0909705136570137, 0.03600096115587692, 0.05071346058165416, 0.05556905536866541, 0.011246804540879896, 0.01606402386774075, 0.04706021674738492, 0.05933595021769289, 0.05925041397225128, 0.1728381250559049, 0.1666164920565406, 0.17623921118123886, 0.16943785090377406, 0.1968605350396897, 0.1739761771738988, 0.19506452697017906, 0.16434912300610538, 0.17338857943327146, 0.18008676003831092, 0.011685069567490824, 0.031952181711666916, 0.036281812325822616, 0.009526712400850346, 0.030286774069421485, 0.04662352945892689, 0.017009840176604896, 0.03898540727058408, 0.03222520437781662]}, "mutation_prompt": null}
{"id": "7892d1e3-717b-4b3d-9559-fa9ca79f83ef", "solution": "import numpy as np\n\nclass ImprovedAdaptiveFireflyAlgorithmOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def attractiveness(distance):\n            return np.exp(-distance)\n\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution = current_solution\n                best_fitness = current_fitness\n\n            for _ in range(self.budget):\n                if func(current_solution) < func(best_solution):\n                    best_solution = current_solution\n\n                step_size = np.random.uniform(0, 0.1, self.dim)  # Exploration\n                current_solution = current_solution * 0.9 + best_solution * 0.1 + step_size\n                \n                for i in range(self.dim):  # Exploitation\n                    current_solution[i] = np.clip(current_solution[i], self.lower_bound, self.upper_bound)\n\n                new_solution = current_solution * (1 - attractiveness(np.linalg.norm(current_solution - best_solution))) + best_solution * attractiveness(np.linalg.norm(current_solution - best_solution))\n                if func(new_solution) < func(current_solution):\n                    current_solution = new_solution\n        return best_solution", "name": "ImprovedAdaptiveFireflyAlgorithmOptimized", "description": "Improved Adaptive Firefly Algorithm with optimized control flow and reduced redundant operations.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e390ae5d-58d2-448e-bf9c-f159865f5367", "metadata": {"aucs": [0.07025438008084384, 0.058600341912825704, 0.07956775133901317, 0.009401052570669477, 0.06575626485295138, 0.030307003211619277, 0.03222514068478122, 0.053547329277057854, 0.06992601614399663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030513986962565243, 0.021147601382201398, 0.017244929883242888, 0.010150997155277564, 0.02002428340173612, 0.006296796959401552, 0.008687676296292746, 0.018631339741552844, 0.005898368093889772, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02646121124190015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03464377518529471, 0.16565045223812158, 0.015146381428849054, 0.02480363372825467, 9.999999999998899e-05, 9.999999999998899e-05, 0.04549567497876761, 0.00014354133212035602, 0.048581676278632746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0027052068409290086, 9.999999999998899e-05, 9.999999999998899e-05, 0.037002787863794184, 0.04770409322888702, 0.06825507491037974, 0.039166635731346156, 0.050607378270270065, 0.12089078684623633, 0.04522003998524726, 0.014663784271600866, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010277757432362145, 0.08510789263033292, 0.18365213488812304, 0.07173850148271521, 0.10715289171297171, 0.07480724857082166, 0.0953203350437849, 0.09604510474739514, 0.05055211909656809, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006735738263603186, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0136504840048709, 0.07459550538933946, 0.060896188925601225, 0.08107220068635579, 0.07184153875300126, 0.04531424830567288, 0.04072327681724219, 0.0403120589292576, 0.045395822949880094, 0.0982153771072175, 0.08313527619070227, 0.08753908190089366, 0.10749162909016508, 0.08355702895100936, 0.09215328338920648, 0.12624345966201656, 0.09552819577016125, 0.07483443386016819, 0.03279054909858237, 0.007709420917669352, 0.0195973416099674, 0.05491220477327807, 0.05154030392712228, 0.04778699856005819, 0.060787912969894387, 0.024777548646938485, 0.01105350678307826, 0.11427641069772543, 0.15053607470196406, 0.15632984502661607, 0.11967374008318532, 0.13698594580097723, 0.1591940467757208, 0.14489902883483663, 0.11445239118008121, 0.20177126093826292, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13147521239625604, 9.999999999998899e-05, 0.03350800295352352, 0.03274442034298097, 0.09853541858122394, 0.06868509139020629, 0.016926696221115756, 0.020799015259978626, 0.03787902130829568, 0.06098461496028518, 0.0909705136570137, 0.03600096115587692, 0.05071346058165416, 0.05556905536866541, 0.011246804540879896, 0.01606402386774075, 0.04706021674738492, 0.05933595021769289, 0.05925041397225128, 0.1728381250559049, 0.1666164920565406, 0.17623921118123886, 0.16943785090377406, 0.1968605350396897, 0.1739761771738988, 0.19506452697017906, 0.16434912300610538, 0.17338857943327146, 0.18008676003831092, 0.011685069567490824, 0.031952181711666916, 0.036281812325822616, 0.009526712400850346, 0.030286774069421485, 0.04662352945892689, 0.017009840176604896, 0.03898540727058408, 0.03222520437781662]}, "mutation_prompt": null}
{"id": "272aa501-7401-4cf5-a6df-0b24917ded6d", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.attractiveness = lambda distance: np.exp(-distance)\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(*self.bounds, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(*self.bounds, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            for _ in range(self.budget):\n                if func(current_solution) < func(best_solution):\n                    best_solution = current_solution\n\n                step_size = np.random.uniform(0, 0.1, self.dim)\n                current_solution = 0.9 * current_solution + 0.1 * best_solution + step_size\n\n                current_solution = np.clip(current_solution, *self.bounds)\n\n                new_solution = (1 - self.attractiveness(np.linalg.norm(current_solution - best_solution))) * current_solution + self.attractiveness(np.linalg.norm(current_solution - best_solution)) * best_solution\n                if func(new_solution) < func(current_solution):\n                    current_solution = new_solution\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithm", "description": "Enhanced Adaptive Firefly Algorithm with improved control flow, reduced redundant operations, and smarter parameter adjustments.", "configspace": "", "generation": 18, "fitness": 0.037357729379301256, "feedback": "The algorithm EnhancedAdaptiveFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.05.", "error": "", "parent_id": "e390ae5d-58d2-448e-bf9c-f159865f5367", "metadata": {"aucs": [0.07025438008084384, 0.058600341912825704, 0.07956775133901317, 0.009401052570669477, 0.06575626485295138, 0.030307003211619277, 0.03222514068478122, 0.053547329277057854, 0.06992601614399663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030513986962565243, 0.021147601382201398, 0.017244929883242888, 0.010150997155277564, 0.02002428340173612, 0.006296796959401552, 0.008687676296292746, 0.018631339741552844, 0.005898368093889772, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02646121124190015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03464377518529471, 0.16565045223812158, 0.015146381428849054, 0.02480363372825467, 9.999999999998899e-05, 9.999999999998899e-05, 0.04549567497876761, 0.00014354133212035602, 0.048581676278632746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0027052068409290086, 9.999999999998899e-05, 9.999999999998899e-05, 0.037002787863794184, 0.04770409322888702, 0.06825507491037974, 0.039166635731346156, 0.050607378270270065, 0.12089078684623633, 0.04522003998524726, 0.014663784271600866, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010277757432362145, 0.08510789263033292, 0.18365213488812304, 0.07173850148271521, 0.10715289171297171, 0.07480724857082166, 0.0953203350437849, 0.09604510474739514, 0.05055211909656809, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006735738263603186, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0136504840048709, 0.07459550538933946, 0.060896188925601225, 0.08107220068635579, 0.07184153875300126, 0.04531424830567288, 0.04072327681724219, 0.0403120589292576, 0.045395822949880094, 0.0982153771072175, 0.08313527619070227, 0.08753908190089366, 0.10749162909016508, 0.08355702895100936, 0.09215328338920648, 0.12624345966201656, 0.09552819577016125, 0.07483443386016819, 0.03279054909858237, 0.007709420917669352, 0.0195973416099674, 0.05491220477327807, 0.05154030392712228, 0.04778699856005819, 0.060787912969894387, 0.024777548646938485, 0.01105350678307826, 0.11427641069772543, 0.15053607470196406, 0.15632984502661607, 0.11967374008318532, 0.13698594580097723, 0.1591940467757208, 0.14489902883483663, 0.11445239118008121, 0.20177126093826292, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13147521239625604, 9.999999999998899e-05, 0.03350800295352352, 0.03274442034298097, 0.09853541858122394, 0.06868509139020629, 0.016926696221115756, 0.020799015259978626, 0.03787902130829568, 0.06098461496028518, 0.0909705136570137, 0.03600096115587692, 0.05071346058165416, 0.05556905536866541, 0.011246804540879896, 0.01606402386774075, 0.04706021674738492, 0.05933595021769289, 0.05925041397225128, 0.1728381250559049, 0.1666164920565406, 0.17623921118123886, 0.16943785090377406, 0.1968605350396897, 0.1739761771738988, 0.19506452697017906, 0.16434912300610538, 0.17338857943327146, 0.18008676003831092, 0.011685069567490824, 0.031952181711666916, 0.036281812325822616, 0.009526712400850346, 0.030286774069421485, 0.04662352945892689, 0.017009840176604896, 0.03898540727058408, 0.03222520437781662]}, "mutation_prompt": null}
{"id": "57bb404d-ba24-4afc-9f4e-1cd496d77bc0", "solution": "import numpy as np\n\nclass ImprovedAdaptiveFireflyAlgorithmOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def attractiveness(distance):\n            return np.exp(-distance)\n\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution = current_solution\n                best_fitness = current_fitness\n\n            for _ in range(self.budget):\n                if func(current_solution) < func(best_solution):\n                    best_solution = current_solution\n\n                step_size = np.random.uniform(0, 0.1, self.dim)  # Exploration\n                current_solution = current_solution * 0.9 + best_solution * 0.1 + step_size\n                \n                for i in range(self.dim):  # Exploitation\n                    current_solution[i] = np.clip(current_solution[i], self.lower_bound, self.upper_bound)\n\n                new_solution = current_solution * (1 - attractiveness(np.linalg.norm(current_solution - best_solution))) + best_solution * attractiveness(np.linalg.norm(current_solution - best_solution))\n                if func(new_solution) < func(current_solution):\n                    current_solution = new_solution\n        return best_solution", "name": "ImprovedAdaptiveFireflyAlgorithmOptimized", "description": "Improved Adaptive Firefly Algorithm with optimized control flow and reduced redundant operations.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e390ae5d-58d2-448e-bf9c-f159865f5367", "metadata": {"aucs": [0.07025438008084384, 0.058600341912825704, 0.07956775133901317, 0.009401052570669477, 0.06575626485295138, 0.030307003211619277, 0.03222514068478122, 0.053547329277057854, 0.06992601614399663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030513986962565243, 0.021147601382201398, 0.017244929883242888, 0.010150997155277564, 0.02002428340173612, 0.006296796959401552, 0.008687676296292746, 0.018631339741552844, 0.005898368093889772, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02646121124190015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03464377518529471, 0.16565045223812158, 0.015146381428849054, 0.02480363372825467, 9.999999999998899e-05, 9.999999999998899e-05, 0.04549567497876761, 0.00014354133212035602, 0.048581676278632746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0027052068409290086, 9.999999999998899e-05, 9.999999999998899e-05, 0.037002787863794184, 0.04770409322888702, 0.06825507491037974, 0.039166635731346156, 0.050607378270270065, 0.12089078684623633, 0.04522003998524726, 0.014663784271600866, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010277757432362145, 0.08510789263033292, 0.18365213488812304, 0.07173850148271521, 0.10715289171297171, 0.07480724857082166, 0.0953203350437849, 0.09604510474739514, 0.05055211909656809, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006735738263603186, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0136504840048709, 0.07459550538933946, 0.060896188925601225, 0.08107220068635579, 0.07184153875300126, 0.04531424830567288, 0.04072327681724219, 0.0403120589292576, 0.045395822949880094, 0.0982153771072175, 0.08313527619070227, 0.08753908190089366, 0.10749162909016508, 0.08355702895100936, 0.09215328338920648, 0.12624345966201656, 0.09552819577016125, 0.07483443386016819, 0.03279054909858237, 0.007709420917669352, 0.0195973416099674, 0.05491220477327807, 0.05154030392712228, 0.04778699856005819, 0.060787912969894387, 0.024777548646938485, 0.01105350678307826, 0.11427641069772543, 0.15053607470196406, 0.15632984502661607, 0.11967374008318532, 0.13698594580097723, 0.1591940467757208, 0.14489902883483663, 0.11445239118008121, 0.20177126093826292, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13147521239625604, 9.999999999998899e-05, 0.03350800295352352, 0.03274442034298097, 0.09853541858122394, 0.06868509139020629, 0.016926696221115756, 0.020799015259978626, 0.03787902130829568, 0.06098461496028518, 0.0909705136570137, 0.03600096115587692, 0.05071346058165416, 0.05556905536866541, 0.011246804540879896, 0.01606402386774075, 0.04706021674738492, 0.05933595021769289, 0.05925041397225128, 0.1728381250559049, 0.1666164920565406, 0.17623921118123886, 0.16943785090377406, 0.1968605350396897, 0.1739761771738988, 0.19506452697017906, 0.16434912300610538, 0.17338857943327146, 0.18008676003831092, 0.011685069567490824, 0.031952181711666916, 0.036281812325822616, 0.009526712400850346, 0.030286774069421485, 0.04662352945892689, 0.017009840176604896, 0.03898540727058408, 0.03222520437781662]}, "mutation_prompt": null}
{"id": "d9d95ff1-4377-4b12-ada5-d30c5c789e8a", "solution": "import numpy as np\n\nclass ImprovedAdaptiveFireflyAlgorithmOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def attractiveness(distance):\n            return np.exp(-distance)\n\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution = current_solution\n                best_fitness = current_fitness\n\n            for _ in range(self.budget):\n                if func(current_solution) < func(best_solution):\n                    best_solution = current_solution\n\n                step_size = np.random.uniform(0, 0.1, self.dim)  # Exploration\n                current_solution = current_solution * 0.9 + best_solution * 0.1 + step_size\n                \n                for i in range(self.dim):  # Exploitation\n                    current_solution[i] = np.clip(current_solution[i], self.lower_bound, self.upper_bound)\n\n                new_solution = current_solution * (1 - attractiveness(np.linalg.norm(current_solution - best_solution))) + best_solution * attractiveness(np.linalg.norm(current_solution - best_solution))\n                if func(new_solution) < func(current_solution):\n                    current_solution = new_solution\n        return best_solution", "name": "ImprovedAdaptiveFireflyAlgorithmOptimized", "description": "Improved Adaptive Firefly Algorithm with optimized control flow and reduced redundant operations.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e390ae5d-58d2-448e-bf9c-f159865f5367", "metadata": {"aucs": [0.07025438008084384, 0.058600341912825704, 0.07956775133901317, 0.009401052570669477, 0.06575626485295138, 0.030307003211619277, 0.03222514068478122, 0.053547329277057854, 0.06992601614399663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030513986962565243, 0.021147601382201398, 0.017244929883242888, 0.010150997155277564, 0.02002428340173612, 0.006296796959401552, 0.008687676296292746, 0.018631339741552844, 0.005898368093889772, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02646121124190015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03464377518529471, 0.16565045223812158, 0.015146381428849054, 0.02480363372825467, 9.999999999998899e-05, 9.999999999998899e-05, 0.04549567497876761, 0.00014354133212035602, 0.048581676278632746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0027052068409290086, 9.999999999998899e-05, 9.999999999998899e-05, 0.037002787863794184, 0.04770409322888702, 0.06825507491037974, 0.039166635731346156, 0.050607378270270065, 0.12089078684623633, 0.04522003998524726, 0.014663784271600866, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010277757432362145, 0.08510789263033292, 0.18365213488812304, 0.07173850148271521, 0.10715289171297171, 0.07480724857082166, 0.0953203350437849, 0.09604510474739514, 0.05055211909656809, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006735738263603186, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0136504840048709, 0.07459550538933946, 0.060896188925601225, 0.08107220068635579, 0.07184153875300126, 0.04531424830567288, 0.04072327681724219, 0.0403120589292576, 0.045395822949880094, 0.0982153771072175, 0.08313527619070227, 0.08753908190089366, 0.10749162909016508, 0.08355702895100936, 0.09215328338920648, 0.12624345966201656, 0.09552819577016125, 0.07483443386016819, 0.03279054909858237, 0.007709420917669352, 0.0195973416099674, 0.05491220477327807, 0.05154030392712228, 0.04778699856005819, 0.060787912969894387, 0.024777548646938485, 0.01105350678307826, 0.11427641069772543, 0.15053607470196406, 0.15632984502661607, 0.11967374008318532, 0.13698594580097723, 0.1591940467757208, 0.14489902883483663, 0.11445239118008121, 0.20177126093826292, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13147521239625604, 9.999999999998899e-05, 0.03350800295352352, 0.03274442034298097, 0.09853541858122394, 0.06868509139020629, 0.016926696221115756, 0.020799015259978626, 0.03787902130829568, 0.06098461496028518, 0.0909705136570137, 0.03600096115587692, 0.05071346058165416, 0.05556905536866541, 0.011246804540879896, 0.01606402386774075, 0.04706021674738492, 0.05933595021769289, 0.05925041397225128, 0.1728381250559049, 0.1666164920565406, 0.17623921118123886, 0.16943785090377406, 0.1968605350396897, 0.1739761771738988, 0.19506452697017906, 0.16434912300610538, 0.17338857943327146, 0.18008676003831092, 0.011685069567490824, 0.031952181711666916, 0.036281812325822616, 0.009526712400850346, 0.030286774069421485, 0.04662352945892689, 0.017009840176604896, 0.03898540727058408, 0.03222520437781662]}, "mutation_prompt": null}
{"id": "533b52c4-d943-43d3-9825-afde3a668998", "solution": "import numpy as np\n\nclass ImprovedAdaptiveFireflyAlgorithmOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def attractiveness(distance):\n            return np.exp(-distance)\n\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution = current_solution\n                best_fitness = current_fitness\n\n            for _ in range(self.budget):\n                if func(current_solution) < func(best_solution):\n                    best_solution = current_solution\n\n                step_size = np.random.uniform(0, 0.1, self.dim)  # Exploration\n                current_solution = current_solution * 0.9 + best_solution * 0.1 + step_size\n                \n                for i in range(self.dim):  # Exploitation\n                    current_solution[i] = np.clip(current_solution[i], self.lower_bound, self.upper_bound)\n\n                new_solution = current_solution * (1 - attractiveness(np.linalg.norm(current_solution - best_solution))) + best_solution * attractiveness(np.linalg.norm(current_solution - best_solution))\n                if func(new_solution) < func(current_solution):\n                    current_solution = new_solution\n        return best_solution", "name": "ImprovedAdaptiveFireflyAlgorithmOptimized", "description": "Improved Adaptive Firefly Algorithm with optimized control flow and reduced redundant operations.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e390ae5d-58d2-448e-bf9c-f159865f5367", "metadata": {"aucs": [0.07025438008084384, 0.058600341912825704, 0.07956775133901317, 0.009401052570669477, 0.06575626485295138, 0.030307003211619277, 0.03222514068478122, 0.053547329277057854, 0.06992601614399663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030513986962565243, 0.021147601382201398, 0.017244929883242888, 0.010150997155277564, 0.02002428340173612, 0.006296796959401552, 0.008687676296292746, 0.018631339741552844, 0.005898368093889772, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02646121124190015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03464377518529471, 0.16565045223812158, 0.015146381428849054, 0.02480363372825467, 9.999999999998899e-05, 9.999999999998899e-05, 0.04549567497876761, 0.00014354133212035602, 0.048581676278632746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0027052068409290086, 9.999999999998899e-05, 9.999999999998899e-05, 0.037002787863794184, 0.04770409322888702, 0.06825507491037974, 0.039166635731346156, 0.050607378270270065, 0.12089078684623633, 0.04522003998524726, 0.014663784271600866, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010277757432362145, 0.08510789263033292, 0.18365213488812304, 0.07173850148271521, 0.10715289171297171, 0.07480724857082166, 0.0953203350437849, 0.09604510474739514, 0.05055211909656809, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006735738263603186, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0136504840048709, 0.07459550538933946, 0.060896188925601225, 0.08107220068635579, 0.07184153875300126, 0.04531424830567288, 0.04072327681724219, 0.0403120589292576, 0.045395822949880094, 0.0982153771072175, 0.08313527619070227, 0.08753908190089366, 0.10749162909016508, 0.08355702895100936, 0.09215328338920648, 0.12624345966201656, 0.09552819577016125, 0.07483443386016819, 0.03279054909858237, 0.007709420917669352, 0.0195973416099674, 0.05491220477327807, 0.05154030392712228, 0.04778699856005819, 0.060787912969894387, 0.024777548646938485, 0.01105350678307826, 0.11427641069772543, 0.15053607470196406, 0.15632984502661607, 0.11967374008318532, 0.13698594580097723, 0.1591940467757208, 0.14489902883483663, 0.11445239118008121, 0.20177126093826292, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13147521239625604, 9.999999999998899e-05, 0.03350800295352352, 0.03274442034298097, 0.09853541858122394, 0.06868509139020629, 0.016926696221115756, 0.020799015259978626, 0.03787902130829568, 0.06098461496028518, 0.0909705136570137, 0.03600096115587692, 0.05071346058165416, 0.05556905536866541, 0.011246804540879896, 0.01606402386774075, 0.04706021674738492, 0.05933595021769289, 0.05925041397225128, 0.1728381250559049, 0.1666164920565406, 0.17623921118123886, 0.16943785090377406, 0.1968605350396897, 0.1739761771738988, 0.19506452697017906, 0.16434912300610538, 0.17338857943327146, 0.18008676003831092, 0.011685069567490824, 0.031952181711666916, 0.036281812325822616, 0.009526712400850346, 0.030286774069421485, 0.04662352945892689, 0.017009840176604896, 0.03898540727058408, 0.03222520437781662]}, "mutation_prompt": null}
{"id": "ac4e0c74-c0a2-421b-bec5-9d1149d225b3", "solution": "import numpy as np\n\nclass ImprovedAdaptiveFireflyAlgorithmOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def attractiveness(distance):\n            return np.exp(-distance)\n\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution = current_solution\n                best_fitness = current_fitness\n\n            for _ in range(self.budget):\n                if func(current_solution) < func(best_solution):\n                    best_solution = current_solution\n\n                step_size = np.random.uniform(0, 0.1, self.dim)  # Exploration\n                current_solution = current_solution * 0.9 + best_solution * 0.1 + step_size\n                \n                for i in range(self.dim):  # Exploitation\n                    current_solution[i] = np.clip(current_solution[i], self.lower_bound, self.upper_bound)\n\n                new_solution = current_solution * (1 - attractiveness(np.linalg.norm(current_solution - best_solution))) + best_solution * attractiveness(np.linalg.norm(current_solution - best_solution))\n                if func(new_solution) < func(current_solution):\n                    current_solution = new_solution\n        return best_solution", "name": "ImprovedAdaptiveFireflyAlgorithmOptimized", "description": "Improved Adaptive Firefly Algorithm with optimized control flow and reduced redundant operations.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e390ae5d-58d2-448e-bf9c-f159865f5367", "metadata": {"aucs": [0.07025438008084384, 0.058600341912825704, 0.07956775133901317, 0.009401052570669477, 0.06575626485295138, 0.030307003211619277, 0.03222514068478122, 0.053547329277057854, 0.06992601614399663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030513986962565243, 0.021147601382201398, 0.017244929883242888, 0.010150997155277564, 0.02002428340173612, 0.006296796959401552, 0.008687676296292746, 0.018631339741552844, 0.005898368093889772, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02646121124190015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03464377518529471, 0.16565045223812158, 0.015146381428849054, 0.02480363372825467, 9.999999999998899e-05, 9.999999999998899e-05, 0.04549567497876761, 0.00014354133212035602, 0.048581676278632746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0027052068409290086, 9.999999999998899e-05, 9.999999999998899e-05, 0.037002787863794184, 0.04770409322888702, 0.06825507491037974, 0.039166635731346156, 0.050607378270270065, 0.12089078684623633, 0.04522003998524726, 0.014663784271600866, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010277757432362145, 0.08510789263033292, 0.18365213488812304, 0.07173850148271521, 0.10715289171297171, 0.07480724857082166, 0.0953203350437849, 0.09604510474739514, 0.05055211909656809, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006735738263603186, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0136504840048709, 0.07459550538933946, 0.060896188925601225, 0.08107220068635579, 0.07184153875300126, 0.04531424830567288, 0.04072327681724219, 0.0403120589292576, 0.045395822949880094, 0.0982153771072175, 0.08313527619070227, 0.08753908190089366, 0.10749162909016508, 0.08355702895100936, 0.09215328338920648, 0.12624345966201656, 0.09552819577016125, 0.07483443386016819, 0.03279054909858237, 0.007709420917669352, 0.0195973416099674, 0.05491220477327807, 0.05154030392712228, 0.04778699856005819, 0.060787912969894387, 0.024777548646938485, 0.01105350678307826, 0.11427641069772543, 0.15053607470196406, 0.15632984502661607, 0.11967374008318532, 0.13698594580097723, 0.1591940467757208, 0.14489902883483663, 0.11445239118008121, 0.20177126093826292, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13147521239625604, 9.999999999998899e-05, 0.03350800295352352, 0.03274442034298097, 0.09853541858122394, 0.06868509139020629, 0.016926696221115756, 0.020799015259978626, 0.03787902130829568, 0.06098461496028518, 0.0909705136570137, 0.03600096115587692, 0.05071346058165416, 0.05556905536866541, 0.011246804540879896, 0.01606402386774075, 0.04706021674738492, 0.05933595021769289, 0.05925041397225128, 0.1728381250559049, 0.1666164920565406, 0.17623921118123886, 0.16943785090377406, 0.1968605350396897, 0.1739761771738988, 0.19506452697017906, 0.16434912300610538, 0.17338857943327146, 0.18008676003831092, 0.011685069567490824, 0.031952181711666916, 0.036281812325822616, 0.009526712400850346, 0.030286774069421485, 0.04662352945892689, 0.017009840176604896, 0.03898540727058408, 0.03222520437781662]}, "mutation_prompt": null}
{"id": "ed827209-e22f-4036-bba6-aeed7e268ce5", "solution": "import numpy as np\n\nclass ImprovedAdaptiveFireflyAlgorithmOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def attractiveness(distance):\n            return np.exp(-distance)\n\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution = current_solution\n                best_fitness = current_fitness\n\n            for _ in range(self.budget):\n                if func(current_solution) < func(best_solution):\n                    best_solution = current_solution\n\n                step_size = np.random.uniform(0, 0.1, self.dim)  # Exploration\n                current_solution = current_solution * 0.9 + best_solution * 0.1 + step_size\n                \n                for i in range(self.dim):  # Exploitation\n                    current_solution[i] = np.clip(current_solution[i], self.lower_bound, self.upper_bound)\n\n                new_solution = current_solution * (1 - attractiveness(np.linalg.norm(current_solution - best_solution))) + best_solution * attractiveness(np.linalg.norm(current_solution - best_solution))\n                if func(new_solution) < func(current_solution):\n                    current_solution = new_solution\n        return best_solution", "name": "ImprovedAdaptiveFireflyAlgorithmOptimized", "description": "Improved Adaptive Firefly Algorithm with optimized control flow and reduced redundant operations.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e390ae5d-58d2-448e-bf9c-f159865f5367", "metadata": {"aucs": [0.07025438008084384, 0.058600341912825704, 0.07956775133901317, 0.009401052570669477, 0.06575626485295138, 0.030307003211619277, 0.03222514068478122, 0.053547329277057854, 0.06992601614399663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030513986962565243, 0.021147601382201398, 0.017244929883242888, 0.010150997155277564, 0.02002428340173612, 0.006296796959401552, 0.008687676296292746, 0.018631339741552844, 0.005898368093889772, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02646121124190015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03464377518529471, 0.16565045223812158, 0.015146381428849054, 0.02480363372825467, 9.999999999998899e-05, 9.999999999998899e-05, 0.04549567497876761, 0.00014354133212035602, 0.048581676278632746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0027052068409290086, 9.999999999998899e-05, 9.999999999998899e-05, 0.037002787863794184, 0.04770409322888702, 0.06825507491037974, 0.039166635731346156, 0.050607378270270065, 0.12089078684623633, 0.04522003998524726, 0.014663784271600866, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010277757432362145, 0.08510789263033292, 0.18365213488812304, 0.07173850148271521, 0.10715289171297171, 0.07480724857082166, 0.0953203350437849, 0.09604510474739514, 0.05055211909656809, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006735738263603186, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0136504840048709, 0.07459550538933946, 0.060896188925601225, 0.08107220068635579, 0.07184153875300126, 0.04531424830567288, 0.04072327681724219, 0.0403120589292576, 0.045395822949880094, 0.0982153771072175, 0.08313527619070227, 0.08753908190089366, 0.10749162909016508, 0.08355702895100936, 0.09215328338920648, 0.12624345966201656, 0.09552819577016125, 0.07483443386016819, 0.03279054909858237, 0.007709420917669352, 0.0195973416099674, 0.05491220477327807, 0.05154030392712228, 0.04778699856005819, 0.060787912969894387, 0.024777548646938485, 0.01105350678307826, 0.11427641069772543, 0.15053607470196406, 0.15632984502661607, 0.11967374008318532, 0.13698594580097723, 0.1591940467757208, 0.14489902883483663, 0.11445239118008121, 0.20177126093826292, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13147521239625604, 9.999999999998899e-05, 0.03350800295352352, 0.03274442034298097, 0.09853541858122394, 0.06868509139020629, 0.016926696221115756, 0.020799015259978626, 0.03787902130829568, 0.06098461496028518, 0.0909705136570137, 0.03600096115587692, 0.05071346058165416, 0.05556905536866541, 0.011246804540879896, 0.01606402386774075, 0.04706021674738492, 0.05933595021769289, 0.05925041397225128, 0.1728381250559049, 0.1666164920565406, 0.17623921118123886, 0.16943785090377406, 0.1968605350396897, 0.1739761771738988, 0.19506452697017906, 0.16434912300610538, 0.17338857943327146, 0.18008676003831092, 0.011685069567490824, 0.031952181711666916, 0.036281812325822616, 0.009526712400850346, 0.030286774069421485, 0.04662352945892689, 0.017009840176604896, 0.03898540727058408, 0.03222520437781662]}, "mutation_prompt": null}
{"id": "1fca08b7-b874-423f-b76e-2ea5563668a0", "solution": "import numpy as np\n\nclass ImprovedAdaptiveFireflyAlgorithmOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def attractiveness(distance):\n            return np.exp(-distance)\n\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution = current_solution\n                best_fitness = current_fitness\n\n            for _ in range(self.budget):\n                if func(current_solution) < func(best_solution):\n                    best_solution = current_solution\n\n                step_size = np.random.uniform(0, 0.1, self.dim)  # Exploration\n                current_solution = current_solution * 0.9 + best_solution * 0.1 + step_size\n                \n                for i in range(self.dim):  # Exploitation\n                    current_solution[i] = np.clip(current_solution[i], self.lower_bound, self.upper_bound)\n\n                new_solution = current_solution * (1 - attractiveness(np.linalg.norm(current_solution - best_solution))) + best_solution * attractiveness(np.linalg.norm(current_solution - best_solution))\n                if func(new_solution) < func(current_solution):\n                    current_solution = new_solution\n        return best_solution", "name": "ImprovedAdaptiveFireflyAlgorithmOptimized", "description": "Improved Adaptive Firefly Algorithm with optimized control flow and reduced redundant operations.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e390ae5d-58d2-448e-bf9c-f159865f5367", "metadata": {"aucs": [0.07025438008084384, 0.058600341912825704, 0.07956775133901317, 0.009401052570669477, 0.06575626485295138, 0.030307003211619277, 0.03222514068478122, 0.053547329277057854, 0.06992601614399663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030513986962565243, 0.021147601382201398, 0.017244929883242888, 0.010150997155277564, 0.02002428340173612, 0.006296796959401552, 0.008687676296292746, 0.018631339741552844, 0.005898368093889772, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02646121124190015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03464377518529471, 0.16565045223812158, 0.015146381428849054, 0.02480363372825467, 9.999999999998899e-05, 9.999999999998899e-05, 0.04549567497876761, 0.00014354133212035602, 0.048581676278632746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0027052068409290086, 9.999999999998899e-05, 9.999999999998899e-05, 0.037002787863794184, 0.04770409322888702, 0.06825507491037974, 0.039166635731346156, 0.050607378270270065, 0.12089078684623633, 0.04522003998524726, 0.014663784271600866, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010277757432362145, 0.08510789263033292, 0.18365213488812304, 0.07173850148271521, 0.10715289171297171, 0.07480724857082166, 0.0953203350437849, 0.09604510474739514, 0.05055211909656809, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006735738263603186, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0136504840048709, 0.07459550538933946, 0.060896188925601225, 0.08107220068635579, 0.07184153875300126, 0.04531424830567288, 0.04072327681724219, 0.0403120589292576, 0.045395822949880094, 0.0982153771072175, 0.08313527619070227, 0.08753908190089366, 0.10749162909016508, 0.08355702895100936, 0.09215328338920648, 0.12624345966201656, 0.09552819577016125, 0.07483443386016819, 0.03279054909858237, 0.007709420917669352, 0.0195973416099674, 0.05491220477327807, 0.05154030392712228, 0.04778699856005819, 0.060787912969894387, 0.024777548646938485, 0.01105350678307826, 0.11427641069772543, 0.15053607470196406, 0.15632984502661607, 0.11967374008318532, 0.13698594580097723, 0.1591940467757208, 0.14489902883483663, 0.11445239118008121, 0.20177126093826292, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13147521239625604, 9.999999999998899e-05, 0.03350800295352352, 0.03274442034298097, 0.09853541858122394, 0.06868509139020629, 0.016926696221115756, 0.020799015259978626, 0.03787902130829568, 0.06098461496028518, 0.0909705136570137, 0.03600096115587692, 0.05071346058165416, 0.05556905536866541, 0.011246804540879896, 0.01606402386774075, 0.04706021674738492, 0.05933595021769289, 0.05925041397225128, 0.1728381250559049, 0.1666164920565406, 0.17623921118123886, 0.16943785090377406, 0.1968605350396897, 0.1739761771738988, 0.19506452697017906, 0.16434912300610538, 0.17338857943327146, 0.18008676003831092, 0.011685069567490824, 0.031952181711666916, 0.036281812325822616, 0.009526712400850346, 0.030286774069421485, 0.04662352945892689, 0.017009840176604896, 0.03898540727058408, 0.03222520437781662]}, "mutation_prompt": null}
{"id": "4dee96ce-9b51-469b-b2dd-7df9c19ecfe7", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        def attractiveness(distance):\n            return np.exp(-distance)\n\n        best_solution = np.random.uniform(*self.bounds, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(*self.bounds, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            for _ in range(self.budget):\n                if func(current_solution) < func(best_solution):\n                    best_solution = current_solution\n\n                step_size = np.random.uniform(0, 0.1, self.dim)\n                current_solution = 0.9 * current_solution + 0.1 * best_solution + step_size\n\n                current_solution = np.clip(current_solution, *self.bounds)\n\n                new_solution = (1 - attractiveness(np.linalg.norm(current_solution - best_solution))) * current_solution + attractiveness(np.linalg.norm(current_solution - best_solution)) * best_solution\n                if func(new_solution) < func(current_solution):\n                    current_solution = new_solution\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithm", "description": "Improved Adaptive Firefly Algorithm with enhanced exploitation and exploration strategies for better convergence.", "configspace": "", "generation": 25, "fitness": 0.037357729379301256, "feedback": "The algorithm EnhancedAdaptiveFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.05.", "error": "", "parent_id": "e390ae5d-58d2-448e-bf9c-f159865f5367", "metadata": {"aucs": [0.07025438008084384, 0.058600341912825704, 0.07956775133901317, 0.009401052570669477, 0.06575626485295138, 0.030307003211619277, 0.03222514068478122, 0.053547329277057854, 0.06992601614399663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030513986962565243, 0.021147601382201398, 0.017244929883242888, 0.010150997155277564, 0.02002428340173612, 0.006296796959401552, 0.008687676296292746, 0.018631339741552844, 0.005898368093889772, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02646121124190015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03464377518529471, 0.16565045223812158, 0.015146381428849054, 0.02480363372825467, 9.999999999998899e-05, 9.999999999998899e-05, 0.04549567497876761, 0.00014354133212035602, 0.048581676278632746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0027052068409290086, 9.999999999998899e-05, 9.999999999998899e-05, 0.037002787863794184, 0.04770409322888702, 0.06825507491037974, 0.039166635731346156, 0.050607378270270065, 0.12089078684623633, 0.04522003998524726, 0.014663784271600866, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010277757432362145, 0.08510789263033292, 0.18365213488812304, 0.07173850148271521, 0.10715289171297171, 0.07480724857082166, 0.0953203350437849, 0.09604510474739514, 0.05055211909656809, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006735738263603186, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0136504840048709, 0.07459550538933946, 0.060896188925601225, 0.08107220068635579, 0.07184153875300126, 0.04531424830567288, 0.04072327681724219, 0.0403120589292576, 0.045395822949880094, 0.0982153771072175, 0.08313527619070227, 0.08753908190089366, 0.10749162909016508, 0.08355702895100936, 0.09215328338920648, 0.12624345966201656, 0.09552819577016125, 0.07483443386016819, 0.03279054909858237, 0.007709420917669352, 0.0195973416099674, 0.05491220477327807, 0.05154030392712228, 0.04778699856005819, 0.060787912969894387, 0.024777548646938485, 0.01105350678307826, 0.11427641069772543, 0.15053607470196406, 0.15632984502661607, 0.11967374008318532, 0.13698594580097723, 0.1591940467757208, 0.14489902883483663, 0.11445239118008121, 0.20177126093826292, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13147521239625604, 9.999999999998899e-05, 0.03350800295352352, 0.03274442034298097, 0.09853541858122394, 0.06868509139020629, 0.016926696221115756, 0.020799015259978626, 0.03787902130829568, 0.06098461496028518, 0.0909705136570137, 0.03600096115587692, 0.05071346058165416, 0.05556905536866541, 0.011246804540879896, 0.01606402386774075, 0.04706021674738492, 0.05933595021769289, 0.05925041397225128, 0.1728381250559049, 0.1666164920565406, 0.17623921118123886, 0.16943785090377406, 0.1968605350396897, 0.1739761771738988, 0.19506452697017906, 0.16434912300610538, 0.17338857943327146, 0.18008676003831092, 0.011685069567490824, 0.031952181711666916, 0.036281812325822616, 0.009526712400850346, 0.030286774069421485, 0.04662352945892689, 0.017009840176604896, 0.03898540727058408, 0.03222520437781662]}, "mutation_prompt": null}
{"id": "f0a2164f-3614-4d25-9ed4-1a23769d3ca4", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def attractiveness(distance):\n            return np.exp(-distance)\n\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution = current_solution\n                best_fitness = current_fitness\n\n            for _ in range(self.budget):\n                if func(current_solution) < func(best_solution):\n                    best_solution = current_solution\n\n                step_size = np.random.uniform(0, 0.1, self.dim)  # Exploration\n                current_solution = current_solution * 0.8 + best_solution * 0.2 + step_size\n                \n                current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)  # Exploitation\n\n                new_solution = current_solution * (1 - attractiveness(np.linalg.norm(current_solution - best_solution))) + best_solution * attractiveness(np.linalg.norm(current_solution - best_solution))\n                if func(new_solution) < func(current_solution):\n                    current_solution = new_solution\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithm", "description": "Enhanced Adaptive Firefly Algorithm with improved exploration and exploitation balance through dynamically adjusting step size.", "configspace": "", "generation": 26, "fitness": 0.036262654282757704, "feedback": "The algorithm EnhancedAdaptiveFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.05.", "error": "", "parent_id": "e390ae5d-58d2-448e-bf9c-f159865f5367", "metadata": {"aucs": [0.07100247333612297, 0.058601496163428024, 0.07997071760944363, 0.00935043149282122, 0.06564248229132918, 0.030452237853996866, 0.03222514068478122, 0.053464875757959995, 0.07019224014992764, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030646285449392074, 0.021413029034263675, 0.017514510093402214, 0.010169256494021117, 0.020303841191502747, 0.00649429637674015, 0.008698161219150125, 0.01888870513150742, 0.006041140539810308, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03203643088313224, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034650362365500564, 0.13447128467174896, 0.013043829454178701, 0.011917683341800878, 9.999999999998899e-05, 9.999999999998899e-05, 0.04538660303473607, 0.007823462930408476, 0.039704689536911086, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042007618123759305, 0.04922509963055888, 0.06879446911381037, 0.03691319214423039, 0.05285777320655416, 0.12507081551240495, 0.04579842068437223, 0.013780547036627455, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013362553594410409, 0.08565272440446947, 0.18366704633179776, 0.07338858459800535, 0.10592688976957865, 0.07472866715748439, 0.09539335624089162, 0.09652107058690595, 0.05041634692975727, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00676797215991376, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025817225016219525, 0.06930507019127219, 0.061219534907901885, 0.023998724684521022, 0.06005639008693575, 0.05508213757580305, 0.05831659765379227, 0.026082038502652227, 0.042721572322986345, 0.0939138470720694, 0.08019738634368145, 0.09547952622272682, 0.11872056436318235, 0.06659513556139196, 0.09215328338920648, 0.11940340284398643, 0.09582235030310271, 0.07450685926688583, 0.027848345194380508, 0.010447985648637248, 0.014718024707660149, 0.053891435556267964, 0.05093203385391354, 0.051158923351102614, 0.057485990659085995, 0.014648625862156095, 0.009673815372256311, 0.11170764076851192, 0.15290005894573455, 0.13938140379694597, 0.12677410057051675, 0.12049754101770016, 0.15672293897977563, 0.1503560840391236, 0.1092345003285724, 0.17262948464359085, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13109067782274197, 9.999999999998899e-05, 0.035183445950432324, 0.03274442034298097, 0.09851209059230626, 0.06871469687086917, 0.016928408025461028, 0.02110999864706442, 0.038258297062068625, 0.06091023965671416, 0.08386346645209908, 0.03600096115587692, 0.06434509846111991, 0.05610718491394018, 0.011168157499785725, 0.01648505901476094, 0.04709704724708941, 0.060809343680401806, 0.05051255260787513, 0.1642385753085609, 0.1858851724446705, 0.16834626355864568, 0.15885992299391105, 0.17965275137394088, 0.16698543736933102, 0.17020857286774715, 0.18096569309389354, 0.15806867659090917, 0.16357136127270644, 0.013724176307759461, 0.028784186911711918, 0.03369927636009307, 0.0224135209681946, 0.019135200216486403, 0.04050585494601511, 0.026894553074701122, 0.03904516214397624, 0.03122842735102227]}, "mutation_prompt": null}
{"id": "3525c6c8-6b7a-4717-b4f6-293ea6024cda", "solution": "import numpy as np\n\nclass ImprovedAdaptiveFireflyAlgorithmOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n\n    def __call__(self, func):\n        def attractiveness(distance):\n            return np.exp(-distance)\n\n        best_solution = np.random.uniform(*self.bounds, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(*self.bounds, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            for _ in range(self.budget):\n                if func(current_solution) < func(best_solution):\n                    best_solution = current_solution\n\n                step_size = np.random.uniform(0, 0.1, self.dim)\n                current_solution = 0.9 * current_solution + 0.1 * best_solution + step_size\n                current_solution = np.clip(current_solution, *self.bounds)\n\n                new_solution = current_solution * (1 - attractiveness(np.linalg.norm(current_solution - best_solution))) + best_solution * attractiveness(np.linalg.norm(current_solution - best_solution))\n                if func(new_solution) < func(current_solution):\n                    current_solution = new_solution\n        return best_solution", "name": "ImprovedAdaptiveFireflyAlgorithmOptimized", "description": "Utilizing numpy operations to consolidate repeated operations and enhance efficiency.", "configspace": "", "generation": 27, "fitness": 0.037357729379301256, "feedback": "The algorithm ImprovedAdaptiveFireflyAlgorithmOptimized got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.05.", "error": "", "parent_id": "e390ae5d-58d2-448e-bf9c-f159865f5367", "metadata": {"aucs": [0.07025438008084384, 0.058600341912825704, 0.07956775133901317, 0.009401052570669477, 0.06575626485295138, 0.030307003211619277, 0.03222514068478122, 0.053547329277057854, 0.06992601614399663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030513986962565243, 0.021147601382201398, 0.017244929883242888, 0.010150997155277564, 0.02002428340173612, 0.006296796959401552, 0.008687676296292746, 0.018631339741552844, 0.005898368093889772, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02646121124190015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03464377518529471, 0.16565045223812158, 0.015146381428849054, 0.02480363372825467, 9.999999999998899e-05, 9.999999999998899e-05, 0.04549567497876761, 0.00014354133212035602, 0.048581676278632746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0027052068409290086, 9.999999999998899e-05, 9.999999999998899e-05, 0.037002787863794184, 0.04770409322888702, 0.06825507491037974, 0.039166635731346156, 0.050607378270270065, 0.12089078684623633, 0.04522003998524726, 0.014663784271600866, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010277757432362145, 0.08510789263033292, 0.18365213488812304, 0.07173850148271521, 0.10715289171297171, 0.07480724857082166, 0.0953203350437849, 0.09604510474739514, 0.05055211909656809, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006735738263603186, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0136504840048709, 0.07459550538933946, 0.060896188925601225, 0.08107220068635579, 0.07184153875300126, 0.04531424830567288, 0.04072327681724219, 0.0403120589292576, 0.045395822949880094, 0.0982153771072175, 0.08313527619070227, 0.08753908190089366, 0.10749162909016508, 0.08355702895100936, 0.09215328338920648, 0.12624345966201656, 0.09552819577016125, 0.07483443386016819, 0.03279054909858237, 0.007709420917669352, 0.0195973416099674, 0.05491220477327807, 0.05154030392712228, 0.04778699856005819, 0.060787912969894387, 0.024777548646938485, 0.01105350678307826, 0.11427641069772543, 0.15053607470196406, 0.15632984502661607, 0.11967374008318532, 0.13698594580097723, 0.1591940467757208, 0.14489902883483663, 0.11445239118008121, 0.20177126093826292, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13147521239625604, 9.999999999998899e-05, 0.03350800295352352, 0.03274442034298097, 0.09853541858122394, 0.06868509139020629, 0.016926696221115756, 0.020799015259978626, 0.03787902130829568, 0.06098461496028518, 0.0909705136570137, 0.03600096115587692, 0.05071346058165416, 0.05556905536866541, 0.011246804540879896, 0.01606402386774075, 0.04706021674738492, 0.05933595021769289, 0.05925041397225128, 0.1728381250559049, 0.1666164920565406, 0.17623921118123886, 0.16943785090377406, 0.1968605350396897, 0.1739761771738988, 0.19506452697017906, 0.16434912300610538, 0.17338857943327146, 0.18008676003831092, 0.011685069567490824, 0.031952181711666916, 0.036281812325822616, 0.009526712400850346, 0.030286774069421485, 0.04662352945892689, 0.017009840176604896, 0.03898540727058408, 0.03222520437781662]}, "mutation_prompt": null}
{"id": "9f31d4aa-59c1-4d05-96f8-2227a6e89832", "solution": "import numpy as np\n\nclass ImprovedAdaptiveFireflyAlgorithmOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def attractiveness(distance):\n            return np.exp(-distance)\n\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution = current_solution\n                best_fitness = current_fitness\n\n            for _ in range(self.budget):\n                if func(current_solution) < func(best_solution):\n                    best_solution = current_solution\n\n                step_size = np.random.uniform(0, 0.1, self.dim)  # Exploration\n                current_solution = current_solution * 0.9 + best_solution * 0.1 + step_size\n                \n                for i in range(self.dim):  # Exploitation\n                    current_solution[i] = np.clip(current_solution[i], self.lower_bound, self.upper_bound)\n\n                new_solution = current_solution * (1 - attractiveness(np.linalg.norm(current_solution - best_solution))) + best_solution * attractiveness(np.linalg.norm(current_solution - best_solution))\n                if func(new_solution) < func(current_solution):\n                    current_solution = new_solution\n        return best_solution", "name": "ImprovedAdaptiveFireflyAlgorithmOptimized", "description": "Improved Adaptive Firefly Algorithm with optimized control flow and reduced redundant operations.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e390ae5d-58d2-448e-bf9c-f159865f5367", "metadata": {"aucs": [0.07025438008084384, 0.058600341912825704, 0.07956775133901317, 0.009401052570669477, 0.06575626485295138, 0.030307003211619277, 0.03222514068478122, 0.053547329277057854, 0.06992601614399663, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030513986962565243, 0.021147601382201398, 0.017244929883242888, 0.010150997155277564, 0.02002428340173612, 0.006296796959401552, 0.008687676296292746, 0.018631339741552844, 0.005898368093889772, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02646121124190015, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03464377518529471, 0.16565045223812158, 0.015146381428849054, 0.02480363372825467, 9.999999999998899e-05, 9.999999999998899e-05, 0.04549567497876761, 0.00014354133212035602, 0.048581676278632746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0027052068409290086, 9.999999999998899e-05, 9.999999999998899e-05, 0.037002787863794184, 0.04770409322888702, 0.06825507491037974, 0.039166635731346156, 0.050607378270270065, 0.12089078684623633, 0.04522003998524726, 0.014663784271600866, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010277757432362145, 0.08510789263033292, 0.18365213488812304, 0.07173850148271521, 0.10715289171297171, 0.07480724857082166, 0.0953203350437849, 0.09604510474739514, 0.05055211909656809, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006735738263603186, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0136504840048709, 0.07459550538933946, 0.060896188925601225, 0.08107220068635579, 0.07184153875300126, 0.04531424830567288, 0.04072327681724219, 0.0403120589292576, 0.045395822949880094, 0.0982153771072175, 0.08313527619070227, 0.08753908190089366, 0.10749162909016508, 0.08355702895100936, 0.09215328338920648, 0.12624345966201656, 0.09552819577016125, 0.07483443386016819, 0.03279054909858237, 0.007709420917669352, 0.0195973416099674, 0.05491220477327807, 0.05154030392712228, 0.04778699856005819, 0.060787912969894387, 0.024777548646938485, 0.01105350678307826, 0.11427641069772543, 0.15053607470196406, 0.15632984502661607, 0.11967374008318532, 0.13698594580097723, 0.1591940467757208, 0.14489902883483663, 0.11445239118008121, 0.20177126093826292, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13147521239625604, 9.999999999998899e-05, 0.03350800295352352, 0.03274442034298097, 0.09853541858122394, 0.06868509139020629, 0.016926696221115756, 0.020799015259978626, 0.03787902130829568, 0.06098461496028518, 0.0909705136570137, 0.03600096115587692, 0.05071346058165416, 0.05556905536866541, 0.011246804540879896, 0.01606402386774075, 0.04706021674738492, 0.05933595021769289, 0.05925041397225128, 0.1728381250559049, 0.1666164920565406, 0.17623921118123886, 0.16943785090377406, 0.1968605350396897, 0.1739761771738988, 0.19506452697017906, 0.16434912300610538, 0.17338857943327146, 0.18008676003831092, 0.011685069567490824, 0.031952181711666916, 0.036281812325822616, 0.009526712400850346, 0.030286774069421485, 0.04662352945892689, 0.017009840176604896, 0.03898540727058408, 0.03222520437781662]}, "mutation_prompt": null}
{"id": "d068f322-4927-473b-8848-f13fc834cb15", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def attractiveness(distance):\n            return np.exp(-distance)\n\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution = current_solution\n                best_fitness = current_fitness\n\n            if func(current_solution) < func(best_solution):\n                best_solution = current_solution\n\n            step_size = np.random.uniform(0, 0.1, self.dim)  # Exploration\n            current_solution = current_solution * 0.9 + best_solution * 0.1 + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)  # Exploitation\n\n            new_solution = current_solution * (1 - attractiveness(np.linalg.norm(current_solution - best_solution))) + best_solution * attractiveness(np.linalg.norm(current_solution - best_solution))\n            if func(new_solution) < func(current_solution):\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmOptimized", "description": "Enhanced Adaptive Firefly Algorithm with dynamic step size adjustment for improved exploration and exploitation balance.", "configspace": "", "generation": 29, "fitness": 0.08188459406847076, "feedback": "The algorithm EnhancedAdaptiveFireflyAlgorithmOptimized got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "e390ae5d-58d2-448e-bf9c-f159865f5367", "metadata": {"aucs": [0.16763300634072398, 0.16660637208925566, 0.16133615943417556, 0.1476595078827868, 0.16653406359629297, 0.16283226916455174, 0.1497241998823864, 0.1338035825382019, 0.14631264664375454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03747376087106591, 0.047762176001519996, 0.03513190672749811, 0.036727914608232326, 0.036321866158425475, 0.054141053623813384, 0.05649227892011821, 0.06555746983999744, 0.047951018805288737, 0.023110217727111748, 0.017476784733871265, 0.034211234287554015, 0.038752286048550966, 0.03981163916172392, 0.04861685221153589, 0.027504057816283067, 0.02639299832314268, 0.028982438390184107, 0.06704369080144901, 0.06232937345613887, 0.06955639880058151, 0.07745424728756867, 0.07555385575922069, 0.07808089225118331, 0.07874660633253405, 0.072190034681749, 0.07745521493798169, 0.06381205399001633, 0.07774155701793406, 0.10668098611733368, 0.04868037661831226, 0.06167540535538951, 0.03310687090010811, 0.08583342989319664, 0.03274052027759533, 0.0485544516384101, 0.11265270359732782, 0.1874591491973947, 0.08861943557580854, 0.09886560732630623, 0.07044065728281401, 0.11509322021152146, 0.09117162567921366, 0.10473308805690595, 0.08447455885713184, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003898214985241011, 9.999999999998899e-05, 9.999999999998899e-05, 0.03904913173495772, 0.008276876639223385, 9.999999999998899e-05, 0.003373319317662049, 0.0023986825745665463, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05238254322824609, 0.030710886002168092, 0.044235875624962895, 0.04341693446752293, 0.062352673393163194, 0.006773186368147388, 0.03728252182823766, 0.038533878671687116, 0.027190152371750598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20316945518038754, 0.18888152024561689, 0.16563165878934072, 0.203425652439698, 0.17617531602779612, 0.166008582261027, 0.1970636071804972, 0.1558704446527166, 0.1842124884638744, 0.041796270098022115, 0.03357567049704813, 0.03867124961574864, 0.039458698768104705, 0.03855813936683994, 0.04559691763723728, 0.036546502687133, 0.04788395289097025, 0.04924310835301038, 0.12591726125806124, 0.1439579132743284, 0.12419848080079587, 0.15174058914162292, 0.14061551905768832, 0.11828502440366828, 0.14669290051891892, 0.12609804404663771, 0.12343166976721454, 0.1619114014956362, 0.15531667990104692, 0.17465193939108414, 0.1690263903553867, 0.15469940328649445, 0.1521005705508951, 0.1532224943916508, 0.1735371896434137, 0.15979352717188466, 0.10008805841425106, 0.10225405061158399, 0.10777194863547046, 0.09538775764947971, 0.10420809464278225, 0.09903122439616818, 0.10563058574674034, 0.1064529349931922, 0.09824099295117827, 0.16709651172149564, 0.16265016287980438, 0.16078449911148696, 0.1567381054803353, 0.14107169134723008, 0.16903508430428993, 0.15480069945257258, 0.15920519371427633, 0.15891688905695478, 0.09791166375108495, 0.14143568608739565, 0.13392660682692115, 0.1256714847425663, 0.14403988263784284, 0.14687577932573226, 0.12078563112601515, 0.1334694860108977, 0.15972323461984161, 0.1477884214736399, 0.14959981204366746, 0.15893990738378594, 0.15233807484981066, 0.15985001622041695, 0.13448922038138533, 0.148494459436036, 0.1523154498876409, 0.15506099282342234, 0.14689698355362701, 0.1286798592185422, 0.1473768663228059, 0.12640904885873128, 0.13407791392428758, 0.15433976970611474, 0.16742963974596292, 0.16927420438086338, 0.11636358722839413, 0.16750346031062602, 0.19738150895868045, 0.17260461549310568, 0.19162081630383587, 0.1820735634271704, 0.16864401419718011, 0.17381548267643687, 0.1933749404375169, 0.18877606353179743, 0.0489233335722945, 0.05393376573900355, 0.06266687949690664, 0.050347738698795386, 0.05797582568324722, 0.06844072121825462, 0.05079392447009723, 0.04873710026413414, 0.059183512085669854]}, "mutation_prompt": null}
{"id": "588a5030-66d0-4eb5-b51f-2b3bb1992aa0", "solution": "import numpy as np\n\nclass OptimizedEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def attractiveness(distance):\n            return np.exp(-distance)\n\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            if func(current_solution) < func(best_solution):\n                best_solution = current_solution\n\n            step_size = np.random.uniform(0, 0.1, self.dim)  # Exploration\n            current_solution = 0.9 * current_solution + 0.1 * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)  # Exploitation\n\n            new_solution = current_solution * (1 - attractiveness(np.linalg.norm(current_solution - best_solution))) + best_solution * attractiveness(np.linalg.norm(current_solution - best_solution))\n            if func(new_solution) < func(current_solution):\n                current_solution = new_solution\n\n        return best_solution", "name": "OptimizedEnhancedAdaptiveFireflyAlgorithm", "description": "Enhanced Adaptive Firefly Algorithm with improved performance through vectorized operations and reduced redundancy.", "configspace": "", "generation": 30, "fitness": 0.08188459406847076, "feedback": "The algorithm OptimizedEnhancedAdaptiveFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "d068f322-4927-473b-8848-f13fc834cb15", "metadata": {"aucs": [0.16763300634072398, 0.16660637208925566, 0.16133615943417556, 0.1476595078827868, 0.16653406359629297, 0.16283226916455174, 0.1497241998823864, 0.1338035825382019, 0.14631264664375454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03747376087106591, 0.047762176001519996, 0.03513190672749811, 0.036727914608232326, 0.036321866158425475, 0.054141053623813384, 0.05649227892011821, 0.06555746983999744, 0.047951018805288737, 0.023110217727111748, 0.017476784733871265, 0.034211234287554015, 0.038752286048550966, 0.03981163916172392, 0.04861685221153589, 0.027504057816283067, 0.02639299832314268, 0.028982438390184107, 0.06704369080144901, 0.06232937345613887, 0.06955639880058151, 0.07745424728756867, 0.07555385575922069, 0.07808089225118331, 0.07874660633253405, 0.072190034681749, 0.07745521493798169, 0.06381205399001633, 0.07774155701793406, 0.10668098611733368, 0.04868037661831226, 0.06167540535538951, 0.03310687090010811, 0.08583342989319664, 0.03274052027759533, 0.0485544516384101, 0.11265270359732782, 0.1874591491973947, 0.08861943557580854, 0.09886560732630623, 0.07044065728281401, 0.11509322021152146, 0.09117162567921366, 0.10473308805690595, 0.08447455885713184, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003898214985241011, 9.999999999998899e-05, 9.999999999998899e-05, 0.03904913173495772, 0.008276876639223385, 9.999999999998899e-05, 0.003373319317662049, 0.0023986825745665463, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05238254322824609, 0.030710886002168092, 0.044235875624962895, 0.04341693446752293, 0.062352673393163194, 0.006773186368147388, 0.03728252182823766, 0.038533878671687116, 0.027190152371750598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20316945518038754, 0.18888152024561689, 0.16563165878934072, 0.203425652439698, 0.17617531602779612, 0.166008582261027, 0.1970636071804972, 0.1558704446527166, 0.1842124884638744, 0.041796270098022115, 0.03357567049704813, 0.03867124961574864, 0.039458698768104705, 0.03855813936683994, 0.04559691763723728, 0.036546502687133, 0.04788395289097025, 0.04924310835301038, 0.12591726125806124, 0.1439579132743284, 0.12419848080079587, 0.15174058914162292, 0.14061551905768832, 0.11828502440366828, 0.14669290051891892, 0.12609804404663771, 0.12343166976721454, 0.1619114014956362, 0.15531667990104692, 0.17465193939108414, 0.1690263903553867, 0.15469940328649445, 0.1521005705508951, 0.1532224943916508, 0.1735371896434137, 0.15979352717188466, 0.10008805841425106, 0.10225405061158399, 0.10777194863547046, 0.09538775764947971, 0.10420809464278225, 0.09903122439616818, 0.10563058574674034, 0.1064529349931922, 0.09824099295117827, 0.16709651172149564, 0.16265016287980438, 0.16078449911148696, 0.1567381054803353, 0.14107169134723008, 0.16903508430428993, 0.15480069945257258, 0.15920519371427633, 0.15891688905695478, 0.09791166375108495, 0.14143568608739565, 0.13392660682692115, 0.1256714847425663, 0.14403988263784284, 0.14687577932573226, 0.12078563112601515, 0.1334694860108977, 0.15972323461984161, 0.1477884214736399, 0.14959981204366746, 0.15893990738378594, 0.15233807484981066, 0.15985001622041695, 0.13448922038138533, 0.148494459436036, 0.1523154498876409, 0.15506099282342234, 0.14689698355362701, 0.1286798592185422, 0.1473768663228059, 0.12640904885873128, 0.13407791392428758, 0.15433976970611474, 0.16742963974596292, 0.16927420438086338, 0.11636358722839413, 0.16750346031062602, 0.19738150895868045, 0.17260461549310568, 0.19162081630383587, 0.1820735634271704, 0.16864401419718011, 0.17381548267643687, 0.1933749404375169, 0.18877606353179743, 0.0489233335722945, 0.05393376573900355, 0.06266687949690664, 0.050347738698795386, 0.05797582568324722, 0.06844072121825462, 0.05079392447009723, 0.04873710026413414, 0.059183512085669854]}, "mutation_prompt": null}
{"id": "16ecf1aa-8d3c-4ddd-b1f8-b34112f79bd4", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def attractiveness(distance):\n            return np.exp(-distance)\n\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution = current_solution\n                best_fitness = current_fitness\n\n            if func(current_solution) < func(best_solution):\n                best_solution = current_solution\n\n            step_size = np.random.uniform(0, 0.1, self.dim)  # Exploration\n            current_solution = current_solution * 0.9 + best_solution * 0.1 + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)  # Exploitation\n\n            new_solution = current_solution * (1 - attractiveness(np.linalg.norm(current_solution - best_solution))) + best_solution * attractiveness(np.linalg.norm(current_solution - best_solution))\n            if func(new_solution) < func(current_solution):\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmOptimized", "description": "Enhanced Adaptive Firefly Algorithm with dynamic step size adjustment for improved exploration and exploitation balance.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d068f322-4927-473b-8848-f13fc834cb15", "metadata": {"aucs": [0.16763300634072398, 0.16660637208925566, 0.16133615943417556, 0.1476595078827868, 0.16653406359629297, 0.16283226916455174, 0.1497241998823864, 0.1338035825382019, 0.14631264664375454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03747376087106591, 0.047762176001519996, 0.03513190672749811, 0.036727914608232326, 0.036321866158425475, 0.054141053623813384, 0.05649227892011821, 0.06555746983999744, 0.047951018805288737, 0.023110217727111748, 0.017476784733871265, 0.034211234287554015, 0.038752286048550966, 0.03981163916172392, 0.04861685221153589, 0.027504057816283067, 0.02639299832314268, 0.028982438390184107, 0.06704369080144901, 0.06232937345613887, 0.06955639880058151, 0.07745424728756867, 0.07555385575922069, 0.07808089225118331, 0.07874660633253405, 0.072190034681749, 0.07745521493798169, 0.06381205399001633, 0.07774155701793406, 0.10668098611733368, 0.04868037661831226, 0.06167540535538951, 0.03310687090010811, 0.08583342989319664, 0.03274052027759533, 0.0485544516384101, 0.11265270359732782, 0.1874591491973947, 0.08861943557580854, 0.09886560732630623, 0.07044065728281401, 0.11509322021152146, 0.09117162567921366, 0.10473308805690595, 0.08447455885713184, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003898214985241011, 9.999999999998899e-05, 9.999999999998899e-05, 0.03904913173495772, 0.008276876639223385, 9.999999999998899e-05, 0.003373319317662049, 0.0023986825745665463, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05238254322824609, 0.030710886002168092, 0.044235875624962895, 0.04341693446752293, 0.062352673393163194, 0.006773186368147388, 0.03728252182823766, 0.038533878671687116, 0.027190152371750598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20316945518038754, 0.18888152024561689, 0.16563165878934072, 0.203425652439698, 0.17617531602779612, 0.166008582261027, 0.1970636071804972, 0.1558704446527166, 0.1842124884638744, 0.041796270098022115, 0.03357567049704813, 0.03867124961574864, 0.039458698768104705, 0.03855813936683994, 0.04559691763723728, 0.036546502687133, 0.04788395289097025, 0.04924310835301038, 0.12591726125806124, 0.1439579132743284, 0.12419848080079587, 0.15174058914162292, 0.14061551905768832, 0.11828502440366828, 0.14669290051891892, 0.12609804404663771, 0.12343166976721454, 0.1619114014956362, 0.15531667990104692, 0.17465193939108414, 0.1690263903553867, 0.15469940328649445, 0.1521005705508951, 0.1532224943916508, 0.1735371896434137, 0.15979352717188466, 0.10008805841425106, 0.10225405061158399, 0.10777194863547046, 0.09538775764947971, 0.10420809464278225, 0.09903122439616818, 0.10563058574674034, 0.1064529349931922, 0.09824099295117827, 0.16709651172149564, 0.16265016287980438, 0.16078449911148696, 0.1567381054803353, 0.14107169134723008, 0.16903508430428993, 0.15480069945257258, 0.15920519371427633, 0.15891688905695478, 0.09791166375108495, 0.14143568608739565, 0.13392660682692115, 0.1256714847425663, 0.14403988263784284, 0.14687577932573226, 0.12078563112601515, 0.1334694860108977, 0.15972323461984161, 0.1477884214736399, 0.14959981204366746, 0.15893990738378594, 0.15233807484981066, 0.15985001622041695, 0.13448922038138533, 0.148494459436036, 0.1523154498876409, 0.15506099282342234, 0.14689698355362701, 0.1286798592185422, 0.1473768663228059, 0.12640904885873128, 0.13407791392428758, 0.15433976970611474, 0.16742963974596292, 0.16927420438086338, 0.11636358722839413, 0.16750346031062602, 0.19738150895868045, 0.17260461549310568, 0.19162081630383587, 0.1820735634271704, 0.16864401419718011, 0.17381548267643687, 0.1933749404375169, 0.18877606353179743, 0.0489233335722945, 0.05393376573900355, 0.06266687949690664, 0.050347738698795386, 0.05797582568324722, 0.06844072121825462, 0.05079392447009723, 0.04873710026413414, 0.059183512085669854]}, "mutation_prompt": null}
{"id": "db84fec3-46ce-42a2-b5e4-6105c2db1147", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def attractiveness(distance):\n            return np.exp(-distance)\n\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution = current_solution\n                best_fitness = current_fitness\n\n            if func(current_solution) < func(best_solution):\n                best_solution = current_solution\n\n            step_size = np.random.uniform(0, 0.1, self.dim)  # Exploration\n            current_solution = current_solution * 0.9 + best_solution * 0.1 + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)  # Exploitation\n\n            new_solution = current_solution * (1 - attractiveness(np.linalg.norm(current_solution - best_solution))) + best_solution * attractiveness(np.linalg.norm(current_solution - best_solution))\n            if func(new_solution) < func(current_solution):\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmOptimized", "description": "Enhanced Adaptive Firefly Algorithm with dynamic step size adjustment for improved exploration and exploitation balance.", "configspace": "", "generation": 30, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d068f322-4927-473b-8848-f13fc834cb15", "metadata": {"aucs": [0.16763300634072398, 0.16660637208925566, 0.16133615943417556, 0.1476595078827868, 0.16653406359629297, 0.16283226916455174, 0.1497241998823864, 0.1338035825382019, 0.14631264664375454, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03747376087106591, 0.047762176001519996, 0.03513190672749811, 0.036727914608232326, 0.036321866158425475, 0.054141053623813384, 0.05649227892011821, 0.06555746983999744, 0.047951018805288737, 0.023110217727111748, 0.017476784733871265, 0.034211234287554015, 0.038752286048550966, 0.03981163916172392, 0.04861685221153589, 0.027504057816283067, 0.02639299832314268, 0.028982438390184107, 0.06704369080144901, 0.06232937345613887, 0.06955639880058151, 0.07745424728756867, 0.07555385575922069, 0.07808089225118331, 0.07874660633253405, 0.072190034681749, 0.07745521493798169, 0.06381205399001633, 0.07774155701793406, 0.10668098611733368, 0.04868037661831226, 0.06167540535538951, 0.03310687090010811, 0.08583342989319664, 0.03274052027759533, 0.0485544516384101, 0.11265270359732782, 0.1874591491973947, 0.08861943557580854, 0.09886560732630623, 0.07044065728281401, 0.11509322021152146, 0.09117162567921366, 0.10473308805690595, 0.08447455885713184, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003898214985241011, 9.999999999998899e-05, 9.999999999998899e-05, 0.03904913173495772, 0.008276876639223385, 9.999999999998899e-05, 0.003373319317662049, 0.0023986825745665463, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05238254322824609, 0.030710886002168092, 0.044235875624962895, 0.04341693446752293, 0.062352673393163194, 0.006773186368147388, 0.03728252182823766, 0.038533878671687116, 0.027190152371750598, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20316945518038754, 0.18888152024561689, 0.16563165878934072, 0.203425652439698, 0.17617531602779612, 0.166008582261027, 0.1970636071804972, 0.1558704446527166, 0.1842124884638744, 0.041796270098022115, 0.03357567049704813, 0.03867124961574864, 0.039458698768104705, 0.03855813936683994, 0.04559691763723728, 0.036546502687133, 0.04788395289097025, 0.04924310835301038, 0.12591726125806124, 0.1439579132743284, 0.12419848080079587, 0.15174058914162292, 0.14061551905768832, 0.11828502440366828, 0.14669290051891892, 0.12609804404663771, 0.12343166976721454, 0.1619114014956362, 0.15531667990104692, 0.17465193939108414, 0.1690263903553867, 0.15469940328649445, 0.1521005705508951, 0.1532224943916508, 0.1735371896434137, 0.15979352717188466, 0.10008805841425106, 0.10225405061158399, 0.10777194863547046, 0.09538775764947971, 0.10420809464278225, 0.09903122439616818, 0.10563058574674034, 0.1064529349931922, 0.09824099295117827, 0.16709651172149564, 0.16265016287980438, 0.16078449911148696, 0.1567381054803353, 0.14107169134723008, 0.16903508430428993, 0.15480069945257258, 0.15920519371427633, 0.15891688905695478, 0.09791166375108495, 0.14143568608739565, 0.13392660682692115, 0.1256714847425663, 0.14403988263784284, 0.14687577932573226, 0.12078563112601515, 0.1334694860108977, 0.15972323461984161, 0.1477884214736399, 0.14959981204366746, 0.15893990738378594, 0.15233807484981066, 0.15985001622041695, 0.13448922038138533, 0.148494459436036, 0.1523154498876409, 0.15506099282342234, 0.14689698355362701, 0.1286798592185422, 0.1473768663228059, 0.12640904885873128, 0.13407791392428758, 0.15433976970611474, 0.16742963974596292, 0.16927420438086338, 0.11636358722839413, 0.16750346031062602, 0.19738150895868045, 0.17260461549310568, 0.19162081630383587, 0.1820735634271704, 0.16864401419718011, 0.17381548267643687, 0.1933749404375169, 0.18877606353179743, 0.0489233335722945, 0.05393376573900355, 0.06266687949690664, 0.050347738698795386, 0.05797582568324722, 0.06844072121825462, 0.05079392447009723, 0.04873710026413414, 0.059183512085669854]}, "mutation_prompt": null}
{"id": "995aff80-8b4d-401f-b17a-2916a000c409", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def attractiveness(distance):\n            return np.exp(-distance)\n\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution = current_solution\n                best_fitness = current_fitness\n\n            if func(current_solution) < func(best_solution):\n                best_solution = current_solution\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = current_solution * 0.9 + best_solution * 0.1 + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)  # Exploitation\n\n            new_solution = current_solution * (1 - attractiveness(np.linalg.norm(current_solution - best_solution))) + best_solution * attractiveness(np.linalg.norm(current_solution - best_solution))\n            if func(new_solution) < func(current_solution):\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Utilizing a different approach for step size adjustment to enhance exploration and exploitation balance in the Enhanced Adaptive Firefly Algorithm.", "configspace": "", "generation": 33, "fitness": 0.08226570560489772, "feedback": "The algorithm EnhancedAdaptiveFireflyAlgorithmImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "d068f322-4927-473b-8848-f13fc834cb15", "metadata": {"aucs": [0.15764834760323498, 0.16410936764138828, 0.1527066108776759, 0.16583203633884935, 0.14344453206660823, 0.17889418869545426, 0.14283905249622753, 0.14550281622283145, 0.14295463810809395, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0332964167026506, 0.042394340354005355, 0.04253458979366331, 0.031071424888099886, 0.03441727266907679, 0.03666994557225156, 0.04311840770858433, 0.04895441811177481, 0.049499967374276976, 0.030384542305411877, 0.027608002061057624, 0.029055791366751182, 0.019068052106887223, 0.02593828812945831, 0.05520386927584675, 0.025312758335962804, 0.04020877178717697, 0.03037125068872315, 0.06353689971271692, 0.068697427272574, 0.07404381868269416, 0.0808874123031117, 0.06888665443681352, 0.0764827519672886, 0.11057418818568643, 0.06249159263468118, 0.07952334103093794, 0.05720610649056057, 0.0921536888011476, 0.08552951185599866, 0.05814037946177519, 0.07059270048909894, 0.05134463099298703, 0.10134516650448189, 0.05741520539268663, 0.0480097850582033, 0.11373366448250566, 0.1403372850458069, 0.10029021667360993, 0.12171487311833096, 0.12518365406005727, 0.09065677818016904, 0.0932662645064094, 0.11825912874427835, 0.14752817541983754, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011863063604250379, 9.999999999998899e-05, 0.003100572491153475, 0.0037774245924329097, 0.009707559256397102, 9.999999999998899e-05, 9.999999999998899e-05, 0.008304817340862636, 0.00026724500173591625, 9.999999999998899e-05, 0.009026918975477582, 0.0017447011628545228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03668917374741343, 0.03763435918315339, 0.03170684289423875, 0.043168022357861435, 0.0904527493934415, 0.022539748492085177, 0.07766563992043629, 0.03164328085094226, 0.01612446453986449, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1703504159574768, 0.17308264511257399, 0.1795234840969535, 0.20476998397732238, 0.1844408858090657, 0.1744819709300931, 0.20241244732524855, 0.16640813217936434, 0.16493256311108528, 0.04676581517097533, 0.05157467681933103, 0.035782122435273456, 0.03478605064252138, 0.03186792933705218, 0.03492660167738426, 0.03936881564966643, 0.047083210778696816, 0.04151457284355131, 0.11904584892602743, 0.13075987434777303, 0.1589009253790411, 0.10678312653002542, 0.13813403719497586, 0.12087737240035712, 0.13544680673960952, 0.1396624262899262, 0.12766802853452208, 0.15665383186362214, 0.1687201961416286, 0.1526423215877103, 0.1470803188438674, 0.16306821307584374, 0.1562644025131471, 0.15969650331940177, 0.18770229906809732, 0.15356596579350013, 0.10736164859204167, 0.11619381135552054, 0.11679048400164538, 0.09531353302367918, 0.10434784511228157, 0.11001425668011966, 0.09926351866906358, 0.12225182176614713, 0.11921611933805965, 0.145468099893187, 0.15315355045024703, 0.14011789959936816, 0.16913925763260063, 0.14352422183474955, 0.16601830209398483, 0.1443469163596961, 0.13872481181978435, 0.20556289928111526, 0.09882854231510896, 0.11052292326889279, 0.14218293772137147, 0.15482155239732487, 0.11021468343444907, 0.1296064489555976, 0.12965891653903527, 0.14216393620128043, 0.16788298251185318, 0.13699194703017015, 0.18256538600234928, 0.12652564201385208, 0.15504987041864893, 0.17526123494500445, 0.15806449060188954, 0.14784264897258959, 0.1445899189476244, 0.11208657293194979, 0.13616390551442492, 0.16520016991656827, 0.0979610276993993, 0.19975125032437058, 0.12538819455057493, 0.22383225643304427, 0.1078601029990004, 0.1485959231562034, 0.11978449966457028, 0.18943462852841153, 0.17150623621386873, 0.1707545730088319, 0.18263066695303098, 0.18060699734225694, 0.1795712924142817, 0.17336778780087003, 0.1740037498907524, 0.1888446390255265, 0.0476549572892343, 0.055851149316310744, 0.05272585932471541, 0.04962348610840983, 0.057767070007196386, 0.049563372583664944, 0.05377172438032207, 0.04629971539374911, 0.055575135112247875]}, "mutation_prompt": null}
{"id": "cce8e6dd-1411-4f44-b4ec-d00f4abda0d0", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def attractiveness(distance):\n            return np.exp(-distance)\n\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution = current_solution\n                best_fitness = current_fitness\n\n            if func(current_solution) < func(best_solution):\n                best_solution = current_solution\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = current_solution * 0.9 + best_solution * 0.1 + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)  # Exploitation\n\n            new_solution = current_solution * (1 - attractiveness(np.linalg.norm(current_solution - best_solution))) + best_solution * attractiveness(np.linalg.norm(current_solution - best_solution))\n            if func(new_solution) < func(current_solution):\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Utilizing a different approach for step size adjustment to enhance exploration and exploitation balance in the Enhanced Adaptive Firefly Algorithm.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "995aff80-8b4d-401f-b17a-2916a000c409", "metadata": {"aucs": [0.15764834760323498, 0.16410936764138828, 0.1527066108776759, 0.16583203633884935, 0.14344453206660823, 0.17889418869545426, 0.14283905249622753, 0.14550281622283145, 0.14295463810809395, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0332964167026506, 0.042394340354005355, 0.04253458979366331, 0.031071424888099886, 0.03441727266907679, 0.03666994557225156, 0.04311840770858433, 0.04895441811177481, 0.049499967374276976, 0.030384542305411877, 0.027608002061057624, 0.029055791366751182, 0.019068052106887223, 0.02593828812945831, 0.05520386927584675, 0.025312758335962804, 0.04020877178717697, 0.03037125068872315, 0.06353689971271692, 0.068697427272574, 0.07404381868269416, 0.0808874123031117, 0.06888665443681352, 0.0764827519672886, 0.11057418818568643, 0.06249159263468118, 0.07952334103093794, 0.05720610649056057, 0.0921536888011476, 0.08552951185599866, 0.05814037946177519, 0.07059270048909894, 0.05134463099298703, 0.10134516650448189, 0.05741520539268663, 0.0480097850582033, 0.11373366448250566, 0.1403372850458069, 0.10029021667360993, 0.12171487311833096, 0.12518365406005727, 0.09065677818016904, 0.0932662645064094, 0.11825912874427835, 0.14752817541983754, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011863063604250379, 9.999999999998899e-05, 0.003100572491153475, 0.0037774245924329097, 0.009707559256397102, 9.999999999998899e-05, 9.999999999998899e-05, 0.008304817340862636, 0.00026724500173591625, 9.999999999998899e-05, 0.009026918975477582, 0.0017447011628545228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03668917374741343, 0.03763435918315339, 0.03170684289423875, 0.043168022357861435, 0.0904527493934415, 0.022539748492085177, 0.07766563992043629, 0.03164328085094226, 0.01612446453986449, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1703504159574768, 0.17308264511257399, 0.1795234840969535, 0.20476998397732238, 0.1844408858090657, 0.1744819709300931, 0.20241244732524855, 0.16640813217936434, 0.16493256311108528, 0.04676581517097533, 0.05157467681933103, 0.035782122435273456, 0.03478605064252138, 0.03186792933705218, 0.03492660167738426, 0.03936881564966643, 0.047083210778696816, 0.04151457284355131, 0.11904584892602743, 0.13075987434777303, 0.1589009253790411, 0.10678312653002542, 0.13813403719497586, 0.12087737240035712, 0.13544680673960952, 0.1396624262899262, 0.12766802853452208, 0.15665383186362214, 0.1687201961416286, 0.1526423215877103, 0.1470803188438674, 0.16306821307584374, 0.1562644025131471, 0.15969650331940177, 0.18770229906809732, 0.15356596579350013, 0.10736164859204167, 0.11619381135552054, 0.11679048400164538, 0.09531353302367918, 0.10434784511228157, 0.11001425668011966, 0.09926351866906358, 0.12225182176614713, 0.11921611933805965, 0.145468099893187, 0.15315355045024703, 0.14011789959936816, 0.16913925763260063, 0.14352422183474955, 0.16601830209398483, 0.1443469163596961, 0.13872481181978435, 0.20556289928111526, 0.09882854231510896, 0.11052292326889279, 0.14218293772137147, 0.15482155239732487, 0.11021468343444907, 0.1296064489555976, 0.12965891653903527, 0.14216393620128043, 0.16788298251185318, 0.13699194703017015, 0.18256538600234928, 0.12652564201385208, 0.15504987041864893, 0.17526123494500445, 0.15806449060188954, 0.14784264897258959, 0.1445899189476244, 0.11208657293194979, 0.13616390551442492, 0.16520016991656827, 0.0979610276993993, 0.19975125032437058, 0.12538819455057493, 0.22383225643304427, 0.1078601029990004, 0.1485959231562034, 0.11978449966457028, 0.18943462852841153, 0.17150623621386873, 0.1707545730088319, 0.18263066695303098, 0.18060699734225694, 0.1795712924142817, 0.17336778780087003, 0.1740037498907524, 0.1888446390255265, 0.0476549572892343, 0.055851149316310744, 0.05272585932471541, 0.04962348610840983, 0.057767070007196386, 0.049563372583664944, 0.05377172438032207, 0.04629971539374911, 0.055575135112247875]}, "mutation_prompt": null}
{"id": "b9a86dd6-5bcc-464c-aba0-5cdc2b72f7e1", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def attractiveness(distance):\n            return np.exp(-distance)\n\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution = current_solution\n                best_fitness = current_fitness\n\n            if func(current_solution) < func(best_solution):\n                best_solution = current_solution\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = current_solution * 0.9 + best_solution * 0.1 + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)  # Exploitation\n\n            new_solution = current_solution * (1 - attractiveness(np.linalg.norm(current_solution - best_solution))) + best_solution * attractiveness(np.linalg.norm(current_solution - best_solution))\n            if func(new_solution) < func(current_solution):\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Utilizing a different approach for step size adjustment to enhance exploration and exploitation balance in the Enhanced Adaptive Firefly Algorithm.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "995aff80-8b4d-401f-b17a-2916a000c409", "metadata": {"aucs": [0.15764834760323498, 0.16410936764138828, 0.1527066108776759, 0.16583203633884935, 0.14344453206660823, 0.17889418869545426, 0.14283905249622753, 0.14550281622283145, 0.14295463810809395, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0332964167026506, 0.042394340354005355, 0.04253458979366331, 0.031071424888099886, 0.03441727266907679, 0.03666994557225156, 0.04311840770858433, 0.04895441811177481, 0.049499967374276976, 0.030384542305411877, 0.027608002061057624, 0.029055791366751182, 0.019068052106887223, 0.02593828812945831, 0.05520386927584675, 0.025312758335962804, 0.04020877178717697, 0.03037125068872315, 0.06353689971271692, 0.068697427272574, 0.07404381868269416, 0.0808874123031117, 0.06888665443681352, 0.0764827519672886, 0.11057418818568643, 0.06249159263468118, 0.07952334103093794, 0.05720610649056057, 0.0921536888011476, 0.08552951185599866, 0.05814037946177519, 0.07059270048909894, 0.05134463099298703, 0.10134516650448189, 0.05741520539268663, 0.0480097850582033, 0.11373366448250566, 0.1403372850458069, 0.10029021667360993, 0.12171487311833096, 0.12518365406005727, 0.09065677818016904, 0.0932662645064094, 0.11825912874427835, 0.14752817541983754, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011863063604250379, 9.999999999998899e-05, 0.003100572491153475, 0.0037774245924329097, 0.009707559256397102, 9.999999999998899e-05, 9.999999999998899e-05, 0.008304817340862636, 0.00026724500173591625, 9.999999999998899e-05, 0.009026918975477582, 0.0017447011628545228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03668917374741343, 0.03763435918315339, 0.03170684289423875, 0.043168022357861435, 0.0904527493934415, 0.022539748492085177, 0.07766563992043629, 0.03164328085094226, 0.01612446453986449, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1703504159574768, 0.17308264511257399, 0.1795234840969535, 0.20476998397732238, 0.1844408858090657, 0.1744819709300931, 0.20241244732524855, 0.16640813217936434, 0.16493256311108528, 0.04676581517097533, 0.05157467681933103, 0.035782122435273456, 0.03478605064252138, 0.03186792933705218, 0.03492660167738426, 0.03936881564966643, 0.047083210778696816, 0.04151457284355131, 0.11904584892602743, 0.13075987434777303, 0.1589009253790411, 0.10678312653002542, 0.13813403719497586, 0.12087737240035712, 0.13544680673960952, 0.1396624262899262, 0.12766802853452208, 0.15665383186362214, 0.1687201961416286, 0.1526423215877103, 0.1470803188438674, 0.16306821307584374, 0.1562644025131471, 0.15969650331940177, 0.18770229906809732, 0.15356596579350013, 0.10736164859204167, 0.11619381135552054, 0.11679048400164538, 0.09531353302367918, 0.10434784511228157, 0.11001425668011966, 0.09926351866906358, 0.12225182176614713, 0.11921611933805965, 0.145468099893187, 0.15315355045024703, 0.14011789959936816, 0.16913925763260063, 0.14352422183474955, 0.16601830209398483, 0.1443469163596961, 0.13872481181978435, 0.20556289928111526, 0.09882854231510896, 0.11052292326889279, 0.14218293772137147, 0.15482155239732487, 0.11021468343444907, 0.1296064489555976, 0.12965891653903527, 0.14216393620128043, 0.16788298251185318, 0.13699194703017015, 0.18256538600234928, 0.12652564201385208, 0.15504987041864893, 0.17526123494500445, 0.15806449060188954, 0.14784264897258959, 0.1445899189476244, 0.11208657293194979, 0.13616390551442492, 0.16520016991656827, 0.0979610276993993, 0.19975125032437058, 0.12538819455057493, 0.22383225643304427, 0.1078601029990004, 0.1485959231562034, 0.11978449966457028, 0.18943462852841153, 0.17150623621386873, 0.1707545730088319, 0.18263066695303098, 0.18060699734225694, 0.1795712924142817, 0.17336778780087003, 0.1740037498907524, 0.1888446390255265, 0.0476549572892343, 0.055851149316310744, 0.05272585932471541, 0.04962348610840983, 0.057767070007196386, 0.049563372583664944, 0.05377172438032207, 0.04629971539374911, 0.055575135112247875]}, "mutation_prompt": null}
{"id": "e6a3e2f1-7ce5-4c05-b43c-3ef620f3a4f6", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def attractiveness(distance):\n            return np.exp(-distance)\n\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution = current_solution\n                best_fitness = current_fitness\n\n            if func(current_solution) < func(best_solution):\n                best_solution = current_solution\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = current_solution * 0.9 + best_solution * 0.1 + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)  # Exploitation\n\n            new_solution = current_solution * (1 - attractiveness(np.linalg.norm(current_solution - best_solution))) + best_solution * attractiveness(np.linalg.norm(current_solution - best_solution))\n            if func(new_solution) < func(current_solution):\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Utilizing a different approach for step size adjustment to enhance exploration and exploitation balance in the Enhanced Adaptive Firefly Algorithm.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "995aff80-8b4d-401f-b17a-2916a000c409", "metadata": {"aucs": [0.15764834760323498, 0.16410936764138828, 0.1527066108776759, 0.16583203633884935, 0.14344453206660823, 0.17889418869545426, 0.14283905249622753, 0.14550281622283145, 0.14295463810809395, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0332964167026506, 0.042394340354005355, 0.04253458979366331, 0.031071424888099886, 0.03441727266907679, 0.03666994557225156, 0.04311840770858433, 0.04895441811177481, 0.049499967374276976, 0.030384542305411877, 0.027608002061057624, 0.029055791366751182, 0.019068052106887223, 0.02593828812945831, 0.05520386927584675, 0.025312758335962804, 0.04020877178717697, 0.03037125068872315, 0.06353689971271692, 0.068697427272574, 0.07404381868269416, 0.0808874123031117, 0.06888665443681352, 0.0764827519672886, 0.11057418818568643, 0.06249159263468118, 0.07952334103093794, 0.05720610649056057, 0.0921536888011476, 0.08552951185599866, 0.05814037946177519, 0.07059270048909894, 0.05134463099298703, 0.10134516650448189, 0.05741520539268663, 0.0480097850582033, 0.11373366448250566, 0.1403372850458069, 0.10029021667360993, 0.12171487311833096, 0.12518365406005727, 0.09065677818016904, 0.0932662645064094, 0.11825912874427835, 0.14752817541983754, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011863063604250379, 9.999999999998899e-05, 0.003100572491153475, 0.0037774245924329097, 0.009707559256397102, 9.999999999998899e-05, 9.999999999998899e-05, 0.008304817340862636, 0.00026724500173591625, 9.999999999998899e-05, 0.009026918975477582, 0.0017447011628545228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03668917374741343, 0.03763435918315339, 0.03170684289423875, 0.043168022357861435, 0.0904527493934415, 0.022539748492085177, 0.07766563992043629, 0.03164328085094226, 0.01612446453986449, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1703504159574768, 0.17308264511257399, 0.1795234840969535, 0.20476998397732238, 0.1844408858090657, 0.1744819709300931, 0.20241244732524855, 0.16640813217936434, 0.16493256311108528, 0.04676581517097533, 0.05157467681933103, 0.035782122435273456, 0.03478605064252138, 0.03186792933705218, 0.03492660167738426, 0.03936881564966643, 0.047083210778696816, 0.04151457284355131, 0.11904584892602743, 0.13075987434777303, 0.1589009253790411, 0.10678312653002542, 0.13813403719497586, 0.12087737240035712, 0.13544680673960952, 0.1396624262899262, 0.12766802853452208, 0.15665383186362214, 0.1687201961416286, 0.1526423215877103, 0.1470803188438674, 0.16306821307584374, 0.1562644025131471, 0.15969650331940177, 0.18770229906809732, 0.15356596579350013, 0.10736164859204167, 0.11619381135552054, 0.11679048400164538, 0.09531353302367918, 0.10434784511228157, 0.11001425668011966, 0.09926351866906358, 0.12225182176614713, 0.11921611933805965, 0.145468099893187, 0.15315355045024703, 0.14011789959936816, 0.16913925763260063, 0.14352422183474955, 0.16601830209398483, 0.1443469163596961, 0.13872481181978435, 0.20556289928111526, 0.09882854231510896, 0.11052292326889279, 0.14218293772137147, 0.15482155239732487, 0.11021468343444907, 0.1296064489555976, 0.12965891653903527, 0.14216393620128043, 0.16788298251185318, 0.13699194703017015, 0.18256538600234928, 0.12652564201385208, 0.15504987041864893, 0.17526123494500445, 0.15806449060188954, 0.14784264897258959, 0.1445899189476244, 0.11208657293194979, 0.13616390551442492, 0.16520016991656827, 0.0979610276993993, 0.19975125032437058, 0.12538819455057493, 0.22383225643304427, 0.1078601029990004, 0.1485959231562034, 0.11978449966457028, 0.18943462852841153, 0.17150623621386873, 0.1707545730088319, 0.18263066695303098, 0.18060699734225694, 0.1795712924142817, 0.17336778780087003, 0.1740037498907524, 0.1888446390255265, 0.0476549572892343, 0.055851149316310744, 0.05272585932471541, 0.04962348610840983, 0.057767070007196386, 0.049563372583664944, 0.05377172438032207, 0.04629971539374911, 0.055575135112247875]}, "mutation_prompt": null}
{"id": "ae5254f8-b0b9-49b6-94b9-8e69d451ea2e", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def attractiveness(distance):\n            return np.exp(-distance)\n\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution = current_solution\n                best_fitness = current_fitness\n\n            if func(current_solution) < func(best_solution):\n                best_solution = current_solution\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = current_solution * 0.9 + best_solution * 0.1 + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)  # Exploitation\n\n            new_solution = current_solution * (1 - attractiveness(np.linalg.norm(current_solution - best_solution))) + best_solution * attractiveness(np.linalg.norm(current_solution - best_solution))\n            if func(new_solution) < func(current_solution):\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Utilizing a different approach for step size adjustment to enhance exploration and exploitation balance in the Enhanced Adaptive Firefly Algorithm.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "995aff80-8b4d-401f-b17a-2916a000c409", "metadata": {"aucs": [0.15764834760323498, 0.16410936764138828, 0.1527066108776759, 0.16583203633884935, 0.14344453206660823, 0.17889418869545426, 0.14283905249622753, 0.14550281622283145, 0.14295463810809395, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0332964167026506, 0.042394340354005355, 0.04253458979366331, 0.031071424888099886, 0.03441727266907679, 0.03666994557225156, 0.04311840770858433, 0.04895441811177481, 0.049499967374276976, 0.030384542305411877, 0.027608002061057624, 0.029055791366751182, 0.019068052106887223, 0.02593828812945831, 0.05520386927584675, 0.025312758335962804, 0.04020877178717697, 0.03037125068872315, 0.06353689971271692, 0.068697427272574, 0.07404381868269416, 0.0808874123031117, 0.06888665443681352, 0.0764827519672886, 0.11057418818568643, 0.06249159263468118, 0.07952334103093794, 0.05720610649056057, 0.0921536888011476, 0.08552951185599866, 0.05814037946177519, 0.07059270048909894, 0.05134463099298703, 0.10134516650448189, 0.05741520539268663, 0.0480097850582033, 0.11373366448250566, 0.1403372850458069, 0.10029021667360993, 0.12171487311833096, 0.12518365406005727, 0.09065677818016904, 0.0932662645064094, 0.11825912874427835, 0.14752817541983754, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011863063604250379, 9.999999999998899e-05, 0.003100572491153475, 0.0037774245924329097, 0.009707559256397102, 9.999999999998899e-05, 9.999999999998899e-05, 0.008304817340862636, 0.00026724500173591625, 9.999999999998899e-05, 0.009026918975477582, 0.0017447011628545228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03668917374741343, 0.03763435918315339, 0.03170684289423875, 0.043168022357861435, 0.0904527493934415, 0.022539748492085177, 0.07766563992043629, 0.03164328085094226, 0.01612446453986449, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1703504159574768, 0.17308264511257399, 0.1795234840969535, 0.20476998397732238, 0.1844408858090657, 0.1744819709300931, 0.20241244732524855, 0.16640813217936434, 0.16493256311108528, 0.04676581517097533, 0.05157467681933103, 0.035782122435273456, 0.03478605064252138, 0.03186792933705218, 0.03492660167738426, 0.03936881564966643, 0.047083210778696816, 0.04151457284355131, 0.11904584892602743, 0.13075987434777303, 0.1589009253790411, 0.10678312653002542, 0.13813403719497586, 0.12087737240035712, 0.13544680673960952, 0.1396624262899262, 0.12766802853452208, 0.15665383186362214, 0.1687201961416286, 0.1526423215877103, 0.1470803188438674, 0.16306821307584374, 0.1562644025131471, 0.15969650331940177, 0.18770229906809732, 0.15356596579350013, 0.10736164859204167, 0.11619381135552054, 0.11679048400164538, 0.09531353302367918, 0.10434784511228157, 0.11001425668011966, 0.09926351866906358, 0.12225182176614713, 0.11921611933805965, 0.145468099893187, 0.15315355045024703, 0.14011789959936816, 0.16913925763260063, 0.14352422183474955, 0.16601830209398483, 0.1443469163596961, 0.13872481181978435, 0.20556289928111526, 0.09882854231510896, 0.11052292326889279, 0.14218293772137147, 0.15482155239732487, 0.11021468343444907, 0.1296064489555976, 0.12965891653903527, 0.14216393620128043, 0.16788298251185318, 0.13699194703017015, 0.18256538600234928, 0.12652564201385208, 0.15504987041864893, 0.17526123494500445, 0.15806449060188954, 0.14784264897258959, 0.1445899189476244, 0.11208657293194979, 0.13616390551442492, 0.16520016991656827, 0.0979610276993993, 0.19975125032437058, 0.12538819455057493, 0.22383225643304427, 0.1078601029990004, 0.1485959231562034, 0.11978449966457028, 0.18943462852841153, 0.17150623621386873, 0.1707545730088319, 0.18263066695303098, 0.18060699734225694, 0.1795712924142817, 0.17336778780087003, 0.1740037498907524, 0.1888446390255265, 0.0476549572892343, 0.055851149316310744, 0.05272585932471541, 0.04962348610840983, 0.057767070007196386, 0.049563372583664944, 0.05377172438032207, 0.04629971539374911, 0.055575135112247875]}, "mutation_prompt": null}
{"id": "314d7026-a08f-46bd-9585-d7bccfb1e397", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def attractiveness(distance):\n            return np.exp(-distance)\n\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution = current_solution\n                best_fitness = current_fitness\n\n            if func(current_solution) < func(best_solution):\n                best_solution = current_solution\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = current_solution * 0.9 + best_solution * 0.1 + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)  # Exploitation\n\n            new_solution = current_solution * (1 - attractiveness(np.linalg.norm(current_solution - best_solution))) + best_solution * attractiveness(np.linalg.norm(current_solution - best_solution))\n            if func(new_solution) < func(current_solution):\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Utilizing a different approach for step size adjustment to enhance exploration and exploitation balance in the Enhanced Adaptive Firefly Algorithm.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "995aff80-8b4d-401f-b17a-2916a000c409", "metadata": {"aucs": [0.15764834760323498, 0.16410936764138828, 0.1527066108776759, 0.16583203633884935, 0.14344453206660823, 0.17889418869545426, 0.14283905249622753, 0.14550281622283145, 0.14295463810809395, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0332964167026506, 0.042394340354005355, 0.04253458979366331, 0.031071424888099886, 0.03441727266907679, 0.03666994557225156, 0.04311840770858433, 0.04895441811177481, 0.049499967374276976, 0.030384542305411877, 0.027608002061057624, 0.029055791366751182, 0.019068052106887223, 0.02593828812945831, 0.05520386927584675, 0.025312758335962804, 0.04020877178717697, 0.03037125068872315, 0.06353689971271692, 0.068697427272574, 0.07404381868269416, 0.0808874123031117, 0.06888665443681352, 0.0764827519672886, 0.11057418818568643, 0.06249159263468118, 0.07952334103093794, 0.05720610649056057, 0.0921536888011476, 0.08552951185599866, 0.05814037946177519, 0.07059270048909894, 0.05134463099298703, 0.10134516650448189, 0.05741520539268663, 0.0480097850582033, 0.11373366448250566, 0.1403372850458069, 0.10029021667360993, 0.12171487311833096, 0.12518365406005727, 0.09065677818016904, 0.0932662645064094, 0.11825912874427835, 0.14752817541983754, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011863063604250379, 9.999999999998899e-05, 0.003100572491153475, 0.0037774245924329097, 0.009707559256397102, 9.999999999998899e-05, 9.999999999998899e-05, 0.008304817340862636, 0.00026724500173591625, 9.999999999998899e-05, 0.009026918975477582, 0.0017447011628545228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03668917374741343, 0.03763435918315339, 0.03170684289423875, 0.043168022357861435, 0.0904527493934415, 0.022539748492085177, 0.07766563992043629, 0.03164328085094226, 0.01612446453986449, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1703504159574768, 0.17308264511257399, 0.1795234840969535, 0.20476998397732238, 0.1844408858090657, 0.1744819709300931, 0.20241244732524855, 0.16640813217936434, 0.16493256311108528, 0.04676581517097533, 0.05157467681933103, 0.035782122435273456, 0.03478605064252138, 0.03186792933705218, 0.03492660167738426, 0.03936881564966643, 0.047083210778696816, 0.04151457284355131, 0.11904584892602743, 0.13075987434777303, 0.1589009253790411, 0.10678312653002542, 0.13813403719497586, 0.12087737240035712, 0.13544680673960952, 0.1396624262899262, 0.12766802853452208, 0.15665383186362214, 0.1687201961416286, 0.1526423215877103, 0.1470803188438674, 0.16306821307584374, 0.1562644025131471, 0.15969650331940177, 0.18770229906809732, 0.15356596579350013, 0.10736164859204167, 0.11619381135552054, 0.11679048400164538, 0.09531353302367918, 0.10434784511228157, 0.11001425668011966, 0.09926351866906358, 0.12225182176614713, 0.11921611933805965, 0.145468099893187, 0.15315355045024703, 0.14011789959936816, 0.16913925763260063, 0.14352422183474955, 0.16601830209398483, 0.1443469163596961, 0.13872481181978435, 0.20556289928111526, 0.09882854231510896, 0.11052292326889279, 0.14218293772137147, 0.15482155239732487, 0.11021468343444907, 0.1296064489555976, 0.12965891653903527, 0.14216393620128043, 0.16788298251185318, 0.13699194703017015, 0.18256538600234928, 0.12652564201385208, 0.15504987041864893, 0.17526123494500445, 0.15806449060188954, 0.14784264897258959, 0.1445899189476244, 0.11208657293194979, 0.13616390551442492, 0.16520016991656827, 0.0979610276993993, 0.19975125032437058, 0.12538819455057493, 0.22383225643304427, 0.1078601029990004, 0.1485959231562034, 0.11978449966457028, 0.18943462852841153, 0.17150623621386873, 0.1707545730088319, 0.18263066695303098, 0.18060699734225694, 0.1795712924142817, 0.17336778780087003, 0.1740037498907524, 0.1888446390255265, 0.0476549572892343, 0.055851149316310744, 0.05272585932471541, 0.04962348610840983, 0.057767070007196386, 0.049563372583664944, 0.05377172438032207, 0.04629971539374911, 0.055575135112247875]}, "mutation_prompt": null}
{"id": "cbfcbd79-709f-4861-a920-6005495ca914", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def attractiveness(distance):\n            return np.exp(-distance)\n\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution = current_solution\n                best_fitness = current_fitness\n\n            if func(current_solution) < func(best_solution):\n                best_solution = current_solution\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = current_solution * 0.9 + best_solution * 0.1 + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)  # Exploitation\n\n            new_solution = current_solution * (1 - attractiveness(np.linalg.norm(current_solution - best_solution))) + best_solution * attractiveness(np.linalg.norm(current_solution - best_solution))\n            if func(new_solution) < func(current_solution):\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Utilizing a different approach for step size adjustment to enhance exploration and exploitation balance in the Enhanced Adaptive Firefly Algorithm.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "995aff80-8b4d-401f-b17a-2916a000c409", "metadata": {"aucs": [0.15764834760323498, 0.16410936764138828, 0.1527066108776759, 0.16583203633884935, 0.14344453206660823, 0.17889418869545426, 0.14283905249622753, 0.14550281622283145, 0.14295463810809395, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0332964167026506, 0.042394340354005355, 0.04253458979366331, 0.031071424888099886, 0.03441727266907679, 0.03666994557225156, 0.04311840770858433, 0.04895441811177481, 0.049499967374276976, 0.030384542305411877, 0.027608002061057624, 0.029055791366751182, 0.019068052106887223, 0.02593828812945831, 0.05520386927584675, 0.025312758335962804, 0.04020877178717697, 0.03037125068872315, 0.06353689971271692, 0.068697427272574, 0.07404381868269416, 0.0808874123031117, 0.06888665443681352, 0.0764827519672886, 0.11057418818568643, 0.06249159263468118, 0.07952334103093794, 0.05720610649056057, 0.0921536888011476, 0.08552951185599866, 0.05814037946177519, 0.07059270048909894, 0.05134463099298703, 0.10134516650448189, 0.05741520539268663, 0.0480097850582033, 0.11373366448250566, 0.1403372850458069, 0.10029021667360993, 0.12171487311833096, 0.12518365406005727, 0.09065677818016904, 0.0932662645064094, 0.11825912874427835, 0.14752817541983754, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011863063604250379, 9.999999999998899e-05, 0.003100572491153475, 0.0037774245924329097, 0.009707559256397102, 9.999999999998899e-05, 9.999999999998899e-05, 0.008304817340862636, 0.00026724500173591625, 9.999999999998899e-05, 0.009026918975477582, 0.0017447011628545228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03668917374741343, 0.03763435918315339, 0.03170684289423875, 0.043168022357861435, 0.0904527493934415, 0.022539748492085177, 0.07766563992043629, 0.03164328085094226, 0.01612446453986449, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1703504159574768, 0.17308264511257399, 0.1795234840969535, 0.20476998397732238, 0.1844408858090657, 0.1744819709300931, 0.20241244732524855, 0.16640813217936434, 0.16493256311108528, 0.04676581517097533, 0.05157467681933103, 0.035782122435273456, 0.03478605064252138, 0.03186792933705218, 0.03492660167738426, 0.03936881564966643, 0.047083210778696816, 0.04151457284355131, 0.11904584892602743, 0.13075987434777303, 0.1589009253790411, 0.10678312653002542, 0.13813403719497586, 0.12087737240035712, 0.13544680673960952, 0.1396624262899262, 0.12766802853452208, 0.15665383186362214, 0.1687201961416286, 0.1526423215877103, 0.1470803188438674, 0.16306821307584374, 0.1562644025131471, 0.15969650331940177, 0.18770229906809732, 0.15356596579350013, 0.10736164859204167, 0.11619381135552054, 0.11679048400164538, 0.09531353302367918, 0.10434784511228157, 0.11001425668011966, 0.09926351866906358, 0.12225182176614713, 0.11921611933805965, 0.145468099893187, 0.15315355045024703, 0.14011789959936816, 0.16913925763260063, 0.14352422183474955, 0.16601830209398483, 0.1443469163596961, 0.13872481181978435, 0.20556289928111526, 0.09882854231510896, 0.11052292326889279, 0.14218293772137147, 0.15482155239732487, 0.11021468343444907, 0.1296064489555976, 0.12965891653903527, 0.14216393620128043, 0.16788298251185318, 0.13699194703017015, 0.18256538600234928, 0.12652564201385208, 0.15504987041864893, 0.17526123494500445, 0.15806449060188954, 0.14784264897258959, 0.1445899189476244, 0.11208657293194979, 0.13616390551442492, 0.16520016991656827, 0.0979610276993993, 0.19975125032437058, 0.12538819455057493, 0.22383225643304427, 0.1078601029990004, 0.1485959231562034, 0.11978449966457028, 0.18943462852841153, 0.17150623621386873, 0.1707545730088319, 0.18263066695303098, 0.18060699734225694, 0.1795712924142817, 0.17336778780087003, 0.1740037498907524, 0.1888446390255265, 0.0476549572892343, 0.055851149316310744, 0.05272585932471541, 0.04962348610840983, 0.057767070007196386, 0.049563372583664944, 0.05377172438032207, 0.04629971539374911, 0.055575135112247875]}, "mutation_prompt": null}
{"id": "56800b97-7952-4225-8aef-df0b658b040a", "solution": "import numpy as np\n\nclass OptimizedEnhancedAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def attractiveness(distance):\n            return np.exp(-distance)\n\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            if func(current_solution) < func(best_solution):\n                best_solution = current_solution\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = 0.9 * current_solution + 0.1 * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)  # Exploitation\n\n            new_solution = (1 - attractiveness(np.linalg.norm(current_solution - best_solution))) * current_solution + attractiveness(np.linalg.norm(current_solution - best_solution)) * best_solution\n            if func(new_solution) < func(current_solution):\n                current_solution = new_solution\n\n        return best_solution", "name": "OptimizedEnhancedAdaptiveFireflyAlgorithm", "description": "Optimized Enhanced Adaptive Firefly Algorithm with improved efficiency in step size adjustment and convergence.", "configspace": "", "generation": 40, "fitness": 0.08226570560489772, "feedback": "The algorithm OptimizedEnhancedAdaptiveFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "995aff80-8b4d-401f-b17a-2916a000c409", "metadata": {"aucs": [0.15764834760323498, 0.16410936764138828, 0.1527066108776759, 0.16583203633884935, 0.14344453206660823, 0.17889418869545426, 0.14283905249622753, 0.14550281622283145, 0.14295463810809395, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0332964167026506, 0.042394340354005355, 0.04253458979366331, 0.031071424888099886, 0.03441727266907679, 0.03666994557225156, 0.04311840770858433, 0.04895441811177481, 0.049499967374276976, 0.030384542305411877, 0.027608002061057624, 0.029055791366751182, 0.019068052106887223, 0.02593828812945831, 0.05520386927584675, 0.025312758335962804, 0.04020877178717697, 0.03037125068872315, 0.06353689971271692, 0.068697427272574, 0.07404381868269416, 0.0808874123031117, 0.06888665443681352, 0.0764827519672886, 0.11057418818568643, 0.06249159263468118, 0.07952334103093794, 0.05720610649056057, 0.0921536888011476, 0.08552951185599866, 0.05814037946177519, 0.07059270048909894, 0.05134463099298703, 0.10134516650448189, 0.05741520539268663, 0.0480097850582033, 0.11373366448250566, 0.1403372850458069, 0.10029021667360993, 0.12171487311833096, 0.12518365406005727, 0.09065677818016904, 0.0932662645064094, 0.11825912874427835, 0.14752817541983754, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011863063604250379, 9.999999999998899e-05, 0.003100572491153475, 0.0037774245924329097, 0.009707559256397102, 9.999999999998899e-05, 9.999999999998899e-05, 0.008304817340862636, 0.00026724500173591625, 9.999999999998899e-05, 0.009026918975477582, 0.0017447011628545228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03668917374741343, 0.03763435918315339, 0.03170684289423875, 0.043168022357861435, 0.0904527493934415, 0.022539748492085177, 0.07766563992043629, 0.03164328085094226, 0.01612446453986449, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1703504159574768, 0.17308264511257399, 0.1795234840969535, 0.20476998397732238, 0.1844408858090657, 0.1744819709300931, 0.20241244732524855, 0.16640813217936434, 0.16493256311108528, 0.04676581517097533, 0.05157467681933103, 0.035782122435273456, 0.03478605064252138, 0.03186792933705218, 0.03492660167738426, 0.03936881564966643, 0.047083210778696816, 0.04151457284355131, 0.11904584892602743, 0.13075987434777303, 0.1589009253790411, 0.10678312653002542, 0.13813403719497586, 0.12087737240035712, 0.13544680673960952, 0.1396624262899262, 0.12766802853452208, 0.15665383186362214, 0.1687201961416286, 0.1526423215877103, 0.1470803188438674, 0.16306821307584374, 0.1562644025131471, 0.15969650331940177, 0.18770229906809732, 0.15356596579350013, 0.10736164859204167, 0.11619381135552054, 0.11679048400164538, 0.09531353302367918, 0.10434784511228157, 0.11001425668011966, 0.09926351866906358, 0.12225182176614713, 0.11921611933805965, 0.145468099893187, 0.15315355045024703, 0.14011789959936816, 0.16913925763260063, 0.14352422183474955, 0.16601830209398483, 0.1443469163596961, 0.13872481181978435, 0.20556289928111526, 0.09882854231510896, 0.11052292326889279, 0.14218293772137147, 0.15482155239732487, 0.11021468343444907, 0.1296064489555976, 0.12965891653903527, 0.14216393620128043, 0.16788298251185318, 0.13699194703017015, 0.18256538600234928, 0.12652564201385208, 0.15504987041864893, 0.17526123494500445, 0.15806449060188954, 0.14784264897258959, 0.1445899189476244, 0.11208657293194979, 0.13616390551442492, 0.16520016991656827, 0.0979610276993993, 0.19975125032437058, 0.12538819455057493, 0.22383225643304427, 0.1078601029990004, 0.1485959231562034, 0.11978449966457028, 0.18943462852841153, 0.17150623621386873, 0.1707545730088319, 0.18263066695303098, 0.18060699734225694, 0.1795712924142817, 0.17336778780087003, 0.1740037498907524, 0.1888446390255265, 0.0476549572892343, 0.055851149316310744, 0.05272585932471541, 0.04962348610840983, 0.057767070007196386, 0.049563372583664944, 0.05377172438032207, 0.04629971539374911, 0.055575135112247875]}, "mutation_prompt": null}
{"id": "028fc022-4f8a-4742-8338-afdadf757a11", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        def attractiveness(distance):\n            return np.exp(-distance)\n\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution = current_solution\n                best_fitness = current_fitness\n\n            if func(current_solution) < func(best_solution):\n                best_solution = current_solution\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = current_solution * 0.9 + best_solution * 0.1 + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)  # Exploitation\n\n            new_solution = current_solution * (1 - attractiveness(np.linalg.norm(current_solution - best_solution))) + best_solution * attractiveness(np.linalg.norm(current_solution - best_solution))\n            if func(new_solution) < func(current_solution):\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Utilizing a different approach for step size adjustment to enhance exploration and exploitation balance in the Enhanced Adaptive Firefly Algorithm.", "configspace": "", "generation": 34, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "995aff80-8b4d-401f-b17a-2916a000c409", "metadata": {"aucs": [0.15764834760323498, 0.16410936764138828, 0.1527066108776759, 0.16583203633884935, 0.14344453206660823, 0.17889418869545426, 0.14283905249622753, 0.14550281622283145, 0.14295463810809395, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0332964167026506, 0.042394340354005355, 0.04253458979366331, 0.031071424888099886, 0.03441727266907679, 0.03666994557225156, 0.04311840770858433, 0.04895441811177481, 0.049499967374276976, 0.030384542305411877, 0.027608002061057624, 0.029055791366751182, 0.019068052106887223, 0.02593828812945831, 0.05520386927584675, 0.025312758335962804, 0.04020877178717697, 0.03037125068872315, 0.06353689971271692, 0.068697427272574, 0.07404381868269416, 0.0808874123031117, 0.06888665443681352, 0.0764827519672886, 0.11057418818568643, 0.06249159263468118, 0.07952334103093794, 0.05720610649056057, 0.0921536888011476, 0.08552951185599866, 0.05814037946177519, 0.07059270048909894, 0.05134463099298703, 0.10134516650448189, 0.05741520539268663, 0.0480097850582033, 0.11373366448250566, 0.1403372850458069, 0.10029021667360993, 0.12171487311833096, 0.12518365406005727, 0.09065677818016904, 0.0932662645064094, 0.11825912874427835, 0.14752817541983754, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011863063604250379, 9.999999999998899e-05, 0.003100572491153475, 0.0037774245924329097, 0.009707559256397102, 9.999999999998899e-05, 9.999999999998899e-05, 0.008304817340862636, 0.00026724500173591625, 9.999999999998899e-05, 0.009026918975477582, 0.0017447011628545228, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03668917374741343, 0.03763435918315339, 0.03170684289423875, 0.043168022357861435, 0.0904527493934415, 0.022539748492085177, 0.07766563992043629, 0.03164328085094226, 0.01612446453986449, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1703504159574768, 0.17308264511257399, 0.1795234840969535, 0.20476998397732238, 0.1844408858090657, 0.1744819709300931, 0.20241244732524855, 0.16640813217936434, 0.16493256311108528, 0.04676581517097533, 0.05157467681933103, 0.035782122435273456, 0.03478605064252138, 0.03186792933705218, 0.03492660167738426, 0.03936881564966643, 0.047083210778696816, 0.04151457284355131, 0.11904584892602743, 0.13075987434777303, 0.1589009253790411, 0.10678312653002542, 0.13813403719497586, 0.12087737240035712, 0.13544680673960952, 0.1396624262899262, 0.12766802853452208, 0.15665383186362214, 0.1687201961416286, 0.1526423215877103, 0.1470803188438674, 0.16306821307584374, 0.1562644025131471, 0.15969650331940177, 0.18770229906809732, 0.15356596579350013, 0.10736164859204167, 0.11619381135552054, 0.11679048400164538, 0.09531353302367918, 0.10434784511228157, 0.11001425668011966, 0.09926351866906358, 0.12225182176614713, 0.11921611933805965, 0.145468099893187, 0.15315355045024703, 0.14011789959936816, 0.16913925763260063, 0.14352422183474955, 0.16601830209398483, 0.1443469163596961, 0.13872481181978435, 0.20556289928111526, 0.09882854231510896, 0.11052292326889279, 0.14218293772137147, 0.15482155239732487, 0.11021468343444907, 0.1296064489555976, 0.12965891653903527, 0.14216393620128043, 0.16788298251185318, 0.13699194703017015, 0.18256538600234928, 0.12652564201385208, 0.15504987041864893, 0.17526123494500445, 0.15806449060188954, 0.14784264897258959, 0.1445899189476244, 0.11208657293194979, 0.13616390551442492, 0.16520016991656827, 0.0979610276993993, 0.19975125032437058, 0.12538819455057493, 0.22383225643304427, 0.1078601029990004, 0.1485959231562034, 0.11978449966457028, 0.18943462852841153, 0.17150623621386873, 0.1707545730088319, 0.18263066695303098, 0.18060699734225694, 0.1795712924142817, 0.17336778780087003, 0.1740037498907524, 0.1888446390255265, 0.0476549572892343, 0.055851149316310744, 0.05272585932471541, 0.04962348610840983, 0.057767070007196386, 0.049563372583664944, 0.05377172438032207, 0.04629971539374911, 0.055575135112247875]}, "mutation_prompt": null}
{"id": "4b688bc3-a4c8-435a-9710-46dfe1932155", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            if func(current_solution) < func(best_solution):\n                best_solution = current_solution\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = current_solution * 0.9 + best_solution * 0.1 + step_size\n            np.clip(current_solution, self.lower_bound, self.upper_bound, out=current_solution)  # Exploitation\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < func(current_solution):\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Improving efficiency by precomputing the attractiveness function values and consolidating repeated operations.", "configspace": "", "generation": 42, "fitness": 0.09738540608310095, "feedback": "The algorithm EnhancedAdaptiveFireflyAlgorithmImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.07.", "error": "", "parent_id": "995aff80-8b4d-401f-b17a-2916a000c409", "metadata": {"aucs": [0.18145477795531084, 0.21218020370738844, 0.20452233358901617, 0.19586963530287615, 0.1983532622370422, 0.2205492164708438, 0.20287071709523263, 0.1938739309512576, 0.17472344022615183, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05416667121838292, 0.06411188404349033, 0.04686618150314259, 0.06529582292801639, 0.04567808198909118, 0.05086696601379559, 0.057590807539563915, 0.0607461290725958, 0.05598777764866958, 0.045355165607063985, 0.03664627267596021, 0.05970418366773356, 0.0447937754269373, 0.03890939335738075, 0.05733624489691025, 0.03739930830198901, 0.05994492489511416, 0.040965098755795015, 0.06441621737245529, 0.06869767349995981, 0.07943964333323861, 0.08088757643781797, 0.06897030326522868, 0.07885365924823895, 0.1105743619539582, 0.06322184871063186, 0.07952705015884198, 0.08294069835615592, 0.09547405520441499, 0.1003595119476125, 0.08651808766459668, 0.11857933666924014, 0.08049792022243052, 0.1010363771270808, 0.09290917092340878, 0.070072151133584, 0.14082784994684627, 0.15308720504856532, 0.15687195712566993, 0.13764825081048015, 0.14545752463906314, 0.09374539068411503, 0.17858189356412713, 0.14785419941441091, 0.16561819765423202, 0.023855358529624615, 0.030019854746342722, 0.015001316495299566, 0.012533363737567527, 0.036557191854594384, 0.005857044666656708, 0.032256181943257634, 0.02892681956381571, 0.03506727688699052, 0.0008704259710020645, 9.999999999998899e-05, 0.05744550154261341, 0.0009953628668813996, 0.010119716733260398, 0.037972357829226144, 0.005828215082945953, 9.999999999998899e-05, 0.03013629479636004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03798568648179568, 0.037414359525069996, 0.04934364666478375, 0.05173808065151897, 0.08428218977210633, 0.034840823981364566, 0.0783592342719891, 0.03284481742956902, 0.0368711983076393, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011722944907496258, 0.013207141716642723, 0.0031716377209062285, 0.0005385898900698294, 0.01290160025103071, 0.002521601810456242, 0.0021596425797839602, 0.271127930381845, 0.25096016891102735, 0.1930602982650358, 0.20628038593526565, 0.20614591208858024, 0.20986298502416034, 0.20873327086750737, 0.19143106963010093, 0.20192642028018337, 0.06894812004928841, 0.055973043536228784, 0.04708409656657786, 0.05239840225315329, 0.06966848657496572, 0.07521834803745242, 0.05628593277531113, 0.04845807148970693, 0.05109355246773306, 0.1304432912849698, 0.13082201325742082, 0.15940690323479811, 0.11835530356726354, 0.13800239085806276, 0.12300691257051444, 0.1438936467657479, 0.1281973394660305, 0.14674570989616165, 0.17537799636071538, 0.19842684616212536, 0.1814307802148497, 0.18425669338514594, 0.1857515272312712, 0.15600811746786458, 0.1703148261639883, 0.18895097883561118, 0.16481891511406632, 0.129053453348265, 0.1301913049167681, 0.14658021534663568, 0.1206865451934982, 0.16295485825182054, 0.11578973870518605, 0.12214410216918115, 0.12744550228680873, 0.11802541990332815, 0.1589321348918975, 0.17884385590353558, 0.19567328640633064, 0.17891277590176247, 0.20020822487493806, 0.17479187065169166, 0.17024317904822217, 0.1598326719379486, 0.20551698866372492, 0.13417929557196895, 0.13866529874388345, 0.14320537743447603, 0.16359749076874208, 0.13819031777699298, 0.1321688164395508, 0.15414744269674707, 0.15440523219806623, 0.16788354175227416, 0.176788978344653, 0.21366772218555596, 0.14556510038823056, 0.1614160284437306, 0.20678756176869895, 0.1643545379750001, 0.1518123604601005, 0.1885267650123288, 0.18621912559643172, 0.16351970039318187, 0.16370057834407648, 0.1535117520345426, 0.24081368845973627, 0.15094206586179515, 0.22901158989980253, 0.13495472024417754, 0.15813922825241844, 0.12144512492237391, 0.1895346725944438, 0.1798874831225601, 0.17285216299357997, 0.18042170197009944, 0.18761840542375496, 0.1749513067277283, 0.1733324234150243, 0.1744192369897033, 0.1839293398142159, 0.05683784521149848, 0.06400986271888032, 0.04567477076219706, 0.04797504650201079, 0.05863944614192185, 0.05407008019825843, 0.05647402697522119, 0.050520887014123605, 0.05591095963095338]}, "mutation_prompt": null}
{"id": "58d6cea4-cfe3-411d-81a9-3275e8bc7120", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            if func(current_solution) < func(best_solution):\n                best_solution = current_solution\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = current_solution * 0.9 + best_solution * 0.1 + step_size\n            np.clip(current_solution, self.lower_bound, self.upper_bound, out=current_solution)  # Exploitation\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < func(current_solution):\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Improving efficiency by precomputing the attractiveness function values and consolidating repeated operations.", "configspace": "", "generation": 43, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "4b688bc3-a4c8-435a-9710-46dfe1932155", "metadata": {"aucs": [0.18145477795531084, 0.21218020370738844, 0.20452233358901617, 0.19586963530287615, 0.1983532622370422, 0.2205492164708438, 0.20287071709523263, 0.1938739309512576, 0.17472344022615183, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05416667121838292, 0.06411188404349033, 0.04686618150314259, 0.06529582292801639, 0.04567808198909118, 0.05086696601379559, 0.057590807539563915, 0.0607461290725958, 0.05598777764866958, 0.045355165607063985, 0.03664627267596021, 0.05970418366773356, 0.0447937754269373, 0.03890939335738075, 0.05733624489691025, 0.03739930830198901, 0.05994492489511416, 0.040965098755795015, 0.06441621737245529, 0.06869767349995981, 0.07943964333323861, 0.08088757643781797, 0.06897030326522868, 0.07885365924823895, 0.1105743619539582, 0.06322184871063186, 0.07952705015884198, 0.08294069835615592, 0.09547405520441499, 0.1003595119476125, 0.08651808766459668, 0.11857933666924014, 0.08049792022243052, 0.1010363771270808, 0.09290917092340878, 0.070072151133584, 0.14082784994684627, 0.15308720504856532, 0.15687195712566993, 0.13764825081048015, 0.14545752463906314, 0.09374539068411503, 0.17858189356412713, 0.14785419941441091, 0.16561819765423202, 0.023855358529624615, 0.030019854746342722, 0.015001316495299566, 0.012533363737567527, 0.036557191854594384, 0.005857044666656708, 0.032256181943257634, 0.02892681956381571, 0.03506727688699052, 0.0008704259710020645, 9.999999999998899e-05, 0.05744550154261341, 0.0009953628668813996, 0.010119716733260398, 0.037972357829226144, 0.005828215082945953, 9.999999999998899e-05, 0.03013629479636004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03798568648179568, 0.037414359525069996, 0.04934364666478375, 0.05173808065151897, 0.08428218977210633, 0.034840823981364566, 0.0783592342719891, 0.03284481742956902, 0.0368711983076393, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011722944907496258, 0.013207141716642723, 0.0031716377209062285, 0.0005385898900698294, 0.01290160025103071, 0.002521601810456242, 0.0021596425797839602, 0.271127930381845, 0.25096016891102735, 0.1930602982650358, 0.20628038593526565, 0.20614591208858024, 0.20986298502416034, 0.20873327086750737, 0.19143106963010093, 0.20192642028018337, 0.06894812004928841, 0.055973043536228784, 0.04708409656657786, 0.05239840225315329, 0.06966848657496572, 0.07521834803745242, 0.05628593277531113, 0.04845807148970693, 0.05109355246773306, 0.1304432912849698, 0.13082201325742082, 0.15940690323479811, 0.11835530356726354, 0.13800239085806276, 0.12300691257051444, 0.1438936467657479, 0.1281973394660305, 0.14674570989616165, 0.17537799636071538, 0.19842684616212536, 0.1814307802148497, 0.18425669338514594, 0.1857515272312712, 0.15600811746786458, 0.1703148261639883, 0.18895097883561118, 0.16481891511406632, 0.129053453348265, 0.1301913049167681, 0.14658021534663568, 0.1206865451934982, 0.16295485825182054, 0.11578973870518605, 0.12214410216918115, 0.12744550228680873, 0.11802541990332815, 0.1589321348918975, 0.17884385590353558, 0.19567328640633064, 0.17891277590176247, 0.20020822487493806, 0.17479187065169166, 0.17024317904822217, 0.1598326719379486, 0.20551698866372492, 0.13417929557196895, 0.13866529874388345, 0.14320537743447603, 0.16359749076874208, 0.13819031777699298, 0.1321688164395508, 0.15414744269674707, 0.15440523219806623, 0.16788354175227416, 0.176788978344653, 0.21366772218555596, 0.14556510038823056, 0.1614160284437306, 0.20678756176869895, 0.1643545379750001, 0.1518123604601005, 0.1885267650123288, 0.18621912559643172, 0.16351970039318187, 0.16370057834407648, 0.1535117520345426, 0.24081368845973627, 0.15094206586179515, 0.22901158989980253, 0.13495472024417754, 0.15813922825241844, 0.12144512492237391, 0.1895346725944438, 0.1798874831225601, 0.17285216299357997, 0.18042170197009944, 0.18761840542375496, 0.1749513067277283, 0.1733324234150243, 0.1744192369897033, 0.1839293398142159, 0.05683784521149848, 0.06400986271888032, 0.04567477076219706, 0.04797504650201079, 0.05863944614192185, 0.05407008019825843, 0.05647402697522119, 0.050520887014123605, 0.05591095963095338]}, "mutation_prompt": null}
{"id": "2055790c-d561-4fad-91af-866da19b0675", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < func(current_solution):\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Enhancing efficiency by utilizing a more optimized data structure and simplifying control flow.", "configspace": "", "generation": 44, "fitness": 0.10494963633031208, "feedback": "The algorithm EnhancedAdaptiveFireflyAlgorithmImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "4b688bc3-a4c8-435a-9710-46dfe1932155", "metadata": {"aucs": [0.19578228131847875, 0.21719127968295093, 0.21422869657551924, 0.20493671087692122, 0.20993600155718684, 0.2319100136126404, 0.20852998549917867, 0.2040320832359619, 0.197336647251382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05848966844047554, 0.07077466358021889, 0.05094660204206758, 0.06753278678687691, 0.048717920956356964, 0.06367275429682795, 0.06514736078115202, 0.061891251159925, 0.061510646102637345, 0.0474123532133619, 0.03835367153767688, 0.06527429251830763, 0.04625371305647219, 0.04744596941259993, 0.059991981575572395, 0.04137380705758098, 0.06093581997438302, 0.04581655004756935, 0.07136311860339994, 0.0698291577847634, 0.08306175717086117, 0.08131444239347907, 0.07523362422332625, 0.08398228730795998, 0.1113077999667621, 0.07012352073355976, 0.08315502325056645, 0.08591992170227569, 0.09722393671034113, 0.10695204330602659, 0.09612498972883532, 0.12833188729896539, 0.08490085555240312, 0.10649000345222881, 0.10428630805247452, 0.07843948361980146, 0.15859265547095913, 0.15630848512028284, 0.16251948145654538, 0.1773610170501574, 0.15228157229473505, 0.10119642188812306, 0.1882778441851819, 0.15959245857833226, 0.18368981152781272, 0.035834605065708125, 0.03498239339843989, 0.028523533938293766, 0.02251495709324458, 0.07977086873631256, 0.009747492155416704, 0.038939590367697896, 0.04204957696652323, 0.04129968780765936, 0.004868773694123751, 9.999999999998899e-05, 0.06613251010337773, 0.003583193646688021, 0.010955197645156067, 0.05154431638164314, 0.017749934013163382, 0.0358103853487195, 0.038142897263777065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05841363778898245, 0.04711888259950425, 0.05249630735307187, 0.08275165160939413, 0.09820675691356262, 0.05120010607299663, 0.08354586983219892, 0.05291410454257106, 0.04475457514920578, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005927069051329115, 0.012420722623622038, 0.017504270576063963, 0.004679408219052328, 0.0005419877322363487, 0.014848786376154055, 0.0029397051438060373, 0.003741207538865865, 0.27292326953196433, 0.2699678457566118, 0.21136793536070986, 0.2082978057632956, 0.21096521003335522, 0.2331673608843059, 0.21335140811177056, 0.20542648875888858, 0.2111552370118619, 0.07221010658203686, 0.0651072423763901, 0.05514136626798205, 0.05591373710007719, 0.07208651862270476, 0.07590790616260201, 0.059682463955371357, 0.05195439122192291, 0.05559578275576438, 0.13531800070407285, 0.13112116369295523, 0.1628613362736836, 0.1278665976497928, 0.1521161909884431, 0.1340175417132654, 0.15318010462365506, 0.1363340124311535, 0.15127380705974647, 0.17914242296446137, 0.20022323613333404, 0.18707034600015315, 0.19184342475058613, 0.18866793140872562, 0.1612177702052915, 0.18333971408767702, 0.19311080055260543, 0.17211799568805386, 0.1347621513448678, 0.13493519454802883, 0.15851237021975828, 0.13318552954736385, 0.16885268417544064, 0.11959117318229961, 0.13543739245151032, 0.13112653532369223, 0.1230432545329726, 0.17748551059990003, 0.18554619644552572, 0.19768379329381247, 0.18582334225478636, 0.2018130951149617, 0.17580946714985235, 0.17982511647867794, 0.17332712070084877, 0.21749226603625493, 0.14429114193774462, 0.15223016700938063, 0.15206508327323975, 0.16699591847652806, 0.15313759603270083, 0.142204636262378, 0.15756341253418382, 0.1594343926026175, 0.1701725611963515, 0.19789136128857465, 0.2393538070803949, 0.15289891752600326, 0.18280312033170165, 0.23825656146530017, 0.17565826857807953, 0.1959588143554567, 0.19488132096989275, 0.2129335955942584, 0.18994608317120465, 0.16640804030469136, 0.159302633878025, 0.2622033982613021, 0.15251864671956006, 0.2586900721081564, 0.15945589574895436, 0.16191541214562477, 0.14512132722298232, 0.18992737446708297, 0.18823464679802782, 0.18023067869382015, 0.1860019810050353, 0.18861350640826746, 0.17844657440591527, 0.18139134737669893, 0.18374694687064597, 0.18704312986872806, 0.06163642014085868, 0.0717871388914566, 0.0499624701256709, 0.05589094256414262, 0.061103430799511305, 0.05899638787951356, 0.06539554613352028, 0.0546593594485183, 0.06382432947988004]}, "mutation_prompt": null}
{"id": "740f6933-fc7e-4589-a526-a8a1322c1434", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < func(current_solution):\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Enhancing efficiency by utilizing a more optimized data structure and simplifying control flow.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2055790c-d561-4fad-91af-866da19b0675", "metadata": {"aucs": [0.19578228131847875, 0.21719127968295093, 0.21422869657551924, 0.20493671087692122, 0.20993600155718684, 0.2319100136126404, 0.20852998549917867, 0.2040320832359619, 0.197336647251382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05848966844047554, 0.07077466358021889, 0.05094660204206758, 0.06753278678687691, 0.048717920956356964, 0.06367275429682795, 0.06514736078115202, 0.061891251159925, 0.061510646102637345, 0.0474123532133619, 0.03835367153767688, 0.06527429251830763, 0.04625371305647219, 0.04744596941259993, 0.059991981575572395, 0.04137380705758098, 0.06093581997438302, 0.04581655004756935, 0.07136311860339994, 0.0698291577847634, 0.08306175717086117, 0.08131444239347907, 0.07523362422332625, 0.08398228730795998, 0.1113077999667621, 0.07012352073355976, 0.08315502325056645, 0.08591992170227569, 0.09722393671034113, 0.10695204330602659, 0.09612498972883532, 0.12833188729896539, 0.08490085555240312, 0.10649000345222881, 0.10428630805247452, 0.07843948361980146, 0.15859265547095913, 0.15630848512028284, 0.16251948145654538, 0.1773610170501574, 0.15228157229473505, 0.10119642188812306, 0.1882778441851819, 0.15959245857833226, 0.18368981152781272, 0.035834605065708125, 0.03498239339843989, 0.028523533938293766, 0.02251495709324458, 0.07977086873631256, 0.009747492155416704, 0.038939590367697896, 0.04204957696652323, 0.04129968780765936, 0.004868773694123751, 9.999999999998899e-05, 0.06613251010337773, 0.003583193646688021, 0.010955197645156067, 0.05154431638164314, 0.017749934013163382, 0.0358103853487195, 0.038142897263777065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05841363778898245, 0.04711888259950425, 0.05249630735307187, 0.08275165160939413, 0.09820675691356262, 0.05120010607299663, 0.08354586983219892, 0.05291410454257106, 0.04475457514920578, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005927069051329115, 0.012420722623622038, 0.017504270576063963, 0.004679408219052328, 0.0005419877322363487, 0.014848786376154055, 0.0029397051438060373, 0.003741207538865865, 0.27292326953196433, 0.2699678457566118, 0.21136793536070986, 0.2082978057632956, 0.21096521003335522, 0.2331673608843059, 0.21335140811177056, 0.20542648875888858, 0.2111552370118619, 0.07221010658203686, 0.0651072423763901, 0.05514136626798205, 0.05591373710007719, 0.07208651862270476, 0.07590790616260201, 0.059682463955371357, 0.05195439122192291, 0.05559578275576438, 0.13531800070407285, 0.13112116369295523, 0.1628613362736836, 0.1278665976497928, 0.1521161909884431, 0.1340175417132654, 0.15318010462365506, 0.1363340124311535, 0.15127380705974647, 0.17914242296446137, 0.20022323613333404, 0.18707034600015315, 0.19184342475058613, 0.18866793140872562, 0.1612177702052915, 0.18333971408767702, 0.19311080055260543, 0.17211799568805386, 0.1347621513448678, 0.13493519454802883, 0.15851237021975828, 0.13318552954736385, 0.16885268417544064, 0.11959117318229961, 0.13543739245151032, 0.13112653532369223, 0.1230432545329726, 0.17748551059990003, 0.18554619644552572, 0.19768379329381247, 0.18582334225478636, 0.2018130951149617, 0.17580946714985235, 0.17982511647867794, 0.17332712070084877, 0.21749226603625493, 0.14429114193774462, 0.15223016700938063, 0.15206508327323975, 0.16699591847652806, 0.15313759603270083, 0.142204636262378, 0.15756341253418382, 0.1594343926026175, 0.1701725611963515, 0.19789136128857465, 0.2393538070803949, 0.15289891752600326, 0.18280312033170165, 0.23825656146530017, 0.17565826857807953, 0.1959588143554567, 0.19488132096989275, 0.2129335955942584, 0.18994608317120465, 0.16640804030469136, 0.159302633878025, 0.2622033982613021, 0.15251864671956006, 0.2586900721081564, 0.15945589574895436, 0.16191541214562477, 0.14512132722298232, 0.18992737446708297, 0.18823464679802782, 0.18023067869382015, 0.1860019810050353, 0.18861350640826746, 0.17844657440591527, 0.18139134737669893, 0.18374694687064597, 0.18704312986872806, 0.06163642014085868, 0.0717871388914566, 0.0499624701256709, 0.05589094256414262, 0.061103430799511305, 0.05899638787951356, 0.06539554613352028, 0.0546593594485183, 0.06382432947988004]}, "mutation_prompt": null}
{"id": "e6b3f488-1315-4793-bb52-0ffb9697eab1", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < func(current_solution):\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Enhancing efficiency by utilizing a more optimized data structure and simplifying control flow.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2055790c-d561-4fad-91af-866da19b0675", "metadata": {"aucs": [0.19578228131847875, 0.21719127968295093, 0.21422869657551924, 0.20493671087692122, 0.20993600155718684, 0.2319100136126404, 0.20852998549917867, 0.2040320832359619, 0.197336647251382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05848966844047554, 0.07077466358021889, 0.05094660204206758, 0.06753278678687691, 0.048717920956356964, 0.06367275429682795, 0.06514736078115202, 0.061891251159925, 0.061510646102637345, 0.0474123532133619, 0.03835367153767688, 0.06527429251830763, 0.04625371305647219, 0.04744596941259993, 0.059991981575572395, 0.04137380705758098, 0.06093581997438302, 0.04581655004756935, 0.07136311860339994, 0.0698291577847634, 0.08306175717086117, 0.08131444239347907, 0.07523362422332625, 0.08398228730795998, 0.1113077999667621, 0.07012352073355976, 0.08315502325056645, 0.08591992170227569, 0.09722393671034113, 0.10695204330602659, 0.09612498972883532, 0.12833188729896539, 0.08490085555240312, 0.10649000345222881, 0.10428630805247452, 0.07843948361980146, 0.15859265547095913, 0.15630848512028284, 0.16251948145654538, 0.1773610170501574, 0.15228157229473505, 0.10119642188812306, 0.1882778441851819, 0.15959245857833226, 0.18368981152781272, 0.035834605065708125, 0.03498239339843989, 0.028523533938293766, 0.02251495709324458, 0.07977086873631256, 0.009747492155416704, 0.038939590367697896, 0.04204957696652323, 0.04129968780765936, 0.004868773694123751, 9.999999999998899e-05, 0.06613251010337773, 0.003583193646688021, 0.010955197645156067, 0.05154431638164314, 0.017749934013163382, 0.0358103853487195, 0.038142897263777065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05841363778898245, 0.04711888259950425, 0.05249630735307187, 0.08275165160939413, 0.09820675691356262, 0.05120010607299663, 0.08354586983219892, 0.05291410454257106, 0.04475457514920578, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005927069051329115, 0.012420722623622038, 0.017504270576063963, 0.004679408219052328, 0.0005419877322363487, 0.014848786376154055, 0.0029397051438060373, 0.003741207538865865, 0.27292326953196433, 0.2699678457566118, 0.21136793536070986, 0.2082978057632956, 0.21096521003335522, 0.2331673608843059, 0.21335140811177056, 0.20542648875888858, 0.2111552370118619, 0.07221010658203686, 0.0651072423763901, 0.05514136626798205, 0.05591373710007719, 0.07208651862270476, 0.07590790616260201, 0.059682463955371357, 0.05195439122192291, 0.05559578275576438, 0.13531800070407285, 0.13112116369295523, 0.1628613362736836, 0.1278665976497928, 0.1521161909884431, 0.1340175417132654, 0.15318010462365506, 0.1363340124311535, 0.15127380705974647, 0.17914242296446137, 0.20022323613333404, 0.18707034600015315, 0.19184342475058613, 0.18866793140872562, 0.1612177702052915, 0.18333971408767702, 0.19311080055260543, 0.17211799568805386, 0.1347621513448678, 0.13493519454802883, 0.15851237021975828, 0.13318552954736385, 0.16885268417544064, 0.11959117318229961, 0.13543739245151032, 0.13112653532369223, 0.1230432545329726, 0.17748551059990003, 0.18554619644552572, 0.19768379329381247, 0.18582334225478636, 0.2018130951149617, 0.17580946714985235, 0.17982511647867794, 0.17332712070084877, 0.21749226603625493, 0.14429114193774462, 0.15223016700938063, 0.15206508327323975, 0.16699591847652806, 0.15313759603270083, 0.142204636262378, 0.15756341253418382, 0.1594343926026175, 0.1701725611963515, 0.19789136128857465, 0.2393538070803949, 0.15289891752600326, 0.18280312033170165, 0.23825656146530017, 0.17565826857807953, 0.1959588143554567, 0.19488132096989275, 0.2129335955942584, 0.18994608317120465, 0.16640804030469136, 0.159302633878025, 0.2622033982613021, 0.15251864671956006, 0.2586900721081564, 0.15945589574895436, 0.16191541214562477, 0.14512132722298232, 0.18992737446708297, 0.18823464679802782, 0.18023067869382015, 0.1860019810050353, 0.18861350640826746, 0.17844657440591527, 0.18139134737669893, 0.18374694687064597, 0.18704312986872806, 0.06163642014085868, 0.0717871388914566, 0.0499624701256709, 0.05589094256414262, 0.061103430799511305, 0.05899638787951356, 0.06539554613352028, 0.0546593594485183, 0.06382432947988004]}, "mutation_prompt": null}
{"id": "2c51c99f-09ca-4181-965a-7f6f0a7ac5c6", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < func(current_solution):\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Enhancing efficiency by utilizing a more optimized data structure and simplifying control flow.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2055790c-d561-4fad-91af-866da19b0675", "metadata": {"aucs": [0.19578228131847875, 0.21719127968295093, 0.21422869657551924, 0.20493671087692122, 0.20993600155718684, 0.2319100136126404, 0.20852998549917867, 0.2040320832359619, 0.197336647251382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05848966844047554, 0.07077466358021889, 0.05094660204206758, 0.06753278678687691, 0.048717920956356964, 0.06367275429682795, 0.06514736078115202, 0.061891251159925, 0.061510646102637345, 0.0474123532133619, 0.03835367153767688, 0.06527429251830763, 0.04625371305647219, 0.04744596941259993, 0.059991981575572395, 0.04137380705758098, 0.06093581997438302, 0.04581655004756935, 0.07136311860339994, 0.0698291577847634, 0.08306175717086117, 0.08131444239347907, 0.07523362422332625, 0.08398228730795998, 0.1113077999667621, 0.07012352073355976, 0.08315502325056645, 0.08591992170227569, 0.09722393671034113, 0.10695204330602659, 0.09612498972883532, 0.12833188729896539, 0.08490085555240312, 0.10649000345222881, 0.10428630805247452, 0.07843948361980146, 0.15859265547095913, 0.15630848512028284, 0.16251948145654538, 0.1773610170501574, 0.15228157229473505, 0.10119642188812306, 0.1882778441851819, 0.15959245857833226, 0.18368981152781272, 0.035834605065708125, 0.03498239339843989, 0.028523533938293766, 0.02251495709324458, 0.07977086873631256, 0.009747492155416704, 0.038939590367697896, 0.04204957696652323, 0.04129968780765936, 0.004868773694123751, 9.999999999998899e-05, 0.06613251010337773, 0.003583193646688021, 0.010955197645156067, 0.05154431638164314, 0.017749934013163382, 0.0358103853487195, 0.038142897263777065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05841363778898245, 0.04711888259950425, 0.05249630735307187, 0.08275165160939413, 0.09820675691356262, 0.05120010607299663, 0.08354586983219892, 0.05291410454257106, 0.04475457514920578, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005927069051329115, 0.012420722623622038, 0.017504270576063963, 0.004679408219052328, 0.0005419877322363487, 0.014848786376154055, 0.0029397051438060373, 0.003741207538865865, 0.27292326953196433, 0.2699678457566118, 0.21136793536070986, 0.2082978057632956, 0.21096521003335522, 0.2331673608843059, 0.21335140811177056, 0.20542648875888858, 0.2111552370118619, 0.07221010658203686, 0.0651072423763901, 0.05514136626798205, 0.05591373710007719, 0.07208651862270476, 0.07590790616260201, 0.059682463955371357, 0.05195439122192291, 0.05559578275576438, 0.13531800070407285, 0.13112116369295523, 0.1628613362736836, 0.1278665976497928, 0.1521161909884431, 0.1340175417132654, 0.15318010462365506, 0.1363340124311535, 0.15127380705974647, 0.17914242296446137, 0.20022323613333404, 0.18707034600015315, 0.19184342475058613, 0.18866793140872562, 0.1612177702052915, 0.18333971408767702, 0.19311080055260543, 0.17211799568805386, 0.1347621513448678, 0.13493519454802883, 0.15851237021975828, 0.13318552954736385, 0.16885268417544064, 0.11959117318229961, 0.13543739245151032, 0.13112653532369223, 0.1230432545329726, 0.17748551059990003, 0.18554619644552572, 0.19768379329381247, 0.18582334225478636, 0.2018130951149617, 0.17580946714985235, 0.17982511647867794, 0.17332712070084877, 0.21749226603625493, 0.14429114193774462, 0.15223016700938063, 0.15206508327323975, 0.16699591847652806, 0.15313759603270083, 0.142204636262378, 0.15756341253418382, 0.1594343926026175, 0.1701725611963515, 0.19789136128857465, 0.2393538070803949, 0.15289891752600326, 0.18280312033170165, 0.23825656146530017, 0.17565826857807953, 0.1959588143554567, 0.19488132096989275, 0.2129335955942584, 0.18994608317120465, 0.16640804030469136, 0.159302633878025, 0.2622033982613021, 0.15251864671956006, 0.2586900721081564, 0.15945589574895436, 0.16191541214562477, 0.14512132722298232, 0.18992737446708297, 0.18823464679802782, 0.18023067869382015, 0.1860019810050353, 0.18861350640826746, 0.17844657440591527, 0.18139134737669893, 0.18374694687064597, 0.18704312986872806, 0.06163642014085868, 0.0717871388914566, 0.0499624701256709, 0.05589094256414262, 0.061103430799511305, 0.05899638787951356, 0.06539554613352028, 0.0546593594485183, 0.06382432947988004]}, "mutation_prompt": null}
{"id": "3945d45e-aaf3-4508-bee7-4c8e972adccc", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < func(current_solution):\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Enhancing efficiency by utilizing a more optimized data structure and simplifying control flow.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2055790c-d561-4fad-91af-866da19b0675", "metadata": {"aucs": [0.19578228131847875, 0.21719127968295093, 0.21422869657551924, 0.20493671087692122, 0.20993600155718684, 0.2319100136126404, 0.20852998549917867, 0.2040320832359619, 0.197336647251382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05848966844047554, 0.07077466358021889, 0.05094660204206758, 0.06753278678687691, 0.048717920956356964, 0.06367275429682795, 0.06514736078115202, 0.061891251159925, 0.061510646102637345, 0.0474123532133619, 0.03835367153767688, 0.06527429251830763, 0.04625371305647219, 0.04744596941259993, 0.059991981575572395, 0.04137380705758098, 0.06093581997438302, 0.04581655004756935, 0.07136311860339994, 0.0698291577847634, 0.08306175717086117, 0.08131444239347907, 0.07523362422332625, 0.08398228730795998, 0.1113077999667621, 0.07012352073355976, 0.08315502325056645, 0.08591992170227569, 0.09722393671034113, 0.10695204330602659, 0.09612498972883532, 0.12833188729896539, 0.08490085555240312, 0.10649000345222881, 0.10428630805247452, 0.07843948361980146, 0.15859265547095913, 0.15630848512028284, 0.16251948145654538, 0.1773610170501574, 0.15228157229473505, 0.10119642188812306, 0.1882778441851819, 0.15959245857833226, 0.18368981152781272, 0.035834605065708125, 0.03498239339843989, 0.028523533938293766, 0.02251495709324458, 0.07977086873631256, 0.009747492155416704, 0.038939590367697896, 0.04204957696652323, 0.04129968780765936, 0.004868773694123751, 9.999999999998899e-05, 0.06613251010337773, 0.003583193646688021, 0.010955197645156067, 0.05154431638164314, 0.017749934013163382, 0.0358103853487195, 0.038142897263777065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05841363778898245, 0.04711888259950425, 0.05249630735307187, 0.08275165160939413, 0.09820675691356262, 0.05120010607299663, 0.08354586983219892, 0.05291410454257106, 0.04475457514920578, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005927069051329115, 0.012420722623622038, 0.017504270576063963, 0.004679408219052328, 0.0005419877322363487, 0.014848786376154055, 0.0029397051438060373, 0.003741207538865865, 0.27292326953196433, 0.2699678457566118, 0.21136793536070986, 0.2082978057632956, 0.21096521003335522, 0.2331673608843059, 0.21335140811177056, 0.20542648875888858, 0.2111552370118619, 0.07221010658203686, 0.0651072423763901, 0.05514136626798205, 0.05591373710007719, 0.07208651862270476, 0.07590790616260201, 0.059682463955371357, 0.05195439122192291, 0.05559578275576438, 0.13531800070407285, 0.13112116369295523, 0.1628613362736836, 0.1278665976497928, 0.1521161909884431, 0.1340175417132654, 0.15318010462365506, 0.1363340124311535, 0.15127380705974647, 0.17914242296446137, 0.20022323613333404, 0.18707034600015315, 0.19184342475058613, 0.18866793140872562, 0.1612177702052915, 0.18333971408767702, 0.19311080055260543, 0.17211799568805386, 0.1347621513448678, 0.13493519454802883, 0.15851237021975828, 0.13318552954736385, 0.16885268417544064, 0.11959117318229961, 0.13543739245151032, 0.13112653532369223, 0.1230432545329726, 0.17748551059990003, 0.18554619644552572, 0.19768379329381247, 0.18582334225478636, 0.2018130951149617, 0.17580946714985235, 0.17982511647867794, 0.17332712070084877, 0.21749226603625493, 0.14429114193774462, 0.15223016700938063, 0.15206508327323975, 0.16699591847652806, 0.15313759603270083, 0.142204636262378, 0.15756341253418382, 0.1594343926026175, 0.1701725611963515, 0.19789136128857465, 0.2393538070803949, 0.15289891752600326, 0.18280312033170165, 0.23825656146530017, 0.17565826857807953, 0.1959588143554567, 0.19488132096989275, 0.2129335955942584, 0.18994608317120465, 0.16640804030469136, 0.159302633878025, 0.2622033982613021, 0.15251864671956006, 0.2586900721081564, 0.15945589574895436, 0.16191541214562477, 0.14512132722298232, 0.18992737446708297, 0.18823464679802782, 0.18023067869382015, 0.1860019810050353, 0.18861350640826746, 0.17844657440591527, 0.18139134737669893, 0.18374694687064597, 0.18704312986872806, 0.06163642014085868, 0.0717871388914566, 0.0499624701256709, 0.05589094256414262, 0.061103430799511305, 0.05899638787951356, 0.06539554613352028, 0.0546593594485183, 0.06382432947988004]}, "mutation_prompt": null}
{"id": "d2de8abc-39f6-4f4a-8e12-026bde1ee2ee", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < func(current_solution):\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Enhancing efficiency by utilizing a more optimized data structure and simplifying control flow.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2055790c-d561-4fad-91af-866da19b0675", "metadata": {"aucs": [0.19578228131847875, 0.21719127968295093, 0.21422869657551924, 0.20493671087692122, 0.20993600155718684, 0.2319100136126404, 0.20852998549917867, 0.2040320832359619, 0.197336647251382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05848966844047554, 0.07077466358021889, 0.05094660204206758, 0.06753278678687691, 0.048717920956356964, 0.06367275429682795, 0.06514736078115202, 0.061891251159925, 0.061510646102637345, 0.0474123532133619, 0.03835367153767688, 0.06527429251830763, 0.04625371305647219, 0.04744596941259993, 0.059991981575572395, 0.04137380705758098, 0.06093581997438302, 0.04581655004756935, 0.07136311860339994, 0.0698291577847634, 0.08306175717086117, 0.08131444239347907, 0.07523362422332625, 0.08398228730795998, 0.1113077999667621, 0.07012352073355976, 0.08315502325056645, 0.08591992170227569, 0.09722393671034113, 0.10695204330602659, 0.09612498972883532, 0.12833188729896539, 0.08490085555240312, 0.10649000345222881, 0.10428630805247452, 0.07843948361980146, 0.15859265547095913, 0.15630848512028284, 0.16251948145654538, 0.1773610170501574, 0.15228157229473505, 0.10119642188812306, 0.1882778441851819, 0.15959245857833226, 0.18368981152781272, 0.035834605065708125, 0.03498239339843989, 0.028523533938293766, 0.02251495709324458, 0.07977086873631256, 0.009747492155416704, 0.038939590367697896, 0.04204957696652323, 0.04129968780765936, 0.004868773694123751, 9.999999999998899e-05, 0.06613251010337773, 0.003583193646688021, 0.010955197645156067, 0.05154431638164314, 0.017749934013163382, 0.0358103853487195, 0.038142897263777065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05841363778898245, 0.04711888259950425, 0.05249630735307187, 0.08275165160939413, 0.09820675691356262, 0.05120010607299663, 0.08354586983219892, 0.05291410454257106, 0.04475457514920578, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005927069051329115, 0.012420722623622038, 0.017504270576063963, 0.004679408219052328, 0.0005419877322363487, 0.014848786376154055, 0.0029397051438060373, 0.003741207538865865, 0.27292326953196433, 0.2699678457566118, 0.21136793536070986, 0.2082978057632956, 0.21096521003335522, 0.2331673608843059, 0.21335140811177056, 0.20542648875888858, 0.2111552370118619, 0.07221010658203686, 0.0651072423763901, 0.05514136626798205, 0.05591373710007719, 0.07208651862270476, 0.07590790616260201, 0.059682463955371357, 0.05195439122192291, 0.05559578275576438, 0.13531800070407285, 0.13112116369295523, 0.1628613362736836, 0.1278665976497928, 0.1521161909884431, 0.1340175417132654, 0.15318010462365506, 0.1363340124311535, 0.15127380705974647, 0.17914242296446137, 0.20022323613333404, 0.18707034600015315, 0.19184342475058613, 0.18866793140872562, 0.1612177702052915, 0.18333971408767702, 0.19311080055260543, 0.17211799568805386, 0.1347621513448678, 0.13493519454802883, 0.15851237021975828, 0.13318552954736385, 0.16885268417544064, 0.11959117318229961, 0.13543739245151032, 0.13112653532369223, 0.1230432545329726, 0.17748551059990003, 0.18554619644552572, 0.19768379329381247, 0.18582334225478636, 0.2018130951149617, 0.17580946714985235, 0.17982511647867794, 0.17332712070084877, 0.21749226603625493, 0.14429114193774462, 0.15223016700938063, 0.15206508327323975, 0.16699591847652806, 0.15313759603270083, 0.142204636262378, 0.15756341253418382, 0.1594343926026175, 0.1701725611963515, 0.19789136128857465, 0.2393538070803949, 0.15289891752600326, 0.18280312033170165, 0.23825656146530017, 0.17565826857807953, 0.1959588143554567, 0.19488132096989275, 0.2129335955942584, 0.18994608317120465, 0.16640804030469136, 0.159302633878025, 0.2622033982613021, 0.15251864671956006, 0.2586900721081564, 0.15945589574895436, 0.16191541214562477, 0.14512132722298232, 0.18992737446708297, 0.18823464679802782, 0.18023067869382015, 0.1860019810050353, 0.18861350640826746, 0.17844657440591527, 0.18139134737669893, 0.18374694687064597, 0.18704312986872806, 0.06163642014085868, 0.0717871388914566, 0.0499624701256709, 0.05589094256414262, 0.061103430799511305, 0.05899638787951356, 0.06539554613352028, 0.0546593594485183, 0.06382432947988004]}, "mutation_prompt": null}
{"id": "413b002d-3186-40ad-9729-fae1c0a84f8c", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.arange(self.dim) * 2 / (self.dim - 1))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            np.clip(current_solution, self.lower_bound, self.upper_bound, out=current_solution)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < func(current_solution):\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Optimizing memory usage by utilizing a more efficient data structure for storing attraction values.", "configspace": "", "generation": 50, "fitness": 0.10494963633031208, "feedback": "The algorithm EnhancedAdaptiveFireflyAlgorithmImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "2055790c-d561-4fad-91af-866da19b0675", "metadata": {"aucs": [0.19578228131847875, 0.21719127968295093, 0.21422869657551924, 0.20493671087692122, 0.20993600155718684, 0.2319100136126404, 0.20852998549917867, 0.2040320832359619, 0.197336647251382, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05848966844047554, 0.07077466358021889, 0.05094660204206758, 0.06753278678687691, 0.048717920956356964, 0.06367275429682795, 0.06514736078115202, 0.061891251159925, 0.061510646102637345, 0.0474123532133619, 0.03835367153767688, 0.06527429251830763, 0.04625371305647219, 0.04744596941259993, 0.059991981575572395, 0.04137380705758098, 0.06093581997438302, 0.04581655004756935, 0.07136311860339994, 0.0698291577847634, 0.08306175717086117, 0.08131444239347907, 0.07523362422332625, 0.08398228730795998, 0.1113077999667621, 0.07012352073355976, 0.08315502325056645, 0.08591992170227569, 0.09722393671034113, 0.10695204330602659, 0.09612498972883532, 0.12833188729896539, 0.08490085555240312, 0.10649000345222881, 0.10428630805247452, 0.07843948361980146, 0.15859265547095913, 0.15630848512028284, 0.16251948145654538, 0.1773610170501574, 0.15228157229473505, 0.10119642188812306, 0.1882778441851819, 0.15959245857833226, 0.18368981152781272, 0.035834605065708125, 0.03498239339843989, 0.028523533938293766, 0.02251495709324458, 0.07977086873631256, 0.009747492155416704, 0.038939590367697896, 0.04204957696652323, 0.04129968780765936, 0.004868773694123751, 9.999999999998899e-05, 0.06613251010337773, 0.003583193646688021, 0.010955197645156067, 0.05154431638164314, 0.017749934013163382, 0.0358103853487195, 0.038142897263777065, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05841363778898245, 0.04711888259950425, 0.05249630735307187, 0.08275165160939413, 0.09820675691356262, 0.05120010607299663, 0.08354586983219892, 0.05291410454257106, 0.04475457514920578, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005927069051329115, 0.012420722623622038, 0.017504270576063963, 0.004679408219052328, 0.0005419877322363487, 0.014848786376154055, 0.0029397051438060373, 0.003741207538865865, 0.27292326953196433, 0.2699678457566118, 0.21136793536070986, 0.2082978057632956, 0.21096521003335522, 0.2331673608843059, 0.21335140811177056, 0.20542648875888858, 0.2111552370118619, 0.07221010658203686, 0.0651072423763901, 0.05514136626798205, 0.05591373710007719, 0.07208651862270476, 0.07590790616260201, 0.059682463955371357, 0.05195439122192291, 0.05559578275576438, 0.13531800070407285, 0.13112116369295523, 0.1628613362736836, 0.1278665976497928, 0.1521161909884431, 0.1340175417132654, 0.15318010462365506, 0.1363340124311535, 0.15127380705974647, 0.17914242296446137, 0.20022323613333404, 0.18707034600015315, 0.19184342475058613, 0.18866793140872562, 0.1612177702052915, 0.18333971408767702, 0.19311080055260543, 0.17211799568805386, 0.1347621513448678, 0.13493519454802883, 0.15851237021975828, 0.13318552954736385, 0.16885268417544064, 0.11959117318229961, 0.13543739245151032, 0.13112653532369223, 0.1230432545329726, 0.17748551059990003, 0.18554619644552572, 0.19768379329381247, 0.18582334225478636, 0.2018130951149617, 0.17580946714985235, 0.17982511647867794, 0.17332712070084877, 0.21749226603625493, 0.14429114193774462, 0.15223016700938063, 0.15206508327323975, 0.16699591847652806, 0.15313759603270083, 0.142204636262378, 0.15756341253418382, 0.1594343926026175, 0.1701725611963515, 0.19789136128857465, 0.2393538070803949, 0.15289891752600326, 0.18280312033170165, 0.23825656146530017, 0.17565826857807953, 0.1959588143554567, 0.19488132096989275, 0.2129335955942584, 0.18994608317120465, 0.16640804030469136, 0.159302633878025, 0.2622033982613021, 0.15251864671956006, 0.2586900721081564, 0.15945589574895436, 0.16191541214562477, 0.14512132722298232, 0.18992737446708297, 0.18823464679802782, 0.18023067869382015, 0.1860019810050353, 0.18861350640826746, 0.17844657440591527, 0.18139134737669893, 0.18374694687064597, 0.18704312986872806, 0.06163642014085868, 0.0717871388914566, 0.0499624701256709, 0.05589094256414262, 0.061103430799511305, 0.05899638787951356, 0.06539554613352028, 0.0546593594485183, 0.06382432947988004]}, "mutation_prompt": null}
{"id": "14e80036-f106-4806-b19a-afb554bffb78", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Enhancing efficiency by consolidating repeated operations and optimizing data structure utilization.", "configspace": "", "generation": 51, "fitness": 0.10991587995378788, "feedback": "The algorithm EnhancedAdaptiveFireflyAlgorithmImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "2055790c-d561-4fad-91af-866da19b0675", "metadata": {"aucs": [0.20438920353475076, 0.219679531440092, 0.21906497672011804, 0.2094388064085928, 0.21596863419291035, 0.24008684531363456, 0.21767731167036075, 0.20909814397486393, 0.2148432505903367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610795629303778, 0.07409698785303953, 0.05271465011633136, 0.06925367492463919, 0.06696952445680149, 0.07090486132715801, 0.07587062138952783, 0.0650149535590725, 0.06471224236764994, 0.049228638373888356, 0.041812072318749616, 0.06796105767443517, 0.046979124780548, 0.050980494811149746, 0.04530097722716886, 0.045695029369587026, 0.061426621216498445, 0.051878027571310104, 0.07968833205917802, 0.07054420872168954, 0.08487090484727655, 0.08439035183444521, 0.07981920813101973, 0.08639989743466536, 0.11167139748991595, 0.08142191975437085, 0.0839395340637753, 0.08735012719200497, 0.10026022625232822, 0.11016992159305905, 0.10713053689165208, 0.13319504066487498, 0.09269132547754577, 0.10347316807472451, 0.10996275141562051, 0.09128146848655871, 0.170828140844846, 0.1578960923347842, 0.16532887481991798, 0.19719622791350944, 0.15947857044858138, 0.11561634895565165, 0.1930287182940308, 0.16561770025312794, 0.19270775013356445, 0.045525738664446314, 0.03980464284919161, 0.036079914009348846, 0.034226533980624474, 0.10136947344082492, 0.02059241411269308, 0.047069913469444, 0.058702917085938, 0.04613318288948409, 0.019609472796867866, 0.001282716948515783, 0.07046810808147819, 0.012466163174071676, 0.023723795001327708, 0.062170516329845826, 0.023707240227070492, 0.05893751156820359, 0.04605776242736115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676878552291088, 0.038390586862164455, 0.05406736989896921, 0.10309055460755678, 0.10516750105851824, 0.061910228939073164, 0.06070129819867054, 0.06025453936325409, 0.049228279099600925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002427922701745633, 0.00893190669716315, 0.012768274742765096, 0.0266653085989208, 0.005751444164856179, 0.00567912397131809, 0.015820612482167373, 0.003148410124477641, 0.004531388662965763, 0.2741742635568084, 0.2794507504120407, 0.22046071563458114, 0.20929868158466225, 0.2170589849485558, 0.2536833250233286, 0.2151248586000155, 0.2187238775321504, 0.2239872838908744, 0.07383532432026874, 0.06742059254175015, 0.05904371003261655, 0.06182288429303684, 0.07328797328990422, 0.07624036838465686, 0.06225451444494079, 0.052606381686177484, 0.06114572106336458, 0.13838786406177028, 0.1328535912264227, 0.1645855524558727, 0.13320219771837927, 0.14553792002756838, 0.14151393915246624, 0.15709464527217298, 0.1308850213283398, 0.15253996959613336, 0.1824103535226418, 0.20111240934011698, 0.18988204930751984, 0.19562674204131358, 0.19011181070770555, 0.17039434050609348, 0.20849530540757477, 0.1927328777783458, 0.17572330694954885, 0.1391729657178814, 0.13730019035584395, 0.16446623316052356, 0.13952803403153868, 0.17178788228853226, 0.1221285831368526, 0.16124813638231172, 0.1329070076056953, 0.1258886465086444, 0.18982794983294826, 0.18888102910657212, 0.19875016845086702, 0.18926743486009678, 0.20260298997877468, 0.17671384286946923, 0.18449234406604553, 0.1817681632571132, 0.19514707581003954, 0.14933112922945257, 0.1605800919214062, 0.1590708815184878, 0.1572654470411542, 0.16507319241442509, 0.1479226956406683, 0.16152066110579522, 0.1640347096835003, 0.1713346532744947, 0.2097772400536031, 0.25092540788611206, 0.18148251359443446, 0.17231283663659802, 0.2607408821639945, 0.21034576854859943, 0.22922543649139693, 0.19804381920573622, 0.22615862082205962, 0.20465526401020406, 0.16102039093831044, 0.1730475115618907, 0.2727174845562844, 0.16231072806153257, 0.23835393970524366, 0.17155155202850347, 0.19844144778069372, 0.17227640976827863, 0.19011405675133353, 0.19240050283901622, 0.17624937086475, 0.18585867036140447, 0.18755042226816743, 0.17616735570250242, 0.18569214940737233, 0.18103259660820437, 0.17956588559045572, 0.06616409500353926, 0.07551023843251548, 0.053977585073969436, 0.0622742478238697, 0.0677508087867934, 0.061209449912793756, 0.06955542655974856, 0.05713387771211309, 0.06955024329829884]}, "mutation_prompt": null}
{"id": "83de5a70-c60d-48e2-b732-fa1dd724d010", "solution": "import numpy as np\n\nclass EnhancedDynamicStepFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedDynamicStepFireflyAlgorithm", "description": "Utilizing a dynamic step size adaptation strategy to enhance exploration capabilities and improve convergence speed.", "configspace": "", "generation": 52, "fitness": 0.10991587995378788, "feedback": "The algorithm EnhancedDynamicStepFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20438920353475076, 0.219679531440092, 0.21906497672011804, 0.2094388064085928, 0.21596863419291035, 0.24008684531363456, 0.21767731167036075, 0.20909814397486393, 0.2148432505903367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610795629303778, 0.07409698785303953, 0.05271465011633136, 0.06925367492463919, 0.06696952445680149, 0.07090486132715801, 0.07587062138952783, 0.0650149535590725, 0.06471224236764994, 0.049228638373888356, 0.041812072318749616, 0.06796105767443517, 0.046979124780548, 0.050980494811149746, 0.04530097722716886, 0.045695029369587026, 0.061426621216498445, 0.051878027571310104, 0.07968833205917802, 0.07054420872168954, 0.08487090484727655, 0.08439035183444521, 0.07981920813101973, 0.08639989743466536, 0.11167139748991595, 0.08142191975437085, 0.0839395340637753, 0.08735012719200497, 0.10026022625232822, 0.11016992159305905, 0.10713053689165208, 0.13319504066487498, 0.09269132547754577, 0.10347316807472451, 0.10996275141562051, 0.09128146848655871, 0.170828140844846, 0.1578960923347842, 0.16532887481991798, 0.19719622791350944, 0.15947857044858138, 0.11561634895565165, 0.1930287182940308, 0.16561770025312794, 0.19270775013356445, 0.045525738664446314, 0.03980464284919161, 0.036079914009348846, 0.034226533980624474, 0.10136947344082492, 0.02059241411269308, 0.047069913469444, 0.058702917085938, 0.04613318288948409, 0.019609472796867866, 0.001282716948515783, 0.07046810808147819, 0.012466163174071676, 0.023723795001327708, 0.062170516329845826, 0.023707240227070492, 0.05893751156820359, 0.04605776242736115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676878552291088, 0.038390586862164455, 0.05406736989896921, 0.10309055460755678, 0.10516750105851824, 0.061910228939073164, 0.06070129819867054, 0.06025453936325409, 0.049228279099600925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002427922701745633, 0.00893190669716315, 0.012768274742765096, 0.0266653085989208, 0.005751444164856179, 0.00567912397131809, 0.015820612482167373, 0.003148410124477641, 0.004531388662965763, 0.2741742635568084, 0.2794507504120407, 0.22046071563458114, 0.20929868158466225, 0.2170589849485558, 0.2536833250233286, 0.2151248586000155, 0.2187238775321504, 0.2239872838908744, 0.07383532432026874, 0.06742059254175015, 0.05904371003261655, 0.06182288429303684, 0.07328797328990422, 0.07624036838465686, 0.06225451444494079, 0.052606381686177484, 0.06114572106336458, 0.13838786406177028, 0.1328535912264227, 0.1645855524558727, 0.13320219771837927, 0.14553792002756838, 0.14151393915246624, 0.15709464527217298, 0.1308850213283398, 0.15253996959613336, 0.1824103535226418, 0.20111240934011698, 0.18988204930751984, 0.19562674204131358, 0.19011181070770555, 0.17039434050609348, 0.20849530540757477, 0.1927328777783458, 0.17572330694954885, 0.1391729657178814, 0.13730019035584395, 0.16446623316052356, 0.13952803403153868, 0.17178788228853226, 0.1221285831368526, 0.16124813638231172, 0.1329070076056953, 0.1258886465086444, 0.18982794983294826, 0.18888102910657212, 0.19875016845086702, 0.18926743486009678, 0.20260298997877468, 0.17671384286946923, 0.18449234406604553, 0.1817681632571132, 0.19514707581003954, 0.14933112922945257, 0.1605800919214062, 0.1590708815184878, 0.1572654470411542, 0.16507319241442509, 0.1479226956406683, 0.16152066110579522, 0.1640347096835003, 0.1713346532744947, 0.2097772400536031, 0.25092540788611206, 0.18148251359443446, 0.17231283663659802, 0.2607408821639945, 0.21034576854859943, 0.22922543649139693, 0.19804381920573622, 0.22615862082205962, 0.20465526401020406, 0.16102039093831044, 0.1730475115618907, 0.2727174845562844, 0.16231072806153257, 0.23835393970524366, 0.17155155202850347, 0.19844144778069372, 0.17227640976827863, 0.19011405675133353, 0.19240050283901622, 0.17624937086475, 0.18585867036140447, 0.18755042226816743, 0.17616735570250242, 0.18569214940737233, 0.18103259660820437, 0.17956588559045572, 0.06616409500353926, 0.07551023843251548, 0.053977585073969436, 0.0622742478238697, 0.0677508087867934, 0.061209449912793756, 0.06955542655974856, 0.05713387771211309, 0.06955024329829884]}, "mutation_prompt": null}
{"id": "ac7afce2-5b01-4c1b-b8b6-7bba65638b59", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Enhancing efficiency by consolidating repeated operations and optimizing data structure utilization.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20438920353475076, 0.219679531440092, 0.21906497672011804, 0.2094388064085928, 0.21596863419291035, 0.24008684531363456, 0.21767731167036075, 0.20909814397486393, 0.2148432505903367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610795629303778, 0.07409698785303953, 0.05271465011633136, 0.06925367492463919, 0.06696952445680149, 0.07090486132715801, 0.07587062138952783, 0.0650149535590725, 0.06471224236764994, 0.049228638373888356, 0.041812072318749616, 0.06796105767443517, 0.046979124780548, 0.050980494811149746, 0.04530097722716886, 0.045695029369587026, 0.061426621216498445, 0.051878027571310104, 0.07968833205917802, 0.07054420872168954, 0.08487090484727655, 0.08439035183444521, 0.07981920813101973, 0.08639989743466536, 0.11167139748991595, 0.08142191975437085, 0.0839395340637753, 0.08735012719200497, 0.10026022625232822, 0.11016992159305905, 0.10713053689165208, 0.13319504066487498, 0.09269132547754577, 0.10347316807472451, 0.10996275141562051, 0.09128146848655871, 0.170828140844846, 0.1578960923347842, 0.16532887481991798, 0.19719622791350944, 0.15947857044858138, 0.11561634895565165, 0.1930287182940308, 0.16561770025312794, 0.19270775013356445, 0.045525738664446314, 0.03980464284919161, 0.036079914009348846, 0.034226533980624474, 0.10136947344082492, 0.02059241411269308, 0.047069913469444, 0.058702917085938, 0.04613318288948409, 0.019609472796867866, 0.001282716948515783, 0.07046810808147819, 0.012466163174071676, 0.023723795001327708, 0.062170516329845826, 0.023707240227070492, 0.05893751156820359, 0.04605776242736115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676878552291088, 0.038390586862164455, 0.05406736989896921, 0.10309055460755678, 0.10516750105851824, 0.061910228939073164, 0.06070129819867054, 0.06025453936325409, 0.049228279099600925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002427922701745633, 0.00893190669716315, 0.012768274742765096, 0.0266653085989208, 0.005751444164856179, 0.00567912397131809, 0.015820612482167373, 0.003148410124477641, 0.004531388662965763, 0.2741742635568084, 0.2794507504120407, 0.22046071563458114, 0.20929868158466225, 0.2170589849485558, 0.2536833250233286, 0.2151248586000155, 0.2187238775321504, 0.2239872838908744, 0.07383532432026874, 0.06742059254175015, 0.05904371003261655, 0.06182288429303684, 0.07328797328990422, 0.07624036838465686, 0.06225451444494079, 0.052606381686177484, 0.06114572106336458, 0.13838786406177028, 0.1328535912264227, 0.1645855524558727, 0.13320219771837927, 0.14553792002756838, 0.14151393915246624, 0.15709464527217298, 0.1308850213283398, 0.15253996959613336, 0.1824103535226418, 0.20111240934011698, 0.18988204930751984, 0.19562674204131358, 0.19011181070770555, 0.17039434050609348, 0.20849530540757477, 0.1927328777783458, 0.17572330694954885, 0.1391729657178814, 0.13730019035584395, 0.16446623316052356, 0.13952803403153868, 0.17178788228853226, 0.1221285831368526, 0.16124813638231172, 0.1329070076056953, 0.1258886465086444, 0.18982794983294826, 0.18888102910657212, 0.19875016845086702, 0.18926743486009678, 0.20260298997877468, 0.17671384286946923, 0.18449234406604553, 0.1817681632571132, 0.19514707581003954, 0.14933112922945257, 0.1605800919214062, 0.1590708815184878, 0.1572654470411542, 0.16507319241442509, 0.1479226956406683, 0.16152066110579522, 0.1640347096835003, 0.1713346532744947, 0.2097772400536031, 0.25092540788611206, 0.18148251359443446, 0.17231283663659802, 0.2607408821639945, 0.21034576854859943, 0.22922543649139693, 0.19804381920573622, 0.22615862082205962, 0.20465526401020406, 0.16102039093831044, 0.1730475115618907, 0.2727174845562844, 0.16231072806153257, 0.23835393970524366, 0.17155155202850347, 0.19844144778069372, 0.17227640976827863, 0.19011405675133353, 0.19240050283901622, 0.17624937086475, 0.18585867036140447, 0.18755042226816743, 0.17616735570250242, 0.18569214940737233, 0.18103259660820437, 0.17956588559045572, 0.06616409500353926, 0.07551023843251548, 0.053977585073969436, 0.0622742478238697, 0.0677508087867934, 0.061209449912793756, 0.06955542655974856, 0.05713387771211309, 0.06955024329829884]}, "mutation_prompt": null}
{"id": "93accc5f-1637-4b11-88af-7443c7500f80", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Enhancing efficiency by consolidating repeated operations and optimizing data structure utilization.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20438920353475076, 0.219679531440092, 0.21906497672011804, 0.2094388064085928, 0.21596863419291035, 0.24008684531363456, 0.21767731167036075, 0.20909814397486393, 0.2148432505903367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610795629303778, 0.07409698785303953, 0.05271465011633136, 0.06925367492463919, 0.06696952445680149, 0.07090486132715801, 0.07587062138952783, 0.0650149535590725, 0.06471224236764994, 0.049228638373888356, 0.041812072318749616, 0.06796105767443517, 0.046979124780548, 0.050980494811149746, 0.04530097722716886, 0.045695029369587026, 0.061426621216498445, 0.051878027571310104, 0.07968833205917802, 0.07054420872168954, 0.08487090484727655, 0.08439035183444521, 0.07981920813101973, 0.08639989743466536, 0.11167139748991595, 0.08142191975437085, 0.0839395340637753, 0.08735012719200497, 0.10026022625232822, 0.11016992159305905, 0.10713053689165208, 0.13319504066487498, 0.09269132547754577, 0.10347316807472451, 0.10996275141562051, 0.09128146848655871, 0.170828140844846, 0.1578960923347842, 0.16532887481991798, 0.19719622791350944, 0.15947857044858138, 0.11561634895565165, 0.1930287182940308, 0.16561770025312794, 0.19270775013356445, 0.045525738664446314, 0.03980464284919161, 0.036079914009348846, 0.034226533980624474, 0.10136947344082492, 0.02059241411269308, 0.047069913469444, 0.058702917085938, 0.04613318288948409, 0.019609472796867866, 0.001282716948515783, 0.07046810808147819, 0.012466163174071676, 0.023723795001327708, 0.062170516329845826, 0.023707240227070492, 0.05893751156820359, 0.04605776242736115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676878552291088, 0.038390586862164455, 0.05406736989896921, 0.10309055460755678, 0.10516750105851824, 0.061910228939073164, 0.06070129819867054, 0.06025453936325409, 0.049228279099600925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002427922701745633, 0.00893190669716315, 0.012768274742765096, 0.0266653085989208, 0.005751444164856179, 0.00567912397131809, 0.015820612482167373, 0.003148410124477641, 0.004531388662965763, 0.2741742635568084, 0.2794507504120407, 0.22046071563458114, 0.20929868158466225, 0.2170589849485558, 0.2536833250233286, 0.2151248586000155, 0.2187238775321504, 0.2239872838908744, 0.07383532432026874, 0.06742059254175015, 0.05904371003261655, 0.06182288429303684, 0.07328797328990422, 0.07624036838465686, 0.06225451444494079, 0.052606381686177484, 0.06114572106336458, 0.13838786406177028, 0.1328535912264227, 0.1645855524558727, 0.13320219771837927, 0.14553792002756838, 0.14151393915246624, 0.15709464527217298, 0.1308850213283398, 0.15253996959613336, 0.1824103535226418, 0.20111240934011698, 0.18988204930751984, 0.19562674204131358, 0.19011181070770555, 0.17039434050609348, 0.20849530540757477, 0.1927328777783458, 0.17572330694954885, 0.1391729657178814, 0.13730019035584395, 0.16446623316052356, 0.13952803403153868, 0.17178788228853226, 0.1221285831368526, 0.16124813638231172, 0.1329070076056953, 0.1258886465086444, 0.18982794983294826, 0.18888102910657212, 0.19875016845086702, 0.18926743486009678, 0.20260298997877468, 0.17671384286946923, 0.18449234406604553, 0.1817681632571132, 0.19514707581003954, 0.14933112922945257, 0.1605800919214062, 0.1590708815184878, 0.1572654470411542, 0.16507319241442509, 0.1479226956406683, 0.16152066110579522, 0.1640347096835003, 0.1713346532744947, 0.2097772400536031, 0.25092540788611206, 0.18148251359443446, 0.17231283663659802, 0.2607408821639945, 0.21034576854859943, 0.22922543649139693, 0.19804381920573622, 0.22615862082205962, 0.20465526401020406, 0.16102039093831044, 0.1730475115618907, 0.2727174845562844, 0.16231072806153257, 0.23835393970524366, 0.17155155202850347, 0.19844144778069372, 0.17227640976827863, 0.19011405675133353, 0.19240050283901622, 0.17624937086475, 0.18585867036140447, 0.18755042226816743, 0.17616735570250242, 0.18569214940737233, 0.18103259660820437, 0.17956588559045572, 0.06616409500353926, 0.07551023843251548, 0.053977585073969436, 0.0622742478238697, 0.0677508087867934, 0.061209449912793756, 0.06955542655974856, 0.05713387771211309, 0.06955024329829884]}, "mutation_prompt": null}
{"id": "89e892a2-0d24-4e29-b222-cb1d14522515", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Enhancing efficiency by consolidating repeated operations and optimizing data structure utilization.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20438920353475076, 0.219679531440092, 0.21906497672011804, 0.2094388064085928, 0.21596863419291035, 0.24008684531363456, 0.21767731167036075, 0.20909814397486393, 0.2148432505903367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610795629303778, 0.07409698785303953, 0.05271465011633136, 0.06925367492463919, 0.06696952445680149, 0.07090486132715801, 0.07587062138952783, 0.0650149535590725, 0.06471224236764994, 0.049228638373888356, 0.041812072318749616, 0.06796105767443517, 0.046979124780548, 0.050980494811149746, 0.04530097722716886, 0.045695029369587026, 0.061426621216498445, 0.051878027571310104, 0.07968833205917802, 0.07054420872168954, 0.08487090484727655, 0.08439035183444521, 0.07981920813101973, 0.08639989743466536, 0.11167139748991595, 0.08142191975437085, 0.0839395340637753, 0.08735012719200497, 0.10026022625232822, 0.11016992159305905, 0.10713053689165208, 0.13319504066487498, 0.09269132547754577, 0.10347316807472451, 0.10996275141562051, 0.09128146848655871, 0.170828140844846, 0.1578960923347842, 0.16532887481991798, 0.19719622791350944, 0.15947857044858138, 0.11561634895565165, 0.1930287182940308, 0.16561770025312794, 0.19270775013356445, 0.045525738664446314, 0.03980464284919161, 0.036079914009348846, 0.034226533980624474, 0.10136947344082492, 0.02059241411269308, 0.047069913469444, 0.058702917085938, 0.04613318288948409, 0.019609472796867866, 0.001282716948515783, 0.07046810808147819, 0.012466163174071676, 0.023723795001327708, 0.062170516329845826, 0.023707240227070492, 0.05893751156820359, 0.04605776242736115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676878552291088, 0.038390586862164455, 0.05406736989896921, 0.10309055460755678, 0.10516750105851824, 0.061910228939073164, 0.06070129819867054, 0.06025453936325409, 0.049228279099600925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002427922701745633, 0.00893190669716315, 0.012768274742765096, 0.0266653085989208, 0.005751444164856179, 0.00567912397131809, 0.015820612482167373, 0.003148410124477641, 0.004531388662965763, 0.2741742635568084, 0.2794507504120407, 0.22046071563458114, 0.20929868158466225, 0.2170589849485558, 0.2536833250233286, 0.2151248586000155, 0.2187238775321504, 0.2239872838908744, 0.07383532432026874, 0.06742059254175015, 0.05904371003261655, 0.06182288429303684, 0.07328797328990422, 0.07624036838465686, 0.06225451444494079, 0.052606381686177484, 0.06114572106336458, 0.13838786406177028, 0.1328535912264227, 0.1645855524558727, 0.13320219771837927, 0.14553792002756838, 0.14151393915246624, 0.15709464527217298, 0.1308850213283398, 0.15253996959613336, 0.1824103535226418, 0.20111240934011698, 0.18988204930751984, 0.19562674204131358, 0.19011181070770555, 0.17039434050609348, 0.20849530540757477, 0.1927328777783458, 0.17572330694954885, 0.1391729657178814, 0.13730019035584395, 0.16446623316052356, 0.13952803403153868, 0.17178788228853226, 0.1221285831368526, 0.16124813638231172, 0.1329070076056953, 0.1258886465086444, 0.18982794983294826, 0.18888102910657212, 0.19875016845086702, 0.18926743486009678, 0.20260298997877468, 0.17671384286946923, 0.18449234406604553, 0.1817681632571132, 0.19514707581003954, 0.14933112922945257, 0.1605800919214062, 0.1590708815184878, 0.1572654470411542, 0.16507319241442509, 0.1479226956406683, 0.16152066110579522, 0.1640347096835003, 0.1713346532744947, 0.2097772400536031, 0.25092540788611206, 0.18148251359443446, 0.17231283663659802, 0.2607408821639945, 0.21034576854859943, 0.22922543649139693, 0.19804381920573622, 0.22615862082205962, 0.20465526401020406, 0.16102039093831044, 0.1730475115618907, 0.2727174845562844, 0.16231072806153257, 0.23835393970524366, 0.17155155202850347, 0.19844144778069372, 0.17227640976827863, 0.19011405675133353, 0.19240050283901622, 0.17624937086475, 0.18585867036140447, 0.18755042226816743, 0.17616735570250242, 0.18569214940737233, 0.18103259660820437, 0.17956588559045572, 0.06616409500353926, 0.07551023843251548, 0.053977585073969436, 0.0622742478238697, 0.0677508087867934, 0.061209449912793756, 0.06955542655974856, 0.05713387771211309, 0.06955024329829884]}, "mutation_prompt": null}
{"id": "33cdde25-9cef-445b-a9cd-d6c597afbd37", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Enhancing efficiency by consolidating repeated operations and optimizing data structure utilization.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20438920353475076, 0.219679531440092, 0.21906497672011804, 0.2094388064085928, 0.21596863419291035, 0.24008684531363456, 0.21767731167036075, 0.20909814397486393, 0.2148432505903367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610795629303778, 0.07409698785303953, 0.05271465011633136, 0.06925367492463919, 0.06696952445680149, 0.07090486132715801, 0.07587062138952783, 0.0650149535590725, 0.06471224236764994, 0.049228638373888356, 0.041812072318749616, 0.06796105767443517, 0.046979124780548, 0.050980494811149746, 0.04530097722716886, 0.045695029369587026, 0.061426621216498445, 0.051878027571310104, 0.07968833205917802, 0.07054420872168954, 0.08487090484727655, 0.08439035183444521, 0.07981920813101973, 0.08639989743466536, 0.11167139748991595, 0.08142191975437085, 0.0839395340637753, 0.08735012719200497, 0.10026022625232822, 0.11016992159305905, 0.10713053689165208, 0.13319504066487498, 0.09269132547754577, 0.10347316807472451, 0.10996275141562051, 0.09128146848655871, 0.170828140844846, 0.1578960923347842, 0.16532887481991798, 0.19719622791350944, 0.15947857044858138, 0.11561634895565165, 0.1930287182940308, 0.16561770025312794, 0.19270775013356445, 0.045525738664446314, 0.03980464284919161, 0.036079914009348846, 0.034226533980624474, 0.10136947344082492, 0.02059241411269308, 0.047069913469444, 0.058702917085938, 0.04613318288948409, 0.019609472796867866, 0.001282716948515783, 0.07046810808147819, 0.012466163174071676, 0.023723795001327708, 0.062170516329845826, 0.023707240227070492, 0.05893751156820359, 0.04605776242736115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676878552291088, 0.038390586862164455, 0.05406736989896921, 0.10309055460755678, 0.10516750105851824, 0.061910228939073164, 0.06070129819867054, 0.06025453936325409, 0.049228279099600925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002427922701745633, 0.00893190669716315, 0.012768274742765096, 0.0266653085989208, 0.005751444164856179, 0.00567912397131809, 0.015820612482167373, 0.003148410124477641, 0.004531388662965763, 0.2741742635568084, 0.2794507504120407, 0.22046071563458114, 0.20929868158466225, 0.2170589849485558, 0.2536833250233286, 0.2151248586000155, 0.2187238775321504, 0.2239872838908744, 0.07383532432026874, 0.06742059254175015, 0.05904371003261655, 0.06182288429303684, 0.07328797328990422, 0.07624036838465686, 0.06225451444494079, 0.052606381686177484, 0.06114572106336458, 0.13838786406177028, 0.1328535912264227, 0.1645855524558727, 0.13320219771837927, 0.14553792002756838, 0.14151393915246624, 0.15709464527217298, 0.1308850213283398, 0.15253996959613336, 0.1824103535226418, 0.20111240934011698, 0.18988204930751984, 0.19562674204131358, 0.19011181070770555, 0.17039434050609348, 0.20849530540757477, 0.1927328777783458, 0.17572330694954885, 0.1391729657178814, 0.13730019035584395, 0.16446623316052356, 0.13952803403153868, 0.17178788228853226, 0.1221285831368526, 0.16124813638231172, 0.1329070076056953, 0.1258886465086444, 0.18982794983294826, 0.18888102910657212, 0.19875016845086702, 0.18926743486009678, 0.20260298997877468, 0.17671384286946923, 0.18449234406604553, 0.1817681632571132, 0.19514707581003954, 0.14933112922945257, 0.1605800919214062, 0.1590708815184878, 0.1572654470411542, 0.16507319241442509, 0.1479226956406683, 0.16152066110579522, 0.1640347096835003, 0.1713346532744947, 0.2097772400536031, 0.25092540788611206, 0.18148251359443446, 0.17231283663659802, 0.2607408821639945, 0.21034576854859943, 0.22922543649139693, 0.19804381920573622, 0.22615862082205962, 0.20465526401020406, 0.16102039093831044, 0.1730475115618907, 0.2727174845562844, 0.16231072806153257, 0.23835393970524366, 0.17155155202850347, 0.19844144778069372, 0.17227640976827863, 0.19011405675133353, 0.19240050283901622, 0.17624937086475, 0.18585867036140447, 0.18755042226816743, 0.17616735570250242, 0.18569214940737233, 0.18103259660820437, 0.17956588559045572, 0.06616409500353926, 0.07551023843251548, 0.053977585073969436, 0.0622742478238697, 0.0677508087867934, 0.061209449912793756, 0.06955542655974856, 0.05713387771211309, 0.06955024329829884]}, "mutation_prompt": null}
{"id": "ce96a2e2-8fb1-4403-a3f6-303235248b9f", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmOptimized", "description": "Increasing efficiency by optimizing the convergence criterion and leveraging adaptive step sizes.", "configspace": "", "generation": 57, "fitness": 0.10991587995378788, "feedback": "The algorithm EnhancedAdaptiveFireflyAlgorithmOptimized got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20438920353475076, 0.219679531440092, 0.21906497672011804, 0.2094388064085928, 0.21596863419291035, 0.24008684531363456, 0.21767731167036075, 0.20909814397486393, 0.2148432505903367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610795629303778, 0.07409698785303953, 0.05271465011633136, 0.06925367492463919, 0.06696952445680149, 0.07090486132715801, 0.07587062138952783, 0.0650149535590725, 0.06471224236764994, 0.049228638373888356, 0.041812072318749616, 0.06796105767443517, 0.046979124780548, 0.050980494811149746, 0.04530097722716886, 0.045695029369587026, 0.061426621216498445, 0.051878027571310104, 0.07968833205917802, 0.07054420872168954, 0.08487090484727655, 0.08439035183444521, 0.07981920813101973, 0.08639989743466536, 0.11167139748991595, 0.08142191975437085, 0.0839395340637753, 0.08735012719200497, 0.10026022625232822, 0.11016992159305905, 0.10713053689165208, 0.13319504066487498, 0.09269132547754577, 0.10347316807472451, 0.10996275141562051, 0.09128146848655871, 0.170828140844846, 0.1578960923347842, 0.16532887481991798, 0.19719622791350944, 0.15947857044858138, 0.11561634895565165, 0.1930287182940308, 0.16561770025312794, 0.19270775013356445, 0.045525738664446314, 0.03980464284919161, 0.036079914009348846, 0.034226533980624474, 0.10136947344082492, 0.02059241411269308, 0.047069913469444, 0.058702917085938, 0.04613318288948409, 0.019609472796867866, 0.001282716948515783, 0.07046810808147819, 0.012466163174071676, 0.023723795001327708, 0.062170516329845826, 0.023707240227070492, 0.05893751156820359, 0.04605776242736115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676878552291088, 0.038390586862164455, 0.05406736989896921, 0.10309055460755678, 0.10516750105851824, 0.061910228939073164, 0.06070129819867054, 0.06025453936325409, 0.049228279099600925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002427922701745633, 0.00893190669716315, 0.012768274742765096, 0.0266653085989208, 0.005751444164856179, 0.00567912397131809, 0.015820612482167373, 0.003148410124477641, 0.004531388662965763, 0.2741742635568084, 0.2794507504120407, 0.22046071563458114, 0.20929868158466225, 0.2170589849485558, 0.2536833250233286, 0.2151248586000155, 0.2187238775321504, 0.2239872838908744, 0.07383532432026874, 0.06742059254175015, 0.05904371003261655, 0.06182288429303684, 0.07328797328990422, 0.07624036838465686, 0.06225451444494079, 0.052606381686177484, 0.06114572106336458, 0.13838786406177028, 0.1328535912264227, 0.1645855524558727, 0.13320219771837927, 0.14553792002756838, 0.14151393915246624, 0.15709464527217298, 0.1308850213283398, 0.15253996959613336, 0.1824103535226418, 0.20111240934011698, 0.18988204930751984, 0.19562674204131358, 0.19011181070770555, 0.17039434050609348, 0.20849530540757477, 0.1927328777783458, 0.17572330694954885, 0.1391729657178814, 0.13730019035584395, 0.16446623316052356, 0.13952803403153868, 0.17178788228853226, 0.1221285831368526, 0.16124813638231172, 0.1329070076056953, 0.1258886465086444, 0.18982794983294826, 0.18888102910657212, 0.19875016845086702, 0.18926743486009678, 0.20260298997877468, 0.17671384286946923, 0.18449234406604553, 0.1817681632571132, 0.19514707581003954, 0.14933112922945257, 0.1605800919214062, 0.1590708815184878, 0.1572654470411542, 0.16507319241442509, 0.1479226956406683, 0.16152066110579522, 0.1640347096835003, 0.1713346532744947, 0.2097772400536031, 0.25092540788611206, 0.18148251359443446, 0.17231283663659802, 0.2607408821639945, 0.21034576854859943, 0.22922543649139693, 0.19804381920573622, 0.22615862082205962, 0.20465526401020406, 0.16102039093831044, 0.1730475115618907, 0.2727174845562844, 0.16231072806153257, 0.23835393970524366, 0.17155155202850347, 0.19844144778069372, 0.17227640976827863, 0.19011405675133353, 0.19240050283901622, 0.17624937086475, 0.18585867036140447, 0.18755042226816743, 0.17616735570250242, 0.18569214940737233, 0.18103259660820437, 0.17956588559045572, 0.06616409500353926, 0.07551023843251548, 0.053977585073969436, 0.0622742478238697, 0.0677508087867934, 0.061209449912793756, 0.06955542655974856, 0.05713387771211309, 0.06955024329829884]}, "mutation_prompt": null}
{"id": "d74dacaf-1a6e-44a0-b456-456f425b3e31", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Enhancing efficiency by consolidating repeated operations and optimizing data structure utilization.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20438920353475076, 0.219679531440092, 0.21906497672011804, 0.2094388064085928, 0.21596863419291035, 0.24008684531363456, 0.21767731167036075, 0.20909814397486393, 0.2148432505903367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610795629303778, 0.07409698785303953, 0.05271465011633136, 0.06925367492463919, 0.06696952445680149, 0.07090486132715801, 0.07587062138952783, 0.0650149535590725, 0.06471224236764994, 0.049228638373888356, 0.041812072318749616, 0.06796105767443517, 0.046979124780548, 0.050980494811149746, 0.04530097722716886, 0.045695029369587026, 0.061426621216498445, 0.051878027571310104, 0.07968833205917802, 0.07054420872168954, 0.08487090484727655, 0.08439035183444521, 0.07981920813101973, 0.08639989743466536, 0.11167139748991595, 0.08142191975437085, 0.0839395340637753, 0.08735012719200497, 0.10026022625232822, 0.11016992159305905, 0.10713053689165208, 0.13319504066487498, 0.09269132547754577, 0.10347316807472451, 0.10996275141562051, 0.09128146848655871, 0.170828140844846, 0.1578960923347842, 0.16532887481991798, 0.19719622791350944, 0.15947857044858138, 0.11561634895565165, 0.1930287182940308, 0.16561770025312794, 0.19270775013356445, 0.045525738664446314, 0.03980464284919161, 0.036079914009348846, 0.034226533980624474, 0.10136947344082492, 0.02059241411269308, 0.047069913469444, 0.058702917085938, 0.04613318288948409, 0.019609472796867866, 0.001282716948515783, 0.07046810808147819, 0.012466163174071676, 0.023723795001327708, 0.062170516329845826, 0.023707240227070492, 0.05893751156820359, 0.04605776242736115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676878552291088, 0.038390586862164455, 0.05406736989896921, 0.10309055460755678, 0.10516750105851824, 0.061910228939073164, 0.06070129819867054, 0.06025453936325409, 0.049228279099600925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002427922701745633, 0.00893190669716315, 0.012768274742765096, 0.0266653085989208, 0.005751444164856179, 0.00567912397131809, 0.015820612482167373, 0.003148410124477641, 0.004531388662965763, 0.2741742635568084, 0.2794507504120407, 0.22046071563458114, 0.20929868158466225, 0.2170589849485558, 0.2536833250233286, 0.2151248586000155, 0.2187238775321504, 0.2239872838908744, 0.07383532432026874, 0.06742059254175015, 0.05904371003261655, 0.06182288429303684, 0.07328797328990422, 0.07624036838465686, 0.06225451444494079, 0.052606381686177484, 0.06114572106336458, 0.13838786406177028, 0.1328535912264227, 0.1645855524558727, 0.13320219771837927, 0.14553792002756838, 0.14151393915246624, 0.15709464527217298, 0.1308850213283398, 0.15253996959613336, 0.1824103535226418, 0.20111240934011698, 0.18988204930751984, 0.19562674204131358, 0.19011181070770555, 0.17039434050609348, 0.20849530540757477, 0.1927328777783458, 0.17572330694954885, 0.1391729657178814, 0.13730019035584395, 0.16446623316052356, 0.13952803403153868, 0.17178788228853226, 0.1221285831368526, 0.16124813638231172, 0.1329070076056953, 0.1258886465086444, 0.18982794983294826, 0.18888102910657212, 0.19875016845086702, 0.18926743486009678, 0.20260298997877468, 0.17671384286946923, 0.18449234406604553, 0.1817681632571132, 0.19514707581003954, 0.14933112922945257, 0.1605800919214062, 0.1590708815184878, 0.1572654470411542, 0.16507319241442509, 0.1479226956406683, 0.16152066110579522, 0.1640347096835003, 0.1713346532744947, 0.2097772400536031, 0.25092540788611206, 0.18148251359443446, 0.17231283663659802, 0.2607408821639945, 0.21034576854859943, 0.22922543649139693, 0.19804381920573622, 0.22615862082205962, 0.20465526401020406, 0.16102039093831044, 0.1730475115618907, 0.2727174845562844, 0.16231072806153257, 0.23835393970524366, 0.17155155202850347, 0.19844144778069372, 0.17227640976827863, 0.19011405675133353, 0.19240050283901622, 0.17624937086475, 0.18585867036140447, 0.18755042226816743, 0.17616735570250242, 0.18569214940737233, 0.18103259660820437, 0.17956588559045572, 0.06616409500353926, 0.07551023843251548, 0.053977585073969436, 0.0622742478238697, 0.0677508087867934, 0.061209449912793756, 0.06955542655974856, 0.05713387771211309, 0.06955024329829884]}, "mutation_prompt": null}
{"id": "32f61de2-a552-4e5b-b510-add74fbf0380", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Enhancing efficiency by consolidating repeated operations and optimizing data structure utilization.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20438920353475076, 0.219679531440092, 0.21906497672011804, 0.2094388064085928, 0.21596863419291035, 0.24008684531363456, 0.21767731167036075, 0.20909814397486393, 0.2148432505903367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610795629303778, 0.07409698785303953, 0.05271465011633136, 0.06925367492463919, 0.06696952445680149, 0.07090486132715801, 0.07587062138952783, 0.0650149535590725, 0.06471224236764994, 0.049228638373888356, 0.041812072318749616, 0.06796105767443517, 0.046979124780548, 0.050980494811149746, 0.04530097722716886, 0.045695029369587026, 0.061426621216498445, 0.051878027571310104, 0.07968833205917802, 0.07054420872168954, 0.08487090484727655, 0.08439035183444521, 0.07981920813101973, 0.08639989743466536, 0.11167139748991595, 0.08142191975437085, 0.0839395340637753, 0.08735012719200497, 0.10026022625232822, 0.11016992159305905, 0.10713053689165208, 0.13319504066487498, 0.09269132547754577, 0.10347316807472451, 0.10996275141562051, 0.09128146848655871, 0.170828140844846, 0.1578960923347842, 0.16532887481991798, 0.19719622791350944, 0.15947857044858138, 0.11561634895565165, 0.1930287182940308, 0.16561770025312794, 0.19270775013356445, 0.045525738664446314, 0.03980464284919161, 0.036079914009348846, 0.034226533980624474, 0.10136947344082492, 0.02059241411269308, 0.047069913469444, 0.058702917085938, 0.04613318288948409, 0.019609472796867866, 0.001282716948515783, 0.07046810808147819, 0.012466163174071676, 0.023723795001327708, 0.062170516329845826, 0.023707240227070492, 0.05893751156820359, 0.04605776242736115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676878552291088, 0.038390586862164455, 0.05406736989896921, 0.10309055460755678, 0.10516750105851824, 0.061910228939073164, 0.06070129819867054, 0.06025453936325409, 0.049228279099600925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002427922701745633, 0.00893190669716315, 0.012768274742765096, 0.0266653085989208, 0.005751444164856179, 0.00567912397131809, 0.015820612482167373, 0.003148410124477641, 0.004531388662965763, 0.2741742635568084, 0.2794507504120407, 0.22046071563458114, 0.20929868158466225, 0.2170589849485558, 0.2536833250233286, 0.2151248586000155, 0.2187238775321504, 0.2239872838908744, 0.07383532432026874, 0.06742059254175015, 0.05904371003261655, 0.06182288429303684, 0.07328797328990422, 0.07624036838465686, 0.06225451444494079, 0.052606381686177484, 0.06114572106336458, 0.13838786406177028, 0.1328535912264227, 0.1645855524558727, 0.13320219771837927, 0.14553792002756838, 0.14151393915246624, 0.15709464527217298, 0.1308850213283398, 0.15253996959613336, 0.1824103535226418, 0.20111240934011698, 0.18988204930751984, 0.19562674204131358, 0.19011181070770555, 0.17039434050609348, 0.20849530540757477, 0.1927328777783458, 0.17572330694954885, 0.1391729657178814, 0.13730019035584395, 0.16446623316052356, 0.13952803403153868, 0.17178788228853226, 0.1221285831368526, 0.16124813638231172, 0.1329070076056953, 0.1258886465086444, 0.18982794983294826, 0.18888102910657212, 0.19875016845086702, 0.18926743486009678, 0.20260298997877468, 0.17671384286946923, 0.18449234406604553, 0.1817681632571132, 0.19514707581003954, 0.14933112922945257, 0.1605800919214062, 0.1590708815184878, 0.1572654470411542, 0.16507319241442509, 0.1479226956406683, 0.16152066110579522, 0.1640347096835003, 0.1713346532744947, 0.2097772400536031, 0.25092540788611206, 0.18148251359443446, 0.17231283663659802, 0.2607408821639945, 0.21034576854859943, 0.22922543649139693, 0.19804381920573622, 0.22615862082205962, 0.20465526401020406, 0.16102039093831044, 0.1730475115618907, 0.2727174845562844, 0.16231072806153257, 0.23835393970524366, 0.17155155202850347, 0.19844144778069372, 0.17227640976827863, 0.19011405675133353, 0.19240050283901622, 0.17624937086475, 0.18585867036140447, 0.18755042226816743, 0.17616735570250242, 0.18569214940737233, 0.18103259660820437, 0.17956588559045572, 0.06616409500353926, 0.07551023843251548, 0.053977585073969436, 0.0622742478238697, 0.0677508087867934, 0.061209449912793756, 0.06955542655974856, 0.05713387771211309, 0.06955024329829884]}, "mutation_prompt": null}
{"id": "8df5d844-7789-431f-a090-608ae036980b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Enhancing efficiency by consolidating repeated operations and optimizing data structure utilization.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20438920353475076, 0.219679531440092, 0.21906497672011804, 0.2094388064085928, 0.21596863419291035, 0.24008684531363456, 0.21767731167036075, 0.20909814397486393, 0.2148432505903367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610795629303778, 0.07409698785303953, 0.05271465011633136, 0.06925367492463919, 0.06696952445680149, 0.07090486132715801, 0.07587062138952783, 0.0650149535590725, 0.06471224236764994, 0.049228638373888356, 0.041812072318749616, 0.06796105767443517, 0.046979124780548, 0.050980494811149746, 0.04530097722716886, 0.045695029369587026, 0.061426621216498445, 0.051878027571310104, 0.07968833205917802, 0.07054420872168954, 0.08487090484727655, 0.08439035183444521, 0.07981920813101973, 0.08639989743466536, 0.11167139748991595, 0.08142191975437085, 0.0839395340637753, 0.08735012719200497, 0.10026022625232822, 0.11016992159305905, 0.10713053689165208, 0.13319504066487498, 0.09269132547754577, 0.10347316807472451, 0.10996275141562051, 0.09128146848655871, 0.170828140844846, 0.1578960923347842, 0.16532887481991798, 0.19719622791350944, 0.15947857044858138, 0.11561634895565165, 0.1930287182940308, 0.16561770025312794, 0.19270775013356445, 0.045525738664446314, 0.03980464284919161, 0.036079914009348846, 0.034226533980624474, 0.10136947344082492, 0.02059241411269308, 0.047069913469444, 0.058702917085938, 0.04613318288948409, 0.019609472796867866, 0.001282716948515783, 0.07046810808147819, 0.012466163174071676, 0.023723795001327708, 0.062170516329845826, 0.023707240227070492, 0.05893751156820359, 0.04605776242736115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676878552291088, 0.038390586862164455, 0.05406736989896921, 0.10309055460755678, 0.10516750105851824, 0.061910228939073164, 0.06070129819867054, 0.06025453936325409, 0.049228279099600925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002427922701745633, 0.00893190669716315, 0.012768274742765096, 0.0266653085989208, 0.005751444164856179, 0.00567912397131809, 0.015820612482167373, 0.003148410124477641, 0.004531388662965763, 0.2741742635568084, 0.2794507504120407, 0.22046071563458114, 0.20929868158466225, 0.2170589849485558, 0.2536833250233286, 0.2151248586000155, 0.2187238775321504, 0.2239872838908744, 0.07383532432026874, 0.06742059254175015, 0.05904371003261655, 0.06182288429303684, 0.07328797328990422, 0.07624036838465686, 0.06225451444494079, 0.052606381686177484, 0.06114572106336458, 0.13838786406177028, 0.1328535912264227, 0.1645855524558727, 0.13320219771837927, 0.14553792002756838, 0.14151393915246624, 0.15709464527217298, 0.1308850213283398, 0.15253996959613336, 0.1824103535226418, 0.20111240934011698, 0.18988204930751984, 0.19562674204131358, 0.19011181070770555, 0.17039434050609348, 0.20849530540757477, 0.1927328777783458, 0.17572330694954885, 0.1391729657178814, 0.13730019035584395, 0.16446623316052356, 0.13952803403153868, 0.17178788228853226, 0.1221285831368526, 0.16124813638231172, 0.1329070076056953, 0.1258886465086444, 0.18982794983294826, 0.18888102910657212, 0.19875016845086702, 0.18926743486009678, 0.20260298997877468, 0.17671384286946923, 0.18449234406604553, 0.1817681632571132, 0.19514707581003954, 0.14933112922945257, 0.1605800919214062, 0.1590708815184878, 0.1572654470411542, 0.16507319241442509, 0.1479226956406683, 0.16152066110579522, 0.1640347096835003, 0.1713346532744947, 0.2097772400536031, 0.25092540788611206, 0.18148251359443446, 0.17231283663659802, 0.2607408821639945, 0.21034576854859943, 0.22922543649139693, 0.19804381920573622, 0.22615862082205962, 0.20465526401020406, 0.16102039093831044, 0.1730475115618907, 0.2727174845562844, 0.16231072806153257, 0.23835393970524366, 0.17155155202850347, 0.19844144778069372, 0.17227640976827863, 0.19011405675133353, 0.19240050283901622, 0.17624937086475, 0.18585867036140447, 0.18755042226816743, 0.17616735570250242, 0.18569214940737233, 0.18103259660820437, 0.17956588559045572, 0.06616409500353926, 0.07551023843251548, 0.053977585073969436, 0.0622742478238697, 0.0677508087867934, 0.061209449912793756, 0.06955542655974856, 0.05713387771211309, 0.06955024329829884]}, "mutation_prompt": null}
{"id": "5ac6c11f-b259-4754-b2c9-153270a345ae", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Enhancing efficiency by consolidating repeated operations and optimizing data structure utilization.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20438920353475076, 0.219679531440092, 0.21906497672011804, 0.2094388064085928, 0.21596863419291035, 0.24008684531363456, 0.21767731167036075, 0.20909814397486393, 0.2148432505903367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610795629303778, 0.07409698785303953, 0.05271465011633136, 0.06925367492463919, 0.06696952445680149, 0.07090486132715801, 0.07587062138952783, 0.0650149535590725, 0.06471224236764994, 0.049228638373888356, 0.041812072318749616, 0.06796105767443517, 0.046979124780548, 0.050980494811149746, 0.04530097722716886, 0.045695029369587026, 0.061426621216498445, 0.051878027571310104, 0.07968833205917802, 0.07054420872168954, 0.08487090484727655, 0.08439035183444521, 0.07981920813101973, 0.08639989743466536, 0.11167139748991595, 0.08142191975437085, 0.0839395340637753, 0.08735012719200497, 0.10026022625232822, 0.11016992159305905, 0.10713053689165208, 0.13319504066487498, 0.09269132547754577, 0.10347316807472451, 0.10996275141562051, 0.09128146848655871, 0.170828140844846, 0.1578960923347842, 0.16532887481991798, 0.19719622791350944, 0.15947857044858138, 0.11561634895565165, 0.1930287182940308, 0.16561770025312794, 0.19270775013356445, 0.045525738664446314, 0.03980464284919161, 0.036079914009348846, 0.034226533980624474, 0.10136947344082492, 0.02059241411269308, 0.047069913469444, 0.058702917085938, 0.04613318288948409, 0.019609472796867866, 0.001282716948515783, 0.07046810808147819, 0.012466163174071676, 0.023723795001327708, 0.062170516329845826, 0.023707240227070492, 0.05893751156820359, 0.04605776242736115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676878552291088, 0.038390586862164455, 0.05406736989896921, 0.10309055460755678, 0.10516750105851824, 0.061910228939073164, 0.06070129819867054, 0.06025453936325409, 0.049228279099600925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002427922701745633, 0.00893190669716315, 0.012768274742765096, 0.0266653085989208, 0.005751444164856179, 0.00567912397131809, 0.015820612482167373, 0.003148410124477641, 0.004531388662965763, 0.2741742635568084, 0.2794507504120407, 0.22046071563458114, 0.20929868158466225, 0.2170589849485558, 0.2536833250233286, 0.2151248586000155, 0.2187238775321504, 0.2239872838908744, 0.07383532432026874, 0.06742059254175015, 0.05904371003261655, 0.06182288429303684, 0.07328797328990422, 0.07624036838465686, 0.06225451444494079, 0.052606381686177484, 0.06114572106336458, 0.13838786406177028, 0.1328535912264227, 0.1645855524558727, 0.13320219771837927, 0.14553792002756838, 0.14151393915246624, 0.15709464527217298, 0.1308850213283398, 0.15253996959613336, 0.1824103535226418, 0.20111240934011698, 0.18988204930751984, 0.19562674204131358, 0.19011181070770555, 0.17039434050609348, 0.20849530540757477, 0.1927328777783458, 0.17572330694954885, 0.1391729657178814, 0.13730019035584395, 0.16446623316052356, 0.13952803403153868, 0.17178788228853226, 0.1221285831368526, 0.16124813638231172, 0.1329070076056953, 0.1258886465086444, 0.18982794983294826, 0.18888102910657212, 0.19875016845086702, 0.18926743486009678, 0.20260298997877468, 0.17671384286946923, 0.18449234406604553, 0.1817681632571132, 0.19514707581003954, 0.14933112922945257, 0.1605800919214062, 0.1590708815184878, 0.1572654470411542, 0.16507319241442509, 0.1479226956406683, 0.16152066110579522, 0.1640347096835003, 0.1713346532744947, 0.2097772400536031, 0.25092540788611206, 0.18148251359443446, 0.17231283663659802, 0.2607408821639945, 0.21034576854859943, 0.22922543649139693, 0.19804381920573622, 0.22615862082205962, 0.20465526401020406, 0.16102039093831044, 0.1730475115618907, 0.2727174845562844, 0.16231072806153257, 0.23835393970524366, 0.17155155202850347, 0.19844144778069372, 0.17227640976827863, 0.19011405675133353, 0.19240050283901622, 0.17624937086475, 0.18585867036140447, 0.18755042226816743, 0.17616735570250242, 0.18569214940737233, 0.18103259660820437, 0.17956588559045572, 0.06616409500353926, 0.07551023843251548, 0.053977585073969436, 0.0622742478238697, 0.0677508087867934, 0.061209449912793756, 0.06955542655974856, 0.05713387771211309, 0.06955024329829884]}, "mutation_prompt": null}
{"id": "46cafe7f-0ad0-49c2-921f-ea773d763364", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n        self.step_size = 0.1\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, self.step_size, self.dim)  # Adaptive step size\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Introducing adaptive step size based on function landscape to enhance exploration capability.", "configspace": "", "generation": 62, "fitness": 0.10991587995378788, "feedback": "The algorithm EnhancedAdaptiveFireflyAlgorithmImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20438920353475076, 0.219679531440092, 0.21906497672011804, 0.2094388064085928, 0.21596863419291035, 0.24008684531363456, 0.21767731167036075, 0.20909814397486393, 0.2148432505903367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610795629303778, 0.07409698785303953, 0.05271465011633136, 0.06925367492463919, 0.06696952445680149, 0.07090486132715801, 0.07587062138952783, 0.0650149535590725, 0.06471224236764994, 0.049228638373888356, 0.041812072318749616, 0.06796105767443517, 0.046979124780548, 0.050980494811149746, 0.04530097722716886, 0.045695029369587026, 0.061426621216498445, 0.051878027571310104, 0.07968833205917802, 0.07054420872168954, 0.08487090484727655, 0.08439035183444521, 0.07981920813101973, 0.08639989743466536, 0.11167139748991595, 0.08142191975437085, 0.0839395340637753, 0.08735012719200497, 0.10026022625232822, 0.11016992159305905, 0.10713053689165208, 0.13319504066487498, 0.09269132547754577, 0.10347316807472451, 0.10996275141562051, 0.09128146848655871, 0.170828140844846, 0.1578960923347842, 0.16532887481991798, 0.19719622791350944, 0.15947857044858138, 0.11561634895565165, 0.1930287182940308, 0.16561770025312794, 0.19270775013356445, 0.045525738664446314, 0.03980464284919161, 0.036079914009348846, 0.034226533980624474, 0.10136947344082492, 0.02059241411269308, 0.047069913469444, 0.058702917085938, 0.04613318288948409, 0.019609472796867866, 0.001282716948515783, 0.07046810808147819, 0.012466163174071676, 0.023723795001327708, 0.062170516329845826, 0.023707240227070492, 0.05893751156820359, 0.04605776242736115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676878552291088, 0.038390586862164455, 0.05406736989896921, 0.10309055460755678, 0.10516750105851824, 0.061910228939073164, 0.06070129819867054, 0.06025453936325409, 0.049228279099600925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002427922701745633, 0.00893190669716315, 0.012768274742765096, 0.0266653085989208, 0.005751444164856179, 0.00567912397131809, 0.015820612482167373, 0.003148410124477641, 0.004531388662965763, 0.2741742635568084, 0.2794507504120407, 0.22046071563458114, 0.20929868158466225, 0.2170589849485558, 0.2536833250233286, 0.2151248586000155, 0.2187238775321504, 0.2239872838908744, 0.07383532432026874, 0.06742059254175015, 0.05904371003261655, 0.06182288429303684, 0.07328797328990422, 0.07624036838465686, 0.06225451444494079, 0.052606381686177484, 0.06114572106336458, 0.13838786406177028, 0.1328535912264227, 0.1645855524558727, 0.13320219771837927, 0.14553792002756838, 0.14151393915246624, 0.15709464527217298, 0.1308850213283398, 0.15253996959613336, 0.1824103535226418, 0.20111240934011698, 0.18988204930751984, 0.19562674204131358, 0.19011181070770555, 0.17039434050609348, 0.20849530540757477, 0.1927328777783458, 0.17572330694954885, 0.1391729657178814, 0.13730019035584395, 0.16446623316052356, 0.13952803403153868, 0.17178788228853226, 0.1221285831368526, 0.16124813638231172, 0.1329070076056953, 0.1258886465086444, 0.18982794983294826, 0.18888102910657212, 0.19875016845086702, 0.18926743486009678, 0.20260298997877468, 0.17671384286946923, 0.18449234406604553, 0.1817681632571132, 0.19514707581003954, 0.14933112922945257, 0.1605800919214062, 0.1590708815184878, 0.1572654470411542, 0.16507319241442509, 0.1479226956406683, 0.16152066110579522, 0.1640347096835003, 0.1713346532744947, 0.2097772400536031, 0.25092540788611206, 0.18148251359443446, 0.17231283663659802, 0.2607408821639945, 0.21034576854859943, 0.22922543649139693, 0.19804381920573622, 0.22615862082205962, 0.20465526401020406, 0.16102039093831044, 0.1730475115618907, 0.2727174845562844, 0.16231072806153257, 0.23835393970524366, 0.17155155202850347, 0.19844144778069372, 0.17227640976827863, 0.19011405675133353, 0.19240050283901622, 0.17624937086475, 0.18585867036140447, 0.18755042226816743, 0.17616735570250242, 0.18569214940737233, 0.18103259660820437, 0.17956588559045572, 0.06616409500353926, 0.07551023843251548, 0.053977585073969436, 0.0622742478238697, 0.0677508087867934, 0.061209449912793756, 0.06955542655974856, 0.05713387771211309, 0.06955024329829884]}, "mutation_prompt": null}
{"id": "68441266-ac33-4776-9123-09dfcb1e4adf", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Enhancing efficiency by consolidating repeated operations and optimizing data structure utilization.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20438920353475076, 0.219679531440092, 0.21906497672011804, 0.2094388064085928, 0.21596863419291035, 0.24008684531363456, 0.21767731167036075, 0.20909814397486393, 0.2148432505903367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610795629303778, 0.07409698785303953, 0.05271465011633136, 0.06925367492463919, 0.06696952445680149, 0.07090486132715801, 0.07587062138952783, 0.0650149535590725, 0.06471224236764994, 0.049228638373888356, 0.041812072318749616, 0.06796105767443517, 0.046979124780548, 0.050980494811149746, 0.04530097722716886, 0.045695029369587026, 0.061426621216498445, 0.051878027571310104, 0.07968833205917802, 0.07054420872168954, 0.08487090484727655, 0.08439035183444521, 0.07981920813101973, 0.08639989743466536, 0.11167139748991595, 0.08142191975437085, 0.0839395340637753, 0.08735012719200497, 0.10026022625232822, 0.11016992159305905, 0.10713053689165208, 0.13319504066487498, 0.09269132547754577, 0.10347316807472451, 0.10996275141562051, 0.09128146848655871, 0.170828140844846, 0.1578960923347842, 0.16532887481991798, 0.19719622791350944, 0.15947857044858138, 0.11561634895565165, 0.1930287182940308, 0.16561770025312794, 0.19270775013356445, 0.045525738664446314, 0.03980464284919161, 0.036079914009348846, 0.034226533980624474, 0.10136947344082492, 0.02059241411269308, 0.047069913469444, 0.058702917085938, 0.04613318288948409, 0.019609472796867866, 0.001282716948515783, 0.07046810808147819, 0.012466163174071676, 0.023723795001327708, 0.062170516329845826, 0.023707240227070492, 0.05893751156820359, 0.04605776242736115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676878552291088, 0.038390586862164455, 0.05406736989896921, 0.10309055460755678, 0.10516750105851824, 0.061910228939073164, 0.06070129819867054, 0.06025453936325409, 0.049228279099600925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002427922701745633, 0.00893190669716315, 0.012768274742765096, 0.0266653085989208, 0.005751444164856179, 0.00567912397131809, 0.015820612482167373, 0.003148410124477641, 0.004531388662965763, 0.2741742635568084, 0.2794507504120407, 0.22046071563458114, 0.20929868158466225, 0.2170589849485558, 0.2536833250233286, 0.2151248586000155, 0.2187238775321504, 0.2239872838908744, 0.07383532432026874, 0.06742059254175015, 0.05904371003261655, 0.06182288429303684, 0.07328797328990422, 0.07624036838465686, 0.06225451444494079, 0.052606381686177484, 0.06114572106336458, 0.13838786406177028, 0.1328535912264227, 0.1645855524558727, 0.13320219771837927, 0.14553792002756838, 0.14151393915246624, 0.15709464527217298, 0.1308850213283398, 0.15253996959613336, 0.1824103535226418, 0.20111240934011698, 0.18988204930751984, 0.19562674204131358, 0.19011181070770555, 0.17039434050609348, 0.20849530540757477, 0.1927328777783458, 0.17572330694954885, 0.1391729657178814, 0.13730019035584395, 0.16446623316052356, 0.13952803403153868, 0.17178788228853226, 0.1221285831368526, 0.16124813638231172, 0.1329070076056953, 0.1258886465086444, 0.18982794983294826, 0.18888102910657212, 0.19875016845086702, 0.18926743486009678, 0.20260298997877468, 0.17671384286946923, 0.18449234406604553, 0.1817681632571132, 0.19514707581003954, 0.14933112922945257, 0.1605800919214062, 0.1590708815184878, 0.1572654470411542, 0.16507319241442509, 0.1479226956406683, 0.16152066110579522, 0.1640347096835003, 0.1713346532744947, 0.2097772400536031, 0.25092540788611206, 0.18148251359443446, 0.17231283663659802, 0.2607408821639945, 0.21034576854859943, 0.22922543649139693, 0.19804381920573622, 0.22615862082205962, 0.20465526401020406, 0.16102039093831044, 0.1730475115618907, 0.2727174845562844, 0.16231072806153257, 0.23835393970524366, 0.17155155202850347, 0.19844144778069372, 0.17227640976827863, 0.19011405675133353, 0.19240050283901622, 0.17624937086475, 0.18585867036140447, 0.18755042226816743, 0.17616735570250242, 0.18569214940737233, 0.18103259660820437, 0.17956588559045572, 0.06616409500353926, 0.07551023843251548, 0.053977585073969436, 0.0622742478238697, 0.0677508087867934, 0.061209449912793756, 0.06955542655974856, 0.05713387771211309, 0.06955024329829884]}, "mutation_prompt": null}
{"id": "27cd3097-f7bd-49aa-bfae-7b2705e7f0d9", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n        self.step_size_factor = 0.1\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, self.step_size_factor, self.dim)  # Dynamic step size adjustment\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Optimizing convergence speed by dynamically adjusting the step size based on function landscape.", "configspace": "", "generation": 64, "fitness": 0.10991587995378788, "feedback": "The algorithm EnhancedAdaptiveFireflyAlgorithmImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20438920353475076, 0.219679531440092, 0.21906497672011804, 0.2094388064085928, 0.21596863419291035, 0.24008684531363456, 0.21767731167036075, 0.20909814397486393, 0.2148432505903367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610795629303778, 0.07409698785303953, 0.05271465011633136, 0.06925367492463919, 0.06696952445680149, 0.07090486132715801, 0.07587062138952783, 0.0650149535590725, 0.06471224236764994, 0.049228638373888356, 0.041812072318749616, 0.06796105767443517, 0.046979124780548, 0.050980494811149746, 0.04530097722716886, 0.045695029369587026, 0.061426621216498445, 0.051878027571310104, 0.07968833205917802, 0.07054420872168954, 0.08487090484727655, 0.08439035183444521, 0.07981920813101973, 0.08639989743466536, 0.11167139748991595, 0.08142191975437085, 0.0839395340637753, 0.08735012719200497, 0.10026022625232822, 0.11016992159305905, 0.10713053689165208, 0.13319504066487498, 0.09269132547754577, 0.10347316807472451, 0.10996275141562051, 0.09128146848655871, 0.170828140844846, 0.1578960923347842, 0.16532887481991798, 0.19719622791350944, 0.15947857044858138, 0.11561634895565165, 0.1930287182940308, 0.16561770025312794, 0.19270775013356445, 0.045525738664446314, 0.03980464284919161, 0.036079914009348846, 0.034226533980624474, 0.10136947344082492, 0.02059241411269308, 0.047069913469444, 0.058702917085938, 0.04613318288948409, 0.019609472796867866, 0.001282716948515783, 0.07046810808147819, 0.012466163174071676, 0.023723795001327708, 0.062170516329845826, 0.023707240227070492, 0.05893751156820359, 0.04605776242736115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676878552291088, 0.038390586862164455, 0.05406736989896921, 0.10309055460755678, 0.10516750105851824, 0.061910228939073164, 0.06070129819867054, 0.06025453936325409, 0.049228279099600925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002427922701745633, 0.00893190669716315, 0.012768274742765096, 0.0266653085989208, 0.005751444164856179, 0.00567912397131809, 0.015820612482167373, 0.003148410124477641, 0.004531388662965763, 0.2741742635568084, 0.2794507504120407, 0.22046071563458114, 0.20929868158466225, 0.2170589849485558, 0.2536833250233286, 0.2151248586000155, 0.2187238775321504, 0.2239872838908744, 0.07383532432026874, 0.06742059254175015, 0.05904371003261655, 0.06182288429303684, 0.07328797328990422, 0.07624036838465686, 0.06225451444494079, 0.052606381686177484, 0.06114572106336458, 0.13838786406177028, 0.1328535912264227, 0.1645855524558727, 0.13320219771837927, 0.14553792002756838, 0.14151393915246624, 0.15709464527217298, 0.1308850213283398, 0.15253996959613336, 0.1824103535226418, 0.20111240934011698, 0.18988204930751984, 0.19562674204131358, 0.19011181070770555, 0.17039434050609348, 0.20849530540757477, 0.1927328777783458, 0.17572330694954885, 0.1391729657178814, 0.13730019035584395, 0.16446623316052356, 0.13952803403153868, 0.17178788228853226, 0.1221285831368526, 0.16124813638231172, 0.1329070076056953, 0.1258886465086444, 0.18982794983294826, 0.18888102910657212, 0.19875016845086702, 0.18926743486009678, 0.20260298997877468, 0.17671384286946923, 0.18449234406604553, 0.1817681632571132, 0.19514707581003954, 0.14933112922945257, 0.1605800919214062, 0.1590708815184878, 0.1572654470411542, 0.16507319241442509, 0.1479226956406683, 0.16152066110579522, 0.1640347096835003, 0.1713346532744947, 0.2097772400536031, 0.25092540788611206, 0.18148251359443446, 0.17231283663659802, 0.2607408821639945, 0.21034576854859943, 0.22922543649139693, 0.19804381920573622, 0.22615862082205962, 0.20465526401020406, 0.16102039093831044, 0.1730475115618907, 0.2727174845562844, 0.16231072806153257, 0.23835393970524366, 0.17155155202850347, 0.19844144778069372, 0.17227640976827863, 0.19011405675133353, 0.19240050283901622, 0.17624937086475, 0.18585867036140447, 0.18755042226816743, 0.17616735570250242, 0.18569214940737233, 0.18103259660820437, 0.17956588559045572, 0.06616409500353926, 0.07551023843251548, 0.053977585073969436, 0.0622742478238697, 0.0677508087867934, 0.061209449912793756, 0.06955542655974856, 0.05713387771211309, 0.06955024329829884]}, "mutation_prompt": null}
{"id": "0c8adbb7-f45f-4156-8041-048492a4756a", "solution": "import numpy as np\n\nclass DynamicStepFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.step_std = 0.1\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, self.step_std, self.dim)  # Dynamic step size adaptation\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "DynamicStepFireflyAlgorithmImproved", "description": "Implementing dynamic step size adaptation to enhance exploration and exploitation balance.", "configspace": "", "generation": 65, "fitness": 0.10991587995378788, "feedback": "The algorithm DynamicStepFireflyAlgorithmImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20438920353475076, 0.219679531440092, 0.21906497672011804, 0.2094388064085928, 0.21596863419291035, 0.24008684531363456, 0.21767731167036075, 0.20909814397486393, 0.2148432505903367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610795629303778, 0.07409698785303953, 0.05271465011633136, 0.06925367492463919, 0.06696952445680149, 0.07090486132715801, 0.07587062138952783, 0.0650149535590725, 0.06471224236764994, 0.049228638373888356, 0.041812072318749616, 0.06796105767443517, 0.046979124780548, 0.050980494811149746, 0.04530097722716886, 0.045695029369587026, 0.061426621216498445, 0.051878027571310104, 0.07968833205917802, 0.07054420872168954, 0.08487090484727655, 0.08439035183444521, 0.07981920813101973, 0.08639989743466536, 0.11167139748991595, 0.08142191975437085, 0.0839395340637753, 0.08735012719200497, 0.10026022625232822, 0.11016992159305905, 0.10713053689165208, 0.13319504066487498, 0.09269132547754577, 0.10347316807472451, 0.10996275141562051, 0.09128146848655871, 0.170828140844846, 0.1578960923347842, 0.16532887481991798, 0.19719622791350944, 0.15947857044858138, 0.11561634895565165, 0.1930287182940308, 0.16561770025312794, 0.19270775013356445, 0.045525738664446314, 0.03980464284919161, 0.036079914009348846, 0.034226533980624474, 0.10136947344082492, 0.02059241411269308, 0.047069913469444, 0.058702917085938, 0.04613318288948409, 0.019609472796867866, 0.001282716948515783, 0.07046810808147819, 0.012466163174071676, 0.023723795001327708, 0.062170516329845826, 0.023707240227070492, 0.05893751156820359, 0.04605776242736115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676878552291088, 0.038390586862164455, 0.05406736989896921, 0.10309055460755678, 0.10516750105851824, 0.061910228939073164, 0.06070129819867054, 0.06025453936325409, 0.049228279099600925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002427922701745633, 0.00893190669716315, 0.012768274742765096, 0.0266653085989208, 0.005751444164856179, 0.00567912397131809, 0.015820612482167373, 0.003148410124477641, 0.004531388662965763, 0.2741742635568084, 0.2794507504120407, 0.22046071563458114, 0.20929868158466225, 0.2170589849485558, 0.2536833250233286, 0.2151248586000155, 0.2187238775321504, 0.2239872838908744, 0.07383532432026874, 0.06742059254175015, 0.05904371003261655, 0.06182288429303684, 0.07328797328990422, 0.07624036838465686, 0.06225451444494079, 0.052606381686177484, 0.06114572106336458, 0.13838786406177028, 0.1328535912264227, 0.1645855524558727, 0.13320219771837927, 0.14553792002756838, 0.14151393915246624, 0.15709464527217298, 0.1308850213283398, 0.15253996959613336, 0.1824103535226418, 0.20111240934011698, 0.18988204930751984, 0.19562674204131358, 0.19011181070770555, 0.17039434050609348, 0.20849530540757477, 0.1927328777783458, 0.17572330694954885, 0.1391729657178814, 0.13730019035584395, 0.16446623316052356, 0.13952803403153868, 0.17178788228853226, 0.1221285831368526, 0.16124813638231172, 0.1329070076056953, 0.1258886465086444, 0.18982794983294826, 0.18888102910657212, 0.19875016845086702, 0.18926743486009678, 0.20260298997877468, 0.17671384286946923, 0.18449234406604553, 0.1817681632571132, 0.19514707581003954, 0.14933112922945257, 0.1605800919214062, 0.1590708815184878, 0.1572654470411542, 0.16507319241442509, 0.1479226956406683, 0.16152066110579522, 0.1640347096835003, 0.1713346532744947, 0.2097772400536031, 0.25092540788611206, 0.18148251359443446, 0.17231283663659802, 0.2607408821639945, 0.21034576854859943, 0.22922543649139693, 0.19804381920573622, 0.22615862082205962, 0.20465526401020406, 0.16102039093831044, 0.1730475115618907, 0.2727174845562844, 0.16231072806153257, 0.23835393970524366, 0.17155155202850347, 0.19844144778069372, 0.17227640976827863, 0.19011405675133353, 0.19240050283901622, 0.17624937086475, 0.18585867036140447, 0.18755042226816743, 0.17616735570250242, 0.18569214940737233, 0.18103259660820437, 0.17956588559045572, 0.06616409500353926, 0.07551023843251548, 0.053977585073969436, 0.0622742478238697, 0.0677508087867934, 0.061209449912793756, 0.06955542655974856, 0.05713387771211309, 0.06955024329829884]}, "mutation_prompt": null}
{"id": "d4b2ab6f-d818-4d6e-92d4-f44eb820a4a4", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Enhancing efficiency by consolidating repeated operations and optimizing data structure utilization.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20438920353475076, 0.219679531440092, 0.21906497672011804, 0.2094388064085928, 0.21596863419291035, 0.24008684531363456, 0.21767731167036075, 0.20909814397486393, 0.2148432505903367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610795629303778, 0.07409698785303953, 0.05271465011633136, 0.06925367492463919, 0.06696952445680149, 0.07090486132715801, 0.07587062138952783, 0.0650149535590725, 0.06471224236764994, 0.049228638373888356, 0.041812072318749616, 0.06796105767443517, 0.046979124780548, 0.050980494811149746, 0.04530097722716886, 0.045695029369587026, 0.061426621216498445, 0.051878027571310104, 0.07968833205917802, 0.07054420872168954, 0.08487090484727655, 0.08439035183444521, 0.07981920813101973, 0.08639989743466536, 0.11167139748991595, 0.08142191975437085, 0.0839395340637753, 0.08735012719200497, 0.10026022625232822, 0.11016992159305905, 0.10713053689165208, 0.13319504066487498, 0.09269132547754577, 0.10347316807472451, 0.10996275141562051, 0.09128146848655871, 0.170828140844846, 0.1578960923347842, 0.16532887481991798, 0.19719622791350944, 0.15947857044858138, 0.11561634895565165, 0.1930287182940308, 0.16561770025312794, 0.19270775013356445, 0.045525738664446314, 0.03980464284919161, 0.036079914009348846, 0.034226533980624474, 0.10136947344082492, 0.02059241411269308, 0.047069913469444, 0.058702917085938, 0.04613318288948409, 0.019609472796867866, 0.001282716948515783, 0.07046810808147819, 0.012466163174071676, 0.023723795001327708, 0.062170516329845826, 0.023707240227070492, 0.05893751156820359, 0.04605776242736115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676878552291088, 0.038390586862164455, 0.05406736989896921, 0.10309055460755678, 0.10516750105851824, 0.061910228939073164, 0.06070129819867054, 0.06025453936325409, 0.049228279099600925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002427922701745633, 0.00893190669716315, 0.012768274742765096, 0.0266653085989208, 0.005751444164856179, 0.00567912397131809, 0.015820612482167373, 0.003148410124477641, 0.004531388662965763, 0.2741742635568084, 0.2794507504120407, 0.22046071563458114, 0.20929868158466225, 0.2170589849485558, 0.2536833250233286, 0.2151248586000155, 0.2187238775321504, 0.2239872838908744, 0.07383532432026874, 0.06742059254175015, 0.05904371003261655, 0.06182288429303684, 0.07328797328990422, 0.07624036838465686, 0.06225451444494079, 0.052606381686177484, 0.06114572106336458, 0.13838786406177028, 0.1328535912264227, 0.1645855524558727, 0.13320219771837927, 0.14553792002756838, 0.14151393915246624, 0.15709464527217298, 0.1308850213283398, 0.15253996959613336, 0.1824103535226418, 0.20111240934011698, 0.18988204930751984, 0.19562674204131358, 0.19011181070770555, 0.17039434050609348, 0.20849530540757477, 0.1927328777783458, 0.17572330694954885, 0.1391729657178814, 0.13730019035584395, 0.16446623316052356, 0.13952803403153868, 0.17178788228853226, 0.1221285831368526, 0.16124813638231172, 0.1329070076056953, 0.1258886465086444, 0.18982794983294826, 0.18888102910657212, 0.19875016845086702, 0.18926743486009678, 0.20260298997877468, 0.17671384286946923, 0.18449234406604553, 0.1817681632571132, 0.19514707581003954, 0.14933112922945257, 0.1605800919214062, 0.1590708815184878, 0.1572654470411542, 0.16507319241442509, 0.1479226956406683, 0.16152066110579522, 0.1640347096835003, 0.1713346532744947, 0.2097772400536031, 0.25092540788611206, 0.18148251359443446, 0.17231283663659802, 0.2607408821639945, 0.21034576854859943, 0.22922543649139693, 0.19804381920573622, 0.22615862082205962, 0.20465526401020406, 0.16102039093831044, 0.1730475115618907, 0.2727174845562844, 0.16231072806153257, 0.23835393970524366, 0.17155155202850347, 0.19844144778069372, 0.17227640976827863, 0.19011405675133353, 0.19240050283901622, 0.17624937086475, 0.18585867036140447, 0.18755042226816743, 0.17616735570250242, 0.18569214940737233, 0.18103259660820437, 0.17956588559045572, 0.06616409500353926, 0.07551023843251548, 0.053977585073969436, 0.0622742478238697, 0.0677508087867934, 0.061209449912793756, 0.06955542655974856, 0.05713387771211309, 0.06955024329829884]}, "mutation_prompt": null}
{"id": "83c222ee-d541-454f-8716-73266642a10c", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Enhancing efficiency by consolidating repeated operations and optimizing data structure utilization.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20438920353475076, 0.219679531440092, 0.21906497672011804, 0.2094388064085928, 0.21596863419291035, 0.24008684531363456, 0.21767731167036075, 0.20909814397486393, 0.2148432505903367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610795629303778, 0.07409698785303953, 0.05271465011633136, 0.06925367492463919, 0.06696952445680149, 0.07090486132715801, 0.07587062138952783, 0.0650149535590725, 0.06471224236764994, 0.049228638373888356, 0.041812072318749616, 0.06796105767443517, 0.046979124780548, 0.050980494811149746, 0.04530097722716886, 0.045695029369587026, 0.061426621216498445, 0.051878027571310104, 0.07968833205917802, 0.07054420872168954, 0.08487090484727655, 0.08439035183444521, 0.07981920813101973, 0.08639989743466536, 0.11167139748991595, 0.08142191975437085, 0.0839395340637753, 0.08735012719200497, 0.10026022625232822, 0.11016992159305905, 0.10713053689165208, 0.13319504066487498, 0.09269132547754577, 0.10347316807472451, 0.10996275141562051, 0.09128146848655871, 0.170828140844846, 0.1578960923347842, 0.16532887481991798, 0.19719622791350944, 0.15947857044858138, 0.11561634895565165, 0.1930287182940308, 0.16561770025312794, 0.19270775013356445, 0.045525738664446314, 0.03980464284919161, 0.036079914009348846, 0.034226533980624474, 0.10136947344082492, 0.02059241411269308, 0.047069913469444, 0.058702917085938, 0.04613318288948409, 0.019609472796867866, 0.001282716948515783, 0.07046810808147819, 0.012466163174071676, 0.023723795001327708, 0.062170516329845826, 0.023707240227070492, 0.05893751156820359, 0.04605776242736115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676878552291088, 0.038390586862164455, 0.05406736989896921, 0.10309055460755678, 0.10516750105851824, 0.061910228939073164, 0.06070129819867054, 0.06025453936325409, 0.049228279099600925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002427922701745633, 0.00893190669716315, 0.012768274742765096, 0.0266653085989208, 0.005751444164856179, 0.00567912397131809, 0.015820612482167373, 0.003148410124477641, 0.004531388662965763, 0.2741742635568084, 0.2794507504120407, 0.22046071563458114, 0.20929868158466225, 0.2170589849485558, 0.2536833250233286, 0.2151248586000155, 0.2187238775321504, 0.2239872838908744, 0.07383532432026874, 0.06742059254175015, 0.05904371003261655, 0.06182288429303684, 0.07328797328990422, 0.07624036838465686, 0.06225451444494079, 0.052606381686177484, 0.06114572106336458, 0.13838786406177028, 0.1328535912264227, 0.1645855524558727, 0.13320219771837927, 0.14553792002756838, 0.14151393915246624, 0.15709464527217298, 0.1308850213283398, 0.15253996959613336, 0.1824103535226418, 0.20111240934011698, 0.18988204930751984, 0.19562674204131358, 0.19011181070770555, 0.17039434050609348, 0.20849530540757477, 0.1927328777783458, 0.17572330694954885, 0.1391729657178814, 0.13730019035584395, 0.16446623316052356, 0.13952803403153868, 0.17178788228853226, 0.1221285831368526, 0.16124813638231172, 0.1329070076056953, 0.1258886465086444, 0.18982794983294826, 0.18888102910657212, 0.19875016845086702, 0.18926743486009678, 0.20260298997877468, 0.17671384286946923, 0.18449234406604553, 0.1817681632571132, 0.19514707581003954, 0.14933112922945257, 0.1605800919214062, 0.1590708815184878, 0.1572654470411542, 0.16507319241442509, 0.1479226956406683, 0.16152066110579522, 0.1640347096835003, 0.1713346532744947, 0.2097772400536031, 0.25092540788611206, 0.18148251359443446, 0.17231283663659802, 0.2607408821639945, 0.21034576854859943, 0.22922543649139693, 0.19804381920573622, 0.22615862082205962, 0.20465526401020406, 0.16102039093831044, 0.1730475115618907, 0.2727174845562844, 0.16231072806153257, 0.23835393970524366, 0.17155155202850347, 0.19844144778069372, 0.17227640976827863, 0.19011405675133353, 0.19240050283901622, 0.17624937086475, 0.18585867036140447, 0.18755042226816743, 0.17616735570250242, 0.18569214940737233, 0.18103259660820437, 0.17956588559045572, 0.06616409500353926, 0.07551023843251548, 0.053977585073969436, 0.0622742478238697, 0.0677508087867934, 0.061209449912793756, 0.06955542655974856, 0.05713387771211309, 0.06955024329829884]}, "mutation_prompt": null}
{"id": "f43cb5de-cbcf-40dc-b4b3-ce2fa1c87309", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Enhancing efficiency by consolidating repeated operations and optimizing data structure utilization.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20438920353475076, 0.219679531440092, 0.21906497672011804, 0.2094388064085928, 0.21596863419291035, 0.24008684531363456, 0.21767731167036075, 0.20909814397486393, 0.2148432505903367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610795629303778, 0.07409698785303953, 0.05271465011633136, 0.06925367492463919, 0.06696952445680149, 0.07090486132715801, 0.07587062138952783, 0.0650149535590725, 0.06471224236764994, 0.049228638373888356, 0.041812072318749616, 0.06796105767443517, 0.046979124780548, 0.050980494811149746, 0.04530097722716886, 0.045695029369587026, 0.061426621216498445, 0.051878027571310104, 0.07968833205917802, 0.07054420872168954, 0.08487090484727655, 0.08439035183444521, 0.07981920813101973, 0.08639989743466536, 0.11167139748991595, 0.08142191975437085, 0.0839395340637753, 0.08735012719200497, 0.10026022625232822, 0.11016992159305905, 0.10713053689165208, 0.13319504066487498, 0.09269132547754577, 0.10347316807472451, 0.10996275141562051, 0.09128146848655871, 0.170828140844846, 0.1578960923347842, 0.16532887481991798, 0.19719622791350944, 0.15947857044858138, 0.11561634895565165, 0.1930287182940308, 0.16561770025312794, 0.19270775013356445, 0.045525738664446314, 0.03980464284919161, 0.036079914009348846, 0.034226533980624474, 0.10136947344082492, 0.02059241411269308, 0.047069913469444, 0.058702917085938, 0.04613318288948409, 0.019609472796867866, 0.001282716948515783, 0.07046810808147819, 0.012466163174071676, 0.023723795001327708, 0.062170516329845826, 0.023707240227070492, 0.05893751156820359, 0.04605776242736115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676878552291088, 0.038390586862164455, 0.05406736989896921, 0.10309055460755678, 0.10516750105851824, 0.061910228939073164, 0.06070129819867054, 0.06025453936325409, 0.049228279099600925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002427922701745633, 0.00893190669716315, 0.012768274742765096, 0.0266653085989208, 0.005751444164856179, 0.00567912397131809, 0.015820612482167373, 0.003148410124477641, 0.004531388662965763, 0.2741742635568084, 0.2794507504120407, 0.22046071563458114, 0.20929868158466225, 0.2170589849485558, 0.2536833250233286, 0.2151248586000155, 0.2187238775321504, 0.2239872838908744, 0.07383532432026874, 0.06742059254175015, 0.05904371003261655, 0.06182288429303684, 0.07328797328990422, 0.07624036838465686, 0.06225451444494079, 0.052606381686177484, 0.06114572106336458, 0.13838786406177028, 0.1328535912264227, 0.1645855524558727, 0.13320219771837927, 0.14553792002756838, 0.14151393915246624, 0.15709464527217298, 0.1308850213283398, 0.15253996959613336, 0.1824103535226418, 0.20111240934011698, 0.18988204930751984, 0.19562674204131358, 0.19011181070770555, 0.17039434050609348, 0.20849530540757477, 0.1927328777783458, 0.17572330694954885, 0.1391729657178814, 0.13730019035584395, 0.16446623316052356, 0.13952803403153868, 0.17178788228853226, 0.1221285831368526, 0.16124813638231172, 0.1329070076056953, 0.1258886465086444, 0.18982794983294826, 0.18888102910657212, 0.19875016845086702, 0.18926743486009678, 0.20260298997877468, 0.17671384286946923, 0.18449234406604553, 0.1817681632571132, 0.19514707581003954, 0.14933112922945257, 0.1605800919214062, 0.1590708815184878, 0.1572654470411542, 0.16507319241442509, 0.1479226956406683, 0.16152066110579522, 0.1640347096835003, 0.1713346532744947, 0.2097772400536031, 0.25092540788611206, 0.18148251359443446, 0.17231283663659802, 0.2607408821639945, 0.21034576854859943, 0.22922543649139693, 0.19804381920573622, 0.22615862082205962, 0.20465526401020406, 0.16102039093831044, 0.1730475115618907, 0.2727174845562844, 0.16231072806153257, 0.23835393970524366, 0.17155155202850347, 0.19844144778069372, 0.17227640976827863, 0.19011405675133353, 0.19240050283901622, 0.17624937086475, 0.18585867036140447, 0.18755042226816743, 0.17616735570250242, 0.18569214940737233, 0.18103259660820437, 0.17956588559045572, 0.06616409500353926, 0.07551023843251548, 0.053977585073969436, 0.0622742478238697, 0.0677508087867934, 0.061209449912793756, 0.06955542655974856, 0.05713387771211309, 0.06955024329829884]}, "mutation_prompt": null}
{"id": "d464b866-bad7-4bfb-b3f5-08ba7bedff06", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Enhancing efficiency by consolidating repeated operations and optimizing data structure utilization.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20438920353475076, 0.219679531440092, 0.21906497672011804, 0.2094388064085928, 0.21596863419291035, 0.24008684531363456, 0.21767731167036075, 0.20909814397486393, 0.2148432505903367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610795629303778, 0.07409698785303953, 0.05271465011633136, 0.06925367492463919, 0.06696952445680149, 0.07090486132715801, 0.07587062138952783, 0.0650149535590725, 0.06471224236764994, 0.049228638373888356, 0.041812072318749616, 0.06796105767443517, 0.046979124780548, 0.050980494811149746, 0.04530097722716886, 0.045695029369587026, 0.061426621216498445, 0.051878027571310104, 0.07968833205917802, 0.07054420872168954, 0.08487090484727655, 0.08439035183444521, 0.07981920813101973, 0.08639989743466536, 0.11167139748991595, 0.08142191975437085, 0.0839395340637753, 0.08735012719200497, 0.10026022625232822, 0.11016992159305905, 0.10713053689165208, 0.13319504066487498, 0.09269132547754577, 0.10347316807472451, 0.10996275141562051, 0.09128146848655871, 0.170828140844846, 0.1578960923347842, 0.16532887481991798, 0.19719622791350944, 0.15947857044858138, 0.11561634895565165, 0.1930287182940308, 0.16561770025312794, 0.19270775013356445, 0.045525738664446314, 0.03980464284919161, 0.036079914009348846, 0.034226533980624474, 0.10136947344082492, 0.02059241411269308, 0.047069913469444, 0.058702917085938, 0.04613318288948409, 0.019609472796867866, 0.001282716948515783, 0.07046810808147819, 0.012466163174071676, 0.023723795001327708, 0.062170516329845826, 0.023707240227070492, 0.05893751156820359, 0.04605776242736115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676878552291088, 0.038390586862164455, 0.05406736989896921, 0.10309055460755678, 0.10516750105851824, 0.061910228939073164, 0.06070129819867054, 0.06025453936325409, 0.049228279099600925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002427922701745633, 0.00893190669716315, 0.012768274742765096, 0.0266653085989208, 0.005751444164856179, 0.00567912397131809, 0.015820612482167373, 0.003148410124477641, 0.004531388662965763, 0.2741742635568084, 0.2794507504120407, 0.22046071563458114, 0.20929868158466225, 0.2170589849485558, 0.2536833250233286, 0.2151248586000155, 0.2187238775321504, 0.2239872838908744, 0.07383532432026874, 0.06742059254175015, 0.05904371003261655, 0.06182288429303684, 0.07328797328990422, 0.07624036838465686, 0.06225451444494079, 0.052606381686177484, 0.06114572106336458, 0.13838786406177028, 0.1328535912264227, 0.1645855524558727, 0.13320219771837927, 0.14553792002756838, 0.14151393915246624, 0.15709464527217298, 0.1308850213283398, 0.15253996959613336, 0.1824103535226418, 0.20111240934011698, 0.18988204930751984, 0.19562674204131358, 0.19011181070770555, 0.17039434050609348, 0.20849530540757477, 0.1927328777783458, 0.17572330694954885, 0.1391729657178814, 0.13730019035584395, 0.16446623316052356, 0.13952803403153868, 0.17178788228853226, 0.1221285831368526, 0.16124813638231172, 0.1329070076056953, 0.1258886465086444, 0.18982794983294826, 0.18888102910657212, 0.19875016845086702, 0.18926743486009678, 0.20260298997877468, 0.17671384286946923, 0.18449234406604553, 0.1817681632571132, 0.19514707581003954, 0.14933112922945257, 0.1605800919214062, 0.1590708815184878, 0.1572654470411542, 0.16507319241442509, 0.1479226956406683, 0.16152066110579522, 0.1640347096835003, 0.1713346532744947, 0.2097772400536031, 0.25092540788611206, 0.18148251359443446, 0.17231283663659802, 0.2607408821639945, 0.21034576854859943, 0.22922543649139693, 0.19804381920573622, 0.22615862082205962, 0.20465526401020406, 0.16102039093831044, 0.1730475115618907, 0.2727174845562844, 0.16231072806153257, 0.23835393970524366, 0.17155155202850347, 0.19844144778069372, 0.17227640976827863, 0.19011405675133353, 0.19240050283901622, 0.17624937086475, 0.18585867036140447, 0.18755042226816743, 0.17616735570250242, 0.18569214940737233, 0.18103259660820437, 0.17956588559045572, 0.06616409500353926, 0.07551023843251548, 0.053977585073969436, 0.0622742478238697, 0.0677508087867934, 0.061209449912793756, 0.06955542655974856, 0.05713387771211309, 0.06955024329829884]}, "mutation_prompt": null}
{"id": "375439bc-66a9-4a26-a3ac-7a25aa0cbe47", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Enhancing efficiency by consolidating repeated operations and optimizing data structure utilization.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20438920353475076, 0.219679531440092, 0.21906497672011804, 0.2094388064085928, 0.21596863419291035, 0.24008684531363456, 0.21767731167036075, 0.20909814397486393, 0.2148432505903367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610795629303778, 0.07409698785303953, 0.05271465011633136, 0.06925367492463919, 0.06696952445680149, 0.07090486132715801, 0.07587062138952783, 0.0650149535590725, 0.06471224236764994, 0.049228638373888356, 0.041812072318749616, 0.06796105767443517, 0.046979124780548, 0.050980494811149746, 0.04530097722716886, 0.045695029369587026, 0.061426621216498445, 0.051878027571310104, 0.07968833205917802, 0.07054420872168954, 0.08487090484727655, 0.08439035183444521, 0.07981920813101973, 0.08639989743466536, 0.11167139748991595, 0.08142191975437085, 0.0839395340637753, 0.08735012719200497, 0.10026022625232822, 0.11016992159305905, 0.10713053689165208, 0.13319504066487498, 0.09269132547754577, 0.10347316807472451, 0.10996275141562051, 0.09128146848655871, 0.170828140844846, 0.1578960923347842, 0.16532887481991798, 0.19719622791350944, 0.15947857044858138, 0.11561634895565165, 0.1930287182940308, 0.16561770025312794, 0.19270775013356445, 0.045525738664446314, 0.03980464284919161, 0.036079914009348846, 0.034226533980624474, 0.10136947344082492, 0.02059241411269308, 0.047069913469444, 0.058702917085938, 0.04613318288948409, 0.019609472796867866, 0.001282716948515783, 0.07046810808147819, 0.012466163174071676, 0.023723795001327708, 0.062170516329845826, 0.023707240227070492, 0.05893751156820359, 0.04605776242736115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676878552291088, 0.038390586862164455, 0.05406736989896921, 0.10309055460755678, 0.10516750105851824, 0.061910228939073164, 0.06070129819867054, 0.06025453936325409, 0.049228279099600925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002427922701745633, 0.00893190669716315, 0.012768274742765096, 0.0266653085989208, 0.005751444164856179, 0.00567912397131809, 0.015820612482167373, 0.003148410124477641, 0.004531388662965763, 0.2741742635568084, 0.2794507504120407, 0.22046071563458114, 0.20929868158466225, 0.2170589849485558, 0.2536833250233286, 0.2151248586000155, 0.2187238775321504, 0.2239872838908744, 0.07383532432026874, 0.06742059254175015, 0.05904371003261655, 0.06182288429303684, 0.07328797328990422, 0.07624036838465686, 0.06225451444494079, 0.052606381686177484, 0.06114572106336458, 0.13838786406177028, 0.1328535912264227, 0.1645855524558727, 0.13320219771837927, 0.14553792002756838, 0.14151393915246624, 0.15709464527217298, 0.1308850213283398, 0.15253996959613336, 0.1824103535226418, 0.20111240934011698, 0.18988204930751984, 0.19562674204131358, 0.19011181070770555, 0.17039434050609348, 0.20849530540757477, 0.1927328777783458, 0.17572330694954885, 0.1391729657178814, 0.13730019035584395, 0.16446623316052356, 0.13952803403153868, 0.17178788228853226, 0.1221285831368526, 0.16124813638231172, 0.1329070076056953, 0.1258886465086444, 0.18982794983294826, 0.18888102910657212, 0.19875016845086702, 0.18926743486009678, 0.20260298997877468, 0.17671384286946923, 0.18449234406604553, 0.1817681632571132, 0.19514707581003954, 0.14933112922945257, 0.1605800919214062, 0.1590708815184878, 0.1572654470411542, 0.16507319241442509, 0.1479226956406683, 0.16152066110579522, 0.1640347096835003, 0.1713346532744947, 0.2097772400536031, 0.25092540788611206, 0.18148251359443446, 0.17231283663659802, 0.2607408821639945, 0.21034576854859943, 0.22922543649139693, 0.19804381920573622, 0.22615862082205962, 0.20465526401020406, 0.16102039093831044, 0.1730475115618907, 0.2727174845562844, 0.16231072806153257, 0.23835393970524366, 0.17155155202850347, 0.19844144778069372, 0.17227640976827863, 0.19011405675133353, 0.19240050283901622, 0.17624937086475, 0.18585867036140447, 0.18755042226816743, 0.17616735570250242, 0.18569214940737233, 0.18103259660820437, 0.17956588559045572, 0.06616409500353926, 0.07551023843251548, 0.053977585073969436, 0.0622742478238697, 0.0677508087867934, 0.061209449912793756, 0.06955542655974856, 0.05713387771211309, 0.06955024329829884]}, "mutation_prompt": null}
{"id": "6c9bde3c-b27e-43fe-84cd-d9fadbb4abed", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Enhancing efficiency by consolidating repeated operations and optimizing data structure utilization.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20438920353475076, 0.219679531440092, 0.21906497672011804, 0.2094388064085928, 0.21596863419291035, 0.24008684531363456, 0.21767731167036075, 0.20909814397486393, 0.2148432505903367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610795629303778, 0.07409698785303953, 0.05271465011633136, 0.06925367492463919, 0.06696952445680149, 0.07090486132715801, 0.07587062138952783, 0.0650149535590725, 0.06471224236764994, 0.049228638373888356, 0.041812072318749616, 0.06796105767443517, 0.046979124780548, 0.050980494811149746, 0.04530097722716886, 0.045695029369587026, 0.061426621216498445, 0.051878027571310104, 0.07968833205917802, 0.07054420872168954, 0.08487090484727655, 0.08439035183444521, 0.07981920813101973, 0.08639989743466536, 0.11167139748991595, 0.08142191975437085, 0.0839395340637753, 0.08735012719200497, 0.10026022625232822, 0.11016992159305905, 0.10713053689165208, 0.13319504066487498, 0.09269132547754577, 0.10347316807472451, 0.10996275141562051, 0.09128146848655871, 0.170828140844846, 0.1578960923347842, 0.16532887481991798, 0.19719622791350944, 0.15947857044858138, 0.11561634895565165, 0.1930287182940308, 0.16561770025312794, 0.19270775013356445, 0.045525738664446314, 0.03980464284919161, 0.036079914009348846, 0.034226533980624474, 0.10136947344082492, 0.02059241411269308, 0.047069913469444, 0.058702917085938, 0.04613318288948409, 0.019609472796867866, 0.001282716948515783, 0.07046810808147819, 0.012466163174071676, 0.023723795001327708, 0.062170516329845826, 0.023707240227070492, 0.05893751156820359, 0.04605776242736115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676878552291088, 0.038390586862164455, 0.05406736989896921, 0.10309055460755678, 0.10516750105851824, 0.061910228939073164, 0.06070129819867054, 0.06025453936325409, 0.049228279099600925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002427922701745633, 0.00893190669716315, 0.012768274742765096, 0.0266653085989208, 0.005751444164856179, 0.00567912397131809, 0.015820612482167373, 0.003148410124477641, 0.004531388662965763, 0.2741742635568084, 0.2794507504120407, 0.22046071563458114, 0.20929868158466225, 0.2170589849485558, 0.2536833250233286, 0.2151248586000155, 0.2187238775321504, 0.2239872838908744, 0.07383532432026874, 0.06742059254175015, 0.05904371003261655, 0.06182288429303684, 0.07328797328990422, 0.07624036838465686, 0.06225451444494079, 0.052606381686177484, 0.06114572106336458, 0.13838786406177028, 0.1328535912264227, 0.1645855524558727, 0.13320219771837927, 0.14553792002756838, 0.14151393915246624, 0.15709464527217298, 0.1308850213283398, 0.15253996959613336, 0.1824103535226418, 0.20111240934011698, 0.18988204930751984, 0.19562674204131358, 0.19011181070770555, 0.17039434050609348, 0.20849530540757477, 0.1927328777783458, 0.17572330694954885, 0.1391729657178814, 0.13730019035584395, 0.16446623316052356, 0.13952803403153868, 0.17178788228853226, 0.1221285831368526, 0.16124813638231172, 0.1329070076056953, 0.1258886465086444, 0.18982794983294826, 0.18888102910657212, 0.19875016845086702, 0.18926743486009678, 0.20260298997877468, 0.17671384286946923, 0.18449234406604553, 0.1817681632571132, 0.19514707581003954, 0.14933112922945257, 0.1605800919214062, 0.1590708815184878, 0.1572654470411542, 0.16507319241442509, 0.1479226956406683, 0.16152066110579522, 0.1640347096835003, 0.1713346532744947, 0.2097772400536031, 0.25092540788611206, 0.18148251359443446, 0.17231283663659802, 0.2607408821639945, 0.21034576854859943, 0.22922543649139693, 0.19804381920573622, 0.22615862082205962, 0.20465526401020406, 0.16102039093831044, 0.1730475115618907, 0.2727174845562844, 0.16231072806153257, 0.23835393970524366, 0.17155155202850347, 0.19844144778069372, 0.17227640976827863, 0.19011405675133353, 0.19240050283901622, 0.17624937086475, 0.18585867036140447, 0.18755042226816743, 0.17616735570250242, 0.18569214940737233, 0.18103259660820437, 0.17956588559045572, 0.06616409500353926, 0.07551023843251548, 0.053977585073969436, 0.0622742478238697, 0.0677508087867934, 0.061209449912793756, 0.06955542655974856, 0.05713387771211309, 0.06955024329829884]}, "mutation_prompt": null}
{"id": "292e3c33-dd72-46ef-8c68-90d43ba0ca10", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Enhancing efficiency by consolidating repeated operations and optimizing data structure utilization.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20438920353475076, 0.219679531440092, 0.21906497672011804, 0.2094388064085928, 0.21596863419291035, 0.24008684531363456, 0.21767731167036075, 0.20909814397486393, 0.2148432505903367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610795629303778, 0.07409698785303953, 0.05271465011633136, 0.06925367492463919, 0.06696952445680149, 0.07090486132715801, 0.07587062138952783, 0.0650149535590725, 0.06471224236764994, 0.049228638373888356, 0.041812072318749616, 0.06796105767443517, 0.046979124780548, 0.050980494811149746, 0.04530097722716886, 0.045695029369587026, 0.061426621216498445, 0.051878027571310104, 0.07968833205917802, 0.07054420872168954, 0.08487090484727655, 0.08439035183444521, 0.07981920813101973, 0.08639989743466536, 0.11167139748991595, 0.08142191975437085, 0.0839395340637753, 0.08735012719200497, 0.10026022625232822, 0.11016992159305905, 0.10713053689165208, 0.13319504066487498, 0.09269132547754577, 0.10347316807472451, 0.10996275141562051, 0.09128146848655871, 0.170828140844846, 0.1578960923347842, 0.16532887481991798, 0.19719622791350944, 0.15947857044858138, 0.11561634895565165, 0.1930287182940308, 0.16561770025312794, 0.19270775013356445, 0.045525738664446314, 0.03980464284919161, 0.036079914009348846, 0.034226533980624474, 0.10136947344082492, 0.02059241411269308, 0.047069913469444, 0.058702917085938, 0.04613318288948409, 0.019609472796867866, 0.001282716948515783, 0.07046810808147819, 0.012466163174071676, 0.023723795001327708, 0.062170516329845826, 0.023707240227070492, 0.05893751156820359, 0.04605776242736115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676878552291088, 0.038390586862164455, 0.05406736989896921, 0.10309055460755678, 0.10516750105851824, 0.061910228939073164, 0.06070129819867054, 0.06025453936325409, 0.049228279099600925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002427922701745633, 0.00893190669716315, 0.012768274742765096, 0.0266653085989208, 0.005751444164856179, 0.00567912397131809, 0.015820612482167373, 0.003148410124477641, 0.004531388662965763, 0.2741742635568084, 0.2794507504120407, 0.22046071563458114, 0.20929868158466225, 0.2170589849485558, 0.2536833250233286, 0.2151248586000155, 0.2187238775321504, 0.2239872838908744, 0.07383532432026874, 0.06742059254175015, 0.05904371003261655, 0.06182288429303684, 0.07328797328990422, 0.07624036838465686, 0.06225451444494079, 0.052606381686177484, 0.06114572106336458, 0.13838786406177028, 0.1328535912264227, 0.1645855524558727, 0.13320219771837927, 0.14553792002756838, 0.14151393915246624, 0.15709464527217298, 0.1308850213283398, 0.15253996959613336, 0.1824103535226418, 0.20111240934011698, 0.18988204930751984, 0.19562674204131358, 0.19011181070770555, 0.17039434050609348, 0.20849530540757477, 0.1927328777783458, 0.17572330694954885, 0.1391729657178814, 0.13730019035584395, 0.16446623316052356, 0.13952803403153868, 0.17178788228853226, 0.1221285831368526, 0.16124813638231172, 0.1329070076056953, 0.1258886465086444, 0.18982794983294826, 0.18888102910657212, 0.19875016845086702, 0.18926743486009678, 0.20260298997877468, 0.17671384286946923, 0.18449234406604553, 0.1817681632571132, 0.19514707581003954, 0.14933112922945257, 0.1605800919214062, 0.1590708815184878, 0.1572654470411542, 0.16507319241442509, 0.1479226956406683, 0.16152066110579522, 0.1640347096835003, 0.1713346532744947, 0.2097772400536031, 0.25092540788611206, 0.18148251359443446, 0.17231283663659802, 0.2607408821639945, 0.21034576854859943, 0.22922543649139693, 0.19804381920573622, 0.22615862082205962, 0.20465526401020406, 0.16102039093831044, 0.1730475115618907, 0.2727174845562844, 0.16231072806153257, 0.23835393970524366, 0.17155155202850347, 0.19844144778069372, 0.17227640976827863, 0.19011405675133353, 0.19240050283901622, 0.17624937086475, 0.18585867036140447, 0.18755042226816743, 0.17616735570250242, 0.18569214940737233, 0.18103259660820437, 0.17956588559045572, 0.06616409500353926, 0.07551023843251548, 0.053977585073969436, 0.0622742478238697, 0.0677508087867934, 0.061209449912793756, 0.06955542655974856, 0.05713387771211309, 0.06955024329829884]}, "mutation_prompt": null}
{"id": "a326785a-c22a-4f9e-8cbe-deaa1b132911", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Enhancing efficiency by consolidating repeated operations and optimizing data structure utilization.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20438920353475076, 0.219679531440092, 0.21906497672011804, 0.2094388064085928, 0.21596863419291035, 0.24008684531363456, 0.21767731167036075, 0.20909814397486393, 0.2148432505903367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610795629303778, 0.07409698785303953, 0.05271465011633136, 0.06925367492463919, 0.06696952445680149, 0.07090486132715801, 0.07587062138952783, 0.0650149535590725, 0.06471224236764994, 0.049228638373888356, 0.041812072318749616, 0.06796105767443517, 0.046979124780548, 0.050980494811149746, 0.04530097722716886, 0.045695029369587026, 0.061426621216498445, 0.051878027571310104, 0.07968833205917802, 0.07054420872168954, 0.08487090484727655, 0.08439035183444521, 0.07981920813101973, 0.08639989743466536, 0.11167139748991595, 0.08142191975437085, 0.0839395340637753, 0.08735012719200497, 0.10026022625232822, 0.11016992159305905, 0.10713053689165208, 0.13319504066487498, 0.09269132547754577, 0.10347316807472451, 0.10996275141562051, 0.09128146848655871, 0.170828140844846, 0.1578960923347842, 0.16532887481991798, 0.19719622791350944, 0.15947857044858138, 0.11561634895565165, 0.1930287182940308, 0.16561770025312794, 0.19270775013356445, 0.045525738664446314, 0.03980464284919161, 0.036079914009348846, 0.034226533980624474, 0.10136947344082492, 0.02059241411269308, 0.047069913469444, 0.058702917085938, 0.04613318288948409, 0.019609472796867866, 0.001282716948515783, 0.07046810808147819, 0.012466163174071676, 0.023723795001327708, 0.062170516329845826, 0.023707240227070492, 0.05893751156820359, 0.04605776242736115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676878552291088, 0.038390586862164455, 0.05406736989896921, 0.10309055460755678, 0.10516750105851824, 0.061910228939073164, 0.06070129819867054, 0.06025453936325409, 0.049228279099600925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002427922701745633, 0.00893190669716315, 0.012768274742765096, 0.0266653085989208, 0.005751444164856179, 0.00567912397131809, 0.015820612482167373, 0.003148410124477641, 0.004531388662965763, 0.2741742635568084, 0.2794507504120407, 0.22046071563458114, 0.20929868158466225, 0.2170589849485558, 0.2536833250233286, 0.2151248586000155, 0.2187238775321504, 0.2239872838908744, 0.07383532432026874, 0.06742059254175015, 0.05904371003261655, 0.06182288429303684, 0.07328797328990422, 0.07624036838465686, 0.06225451444494079, 0.052606381686177484, 0.06114572106336458, 0.13838786406177028, 0.1328535912264227, 0.1645855524558727, 0.13320219771837927, 0.14553792002756838, 0.14151393915246624, 0.15709464527217298, 0.1308850213283398, 0.15253996959613336, 0.1824103535226418, 0.20111240934011698, 0.18988204930751984, 0.19562674204131358, 0.19011181070770555, 0.17039434050609348, 0.20849530540757477, 0.1927328777783458, 0.17572330694954885, 0.1391729657178814, 0.13730019035584395, 0.16446623316052356, 0.13952803403153868, 0.17178788228853226, 0.1221285831368526, 0.16124813638231172, 0.1329070076056953, 0.1258886465086444, 0.18982794983294826, 0.18888102910657212, 0.19875016845086702, 0.18926743486009678, 0.20260298997877468, 0.17671384286946923, 0.18449234406604553, 0.1817681632571132, 0.19514707581003954, 0.14933112922945257, 0.1605800919214062, 0.1590708815184878, 0.1572654470411542, 0.16507319241442509, 0.1479226956406683, 0.16152066110579522, 0.1640347096835003, 0.1713346532744947, 0.2097772400536031, 0.25092540788611206, 0.18148251359443446, 0.17231283663659802, 0.2607408821639945, 0.21034576854859943, 0.22922543649139693, 0.19804381920573622, 0.22615862082205962, 0.20465526401020406, 0.16102039093831044, 0.1730475115618907, 0.2727174845562844, 0.16231072806153257, 0.23835393970524366, 0.17155155202850347, 0.19844144778069372, 0.17227640976827863, 0.19011405675133353, 0.19240050283901622, 0.17624937086475, 0.18585867036140447, 0.18755042226816743, 0.17616735570250242, 0.18569214940737233, 0.18103259660820437, 0.17956588559045572, 0.06616409500353926, 0.07551023843251548, 0.053977585073969436, 0.0622742478238697, 0.0677508087867934, 0.061209449912793756, 0.06955542655974856, 0.05713387771211309, 0.06955024329829884]}, "mutation_prompt": null}
{"id": "85b8cada-e0c8-4df1-af7c-fced7c241c08", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n        self.step_size = 0.1\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, self.step_size, self.dim)  # Adaptive Exploration\n            self.step_size *= 0.99  # Dynamic step size adjustment\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Improved convergence speed by dynamically adjusting step size based on solution quality and enhanced exploration using adaptive attractive values.", "configspace": "", "generation": 74, "fitness": 0.10950971703630541, "feedback": "The algorithm EnhancedAdaptiveFireflyAlgorithmImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20501570553733017, 0.21803269284305526, 0.2113679158546855, 0.20981181472001642, 0.21477130783843268, 0.2438432517186787, 0.2189952686787694, 0.21254221569887433, 0.21849916556609406, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06473650864902725, 0.06177737647430348, 0.06308297667430851, 0.058664992777717306, 0.05211073483983708, 0.07630628729878353, 0.06739010622577102, 0.07350473396689772, 0.0722687019227023, 0.047272798293684914, 0.04580520379767672, 0.05864512488955409, 0.03755185874678013, 0.03843097804277262, 0.0649355412477104, 0.0436048225183302, 0.05578970479077339, 0.06909737392269089, 0.07766692303507605, 0.07011795314593561, 0.08221674476296215, 0.08400241264272079, 0.07946998234153324, 0.08335750992030566, 0.11167099132695057, 0.08124267960960152, 0.08077092732444302, 0.08750843667529407, 0.10010905321543673, 0.11040593644129071, 0.1002577799439689, 0.1346450842222504, 0.09207239771098719, 0.1029447813193145, 0.10773554854795186, 0.09392220926469563, 0.1711176225323967, 0.15685817502273425, 0.16710948710952012, 0.19827994538328808, 0.15778308446730716, 0.11577314255819493, 0.1889792676203379, 0.16618943206155068, 0.18256327393513316, 0.045296199411751115, 0.04041575543992981, 0.028646302375404997, 0.03173556091648244, 0.07652333651834509, 0.020315397383858014, 0.04840226452134411, 0.04423077975458711, 0.060669977777281336, 0.020336585942095753, 0.004926660343333111, 0.037444592967113555, 0.011569289696952145, 0.031058647961712094, 0.06564257839509757, 0.022622644839792483, 0.05241436652333453, 0.04225085303750309, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05567441861922584, 0.03550533449856996, 0.1045022688605668, 0.05947360263355295, 0.10310307010105446, 0.07819606506620114, 0.07070379397261872, 0.09567838257020012, 0.06353585977832354, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002004300299384698, 0.006880803200056462, 0.00018991954687930246, 0.03245900613052621, 0.005427748280801503, 0.006729187545553961, 0.01342869068974506, 0.006714014987880157, 0.003771162629800706, 0.277476759838596, 0.28572075295530464, 0.21896563708228645, 0.20731771989055503, 0.21250532753767748, 0.266699743594209, 0.2194440377514727, 0.21854060812424503, 0.23050712741907098, 0.05201260534027674, 0.05914051719015456, 0.06174566527959635, 0.07258236078783575, 0.06767819510628947, 0.06283822794531424, 0.05840509170640218, 0.06991103922704811, 0.060097141731816905, 0.13347017422755758, 0.13384946137506593, 0.18332289850651973, 0.12974785402460343, 0.14761521176731007, 0.1382632196819863, 0.14767301706076652, 0.12154796272303392, 0.145334204585029, 0.17581861530459408, 0.2169524512268569, 0.20591619691562701, 0.18948884343536743, 0.1951636058302284, 0.17212303045098432, 0.19665574925166285, 0.19769172224188913, 0.1821900831793828, 0.1340238764632462, 0.13667157957816456, 0.1461727399734466, 0.1405773013563758, 0.13373891849356345, 0.1354999870672262, 0.14085724713328296, 0.1252791392065732, 0.1275367286540342, 0.19379934533048604, 0.18395094170544024, 0.2029137088958306, 0.1804975250680516, 0.19138730552111816, 0.19943889327133002, 0.18236809897968087, 0.18088636830687088, 0.231499828827608, 0.15493017241914253, 0.1620367769245069, 0.15823385830994396, 0.15460949524304834, 0.15919034187298908, 0.14505251194048363, 0.1625836392102461, 0.1630303730602103, 0.17269812103444726, 0.2129570760959223, 0.2584922514497664, 0.1665129040876463, 0.17179163761578475, 0.25640546629515704, 0.21406941561813664, 0.22977640644229524, 0.18786948767020972, 0.24789627690095273, 0.20793412712765624, 0.15776915514144907, 0.1658733896972575, 0.2431464228074407, 0.14983184106959435, 0.2697285591484201, 0.19124083425676053, 0.19604162835188388, 0.1752137185848589, 0.19074013486830932, 0.19245908217817453, 0.17434896307362946, 0.18951340064661415, 0.17657423601760036, 0.18229823470248663, 0.19070556391928706, 0.1848905327386029, 0.1702537749254388, 0.06223853728380124, 0.06381237749500035, 0.06284013722253201, 0.05851580969118986, 0.0634769149545662, 0.05343704774595648, 0.06555976200480451, 0.06690939070155533, 0.06929132827396312]}, "mutation_prompt": null}
{"id": "52498572-5be9-4fbf-986b-1b51cb8b9779", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Enhancing efficiency by consolidating repeated operations and optimizing data structure utilization.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20438920353475076, 0.219679531440092, 0.21906497672011804, 0.2094388064085928, 0.21596863419291035, 0.24008684531363456, 0.21767731167036075, 0.20909814397486393, 0.2148432505903367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610795629303778, 0.07409698785303953, 0.05271465011633136, 0.06925367492463919, 0.06696952445680149, 0.07090486132715801, 0.07587062138952783, 0.0650149535590725, 0.06471224236764994, 0.049228638373888356, 0.041812072318749616, 0.06796105767443517, 0.046979124780548, 0.050980494811149746, 0.04530097722716886, 0.045695029369587026, 0.061426621216498445, 0.051878027571310104, 0.07968833205917802, 0.07054420872168954, 0.08487090484727655, 0.08439035183444521, 0.07981920813101973, 0.08639989743466536, 0.11167139748991595, 0.08142191975437085, 0.0839395340637753, 0.08735012719200497, 0.10026022625232822, 0.11016992159305905, 0.10713053689165208, 0.13319504066487498, 0.09269132547754577, 0.10347316807472451, 0.10996275141562051, 0.09128146848655871, 0.170828140844846, 0.1578960923347842, 0.16532887481991798, 0.19719622791350944, 0.15947857044858138, 0.11561634895565165, 0.1930287182940308, 0.16561770025312794, 0.19270775013356445, 0.045525738664446314, 0.03980464284919161, 0.036079914009348846, 0.034226533980624474, 0.10136947344082492, 0.02059241411269308, 0.047069913469444, 0.058702917085938, 0.04613318288948409, 0.019609472796867866, 0.001282716948515783, 0.07046810808147819, 0.012466163174071676, 0.023723795001327708, 0.062170516329845826, 0.023707240227070492, 0.05893751156820359, 0.04605776242736115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676878552291088, 0.038390586862164455, 0.05406736989896921, 0.10309055460755678, 0.10516750105851824, 0.061910228939073164, 0.06070129819867054, 0.06025453936325409, 0.049228279099600925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002427922701745633, 0.00893190669716315, 0.012768274742765096, 0.0266653085989208, 0.005751444164856179, 0.00567912397131809, 0.015820612482167373, 0.003148410124477641, 0.004531388662965763, 0.2741742635568084, 0.2794507504120407, 0.22046071563458114, 0.20929868158466225, 0.2170589849485558, 0.2536833250233286, 0.2151248586000155, 0.2187238775321504, 0.2239872838908744, 0.07383532432026874, 0.06742059254175015, 0.05904371003261655, 0.06182288429303684, 0.07328797328990422, 0.07624036838465686, 0.06225451444494079, 0.052606381686177484, 0.06114572106336458, 0.13838786406177028, 0.1328535912264227, 0.1645855524558727, 0.13320219771837927, 0.14553792002756838, 0.14151393915246624, 0.15709464527217298, 0.1308850213283398, 0.15253996959613336, 0.1824103535226418, 0.20111240934011698, 0.18988204930751984, 0.19562674204131358, 0.19011181070770555, 0.17039434050609348, 0.20849530540757477, 0.1927328777783458, 0.17572330694954885, 0.1391729657178814, 0.13730019035584395, 0.16446623316052356, 0.13952803403153868, 0.17178788228853226, 0.1221285831368526, 0.16124813638231172, 0.1329070076056953, 0.1258886465086444, 0.18982794983294826, 0.18888102910657212, 0.19875016845086702, 0.18926743486009678, 0.20260298997877468, 0.17671384286946923, 0.18449234406604553, 0.1817681632571132, 0.19514707581003954, 0.14933112922945257, 0.1605800919214062, 0.1590708815184878, 0.1572654470411542, 0.16507319241442509, 0.1479226956406683, 0.16152066110579522, 0.1640347096835003, 0.1713346532744947, 0.2097772400536031, 0.25092540788611206, 0.18148251359443446, 0.17231283663659802, 0.2607408821639945, 0.21034576854859943, 0.22922543649139693, 0.19804381920573622, 0.22615862082205962, 0.20465526401020406, 0.16102039093831044, 0.1730475115618907, 0.2727174845562844, 0.16231072806153257, 0.23835393970524366, 0.17155155202850347, 0.19844144778069372, 0.17227640976827863, 0.19011405675133353, 0.19240050283901622, 0.17624937086475, 0.18585867036140447, 0.18755042226816743, 0.17616735570250242, 0.18569214940737233, 0.18103259660820437, 0.17956588559045572, 0.06616409500353926, 0.07551023843251548, 0.053977585073969436, 0.0622742478238697, 0.0677508087867934, 0.061209449912793756, 0.06955542655974856, 0.05713387771211309, 0.06955024329829884]}, "mutation_prompt": null}
{"id": "8f1f4ce6-6cb0-4e5d-9162-0d7e81cb5e8a", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Enhancing efficiency by consolidating repeated operations and optimizing data structure utilization.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20438920353475076, 0.219679531440092, 0.21906497672011804, 0.2094388064085928, 0.21596863419291035, 0.24008684531363456, 0.21767731167036075, 0.20909814397486393, 0.2148432505903367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610795629303778, 0.07409698785303953, 0.05271465011633136, 0.06925367492463919, 0.06696952445680149, 0.07090486132715801, 0.07587062138952783, 0.0650149535590725, 0.06471224236764994, 0.049228638373888356, 0.041812072318749616, 0.06796105767443517, 0.046979124780548, 0.050980494811149746, 0.04530097722716886, 0.045695029369587026, 0.061426621216498445, 0.051878027571310104, 0.07968833205917802, 0.07054420872168954, 0.08487090484727655, 0.08439035183444521, 0.07981920813101973, 0.08639989743466536, 0.11167139748991595, 0.08142191975437085, 0.0839395340637753, 0.08735012719200497, 0.10026022625232822, 0.11016992159305905, 0.10713053689165208, 0.13319504066487498, 0.09269132547754577, 0.10347316807472451, 0.10996275141562051, 0.09128146848655871, 0.170828140844846, 0.1578960923347842, 0.16532887481991798, 0.19719622791350944, 0.15947857044858138, 0.11561634895565165, 0.1930287182940308, 0.16561770025312794, 0.19270775013356445, 0.045525738664446314, 0.03980464284919161, 0.036079914009348846, 0.034226533980624474, 0.10136947344082492, 0.02059241411269308, 0.047069913469444, 0.058702917085938, 0.04613318288948409, 0.019609472796867866, 0.001282716948515783, 0.07046810808147819, 0.012466163174071676, 0.023723795001327708, 0.062170516329845826, 0.023707240227070492, 0.05893751156820359, 0.04605776242736115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676878552291088, 0.038390586862164455, 0.05406736989896921, 0.10309055460755678, 0.10516750105851824, 0.061910228939073164, 0.06070129819867054, 0.06025453936325409, 0.049228279099600925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002427922701745633, 0.00893190669716315, 0.012768274742765096, 0.0266653085989208, 0.005751444164856179, 0.00567912397131809, 0.015820612482167373, 0.003148410124477641, 0.004531388662965763, 0.2741742635568084, 0.2794507504120407, 0.22046071563458114, 0.20929868158466225, 0.2170589849485558, 0.2536833250233286, 0.2151248586000155, 0.2187238775321504, 0.2239872838908744, 0.07383532432026874, 0.06742059254175015, 0.05904371003261655, 0.06182288429303684, 0.07328797328990422, 0.07624036838465686, 0.06225451444494079, 0.052606381686177484, 0.06114572106336458, 0.13838786406177028, 0.1328535912264227, 0.1645855524558727, 0.13320219771837927, 0.14553792002756838, 0.14151393915246624, 0.15709464527217298, 0.1308850213283398, 0.15253996959613336, 0.1824103535226418, 0.20111240934011698, 0.18988204930751984, 0.19562674204131358, 0.19011181070770555, 0.17039434050609348, 0.20849530540757477, 0.1927328777783458, 0.17572330694954885, 0.1391729657178814, 0.13730019035584395, 0.16446623316052356, 0.13952803403153868, 0.17178788228853226, 0.1221285831368526, 0.16124813638231172, 0.1329070076056953, 0.1258886465086444, 0.18982794983294826, 0.18888102910657212, 0.19875016845086702, 0.18926743486009678, 0.20260298997877468, 0.17671384286946923, 0.18449234406604553, 0.1817681632571132, 0.19514707581003954, 0.14933112922945257, 0.1605800919214062, 0.1590708815184878, 0.1572654470411542, 0.16507319241442509, 0.1479226956406683, 0.16152066110579522, 0.1640347096835003, 0.1713346532744947, 0.2097772400536031, 0.25092540788611206, 0.18148251359443446, 0.17231283663659802, 0.2607408821639945, 0.21034576854859943, 0.22922543649139693, 0.19804381920573622, 0.22615862082205962, 0.20465526401020406, 0.16102039093831044, 0.1730475115618907, 0.2727174845562844, 0.16231072806153257, 0.23835393970524366, 0.17155155202850347, 0.19844144778069372, 0.17227640976827863, 0.19011405675133353, 0.19240050283901622, 0.17624937086475, 0.18585867036140447, 0.18755042226816743, 0.17616735570250242, 0.18569214940737233, 0.18103259660820437, 0.17956588559045572, 0.06616409500353926, 0.07551023843251548, 0.053977585073969436, 0.0622742478238697, 0.0677508087867934, 0.061209449912793756, 0.06955542655974856, 0.05713387771211309, 0.06955024329829884]}, "mutation_prompt": null}
{"id": "fa867973-06be-400b-9f20-52d69869c82b", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Enhanced Adaptive Firefly Algorithm with improved exploration mechanism using adaptive step size and dynamic attractiveness values.", "configspace": "", "generation": 77, "fitness": 0.10991587995378788, "feedback": "The algorithm EnhancedAdaptiveFireflyAlgorithmImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20438920353475076, 0.219679531440092, 0.21906497672011804, 0.2094388064085928, 0.21596863419291035, 0.24008684531363456, 0.21767731167036075, 0.20909814397486393, 0.2148432505903367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610795629303778, 0.07409698785303953, 0.05271465011633136, 0.06925367492463919, 0.06696952445680149, 0.07090486132715801, 0.07587062138952783, 0.0650149535590725, 0.06471224236764994, 0.049228638373888356, 0.041812072318749616, 0.06796105767443517, 0.046979124780548, 0.050980494811149746, 0.04530097722716886, 0.045695029369587026, 0.061426621216498445, 0.051878027571310104, 0.07968833205917802, 0.07054420872168954, 0.08487090484727655, 0.08439035183444521, 0.07981920813101973, 0.08639989743466536, 0.11167139748991595, 0.08142191975437085, 0.0839395340637753, 0.08735012719200497, 0.10026022625232822, 0.11016992159305905, 0.10713053689165208, 0.13319504066487498, 0.09269132547754577, 0.10347316807472451, 0.10996275141562051, 0.09128146848655871, 0.170828140844846, 0.1578960923347842, 0.16532887481991798, 0.19719622791350944, 0.15947857044858138, 0.11561634895565165, 0.1930287182940308, 0.16561770025312794, 0.19270775013356445, 0.045525738664446314, 0.03980464284919161, 0.036079914009348846, 0.034226533980624474, 0.10136947344082492, 0.02059241411269308, 0.047069913469444, 0.058702917085938, 0.04613318288948409, 0.019609472796867866, 0.001282716948515783, 0.07046810808147819, 0.012466163174071676, 0.023723795001327708, 0.062170516329845826, 0.023707240227070492, 0.05893751156820359, 0.04605776242736115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676878552291088, 0.038390586862164455, 0.05406736989896921, 0.10309055460755678, 0.10516750105851824, 0.061910228939073164, 0.06070129819867054, 0.06025453936325409, 0.049228279099600925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002427922701745633, 0.00893190669716315, 0.012768274742765096, 0.0266653085989208, 0.005751444164856179, 0.00567912397131809, 0.015820612482167373, 0.003148410124477641, 0.004531388662965763, 0.2741742635568084, 0.2794507504120407, 0.22046071563458114, 0.20929868158466225, 0.2170589849485558, 0.2536833250233286, 0.2151248586000155, 0.2187238775321504, 0.2239872838908744, 0.07383532432026874, 0.06742059254175015, 0.05904371003261655, 0.06182288429303684, 0.07328797328990422, 0.07624036838465686, 0.06225451444494079, 0.052606381686177484, 0.06114572106336458, 0.13838786406177028, 0.1328535912264227, 0.1645855524558727, 0.13320219771837927, 0.14553792002756838, 0.14151393915246624, 0.15709464527217298, 0.1308850213283398, 0.15253996959613336, 0.1824103535226418, 0.20111240934011698, 0.18988204930751984, 0.19562674204131358, 0.19011181070770555, 0.17039434050609348, 0.20849530540757477, 0.1927328777783458, 0.17572330694954885, 0.1391729657178814, 0.13730019035584395, 0.16446623316052356, 0.13952803403153868, 0.17178788228853226, 0.1221285831368526, 0.16124813638231172, 0.1329070076056953, 0.1258886465086444, 0.18982794983294826, 0.18888102910657212, 0.19875016845086702, 0.18926743486009678, 0.20260298997877468, 0.17671384286946923, 0.18449234406604553, 0.1817681632571132, 0.19514707581003954, 0.14933112922945257, 0.1605800919214062, 0.1590708815184878, 0.1572654470411542, 0.16507319241442509, 0.1479226956406683, 0.16152066110579522, 0.1640347096835003, 0.1713346532744947, 0.2097772400536031, 0.25092540788611206, 0.18148251359443446, 0.17231283663659802, 0.2607408821639945, 0.21034576854859943, 0.22922543649139693, 0.19804381920573622, 0.22615862082205962, 0.20465526401020406, 0.16102039093831044, 0.1730475115618907, 0.2727174845562844, 0.16231072806153257, 0.23835393970524366, 0.17155155202850347, 0.19844144778069372, 0.17227640976827863, 0.19011405675133353, 0.19240050283901622, 0.17624937086475, 0.18585867036140447, 0.18755042226816743, 0.17616735570250242, 0.18569214940737233, 0.18103259660820437, 0.17956588559045572, 0.06616409500353926, 0.07551023843251548, 0.053977585073969436, 0.0622742478238697, 0.0677508087867934, 0.061209449912793756, 0.06955542655974856, 0.05713387771211309, 0.06955024329829884]}, "mutation_prompt": null}
{"id": "c9be3d2c-61f6-456c-9260-4cc08b38ed4f", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.15, self.dim)  # Optimized Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Implementing a more efficient neighbor generation technique by leveraging a different probability distribution for step size generation.", "configspace": "", "generation": 78, "fitness": 0.10955863522024985, "feedback": "The algorithm EnhancedAdaptiveFireflyAlgorithmImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20396736616655475, 0.2199405408848778, 0.22136778264640766, 0.20990823328928332, 0.21571774748575934, 0.23947914230275258, 0.217649309413793, 0.20707913780149179, 0.21448872281685272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06686685681834281, 0.06925654923795066, 0.05647150625638697, 0.0679764963516647, 0.05459398730943521, 0.06687057158468579, 0.07854181278662942, 0.07389020148998993, 0.06776818439509646, 0.046400606025730484, 0.04496283301507742, 0.05788842988005305, 0.053539979724403164, 0.05833645854201697, 0.04393314170288576, 0.03812837819527848, 0.052295391204974506, 0.050695635111670856, 0.08077208010749726, 0.07094898307284092, 0.08613060273439876, 0.08459478586912028, 0.08019796477062113, 0.08842456866117665, 0.11167662122009736, 0.08170029568368042, 0.08593415410059846, 0.08728652638560797, 0.10061373259290973, 0.11029886618525486, 0.10781650969209655, 0.13212542065309985, 0.0928320727872215, 0.10352723359180294, 0.10962288408829934, 0.09058163168850619, 0.17105493634753277, 0.166870609589864, 0.16110162603470612, 0.19025758693420514, 0.15639864399729975, 0.11593435650895567, 0.1933055930365828, 0.16716570578774392, 0.1902895256564835, 0.04578202903438944, 0.04025433581300408, 0.042644283447557774, 0.034336481677896935, 0.09925151495621354, 0.024666015844011402, 0.04741979807364083, 0.0756431109757113, 0.04354758223162536, 0.02155810070744868, 0.0009770633233472381, 0.06686791625246136, 0.012597729294314242, 0.019141313179389385, 0.060270949554352415, 0.023859392012302805, 0.06079461711755174, 0.050292281584509824, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04736054867840489, 0.04556214846399509, 0.09621583771835973, 0.08486440233096892, 0.10610992332919489, 0.0496274662935291, 0.03967729535949294, 0.06583996953515325, 0.07395869607197803, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0025406754772262508, 0.008900502427347745, 0.020693469028842837, 0.023214778323511598, 0.0055133595364648125, 0.005002640162811933, 0.01613250610853012, 0.004201498253659008, 0.0038504945998878437, 0.27025854235050206, 0.2704695302678942, 0.22099288258009564, 0.21036042257245657, 0.21891875685378748, 0.24783079715366874, 0.2128130060220701, 0.21855092101496953, 0.22477068069625228, 0.07516540609549793, 0.058333312758467204, 0.06078425960227052, 0.06549326676860456, 0.05789107689426076, 0.0810181479185691, 0.06992670730744743, 0.05530391198557372, 0.058941467629629596, 0.1408690722441015, 0.13378098996792853, 0.16470270294724598, 0.13750379796628964, 0.16596413853762682, 0.14416007418594368, 0.14635915760135176, 0.12860649164180082, 0.13702640009234524, 0.19947151207914682, 0.20055528557149482, 0.1765660886474194, 0.1987188230310757, 0.19691263555076488, 0.17107110947691495, 0.19627683452262012, 0.18666598750940788, 0.18078255579985003, 0.15349808590837288, 0.1370896345516005, 0.14477645230390557, 0.12438561095614054, 0.15072450479344335, 0.1452527177072821, 0.1548214652135308, 0.12727525646251692, 0.12204309951155246, 0.17982304132303872, 0.17464464860126938, 0.1829799609101439, 0.19112439542725623, 0.1788333042797271, 0.18358246017915858, 0.16781332868293908, 0.1904058827694165, 0.18694654249068365, 0.14680773306364248, 0.16087394902899466, 0.15720726882709546, 0.15821613381454314, 0.15890998105448395, 0.14872127828603843, 0.16083079030014158, 0.15936361965080037, 0.16763368942485124, 0.20955372263841232, 0.23863117617979135, 0.1842761181911332, 0.1721391122907875, 0.26119926014391304, 0.20240506041910922, 0.22747430711297456, 0.20258006080852875, 0.21271800410915176, 0.2056021783351204, 0.1617213880207884, 0.17972450994576394, 0.29526969086087906, 0.16713313248463457, 0.2265737504759341, 0.15882756279624954, 0.19435450065966298, 0.18067375056543766, 0.19814547262795845, 0.18876763030238075, 0.19356534291391203, 0.19451936138371584, 0.19843375865129664, 0.17702990531798857, 0.19308266691429488, 0.18144319471674408, 0.18189945642016725, 0.07484039902236417, 0.058620357717980354, 0.06412342260248005, 0.06220390794632491, 0.06397214918273697, 0.06419856438482807, 0.07194751392638332, 0.06176246957614384, 0.06950151156274553]}, "mutation_prompt": null}
{"id": "e4840e16-cc7d-47bf-9a44-77a1eef1a0c8", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.clip(np.random.normal(0, 0.1, self.dim) + self.beta * np.random.uniform(self.lower_bound, self.upper_bound, self.dim) + self.alpha * best_solution, self.lower_bound, self.upper_bound)\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < func(current_solution):\n                current_solution = new_solution\n                best_solution, best_fitness = current_solution, func(current_solution)\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Improving efficiency by reducing unnecessary variable assignments and enhancing convergence through adaptive step size adjustment.", "configspace": "", "generation": 79, "fitness": 0.09274039216317227, "feedback": "The algorithm EnhancedAdaptiveFireflyAlgorithmImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.2360637212635388, 0.17583184703375665, 0.18462975827464612, 0.17950999282882008, 0.1975328669480415, 0.14814452126784783, 0.20054989802415912, 0.18553143414638995, 0.18925704829181333, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04669366426740251, 0.04580314964026855, 0.04628562618593768, 0.05734143876231279, 0.04714843185983664, 0.0753118099543244, 0.060941203731389004, 0.04854371107952937, 0.044849049999296176, 0.047466241928774244, 0.0427354492174018, 0.06144022364161761, 0.04588021181999469, 0.04038834622664489, 0.033085766348927015, 0.03921413332459178, 0.04407042248601323, 0.047155761872285096, 0.04956708341811411, 0.05626605157648923, 0.04402636252510006, 0.04995309539397663, 0.046304087210002454, 0.048782198547648425, 0.04767832448639164, 0.045754471048560896, 0.04676402490689091, 0.0656705273234891, 0.05938433213085559, 0.08242286945316735, 0.05556792315219772, 0.09128764391798017, 0.11249821788711212, 0.04608044066034833, 0.05942916314138469, 0.027342214794094932, 0.16071236430700742, 0.15199994726146393, 0.16894708116763846, 0.12333418015005393, 0.09914200042970389, 0.11597729840160498, 0.12197562550035601, 0.11110602872539499, 0.11185975229711531, 9.999999999998899e-05, 0.020444890374371028, 0.027338887517460386, 0.0031102274189470647, 0.0012777319756889227, 0.040314905945868285, 9.999999999998899e-05, 0.02855364502380542, 0.006576099536949598, 0.019394843616808766, 0.04596912384980967, 0.06405036946703313, 0.06427090500051202, 0.04762580931578264, 0.011885165233838979, 0.05627777753506402, 0.020876438775165984, 0.03482344203900267, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05024168644672922, 0.031372109435593654, 0.05574967809641407, 0.038846044343346375, 0.011005825232676902, 0.05654892269959455, 0.013137812455853992, 0.041998644334406476, 0.06311682415654563, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008933933926947413, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18557919595697936, 0.20750005633554314, 0.2278021768797599, 0.2413871014024639, 0.19807789905187834, 0.18211637965780114, 0.23811424124637115, 0.18079727631287246, 0.2089285553826301, 0.046382769305454374, 0.04344304741976557, 0.028342402376532627, 0.03777994864499756, 0.032275221839470625, 0.05413765112425695, 0.04645387901997733, 0.0664414697607002, 0.06651915059708013, 0.1575183309814967, 0.14974882224156394, 0.13651969609662007, 0.13941007445734266, 0.13720831334810069, 0.1473403350711895, 0.1309633541423465, 0.15642981769242648, 0.14685678035459893, 0.15564759581007603, 0.16390000738849098, 0.16393539790858014, 0.171874304154357, 0.17808304507172035, 0.17970163355016322, 0.15851114931049137, 0.15209117357015745, 0.15830627075041082, 0.11697754719607345, 0.09568987322646538, 0.09763312282629633, 0.1203806895261581, 0.13227809566644189, 0.13879449323812665, 0.09634098217805165, 0.09990286066933673, 0.10156714454628202, 0.17280103752207032, 0.16709079258511006, 0.18348480650010734, 0.17475723217787076, 0.17489909500937106, 0.1840990633654419, 0.17771645300778238, 0.17728441563766917, 0.18616433441737656, 0.15402008196461647, 0.15145639960511004, 0.15720591092779923, 0.16151853760681223, 0.15619736110220872, 0.15081002590779102, 0.1575901463923648, 0.15592347369719095, 0.15725065244964176, 0.12909410403305077, 0.15827543230698393, 0.22001585308947702, 0.23849403188372975, 0.21320993961421097, 0.18911581753514184, 0.14045626203713202, 0.14752276124148778, 0.15212471241467518, 0.20666705350948789, 0.13492346852643533, 0.1284731011326652, 0.169151042425981, 0.22953468949607658, 0.2838779208384894, 0.13921545774357869, 0.14082101286423931, 0.1259267785520387, 0.18949365019540443, 0.18975431772387652, 0.17206037710609012, 0.18765920654202983, 0.18281475545507586, 0.18008453918788714, 0.18418908793916666, 0.17796007840999994, 0.17676825086384818, 0.057859659542424, 0.05845194410606125, 0.05490431796086359, 0.06632418638796023, 0.060734575895192044, 0.05867954824228494, 0.05237055177231853, 0.05739564740994951, 0.06288063610174122]}, "mutation_prompt": null}
{"id": "12bb78ef-f892-4a90-a994-b14054395bf1", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Enhancing efficiency by consolidating repeated operations and optimizing data structure utilization.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20438920353475076, 0.219679531440092, 0.21906497672011804, 0.2094388064085928, 0.21596863419291035, 0.24008684531363456, 0.21767731167036075, 0.20909814397486393, 0.2148432505903367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610795629303778, 0.07409698785303953, 0.05271465011633136, 0.06925367492463919, 0.06696952445680149, 0.07090486132715801, 0.07587062138952783, 0.0650149535590725, 0.06471224236764994, 0.049228638373888356, 0.041812072318749616, 0.06796105767443517, 0.046979124780548, 0.050980494811149746, 0.04530097722716886, 0.045695029369587026, 0.061426621216498445, 0.051878027571310104, 0.07968833205917802, 0.07054420872168954, 0.08487090484727655, 0.08439035183444521, 0.07981920813101973, 0.08639989743466536, 0.11167139748991595, 0.08142191975437085, 0.0839395340637753, 0.08735012719200497, 0.10026022625232822, 0.11016992159305905, 0.10713053689165208, 0.13319504066487498, 0.09269132547754577, 0.10347316807472451, 0.10996275141562051, 0.09128146848655871, 0.170828140844846, 0.1578960923347842, 0.16532887481991798, 0.19719622791350944, 0.15947857044858138, 0.11561634895565165, 0.1930287182940308, 0.16561770025312794, 0.19270775013356445, 0.045525738664446314, 0.03980464284919161, 0.036079914009348846, 0.034226533980624474, 0.10136947344082492, 0.02059241411269308, 0.047069913469444, 0.058702917085938, 0.04613318288948409, 0.019609472796867866, 0.001282716948515783, 0.07046810808147819, 0.012466163174071676, 0.023723795001327708, 0.062170516329845826, 0.023707240227070492, 0.05893751156820359, 0.04605776242736115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676878552291088, 0.038390586862164455, 0.05406736989896921, 0.10309055460755678, 0.10516750105851824, 0.061910228939073164, 0.06070129819867054, 0.06025453936325409, 0.049228279099600925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002427922701745633, 0.00893190669716315, 0.012768274742765096, 0.0266653085989208, 0.005751444164856179, 0.00567912397131809, 0.015820612482167373, 0.003148410124477641, 0.004531388662965763, 0.2741742635568084, 0.2794507504120407, 0.22046071563458114, 0.20929868158466225, 0.2170589849485558, 0.2536833250233286, 0.2151248586000155, 0.2187238775321504, 0.2239872838908744, 0.07383532432026874, 0.06742059254175015, 0.05904371003261655, 0.06182288429303684, 0.07328797328990422, 0.07624036838465686, 0.06225451444494079, 0.052606381686177484, 0.06114572106336458, 0.13838786406177028, 0.1328535912264227, 0.1645855524558727, 0.13320219771837927, 0.14553792002756838, 0.14151393915246624, 0.15709464527217298, 0.1308850213283398, 0.15253996959613336, 0.1824103535226418, 0.20111240934011698, 0.18988204930751984, 0.19562674204131358, 0.19011181070770555, 0.17039434050609348, 0.20849530540757477, 0.1927328777783458, 0.17572330694954885, 0.1391729657178814, 0.13730019035584395, 0.16446623316052356, 0.13952803403153868, 0.17178788228853226, 0.1221285831368526, 0.16124813638231172, 0.1329070076056953, 0.1258886465086444, 0.18982794983294826, 0.18888102910657212, 0.19875016845086702, 0.18926743486009678, 0.20260298997877468, 0.17671384286946923, 0.18449234406604553, 0.1817681632571132, 0.19514707581003954, 0.14933112922945257, 0.1605800919214062, 0.1590708815184878, 0.1572654470411542, 0.16507319241442509, 0.1479226956406683, 0.16152066110579522, 0.1640347096835003, 0.1713346532744947, 0.2097772400536031, 0.25092540788611206, 0.18148251359443446, 0.17231283663659802, 0.2607408821639945, 0.21034576854859943, 0.22922543649139693, 0.19804381920573622, 0.22615862082205962, 0.20465526401020406, 0.16102039093831044, 0.1730475115618907, 0.2727174845562844, 0.16231072806153257, 0.23835393970524366, 0.17155155202850347, 0.19844144778069372, 0.17227640976827863, 0.19011405675133353, 0.19240050283901622, 0.17624937086475, 0.18585867036140447, 0.18755042226816743, 0.17616735570250242, 0.18569214940737233, 0.18103259660820437, 0.17956588559045572, 0.06616409500353926, 0.07551023843251548, 0.053977585073969436, 0.0622742478238697, 0.0677508087867934, 0.061209449912793756, 0.06955542655974856, 0.05713387771211309, 0.06955024329829884]}, "mutation_prompt": null}
{"id": "d072f93d-a0fe-4141-931a-d4b40651e8da", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImprovedOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = 0.1 * np.random.normal(size=self.dim)  # Optimized step size calculation\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImprovedOptimized", "description": "Enhancing efficiency by optimizing the way step sizes are generated and utilized in the algorithm.", "configspace": "", "generation": 81, "fitness": 0.10991587995378788, "feedback": "The algorithm EnhancedAdaptiveFireflyAlgorithmImprovedOptimized got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20438920353475076, 0.219679531440092, 0.21906497672011804, 0.2094388064085928, 0.21596863419291035, 0.24008684531363456, 0.21767731167036075, 0.20909814397486393, 0.2148432505903367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610795629303778, 0.07409698785303953, 0.05271465011633136, 0.06925367492463919, 0.06696952445680149, 0.07090486132715801, 0.07587062138952783, 0.0650149535590725, 0.06471224236764994, 0.049228638373888356, 0.041812072318749616, 0.06796105767443517, 0.046979124780548, 0.050980494811149746, 0.04530097722716886, 0.045695029369587026, 0.061426621216498445, 0.051878027571310104, 0.07968833205917802, 0.07054420872168954, 0.08487090484727655, 0.08439035183444521, 0.07981920813101973, 0.08639989743466536, 0.11167139748991595, 0.08142191975437085, 0.0839395340637753, 0.08735012719200497, 0.10026022625232822, 0.11016992159305905, 0.10713053689165208, 0.13319504066487498, 0.09269132547754577, 0.10347316807472451, 0.10996275141562051, 0.09128146848655871, 0.170828140844846, 0.1578960923347842, 0.16532887481991798, 0.19719622791350944, 0.15947857044858138, 0.11561634895565165, 0.1930287182940308, 0.16561770025312794, 0.19270775013356445, 0.045525738664446314, 0.03980464284919161, 0.036079914009348846, 0.034226533980624474, 0.10136947344082492, 0.02059241411269308, 0.047069913469444, 0.058702917085938, 0.04613318288948409, 0.019609472796867866, 0.001282716948515783, 0.07046810808147819, 0.012466163174071676, 0.023723795001327708, 0.062170516329845826, 0.023707240227070492, 0.05893751156820359, 0.04605776242736115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676878552291088, 0.038390586862164455, 0.05406736989896921, 0.10309055460755678, 0.10516750105851824, 0.061910228939073164, 0.06070129819867054, 0.06025453936325409, 0.049228279099600925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002427922701745633, 0.00893190669716315, 0.012768274742765096, 0.0266653085989208, 0.005751444164856179, 0.00567912397131809, 0.015820612482167373, 0.003148410124477641, 0.004531388662965763, 0.2741742635568084, 0.2794507504120407, 0.22046071563458114, 0.20929868158466225, 0.2170589849485558, 0.2536833250233286, 0.2151248586000155, 0.2187238775321504, 0.2239872838908744, 0.07383532432026874, 0.06742059254175015, 0.05904371003261655, 0.06182288429303684, 0.07328797328990422, 0.07624036838465686, 0.06225451444494079, 0.052606381686177484, 0.06114572106336458, 0.13838786406177028, 0.1328535912264227, 0.1645855524558727, 0.13320219771837927, 0.14553792002756838, 0.14151393915246624, 0.15709464527217298, 0.1308850213283398, 0.15253996959613336, 0.1824103535226418, 0.20111240934011698, 0.18988204930751984, 0.19562674204131358, 0.19011181070770555, 0.17039434050609348, 0.20849530540757477, 0.1927328777783458, 0.17572330694954885, 0.1391729657178814, 0.13730019035584395, 0.16446623316052356, 0.13952803403153868, 0.17178788228853226, 0.1221285831368526, 0.16124813638231172, 0.1329070076056953, 0.1258886465086444, 0.18982794983294826, 0.18888102910657212, 0.19875016845086702, 0.18926743486009678, 0.20260298997877468, 0.17671384286946923, 0.18449234406604553, 0.1817681632571132, 0.19514707581003954, 0.14933112922945257, 0.1605800919214062, 0.1590708815184878, 0.1572654470411542, 0.16507319241442509, 0.1479226956406683, 0.16152066110579522, 0.1640347096835003, 0.1713346532744947, 0.2097772400536031, 0.25092540788611206, 0.18148251359443446, 0.17231283663659802, 0.2607408821639945, 0.21034576854859943, 0.22922543649139693, 0.19804381920573622, 0.22615862082205962, 0.20465526401020406, 0.16102039093831044, 0.1730475115618907, 0.2727174845562844, 0.16231072806153257, 0.23835393970524366, 0.17155155202850347, 0.19844144778069372, 0.17227640976827863, 0.19011405675133353, 0.19240050283901622, 0.17624937086475, 0.18585867036140447, 0.18755042226816743, 0.17616735570250242, 0.18569214940737233, 0.18103259660820437, 0.17956588559045572, 0.06616409500353926, 0.07551023843251548, 0.053977585073969436, 0.0622742478238697, 0.0677508087867934, 0.061209449912793756, 0.06955542655974856, 0.05713387771211309, 0.06955024329829884]}, "mutation_prompt": null}
{"id": "2bc2d755-591b-4e56-a4de-fd4c0a549b2f", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))\n        self.lower_bound, self.upper_bound = self.bounds\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Enhancing convergence speed by introducing a dynamic step size adaptation mechanism.", "configspace": "", "generation": 82, "fitness": 0.10991587995378788, "feedback": "The algorithm EnhancedAdaptiveFireflyAlgorithmImproved got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20438920353475076, 0.219679531440092, 0.21906497672011804, 0.2094388064085928, 0.21596863419291035, 0.24008684531363456, 0.21767731167036075, 0.20909814397486393, 0.2148432505903367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610795629303778, 0.07409698785303953, 0.05271465011633136, 0.06925367492463919, 0.06696952445680149, 0.07090486132715801, 0.07587062138952783, 0.0650149535590725, 0.06471224236764994, 0.049228638373888356, 0.041812072318749616, 0.06796105767443517, 0.046979124780548, 0.050980494811149746, 0.04530097722716886, 0.045695029369587026, 0.061426621216498445, 0.051878027571310104, 0.07968833205917802, 0.07054420872168954, 0.08487090484727655, 0.08439035183444521, 0.07981920813101973, 0.08639989743466536, 0.11167139748991595, 0.08142191975437085, 0.0839395340637753, 0.08735012719200497, 0.10026022625232822, 0.11016992159305905, 0.10713053689165208, 0.13319504066487498, 0.09269132547754577, 0.10347316807472451, 0.10996275141562051, 0.09128146848655871, 0.170828140844846, 0.1578960923347842, 0.16532887481991798, 0.19719622791350944, 0.15947857044858138, 0.11561634895565165, 0.1930287182940308, 0.16561770025312794, 0.19270775013356445, 0.045525738664446314, 0.03980464284919161, 0.036079914009348846, 0.034226533980624474, 0.10136947344082492, 0.02059241411269308, 0.047069913469444, 0.058702917085938, 0.04613318288948409, 0.019609472796867866, 0.001282716948515783, 0.07046810808147819, 0.012466163174071676, 0.023723795001327708, 0.062170516329845826, 0.023707240227070492, 0.05893751156820359, 0.04605776242736115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676878552291088, 0.038390586862164455, 0.05406736989896921, 0.10309055460755678, 0.10516750105851824, 0.061910228939073164, 0.06070129819867054, 0.06025453936325409, 0.049228279099600925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002427922701745633, 0.00893190669716315, 0.012768274742765096, 0.0266653085989208, 0.005751444164856179, 0.00567912397131809, 0.015820612482167373, 0.003148410124477641, 0.004531388662965763, 0.2741742635568084, 0.2794507504120407, 0.22046071563458114, 0.20929868158466225, 0.2170589849485558, 0.2536833250233286, 0.2151248586000155, 0.2187238775321504, 0.2239872838908744, 0.07383532432026874, 0.06742059254175015, 0.05904371003261655, 0.06182288429303684, 0.07328797328990422, 0.07624036838465686, 0.06225451444494079, 0.052606381686177484, 0.06114572106336458, 0.13838786406177028, 0.1328535912264227, 0.1645855524558727, 0.13320219771837927, 0.14553792002756838, 0.14151393915246624, 0.15709464527217298, 0.1308850213283398, 0.15253996959613336, 0.1824103535226418, 0.20111240934011698, 0.18988204930751984, 0.19562674204131358, 0.19011181070770555, 0.17039434050609348, 0.20849530540757477, 0.1927328777783458, 0.17572330694954885, 0.1391729657178814, 0.13730019035584395, 0.16446623316052356, 0.13952803403153868, 0.17178788228853226, 0.1221285831368526, 0.16124813638231172, 0.1329070076056953, 0.1258886465086444, 0.18982794983294826, 0.18888102910657212, 0.19875016845086702, 0.18926743486009678, 0.20260298997877468, 0.17671384286946923, 0.18449234406604553, 0.1817681632571132, 0.19514707581003954, 0.14933112922945257, 0.1605800919214062, 0.1590708815184878, 0.1572654470411542, 0.16507319241442509, 0.1479226956406683, 0.16152066110579522, 0.1640347096835003, 0.1713346532744947, 0.2097772400536031, 0.25092540788611206, 0.18148251359443446, 0.17231283663659802, 0.2607408821639945, 0.21034576854859943, 0.22922543649139693, 0.19804381920573622, 0.22615862082205962, 0.20465526401020406, 0.16102039093831044, 0.1730475115618907, 0.2727174845562844, 0.16231072806153257, 0.23835393970524366, 0.17155155202850347, 0.19844144778069372, 0.17227640976827863, 0.19011405675133353, 0.19240050283901622, 0.17624937086475, 0.18585867036140447, 0.18755042226816743, 0.17616735570250242, 0.18569214940737233, 0.18103259660820437, 0.17956588559045572, 0.06616409500353926, 0.07551023843251548, 0.053977585073969436, 0.0622742478238697, 0.0677508087867934, 0.061209449912793756, 0.06955542655974856, 0.05713387771211309, 0.06955024329829884]}, "mutation_prompt": null}
{"id": "06915523-5474-4da8-a992-3632cd0c32c8", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Enhancing efficiency by consolidating repeated operations and optimizing data structure utilization.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20438920353475076, 0.219679531440092, 0.21906497672011804, 0.2094388064085928, 0.21596863419291035, 0.24008684531363456, 0.21767731167036075, 0.20909814397486393, 0.2148432505903367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610795629303778, 0.07409698785303953, 0.05271465011633136, 0.06925367492463919, 0.06696952445680149, 0.07090486132715801, 0.07587062138952783, 0.0650149535590725, 0.06471224236764994, 0.049228638373888356, 0.041812072318749616, 0.06796105767443517, 0.046979124780548, 0.050980494811149746, 0.04530097722716886, 0.045695029369587026, 0.061426621216498445, 0.051878027571310104, 0.07968833205917802, 0.07054420872168954, 0.08487090484727655, 0.08439035183444521, 0.07981920813101973, 0.08639989743466536, 0.11167139748991595, 0.08142191975437085, 0.0839395340637753, 0.08735012719200497, 0.10026022625232822, 0.11016992159305905, 0.10713053689165208, 0.13319504066487498, 0.09269132547754577, 0.10347316807472451, 0.10996275141562051, 0.09128146848655871, 0.170828140844846, 0.1578960923347842, 0.16532887481991798, 0.19719622791350944, 0.15947857044858138, 0.11561634895565165, 0.1930287182940308, 0.16561770025312794, 0.19270775013356445, 0.045525738664446314, 0.03980464284919161, 0.036079914009348846, 0.034226533980624474, 0.10136947344082492, 0.02059241411269308, 0.047069913469444, 0.058702917085938, 0.04613318288948409, 0.019609472796867866, 0.001282716948515783, 0.07046810808147819, 0.012466163174071676, 0.023723795001327708, 0.062170516329845826, 0.023707240227070492, 0.05893751156820359, 0.04605776242736115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676878552291088, 0.038390586862164455, 0.05406736989896921, 0.10309055460755678, 0.10516750105851824, 0.061910228939073164, 0.06070129819867054, 0.06025453936325409, 0.049228279099600925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002427922701745633, 0.00893190669716315, 0.012768274742765096, 0.0266653085989208, 0.005751444164856179, 0.00567912397131809, 0.015820612482167373, 0.003148410124477641, 0.004531388662965763, 0.2741742635568084, 0.2794507504120407, 0.22046071563458114, 0.20929868158466225, 0.2170589849485558, 0.2536833250233286, 0.2151248586000155, 0.2187238775321504, 0.2239872838908744, 0.07383532432026874, 0.06742059254175015, 0.05904371003261655, 0.06182288429303684, 0.07328797328990422, 0.07624036838465686, 0.06225451444494079, 0.052606381686177484, 0.06114572106336458, 0.13838786406177028, 0.1328535912264227, 0.1645855524558727, 0.13320219771837927, 0.14553792002756838, 0.14151393915246624, 0.15709464527217298, 0.1308850213283398, 0.15253996959613336, 0.1824103535226418, 0.20111240934011698, 0.18988204930751984, 0.19562674204131358, 0.19011181070770555, 0.17039434050609348, 0.20849530540757477, 0.1927328777783458, 0.17572330694954885, 0.1391729657178814, 0.13730019035584395, 0.16446623316052356, 0.13952803403153868, 0.17178788228853226, 0.1221285831368526, 0.16124813638231172, 0.1329070076056953, 0.1258886465086444, 0.18982794983294826, 0.18888102910657212, 0.19875016845086702, 0.18926743486009678, 0.20260298997877468, 0.17671384286946923, 0.18449234406604553, 0.1817681632571132, 0.19514707581003954, 0.14933112922945257, 0.1605800919214062, 0.1590708815184878, 0.1572654470411542, 0.16507319241442509, 0.1479226956406683, 0.16152066110579522, 0.1640347096835003, 0.1713346532744947, 0.2097772400536031, 0.25092540788611206, 0.18148251359443446, 0.17231283663659802, 0.2607408821639945, 0.21034576854859943, 0.22922543649139693, 0.19804381920573622, 0.22615862082205962, 0.20465526401020406, 0.16102039093831044, 0.1730475115618907, 0.2727174845562844, 0.16231072806153257, 0.23835393970524366, 0.17155155202850347, 0.19844144778069372, 0.17227640976827863, 0.19011405675133353, 0.19240050283901622, 0.17624937086475, 0.18585867036140447, 0.18755042226816743, 0.17616735570250242, 0.18569214940737233, 0.18103259660820437, 0.17956588559045572, 0.06616409500353926, 0.07551023843251548, 0.053977585073969436, 0.0622742478238697, 0.0677508087867934, 0.061209449912793756, 0.06955542655974856, 0.05713387771211309, 0.06955024329829884]}, "mutation_prompt": null}
{"id": "b538bb6b-8a21-407f-868d-fc391be17c0a", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Enhancing efficiency by consolidating repeated operations and optimizing data structure utilization.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20438920353475076, 0.219679531440092, 0.21906497672011804, 0.2094388064085928, 0.21596863419291035, 0.24008684531363456, 0.21767731167036075, 0.20909814397486393, 0.2148432505903367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610795629303778, 0.07409698785303953, 0.05271465011633136, 0.06925367492463919, 0.06696952445680149, 0.07090486132715801, 0.07587062138952783, 0.0650149535590725, 0.06471224236764994, 0.049228638373888356, 0.041812072318749616, 0.06796105767443517, 0.046979124780548, 0.050980494811149746, 0.04530097722716886, 0.045695029369587026, 0.061426621216498445, 0.051878027571310104, 0.07968833205917802, 0.07054420872168954, 0.08487090484727655, 0.08439035183444521, 0.07981920813101973, 0.08639989743466536, 0.11167139748991595, 0.08142191975437085, 0.0839395340637753, 0.08735012719200497, 0.10026022625232822, 0.11016992159305905, 0.10713053689165208, 0.13319504066487498, 0.09269132547754577, 0.10347316807472451, 0.10996275141562051, 0.09128146848655871, 0.170828140844846, 0.1578960923347842, 0.16532887481991798, 0.19719622791350944, 0.15947857044858138, 0.11561634895565165, 0.1930287182940308, 0.16561770025312794, 0.19270775013356445, 0.045525738664446314, 0.03980464284919161, 0.036079914009348846, 0.034226533980624474, 0.10136947344082492, 0.02059241411269308, 0.047069913469444, 0.058702917085938, 0.04613318288948409, 0.019609472796867866, 0.001282716948515783, 0.07046810808147819, 0.012466163174071676, 0.023723795001327708, 0.062170516329845826, 0.023707240227070492, 0.05893751156820359, 0.04605776242736115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676878552291088, 0.038390586862164455, 0.05406736989896921, 0.10309055460755678, 0.10516750105851824, 0.061910228939073164, 0.06070129819867054, 0.06025453936325409, 0.049228279099600925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002427922701745633, 0.00893190669716315, 0.012768274742765096, 0.0266653085989208, 0.005751444164856179, 0.00567912397131809, 0.015820612482167373, 0.003148410124477641, 0.004531388662965763, 0.2741742635568084, 0.2794507504120407, 0.22046071563458114, 0.20929868158466225, 0.2170589849485558, 0.2536833250233286, 0.2151248586000155, 0.2187238775321504, 0.2239872838908744, 0.07383532432026874, 0.06742059254175015, 0.05904371003261655, 0.06182288429303684, 0.07328797328990422, 0.07624036838465686, 0.06225451444494079, 0.052606381686177484, 0.06114572106336458, 0.13838786406177028, 0.1328535912264227, 0.1645855524558727, 0.13320219771837927, 0.14553792002756838, 0.14151393915246624, 0.15709464527217298, 0.1308850213283398, 0.15253996959613336, 0.1824103535226418, 0.20111240934011698, 0.18988204930751984, 0.19562674204131358, 0.19011181070770555, 0.17039434050609348, 0.20849530540757477, 0.1927328777783458, 0.17572330694954885, 0.1391729657178814, 0.13730019035584395, 0.16446623316052356, 0.13952803403153868, 0.17178788228853226, 0.1221285831368526, 0.16124813638231172, 0.1329070076056953, 0.1258886465086444, 0.18982794983294826, 0.18888102910657212, 0.19875016845086702, 0.18926743486009678, 0.20260298997877468, 0.17671384286946923, 0.18449234406604553, 0.1817681632571132, 0.19514707581003954, 0.14933112922945257, 0.1605800919214062, 0.1590708815184878, 0.1572654470411542, 0.16507319241442509, 0.1479226956406683, 0.16152066110579522, 0.1640347096835003, 0.1713346532744947, 0.2097772400536031, 0.25092540788611206, 0.18148251359443446, 0.17231283663659802, 0.2607408821639945, 0.21034576854859943, 0.22922543649139693, 0.19804381920573622, 0.22615862082205962, 0.20465526401020406, 0.16102039093831044, 0.1730475115618907, 0.2727174845562844, 0.16231072806153257, 0.23835393970524366, 0.17155155202850347, 0.19844144778069372, 0.17227640976827863, 0.19011405675133353, 0.19240050283901622, 0.17624937086475, 0.18585867036140447, 0.18755042226816743, 0.17616735570250242, 0.18569214940737233, 0.18103259660820437, 0.17956588559045572, 0.06616409500353926, 0.07551023843251548, 0.053977585073969436, 0.0622742478238697, 0.0677508087867934, 0.061209449912793756, 0.06955542655974856, 0.05713387771211309, 0.06955024329829884]}, "mutation_prompt": null}
{"id": "75025671-831f-45d3-8034-b5a1f01104cc", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmOptimized:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n            step_size = np.random.normal(0, 0.1, self.dim)  # Adaptive step size adjustment\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            np.clip(current_solution, self.lower_bound, self.upper_bound, out=current_solution)  # Efficient clipping\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            current_solution = new_solution if func(new_solution) < current_fitness else current_solution\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmOptimized", "description": "Further optimizing data structure utilization and enhancing exploration through adaptive step size adjustment.", "configspace": "", "generation": 85, "fitness": 0.10991587995378788, "feedback": "The algorithm EnhancedAdaptiveFireflyAlgorithmOptimized got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20438920353475076, 0.219679531440092, 0.21906497672011804, 0.2094388064085928, 0.21596863419291035, 0.24008684531363456, 0.21767731167036075, 0.20909814397486393, 0.2148432505903367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610795629303778, 0.07409698785303953, 0.05271465011633136, 0.06925367492463919, 0.06696952445680149, 0.07090486132715801, 0.07587062138952783, 0.0650149535590725, 0.06471224236764994, 0.049228638373888356, 0.041812072318749616, 0.06796105767443517, 0.046979124780548, 0.050980494811149746, 0.04530097722716886, 0.045695029369587026, 0.061426621216498445, 0.051878027571310104, 0.07968833205917802, 0.07054420872168954, 0.08487090484727655, 0.08439035183444521, 0.07981920813101973, 0.08639989743466536, 0.11167139748991595, 0.08142191975437085, 0.0839395340637753, 0.08735012719200497, 0.10026022625232822, 0.11016992159305905, 0.10713053689165208, 0.13319504066487498, 0.09269132547754577, 0.10347316807472451, 0.10996275141562051, 0.09128146848655871, 0.170828140844846, 0.1578960923347842, 0.16532887481991798, 0.19719622791350944, 0.15947857044858138, 0.11561634895565165, 0.1930287182940308, 0.16561770025312794, 0.19270775013356445, 0.045525738664446314, 0.03980464284919161, 0.036079914009348846, 0.034226533980624474, 0.10136947344082492, 0.02059241411269308, 0.047069913469444, 0.058702917085938, 0.04613318288948409, 0.019609472796867866, 0.001282716948515783, 0.07046810808147819, 0.012466163174071676, 0.023723795001327708, 0.062170516329845826, 0.023707240227070492, 0.05893751156820359, 0.04605776242736115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676878552291088, 0.038390586862164455, 0.05406736989896921, 0.10309055460755678, 0.10516750105851824, 0.061910228939073164, 0.06070129819867054, 0.06025453936325409, 0.049228279099600925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002427922701745633, 0.00893190669716315, 0.012768274742765096, 0.0266653085989208, 0.005751444164856179, 0.00567912397131809, 0.015820612482167373, 0.003148410124477641, 0.004531388662965763, 0.2741742635568084, 0.2794507504120407, 0.22046071563458114, 0.20929868158466225, 0.2170589849485558, 0.2536833250233286, 0.2151248586000155, 0.2187238775321504, 0.2239872838908744, 0.07383532432026874, 0.06742059254175015, 0.05904371003261655, 0.06182288429303684, 0.07328797328990422, 0.07624036838465686, 0.06225451444494079, 0.052606381686177484, 0.06114572106336458, 0.13838786406177028, 0.1328535912264227, 0.1645855524558727, 0.13320219771837927, 0.14553792002756838, 0.14151393915246624, 0.15709464527217298, 0.1308850213283398, 0.15253996959613336, 0.1824103535226418, 0.20111240934011698, 0.18988204930751984, 0.19562674204131358, 0.19011181070770555, 0.17039434050609348, 0.20849530540757477, 0.1927328777783458, 0.17572330694954885, 0.1391729657178814, 0.13730019035584395, 0.16446623316052356, 0.13952803403153868, 0.17178788228853226, 0.1221285831368526, 0.16124813638231172, 0.1329070076056953, 0.1258886465086444, 0.18982794983294826, 0.18888102910657212, 0.19875016845086702, 0.18926743486009678, 0.20260298997877468, 0.17671384286946923, 0.18449234406604553, 0.1817681632571132, 0.19514707581003954, 0.14933112922945257, 0.1605800919214062, 0.1590708815184878, 0.1572654470411542, 0.16507319241442509, 0.1479226956406683, 0.16152066110579522, 0.1640347096835003, 0.1713346532744947, 0.2097772400536031, 0.25092540788611206, 0.18148251359443446, 0.17231283663659802, 0.2607408821639945, 0.21034576854859943, 0.22922543649139693, 0.19804381920573622, 0.22615862082205962, 0.20465526401020406, 0.16102039093831044, 0.1730475115618907, 0.2727174845562844, 0.16231072806153257, 0.23835393970524366, 0.17155155202850347, 0.19844144778069372, 0.17227640976827863, 0.19011405675133353, 0.19240050283901622, 0.17624937086475, 0.18585867036140447, 0.18755042226816743, 0.17616735570250242, 0.18569214940737233, 0.18103259660820437, 0.17956588559045572, 0.06616409500353926, 0.07551023843251548, 0.053977585073969436, 0.0622742478238697, 0.0677508087867934, 0.061209449912793756, 0.06955542655974856, 0.05713387771211309, 0.06955024329829884]}, "mutation_prompt": null}
{"id": "8961b6b0-8f9a-4bc9-bbb9-9d312a9a26c9", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Enhancing efficiency by consolidating repeated operations and optimizing data structure utilization.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20438920353475076, 0.219679531440092, 0.21906497672011804, 0.2094388064085928, 0.21596863419291035, 0.24008684531363456, 0.21767731167036075, 0.20909814397486393, 0.2148432505903367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610795629303778, 0.07409698785303953, 0.05271465011633136, 0.06925367492463919, 0.06696952445680149, 0.07090486132715801, 0.07587062138952783, 0.0650149535590725, 0.06471224236764994, 0.049228638373888356, 0.041812072318749616, 0.06796105767443517, 0.046979124780548, 0.050980494811149746, 0.04530097722716886, 0.045695029369587026, 0.061426621216498445, 0.051878027571310104, 0.07968833205917802, 0.07054420872168954, 0.08487090484727655, 0.08439035183444521, 0.07981920813101973, 0.08639989743466536, 0.11167139748991595, 0.08142191975437085, 0.0839395340637753, 0.08735012719200497, 0.10026022625232822, 0.11016992159305905, 0.10713053689165208, 0.13319504066487498, 0.09269132547754577, 0.10347316807472451, 0.10996275141562051, 0.09128146848655871, 0.170828140844846, 0.1578960923347842, 0.16532887481991798, 0.19719622791350944, 0.15947857044858138, 0.11561634895565165, 0.1930287182940308, 0.16561770025312794, 0.19270775013356445, 0.045525738664446314, 0.03980464284919161, 0.036079914009348846, 0.034226533980624474, 0.10136947344082492, 0.02059241411269308, 0.047069913469444, 0.058702917085938, 0.04613318288948409, 0.019609472796867866, 0.001282716948515783, 0.07046810808147819, 0.012466163174071676, 0.023723795001327708, 0.062170516329845826, 0.023707240227070492, 0.05893751156820359, 0.04605776242736115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676878552291088, 0.038390586862164455, 0.05406736989896921, 0.10309055460755678, 0.10516750105851824, 0.061910228939073164, 0.06070129819867054, 0.06025453936325409, 0.049228279099600925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002427922701745633, 0.00893190669716315, 0.012768274742765096, 0.0266653085989208, 0.005751444164856179, 0.00567912397131809, 0.015820612482167373, 0.003148410124477641, 0.004531388662965763, 0.2741742635568084, 0.2794507504120407, 0.22046071563458114, 0.20929868158466225, 0.2170589849485558, 0.2536833250233286, 0.2151248586000155, 0.2187238775321504, 0.2239872838908744, 0.07383532432026874, 0.06742059254175015, 0.05904371003261655, 0.06182288429303684, 0.07328797328990422, 0.07624036838465686, 0.06225451444494079, 0.052606381686177484, 0.06114572106336458, 0.13838786406177028, 0.1328535912264227, 0.1645855524558727, 0.13320219771837927, 0.14553792002756838, 0.14151393915246624, 0.15709464527217298, 0.1308850213283398, 0.15253996959613336, 0.1824103535226418, 0.20111240934011698, 0.18988204930751984, 0.19562674204131358, 0.19011181070770555, 0.17039434050609348, 0.20849530540757477, 0.1927328777783458, 0.17572330694954885, 0.1391729657178814, 0.13730019035584395, 0.16446623316052356, 0.13952803403153868, 0.17178788228853226, 0.1221285831368526, 0.16124813638231172, 0.1329070076056953, 0.1258886465086444, 0.18982794983294826, 0.18888102910657212, 0.19875016845086702, 0.18926743486009678, 0.20260298997877468, 0.17671384286946923, 0.18449234406604553, 0.1817681632571132, 0.19514707581003954, 0.14933112922945257, 0.1605800919214062, 0.1590708815184878, 0.1572654470411542, 0.16507319241442509, 0.1479226956406683, 0.16152066110579522, 0.1640347096835003, 0.1713346532744947, 0.2097772400536031, 0.25092540788611206, 0.18148251359443446, 0.17231283663659802, 0.2607408821639945, 0.21034576854859943, 0.22922543649139693, 0.19804381920573622, 0.22615862082205962, 0.20465526401020406, 0.16102039093831044, 0.1730475115618907, 0.2727174845562844, 0.16231072806153257, 0.23835393970524366, 0.17155155202850347, 0.19844144778069372, 0.17227640976827863, 0.19011405675133353, 0.19240050283901622, 0.17624937086475, 0.18585867036140447, 0.18755042226816743, 0.17616735570250242, 0.18569214940737233, 0.18103259660820437, 0.17956588559045572, 0.06616409500353926, 0.07551023843251548, 0.053977585073969436, 0.0622742478238697, 0.0677508087867934, 0.061209449912793756, 0.06955542655974856, 0.05713387771211309, 0.06955024329829884]}, "mutation_prompt": null}
{"id": "6037e048-cdf7-482b-9133-704523c72e50", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Enhancing efficiency by consolidating repeated operations and optimizing data structure utilization.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20438920353475076, 0.219679531440092, 0.21906497672011804, 0.2094388064085928, 0.21596863419291035, 0.24008684531363456, 0.21767731167036075, 0.20909814397486393, 0.2148432505903367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610795629303778, 0.07409698785303953, 0.05271465011633136, 0.06925367492463919, 0.06696952445680149, 0.07090486132715801, 0.07587062138952783, 0.0650149535590725, 0.06471224236764994, 0.049228638373888356, 0.041812072318749616, 0.06796105767443517, 0.046979124780548, 0.050980494811149746, 0.04530097722716886, 0.045695029369587026, 0.061426621216498445, 0.051878027571310104, 0.07968833205917802, 0.07054420872168954, 0.08487090484727655, 0.08439035183444521, 0.07981920813101973, 0.08639989743466536, 0.11167139748991595, 0.08142191975437085, 0.0839395340637753, 0.08735012719200497, 0.10026022625232822, 0.11016992159305905, 0.10713053689165208, 0.13319504066487498, 0.09269132547754577, 0.10347316807472451, 0.10996275141562051, 0.09128146848655871, 0.170828140844846, 0.1578960923347842, 0.16532887481991798, 0.19719622791350944, 0.15947857044858138, 0.11561634895565165, 0.1930287182940308, 0.16561770025312794, 0.19270775013356445, 0.045525738664446314, 0.03980464284919161, 0.036079914009348846, 0.034226533980624474, 0.10136947344082492, 0.02059241411269308, 0.047069913469444, 0.058702917085938, 0.04613318288948409, 0.019609472796867866, 0.001282716948515783, 0.07046810808147819, 0.012466163174071676, 0.023723795001327708, 0.062170516329845826, 0.023707240227070492, 0.05893751156820359, 0.04605776242736115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676878552291088, 0.038390586862164455, 0.05406736989896921, 0.10309055460755678, 0.10516750105851824, 0.061910228939073164, 0.06070129819867054, 0.06025453936325409, 0.049228279099600925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002427922701745633, 0.00893190669716315, 0.012768274742765096, 0.0266653085989208, 0.005751444164856179, 0.00567912397131809, 0.015820612482167373, 0.003148410124477641, 0.004531388662965763, 0.2741742635568084, 0.2794507504120407, 0.22046071563458114, 0.20929868158466225, 0.2170589849485558, 0.2536833250233286, 0.2151248586000155, 0.2187238775321504, 0.2239872838908744, 0.07383532432026874, 0.06742059254175015, 0.05904371003261655, 0.06182288429303684, 0.07328797328990422, 0.07624036838465686, 0.06225451444494079, 0.052606381686177484, 0.06114572106336458, 0.13838786406177028, 0.1328535912264227, 0.1645855524558727, 0.13320219771837927, 0.14553792002756838, 0.14151393915246624, 0.15709464527217298, 0.1308850213283398, 0.15253996959613336, 0.1824103535226418, 0.20111240934011698, 0.18988204930751984, 0.19562674204131358, 0.19011181070770555, 0.17039434050609348, 0.20849530540757477, 0.1927328777783458, 0.17572330694954885, 0.1391729657178814, 0.13730019035584395, 0.16446623316052356, 0.13952803403153868, 0.17178788228853226, 0.1221285831368526, 0.16124813638231172, 0.1329070076056953, 0.1258886465086444, 0.18982794983294826, 0.18888102910657212, 0.19875016845086702, 0.18926743486009678, 0.20260298997877468, 0.17671384286946923, 0.18449234406604553, 0.1817681632571132, 0.19514707581003954, 0.14933112922945257, 0.1605800919214062, 0.1590708815184878, 0.1572654470411542, 0.16507319241442509, 0.1479226956406683, 0.16152066110579522, 0.1640347096835003, 0.1713346532744947, 0.2097772400536031, 0.25092540788611206, 0.18148251359443446, 0.17231283663659802, 0.2607408821639945, 0.21034576854859943, 0.22922543649139693, 0.19804381920573622, 0.22615862082205962, 0.20465526401020406, 0.16102039093831044, 0.1730475115618907, 0.2727174845562844, 0.16231072806153257, 0.23835393970524366, 0.17155155202850347, 0.19844144778069372, 0.17227640976827863, 0.19011405675133353, 0.19240050283901622, 0.17624937086475, 0.18585867036140447, 0.18755042226816743, 0.17616735570250242, 0.18569214940737233, 0.18103259660820437, 0.17956588559045572, 0.06616409500353926, 0.07551023843251548, 0.053977585073969436, 0.0622742478238697, 0.0677508087867934, 0.061209449912793756, 0.06955542655974856, 0.05713387771211309, 0.06955024329829884]}, "mutation_prompt": null}
{"id": "8d6a21a4-f97c-4c38-a7b3-7c40c1158902", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Enhancing efficiency by consolidating repeated operations and optimizing data structure utilization.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20438920353475076, 0.219679531440092, 0.21906497672011804, 0.2094388064085928, 0.21596863419291035, 0.24008684531363456, 0.21767731167036075, 0.20909814397486393, 0.2148432505903367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610795629303778, 0.07409698785303953, 0.05271465011633136, 0.06925367492463919, 0.06696952445680149, 0.07090486132715801, 0.07587062138952783, 0.0650149535590725, 0.06471224236764994, 0.049228638373888356, 0.041812072318749616, 0.06796105767443517, 0.046979124780548, 0.050980494811149746, 0.04530097722716886, 0.045695029369587026, 0.061426621216498445, 0.051878027571310104, 0.07968833205917802, 0.07054420872168954, 0.08487090484727655, 0.08439035183444521, 0.07981920813101973, 0.08639989743466536, 0.11167139748991595, 0.08142191975437085, 0.0839395340637753, 0.08735012719200497, 0.10026022625232822, 0.11016992159305905, 0.10713053689165208, 0.13319504066487498, 0.09269132547754577, 0.10347316807472451, 0.10996275141562051, 0.09128146848655871, 0.170828140844846, 0.1578960923347842, 0.16532887481991798, 0.19719622791350944, 0.15947857044858138, 0.11561634895565165, 0.1930287182940308, 0.16561770025312794, 0.19270775013356445, 0.045525738664446314, 0.03980464284919161, 0.036079914009348846, 0.034226533980624474, 0.10136947344082492, 0.02059241411269308, 0.047069913469444, 0.058702917085938, 0.04613318288948409, 0.019609472796867866, 0.001282716948515783, 0.07046810808147819, 0.012466163174071676, 0.023723795001327708, 0.062170516329845826, 0.023707240227070492, 0.05893751156820359, 0.04605776242736115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676878552291088, 0.038390586862164455, 0.05406736989896921, 0.10309055460755678, 0.10516750105851824, 0.061910228939073164, 0.06070129819867054, 0.06025453936325409, 0.049228279099600925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002427922701745633, 0.00893190669716315, 0.012768274742765096, 0.0266653085989208, 0.005751444164856179, 0.00567912397131809, 0.015820612482167373, 0.003148410124477641, 0.004531388662965763, 0.2741742635568084, 0.2794507504120407, 0.22046071563458114, 0.20929868158466225, 0.2170589849485558, 0.2536833250233286, 0.2151248586000155, 0.2187238775321504, 0.2239872838908744, 0.07383532432026874, 0.06742059254175015, 0.05904371003261655, 0.06182288429303684, 0.07328797328990422, 0.07624036838465686, 0.06225451444494079, 0.052606381686177484, 0.06114572106336458, 0.13838786406177028, 0.1328535912264227, 0.1645855524558727, 0.13320219771837927, 0.14553792002756838, 0.14151393915246624, 0.15709464527217298, 0.1308850213283398, 0.15253996959613336, 0.1824103535226418, 0.20111240934011698, 0.18988204930751984, 0.19562674204131358, 0.19011181070770555, 0.17039434050609348, 0.20849530540757477, 0.1927328777783458, 0.17572330694954885, 0.1391729657178814, 0.13730019035584395, 0.16446623316052356, 0.13952803403153868, 0.17178788228853226, 0.1221285831368526, 0.16124813638231172, 0.1329070076056953, 0.1258886465086444, 0.18982794983294826, 0.18888102910657212, 0.19875016845086702, 0.18926743486009678, 0.20260298997877468, 0.17671384286946923, 0.18449234406604553, 0.1817681632571132, 0.19514707581003954, 0.14933112922945257, 0.1605800919214062, 0.1590708815184878, 0.1572654470411542, 0.16507319241442509, 0.1479226956406683, 0.16152066110579522, 0.1640347096835003, 0.1713346532744947, 0.2097772400536031, 0.25092540788611206, 0.18148251359443446, 0.17231283663659802, 0.2607408821639945, 0.21034576854859943, 0.22922543649139693, 0.19804381920573622, 0.22615862082205962, 0.20465526401020406, 0.16102039093831044, 0.1730475115618907, 0.2727174845562844, 0.16231072806153257, 0.23835393970524366, 0.17155155202850347, 0.19844144778069372, 0.17227640976827863, 0.19011405675133353, 0.19240050283901622, 0.17624937086475, 0.18585867036140447, 0.18755042226816743, 0.17616735570250242, 0.18569214940737233, 0.18103259660820437, 0.17956588559045572, 0.06616409500353926, 0.07551023843251548, 0.053977585073969436, 0.0622742478238697, 0.0677508087867934, 0.061209449912793756, 0.06955542655974856, 0.05713387771211309, 0.06955024329829884]}, "mutation_prompt": null}
{"id": "6d3cd474-16d5-4685-a079-755f488542e2", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Enhancing efficiency by consolidating repeated operations and optimizing data structure utilization.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20438920353475076, 0.219679531440092, 0.21906497672011804, 0.2094388064085928, 0.21596863419291035, 0.24008684531363456, 0.21767731167036075, 0.20909814397486393, 0.2148432505903367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610795629303778, 0.07409698785303953, 0.05271465011633136, 0.06925367492463919, 0.06696952445680149, 0.07090486132715801, 0.07587062138952783, 0.0650149535590725, 0.06471224236764994, 0.049228638373888356, 0.041812072318749616, 0.06796105767443517, 0.046979124780548, 0.050980494811149746, 0.04530097722716886, 0.045695029369587026, 0.061426621216498445, 0.051878027571310104, 0.07968833205917802, 0.07054420872168954, 0.08487090484727655, 0.08439035183444521, 0.07981920813101973, 0.08639989743466536, 0.11167139748991595, 0.08142191975437085, 0.0839395340637753, 0.08735012719200497, 0.10026022625232822, 0.11016992159305905, 0.10713053689165208, 0.13319504066487498, 0.09269132547754577, 0.10347316807472451, 0.10996275141562051, 0.09128146848655871, 0.170828140844846, 0.1578960923347842, 0.16532887481991798, 0.19719622791350944, 0.15947857044858138, 0.11561634895565165, 0.1930287182940308, 0.16561770025312794, 0.19270775013356445, 0.045525738664446314, 0.03980464284919161, 0.036079914009348846, 0.034226533980624474, 0.10136947344082492, 0.02059241411269308, 0.047069913469444, 0.058702917085938, 0.04613318288948409, 0.019609472796867866, 0.001282716948515783, 0.07046810808147819, 0.012466163174071676, 0.023723795001327708, 0.062170516329845826, 0.023707240227070492, 0.05893751156820359, 0.04605776242736115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676878552291088, 0.038390586862164455, 0.05406736989896921, 0.10309055460755678, 0.10516750105851824, 0.061910228939073164, 0.06070129819867054, 0.06025453936325409, 0.049228279099600925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002427922701745633, 0.00893190669716315, 0.012768274742765096, 0.0266653085989208, 0.005751444164856179, 0.00567912397131809, 0.015820612482167373, 0.003148410124477641, 0.004531388662965763, 0.2741742635568084, 0.2794507504120407, 0.22046071563458114, 0.20929868158466225, 0.2170589849485558, 0.2536833250233286, 0.2151248586000155, 0.2187238775321504, 0.2239872838908744, 0.07383532432026874, 0.06742059254175015, 0.05904371003261655, 0.06182288429303684, 0.07328797328990422, 0.07624036838465686, 0.06225451444494079, 0.052606381686177484, 0.06114572106336458, 0.13838786406177028, 0.1328535912264227, 0.1645855524558727, 0.13320219771837927, 0.14553792002756838, 0.14151393915246624, 0.15709464527217298, 0.1308850213283398, 0.15253996959613336, 0.1824103535226418, 0.20111240934011698, 0.18988204930751984, 0.19562674204131358, 0.19011181070770555, 0.17039434050609348, 0.20849530540757477, 0.1927328777783458, 0.17572330694954885, 0.1391729657178814, 0.13730019035584395, 0.16446623316052356, 0.13952803403153868, 0.17178788228853226, 0.1221285831368526, 0.16124813638231172, 0.1329070076056953, 0.1258886465086444, 0.18982794983294826, 0.18888102910657212, 0.19875016845086702, 0.18926743486009678, 0.20260298997877468, 0.17671384286946923, 0.18449234406604553, 0.1817681632571132, 0.19514707581003954, 0.14933112922945257, 0.1605800919214062, 0.1590708815184878, 0.1572654470411542, 0.16507319241442509, 0.1479226956406683, 0.16152066110579522, 0.1640347096835003, 0.1713346532744947, 0.2097772400536031, 0.25092540788611206, 0.18148251359443446, 0.17231283663659802, 0.2607408821639945, 0.21034576854859943, 0.22922543649139693, 0.19804381920573622, 0.22615862082205962, 0.20465526401020406, 0.16102039093831044, 0.1730475115618907, 0.2727174845562844, 0.16231072806153257, 0.23835393970524366, 0.17155155202850347, 0.19844144778069372, 0.17227640976827863, 0.19011405675133353, 0.19240050283901622, 0.17624937086475, 0.18585867036140447, 0.18755042226816743, 0.17616735570250242, 0.18569214940737233, 0.18103259660820437, 0.17956588559045572, 0.06616409500353926, 0.07551023843251548, 0.053977585073969436, 0.0622742478238697, 0.0677508087867934, 0.061209449912793756, 0.06955542655974856, 0.05713387771211309, 0.06955024329829884]}, "mutation_prompt": null}
{"id": "f12a5258-5957-4f0c-b702-87e9a7468439", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Enhancing efficiency by consolidating repeated operations and optimizing data structure utilization.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20438920353475076, 0.219679531440092, 0.21906497672011804, 0.2094388064085928, 0.21596863419291035, 0.24008684531363456, 0.21767731167036075, 0.20909814397486393, 0.2148432505903367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610795629303778, 0.07409698785303953, 0.05271465011633136, 0.06925367492463919, 0.06696952445680149, 0.07090486132715801, 0.07587062138952783, 0.0650149535590725, 0.06471224236764994, 0.049228638373888356, 0.041812072318749616, 0.06796105767443517, 0.046979124780548, 0.050980494811149746, 0.04530097722716886, 0.045695029369587026, 0.061426621216498445, 0.051878027571310104, 0.07968833205917802, 0.07054420872168954, 0.08487090484727655, 0.08439035183444521, 0.07981920813101973, 0.08639989743466536, 0.11167139748991595, 0.08142191975437085, 0.0839395340637753, 0.08735012719200497, 0.10026022625232822, 0.11016992159305905, 0.10713053689165208, 0.13319504066487498, 0.09269132547754577, 0.10347316807472451, 0.10996275141562051, 0.09128146848655871, 0.170828140844846, 0.1578960923347842, 0.16532887481991798, 0.19719622791350944, 0.15947857044858138, 0.11561634895565165, 0.1930287182940308, 0.16561770025312794, 0.19270775013356445, 0.045525738664446314, 0.03980464284919161, 0.036079914009348846, 0.034226533980624474, 0.10136947344082492, 0.02059241411269308, 0.047069913469444, 0.058702917085938, 0.04613318288948409, 0.019609472796867866, 0.001282716948515783, 0.07046810808147819, 0.012466163174071676, 0.023723795001327708, 0.062170516329845826, 0.023707240227070492, 0.05893751156820359, 0.04605776242736115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676878552291088, 0.038390586862164455, 0.05406736989896921, 0.10309055460755678, 0.10516750105851824, 0.061910228939073164, 0.06070129819867054, 0.06025453936325409, 0.049228279099600925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002427922701745633, 0.00893190669716315, 0.012768274742765096, 0.0266653085989208, 0.005751444164856179, 0.00567912397131809, 0.015820612482167373, 0.003148410124477641, 0.004531388662965763, 0.2741742635568084, 0.2794507504120407, 0.22046071563458114, 0.20929868158466225, 0.2170589849485558, 0.2536833250233286, 0.2151248586000155, 0.2187238775321504, 0.2239872838908744, 0.07383532432026874, 0.06742059254175015, 0.05904371003261655, 0.06182288429303684, 0.07328797328990422, 0.07624036838465686, 0.06225451444494079, 0.052606381686177484, 0.06114572106336458, 0.13838786406177028, 0.1328535912264227, 0.1645855524558727, 0.13320219771837927, 0.14553792002756838, 0.14151393915246624, 0.15709464527217298, 0.1308850213283398, 0.15253996959613336, 0.1824103535226418, 0.20111240934011698, 0.18988204930751984, 0.19562674204131358, 0.19011181070770555, 0.17039434050609348, 0.20849530540757477, 0.1927328777783458, 0.17572330694954885, 0.1391729657178814, 0.13730019035584395, 0.16446623316052356, 0.13952803403153868, 0.17178788228853226, 0.1221285831368526, 0.16124813638231172, 0.1329070076056953, 0.1258886465086444, 0.18982794983294826, 0.18888102910657212, 0.19875016845086702, 0.18926743486009678, 0.20260298997877468, 0.17671384286946923, 0.18449234406604553, 0.1817681632571132, 0.19514707581003954, 0.14933112922945257, 0.1605800919214062, 0.1590708815184878, 0.1572654470411542, 0.16507319241442509, 0.1479226956406683, 0.16152066110579522, 0.1640347096835003, 0.1713346532744947, 0.2097772400536031, 0.25092540788611206, 0.18148251359443446, 0.17231283663659802, 0.2607408821639945, 0.21034576854859943, 0.22922543649139693, 0.19804381920573622, 0.22615862082205962, 0.20465526401020406, 0.16102039093831044, 0.1730475115618907, 0.2727174845562844, 0.16231072806153257, 0.23835393970524366, 0.17155155202850347, 0.19844144778069372, 0.17227640976827863, 0.19011405675133353, 0.19240050283901622, 0.17624937086475, 0.18585867036140447, 0.18755042226816743, 0.17616735570250242, 0.18569214940737233, 0.18103259660820437, 0.17956588559045572, 0.06616409500353926, 0.07551023843251548, 0.053977585073969436, 0.0622742478238697, 0.0677508087867934, 0.061209449912793756, 0.06955542655974856, 0.05713387771211309, 0.06955024329829884]}, "mutation_prompt": null}
{"id": "25cc380b-3d71-4ab8-adf2-b24db1d5dfdf", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Enhancing efficiency by consolidating repeated operations and optimizing data structure utilization.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20438920353475076, 0.219679531440092, 0.21906497672011804, 0.2094388064085928, 0.21596863419291035, 0.24008684531363456, 0.21767731167036075, 0.20909814397486393, 0.2148432505903367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610795629303778, 0.07409698785303953, 0.05271465011633136, 0.06925367492463919, 0.06696952445680149, 0.07090486132715801, 0.07587062138952783, 0.0650149535590725, 0.06471224236764994, 0.049228638373888356, 0.041812072318749616, 0.06796105767443517, 0.046979124780548, 0.050980494811149746, 0.04530097722716886, 0.045695029369587026, 0.061426621216498445, 0.051878027571310104, 0.07968833205917802, 0.07054420872168954, 0.08487090484727655, 0.08439035183444521, 0.07981920813101973, 0.08639989743466536, 0.11167139748991595, 0.08142191975437085, 0.0839395340637753, 0.08735012719200497, 0.10026022625232822, 0.11016992159305905, 0.10713053689165208, 0.13319504066487498, 0.09269132547754577, 0.10347316807472451, 0.10996275141562051, 0.09128146848655871, 0.170828140844846, 0.1578960923347842, 0.16532887481991798, 0.19719622791350944, 0.15947857044858138, 0.11561634895565165, 0.1930287182940308, 0.16561770025312794, 0.19270775013356445, 0.045525738664446314, 0.03980464284919161, 0.036079914009348846, 0.034226533980624474, 0.10136947344082492, 0.02059241411269308, 0.047069913469444, 0.058702917085938, 0.04613318288948409, 0.019609472796867866, 0.001282716948515783, 0.07046810808147819, 0.012466163174071676, 0.023723795001327708, 0.062170516329845826, 0.023707240227070492, 0.05893751156820359, 0.04605776242736115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676878552291088, 0.038390586862164455, 0.05406736989896921, 0.10309055460755678, 0.10516750105851824, 0.061910228939073164, 0.06070129819867054, 0.06025453936325409, 0.049228279099600925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002427922701745633, 0.00893190669716315, 0.012768274742765096, 0.0266653085989208, 0.005751444164856179, 0.00567912397131809, 0.015820612482167373, 0.003148410124477641, 0.004531388662965763, 0.2741742635568084, 0.2794507504120407, 0.22046071563458114, 0.20929868158466225, 0.2170589849485558, 0.2536833250233286, 0.2151248586000155, 0.2187238775321504, 0.2239872838908744, 0.07383532432026874, 0.06742059254175015, 0.05904371003261655, 0.06182288429303684, 0.07328797328990422, 0.07624036838465686, 0.06225451444494079, 0.052606381686177484, 0.06114572106336458, 0.13838786406177028, 0.1328535912264227, 0.1645855524558727, 0.13320219771837927, 0.14553792002756838, 0.14151393915246624, 0.15709464527217298, 0.1308850213283398, 0.15253996959613336, 0.1824103535226418, 0.20111240934011698, 0.18988204930751984, 0.19562674204131358, 0.19011181070770555, 0.17039434050609348, 0.20849530540757477, 0.1927328777783458, 0.17572330694954885, 0.1391729657178814, 0.13730019035584395, 0.16446623316052356, 0.13952803403153868, 0.17178788228853226, 0.1221285831368526, 0.16124813638231172, 0.1329070076056953, 0.1258886465086444, 0.18982794983294826, 0.18888102910657212, 0.19875016845086702, 0.18926743486009678, 0.20260298997877468, 0.17671384286946923, 0.18449234406604553, 0.1817681632571132, 0.19514707581003954, 0.14933112922945257, 0.1605800919214062, 0.1590708815184878, 0.1572654470411542, 0.16507319241442509, 0.1479226956406683, 0.16152066110579522, 0.1640347096835003, 0.1713346532744947, 0.2097772400536031, 0.25092540788611206, 0.18148251359443446, 0.17231283663659802, 0.2607408821639945, 0.21034576854859943, 0.22922543649139693, 0.19804381920573622, 0.22615862082205962, 0.20465526401020406, 0.16102039093831044, 0.1730475115618907, 0.2727174845562844, 0.16231072806153257, 0.23835393970524366, 0.17155155202850347, 0.19844144778069372, 0.17227640976827863, 0.19011405675133353, 0.19240050283901622, 0.17624937086475, 0.18585867036140447, 0.18755042226816743, 0.17616735570250242, 0.18569214940737233, 0.18103259660820437, 0.17956588559045572, 0.06616409500353926, 0.07551023843251548, 0.053977585073969436, 0.0622742478238697, 0.0677508087867934, 0.061209449912793756, 0.06955542655974856, 0.05713387771211309, 0.06955024329829884]}, "mutation_prompt": null}
{"id": "9fd1174e-8da2-4584-882b-d5709d3593c7", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Enhancing efficiency by consolidating repeated operations and optimizing data structure utilization.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20438920353475076, 0.219679531440092, 0.21906497672011804, 0.2094388064085928, 0.21596863419291035, 0.24008684531363456, 0.21767731167036075, 0.20909814397486393, 0.2148432505903367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610795629303778, 0.07409698785303953, 0.05271465011633136, 0.06925367492463919, 0.06696952445680149, 0.07090486132715801, 0.07587062138952783, 0.0650149535590725, 0.06471224236764994, 0.049228638373888356, 0.041812072318749616, 0.06796105767443517, 0.046979124780548, 0.050980494811149746, 0.04530097722716886, 0.045695029369587026, 0.061426621216498445, 0.051878027571310104, 0.07968833205917802, 0.07054420872168954, 0.08487090484727655, 0.08439035183444521, 0.07981920813101973, 0.08639989743466536, 0.11167139748991595, 0.08142191975437085, 0.0839395340637753, 0.08735012719200497, 0.10026022625232822, 0.11016992159305905, 0.10713053689165208, 0.13319504066487498, 0.09269132547754577, 0.10347316807472451, 0.10996275141562051, 0.09128146848655871, 0.170828140844846, 0.1578960923347842, 0.16532887481991798, 0.19719622791350944, 0.15947857044858138, 0.11561634895565165, 0.1930287182940308, 0.16561770025312794, 0.19270775013356445, 0.045525738664446314, 0.03980464284919161, 0.036079914009348846, 0.034226533980624474, 0.10136947344082492, 0.02059241411269308, 0.047069913469444, 0.058702917085938, 0.04613318288948409, 0.019609472796867866, 0.001282716948515783, 0.07046810808147819, 0.012466163174071676, 0.023723795001327708, 0.062170516329845826, 0.023707240227070492, 0.05893751156820359, 0.04605776242736115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676878552291088, 0.038390586862164455, 0.05406736989896921, 0.10309055460755678, 0.10516750105851824, 0.061910228939073164, 0.06070129819867054, 0.06025453936325409, 0.049228279099600925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002427922701745633, 0.00893190669716315, 0.012768274742765096, 0.0266653085989208, 0.005751444164856179, 0.00567912397131809, 0.015820612482167373, 0.003148410124477641, 0.004531388662965763, 0.2741742635568084, 0.2794507504120407, 0.22046071563458114, 0.20929868158466225, 0.2170589849485558, 0.2536833250233286, 0.2151248586000155, 0.2187238775321504, 0.2239872838908744, 0.07383532432026874, 0.06742059254175015, 0.05904371003261655, 0.06182288429303684, 0.07328797328990422, 0.07624036838465686, 0.06225451444494079, 0.052606381686177484, 0.06114572106336458, 0.13838786406177028, 0.1328535912264227, 0.1645855524558727, 0.13320219771837927, 0.14553792002756838, 0.14151393915246624, 0.15709464527217298, 0.1308850213283398, 0.15253996959613336, 0.1824103535226418, 0.20111240934011698, 0.18988204930751984, 0.19562674204131358, 0.19011181070770555, 0.17039434050609348, 0.20849530540757477, 0.1927328777783458, 0.17572330694954885, 0.1391729657178814, 0.13730019035584395, 0.16446623316052356, 0.13952803403153868, 0.17178788228853226, 0.1221285831368526, 0.16124813638231172, 0.1329070076056953, 0.1258886465086444, 0.18982794983294826, 0.18888102910657212, 0.19875016845086702, 0.18926743486009678, 0.20260298997877468, 0.17671384286946923, 0.18449234406604553, 0.1817681632571132, 0.19514707581003954, 0.14933112922945257, 0.1605800919214062, 0.1590708815184878, 0.1572654470411542, 0.16507319241442509, 0.1479226956406683, 0.16152066110579522, 0.1640347096835003, 0.1713346532744947, 0.2097772400536031, 0.25092540788611206, 0.18148251359443446, 0.17231283663659802, 0.2607408821639945, 0.21034576854859943, 0.22922543649139693, 0.19804381920573622, 0.22615862082205962, 0.20465526401020406, 0.16102039093831044, 0.1730475115618907, 0.2727174845562844, 0.16231072806153257, 0.23835393970524366, 0.17155155202850347, 0.19844144778069372, 0.17227640976827863, 0.19011405675133353, 0.19240050283901622, 0.17624937086475, 0.18585867036140447, 0.18755042226816743, 0.17616735570250242, 0.18569214940737233, 0.18103259660820437, 0.17956588559045572, 0.06616409500353926, 0.07551023843251548, 0.053977585073969436, 0.0622742478238697, 0.0677508087867934, 0.061209449912793756, 0.06955542655974856, 0.05713387771211309, 0.06955024329829884]}, "mutation_prompt": null}
{"id": "5bbf4d87-4c4a-482c-88c2-2dab480d465c", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImprovedV2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            current_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(current_solution) < current_fitness:\n                current_solution = current_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImprovedV2", "description": "Efficiently update the current solution using a weighted combination of best and current solutions in each iteration.", "configspace": "", "generation": 93, "fitness": 0.10991587995378788, "feedback": "The algorithm EnhancedAdaptiveFireflyAlgorithmImprovedV2 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20438920353475076, 0.219679531440092, 0.21906497672011804, 0.2094388064085928, 0.21596863419291035, 0.24008684531363456, 0.21767731167036075, 0.20909814397486393, 0.2148432505903367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610795629303778, 0.07409698785303953, 0.05271465011633136, 0.06925367492463919, 0.06696952445680149, 0.07090486132715801, 0.07587062138952783, 0.0650149535590725, 0.06471224236764994, 0.049228638373888356, 0.041812072318749616, 0.06796105767443517, 0.046979124780548, 0.050980494811149746, 0.04530097722716886, 0.045695029369587026, 0.061426621216498445, 0.051878027571310104, 0.07968833205917802, 0.07054420872168954, 0.08487090484727655, 0.08439035183444521, 0.07981920813101973, 0.08639989743466536, 0.11167139748991595, 0.08142191975437085, 0.0839395340637753, 0.08735012719200497, 0.10026022625232822, 0.11016992159305905, 0.10713053689165208, 0.13319504066487498, 0.09269132547754577, 0.10347316807472451, 0.10996275141562051, 0.09128146848655871, 0.170828140844846, 0.1578960923347842, 0.16532887481991798, 0.19719622791350944, 0.15947857044858138, 0.11561634895565165, 0.1930287182940308, 0.16561770025312794, 0.19270775013356445, 0.045525738664446314, 0.03980464284919161, 0.036079914009348846, 0.034226533980624474, 0.10136947344082492, 0.02059241411269308, 0.047069913469444, 0.058702917085938, 0.04613318288948409, 0.019609472796867866, 0.001282716948515783, 0.07046810808147819, 0.012466163174071676, 0.023723795001327708, 0.062170516329845826, 0.023707240227070492, 0.05893751156820359, 0.04605776242736115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676878552291088, 0.038390586862164455, 0.05406736989896921, 0.10309055460755678, 0.10516750105851824, 0.061910228939073164, 0.06070129819867054, 0.06025453936325409, 0.049228279099600925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002427922701745633, 0.00893190669716315, 0.012768274742765096, 0.0266653085989208, 0.005751444164856179, 0.00567912397131809, 0.015820612482167373, 0.003148410124477641, 0.004531388662965763, 0.2741742635568084, 0.2794507504120407, 0.22046071563458114, 0.20929868158466225, 0.2170589849485558, 0.2536833250233286, 0.2151248586000155, 0.2187238775321504, 0.2239872838908744, 0.07383532432026874, 0.06742059254175015, 0.05904371003261655, 0.06182288429303684, 0.07328797328990422, 0.07624036838465686, 0.06225451444494079, 0.052606381686177484, 0.06114572106336458, 0.13838786406177028, 0.1328535912264227, 0.1645855524558727, 0.13320219771837927, 0.14553792002756838, 0.14151393915246624, 0.15709464527217298, 0.1308850213283398, 0.15253996959613336, 0.1824103535226418, 0.20111240934011698, 0.18988204930751984, 0.19562674204131358, 0.19011181070770555, 0.17039434050609348, 0.20849530540757477, 0.1927328777783458, 0.17572330694954885, 0.1391729657178814, 0.13730019035584395, 0.16446623316052356, 0.13952803403153868, 0.17178788228853226, 0.1221285831368526, 0.16124813638231172, 0.1329070076056953, 0.1258886465086444, 0.18982794983294826, 0.18888102910657212, 0.19875016845086702, 0.18926743486009678, 0.20260298997877468, 0.17671384286946923, 0.18449234406604553, 0.1817681632571132, 0.19514707581003954, 0.14933112922945257, 0.1605800919214062, 0.1590708815184878, 0.1572654470411542, 0.16507319241442509, 0.1479226956406683, 0.16152066110579522, 0.1640347096835003, 0.1713346532744947, 0.2097772400536031, 0.25092540788611206, 0.18148251359443446, 0.17231283663659802, 0.2607408821639945, 0.21034576854859943, 0.22922543649139693, 0.19804381920573622, 0.22615862082205962, 0.20465526401020406, 0.16102039093831044, 0.1730475115618907, 0.2727174845562844, 0.16231072806153257, 0.23835393970524366, 0.17155155202850347, 0.19844144778069372, 0.17227640976827863, 0.19011405675133353, 0.19240050283901622, 0.17624937086475, 0.18585867036140447, 0.18755042226816743, 0.17616735570250242, 0.18569214940737233, 0.18103259660820437, 0.17956588559045572, 0.06616409500353926, 0.07551023843251548, 0.053977585073969436, 0.0622742478238697, 0.0677508087867934, 0.061209449912793756, 0.06955542655974856, 0.05713387771211309, 0.06955024329829884]}, "mutation_prompt": null}
{"id": "556be1f6-2b3b-4d7e-8c8f-3a9de2071fcc", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Enhancing efficiency by consolidating repeated operations and optimizing data structure utilization.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20438920353475076, 0.219679531440092, 0.21906497672011804, 0.2094388064085928, 0.21596863419291035, 0.24008684531363456, 0.21767731167036075, 0.20909814397486393, 0.2148432505903367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610795629303778, 0.07409698785303953, 0.05271465011633136, 0.06925367492463919, 0.06696952445680149, 0.07090486132715801, 0.07587062138952783, 0.0650149535590725, 0.06471224236764994, 0.049228638373888356, 0.041812072318749616, 0.06796105767443517, 0.046979124780548, 0.050980494811149746, 0.04530097722716886, 0.045695029369587026, 0.061426621216498445, 0.051878027571310104, 0.07968833205917802, 0.07054420872168954, 0.08487090484727655, 0.08439035183444521, 0.07981920813101973, 0.08639989743466536, 0.11167139748991595, 0.08142191975437085, 0.0839395340637753, 0.08735012719200497, 0.10026022625232822, 0.11016992159305905, 0.10713053689165208, 0.13319504066487498, 0.09269132547754577, 0.10347316807472451, 0.10996275141562051, 0.09128146848655871, 0.170828140844846, 0.1578960923347842, 0.16532887481991798, 0.19719622791350944, 0.15947857044858138, 0.11561634895565165, 0.1930287182940308, 0.16561770025312794, 0.19270775013356445, 0.045525738664446314, 0.03980464284919161, 0.036079914009348846, 0.034226533980624474, 0.10136947344082492, 0.02059241411269308, 0.047069913469444, 0.058702917085938, 0.04613318288948409, 0.019609472796867866, 0.001282716948515783, 0.07046810808147819, 0.012466163174071676, 0.023723795001327708, 0.062170516329845826, 0.023707240227070492, 0.05893751156820359, 0.04605776242736115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676878552291088, 0.038390586862164455, 0.05406736989896921, 0.10309055460755678, 0.10516750105851824, 0.061910228939073164, 0.06070129819867054, 0.06025453936325409, 0.049228279099600925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002427922701745633, 0.00893190669716315, 0.012768274742765096, 0.0266653085989208, 0.005751444164856179, 0.00567912397131809, 0.015820612482167373, 0.003148410124477641, 0.004531388662965763, 0.2741742635568084, 0.2794507504120407, 0.22046071563458114, 0.20929868158466225, 0.2170589849485558, 0.2536833250233286, 0.2151248586000155, 0.2187238775321504, 0.2239872838908744, 0.07383532432026874, 0.06742059254175015, 0.05904371003261655, 0.06182288429303684, 0.07328797328990422, 0.07624036838465686, 0.06225451444494079, 0.052606381686177484, 0.06114572106336458, 0.13838786406177028, 0.1328535912264227, 0.1645855524558727, 0.13320219771837927, 0.14553792002756838, 0.14151393915246624, 0.15709464527217298, 0.1308850213283398, 0.15253996959613336, 0.1824103535226418, 0.20111240934011698, 0.18988204930751984, 0.19562674204131358, 0.19011181070770555, 0.17039434050609348, 0.20849530540757477, 0.1927328777783458, 0.17572330694954885, 0.1391729657178814, 0.13730019035584395, 0.16446623316052356, 0.13952803403153868, 0.17178788228853226, 0.1221285831368526, 0.16124813638231172, 0.1329070076056953, 0.1258886465086444, 0.18982794983294826, 0.18888102910657212, 0.19875016845086702, 0.18926743486009678, 0.20260298997877468, 0.17671384286946923, 0.18449234406604553, 0.1817681632571132, 0.19514707581003954, 0.14933112922945257, 0.1605800919214062, 0.1590708815184878, 0.1572654470411542, 0.16507319241442509, 0.1479226956406683, 0.16152066110579522, 0.1640347096835003, 0.1713346532744947, 0.2097772400536031, 0.25092540788611206, 0.18148251359443446, 0.17231283663659802, 0.2607408821639945, 0.21034576854859943, 0.22922543649139693, 0.19804381920573622, 0.22615862082205962, 0.20465526401020406, 0.16102039093831044, 0.1730475115618907, 0.2727174845562844, 0.16231072806153257, 0.23835393970524366, 0.17155155202850347, 0.19844144778069372, 0.17227640976827863, 0.19011405675133353, 0.19240050283901622, 0.17624937086475, 0.18585867036140447, 0.18755042226816743, 0.17616735570250242, 0.18569214940737233, 0.18103259660820437, 0.17956588559045572, 0.06616409500353926, 0.07551023843251548, 0.053977585073969436, 0.0622742478238697, 0.0677508087867934, 0.061209449912793756, 0.06955542655974856, 0.05713387771211309, 0.06955024329829884]}, "mutation_prompt": null}
{"id": "73e7fad1-4dc7-40c1-8fe1-d5c8bcee87d5", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Enhancing efficiency by consolidating repeated operations and optimizing data structure utilization.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20438920353475076, 0.219679531440092, 0.21906497672011804, 0.2094388064085928, 0.21596863419291035, 0.24008684531363456, 0.21767731167036075, 0.20909814397486393, 0.2148432505903367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610795629303778, 0.07409698785303953, 0.05271465011633136, 0.06925367492463919, 0.06696952445680149, 0.07090486132715801, 0.07587062138952783, 0.0650149535590725, 0.06471224236764994, 0.049228638373888356, 0.041812072318749616, 0.06796105767443517, 0.046979124780548, 0.050980494811149746, 0.04530097722716886, 0.045695029369587026, 0.061426621216498445, 0.051878027571310104, 0.07968833205917802, 0.07054420872168954, 0.08487090484727655, 0.08439035183444521, 0.07981920813101973, 0.08639989743466536, 0.11167139748991595, 0.08142191975437085, 0.0839395340637753, 0.08735012719200497, 0.10026022625232822, 0.11016992159305905, 0.10713053689165208, 0.13319504066487498, 0.09269132547754577, 0.10347316807472451, 0.10996275141562051, 0.09128146848655871, 0.170828140844846, 0.1578960923347842, 0.16532887481991798, 0.19719622791350944, 0.15947857044858138, 0.11561634895565165, 0.1930287182940308, 0.16561770025312794, 0.19270775013356445, 0.045525738664446314, 0.03980464284919161, 0.036079914009348846, 0.034226533980624474, 0.10136947344082492, 0.02059241411269308, 0.047069913469444, 0.058702917085938, 0.04613318288948409, 0.019609472796867866, 0.001282716948515783, 0.07046810808147819, 0.012466163174071676, 0.023723795001327708, 0.062170516329845826, 0.023707240227070492, 0.05893751156820359, 0.04605776242736115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676878552291088, 0.038390586862164455, 0.05406736989896921, 0.10309055460755678, 0.10516750105851824, 0.061910228939073164, 0.06070129819867054, 0.06025453936325409, 0.049228279099600925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002427922701745633, 0.00893190669716315, 0.012768274742765096, 0.0266653085989208, 0.005751444164856179, 0.00567912397131809, 0.015820612482167373, 0.003148410124477641, 0.004531388662965763, 0.2741742635568084, 0.2794507504120407, 0.22046071563458114, 0.20929868158466225, 0.2170589849485558, 0.2536833250233286, 0.2151248586000155, 0.2187238775321504, 0.2239872838908744, 0.07383532432026874, 0.06742059254175015, 0.05904371003261655, 0.06182288429303684, 0.07328797328990422, 0.07624036838465686, 0.06225451444494079, 0.052606381686177484, 0.06114572106336458, 0.13838786406177028, 0.1328535912264227, 0.1645855524558727, 0.13320219771837927, 0.14553792002756838, 0.14151393915246624, 0.15709464527217298, 0.1308850213283398, 0.15253996959613336, 0.1824103535226418, 0.20111240934011698, 0.18988204930751984, 0.19562674204131358, 0.19011181070770555, 0.17039434050609348, 0.20849530540757477, 0.1927328777783458, 0.17572330694954885, 0.1391729657178814, 0.13730019035584395, 0.16446623316052356, 0.13952803403153868, 0.17178788228853226, 0.1221285831368526, 0.16124813638231172, 0.1329070076056953, 0.1258886465086444, 0.18982794983294826, 0.18888102910657212, 0.19875016845086702, 0.18926743486009678, 0.20260298997877468, 0.17671384286946923, 0.18449234406604553, 0.1817681632571132, 0.19514707581003954, 0.14933112922945257, 0.1605800919214062, 0.1590708815184878, 0.1572654470411542, 0.16507319241442509, 0.1479226956406683, 0.16152066110579522, 0.1640347096835003, 0.1713346532744947, 0.2097772400536031, 0.25092540788611206, 0.18148251359443446, 0.17231283663659802, 0.2607408821639945, 0.21034576854859943, 0.22922543649139693, 0.19804381920573622, 0.22615862082205962, 0.20465526401020406, 0.16102039093831044, 0.1730475115618907, 0.2727174845562844, 0.16231072806153257, 0.23835393970524366, 0.17155155202850347, 0.19844144778069372, 0.17227640976827863, 0.19011405675133353, 0.19240050283901622, 0.17624937086475, 0.18585867036140447, 0.18755042226816743, 0.17616735570250242, 0.18569214940737233, 0.18103259660820437, 0.17956588559045572, 0.06616409500353926, 0.07551023843251548, 0.053977585073969436, 0.0622742478238697, 0.0677508087867934, 0.061209449912793756, 0.06955542655974856, 0.05713387771211309, 0.06955024329829884]}, "mutation_prompt": null}
{"id": "8fb66934-adba-4c7e-8b80-a628db333a98", "solution": "import numpy as np\n\nclass EnhancedOptimizedFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = np.where(func(current_solution) < current_fitness, current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values, current_solution)\n            current_solution = new_solution\n\n        return best_solution", "name": "EnhancedOptimizedFireflyAlgorithm", "description": "Enhanced efficiency by streamlining control flow and consolidating operations for improved performance.", "configspace": "", "generation": 96, "fitness": 0.09158153977222422, "feedback": "The algorithm EnhancedOptimizedFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.1684789890385393, 0.17730901365134433, 0.1609984722386647, 0.17440064968127933, 0.1666683283318201, 0.18463455562024766, 0.16494759012571647, 0.15156985997328232, 0.1712535502736111, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03991437761352046, 0.046493324354639265, 0.04962223167470092, 0.03946175643334515, 0.04892645438372889, 0.03971910757201769, 0.05145073654457499, 0.05271430366421215, 0.0532437161164091, 0.03611507098324929, 0.032956465247350075, 0.033426903274105246, 0.022472231357738903, 0.03557257342315401, 0.06035152054349924, 0.037556656932122845, 0.042085253745804185, 0.03431186746918902, 0.07611892983986235, 0.07075523044568033, 0.07835352370147097, 0.08443500624373734, 0.07656724338191523, 0.082915552487555, 0.11167428539471635, 0.0813202997545539, 0.08496645595812224, 0.07446335365051471, 0.094137148480687, 0.0943191831621889, 0.07615255083127503, 0.07725772246833695, 0.06844722822330529, 0.10907459071212122, 0.07540705291682903, 0.06903113525973825, 0.1310878391805378, 0.14926831466107382, 0.11460391461301656, 0.12777548494020907, 0.13089353839055762, 0.10962261659242378, 0.13069946744862826, 0.13392876943798893, 0.1524723377682018, 9.999999999998899e-05, 0.00026682595549532007, 9.999999999998899e-05, 0.00016940050844149734, 0.06147951580393618, 0.0003157102852685556, 0.011481130727645006, 0.01988121578386781, 0.024267817373252565, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001214151984028966, 0.001611367878360359, 0.013206087409304734, 0.011056662652730642, 9.999999999998899e-05, 0.0009514813100383046, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04721708651818701, 0.05197114413667003, 0.0386948368710166, 0.037632121919831896, 0.10147487656275245, 0.04891274383275701, 0.08585832734420928, 0.06320914615909534, 0.037479583090164637, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18897323117151354, 0.1765458213090142, 0.1860445181619773, 0.208241746526729, 0.19103203781924927, 0.1822267526154977, 0.21045682674128352, 0.1929721036885198, 0.19044683489598258, 0.044099870842068234, 0.05898295342028559, 0.04343094816658244, 0.04921753104786697, 0.03863524523975104, 0.04316682817750184, 0.048972741460339586, 0.05014433705709653, 0.04582010910611645, 0.12967757830450588, 0.13120455004592935, 0.16437854876796887, 0.13958886821769534, 0.15917150289693272, 0.1369999125259832, 0.14883107129577233, 0.14018871768332097, 0.13778177098668531, 0.16482113238219587, 0.16936926021055332, 0.1599659059574613, 0.15730538781681536, 0.17787798463675752, 0.16332017161450607, 0.18749815573904594, 0.1935855176907021, 0.15567035673088525, 0.10852501190653274, 0.13157756932662956, 0.11828220817654578, 0.10156684747899924, 0.10427139292325704, 0.1099169010747244, 0.143928421342305, 0.12394958257203037, 0.11363809575142025, 0.14706768168567053, 0.1652160144839896, 0.17445296971185054, 0.18035016947963123, 0.14247159357339423, 0.17205508280181514, 0.1549503032242141, 0.16128820346441952, 0.22346814407072946, 0.13054895064215544, 0.13436789035625374, 0.15125465288152684, 0.1651750582454642, 0.12332111886681996, 0.14362721887886531, 0.14703145190136546, 0.15084058377026044, 0.1701502076970104, 0.1512271805209937, 0.1670488650629668, 0.1501571338354012, 0.2003483219651243, 0.208925577846238, 0.18753252943454424, 0.16491413478256256, 0.1530568427595963, 0.15794476001393398, 0.1554841455435848, 0.17075404124099436, 0.14087461704597481, 0.21596605927678825, 0.17915530680005776, 0.2329318907684561, 0.15571153850912434, 0.19485515949929177, 0.15629169247862285, 0.19007939663331974, 0.18861093763474135, 0.18350103041292376, 0.19337866107246438, 0.18387610276927824, 0.18015175541938666, 0.18475213597364204, 0.1871834542126556, 0.18707552052375565, 0.05259916627198036, 0.05348613635923105, 0.04917504436244069, 0.04977446315826295, 0.06071740286585903, 0.05219176137764514, 0.05636765498383933, 0.05097570541817298, 0.06964073640743718]}, "mutation_prompt": null}
{"id": "600382da-bddc-4da9-9c3e-7b4b9a749fa5", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Enhancing efficiency by consolidating repeated operations and optimizing data structure utilization.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20438920353475076, 0.219679531440092, 0.21906497672011804, 0.2094388064085928, 0.21596863419291035, 0.24008684531363456, 0.21767731167036075, 0.20909814397486393, 0.2148432505903367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610795629303778, 0.07409698785303953, 0.05271465011633136, 0.06925367492463919, 0.06696952445680149, 0.07090486132715801, 0.07587062138952783, 0.0650149535590725, 0.06471224236764994, 0.049228638373888356, 0.041812072318749616, 0.06796105767443517, 0.046979124780548, 0.050980494811149746, 0.04530097722716886, 0.045695029369587026, 0.061426621216498445, 0.051878027571310104, 0.07968833205917802, 0.07054420872168954, 0.08487090484727655, 0.08439035183444521, 0.07981920813101973, 0.08639989743466536, 0.11167139748991595, 0.08142191975437085, 0.0839395340637753, 0.08735012719200497, 0.10026022625232822, 0.11016992159305905, 0.10713053689165208, 0.13319504066487498, 0.09269132547754577, 0.10347316807472451, 0.10996275141562051, 0.09128146848655871, 0.170828140844846, 0.1578960923347842, 0.16532887481991798, 0.19719622791350944, 0.15947857044858138, 0.11561634895565165, 0.1930287182940308, 0.16561770025312794, 0.19270775013356445, 0.045525738664446314, 0.03980464284919161, 0.036079914009348846, 0.034226533980624474, 0.10136947344082492, 0.02059241411269308, 0.047069913469444, 0.058702917085938, 0.04613318288948409, 0.019609472796867866, 0.001282716948515783, 0.07046810808147819, 0.012466163174071676, 0.023723795001327708, 0.062170516329845826, 0.023707240227070492, 0.05893751156820359, 0.04605776242736115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676878552291088, 0.038390586862164455, 0.05406736989896921, 0.10309055460755678, 0.10516750105851824, 0.061910228939073164, 0.06070129819867054, 0.06025453936325409, 0.049228279099600925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002427922701745633, 0.00893190669716315, 0.012768274742765096, 0.0266653085989208, 0.005751444164856179, 0.00567912397131809, 0.015820612482167373, 0.003148410124477641, 0.004531388662965763, 0.2741742635568084, 0.2794507504120407, 0.22046071563458114, 0.20929868158466225, 0.2170589849485558, 0.2536833250233286, 0.2151248586000155, 0.2187238775321504, 0.2239872838908744, 0.07383532432026874, 0.06742059254175015, 0.05904371003261655, 0.06182288429303684, 0.07328797328990422, 0.07624036838465686, 0.06225451444494079, 0.052606381686177484, 0.06114572106336458, 0.13838786406177028, 0.1328535912264227, 0.1645855524558727, 0.13320219771837927, 0.14553792002756838, 0.14151393915246624, 0.15709464527217298, 0.1308850213283398, 0.15253996959613336, 0.1824103535226418, 0.20111240934011698, 0.18988204930751984, 0.19562674204131358, 0.19011181070770555, 0.17039434050609348, 0.20849530540757477, 0.1927328777783458, 0.17572330694954885, 0.1391729657178814, 0.13730019035584395, 0.16446623316052356, 0.13952803403153868, 0.17178788228853226, 0.1221285831368526, 0.16124813638231172, 0.1329070076056953, 0.1258886465086444, 0.18982794983294826, 0.18888102910657212, 0.19875016845086702, 0.18926743486009678, 0.20260298997877468, 0.17671384286946923, 0.18449234406604553, 0.1817681632571132, 0.19514707581003954, 0.14933112922945257, 0.1605800919214062, 0.1590708815184878, 0.1572654470411542, 0.16507319241442509, 0.1479226956406683, 0.16152066110579522, 0.1640347096835003, 0.1713346532744947, 0.2097772400536031, 0.25092540788611206, 0.18148251359443446, 0.17231283663659802, 0.2607408821639945, 0.21034576854859943, 0.22922543649139693, 0.19804381920573622, 0.22615862082205962, 0.20465526401020406, 0.16102039093831044, 0.1730475115618907, 0.2727174845562844, 0.16231072806153257, 0.23835393970524366, 0.17155155202850347, 0.19844144778069372, 0.17227640976827863, 0.19011405675133353, 0.19240050283901622, 0.17624937086475, 0.18585867036140447, 0.18755042226816743, 0.17616735570250242, 0.18569214940737233, 0.18103259660820437, 0.17956588559045572, 0.06616409500353926, 0.07551023843251548, 0.053977585073969436, 0.0622742478238697, 0.0677508087867934, 0.061209449912793756, 0.06955542655974856, 0.05713387771211309, 0.06955024329829884]}, "mutation_prompt": null}
{"id": "c00830db-b01d-4ba7-afbf-27a80da2b738", "solution": "import numpy as np\n\nclass DynamicAdaptiveFireflyAlgorithm:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.05, self.dim)  # Dynamic adaptive step size\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "DynamicAdaptiveFireflyAlgorithm", "description": "Enhancing convergence by dynamically adjusting step size and attractiveness values during optimization.", "configspace": "", "generation": 98, "fitness": 0.109434928347658, "feedback": "The algorithm DynamicAdaptiveFireflyAlgorithm got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.08.", "error": "", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20474145495947826, 0.21865187262977148, 0.21561878557388825, 0.20962381515107287, 0.21562134733142546, 0.24206025326264324, 0.2179644753651876, 0.21094112251120323, 0.21639448024730823, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06603878137592978, 0.07278535446618717, 0.0615932637254637, 0.06696299972505226, 0.056846502768806206, 0.06506749350964636, 0.06434226658305164, 0.06618748353489012, 0.07739686555527292, 0.05215085780020379, 0.04477884415513833, 0.06232111261851547, 0.039765779526941714, 0.0415496837454542, 0.05613128229834041, 0.04870724452120634, 0.061447839997617715, 0.05968694505462824, 0.07866187430789484, 0.07014959791937414, 0.0835155436015419, 0.08419358966567325, 0.07952325096285606, 0.08467052149233134, 0.1116663080371878, 0.08124460250708632, 0.08186854215618133, 0.08745143722533211, 0.10063579950409463, 0.11000076795592117, 0.10633388199108174, 0.1340589839434797, 0.09244755419112394, 0.10326479882258977, 0.10843691163517466, 0.09196161514775703, 0.17121670588023097, 0.16106814107624445, 0.16710948710952012, 0.19748638701644605, 0.15814844915296256, 0.11467517030886465, 0.19079498200119782, 0.1671056378672311, 0.18940230601367636, 0.04388310182639421, 0.039000294198331176, 0.031566280026544935, 0.03333016086871199, 0.09174846667059122, 0.019775723334844453, 0.04702953790273734, 0.048791341075039574, 0.049535739935985146, 0.019752123775073627, 0.0032893298270102456, 0.05684545452601031, 0.011984266898539708, 0.027802534258682177, 0.06498556644470099, 0.023372349441793228, 0.05614024237665438, 0.04196754536522762, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07858712975746673, 0.05069926650327872, 0.07925955490431225, 0.05946149620604102, 0.11688733174175636, 0.07388467805700583, 0.06392646084577558, 0.08380395028410914, 0.07399805971523654, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0022454071244383256, 0.008221232853743654, 0.0040824016318919965, 0.02986542356819666, 0.005723334523591972, 0.005916104351948559, 0.015086816866544006, 0.005181700146495327, 0.004504710146462143, 0.2791576281784057, 0.2867808281779174, 0.21976877989016064, 0.20797416321676299, 0.2148516414825552, 0.26031354127278006, 0.21744543678372852, 0.21880304152934338, 0.226527080023186, 0.05248509758492803, 0.06187140393597079, 0.05882978838341313, 0.06555396292829552, 0.07739536137320135, 0.06659747330511345, 0.05697768864910191, 0.0539201734525222, 0.0633044942490717, 0.13671995645019275, 0.1334370068586439, 0.16460322616106515, 0.13092731569720906, 0.14578620843236678, 0.1413859965084966, 0.14607425327685364, 0.1284808245404362, 0.14957100411091306, 0.17993192158485838, 0.20596728408421094, 0.20017775772081992, 0.1972886939008779, 0.18699186618211017, 0.1710481369364596, 0.20302091570616054, 0.18739079072434617, 0.19070278640133087, 0.12723879555472617, 0.13705174246608842, 0.15228193594273276, 0.1332471149211577, 0.13884486530054618, 0.13231099072639496, 0.15185065917378038, 0.13302798615818412, 0.13809431748180523, 0.18209310698016656, 0.18083992627585255, 0.19022169139301637, 0.1806423359238144, 0.18352581774448495, 0.18790654683416796, 0.1625192248185593, 0.17193909595487478, 0.18847446823704883, 0.15196247062708101, 0.15965831397140628, 0.15961388195825277, 0.15509614771159375, 0.16149260015839195, 0.14691292071378226, 0.1620792923601715, 0.16574724972696553, 0.1739223940488459, 0.21160746417604914, 0.2559446751386486, 0.17382750675627723, 0.17215563173409243, 0.2594601195714602, 0.21565764447657854, 0.23010417537288563, 0.19304444664857012, 0.2412128008373562, 0.20541423241214485, 0.15980593934618426, 0.16767735070056355, 0.2531205980507675, 0.1531367112461972, 0.2558076958923592, 0.18494573222325794, 0.1962515167953819, 0.17411570068060667, 0.19005794705514023, 0.19055123699250753, 0.17768737605401985, 0.186895190599083, 0.1774917670768753, 0.18989688808339755, 0.1925138124099821, 0.18218913267172776, 0.1710673455634818, 0.054637357907404316, 0.07041608664718602, 0.0608564470723284, 0.0669628769373306, 0.07301278696507141, 0.059675338827215096, 0.06806462510408418, 0.057236467679478986, 0.07147630106218317]}, "mutation_prompt": null}
{"id": "8659cdc1-a5c0-48e9-a48b-11cf8cef2559", "solution": "import numpy as np\n\nclass EnhancedAdaptiveFireflyAlgorithmImproved:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.alpha = 0.1\n        self.beta = 0.9\n        self.lower_bound, self.upper_bound = self.bounds\n        self.attractiveness_values = np.exp(-np.linspace(0, 2, num=self.dim))  # Precompute attractiveness values\n\n    def __call__(self, func):\n        best_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n        best_fitness = func(best_solution)\n\n        for _ in range(self.budget):\n            current_solution = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n            current_fitness = func(current_solution)\n\n            if current_fitness < best_fitness:\n                best_solution, best_fitness = current_solution, current_fitness\n\n            step_size = np.random.normal(0, 0.1, self.dim)  # Improved Exploration\n            current_solution = self.beta * current_solution + self.alpha * best_solution + step_size\n            current_solution = np.clip(current_solution, self.lower_bound, self.upper_bound)\n\n            new_solution = current_solution * (1 - self.attractiveness_values) + best_solution * self.attractiveness_values\n            if func(new_solution) < current_fitness:\n                current_solution = new_solution\n\n        return best_solution", "name": "EnhancedAdaptiveFireflyAlgorithmImproved", "description": "Enhancing efficiency by consolidating repeated operations and optimizing data structure utilization.", "configspace": "", "generation": 52, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "14e80036-f106-4806-b19a-afb554bffb78", "metadata": {"aucs": [0.20438920353475076, 0.219679531440092, 0.21906497672011804, 0.2094388064085928, 0.21596863419291035, 0.24008684531363456, 0.21767731167036075, 0.20909814397486393, 0.2148432505903367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06610795629303778, 0.07409698785303953, 0.05271465011633136, 0.06925367492463919, 0.06696952445680149, 0.07090486132715801, 0.07587062138952783, 0.0650149535590725, 0.06471224236764994, 0.049228638373888356, 0.041812072318749616, 0.06796105767443517, 0.046979124780548, 0.050980494811149746, 0.04530097722716886, 0.045695029369587026, 0.061426621216498445, 0.051878027571310104, 0.07968833205917802, 0.07054420872168954, 0.08487090484727655, 0.08439035183444521, 0.07981920813101973, 0.08639989743466536, 0.11167139748991595, 0.08142191975437085, 0.0839395340637753, 0.08735012719200497, 0.10026022625232822, 0.11016992159305905, 0.10713053689165208, 0.13319504066487498, 0.09269132547754577, 0.10347316807472451, 0.10996275141562051, 0.09128146848655871, 0.170828140844846, 0.1578960923347842, 0.16532887481991798, 0.19719622791350944, 0.15947857044858138, 0.11561634895565165, 0.1930287182940308, 0.16561770025312794, 0.19270775013356445, 0.045525738664446314, 0.03980464284919161, 0.036079914009348846, 0.034226533980624474, 0.10136947344082492, 0.02059241411269308, 0.047069913469444, 0.058702917085938, 0.04613318288948409, 0.019609472796867866, 0.001282716948515783, 0.07046810808147819, 0.012466163174071676, 0.023723795001327708, 0.062170516329845826, 0.023707240227070492, 0.05893751156820359, 0.04605776242736115, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0676878552291088, 0.038390586862164455, 0.05406736989896921, 0.10309055460755678, 0.10516750105851824, 0.061910228939073164, 0.06070129819867054, 0.06025453936325409, 0.049228279099600925, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002427922701745633, 0.00893190669716315, 0.012768274742765096, 0.0266653085989208, 0.005751444164856179, 0.00567912397131809, 0.015820612482167373, 0.003148410124477641, 0.004531388662965763, 0.2741742635568084, 0.2794507504120407, 0.22046071563458114, 0.20929868158466225, 0.2170589849485558, 0.2536833250233286, 0.2151248586000155, 0.2187238775321504, 0.2239872838908744, 0.07383532432026874, 0.06742059254175015, 0.05904371003261655, 0.06182288429303684, 0.07328797328990422, 0.07624036838465686, 0.06225451444494079, 0.052606381686177484, 0.06114572106336458, 0.13838786406177028, 0.1328535912264227, 0.1645855524558727, 0.13320219771837927, 0.14553792002756838, 0.14151393915246624, 0.15709464527217298, 0.1308850213283398, 0.15253996959613336, 0.1824103535226418, 0.20111240934011698, 0.18988204930751984, 0.19562674204131358, 0.19011181070770555, 0.17039434050609348, 0.20849530540757477, 0.1927328777783458, 0.17572330694954885, 0.1391729657178814, 0.13730019035584395, 0.16446623316052356, 0.13952803403153868, 0.17178788228853226, 0.1221285831368526, 0.16124813638231172, 0.1329070076056953, 0.1258886465086444, 0.18982794983294826, 0.18888102910657212, 0.19875016845086702, 0.18926743486009678, 0.20260298997877468, 0.17671384286946923, 0.18449234406604553, 0.1817681632571132, 0.19514707581003954, 0.14933112922945257, 0.1605800919214062, 0.1590708815184878, 0.1572654470411542, 0.16507319241442509, 0.1479226956406683, 0.16152066110579522, 0.1640347096835003, 0.1713346532744947, 0.2097772400536031, 0.25092540788611206, 0.18148251359443446, 0.17231283663659802, 0.2607408821639945, 0.21034576854859943, 0.22922543649139693, 0.19804381920573622, 0.22615862082205962, 0.20465526401020406, 0.16102039093831044, 0.1730475115618907, 0.2727174845562844, 0.16231072806153257, 0.23835393970524366, 0.17155155202850347, 0.19844144778069372, 0.17227640976827863, 0.19011405675133353, 0.19240050283901622, 0.17624937086475, 0.18585867036140447, 0.18755042226816743, 0.17616735570250242, 0.18569214940737233, 0.18103259660820437, 0.17956588559045572, 0.06616409500353926, 0.07551023843251548, 0.053977585073969436, 0.0622742478238697, 0.0677508087867934, 0.061209449912793756, 0.06955542655974856, 0.05713387771211309, 0.06955024329829884]}, "mutation_prompt": null}
