{"id": "8fcdbc1c-27ef-414a-afc2-42c914c0c43c", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n        \n        def pitch_adjustment(new_solution, index):\n            if np.random.rand() < self.par:\n                new_solution[index] = new_solution[index] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                new_solution[index] = np.clip(new_solution[index], self.lower_bound, self.upper_bound)\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        for _ in range(self.budget - self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = harmony_memory[np.random.choice(self.budget)][i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                new_solution = pitch_adjustment(new_solution, i)\n            \n            new_fitness = func(new_solution)\n            worst_index = np.argmax(fitness)\n            if new_fitness < fitness[worst_index]:\n                harmony_memory[worst_index] = new_solution\n                fitness[worst_index] = new_fitness\n        \n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "HarmonySearch", "description": "Harmony Search Algorithm with Pitch Adjustment for global optimization in continuous search spaces with a focus on improvisation and harmony among solutions.", "configspace": "", "generation": 0, "fitness": 0.09144843562834938, "feedback": "The algorithm HarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": null, "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "280821ea-c42c-4802-8064-e1ab84b93a2d", "solution": "import numpy as np\n\nclass ImprovedHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.6  # Increased pitch adjustment rate for faster convergence\n        self.bandwidth = 0.01\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.budget, self.dim))\n        \n        def pitch_adjustment(new_solution, index):\n            if np.random.rand() < self.par:\n                new_solution[index] = new_solution[index] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                new_solution[index] = np.clip(new_solution[index], self.lower_bound, self.upper_bound)\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        for _ in range(self.budget - self.budget):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = harmony_memory[np.random.choice(self.budget)][i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                new_solution = pitch_adjustment(new_solution, i)\n            \n            new_fitness = func(new_solution)\n            worst_index = np.argmax(fitness)\n            if new_fitness < fitness[worst_index]:\n                harmony_memory[worst_index] = new_solution\n                fitness[worst_index] = new_fitness\n        \n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "ImprovedHarmonySearch", "description": "Improved Harmony Search algorithm by increasing the pitch adjustment frequency to accelerate convergence speed.", "configspace": "", "generation": 1, "fitness": 0.09144843562834938, "feedback": "The algorithm ImprovedHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "8fcdbc1c-27ef-414a-afc2-42c914c0c43c", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "834b4995-710a-441f-b25d-8170a7fdfbfb", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n        \n        def pitch_adjustment(new_solution, index):\n            if np.random.rand() < self.par:\n                new_solution[index] = new_solution[index] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                new_solution[index] = np.clip(new_solution[index], self.lower_bound, self.upper_bound)\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        for _ in range(self.budget - self.hm_size):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                new_solution = pitch_adjustment(new_solution, i)\n            \n            new_fitness = func(new_solution)\n            worst_index = np.argmax(fitness)\n            if new_fitness < fitness[worst_index]:\n                harmony_memory[worst_index] = new_solution\n                fitness[worst_index] = new_fitness\n        \n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "HarmonySearch", "description": "Implementing a dynamic adjustment of harmony memory size to accelerate convergence speed.", "configspace": "", "generation": 2, "fitness": 0.09209739195460784, "feedback": "The algorithm HarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "8fcdbc1c-27ef-414a-afc2-42c914c0c43c", "metadata": {"aucs": [0.1789408704506784, 0.18443113441419445, 0.170257377687277, 0.16845369514743413, 0.1887321429076464, 0.1743435064021196, 0.1785507992358102, 0.16818840676309266, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.04643027155915769, 0.04436851469293046, 0.04137605644034248, 0.039255863316133954, 0.04069404259881226, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.02713814741892273, 0.031236345397765986, 0.0481463786277756, 0.026352084051374902, 0.04926774209271334, 0.058586096532927345, 0.03696417075239278, 0.03992308285267243, 0.030064743771497482, 0.08746944629118047, 0.07536023512959622, 0.09177165450997615, 0.08406035551304814, 0.08209693832612663, 0.08639412375773481, 0.0850957688644759, 0.08621299315765485, 0.08106540515002358, 0.08998019275133795, 0.08043910737458537, 0.10171882691615464, 0.05944881943290037, 0.062276416502640486, 0.05190122563388122, 0.09472457566024695, 0.05949499265072011, 0.09591017232693244, 0.12945843704098736, 0.19308637766117165, 0.1481850439168273, 0.11441624792391392, 0.10699204205912771, 0.1308462266855649, 0.13631651829905844, 0.1368487698841222, 0.1427848603687687, 9.999999999998899e-05, 0.00031647917899457756, 0.007869356134754701, 9.999999999998899e-05, 0.0005918231681251163, 0.0011134427009412695, 9.999999999998899e-05, 9.999999999998899e-05, 0.028707033284604444, 0.0014551984909143556, 0.06957272857429797, 9.999999999998899e-05, 0.010999473454681774, 0.04210891212603851, 0.011860097762603106, 0.020875177286989288, 0.006568189490159582, 0.0037559098983136474, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.07200575539237197, 0.04687650024452816, 0.07162680553906065, 0.027343806707245677, 0.055770453722678415, 0.05295698494644707, 0.07098016574908539, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001737012993299536, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19875935803916533, 0.18871989383333243, 0.20763685792806263, 0.19866550384498738, 0.20724700933075846, 0.1979222845186166, 0.18176954825076785, 0.19630234337258567, 0.04680390455819994, 0.03863584399492881, 0.04401887178405428, 0.040942859993882474, 0.04579056553011729, 0.04723486030035051, 0.073263588849099, 0.043993360971981255, 0.05241710896851526, 0.13709410100555053, 0.1266318380740522, 0.12602203673178558, 0.14776549116968674, 0.16265225311039289, 0.12439502916632517, 0.15151205737607965, 0.14861619065631115, 0.12889570042246645, 0.16581136048861322, 0.1602946355871694, 0.1681684972376104, 0.17021156503922463, 0.1821496595795835, 0.1769644640004372, 0.1627711288681667, 0.17613062285397574, 0.1508208478198898, 0.1062088030534345, 0.10664979078240266, 0.11109541918010746, 0.10978923820566577, 0.13610603218022022, 0.11691565596505482, 0.1047405734700314, 0.1237427242099084, 0.1229185550255375, 0.15316442920217743, 0.16233450221944246, 0.14651130032880433, 0.1635580474555136, 0.14661690019428475, 0.16236042742370171, 0.15507600922648113, 0.17355151355563359, 0.18277724523822958, 0.14537082436836646, 0.14968281076082857, 0.14206236829172614, 0.1417091864481781, 0.145078867952399, 0.15638753810198391, 0.13697870895265896, 0.14164044590726022, 0.16212350615373505, 0.18402833448490363, 0.16679477618376493, 0.16807609292895265, 0.15946758961141982, 0.16837420250831403, 0.14470149766563956, 0.18370485718109264, 0.1634028490223587, 0.15718633160406947, 0.19145030324694579, 0.16837538973784993, 0.16989678715961676, 0.15228642864352548, 0.1548866293868134, 0.17186349825411884, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.17280676976022147, 0.18511375889913628, 0.17795503803082358, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.18283939778757308, 0.188688463014553, 0.20568880668582523, 0.058344077551123696, 0.05453647730886946, 0.06585155299632517, 0.05247622116313777, 0.06407608140401189, 0.05720389716033536, 0.07532529613519179, 0.054921685339196835, 0.05099605572629462]}, "mutation_prompt": null}
{"id": "90f6b0b2-d1b7-4950-b602-ea6a95764a20", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n        \n        def pitch_adjustment(new_solution, index):\n            if np.random.rand() < self.par:\n                new_solution[index] = new_solution[index] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                new_solution[index] = np.clip(new_solution[index], self.lower_bound, self.upper_bound)\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        for _ in range(self.budget - self.hm_size):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                new_solution = pitch_adjustment(new_solution, i)\n            \n            new_fitness = func(new_solution)\n            worst_index = np.argmax(fitness)\n            if new_fitness < fitness[worst_index]:\n                harmony_memory[worst_index] = new_solution\n                fitness[worst_index] = new_fitness\n        \n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "HarmonySearch", "description": "Implementing a dynamic adjustment of harmony memory size to accelerate convergence speed.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "834b4995-710a-441f-b25d-8170a7fdfbfb", "metadata": {"aucs": [0.1789408704506784, 0.18443113441419445, 0.170257377687277, 0.16845369514743413, 0.1887321429076464, 0.1743435064021196, 0.1785507992358102, 0.16818840676309266, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.04643027155915769, 0.04436851469293046, 0.04137605644034248, 0.039255863316133954, 0.04069404259881226, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.02713814741892273, 0.031236345397765986, 0.0481463786277756, 0.026352084051374902, 0.04926774209271334, 0.058586096532927345, 0.03696417075239278, 0.03992308285267243, 0.030064743771497482, 0.08746944629118047, 0.07536023512959622, 0.09177165450997615, 0.08406035551304814, 0.08209693832612663, 0.08639412375773481, 0.0850957688644759, 0.08621299315765485, 0.08106540515002358, 0.08998019275133795, 0.08043910737458537, 0.10171882691615464, 0.05944881943290037, 0.062276416502640486, 0.05190122563388122, 0.09472457566024695, 0.05949499265072011, 0.09591017232693244, 0.12945843704098736, 0.19308637766117165, 0.1481850439168273, 0.11441624792391392, 0.10699204205912771, 0.1308462266855649, 0.13631651829905844, 0.1368487698841222, 0.1427848603687687, 9.999999999998899e-05, 0.00031647917899457756, 0.007869356134754701, 9.999999999998899e-05, 0.0005918231681251163, 0.0011134427009412695, 9.999999999998899e-05, 9.999999999998899e-05, 0.028707033284604444, 0.0014551984909143556, 0.06957272857429797, 9.999999999998899e-05, 0.010999473454681774, 0.04210891212603851, 0.011860097762603106, 0.020875177286989288, 0.006568189490159582, 0.0037559098983136474, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.07200575539237197, 0.04687650024452816, 0.07162680553906065, 0.027343806707245677, 0.055770453722678415, 0.05295698494644707, 0.07098016574908539, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001737012993299536, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19875935803916533, 0.18871989383333243, 0.20763685792806263, 0.19866550384498738, 0.20724700933075846, 0.1979222845186166, 0.18176954825076785, 0.19630234337258567, 0.04680390455819994, 0.03863584399492881, 0.04401887178405428, 0.040942859993882474, 0.04579056553011729, 0.04723486030035051, 0.073263588849099, 0.043993360971981255, 0.05241710896851526, 0.13709410100555053, 0.1266318380740522, 0.12602203673178558, 0.14776549116968674, 0.16265225311039289, 0.12439502916632517, 0.15151205737607965, 0.14861619065631115, 0.12889570042246645, 0.16581136048861322, 0.1602946355871694, 0.1681684972376104, 0.17021156503922463, 0.1821496595795835, 0.1769644640004372, 0.1627711288681667, 0.17613062285397574, 0.1508208478198898, 0.1062088030534345, 0.10664979078240266, 0.11109541918010746, 0.10978923820566577, 0.13610603218022022, 0.11691565596505482, 0.1047405734700314, 0.1237427242099084, 0.1229185550255375, 0.15316442920217743, 0.16233450221944246, 0.14651130032880433, 0.1635580474555136, 0.14661690019428475, 0.16236042742370171, 0.15507600922648113, 0.17355151355563359, 0.18277724523822958, 0.14537082436836646, 0.14968281076082857, 0.14206236829172614, 0.1417091864481781, 0.145078867952399, 0.15638753810198391, 0.13697870895265896, 0.14164044590726022, 0.16212350615373505, 0.18402833448490363, 0.16679477618376493, 0.16807609292895265, 0.15946758961141982, 0.16837420250831403, 0.14470149766563956, 0.18370485718109264, 0.1634028490223587, 0.15718633160406947, 0.19145030324694579, 0.16837538973784993, 0.16989678715961676, 0.15228642864352548, 0.1548866293868134, 0.17186349825411884, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.17280676976022147, 0.18511375889913628, 0.17795503803082358, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.18283939778757308, 0.188688463014553, 0.20568880668582523, 0.058344077551123696, 0.05453647730886946, 0.06585155299632517, 0.05247622116313777, 0.06407608140401189, 0.05720389716033536, 0.07532529613519179, 0.054921685339196835, 0.05099605572629462]}, "mutation_prompt": null}
{"id": "54a31c49-73e6-40c2-8e6c-fc6be09a3107", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n        \n        def pitch_adjustment(new_solution, index):\n            if np.random.rand() < self.par:\n                new_solution[index] = new_solution[index] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                new_solution[index] = np.clip(new_solution[index], self.lower_bound, self.upper_bound)\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        for _ in range(self.budget - self.hm_size):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                new_solution = pitch_adjustment(new_solution, i)\n            \n            new_fitness = func(new_solution)\n            worst_index = np.argmax(fitness)\n            if new_fitness < fitness[worst_index]:\n                harmony_memory[worst_index] = new_solution\n                fitness[worst_index] = new_fitness\n        \n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "HarmonySearch", "description": "Implementing a dynamic adjustment of harmony memory size to accelerate convergence speed.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "834b4995-710a-441f-b25d-8170a7fdfbfb", "metadata": {"aucs": [0.1789408704506784, 0.18443113441419445, 0.170257377687277, 0.16845369514743413, 0.1887321429076464, 0.1743435064021196, 0.1785507992358102, 0.16818840676309266, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.04643027155915769, 0.04436851469293046, 0.04137605644034248, 0.039255863316133954, 0.04069404259881226, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.02713814741892273, 0.031236345397765986, 0.0481463786277756, 0.026352084051374902, 0.04926774209271334, 0.058586096532927345, 0.03696417075239278, 0.03992308285267243, 0.030064743771497482, 0.08746944629118047, 0.07536023512959622, 0.09177165450997615, 0.08406035551304814, 0.08209693832612663, 0.08639412375773481, 0.0850957688644759, 0.08621299315765485, 0.08106540515002358, 0.08998019275133795, 0.08043910737458537, 0.10171882691615464, 0.05944881943290037, 0.062276416502640486, 0.05190122563388122, 0.09472457566024695, 0.05949499265072011, 0.09591017232693244, 0.12945843704098736, 0.19308637766117165, 0.1481850439168273, 0.11441624792391392, 0.10699204205912771, 0.1308462266855649, 0.13631651829905844, 0.1368487698841222, 0.1427848603687687, 9.999999999998899e-05, 0.00031647917899457756, 0.007869356134754701, 9.999999999998899e-05, 0.0005918231681251163, 0.0011134427009412695, 9.999999999998899e-05, 9.999999999998899e-05, 0.028707033284604444, 0.0014551984909143556, 0.06957272857429797, 9.999999999998899e-05, 0.010999473454681774, 0.04210891212603851, 0.011860097762603106, 0.020875177286989288, 0.006568189490159582, 0.0037559098983136474, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.07200575539237197, 0.04687650024452816, 0.07162680553906065, 0.027343806707245677, 0.055770453722678415, 0.05295698494644707, 0.07098016574908539, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001737012993299536, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19875935803916533, 0.18871989383333243, 0.20763685792806263, 0.19866550384498738, 0.20724700933075846, 0.1979222845186166, 0.18176954825076785, 0.19630234337258567, 0.04680390455819994, 0.03863584399492881, 0.04401887178405428, 0.040942859993882474, 0.04579056553011729, 0.04723486030035051, 0.073263588849099, 0.043993360971981255, 0.05241710896851526, 0.13709410100555053, 0.1266318380740522, 0.12602203673178558, 0.14776549116968674, 0.16265225311039289, 0.12439502916632517, 0.15151205737607965, 0.14861619065631115, 0.12889570042246645, 0.16581136048861322, 0.1602946355871694, 0.1681684972376104, 0.17021156503922463, 0.1821496595795835, 0.1769644640004372, 0.1627711288681667, 0.17613062285397574, 0.1508208478198898, 0.1062088030534345, 0.10664979078240266, 0.11109541918010746, 0.10978923820566577, 0.13610603218022022, 0.11691565596505482, 0.1047405734700314, 0.1237427242099084, 0.1229185550255375, 0.15316442920217743, 0.16233450221944246, 0.14651130032880433, 0.1635580474555136, 0.14661690019428475, 0.16236042742370171, 0.15507600922648113, 0.17355151355563359, 0.18277724523822958, 0.14537082436836646, 0.14968281076082857, 0.14206236829172614, 0.1417091864481781, 0.145078867952399, 0.15638753810198391, 0.13697870895265896, 0.14164044590726022, 0.16212350615373505, 0.18402833448490363, 0.16679477618376493, 0.16807609292895265, 0.15946758961141982, 0.16837420250831403, 0.14470149766563956, 0.18370485718109264, 0.1634028490223587, 0.15718633160406947, 0.19145030324694579, 0.16837538973784993, 0.16989678715961676, 0.15228642864352548, 0.1548866293868134, 0.17186349825411884, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.17280676976022147, 0.18511375889913628, 0.17795503803082358, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.18283939778757308, 0.188688463014553, 0.20568880668582523, 0.058344077551123696, 0.05453647730886946, 0.06585155299632517, 0.05247622116313777, 0.06407608140401189, 0.05720389716033536, 0.07532529613519179, 0.054921685339196835, 0.05099605572629462]}, "mutation_prompt": null}
{"id": "75fc05e8-ff56-4eb8-b9b6-f15933876d53", "solution": "import numpy as np\n\nclass HarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n        \n        def pitch_adjustment(new_solution, index):\n            if np.random.rand() < self.par:\n                new_solution[index] = new_solution[index] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                new_solution[index] = np.clip(new_solution[index], self.lower_bound, self.upper_bound)\n            return new_solution\n        \n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        for _ in range(self.budget - self.hm_size):\n            new_solution = np.zeros(self.dim)\n            for i in range(self.dim):\n                if np.random.rand() < self.hmcr:\n                    new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                else:\n                    new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                new_solution = pitch_adjustment(new_solution, i)\n            \n            new_fitness = func(new_solution)\n            worst_index = np.argmax(fitness)\n            if new_fitness < fitness[worst_index]:\n                harmony_memory[worst_index] = new_solution\n                fitness[worst_index] = new_fitness\n        \n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "HarmonySearch", "description": "Implementing a dynamic adjustment of harmony memory size to accelerate convergence speed.", "configspace": "", "generation": 3, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "834b4995-710a-441f-b25d-8170a7fdfbfb", "metadata": {"aucs": [0.1789408704506784, 0.18443113441419445, 0.170257377687277, 0.16845369514743413, 0.1887321429076464, 0.1743435064021196, 0.1785507992358102, 0.16818840676309266, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.04643027155915769, 0.04436851469293046, 0.04137605644034248, 0.039255863316133954, 0.04069404259881226, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.02713814741892273, 0.031236345397765986, 0.0481463786277756, 0.026352084051374902, 0.04926774209271334, 0.058586096532927345, 0.03696417075239278, 0.03992308285267243, 0.030064743771497482, 0.08746944629118047, 0.07536023512959622, 0.09177165450997615, 0.08406035551304814, 0.08209693832612663, 0.08639412375773481, 0.0850957688644759, 0.08621299315765485, 0.08106540515002358, 0.08998019275133795, 0.08043910737458537, 0.10171882691615464, 0.05944881943290037, 0.062276416502640486, 0.05190122563388122, 0.09472457566024695, 0.05949499265072011, 0.09591017232693244, 0.12945843704098736, 0.19308637766117165, 0.1481850439168273, 0.11441624792391392, 0.10699204205912771, 0.1308462266855649, 0.13631651829905844, 0.1368487698841222, 0.1427848603687687, 9.999999999998899e-05, 0.00031647917899457756, 0.007869356134754701, 9.999999999998899e-05, 0.0005918231681251163, 0.0011134427009412695, 9.999999999998899e-05, 9.999999999998899e-05, 0.028707033284604444, 0.0014551984909143556, 0.06957272857429797, 9.999999999998899e-05, 0.010999473454681774, 0.04210891212603851, 0.011860097762603106, 0.020875177286989288, 0.006568189490159582, 0.0037559098983136474, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.07200575539237197, 0.04687650024452816, 0.07162680553906065, 0.027343806707245677, 0.055770453722678415, 0.05295698494644707, 0.07098016574908539, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001737012993299536, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19875935803916533, 0.18871989383333243, 0.20763685792806263, 0.19866550384498738, 0.20724700933075846, 0.1979222845186166, 0.18176954825076785, 0.19630234337258567, 0.04680390455819994, 0.03863584399492881, 0.04401887178405428, 0.040942859993882474, 0.04579056553011729, 0.04723486030035051, 0.073263588849099, 0.043993360971981255, 0.05241710896851526, 0.13709410100555053, 0.1266318380740522, 0.12602203673178558, 0.14776549116968674, 0.16265225311039289, 0.12439502916632517, 0.15151205737607965, 0.14861619065631115, 0.12889570042246645, 0.16581136048861322, 0.1602946355871694, 0.1681684972376104, 0.17021156503922463, 0.1821496595795835, 0.1769644640004372, 0.1627711288681667, 0.17613062285397574, 0.1508208478198898, 0.1062088030534345, 0.10664979078240266, 0.11109541918010746, 0.10978923820566577, 0.13610603218022022, 0.11691565596505482, 0.1047405734700314, 0.1237427242099084, 0.1229185550255375, 0.15316442920217743, 0.16233450221944246, 0.14651130032880433, 0.1635580474555136, 0.14661690019428475, 0.16236042742370171, 0.15507600922648113, 0.17355151355563359, 0.18277724523822958, 0.14537082436836646, 0.14968281076082857, 0.14206236829172614, 0.1417091864481781, 0.145078867952399, 0.15638753810198391, 0.13697870895265896, 0.14164044590726022, 0.16212350615373505, 0.18402833448490363, 0.16679477618376493, 0.16807609292895265, 0.15946758961141982, 0.16837420250831403, 0.14470149766563956, 0.18370485718109264, 0.1634028490223587, 0.15718633160406947, 0.19145030324694579, 0.16837538973784993, 0.16989678715961676, 0.15228642864352548, 0.1548866293868134, 0.17186349825411884, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.17280676976022147, 0.18511375889913628, 0.17795503803082358, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.18283939778757308, 0.188688463014553, 0.20568880668582523, 0.058344077551123696, 0.05453647730886946, 0.06585155299632517, 0.05247622116313777, 0.06407608140401189, 0.05720389716033536, 0.07532529613519179, 0.054921685339196835, 0.05099605572629462]}, "mutation_prompt": null}
{"id": "18e3ab5e-d176-47e6-88fd-93b310dbe744", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HarmonySearchParallel:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        def pitch_adjustment(new_solution, index):\n            if np.random.rand() < self.par:\n                new_solution[index] = new_solution[index] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                new_solution[index] = np.clip(new_solution[index], self.lower_bound, self.upper_bound)\n            return new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    for i in range(self.dim):\n                        if np.random.rand() < self.hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution = pitch_adjustment(new_solution, i)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "HarmonySearchParallel", "description": "Implementing a parallel evaluation of candidate solutions to enhance convergence speed.", "configspace": "", "generation": 6, "fitness": 0.09214005758280576, "feedback": "The algorithm HarmonySearchParallel got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "834b4995-710a-441f-b25d-8170a7fdfbfb", "metadata": {"aucs": [0.17986620249623375, 0.18443113441419445, 0.170257377687277, 0.16845369514743413, 0.1895825587206751, 0.17930911073563205, 0.18012986857945668, 0.16892459954718675, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.04436851469293046, 0.039358615885642156, 0.0391188544286486, 0.04069404259881226, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.026972969817388392, 0.030929276720888965, 0.0481463786277756, 0.02629991918313057, 0.04926774209271334, 0.058586096532927345, 0.03696417075239278, 0.03992308285267243, 0.030064743771497482, 0.08746944629118047, 0.0768099071709738, 0.09087431849796956, 0.08337212786138049, 0.08142169189902215, 0.08639412375773481, 0.08589380771356259, 0.08620909750186001, 0.08405909279289758, 0.08998019275133795, 0.08043910737458537, 0.10171882691615464, 0.05944881943290037, 0.062276416502640486, 0.05190122563388122, 0.09472457566024695, 0.05916973983227203, 0.09638557737943698, 0.12945843704098736, 0.19308637766117165, 0.1481850439168273, 0.11441624792391392, 0.10699204205912771, 0.1272000362358101, 0.13631651829905844, 0.1368487698841222, 0.1427848603687687, 9.999999999998899e-05, 0.00031647917899457756, 0.007869356134754701, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001001075890759373, 9.999999999998899e-05, 0.028707033284604444, 0.0014551984909143556, 0.06957272857429797, 9.999999999998899e-05, 0.010999473454681774, 0.04210891212603851, 0.011860097762603106, 0.020875177286989288, 0.006568189490159582, 0.0037559098983136474, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05849261863559363, 0.06858859508378334, 0.046889554430249114, 0.07162680553906065, 0.027343806707245677, 0.055770453722678415, 0.05295698494644707, 0.07098016574908539, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001737012993299536, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19875935803916533, 0.18871989383333243, 0.20763685792806263, 0.19866550384498738, 0.2083660014883587, 0.1979222845186166, 0.18176954825076785, 0.1931214806406164, 0.04680390455819994, 0.04282645354677572, 0.04401887178405428, 0.040915845328740374, 0.04579056553011729, 0.04723486030035051, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.13963128594222074, 0.1261360166635468, 0.1262488757556135, 0.14776549116968674, 0.16265225311039289, 0.12439502916632517, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.1602946355871694, 0.1687861231623119, 0.17021156503922463, 0.1821496595795835, 0.1769644640004372, 0.1627711288681667, 0.17613062285397574, 0.1505258528983906, 0.10673998746898394, 0.10664979078240266, 0.11109541918010746, 0.10978923820566577, 0.13610603218022022, 0.11676919299387534, 0.106310715336144, 0.1237427242099084, 0.1229185550255375, 0.15316442920217743, 0.16233450221944246, 0.14759617036013273, 0.1602255968598032, 0.14697173861808932, 0.16556307710243268, 0.15507600922648113, 0.17355151355563359, 0.18277724523822958, 0.14537082436836646, 0.14968281076082857, 0.14206236829172614, 0.1417091864481781, 0.145078867952399, 0.15638753810198391, 0.13801669104750258, 0.1418229920083015, 0.16212350615373505, 0.18402833448490363, 0.1715099605664242, 0.16807609292895265, 0.15946758961141982, 0.1543811746992011, 0.1451305217536799, 0.18370485718109264, 0.1634028490223587, 0.15718633160406947, 0.19145030324694579, 0.16841331303633156, 0.16989678715961676, 0.15228642864352548, 0.1548866293868134, 0.17186349825411884, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.17280676976022147, 0.18557775061672477, 0.17795503803082358, 0.18683568409856555, 0.2135749380374129, 0.18608960500461136, 0.18283939778757308, 0.188688463014553, 0.20568880668582523, 0.05863246093089436, 0.05455044059576908, 0.06585155299632517, 0.05322184389084783, 0.06407608140401189, 0.05720389716033536, 0.07532529613519179, 0.05491659739916577, 0.05099605572629462]}, "mutation_prompt": null}
{"id": "6aca32ba-7162-4623-b39a-4afb0b37a56e", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HarmonySearchParallel:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        def pitch_adjustment(new_solution, index):\n            if np.random.rand() < self.par:\n                new_solution[index] = new_solution[index] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                new_solution[index] = np.clip(new_solution[index], self.lower_bound, self.upper_bound)\n            return new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    for i in range(self.dim):\n                        if np.random.rand() < self.hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution = pitch_adjustment(new_solution, i)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "HarmonySearchParallel", "description": "Implementing a parallel evaluation of candidate solutions to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "18e3ab5e-d176-47e6-88fd-93b310dbe744", "metadata": {"aucs": [0.17986620249623375, 0.18443113441419445, 0.170257377687277, 0.16845369514743413, 0.1895825587206751, 0.17930911073563205, 0.18012986857945668, 0.16892459954718675, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.04436851469293046, 0.039358615885642156, 0.0391188544286486, 0.04069404259881226, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.026972969817388392, 0.030929276720888965, 0.0481463786277756, 0.02629991918313057, 0.04926774209271334, 0.058586096532927345, 0.03696417075239278, 0.03992308285267243, 0.030064743771497482, 0.08746944629118047, 0.0768099071709738, 0.09087431849796956, 0.08337212786138049, 0.08142169189902215, 0.08639412375773481, 0.08589380771356259, 0.08620909750186001, 0.08405909279289758, 0.08998019275133795, 0.08043910737458537, 0.10171882691615464, 0.05944881943290037, 0.062276416502640486, 0.05190122563388122, 0.09472457566024695, 0.05916973983227203, 0.09638557737943698, 0.12945843704098736, 0.19308637766117165, 0.1481850439168273, 0.11441624792391392, 0.10699204205912771, 0.1272000362358101, 0.13631651829905844, 0.1368487698841222, 0.1427848603687687, 9.999999999998899e-05, 0.00031647917899457756, 0.007869356134754701, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001001075890759373, 9.999999999998899e-05, 0.028707033284604444, 0.0014551984909143556, 0.06957272857429797, 9.999999999998899e-05, 0.010999473454681774, 0.04210891212603851, 0.011860097762603106, 0.020875177286989288, 0.006568189490159582, 0.0037559098983136474, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05849261863559363, 0.06858859508378334, 0.046889554430249114, 0.07162680553906065, 0.027343806707245677, 0.055770453722678415, 0.05295698494644707, 0.07098016574908539, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001737012993299536, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19875935803916533, 0.18871989383333243, 0.20763685792806263, 0.19866550384498738, 0.2083660014883587, 0.1979222845186166, 0.18176954825076785, 0.1931214806406164, 0.04680390455819994, 0.04282645354677572, 0.04401887178405428, 0.040915845328740374, 0.04579056553011729, 0.04723486030035051, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.13963128594222074, 0.1261360166635468, 0.1262488757556135, 0.14776549116968674, 0.16265225311039289, 0.12439502916632517, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.1602946355871694, 0.1687861231623119, 0.17021156503922463, 0.1821496595795835, 0.1769644640004372, 0.1627711288681667, 0.17613062285397574, 0.1505258528983906, 0.10673998746898394, 0.10664979078240266, 0.11109541918010746, 0.10978923820566577, 0.13610603218022022, 0.11676919299387534, 0.106310715336144, 0.1237427242099084, 0.1229185550255375, 0.15316442920217743, 0.16233450221944246, 0.14759617036013273, 0.1602255968598032, 0.14697173861808932, 0.16556307710243268, 0.15507600922648113, 0.17355151355563359, 0.18277724523822958, 0.14537082436836646, 0.14968281076082857, 0.14206236829172614, 0.1417091864481781, 0.145078867952399, 0.15638753810198391, 0.13801669104750258, 0.1418229920083015, 0.16212350615373505, 0.18402833448490363, 0.1715099605664242, 0.16807609292895265, 0.15946758961141982, 0.1543811746992011, 0.1451305217536799, 0.18370485718109264, 0.1634028490223587, 0.15718633160406947, 0.19145030324694579, 0.16841331303633156, 0.16989678715961676, 0.15228642864352548, 0.1548866293868134, 0.17186349825411884, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.17280676976022147, 0.18557775061672477, 0.17795503803082358, 0.18683568409856555, 0.2135749380374129, 0.18608960500461136, 0.18283939778757308, 0.188688463014553, 0.20568880668582523, 0.05863246093089436, 0.05455044059576908, 0.06585155299632517, 0.05322184389084783, 0.06407608140401189, 0.05720389716033536, 0.07532529613519179, 0.05491659739916577, 0.05099605572629462]}, "mutation_prompt": null}
{"id": "62ab9b01-b96b-4165-af92-c8be79a0d950", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HarmonySearchParallel:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        def pitch_adjustment(new_solution, index):\n            if np.random.rand() < self.par:\n                new_solution[index] = new_solution[index] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                new_solution[index] = np.clip(new_solution[index], self.lower_bound, self.upper_bound)\n            return new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    for i in range(self.dim):\n                        if np.random.rand() < self.hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution = pitch_adjustment(new_solution, i)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "HarmonySearchParallel", "description": "Implementing a parallel evaluation of candidate solutions to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "18e3ab5e-d176-47e6-88fd-93b310dbe744", "metadata": {"aucs": [0.17986620249623375, 0.18443113441419445, 0.170257377687277, 0.16845369514743413, 0.1895825587206751, 0.17930911073563205, 0.18012986857945668, 0.16892459954718675, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.04436851469293046, 0.039358615885642156, 0.0391188544286486, 0.04069404259881226, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.026972969817388392, 0.030929276720888965, 0.0481463786277756, 0.02629991918313057, 0.04926774209271334, 0.058586096532927345, 0.03696417075239278, 0.03992308285267243, 0.030064743771497482, 0.08746944629118047, 0.0768099071709738, 0.09087431849796956, 0.08337212786138049, 0.08142169189902215, 0.08639412375773481, 0.08589380771356259, 0.08620909750186001, 0.08405909279289758, 0.08998019275133795, 0.08043910737458537, 0.10171882691615464, 0.05944881943290037, 0.062276416502640486, 0.05190122563388122, 0.09472457566024695, 0.05916973983227203, 0.09638557737943698, 0.12945843704098736, 0.19308637766117165, 0.1481850439168273, 0.11441624792391392, 0.10699204205912771, 0.1272000362358101, 0.13631651829905844, 0.1368487698841222, 0.1427848603687687, 9.999999999998899e-05, 0.00031647917899457756, 0.007869356134754701, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001001075890759373, 9.999999999998899e-05, 0.028707033284604444, 0.0014551984909143556, 0.06957272857429797, 9.999999999998899e-05, 0.010999473454681774, 0.04210891212603851, 0.011860097762603106, 0.020875177286989288, 0.006568189490159582, 0.0037559098983136474, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05849261863559363, 0.06858859508378334, 0.046889554430249114, 0.07162680553906065, 0.027343806707245677, 0.055770453722678415, 0.05295698494644707, 0.07098016574908539, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001737012993299536, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19875935803916533, 0.18871989383333243, 0.20763685792806263, 0.19866550384498738, 0.2083660014883587, 0.1979222845186166, 0.18176954825076785, 0.1931214806406164, 0.04680390455819994, 0.04282645354677572, 0.04401887178405428, 0.040915845328740374, 0.04579056553011729, 0.04723486030035051, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.13963128594222074, 0.1261360166635468, 0.1262488757556135, 0.14776549116968674, 0.16265225311039289, 0.12439502916632517, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.1602946355871694, 0.1687861231623119, 0.17021156503922463, 0.1821496595795835, 0.1769644640004372, 0.1627711288681667, 0.17613062285397574, 0.1505258528983906, 0.10673998746898394, 0.10664979078240266, 0.11109541918010746, 0.10978923820566577, 0.13610603218022022, 0.11676919299387534, 0.106310715336144, 0.1237427242099084, 0.1229185550255375, 0.15316442920217743, 0.16233450221944246, 0.14759617036013273, 0.1602255968598032, 0.14697173861808932, 0.16556307710243268, 0.15507600922648113, 0.17355151355563359, 0.18277724523822958, 0.14537082436836646, 0.14968281076082857, 0.14206236829172614, 0.1417091864481781, 0.145078867952399, 0.15638753810198391, 0.13801669104750258, 0.1418229920083015, 0.16212350615373505, 0.18402833448490363, 0.1715099605664242, 0.16807609292895265, 0.15946758961141982, 0.1543811746992011, 0.1451305217536799, 0.18370485718109264, 0.1634028490223587, 0.15718633160406947, 0.19145030324694579, 0.16841331303633156, 0.16989678715961676, 0.15228642864352548, 0.1548866293868134, 0.17186349825411884, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.17280676976022147, 0.18557775061672477, 0.17795503803082358, 0.18683568409856555, 0.2135749380374129, 0.18608960500461136, 0.18283939778757308, 0.188688463014553, 0.20568880668582523, 0.05863246093089436, 0.05455044059576908, 0.06585155299632517, 0.05322184389084783, 0.06407608140401189, 0.05720389716033536, 0.07532529613519179, 0.05491659739916577, 0.05099605572629462]}, "mutation_prompt": null}
{"id": "10af41d8-5dc2-4407-b689-3f585236235a", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HarmonySearchParallel:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        def pitch_adjustment(new_solution, index):\n            if np.random.rand() < self.par:\n                new_solution[index] = new_solution[index] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                new_solution[index] = np.clip(new_solution[index], self.lower_bound, self.upper_bound)\n            return new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    for i in range(self.dim):\n                        if np.random.rand() < self.hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution = pitch_adjustment(new_solution, i)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "HarmonySearchParallel", "description": "Implementing a parallel evaluation of candidate solutions to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "18e3ab5e-d176-47e6-88fd-93b310dbe744", "metadata": {"aucs": [0.17986620249623375, 0.18443113441419445, 0.170257377687277, 0.16845369514743413, 0.1895825587206751, 0.17930911073563205, 0.18012986857945668, 0.16892459954718675, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.04436851469293046, 0.039358615885642156, 0.0391188544286486, 0.04069404259881226, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.026972969817388392, 0.030929276720888965, 0.0481463786277756, 0.02629991918313057, 0.04926774209271334, 0.058586096532927345, 0.03696417075239278, 0.03992308285267243, 0.030064743771497482, 0.08746944629118047, 0.0768099071709738, 0.09087431849796956, 0.08337212786138049, 0.08142169189902215, 0.08639412375773481, 0.08589380771356259, 0.08620909750186001, 0.08405909279289758, 0.08998019275133795, 0.08043910737458537, 0.10171882691615464, 0.05944881943290037, 0.062276416502640486, 0.05190122563388122, 0.09472457566024695, 0.05916973983227203, 0.09638557737943698, 0.12945843704098736, 0.19308637766117165, 0.1481850439168273, 0.11441624792391392, 0.10699204205912771, 0.1272000362358101, 0.13631651829905844, 0.1368487698841222, 0.1427848603687687, 9.999999999998899e-05, 0.00031647917899457756, 0.007869356134754701, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001001075890759373, 9.999999999998899e-05, 0.028707033284604444, 0.0014551984909143556, 0.06957272857429797, 9.999999999998899e-05, 0.010999473454681774, 0.04210891212603851, 0.011860097762603106, 0.020875177286989288, 0.006568189490159582, 0.0037559098983136474, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05849261863559363, 0.06858859508378334, 0.046889554430249114, 0.07162680553906065, 0.027343806707245677, 0.055770453722678415, 0.05295698494644707, 0.07098016574908539, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001737012993299536, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19875935803916533, 0.18871989383333243, 0.20763685792806263, 0.19866550384498738, 0.2083660014883587, 0.1979222845186166, 0.18176954825076785, 0.1931214806406164, 0.04680390455819994, 0.04282645354677572, 0.04401887178405428, 0.040915845328740374, 0.04579056553011729, 0.04723486030035051, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.13963128594222074, 0.1261360166635468, 0.1262488757556135, 0.14776549116968674, 0.16265225311039289, 0.12439502916632517, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.1602946355871694, 0.1687861231623119, 0.17021156503922463, 0.1821496595795835, 0.1769644640004372, 0.1627711288681667, 0.17613062285397574, 0.1505258528983906, 0.10673998746898394, 0.10664979078240266, 0.11109541918010746, 0.10978923820566577, 0.13610603218022022, 0.11676919299387534, 0.106310715336144, 0.1237427242099084, 0.1229185550255375, 0.15316442920217743, 0.16233450221944246, 0.14759617036013273, 0.1602255968598032, 0.14697173861808932, 0.16556307710243268, 0.15507600922648113, 0.17355151355563359, 0.18277724523822958, 0.14537082436836646, 0.14968281076082857, 0.14206236829172614, 0.1417091864481781, 0.145078867952399, 0.15638753810198391, 0.13801669104750258, 0.1418229920083015, 0.16212350615373505, 0.18402833448490363, 0.1715099605664242, 0.16807609292895265, 0.15946758961141982, 0.1543811746992011, 0.1451305217536799, 0.18370485718109264, 0.1634028490223587, 0.15718633160406947, 0.19145030324694579, 0.16841331303633156, 0.16989678715961676, 0.15228642864352548, 0.1548866293868134, 0.17186349825411884, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.17280676976022147, 0.18557775061672477, 0.17795503803082358, 0.18683568409856555, 0.2135749380374129, 0.18608960500461136, 0.18283939778757308, 0.188688463014553, 0.20568880668582523, 0.05863246093089436, 0.05455044059576908, 0.06585155299632517, 0.05322184389084783, 0.06407608140401189, 0.05720389716033536, 0.07532529613519179, 0.05491659739916577, 0.05099605572629462]}, "mutation_prompt": null}
{"id": "265ff5e5-70db-44a3-8af7-fff76a349f92", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HarmonySearchParallel:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        def pitch_adjustment(new_solution, index):\n            if np.random.rand() < self.par:\n                new_solution[index] = new_solution[index] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                new_solution[index] = np.clip(new_solution[index], self.lower_bound, self.upper_bound)\n            return new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    for i in range(self.dim):\n                        if np.random.rand() < self.hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution = pitch_adjustment(new_solution, i)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "HarmonySearchParallel", "description": "Implementing a parallel evaluation of candidate solutions to enhance convergence speed.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "18e3ab5e-d176-47e6-88fd-93b310dbe744", "metadata": {"aucs": [0.17986620249623375, 0.18443113441419445, 0.170257377687277, 0.16845369514743413, 0.1895825587206751, 0.17930911073563205, 0.18012986857945668, 0.16892459954718675, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.04436851469293046, 0.039358615885642156, 0.0391188544286486, 0.04069404259881226, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.026972969817388392, 0.030929276720888965, 0.0481463786277756, 0.02629991918313057, 0.04926774209271334, 0.058586096532927345, 0.03696417075239278, 0.03992308285267243, 0.030064743771497482, 0.08746944629118047, 0.0768099071709738, 0.09087431849796956, 0.08337212786138049, 0.08142169189902215, 0.08639412375773481, 0.08589380771356259, 0.08620909750186001, 0.08405909279289758, 0.08998019275133795, 0.08043910737458537, 0.10171882691615464, 0.05944881943290037, 0.062276416502640486, 0.05190122563388122, 0.09472457566024695, 0.05916973983227203, 0.09638557737943698, 0.12945843704098736, 0.19308637766117165, 0.1481850439168273, 0.11441624792391392, 0.10699204205912771, 0.1272000362358101, 0.13631651829905844, 0.1368487698841222, 0.1427848603687687, 9.999999999998899e-05, 0.00031647917899457756, 0.007869356134754701, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001001075890759373, 9.999999999998899e-05, 0.028707033284604444, 0.0014551984909143556, 0.06957272857429797, 9.999999999998899e-05, 0.010999473454681774, 0.04210891212603851, 0.011860097762603106, 0.020875177286989288, 0.006568189490159582, 0.0037559098983136474, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05849261863559363, 0.06858859508378334, 0.046889554430249114, 0.07162680553906065, 0.027343806707245677, 0.055770453722678415, 0.05295698494644707, 0.07098016574908539, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.001737012993299536, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19875935803916533, 0.18871989383333243, 0.20763685792806263, 0.19866550384498738, 0.2083660014883587, 0.1979222845186166, 0.18176954825076785, 0.1931214806406164, 0.04680390455819994, 0.04282645354677572, 0.04401887178405428, 0.040915845328740374, 0.04579056553011729, 0.04723486030035051, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.13963128594222074, 0.1261360166635468, 0.1262488757556135, 0.14776549116968674, 0.16265225311039289, 0.12439502916632517, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.1602946355871694, 0.1687861231623119, 0.17021156503922463, 0.1821496595795835, 0.1769644640004372, 0.1627711288681667, 0.17613062285397574, 0.1505258528983906, 0.10673998746898394, 0.10664979078240266, 0.11109541918010746, 0.10978923820566577, 0.13610603218022022, 0.11676919299387534, 0.106310715336144, 0.1237427242099084, 0.1229185550255375, 0.15316442920217743, 0.16233450221944246, 0.14759617036013273, 0.1602255968598032, 0.14697173861808932, 0.16556307710243268, 0.15507600922648113, 0.17355151355563359, 0.18277724523822958, 0.14537082436836646, 0.14968281076082857, 0.14206236829172614, 0.1417091864481781, 0.145078867952399, 0.15638753810198391, 0.13801669104750258, 0.1418229920083015, 0.16212350615373505, 0.18402833448490363, 0.1715099605664242, 0.16807609292895265, 0.15946758961141982, 0.1543811746992011, 0.1451305217536799, 0.18370485718109264, 0.1634028490223587, 0.15718633160406947, 0.19145030324694579, 0.16841331303633156, 0.16989678715961676, 0.15228642864352548, 0.1548866293868134, 0.17186349825411884, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.17280676976022147, 0.18557775061672477, 0.17795503803082358, 0.18683568409856555, 0.2135749380374129, 0.18608960500461136, 0.18283939778757308, 0.188688463014553, 0.20568880668582523, 0.05863246093089436, 0.05455044059576908, 0.06585155299632517, 0.05322184389084783, 0.06407608140401189, 0.05720389716033536, 0.07532529613519179, 0.05491659739916577, 0.05099605572629462]}, "mutation_prompt": null}
{"id": "c7a821aa-7010-4128-a1fb-24a311e31f28", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        def pitch_adjustment(new_solution, index):\n            if np.random.rand() < self.par:\n                new_solution[index] = new_solution[index] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                new_solution[index] = np.clip(new_solution[index], self.lower_bound, self.upper_bound)\n            return new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    for i in range(self.dim):\n                        if np.random.rand() < self.hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution = pitch_adjustment(new_solution, i)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]\n", "name": "HybridHarmonyPSO", "description": "Using a hybrid strategy by incorporating Particle Swarm Optimization (PSO) to explore the search space and enhance local exploitation, thus improving convergence speed.", "configspace": "", "generation": 11, "fitness": 0.10970450519227368, "feedback": "The algorithm HybridHarmonyPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.11.", "error": "", "parent_id": "18e3ab5e-d176-47e6-88fd-93b310dbe744", "metadata": {"aucs": [0.17173949911621944, 0.1784867882340675, 0.18033414644396506, 0.1701785314208557, 0.18818139055183436, 0.1743435064021196, 0.1845128912039109, 0.16108288315219066, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.043392263366959005, 0.03997653735317941, 0.04335695399237993, 0.03905964913802584, 0.05284484387130384, 0.06702432684758475, 0.058711088734964334, 0.028195070974301073, 0.042050458905104615, 0.0481463786277756, 0.027274632677879884, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.03992308285267243, 0.030574022029666414, 0.5019852656942942, 0.5282249364524683, 0.5352894979840119, 0.4867540655940701, 0.5354409487869136, 0.515783582511393, 0.5328036959589197, 0.5336740165974466, 0.5344810290790483, 0.07970825545199256, 0.07510940173832203, 0.10171882691615464, 0.05375182926910005, 0.06739118875598982, 0.06454991931958631, 0.09472457566024695, 0.057034870011662187, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10485579795043742, 0.09827625300583875, 0.12629744495441353, 0.1161373594082461, 0.1368487698841222, 0.11639594428158784, 0.02088364274821164, 0.006245667324024318, 0.003689195106263865, 0.0054168340838776086, 9.999999999998899e-05, 0.0010533731891797515, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.005507880665700071, 0.06957272857429797, 0.0022751738287132284, 0.02016871089046468, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.007694983858733018, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.04490689360873623, 0.06941906045599022, 0.039247783231376676, 0.055770453722678415, 0.05295698494644707, 0.0339060597669375, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19685268894823627, 0.17807361810291966, 0.2055799784281095, 0.19425490959648672, 0.20724700933075846, 0.19916626223344447, 0.1784211624537766, 0.1891480374906228, 0.04680390455819994, 0.038816559836695186, 0.04401887178405428, 0.05066491103680015, 0.04511104405991484, 0.046009660620107806, 0.073263588849099, 0.045771150281882944, 0.05229792848072812, 0.14821980145136182, 0.12278010747121193, 0.12908010207797238, 0.1443008578737539, 0.14503228005504643, 0.1368110846710595, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.16045503484396162, 0.16814906059237933, 0.16779352461211916, 0.18345227603231407, 0.1769644640004372, 0.16394853491863692, 0.17377774300845283, 0.14944136665615082, 0.10625662637201472, 0.10485834564521979, 0.11109491287868445, 0.11434060850004057, 0.13610603218022022, 0.11676919299387534, 0.1047405734700314, 0.1237427242099084, 0.1229185550255375, 0.1469911274974911, 0.1627931472730334, 0.15227355182644664, 0.1772282713892389, 0.15350065615657893, 0.16236042742370171, 0.15525061061068246, 0.17355151355563359, 0.18277724523822958, 0.14300186596947517, 0.14578023879947632, 0.14031393936163972, 0.14101597620439077, 0.14379058119127952, 0.15282202985716775, 0.14222817191249215, 0.1452613650372515, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.18143789660342347, 0.15271964690840956, 0.14237255264100745, 0.16139484817187333, 0.1634028490223587, 0.1573924655404486, 0.15809251228438737, 0.16999048261300576, 0.16066497156641035, 0.15159923114680174, 0.14870682596182816, 0.16045374486843178, 0.18087143939013772, 0.1733826927034039, 0.2028812417861957, 0.17430251009557507, 0.1848605152647026, 0.1781542580562776, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.180678006394425, 0.19166001416380773, 0.20568880668582523, 0.058344077551123696, 0.05338573826732518, 0.06585155299632517, 0.055269585686843814, 0.06469192465659268, 0.053801126161452384, 0.07532529613519179, 0.07189922438974627, 0.04800596849491756]}, "mutation_prompt": null}
{"id": "8aa50af2-ae51-4fdf-88a8-84277aa24243", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        def pitch_adjustment(new_solution, index):\n            if np.random.rand() < self.par:\n                new_solution[index] = new_solution[index] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                new_solution[index] = np.clip(new_solution[index], self.lower_bound, self.upper_bound)\n            return new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    for i in range(self.dim):\n                        if np.random.rand() < self.hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution = pitch_adjustment(new_solution, i)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]\n", "name": "HybridHarmonyPSO", "description": "Using a hybrid strategy by incorporating Particle Swarm Optimization (PSO) to explore the search space and enhance local exploitation, thus improving convergence speed.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c7a821aa-7010-4128-a1fb-24a311e31f28", "metadata": {"aucs": [0.17173949911621944, 0.1784867882340675, 0.18033414644396506, 0.1701785314208557, 0.18818139055183436, 0.1743435064021196, 0.1845128912039109, 0.16108288315219066, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.043392263366959005, 0.03997653735317941, 0.04335695399237993, 0.03905964913802584, 0.05284484387130384, 0.06702432684758475, 0.058711088734964334, 0.028195070974301073, 0.042050458905104615, 0.0481463786277756, 0.027274632677879884, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.03992308285267243, 0.030574022029666414, 0.5019852656942942, 0.5282249364524683, 0.5352894979840119, 0.4867540655940701, 0.5354409487869136, 0.515783582511393, 0.5328036959589197, 0.5336740165974466, 0.5344810290790483, 0.07970825545199256, 0.07510940173832203, 0.10171882691615464, 0.05375182926910005, 0.06739118875598982, 0.06454991931958631, 0.09472457566024695, 0.057034870011662187, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10485579795043742, 0.09827625300583875, 0.12629744495441353, 0.1161373594082461, 0.1368487698841222, 0.11639594428158784, 0.02088364274821164, 0.006245667324024318, 0.003689195106263865, 0.0054168340838776086, 9.999999999998899e-05, 0.0010533731891797515, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.005507880665700071, 0.06957272857429797, 0.0022751738287132284, 0.02016871089046468, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.007694983858733018, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.04490689360873623, 0.06941906045599022, 0.039247783231376676, 0.055770453722678415, 0.05295698494644707, 0.0339060597669375, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19685268894823627, 0.17807361810291966, 0.2055799784281095, 0.19425490959648672, 0.20724700933075846, 0.19916626223344447, 0.1784211624537766, 0.1891480374906228, 0.04680390455819994, 0.038816559836695186, 0.04401887178405428, 0.05066491103680015, 0.04511104405991484, 0.046009660620107806, 0.073263588849099, 0.045771150281882944, 0.05229792848072812, 0.14821980145136182, 0.12278010747121193, 0.12908010207797238, 0.1443008578737539, 0.14503228005504643, 0.1368110846710595, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.16045503484396162, 0.16814906059237933, 0.16779352461211916, 0.18345227603231407, 0.1769644640004372, 0.16394853491863692, 0.17377774300845283, 0.14944136665615082, 0.10625662637201472, 0.10485834564521979, 0.11109491287868445, 0.11434060850004057, 0.13610603218022022, 0.11676919299387534, 0.1047405734700314, 0.1237427242099084, 0.1229185550255375, 0.1469911274974911, 0.1627931472730334, 0.15227355182644664, 0.1772282713892389, 0.15350065615657893, 0.16236042742370171, 0.15525061061068246, 0.17355151355563359, 0.18277724523822958, 0.14300186596947517, 0.14578023879947632, 0.14031393936163972, 0.14101597620439077, 0.14379058119127952, 0.15282202985716775, 0.14222817191249215, 0.1452613650372515, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.18143789660342347, 0.15271964690840956, 0.14237255264100745, 0.16139484817187333, 0.1634028490223587, 0.1573924655404486, 0.15809251228438737, 0.16999048261300576, 0.16066497156641035, 0.15159923114680174, 0.14870682596182816, 0.16045374486843178, 0.18087143939013772, 0.1733826927034039, 0.2028812417861957, 0.17430251009557507, 0.1848605152647026, 0.1781542580562776, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.180678006394425, 0.19166001416380773, 0.20568880668582523, 0.058344077551123696, 0.05338573826732518, 0.06585155299632517, 0.055269585686843814, 0.06469192465659268, 0.053801126161452384, 0.07532529613519179, 0.07189922438974627, 0.04800596849491756]}, "mutation_prompt": null}
{"id": "669f19ad-d988-44d5-b76d-cb730dc12d72", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        def pitch_adjustment(new_solution, index):\n            if np.random.rand() < self.par:\n                new_solution[index] = new_solution[index] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                new_solution[index] = np.clip(new_solution[index], self.lower_bound, self.upper_bound)\n            return new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    for i in range(self.dim):\n                        if np.random.rand() < self.hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution = pitch_adjustment(new_solution, i)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]\n", "name": "HybridHarmonyPSO", "description": "Using a hybrid strategy by incorporating Particle Swarm Optimization (PSO) to explore the search space and enhance local exploitation, thus improving convergence speed.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c7a821aa-7010-4128-a1fb-24a311e31f28", "metadata": {"aucs": [0.17173949911621944, 0.1784867882340675, 0.18033414644396506, 0.1701785314208557, 0.18818139055183436, 0.1743435064021196, 0.1845128912039109, 0.16108288315219066, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.043392263366959005, 0.03997653735317941, 0.04335695399237993, 0.03905964913802584, 0.05284484387130384, 0.06702432684758475, 0.058711088734964334, 0.028195070974301073, 0.042050458905104615, 0.0481463786277756, 0.027274632677879884, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.03992308285267243, 0.030574022029666414, 0.5019852656942942, 0.5282249364524683, 0.5352894979840119, 0.4867540655940701, 0.5354409487869136, 0.515783582511393, 0.5328036959589197, 0.5336740165974466, 0.5344810290790483, 0.07970825545199256, 0.07510940173832203, 0.10171882691615464, 0.05375182926910005, 0.06739118875598982, 0.06454991931958631, 0.09472457566024695, 0.057034870011662187, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10485579795043742, 0.09827625300583875, 0.12629744495441353, 0.1161373594082461, 0.1368487698841222, 0.11639594428158784, 0.02088364274821164, 0.006245667324024318, 0.003689195106263865, 0.0054168340838776086, 9.999999999998899e-05, 0.0010533731891797515, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.005507880665700071, 0.06957272857429797, 0.0022751738287132284, 0.02016871089046468, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.007694983858733018, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.04490689360873623, 0.06941906045599022, 0.039247783231376676, 0.055770453722678415, 0.05295698494644707, 0.0339060597669375, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19685268894823627, 0.17807361810291966, 0.2055799784281095, 0.19425490959648672, 0.20724700933075846, 0.19916626223344447, 0.1784211624537766, 0.1891480374906228, 0.04680390455819994, 0.038816559836695186, 0.04401887178405428, 0.05066491103680015, 0.04511104405991484, 0.046009660620107806, 0.073263588849099, 0.045771150281882944, 0.05229792848072812, 0.14821980145136182, 0.12278010747121193, 0.12908010207797238, 0.1443008578737539, 0.14503228005504643, 0.1368110846710595, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.16045503484396162, 0.16814906059237933, 0.16779352461211916, 0.18345227603231407, 0.1769644640004372, 0.16394853491863692, 0.17377774300845283, 0.14944136665615082, 0.10625662637201472, 0.10485834564521979, 0.11109491287868445, 0.11434060850004057, 0.13610603218022022, 0.11676919299387534, 0.1047405734700314, 0.1237427242099084, 0.1229185550255375, 0.1469911274974911, 0.1627931472730334, 0.15227355182644664, 0.1772282713892389, 0.15350065615657893, 0.16236042742370171, 0.15525061061068246, 0.17355151355563359, 0.18277724523822958, 0.14300186596947517, 0.14578023879947632, 0.14031393936163972, 0.14101597620439077, 0.14379058119127952, 0.15282202985716775, 0.14222817191249215, 0.1452613650372515, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.18143789660342347, 0.15271964690840956, 0.14237255264100745, 0.16139484817187333, 0.1634028490223587, 0.1573924655404486, 0.15809251228438737, 0.16999048261300576, 0.16066497156641035, 0.15159923114680174, 0.14870682596182816, 0.16045374486843178, 0.18087143939013772, 0.1733826927034039, 0.2028812417861957, 0.17430251009557507, 0.1848605152647026, 0.1781542580562776, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.180678006394425, 0.19166001416380773, 0.20568880668582523, 0.058344077551123696, 0.05338573826732518, 0.06585155299632517, 0.055269585686843814, 0.06469192465659268, 0.053801126161452384, 0.07532529613519179, 0.07189922438974627, 0.04800596849491756]}, "mutation_prompt": null}
{"id": "1dece4d9-92f6-46e1-bf6f-06888bf8dc9b", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        def pitch_adjustment(new_solution, index):\n            if np.random.rand() < self.par:\n                new_solution[index] = new_solution[index] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                new_solution[index] = np.clip(new_solution[index], self.lower_bound, self.upper_bound)\n            return new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    for i in range(self.dim):\n                        if np.random.rand() < self.hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution = pitch_adjustment(new_solution, i)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]\n", "name": "HybridHarmonyPSO", "description": "Using a hybrid strategy by incorporating Particle Swarm Optimization (PSO) to explore the search space and enhance local exploitation, thus improving convergence speed.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "c7a821aa-7010-4128-a1fb-24a311e31f28", "metadata": {"aucs": [0.17173949911621944, 0.1784867882340675, 0.18033414644396506, 0.1701785314208557, 0.18818139055183436, 0.1743435064021196, 0.1845128912039109, 0.16108288315219066, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.043392263366959005, 0.03997653735317941, 0.04335695399237993, 0.03905964913802584, 0.05284484387130384, 0.06702432684758475, 0.058711088734964334, 0.028195070974301073, 0.042050458905104615, 0.0481463786277756, 0.027274632677879884, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.03992308285267243, 0.030574022029666414, 0.5019852656942942, 0.5282249364524683, 0.5352894979840119, 0.4867540655940701, 0.5354409487869136, 0.515783582511393, 0.5328036959589197, 0.5336740165974466, 0.5344810290790483, 0.07970825545199256, 0.07510940173832203, 0.10171882691615464, 0.05375182926910005, 0.06739118875598982, 0.06454991931958631, 0.09472457566024695, 0.057034870011662187, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10485579795043742, 0.09827625300583875, 0.12629744495441353, 0.1161373594082461, 0.1368487698841222, 0.11639594428158784, 0.02088364274821164, 0.006245667324024318, 0.003689195106263865, 0.0054168340838776086, 9.999999999998899e-05, 0.0010533731891797515, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.005507880665700071, 0.06957272857429797, 0.0022751738287132284, 0.02016871089046468, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.007694983858733018, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.04490689360873623, 0.06941906045599022, 0.039247783231376676, 0.055770453722678415, 0.05295698494644707, 0.0339060597669375, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19685268894823627, 0.17807361810291966, 0.2055799784281095, 0.19425490959648672, 0.20724700933075846, 0.19916626223344447, 0.1784211624537766, 0.1891480374906228, 0.04680390455819994, 0.038816559836695186, 0.04401887178405428, 0.05066491103680015, 0.04511104405991484, 0.046009660620107806, 0.073263588849099, 0.045771150281882944, 0.05229792848072812, 0.14821980145136182, 0.12278010747121193, 0.12908010207797238, 0.1443008578737539, 0.14503228005504643, 0.1368110846710595, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.16045503484396162, 0.16814906059237933, 0.16779352461211916, 0.18345227603231407, 0.1769644640004372, 0.16394853491863692, 0.17377774300845283, 0.14944136665615082, 0.10625662637201472, 0.10485834564521979, 0.11109491287868445, 0.11434060850004057, 0.13610603218022022, 0.11676919299387534, 0.1047405734700314, 0.1237427242099084, 0.1229185550255375, 0.1469911274974911, 0.1627931472730334, 0.15227355182644664, 0.1772282713892389, 0.15350065615657893, 0.16236042742370171, 0.15525061061068246, 0.17355151355563359, 0.18277724523822958, 0.14300186596947517, 0.14578023879947632, 0.14031393936163972, 0.14101597620439077, 0.14379058119127952, 0.15282202985716775, 0.14222817191249215, 0.1452613650372515, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.18143789660342347, 0.15271964690840956, 0.14237255264100745, 0.16139484817187333, 0.1634028490223587, 0.1573924655404486, 0.15809251228438737, 0.16999048261300576, 0.16066497156641035, 0.15159923114680174, 0.14870682596182816, 0.16045374486843178, 0.18087143939013772, 0.1733826927034039, 0.2028812417861957, 0.17430251009557507, 0.1848605152647026, 0.1781542580562776, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.180678006394425, 0.19166001416380773, 0.20568880668582523, 0.058344077551123696, 0.05338573826732518, 0.06585155299632517, 0.055269585686843814, 0.06469192465659268, 0.053801126161452384, 0.07532529613519179, 0.07189922438974627, 0.04800596849491756]}, "mutation_prompt": null}
{"id": "ad5230c4-c5c3-4e09-b64c-f6ad7632a291", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        def pitch_adjustment(new_solution, index):\n            if np.random.rand() < self.par:\n                new_solution[index] = new_solution[index] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                new_solution[index] = np.clip(new_solution[index], self.lower_bound, self.upper_bound)\n            return new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    for i in range(self.dim):\n                        if np.random.rand() < self.hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution = pitch_adjustment(new_solution, i)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]\n", "name": "HybridHarmonyPSO", "description": "Using a hybrid strategy by incorporating Particle Swarm Optimization (PSO) to explore the search space and enhance local exploitation, thus improving convergence speed.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "c7a821aa-7010-4128-a1fb-24a311e31f28", "metadata": {"aucs": [0.17173949911621944, 0.1784867882340675, 0.18033414644396506, 0.1701785314208557, 0.18818139055183436, 0.1743435064021196, 0.1845128912039109, 0.16108288315219066, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.043392263366959005, 0.03997653735317941, 0.04335695399237993, 0.03905964913802584, 0.05284484387130384, 0.06702432684758475, 0.058711088734964334, 0.028195070974301073, 0.042050458905104615, 0.0481463786277756, 0.027274632677879884, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.03992308285267243, 0.030574022029666414, 0.5019852656942942, 0.5282249364524683, 0.5352894979840119, 0.4867540655940701, 0.5354409487869136, 0.515783582511393, 0.5328036959589197, 0.5336740165974466, 0.5344810290790483, 0.07970825545199256, 0.07510940173832203, 0.10171882691615464, 0.05375182926910005, 0.06739118875598982, 0.06454991931958631, 0.09472457566024695, 0.057034870011662187, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10485579795043742, 0.09827625300583875, 0.12629744495441353, 0.1161373594082461, 0.1368487698841222, 0.11639594428158784, 0.02088364274821164, 0.006245667324024318, 0.003689195106263865, 0.0054168340838776086, 9.999999999998899e-05, 0.0010533731891797515, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.005507880665700071, 0.06957272857429797, 0.0022751738287132284, 0.02016871089046468, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.007694983858733018, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.04490689360873623, 0.06941906045599022, 0.039247783231376676, 0.055770453722678415, 0.05295698494644707, 0.0339060597669375, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19685268894823627, 0.17807361810291966, 0.2055799784281095, 0.19425490959648672, 0.20724700933075846, 0.19916626223344447, 0.1784211624537766, 0.1891480374906228, 0.04680390455819994, 0.038816559836695186, 0.04401887178405428, 0.05066491103680015, 0.04511104405991484, 0.046009660620107806, 0.073263588849099, 0.045771150281882944, 0.05229792848072812, 0.14821980145136182, 0.12278010747121193, 0.12908010207797238, 0.1443008578737539, 0.14503228005504643, 0.1368110846710595, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.16045503484396162, 0.16814906059237933, 0.16779352461211916, 0.18345227603231407, 0.1769644640004372, 0.16394853491863692, 0.17377774300845283, 0.14944136665615082, 0.10625662637201472, 0.10485834564521979, 0.11109491287868445, 0.11434060850004057, 0.13610603218022022, 0.11676919299387534, 0.1047405734700314, 0.1237427242099084, 0.1229185550255375, 0.1469911274974911, 0.1627931472730334, 0.15227355182644664, 0.1772282713892389, 0.15350065615657893, 0.16236042742370171, 0.15525061061068246, 0.17355151355563359, 0.18277724523822958, 0.14300186596947517, 0.14578023879947632, 0.14031393936163972, 0.14101597620439077, 0.14379058119127952, 0.15282202985716775, 0.14222817191249215, 0.1452613650372515, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.18143789660342347, 0.15271964690840956, 0.14237255264100745, 0.16139484817187333, 0.1634028490223587, 0.1573924655404486, 0.15809251228438737, 0.16999048261300576, 0.16066497156641035, 0.15159923114680174, 0.14870682596182816, 0.16045374486843178, 0.18087143939013772, 0.1733826927034039, 0.2028812417861957, 0.17430251009557507, 0.1848605152647026, 0.1781542580562776, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.180678006394425, 0.19166001416380773, 0.20568880668582523, 0.058344077551123696, 0.05338573826732518, 0.06585155299632517, 0.055269585686843814, 0.06469192465659268, 0.053801126161452384, 0.07532529613519179, 0.07189922438974627, 0.04800596849491756]}, "mutation_prompt": null}
{"id": "83346691-9c1b-460b-a513-cc27dbf1677a", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        def pitch_adjustment(new_solution, index):\n            if np.random.rand() < self.par:\n                new_solution[index] = new_solution[index] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                new_solution[index] = np.clip(new_solution[index], self.lower_bound, self.upper_bound)\n            return new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    for i in range(self.dim):\n                        if np.random.rand() < self.hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution = pitch_adjustment(new_solution, i)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]\n", "name": "HybridHarmonyPSO", "description": "Using a hybrid strategy by incorporating Particle Swarm Optimization (PSO) to explore the search space and enhance local exploitation, thus improving convergence speed.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c7a821aa-7010-4128-a1fb-24a311e31f28", "metadata": {"aucs": [0.17173949911621944, 0.1784867882340675, 0.18033414644396506, 0.1701785314208557, 0.18818139055183436, 0.1743435064021196, 0.1845128912039109, 0.16108288315219066, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.043392263366959005, 0.03997653735317941, 0.04335695399237993, 0.03905964913802584, 0.05284484387130384, 0.06702432684758475, 0.058711088734964334, 0.028195070974301073, 0.042050458905104615, 0.0481463786277756, 0.027274632677879884, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.03992308285267243, 0.030574022029666414, 0.5019852656942942, 0.5282249364524683, 0.5352894979840119, 0.4867540655940701, 0.5354409487869136, 0.515783582511393, 0.5328036959589197, 0.5336740165974466, 0.5344810290790483, 0.07970825545199256, 0.07510940173832203, 0.10171882691615464, 0.05375182926910005, 0.06739118875598982, 0.06454991931958631, 0.09472457566024695, 0.057034870011662187, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10485579795043742, 0.09827625300583875, 0.12629744495441353, 0.1161373594082461, 0.1368487698841222, 0.11639594428158784, 0.02088364274821164, 0.006245667324024318, 0.003689195106263865, 0.0054168340838776086, 9.999999999998899e-05, 0.0010533731891797515, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.005507880665700071, 0.06957272857429797, 0.0022751738287132284, 0.02016871089046468, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.007694983858733018, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.04490689360873623, 0.06941906045599022, 0.039247783231376676, 0.055770453722678415, 0.05295698494644707, 0.0339060597669375, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19685268894823627, 0.17807361810291966, 0.2055799784281095, 0.19425490959648672, 0.20724700933075846, 0.19916626223344447, 0.1784211624537766, 0.1891480374906228, 0.04680390455819994, 0.038816559836695186, 0.04401887178405428, 0.05066491103680015, 0.04511104405991484, 0.046009660620107806, 0.073263588849099, 0.045771150281882944, 0.05229792848072812, 0.14821980145136182, 0.12278010747121193, 0.12908010207797238, 0.1443008578737539, 0.14503228005504643, 0.1368110846710595, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.16045503484396162, 0.16814906059237933, 0.16779352461211916, 0.18345227603231407, 0.1769644640004372, 0.16394853491863692, 0.17377774300845283, 0.14944136665615082, 0.10625662637201472, 0.10485834564521979, 0.11109491287868445, 0.11434060850004057, 0.13610603218022022, 0.11676919299387534, 0.1047405734700314, 0.1237427242099084, 0.1229185550255375, 0.1469911274974911, 0.1627931472730334, 0.15227355182644664, 0.1772282713892389, 0.15350065615657893, 0.16236042742370171, 0.15525061061068246, 0.17355151355563359, 0.18277724523822958, 0.14300186596947517, 0.14578023879947632, 0.14031393936163972, 0.14101597620439077, 0.14379058119127952, 0.15282202985716775, 0.14222817191249215, 0.1452613650372515, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.18143789660342347, 0.15271964690840956, 0.14237255264100745, 0.16139484817187333, 0.1634028490223587, 0.1573924655404486, 0.15809251228438737, 0.16999048261300576, 0.16066497156641035, 0.15159923114680174, 0.14870682596182816, 0.16045374486843178, 0.18087143939013772, 0.1733826927034039, 0.2028812417861957, 0.17430251009557507, 0.1848605152647026, 0.1781542580562776, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.180678006394425, 0.19166001416380773, 0.20568880668582523, 0.058344077551123696, 0.05338573826732518, 0.06585155299632517, 0.055269585686843814, 0.06469192465659268, 0.053801126161452384, 0.07532529613519179, 0.07189922438974627, 0.04800596849491756]}, "mutation_prompt": null}
{"id": "5f041593-2471-422e-aa11-3adc1b4c27ab", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass ImprovedHybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 8  # Increased number of threads for faster parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        def pitch_adjustment(new_solution, index):\n            if np.random.rand() < self.par:\n                new_solution[index] = new_solution[index] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                new_solution[index] = np.clip(new_solution[index], self.lower_bound, self.upper_bound)\n            return new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    for i in range(self.dim):\n                        if np.random.rand() < self.hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution = pitch_adjustment(new_solution, i)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Parallel Particle Swarm Optimization (PSO) for local exploration\n                pbest = np.zeros((self.pso_swarm_size, self.dim))\n                pbest_fitness = np.full(self.pso_swarm_size, np.inf)\n                gbest = np.zeros(self.dim)\n                gbest_fitness = np.inf\n\n                def pso_update(i):\n                    nonlocal gbest, gbest_fitness\n                    pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * np.random.rand(self.dim) * (pbest[i] - pso_swarm[i]) + self.pso_c2 * np.random.rand(self.dim) * (gbest - pso_swarm[i])\n                    pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                    pso_fitness = func(pso_swarm[i])\n                    if pso_fitness < pbest_fitness[i]:\n                        pbest[i] = pso_swarm[i]\n                        pbest_fitness[i] = pso_fitness\n                        if pbest_fitness[i] < gbest_fitness:\n                            gbest = pbest[i]\n                            gbest_fitness = pbest_fitness[i]\n\n                with ThreadPoolExecutor(max_workers=self.num_threads) as pso_executor:\n                    pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                    pso_executor.map(pso_update, range(self.pso_swarm_size))\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "ImprovedHybridHarmonyPSO", "description": "Introducing a parallel processing approach for both Harmony Memory update and PSO local exploration to enhance convergence speed.", "configspace": "", "generation": 17, "fitness": 0.09399489977202992, "feedback": "The algorithm ImprovedHybridHarmonyPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "c7a821aa-7010-4128-a1fb-24a311e31f28", "metadata": {"aucs": [0.1984622676143598, 0.18211200664081584, 0.1799480038317639, 0.17684808351421455, 0.18818139055183436, 0.18078566934183038, 0.17941818688711098, 0.16415616983690384, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04536928287560682, 0.049617882812557745, 0.03936993878299744, 0.04025968100972188, 0.043920064102175305, 0.03904563060876176, 0.05301902279395976, 0.06702432684758475, 0.058711088734964334, 0.031973791083747316, 0.031159214892426235, 0.0481463786277756, 0.028367291337320744, 0.05114670131545629, 0.05702674525995721, 0.046268298563954535, 0.03992308285267243, 0.03137830737304326, 0.08746944629118047, 0.07758825747774323, 0.09222986922420928, 0.11100378459925797, 0.08993604126397259, 0.08943123637969153, 0.09464373417293193, 0.09150928558253857, 0.07994018904369837, 0.0827265695937327, 0.07686473250808579, 0.10361870438982879, 0.06774106069501029, 0.06571728789526554, 0.05465002732921509, 0.09472457566024695, 0.06551260818809501, 0.0928167823142052, 0.19496255790770778, 0.19308637766117165, 0.1481850439168273, 0.11327636237537242, 0.10206812174982738, 0.13770338333334253, 0.12720582187804097, 0.1368487698841222, 0.12677649590336038, 0.017643956092645796, 0.026128354272935028, 0.015220295071185164, 0.010442312791018371, 9.999999999998899e-05, 0.002601136099241508, 0.00014839801339727732, 9.999999999998899e-05, 0.02853385744945003, 0.01849797223087557, 0.07540418232971824, 0.031466050414905244, 0.030883484625521818, 0.03991981072388828, 0.032601118339753876, 0.03943174563587126, 0.017111057690143427, 0.012093459759108582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05339221730149768, 0.07874908107506706, 0.05072942966836602, 0.0780858102634675, 0.033318326748440485, 0.055770453722678415, 0.05296706283631014, 0.07103857267838376, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006961126201107226, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19864786891314257, 0.19230661562172902, 0.21210255569092895, 0.19090290244469876, 0.20724700933075846, 0.21155069412708472, 0.1799462873264832, 0.19694605107380192, 0.04680390455819994, 0.03628199008995958, 0.04401887178405428, 0.04135454327413213, 0.044523962344062085, 0.047339467559900705, 0.073263588849099, 0.04621950492944249, 0.055325029570004736, 0.13911350938219635, 0.12792695906651874, 0.12675593911210414, 0.14106301975521696, 0.16258341540288768, 0.133117994833715, 0.14963138758589234, 0.14862885505970114, 0.13632443589833587, 0.16627301119432591, 0.15950729452706836, 0.17204055144392094, 0.17327946165686825, 0.1821496595795835, 0.17922308779276752, 0.16244737848268365, 0.17377774300845283, 0.15275217721212397, 0.10929490353330618, 0.10382166168941254, 0.11109491287868445, 0.11539656460264414, 0.13610603218022022, 0.12076379971385809, 0.1109037421270026, 0.1237427242099084, 0.1229185550255375, 0.14571698223844665, 0.16284400766472062, 0.15783793386156886, 0.17128949436808305, 0.15313786543035435, 0.16833655536192205, 0.1676076735372739, 0.17433130894636673, 0.18429549049488114, 0.14237612022948865, 0.1474884268959128, 0.1429224644075524, 0.1465322754350774, 0.148375711642167, 0.15463116148457923, 0.14304523065783636, 0.14701893065928673, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1571573551766411, 0.1573914567171436, 0.14518712190440652, 0.1654293260649814, 0.1634028490223587, 0.158198324024443, 0.1587679803275831, 0.16044362530916711, 0.16211171570566552, 0.16737741708387077, 0.14870682596182816, 0.16045374486843178, 0.16855947523118198, 0.17502537804475848, 0.2028812417861957, 0.17970845133186597, 0.1844404489878987, 0.18008417147726008, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17786462408685888, 0.19050739227517643, 0.20568880668582523, 0.058797762952460086, 0.05328353109191952, 0.06585155299632517, 0.054784825854715336, 0.06284406833554423, 0.0542290725555542, 0.07532529613519179, 0.0551620780087726, 0.05184537730900052]}, "mutation_prompt": null}
{"id": "5a78fad1-8fd0-4d09-8283-060084d4bdd0", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        def pitch_adjustment(new_solution, index):\n            if np.random.rand() < self.par:\n                new_solution[index] = new_solution[index] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                new_solution[index] = np.clip(new_solution[index], self.lower_bound, self.upper_bound)\n            return new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    for i in range(self.dim):\n                        if np.random.rand() < self.hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution = pitch_adjustment(new_solution, i)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]\n", "name": "HybridHarmonyPSO", "description": "Using a hybrid strategy by incorporating Particle Swarm Optimization (PSO) to explore the search space and enhance local exploitation, thus improving convergence speed.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c7a821aa-7010-4128-a1fb-24a311e31f28", "metadata": {"aucs": [0.17173949911621944, 0.1784867882340675, 0.18033414644396506, 0.1701785314208557, 0.18818139055183436, 0.1743435064021196, 0.1845128912039109, 0.16108288315219066, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.043392263366959005, 0.03997653735317941, 0.04335695399237993, 0.03905964913802584, 0.05284484387130384, 0.06702432684758475, 0.058711088734964334, 0.028195070974301073, 0.042050458905104615, 0.0481463786277756, 0.027274632677879884, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.03992308285267243, 0.030574022029666414, 0.5019852656942942, 0.5282249364524683, 0.5352894979840119, 0.4867540655940701, 0.5354409487869136, 0.515783582511393, 0.5328036959589197, 0.5336740165974466, 0.5344810290790483, 0.07970825545199256, 0.07510940173832203, 0.10171882691615464, 0.05375182926910005, 0.06739118875598982, 0.06454991931958631, 0.09472457566024695, 0.057034870011662187, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10485579795043742, 0.09827625300583875, 0.12629744495441353, 0.1161373594082461, 0.1368487698841222, 0.11639594428158784, 0.02088364274821164, 0.006245667324024318, 0.003689195106263865, 0.0054168340838776086, 9.999999999998899e-05, 0.0010533731891797515, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.005507880665700071, 0.06957272857429797, 0.0022751738287132284, 0.02016871089046468, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.007694983858733018, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.04490689360873623, 0.06941906045599022, 0.039247783231376676, 0.055770453722678415, 0.05295698494644707, 0.0339060597669375, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19685268894823627, 0.17807361810291966, 0.2055799784281095, 0.19425490959648672, 0.20724700933075846, 0.19916626223344447, 0.1784211624537766, 0.1891480374906228, 0.04680390455819994, 0.038816559836695186, 0.04401887178405428, 0.05066491103680015, 0.04511104405991484, 0.046009660620107806, 0.073263588849099, 0.045771150281882944, 0.05229792848072812, 0.14821980145136182, 0.12278010747121193, 0.12908010207797238, 0.1443008578737539, 0.14503228005504643, 0.1368110846710595, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.16045503484396162, 0.16814906059237933, 0.16779352461211916, 0.18345227603231407, 0.1769644640004372, 0.16394853491863692, 0.17377774300845283, 0.14944136665615082, 0.10625662637201472, 0.10485834564521979, 0.11109491287868445, 0.11434060850004057, 0.13610603218022022, 0.11676919299387534, 0.1047405734700314, 0.1237427242099084, 0.1229185550255375, 0.1469911274974911, 0.1627931472730334, 0.15227355182644664, 0.1772282713892389, 0.15350065615657893, 0.16236042742370171, 0.15525061061068246, 0.17355151355563359, 0.18277724523822958, 0.14300186596947517, 0.14578023879947632, 0.14031393936163972, 0.14101597620439077, 0.14379058119127952, 0.15282202985716775, 0.14222817191249215, 0.1452613650372515, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.18143789660342347, 0.15271964690840956, 0.14237255264100745, 0.16139484817187333, 0.1634028490223587, 0.1573924655404486, 0.15809251228438737, 0.16999048261300576, 0.16066497156641035, 0.15159923114680174, 0.14870682596182816, 0.16045374486843178, 0.18087143939013772, 0.1733826927034039, 0.2028812417861957, 0.17430251009557507, 0.1848605152647026, 0.1781542580562776, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.180678006394425, 0.19166001416380773, 0.20568880668582523, 0.058344077551123696, 0.05338573826732518, 0.06585155299632517, 0.055269585686843814, 0.06469192465659268, 0.053801126161452384, 0.07532529613519179, 0.07189922438974627, 0.04800596849491756]}, "mutation_prompt": null}
{"id": "aa704319-122a-4827-accf-fa72354624a0", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.8 * budget)  # Increase harmony memory size\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 5  # Decrease PSO swarm size for faster convergence\n        self.pso_max_iter = 3  # Reduce PSO iterations for quicker convergence\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        def pitch_adjustment(new_solution, index):\n            if np.random.rand() < self.par:\n                new_solution[index] = new_solution[index] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                new_solution[index] = np.clip(new_solution[index], self.lower_bound, self.upper_bound)\n            return new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    for i in range(self.dim):\n                        if np.random.rand() < self.hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution = pitch_adjustment(new_solution, i)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "HybridHarmonyPSO", "description": "Reducing the number of evaluations by decreasing the budget allocation for Particle Swarm Optimization (PSO) and using a faster convergence technique.", "configspace": "", "generation": 19, "fitness": 0.09740409310301713, "feedback": "The algorithm HybridHarmonyPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.10 with standard deviation 0.08.", "error": "", "parent_id": "c7a821aa-7010-4128-a1fb-24a311e31f28", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.1785507992358102, 0.16108288315219066, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.03763008067210338, 0.041028703578300574, 0.03828754340797624, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.027705700456608806, 0.030929276720888965, 0.0481463786277756, 0.025965940872886173, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029763828138413717, 0.23381497560628184, 0.25105350277612193, 0.2027880029872967, 0.17930750748513946, 0.2616236678631121, 0.20989953547466533, 0.20163725758842388, 0.26370255887787175, 0.25037575064457285, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06431725022910595, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12729354767721035, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.10026068923545828, 0.13123694841517808, 0.1179605867771143, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 9.999999999998899e-05, 0.0017854097985535722, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 0.0011843356915487435, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.0463974064184125, 0.06941906045599022, 0.02707569422668732, 0.055770453722678415, 0.05430782164806791, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19468071288525302, 0.19495588911784612, 0.2055799784281095, 0.1905756428989419, 0.21192364688416543, 0.20009987910039628, 0.1784211624537766, 0.20219417324763578, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.12399644992600367, 0.13721680985239493, 0.14106301975521696, 0.14115194246620144, 0.13044372730959652, 0.15034268976310372, 0.14861619065631115, 0.13344760336769068, 0.17182146956930033, 0.15950729452706836, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.17925373424461777, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.1147064686340935, 0.10382166168941254, 0.11849032669552728, 0.11179315246291244, 0.13610603218022022, 0.11961758305663628, 0.10563641678232016, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.14502666132044906, 0.16236042742370171, 0.14860716125581908, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.14006577975982915, 0.14101597620439077, 0.14401205442721077, 0.15282202985716775, 0.14096434603863706, 0.14164044590726022, 0.16207881422481074, 0.18402833448490363, 0.16711023144656956, 0.16657141521439822, 0.15980618122829726, 0.15221164674533771, 0.1431686532097337, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15672808824074347, 0.15897380360695568, 0.16050779395916304, 0.15805386361387153, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.1759075597106563, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.188688463014553, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "797cef1d-7158-468f-b1ea-e7ee785f9e16", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        def pitch_adjustment(new_solution, index):\n            if np.random.rand() < self.par:\n                new_solution[index] = new_solution[index] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                new_solution[index] = np.clip(new_solution[index], self.lower_bound, self.upper_bound)\n            return new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    for i in range(self.dim):\n                        if np.random.rand() < self.hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution = pitch_adjustment(new_solution, i)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]\n", "name": "HybridHarmonyPSO", "description": "Using a hybrid strategy by incorporating Particle Swarm Optimization (PSO) to explore the search space and enhance local exploitation, thus improving convergence speed.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c7a821aa-7010-4128-a1fb-24a311e31f28", "metadata": {"aucs": [0.17173949911621944, 0.1784867882340675, 0.18033414644396506, 0.1701785314208557, 0.18818139055183436, 0.1743435064021196, 0.1845128912039109, 0.16108288315219066, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.043392263366959005, 0.03997653735317941, 0.04335695399237993, 0.03905964913802584, 0.05284484387130384, 0.06702432684758475, 0.058711088734964334, 0.028195070974301073, 0.042050458905104615, 0.0481463786277756, 0.027274632677879884, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.03992308285267243, 0.030574022029666414, 0.5019852656942942, 0.5282249364524683, 0.5352894979840119, 0.4867540655940701, 0.5354409487869136, 0.515783582511393, 0.5328036959589197, 0.5336740165974466, 0.5344810290790483, 0.07970825545199256, 0.07510940173832203, 0.10171882691615464, 0.05375182926910005, 0.06739118875598982, 0.06454991931958631, 0.09472457566024695, 0.057034870011662187, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10485579795043742, 0.09827625300583875, 0.12629744495441353, 0.1161373594082461, 0.1368487698841222, 0.11639594428158784, 0.02088364274821164, 0.006245667324024318, 0.003689195106263865, 0.0054168340838776086, 9.999999999998899e-05, 0.0010533731891797515, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.005507880665700071, 0.06957272857429797, 0.0022751738287132284, 0.02016871089046468, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.007694983858733018, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.04490689360873623, 0.06941906045599022, 0.039247783231376676, 0.055770453722678415, 0.05295698494644707, 0.0339060597669375, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19685268894823627, 0.17807361810291966, 0.2055799784281095, 0.19425490959648672, 0.20724700933075846, 0.19916626223344447, 0.1784211624537766, 0.1891480374906228, 0.04680390455819994, 0.038816559836695186, 0.04401887178405428, 0.05066491103680015, 0.04511104405991484, 0.046009660620107806, 0.073263588849099, 0.045771150281882944, 0.05229792848072812, 0.14821980145136182, 0.12278010747121193, 0.12908010207797238, 0.1443008578737539, 0.14503228005504643, 0.1368110846710595, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.16045503484396162, 0.16814906059237933, 0.16779352461211916, 0.18345227603231407, 0.1769644640004372, 0.16394853491863692, 0.17377774300845283, 0.14944136665615082, 0.10625662637201472, 0.10485834564521979, 0.11109491287868445, 0.11434060850004057, 0.13610603218022022, 0.11676919299387534, 0.1047405734700314, 0.1237427242099084, 0.1229185550255375, 0.1469911274974911, 0.1627931472730334, 0.15227355182644664, 0.1772282713892389, 0.15350065615657893, 0.16236042742370171, 0.15525061061068246, 0.17355151355563359, 0.18277724523822958, 0.14300186596947517, 0.14578023879947632, 0.14031393936163972, 0.14101597620439077, 0.14379058119127952, 0.15282202985716775, 0.14222817191249215, 0.1452613650372515, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.18143789660342347, 0.15271964690840956, 0.14237255264100745, 0.16139484817187333, 0.1634028490223587, 0.1573924655404486, 0.15809251228438737, 0.16999048261300576, 0.16066497156641035, 0.15159923114680174, 0.14870682596182816, 0.16045374486843178, 0.18087143939013772, 0.1733826927034039, 0.2028812417861957, 0.17430251009557507, 0.1848605152647026, 0.1781542580562776, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.180678006394425, 0.19166001416380773, 0.20568880668582523, 0.058344077551123696, 0.05338573826732518, 0.06585155299632517, 0.055269585686843814, 0.06469192465659268, 0.053801126161452384, 0.07532529613519179, 0.07189922438974627, 0.04800596849491756]}, "mutation_prompt": null}
{"id": "bb34e09b-313f-42f1-b22b-1c8ef47f7b4d", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        def pitch_adjustment(new_solution, index):\n            if np.random.rand() < self.par:\n                new_solution[index] = new_solution[index] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                new_solution[index] = np.clip(new_solution[index], self.lower_bound, self.upper_bound)\n            return new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    for i in range(self.dim):\n                        if np.random.rand() < self.hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution = pitch_adjustment(new_solution, i)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]\n", "name": "HybridHarmonyPSO", "description": "Using a hybrid strategy by incorporating Particle Swarm Optimization (PSO) to explore the search space and enhance local exploitation, thus improving convergence speed.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c7a821aa-7010-4128-a1fb-24a311e31f28", "metadata": {"aucs": [0.17173949911621944, 0.1784867882340675, 0.18033414644396506, 0.1701785314208557, 0.18818139055183436, 0.1743435064021196, 0.1845128912039109, 0.16108288315219066, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.043392263366959005, 0.03997653735317941, 0.04335695399237993, 0.03905964913802584, 0.05284484387130384, 0.06702432684758475, 0.058711088734964334, 0.028195070974301073, 0.042050458905104615, 0.0481463786277756, 0.027274632677879884, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.03992308285267243, 0.030574022029666414, 0.5019852656942942, 0.5282249364524683, 0.5352894979840119, 0.4867540655940701, 0.5354409487869136, 0.515783582511393, 0.5328036959589197, 0.5336740165974466, 0.5344810290790483, 0.07970825545199256, 0.07510940173832203, 0.10171882691615464, 0.05375182926910005, 0.06739118875598982, 0.06454991931958631, 0.09472457566024695, 0.057034870011662187, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10485579795043742, 0.09827625300583875, 0.12629744495441353, 0.1161373594082461, 0.1368487698841222, 0.11639594428158784, 0.02088364274821164, 0.006245667324024318, 0.003689195106263865, 0.0054168340838776086, 9.999999999998899e-05, 0.0010533731891797515, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.005507880665700071, 0.06957272857429797, 0.0022751738287132284, 0.02016871089046468, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.007694983858733018, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.04490689360873623, 0.06941906045599022, 0.039247783231376676, 0.055770453722678415, 0.05295698494644707, 0.0339060597669375, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19685268894823627, 0.17807361810291966, 0.2055799784281095, 0.19425490959648672, 0.20724700933075846, 0.19916626223344447, 0.1784211624537766, 0.1891480374906228, 0.04680390455819994, 0.038816559836695186, 0.04401887178405428, 0.05066491103680015, 0.04511104405991484, 0.046009660620107806, 0.073263588849099, 0.045771150281882944, 0.05229792848072812, 0.14821980145136182, 0.12278010747121193, 0.12908010207797238, 0.1443008578737539, 0.14503228005504643, 0.1368110846710595, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.16045503484396162, 0.16814906059237933, 0.16779352461211916, 0.18345227603231407, 0.1769644640004372, 0.16394853491863692, 0.17377774300845283, 0.14944136665615082, 0.10625662637201472, 0.10485834564521979, 0.11109491287868445, 0.11434060850004057, 0.13610603218022022, 0.11676919299387534, 0.1047405734700314, 0.1237427242099084, 0.1229185550255375, 0.1469911274974911, 0.1627931472730334, 0.15227355182644664, 0.1772282713892389, 0.15350065615657893, 0.16236042742370171, 0.15525061061068246, 0.17355151355563359, 0.18277724523822958, 0.14300186596947517, 0.14578023879947632, 0.14031393936163972, 0.14101597620439077, 0.14379058119127952, 0.15282202985716775, 0.14222817191249215, 0.1452613650372515, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.18143789660342347, 0.15271964690840956, 0.14237255264100745, 0.16139484817187333, 0.1634028490223587, 0.1573924655404486, 0.15809251228438737, 0.16999048261300576, 0.16066497156641035, 0.15159923114680174, 0.14870682596182816, 0.16045374486843178, 0.18087143939013772, 0.1733826927034039, 0.2028812417861957, 0.17430251009557507, 0.1848605152647026, 0.1781542580562776, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.180678006394425, 0.19166001416380773, 0.20568880668582523, 0.058344077551123696, 0.05338573826732518, 0.06585155299632517, 0.055269585686843814, 0.06469192465659268, 0.053801126161452384, 0.07532529613519179, 0.07189922438974627, 0.04800596849491756]}, "mutation_prompt": null}
{"id": "81c8ee8f-8842-41be-9b5f-78ebe435716f", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        def pitch_adjustment(new_solution, index):\n            if np.random.rand() < self.par:\n                new_solution[index] = new_solution[index] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                new_solution[index] = np.clip(new_solution[index], self.lower_bound, self.upper_bound)\n            return new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    for i in range(self.dim):\n                        if np.random.rand() < self.hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution = pitch_adjustment(new_solution, i)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]\n", "name": "HybridHarmonyPSO", "description": "Using a hybrid strategy by incorporating Particle Swarm Optimization (PSO) to explore the search space and enhance local exploitation, thus improving convergence speed.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c7a821aa-7010-4128-a1fb-24a311e31f28", "metadata": {"aucs": [0.17173949911621944, 0.1784867882340675, 0.18033414644396506, 0.1701785314208557, 0.18818139055183436, 0.1743435064021196, 0.1845128912039109, 0.16108288315219066, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.043392263366959005, 0.03997653735317941, 0.04335695399237993, 0.03905964913802584, 0.05284484387130384, 0.06702432684758475, 0.058711088734964334, 0.028195070974301073, 0.042050458905104615, 0.0481463786277756, 0.027274632677879884, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.03992308285267243, 0.030574022029666414, 0.5019852656942942, 0.5282249364524683, 0.5352894979840119, 0.4867540655940701, 0.5354409487869136, 0.515783582511393, 0.5328036959589197, 0.5336740165974466, 0.5344810290790483, 0.07970825545199256, 0.07510940173832203, 0.10171882691615464, 0.05375182926910005, 0.06739118875598982, 0.06454991931958631, 0.09472457566024695, 0.057034870011662187, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10485579795043742, 0.09827625300583875, 0.12629744495441353, 0.1161373594082461, 0.1368487698841222, 0.11639594428158784, 0.02088364274821164, 0.006245667324024318, 0.003689195106263865, 0.0054168340838776086, 9.999999999998899e-05, 0.0010533731891797515, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.005507880665700071, 0.06957272857429797, 0.0022751738287132284, 0.02016871089046468, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.007694983858733018, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.04490689360873623, 0.06941906045599022, 0.039247783231376676, 0.055770453722678415, 0.05295698494644707, 0.0339060597669375, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19685268894823627, 0.17807361810291966, 0.2055799784281095, 0.19425490959648672, 0.20724700933075846, 0.19916626223344447, 0.1784211624537766, 0.1891480374906228, 0.04680390455819994, 0.038816559836695186, 0.04401887178405428, 0.05066491103680015, 0.04511104405991484, 0.046009660620107806, 0.073263588849099, 0.045771150281882944, 0.05229792848072812, 0.14821980145136182, 0.12278010747121193, 0.12908010207797238, 0.1443008578737539, 0.14503228005504643, 0.1368110846710595, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.16045503484396162, 0.16814906059237933, 0.16779352461211916, 0.18345227603231407, 0.1769644640004372, 0.16394853491863692, 0.17377774300845283, 0.14944136665615082, 0.10625662637201472, 0.10485834564521979, 0.11109491287868445, 0.11434060850004057, 0.13610603218022022, 0.11676919299387534, 0.1047405734700314, 0.1237427242099084, 0.1229185550255375, 0.1469911274974911, 0.1627931472730334, 0.15227355182644664, 0.1772282713892389, 0.15350065615657893, 0.16236042742370171, 0.15525061061068246, 0.17355151355563359, 0.18277724523822958, 0.14300186596947517, 0.14578023879947632, 0.14031393936163972, 0.14101597620439077, 0.14379058119127952, 0.15282202985716775, 0.14222817191249215, 0.1452613650372515, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.18143789660342347, 0.15271964690840956, 0.14237255264100745, 0.16139484817187333, 0.1634028490223587, 0.1573924655404486, 0.15809251228438737, 0.16999048261300576, 0.16066497156641035, 0.15159923114680174, 0.14870682596182816, 0.16045374486843178, 0.18087143939013772, 0.1733826927034039, 0.2028812417861957, 0.17430251009557507, 0.1848605152647026, 0.1781542580562776, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.180678006394425, 0.19166001416380773, 0.20568880668582523, 0.058344077551123696, 0.05338573826732518, 0.06585155299632517, 0.055269585686843814, 0.06469192465659268, 0.053801126161452384, 0.07532529613519179, 0.07189922438974627, 0.04800596849491756]}, "mutation_prompt": null}
{"id": "044fbcbe-1913-4af9-a0ec-03063bce63a9", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        def pitch_adjustment(new_solution, index):\n            if np.random.rand() < self.par:\n                new_solution[index] = new_solution[index] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                new_solution[index] = np.clip(new_solution[index], self.lower_bound, self.upper_bound)\n            return new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    for i in range(self.dim):\n                        if np.random.rand() < self.hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution = pitch_adjustment(new_solution, i)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]\n", "name": "HybridHarmonyPSO", "description": "Using a hybrid strategy by incorporating Particle Swarm Optimization (PSO) to explore the search space and enhance local exploitation, thus improving convergence speed.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "c7a821aa-7010-4128-a1fb-24a311e31f28", "metadata": {"aucs": [0.17173949911621944, 0.1784867882340675, 0.18033414644396506, 0.1701785314208557, 0.18818139055183436, 0.1743435064021196, 0.1845128912039109, 0.16108288315219066, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.043392263366959005, 0.03997653735317941, 0.04335695399237993, 0.03905964913802584, 0.05284484387130384, 0.06702432684758475, 0.058711088734964334, 0.028195070974301073, 0.042050458905104615, 0.0481463786277756, 0.027274632677879884, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.03992308285267243, 0.030574022029666414, 0.5019852656942942, 0.5282249364524683, 0.5352894979840119, 0.4867540655940701, 0.5354409487869136, 0.515783582511393, 0.5328036959589197, 0.5336740165974466, 0.5344810290790483, 0.07970825545199256, 0.07510940173832203, 0.10171882691615464, 0.05375182926910005, 0.06739118875598982, 0.06454991931958631, 0.09472457566024695, 0.057034870011662187, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10485579795043742, 0.09827625300583875, 0.12629744495441353, 0.1161373594082461, 0.1368487698841222, 0.11639594428158784, 0.02088364274821164, 0.006245667324024318, 0.003689195106263865, 0.0054168340838776086, 9.999999999998899e-05, 0.0010533731891797515, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.005507880665700071, 0.06957272857429797, 0.0022751738287132284, 0.02016871089046468, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.007694983858733018, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.04490689360873623, 0.06941906045599022, 0.039247783231376676, 0.055770453722678415, 0.05295698494644707, 0.0339060597669375, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19685268894823627, 0.17807361810291966, 0.2055799784281095, 0.19425490959648672, 0.20724700933075846, 0.19916626223344447, 0.1784211624537766, 0.1891480374906228, 0.04680390455819994, 0.038816559836695186, 0.04401887178405428, 0.05066491103680015, 0.04511104405991484, 0.046009660620107806, 0.073263588849099, 0.045771150281882944, 0.05229792848072812, 0.14821980145136182, 0.12278010747121193, 0.12908010207797238, 0.1443008578737539, 0.14503228005504643, 0.1368110846710595, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.16045503484396162, 0.16814906059237933, 0.16779352461211916, 0.18345227603231407, 0.1769644640004372, 0.16394853491863692, 0.17377774300845283, 0.14944136665615082, 0.10625662637201472, 0.10485834564521979, 0.11109491287868445, 0.11434060850004057, 0.13610603218022022, 0.11676919299387534, 0.1047405734700314, 0.1237427242099084, 0.1229185550255375, 0.1469911274974911, 0.1627931472730334, 0.15227355182644664, 0.1772282713892389, 0.15350065615657893, 0.16236042742370171, 0.15525061061068246, 0.17355151355563359, 0.18277724523822958, 0.14300186596947517, 0.14578023879947632, 0.14031393936163972, 0.14101597620439077, 0.14379058119127952, 0.15282202985716775, 0.14222817191249215, 0.1452613650372515, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.18143789660342347, 0.15271964690840956, 0.14237255264100745, 0.16139484817187333, 0.1634028490223587, 0.1573924655404486, 0.15809251228438737, 0.16999048261300576, 0.16066497156641035, 0.15159923114680174, 0.14870682596182816, 0.16045374486843178, 0.18087143939013772, 0.1733826927034039, 0.2028812417861957, 0.17430251009557507, 0.1848605152647026, 0.1781542580562776, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.180678006394425, 0.19166001416380773, 0.20568880668582523, 0.058344077551123696, 0.05338573826732518, 0.06585155299632517, 0.055269585686843814, 0.06469192465659268, 0.053801126161452384, 0.07532529613519179, 0.07189922438974627, 0.04800596849491756]}, "mutation_prompt": null}
{"id": "f706ea3f-4327-4dbe-a188-76ec2872bd36", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        def pitch_adjustment(new_solution, index):\n            if np.random.rand() < self.par:\n                new_solution[index] = new_solution[index] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                new_solution[index] = np.clip(new_solution[index], self.lower_bound, self.upper_bound)\n            return new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    for i in range(self.dim):\n                        if np.random.rand() < self.hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution = pitch_adjustment(new_solution, i)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]\n", "name": "HybridHarmonyPSO", "description": "Using a hybrid strategy by incorporating Particle Swarm Optimization (PSO) to explore the search space and enhance local exploitation, thus improving convergence speed.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c7a821aa-7010-4128-a1fb-24a311e31f28", "metadata": {"aucs": [0.17173949911621944, 0.1784867882340675, 0.18033414644396506, 0.1701785314208557, 0.18818139055183436, 0.1743435064021196, 0.1845128912039109, 0.16108288315219066, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.043392263366959005, 0.03997653735317941, 0.04335695399237993, 0.03905964913802584, 0.05284484387130384, 0.06702432684758475, 0.058711088734964334, 0.028195070974301073, 0.042050458905104615, 0.0481463786277756, 0.027274632677879884, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.03992308285267243, 0.030574022029666414, 0.5019852656942942, 0.5282249364524683, 0.5352894979840119, 0.4867540655940701, 0.5354409487869136, 0.515783582511393, 0.5328036959589197, 0.5336740165974466, 0.5344810290790483, 0.07970825545199256, 0.07510940173832203, 0.10171882691615464, 0.05375182926910005, 0.06739118875598982, 0.06454991931958631, 0.09472457566024695, 0.057034870011662187, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10485579795043742, 0.09827625300583875, 0.12629744495441353, 0.1161373594082461, 0.1368487698841222, 0.11639594428158784, 0.02088364274821164, 0.006245667324024318, 0.003689195106263865, 0.0054168340838776086, 9.999999999998899e-05, 0.0010533731891797515, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.005507880665700071, 0.06957272857429797, 0.0022751738287132284, 0.02016871089046468, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.007694983858733018, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.04490689360873623, 0.06941906045599022, 0.039247783231376676, 0.055770453722678415, 0.05295698494644707, 0.0339060597669375, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19685268894823627, 0.17807361810291966, 0.2055799784281095, 0.19425490959648672, 0.20724700933075846, 0.19916626223344447, 0.1784211624537766, 0.1891480374906228, 0.04680390455819994, 0.038816559836695186, 0.04401887178405428, 0.05066491103680015, 0.04511104405991484, 0.046009660620107806, 0.073263588849099, 0.045771150281882944, 0.05229792848072812, 0.14821980145136182, 0.12278010747121193, 0.12908010207797238, 0.1443008578737539, 0.14503228005504643, 0.1368110846710595, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.16045503484396162, 0.16814906059237933, 0.16779352461211916, 0.18345227603231407, 0.1769644640004372, 0.16394853491863692, 0.17377774300845283, 0.14944136665615082, 0.10625662637201472, 0.10485834564521979, 0.11109491287868445, 0.11434060850004057, 0.13610603218022022, 0.11676919299387534, 0.1047405734700314, 0.1237427242099084, 0.1229185550255375, 0.1469911274974911, 0.1627931472730334, 0.15227355182644664, 0.1772282713892389, 0.15350065615657893, 0.16236042742370171, 0.15525061061068246, 0.17355151355563359, 0.18277724523822958, 0.14300186596947517, 0.14578023879947632, 0.14031393936163972, 0.14101597620439077, 0.14379058119127952, 0.15282202985716775, 0.14222817191249215, 0.1452613650372515, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.18143789660342347, 0.15271964690840956, 0.14237255264100745, 0.16139484817187333, 0.1634028490223587, 0.1573924655404486, 0.15809251228438737, 0.16999048261300576, 0.16066497156641035, 0.15159923114680174, 0.14870682596182816, 0.16045374486843178, 0.18087143939013772, 0.1733826927034039, 0.2028812417861957, 0.17430251009557507, 0.1848605152647026, 0.1781542580562776, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.180678006394425, 0.19166001416380773, 0.20568880668582523, 0.058344077551123696, 0.05338573826732518, 0.06585155299632517, 0.055269585686843814, 0.06469192465659268, 0.053801126161452384, 0.07532529613519179, 0.07189922438974627, 0.04800596849491756]}, "mutation_prompt": null}
{"id": "3a24db85-c55a-4ac9-a7c2-0067a630a9fc", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        def pitch_adjustment(new_solution, index):\n            if np.random.rand() < self.par:\n                new_solution[index] = new_solution[index] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                new_solution[index] = np.clip(new_solution[index], self.lower_bound, self.upper_bound)\n            return new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    for i in range(self.dim):\n                        if np.random.rand() < self.hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution = pitch_adjustment(new_solution, i)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]\n", "name": "HybridHarmonyPSO", "description": "Using a hybrid strategy by incorporating Particle Swarm Optimization (PSO) to explore the search space and enhance local exploitation, thus improving convergence speed.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "c7a821aa-7010-4128-a1fb-24a311e31f28", "metadata": {"aucs": [0.17173949911621944, 0.1784867882340675, 0.18033414644396506, 0.1701785314208557, 0.18818139055183436, 0.1743435064021196, 0.1845128912039109, 0.16108288315219066, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.043392263366959005, 0.03997653735317941, 0.04335695399237993, 0.03905964913802584, 0.05284484387130384, 0.06702432684758475, 0.058711088734964334, 0.028195070974301073, 0.042050458905104615, 0.0481463786277756, 0.027274632677879884, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.03992308285267243, 0.030574022029666414, 0.5019852656942942, 0.5282249364524683, 0.5352894979840119, 0.4867540655940701, 0.5354409487869136, 0.515783582511393, 0.5328036959589197, 0.5336740165974466, 0.5344810290790483, 0.07970825545199256, 0.07510940173832203, 0.10171882691615464, 0.05375182926910005, 0.06739118875598982, 0.06454991931958631, 0.09472457566024695, 0.057034870011662187, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10485579795043742, 0.09827625300583875, 0.12629744495441353, 0.1161373594082461, 0.1368487698841222, 0.11639594428158784, 0.02088364274821164, 0.006245667324024318, 0.003689195106263865, 0.0054168340838776086, 9.999999999998899e-05, 0.0010533731891797515, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.005507880665700071, 0.06957272857429797, 0.0022751738287132284, 0.02016871089046468, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.007694983858733018, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.04490689360873623, 0.06941906045599022, 0.039247783231376676, 0.055770453722678415, 0.05295698494644707, 0.0339060597669375, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19685268894823627, 0.17807361810291966, 0.2055799784281095, 0.19425490959648672, 0.20724700933075846, 0.19916626223344447, 0.1784211624537766, 0.1891480374906228, 0.04680390455819994, 0.038816559836695186, 0.04401887178405428, 0.05066491103680015, 0.04511104405991484, 0.046009660620107806, 0.073263588849099, 0.045771150281882944, 0.05229792848072812, 0.14821980145136182, 0.12278010747121193, 0.12908010207797238, 0.1443008578737539, 0.14503228005504643, 0.1368110846710595, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.16045503484396162, 0.16814906059237933, 0.16779352461211916, 0.18345227603231407, 0.1769644640004372, 0.16394853491863692, 0.17377774300845283, 0.14944136665615082, 0.10625662637201472, 0.10485834564521979, 0.11109491287868445, 0.11434060850004057, 0.13610603218022022, 0.11676919299387534, 0.1047405734700314, 0.1237427242099084, 0.1229185550255375, 0.1469911274974911, 0.1627931472730334, 0.15227355182644664, 0.1772282713892389, 0.15350065615657893, 0.16236042742370171, 0.15525061061068246, 0.17355151355563359, 0.18277724523822958, 0.14300186596947517, 0.14578023879947632, 0.14031393936163972, 0.14101597620439077, 0.14379058119127952, 0.15282202985716775, 0.14222817191249215, 0.1452613650372515, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.18143789660342347, 0.15271964690840956, 0.14237255264100745, 0.16139484817187333, 0.1634028490223587, 0.1573924655404486, 0.15809251228438737, 0.16999048261300576, 0.16066497156641035, 0.15159923114680174, 0.14870682596182816, 0.16045374486843178, 0.18087143939013772, 0.1733826927034039, 0.2028812417861957, 0.17430251009557507, 0.1848605152647026, 0.1781542580562776, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.180678006394425, 0.19166001416380773, 0.20568880668582523, 0.058344077551123696, 0.05338573826732518, 0.06585155299632517, 0.055269585686843814, 0.06469192465659268, 0.053801126161452384, 0.07532529613519179, 0.07189922438974627, 0.04800596849491756]}, "mutation_prompt": null}
{"id": "65a9475d-e6fc-4c66-9441-4695e1dea3df", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        def pitch_adjustment(new_solution, index):\n            if np.random.rand() < self.par:\n                new_solution[index] = new_solution[index] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                new_solution[index] = np.clip(new_solution[index], self.lower_bound, self.upper_bound)\n            return new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    for i in range(self.dim):\n                        if np.random.rand() < self.hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution = pitch_adjustment(new_solution, i)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]\n", "name": "HybridHarmonyPSO", "description": "Using a hybrid strategy by incorporating Particle Swarm Optimization (PSO) to explore the search space and enhance local exploitation, thus improving convergence speed.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c7a821aa-7010-4128-a1fb-24a311e31f28", "metadata": {"aucs": [0.17173949911621944, 0.1784867882340675, 0.18033414644396506, 0.1701785314208557, 0.18818139055183436, 0.1743435064021196, 0.1845128912039109, 0.16108288315219066, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.043392263366959005, 0.03997653735317941, 0.04335695399237993, 0.03905964913802584, 0.05284484387130384, 0.06702432684758475, 0.058711088734964334, 0.028195070974301073, 0.042050458905104615, 0.0481463786277756, 0.027274632677879884, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.03992308285267243, 0.030574022029666414, 0.5019852656942942, 0.5282249364524683, 0.5352894979840119, 0.4867540655940701, 0.5354409487869136, 0.515783582511393, 0.5328036959589197, 0.5336740165974466, 0.5344810290790483, 0.07970825545199256, 0.07510940173832203, 0.10171882691615464, 0.05375182926910005, 0.06739118875598982, 0.06454991931958631, 0.09472457566024695, 0.057034870011662187, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10485579795043742, 0.09827625300583875, 0.12629744495441353, 0.1161373594082461, 0.1368487698841222, 0.11639594428158784, 0.02088364274821164, 0.006245667324024318, 0.003689195106263865, 0.0054168340838776086, 9.999999999998899e-05, 0.0010533731891797515, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.005507880665700071, 0.06957272857429797, 0.0022751738287132284, 0.02016871089046468, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.007694983858733018, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.04490689360873623, 0.06941906045599022, 0.039247783231376676, 0.055770453722678415, 0.05295698494644707, 0.0339060597669375, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19685268894823627, 0.17807361810291966, 0.2055799784281095, 0.19425490959648672, 0.20724700933075846, 0.19916626223344447, 0.1784211624537766, 0.1891480374906228, 0.04680390455819994, 0.038816559836695186, 0.04401887178405428, 0.05066491103680015, 0.04511104405991484, 0.046009660620107806, 0.073263588849099, 0.045771150281882944, 0.05229792848072812, 0.14821980145136182, 0.12278010747121193, 0.12908010207797238, 0.1443008578737539, 0.14503228005504643, 0.1368110846710595, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.16045503484396162, 0.16814906059237933, 0.16779352461211916, 0.18345227603231407, 0.1769644640004372, 0.16394853491863692, 0.17377774300845283, 0.14944136665615082, 0.10625662637201472, 0.10485834564521979, 0.11109491287868445, 0.11434060850004057, 0.13610603218022022, 0.11676919299387534, 0.1047405734700314, 0.1237427242099084, 0.1229185550255375, 0.1469911274974911, 0.1627931472730334, 0.15227355182644664, 0.1772282713892389, 0.15350065615657893, 0.16236042742370171, 0.15525061061068246, 0.17355151355563359, 0.18277724523822958, 0.14300186596947517, 0.14578023879947632, 0.14031393936163972, 0.14101597620439077, 0.14379058119127952, 0.15282202985716775, 0.14222817191249215, 0.1452613650372515, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.18143789660342347, 0.15271964690840956, 0.14237255264100745, 0.16139484817187333, 0.1634028490223587, 0.1573924655404486, 0.15809251228438737, 0.16999048261300576, 0.16066497156641035, 0.15159923114680174, 0.14870682596182816, 0.16045374486843178, 0.18087143939013772, 0.1733826927034039, 0.2028812417861957, 0.17430251009557507, 0.1848605152647026, 0.1781542580562776, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.180678006394425, 0.19166001416380773, 0.20568880668582523, 0.058344077551123696, 0.05338573826732518, 0.06585155299632517, 0.055269585686843814, 0.06469192465659268, 0.053801126161452384, 0.07532529613519179, 0.07189922438974627, 0.04800596849491756]}, "mutation_prompt": null}
{"id": "3b9d2217-82d6-4d3c-b1c1-8016299260b2", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        def pitch_adjustment(new_solution, index):\n            if np.random.rand() < self.par:\n                new_solution[index] = new_solution[index] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                new_solution[index] = np.clip(new_solution[index], self.lower_bound, self.upper_bound)\n            return new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    for i in range(self.dim):\n                        if np.random.rand() < self.hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution = pitch_adjustment(new_solution, i)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]\n", "name": "HybridHarmonyPSO", "description": "Using a hybrid strategy by incorporating Particle Swarm Optimization (PSO) to explore the search space and enhance local exploitation, thus improving convergence speed.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "c7a821aa-7010-4128-a1fb-24a311e31f28", "metadata": {"aucs": [0.17173949911621944, 0.1784867882340675, 0.18033414644396506, 0.1701785314208557, 0.18818139055183436, 0.1743435064021196, 0.1845128912039109, 0.16108288315219066, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.043392263366959005, 0.03997653735317941, 0.04335695399237993, 0.03905964913802584, 0.05284484387130384, 0.06702432684758475, 0.058711088734964334, 0.028195070974301073, 0.042050458905104615, 0.0481463786277756, 0.027274632677879884, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.03992308285267243, 0.030574022029666414, 0.5019852656942942, 0.5282249364524683, 0.5352894979840119, 0.4867540655940701, 0.5354409487869136, 0.515783582511393, 0.5328036959589197, 0.5336740165974466, 0.5344810290790483, 0.07970825545199256, 0.07510940173832203, 0.10171882691615464, 0.05375182926910005, 0.06739118875598982, 0.06454991931958631, 0.09472457566024695, 0.057034870011662187, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10485579795043742, 0.09827625300583875, 0.12629744495441353, 0.1161373594082461, 0.1368487698841222, 0.11639594428158784, 0.02088364274821164, 0.006245667324024318, 0.003689195106263865, 0.0054168340838776086, 9.999999999998899e-05, 0.0010533731891797515, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.005507880665700071, 0.06957272857429797, 0.0022751738287132284, 0.02016871089046468, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.007694983858733018, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.04490689360873623, 0.06941906045599022, 0.039247783231376676, 0.055770453722678415, 0.05295698494644707, 0.0339060597669375, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19685268894823627, 0.17807361810291966, 0.2055799784281095, 0.19425490959648672, 0.20724700933075846, 0.19916626223344447, 0.1784211624537766, 0.1891480374906228, 0.04680390455819994, 0.038816559836695186, 0.04401887178405428, 0.05066491103680015, 0.04511104405991484, 0.046009660620107806, 0.073263588849099, 0.045771150281882944, 0.05229792848072812, 0.14821980145136182, 0.12278010747121193, 0.12908010207797238, 0.1443008578737539, 0.14503228005504643, 0.1368110846710595, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.16045503484396162, 0.16814906059237933, 0.16779352461211916, 0.18345227603231407, 0.1769644640004372, 0.16394853491863692, 0.17377774300845283, 0.14944136665615082, 0.10625662637201472, 0.10485834564521979, 0.11109491287868445, 0.11434060850004057, 0.13610603218022022, 0.11676919299387534, 0.1047405734700314, 0.1237427242099084, 0.1229185550255375, 0.1469911274974911, 0.1627931472730334, 0.15227355182644664, 0.1772282713892389, 0.15350065615657893, 0.16236042742370171, 0.15525061061068246, 0.17355151355563359, 0.18277724523822958, 0.14300186596947517, 0.14578023879947632, 0.14031393936163972, 0.14101597620439077, 0.14379058119127952, 0.15282202985716775, 0.14222817191249215, 0.1452613650372515, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.18143789660342347, 0.15271964690840956, 0.14237255264100745, 0.16139484817187333, 0.1634028490223587, 0.1573924655404486, 0.15809251228438737, 0.16999048261300576, 0.16066497156641035, 0.15159923114680174, 0.14870682596182816, 0.16045374486843178, 0.18087143939013772, 0.1733826927034039, 0.2028812417861957, 0.17430251009557507, 0.1848605152647026, 0.1781542580562776, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.180678006394425, 0.19166001416380773, 0.20568880668582523, 0.058344077551123696, 0.05338573826732518, 0.06585155299632517, 0.055269585686843814, 0.06469192465659268, 0.053801126161452384, 0.07532529613519179, 0.07189922438974627, 0.04800596849491756]}, "mutation_prompt": null}
{"id": "fcf0c7bd-8bbb-435c-be59-7f75e8aab16a", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        def pitch_adjustment(new_solution, index):\n            if np.random.rand() < self.par:\n                new_solution[index] = new_solution[index] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                new_solution[index] = np.clip(new_solution[index], self.lower_bound, self.upper_bound)\n            return new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    for i in range(self.dim):\n                        if np.random.rand() < self.hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution = pitch_adjustment(new_solution, i)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]\n", "name": "HybridHarmonyPSO", "description": "Using a hybrid strategy by incorporating Particle Swarm Optimization (PSO) to explore the search space and enhance local exploitation, thus improving convergence speed.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "c7a821aa-7010-4128-a1fb-24a311e31f28", "metadata": {"aucs": [0.17173949911621944, 0.1784867882340675, 0.18033414644396506, 0.1701785314208557, 0.18818139055183436, 0.1743435064021196, 0.1845128912039109, 0.16108288315219066, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.043392263366959005, 0.03997653735317941, 0.04335695399237993, 0.03905964913802584, 0.05284484387130384, 0.06702432684758475, 0.058711088734964334, 0.028195070974301073, 0.042050458905104615, 0.0481463786277756, 0.027274632677879884, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.03992308285267243, 0.030574022029666414, 0.5019852656942942, 0.5282249364524683, 0.5352894979840119, 0.4867540655940701, 0.5354409487869136, 0.515783582511393, 0.5328036959589197, 0.5336740165974466, 0.5344810290790483, 0.07970825545199256, 0.07510940173832203, 0.10171882691615464, 0.05375182926910005, 0.06739118875598982, 0.06454991931958631, 0.09472457566024695, 0.057034870011662187, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10485579795043742, 0.09827625300583875, 0.12629744495441353, 0.1161373594082461, 0.1368487698841222, 0.11639594428158784, 0.02088364274821164, 0.006245667324024318, 0.003689195106263865, 0.0054168340838776086, 9.999999999998899e-05, 0.0010533731891797515, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.005507880665700071, 0.06957272857429797, 0.0022751738287132284, 0.02016871089046468, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.007694983858733018, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.04490689360873623, 0.06941906045599022, 0.039247783231376676, 0.055770453722678415, 0.05295698494644707, 0.0339060597669375, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19685268894823627, 0.17807361810291966, 0.2055799784281095, 0.19425490959648672, 0.20724700933075846, 0.19916626223344447, 0.1784211624537766, 0.1891480374906228, 0.04680390455819994, 0.038816559836695186, 0.04401887178405428, 0.05066491103680015, 0.04511104405991484, 0.046009660620107806, 0.073263588849099, 0.045771150281882944, 0.05229792848072812, 0.14821980145136182, 0.12278010747121193, 0.12908010207797238, 0.1443008578737539, 0.14503228005504643, 0.1368110846710595, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.16045503484396162, 0.16814906059237933, 0.16779352461211916, 0.18345227603231407, 0.1769644640004372, 0.16394853491863692, 0.17377774300845283, 0.14944136665615082, 0.10625662637201472, 0.10485834564521979, 0.11109491287868445, 0.11434060850004057, 0.13610603218022022, 0.11676919299387534, 0.1047405734700314, 0.1237427242099084, 0.1229185550255375, 0.1469911274974911, 0.1627931472730334, 0.15227355182644664, 0.1772282713892389, 0.15350065615657893, 0.16236042742370171, 0.15525061061068246, 0.17355151355563359, 0.18277724523822958, 0.14300186596947517, 0.14578023879947632, 0.14031393936163972, 0.14101597620439077, 0.14379058119127952, 0.15282202985716775, 0.14222817191249215, 0.1452613650372515, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.18143789660342347, 0.15271964690840956, 0.14237255264100745, 0.16139484817187333, 0.1634028490223587, 0.1573924655404486, 0.15809251228438737, 0.16999048261300576, 0.16066497156641035, 0.15159923114680174, 0.14870682596182816, 0.16045374486843178, 0.18087143939013772, 0.1733826927034039, 0.2028812417861957, 0.17430251009557507, 0.1848605152647026, 0.1781542580562776, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.180678006394425, 0.19166001416380773, 0.20568880668582523, 0.058344077551123696, 0.05338573826732518, 0.06585155299632517, 0.055269585686843814, 0.06469192465659268, 0.053801126161452384, 0.07532529613519179, 0.07189922438974627, 0.04800596849491756]}, "mutation_prompt": null}
{"id": "79b0030e-0b40-4741-a933-94b29a34c8c8", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        def pitch_adjustment(new_solution, index):\n            if np.random.rand() < self.par:\n                new_solution[index] = new_solution[index] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                new_solution[index] = np.clip(new_solution[index], self.lower_bound, self.upper_bound)\n            return new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                futures = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    for i in range(self.dim):\n                        if np.random.rand() < self.hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution = pitch_adjustment(new_solution, i)\n                    new_solutions.append(new_solution)\n                    futures.append(executor.submit(lambda x: self.evaluate_solution(func, x), new_solution))\n                \n                new_fitness = np.array([future.result() for future in futures])\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                    # Particle Swarm Optimization (PSO) for local exploration\n                    pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                    pbest = pso_swarm.copy()\n                    pbest_fitness = np.array([func(p) for p in pbest])\n                    gbest_index = np.argmin(pbest_fitness)\n                    gbest = pbest[gbest_index]\n\n                    for _ in range(self.pso_max_iter):\n                        for i in range(self.pso_swarm_size):\n                            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                            pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                            pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                            pso_fitness = func(pso_swarm[i])\n                            if pso_fitness < pbest_fitness[i]:\n                                pbest[i] = pso_swarm[i]\n                                pbest_fitness[i] = pso_fitness\n                                if pbest_fitness[i] < func(gbest):\n                                    gbest = pbest[i]\n                                    gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "HybridHarmonyPSO", "description": "Implement asynchronous evaluation of new solutions using concurrent.futures for parallel fitness evaluation to enhance optimization speed.", "configspace": "", "generation": 29, "fitness": 0.1096306635803039, "feedback": "The algorithm HybridHarmonyPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.11.", "error": "", "parent_id": "c7a821aa-7010-4128-a1fb-24a311e31f28", "metadata": {"aucs": [0.17316811945895583, 0.1773285891336156, 0.170257377687277, 0.17692265262790297, 0.18818139055183436, 0.1745092654346292, 0.17875939611472513, 0.16108288315219066, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.054430314686274905, 0.03618932539327069, 0.0449131491406366, 0.0397104894961976, 0.042095318265478965, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.027506897871572566, 0.03243378194821345, 0.0481463786277756, 0.025965940872886173, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.03992308285267243, 0.031138501986898492, 0.5214667654048972, 0.5282249364524683, 0.5352894979840119, 0.5187566032231141, 0.5354409487869136, 0.5076233879115173, 0.5328036959589197, 0.5336740165974466, 0.5344810290790483, 0.06443028781665472, 0.0782951103286903, 0.10171882691615464, 0.055965921158328324, 0.07502596491995939, 0.05190122563388122, 0.09472457566024695, 0.057034870011662187, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.1523231489450354, 0.10578970102129714, 0.1170020761505306, 0.12542992855365953, 0.11822206201561147, 0.1368487698841222, 0.1135869029704345, 0.020242196322366568, 0.003171980480751291, 0.01910243256441113, 0.00456249210052484, 0.010536956703524059, 0.00011608678907282233, 9.999999999998899e-05, 0.0011210167051495246, 0.019872591751231683, 0.0077247108009173004, 0.06957272857429797, 0.00558670841766995, 0.007159387613177359, 0.035362057023575866, 0.018514231974230633, 0.017993280776203546, 0.01499375126751834, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.048172390158340184, 0.06947421936321185, 0.04155529238768818, 0.055770453722678415, 0.05295698494644707, 0.03960140018323599, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.2225205331013822, 0.1946885961312843, 0.1848168171338651, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.19888618716801598, 0.18049340435004413, 0.20593980485450392, 0.04680390455819994, 0.03926499152782603, 0.04401887178405428, 0.042014629705518725, 0.03986527819452024, 0.046009660620107806, 0.073263588849099, 0.04544186017090035, 0.05229792848072812, 0.13709410100555053, 0.12371496955912187, 0.12800718076529616, 0.14263744976094295, 0.14115194246620144, 0.12439502916632517, 0.15771070439992618, 0.14861619065631115, 0.12862528034911247, 0.16876835865786466, 0.15984112903224157, 0.1714442174520896, 0.16951418305992794, 0.1821496595795835, 0.1769644640004372, 0.16394853491863692, 0.17478256293234662, 0.1594543115501298, 0.11411847957149968, 0.10382166168941254, 0.11109491287868445, 0.11003001025313519, 0.13684066325301703, 0.11676919299387534, 0.10477953606139268, 0.1237427242099084, 0.1229185550255375, 0.14426224811316846, 0.16233450221944246, 0.14401768958147354, 0.1627639968546457, 0.14691620622947288, 0.16236042742370171, 0.15027945805970033, 0.17355151355563359, 0.18277724523822958, 0.1426890929607174, 0.14578023879947632, 0.14208877282713273, 0.14101597620439077, 0.14411946602051617, 0.15282202985716775, 0.1415013569207686, 0.14301421849839413, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1571573551766411, 0.1552340770177747, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.15692009224327252, 0.15698722216387428, 0.1580636080386837, 0.16050779395916304, 0.16673765704202181, 0.14870682596182816, 0.16045374486843178, 0.1768967379523838, 0.1733826927034039, 0.2028812417861957, 0.17117501241936572, 0.1840951386782479, 0.17657939283136637, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.188688463014553, 0.20568880668582523, 0.06358122850432824, 0.05081117145569902, 0.06585155299632517, 0.057250565616783766, 0.05934830659822565, 0.0533550031798079, 0.07532529613519179, 0.055052269729343295, 0.04674619266333635]}, "mutation_prompt": null}
{"id": "81f6ceff-4f8a-4fa1-9665-da40d117571a", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        def pitch_adjustment(new_solution, index):\n            if np.random.rand() < self.par:\n                new_solution[index] = new_solution[index] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                new_solution[index] = np.clip(new_solution[index], self.lower_bound, self.upper_bound)\n            return new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    for i in range(self.dim):\n                        if np.random.rand() < self.hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution = pitch_adjustment(new_solution, i)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]\n", "name": "HybridHarmonyPSO", "description": "Using a hybrid strategy by incorporating Particle Swarm Optimization (PSO) to explore the search space and enhance local exploitation, thus improving convergence speed.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c7a821aa-7010-4128-a1fb-24a311e31f28", "metadata": {"aucs": [0.17173949911621944, 0.1784867882340675, 0.18033414644396506, 0.1701785314208557, 0.18818139055183436, 0.1743435064021196, 0.1845128912039109, 0.16108288315219066, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.043392263366959005, 0.03997653735317941, 0.04335695399237993, 0.03905964913802584, 0.05284484387130384, 0.06702432684758475, 0.058711088734964334, 0.028195070974301073, 0.042050458905104615, 0.0481463786277756, 0.027274632677879884, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.03992308285267243, 0.030574022029666414, 0.5019852656942942, 0.5282249364524683, 0.5352894979840119, 0.4867540655940701, 0.5354409487869136, 0.515783582511393, 0.5328036959589197, 0.5336740165974466, 0.5344810290790483, 0.07970825545199256, 0.07510940173832203, 0.10171882691615464, 0.05375182926910005, 0.06739118875598982, 0.06454991931958631, 0.09472457566024695, 0.057034870011662187, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10485579795043742, 0.09827625300583875, 0.12629744495441353, 0.1161373594082461, 0.1368487698841222, 0.11639594428158784, 0.02088364274821164, 0.006245667324024318, 0.003689195106263865, 0.0054168340838776086, 9.999999999998899e-05, 0.0010533731891797515, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.005507880665700071, 0.06957272857429797, 0.0022751738287132284, 0.02016871089046468, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.007694983858733018, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.04490689360873623, 0.06941906045599022, 0.039247783231376676, 0.055770453722678415, 0.05295698494644707, 0.0339060597669375, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19685268894823627, 0.17807361810291966, 0.2055799784281095, 0.19425490959648672, 0.20724700933075846, 0.19916626223344447, 0.1784211624537766, 0.1891480374906228, 0.04680390455819994, 0.038816559836695186, 0.04401887178405428, 0.05066491103680015, 0.04511104405991484, 0.046009660620107806, 0.073263588849099, 0.045771150281882944, 0.05229792848072812, 0.14821980145136182, 0.12278010747121193, 0.12908010207797238, 0.1443008578737539, 0.14503228005504643, 0.1368110846710595, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.16045503484396162, 0.16814906059237933, 0.16779352461211916, 0.18345227603231407, 0.1769644640004372, 0.16394853491863692, 0.17377774300845283, 0.14944136665615082, 0.10625662637201472, 0.10485834564521979, 0.11109491287868445, 0.11434060850004057, 0.13610603218022022, 0.11676919299387534, 0.1047405734700314, 0.1237427242099084, 0.1229185550255375, 0.1469911274974911, 0.1627931472730334, 0.15227355182644664, 0.1772282713892389, 0.15350065615657893, 0.16236042742370171, 0.15525061061068246, 0.17355151355563359, 0.18277724523822958, 0.14300186596947517, 0.14578023879947632, 0.14031393936163972, 0.14101597620439077, 0.14379058119127952, 0.15282202985716775, 0.14222817191249215, 0.1452613650372515, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.18143789660342347, 0.15271964690840956, 0.14237255264100745, 0.16139484817187333, 0.1634028490223587, 0.1573924655404486, 0.15809251228438737, 0.16999048261300576, 0.16066497156641035, 0.15159923114680174, 0.14870682596182816, 0.16045374486843178, 0.18087143939013772, 0.1733826927034039, 0.2028812417861957, 0.17430251009557507, 0.1848605152647026, 0.1781542580562776, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.180678006394425, 0.19166001416380773, 0.20568880668582523, 0.058344077551123696, 0.05338573826732518, 0.06585155299632517, 0.055269585686843814, 0.06469192465659268, 0.053801126161452384, 0.07532529613519179, 0.07189922438974627, 0.04800596849491756]}, "mutation_prompt": null}
{"id": "a4229005-5bf7-499e-b66a-95351b39f12b", "solution": "class HybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.02  # Dynamic bandwidth adjustment for faster convergence\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n        self.bandwidth_decay = 0.9  # Bandwidth decay rate\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        def pitch_adjustment(new_solution, index):\n            if np.random.rand() < self.par:\n                new_solution[index] = new_solution[index] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                new_solution[index] = np.clip(new_solution[index], self.lower_bound, self.upper_bound)\n            return new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n\n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    for i in range(self.dim):\n                        if np.random.rand() < self.hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution = pitch_adjustment(new_solution, i)\n                    new_solutions.append(new_solution)\n\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n                self.bandwidth *= self.bandwidth_decay  # Dynamic bandwidth adjustment\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "HybridHarmonyPSO", "description": "Utilizing a dynamic adaptation of the bandwidth parameter to accelerate the convergence speed of the optimization algorithm.", "configspace": "", "generation": 31, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'HybridHarmonyPSO' object has no attribute 'evaluate_solution'\").", "error": "AttributeError(\"'HybridHarmonyPSO' object has no attribute 'evaluate_solution'\")", "parent_id": "c7a821aa-7010-4128-a1fb-24a311e31f28", "metadata": {}, "mutation_prompt": null}
{"id": "976ca37b-665b-49cf-8160-b59361e974af", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        def pitch_adjustment(new_solution, index):\n            if np.random.rand() < self.par:\n                new_solution[index] = new_solution[index] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                new_solution[index] = np.clip(new_solution[index], self.lower_bound, self.upper_bound)\n            return new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    for i in range(self.dim):\n                        if np.random.rand() < self.hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution = pitch_adjustment(new_solution, i)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]\n", "name": "HybridHarmonyPSO", "description": "Using a hybrid strategy by incorporating Particle Swarm Optimization (PSO) to explore the search space and enhance local exploitation, thus improving convergence speed.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "c7a821aa-7010-4128-a1fb-24a311e31f28", "metadata": {"aucs": [0.17173949911621944, 0.1784867882340675, 0.18033414644396506, 0.1701785314208557, 0.18818139055183436, 0.1743435064021196, 0.1845128912039109, 0.16108288315219066, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.043392263366959005, 0.03997653735317941, 0.04335695399237993, 0.03905964913802584, 0.05284484387130384, 0.06702432684758475, 0.058711088734964334, 0.028195070974301073, 0.042050458905104615, 0.0481463786277756, 0.027274632677879884, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.03992308285267243, 0.030574022029666414, 0.5019852656942942, 0.5282249364524683, 0.5352894979840119, 0.4867540655940701, 0.5354409487869136, 0.515783582511393, 0.5328036959589197, 0.5336740165974466, 0.5344810290790483, 0.07970825545199256, 0.07510940173832203, 0.10171882691615464, 0.05375182926910005, 0.06739118875598982, 0.06454991931958631, 0.09472457566024695, 0.057034870011662187, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10485579795043742, 0.09827625300583875, 0.12629744495441353, 0.1161373594082461, 0.1368487698841222, 0.11639594428158784, 0.02088364274821164, 0.006245667324024318, 0.003689195106263865, 0.0054168340838776086, 9.999999999998899e-05, 0.0010533731891797515, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.005507880665700071, 0.06957272857429797, 0.0022751738287132284, 0.02016871089046468, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.007694983858733018, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.04490689360873623, 0.06941906045599022, 0.039247783231376676, 0.055770453722678415, 0.05295698494644707, 0.0339060597669375, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19685268894823627, 0.17807361810291966, 0.2055799784281095, 0.19425490959648672, 0.20724700933075846, 0.19916626223344447, 0.1784211624537766, 0.1891480374906228, 0.04680390455819994, 0.038816559836695186, 0.04401887178405428, 0.05066491103680015, 0.04511104405991484, 0.046009660620107806, 0.073263588849099, 0.045771150281882944, 0.05229792848072812, 0.14821980145136182, 0.12278010747121193, 0.12908010207797238, 0.1443008578737539, 0.14503228005504643, 0.1368110846710595, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.16045503484396162, 0.16814906059237933, 0.16779352461211916, 0.18345227603231407, 0.1769644640004372, 0.16394853491863692, 0.17377774300845283, 0.14944136665615082, 0.10625662637201472, 0.10485834564521979, 0.11109491287868445, 0.11434060850004057, 0.13610603218022022, 0.11676919299387534, 0.1047405734700314, 0.1237427242099084, 0.1229185550255375, 0.1469911274974911, 0.1627931472730334, 0.15227355182644664, 0.1772282713892389, 0.15350065615657893, 0.16236042742370171, 0.15525061061068246, 0.17355151355563359, 0.18277724523822958, 0.14300186596947517, 0.14578023879947632, 0.14031393936163972, 0.14101597620439077, 0.14379058119127952, 0.15282202985716775, 0.14222817191249215, 0.1452613650372515, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.18143789660342347, 0.15271964690840956, 0.14237255264100745, 0.16139484817187333, 0.1634028490223587, 0.1573924655404486, 0.15809251228438737, 0.16999048261300576, 0.16066497156641035, 0.15159923114680174, 0.14870682596182816, 0.16045374486843178, 0.18087143939013772, 0.1733826927034039, 0.2028812417861957, 0.17430251009557507, 0.1848605152647026, 0.1781542580562776, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.180678006394425, 0.19166001416380773, 0.20568880668582523, 0.058344077551123696, 0.05338573826732518, 0.06585155299632517, 0.055269585686843814, 0.06469192465659268, 0.053801126161452384, 0.07532529613519179, 0.07189922438974627, 0.04800596849491756]}, "mutation_prompt": null}
{"id": "a2e45cc4-85e0-4618-9e11-2fd3d6570fe3", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        def pitch_adjustment(new_solution, index):\n            if np.random.rand() < self.par:\n                new_solution[index] = new_solution[index] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                new_solution[index] = np.clip(new_solution[index], self.lower_bound, self.upper_bound)\n            return new_solution\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    for i in range(self.dim):\n                        if np.random.rand() < self.hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution = pitch_adjustment(new_solution, i)\n                    new_solutions.append(new_solution)\n\n                # Evaluate new solutions asynchronously\n                futures = [executor.submit(self.evaluate_solution, func, new_solution) for new_solution in new_solutions]\n                new_fitness = np.array([future.result() for future in futures])\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                    # Particle Swarm Optimization (PSO) for local exploration\n                    pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                    pbest = pso_swarm.copy()\n                    pbest_fitness = np.array([func(p) for p in pbest])\n                    gbest_index = np.argmin(pbest_fitness)\n                    gbest = pbest[gbest_index]\n\n                    for _ in range(self.pso_max_iter):\n                        for i in range(self.pso_swarm_size):\n                            r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                            pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                            pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                            pso_fitness = func(pso_swarm[i])\n                            if pso_fitness < pbest_fitness[i]:\n                                pbest[i] = pso_swarm[i]\n                                pbest_fitness[i] = pso_fitness\n                                if pbest_fitness[i] < func(gbest):\n                                    gbest = pbest[i]\n                                    gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "HybridHarmonyPSO", "description": "Implement parallel evaluation with asynchronous execution using ThreadPoolExecutor to speed up fitness evaluations.", "configspace": "", "generation": 33, "fitness": 0.1096306635803039, "feedback": "The algorithm HybridHarmonyPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.11.", "error": "", "parent_id": "c7a821aa-7010-4128-a1fb-24a311e31f28", "metadata": {"aucs": [0.17316811945895583, 0.1773285891336156, 0.170257377687277, 0.17692265262790297, 0.18818139055183436, 0.1745092654346292, 0.17875939611472513, 0.16108288315219066, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.054430314686274905, 0.03618932539327069, 0.0449131491406366, 0.0397104894961976, 0.042095318265478965, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.027506897871572566, 0.03243378194821345, 0.0481463786277756, 0.025965940872886173, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.03992308285267243, 0.031138501986898492, 0.5214667654048972, 0.5282249364524683, 0.5352894979840119, 0.5187566032231141, 0.5354409487869136, 0.5076233879115173, 0.5328036959589197, 0.5336740165974466, 0.5344810290790483, 0.06443028781665472, 0.0782951103286903, 0.10171882691615464, 0.055965921158328324, 0.07502596491995939, 0.05190122563388122, 0.09472457566024695, 0.057034870011662187, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.1523231489450354, 0.10578970102129714, 0.1170020761505306, 0.12542992855365953, 0.11822206201561147, 0.1368487698841222, 0.1135869029704345, 0.020242196322366568, 0.003171980480751291, 0.01910243256441113, 0.00456249210052484, 0.010536956703524059, 0.00011608678907282233, 9.999999999998899e-05, 0.0011210167051495246, 0.019872591751231683, 0.0077247108009173004, 0.06957272857429797, 0.00558670841766995, 0.007159387613177359, 0.035362057023575866, 0.018514231974230633, 0.017993280776203546, 0.01499375126751834, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.048172390158340184, 0.06947421936321185, 0.04155529238768818, 0.055770453722678415, 0.05295698494644707, 0.03960140018323599, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.2225205331013822, 0.1946885961312843, 0.1848168171338651, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.19888618716801598, 0.18049340435004413, 0.20593980485450392, 0.04680390455819994, 0.03926499152782603, 0.04401887178405428, 0.042014629705518725, 0.03986527819452024, 0.046009660620107806, 0.073263588849099, 0.04544186017090035, 0.05229792848072812, 0.13709410100555053, 0.12371496955912187, 0.12800718076529616, 0.14263744976094295, 0.14115194246620144, 0.12439502916632517, 0.15771070439992618, 0.14861619065631115, 0.12862528034911247, 0.16876835865786466, 0.15984112903224157, 0.1714442174520896, 0.16951418305992794, 0.1821496595795835, 0.1769644640004372, 0.16394853491863692, 0.17478256293234662, 0.1594543115501298, 0.11411847957149968, 0.10382166168941254, 0.11109491287868445, 0.11003001025313519, 0.13684066325301703, 0.11676919299387534, 0.10477953606139268, 0.1237427242099084, 0.1229185550255375, 0.14426224811316846, 0.16233450221944246, 0.14401768958147354, 0.1627639968546457, 0.14691620622947288, 0.16236042742370171, 0.15027945805970033, 0.17355151355563359, 0.18277724523822958, 0.1426890929607174, 0.14578023879947632, 0.14208877282713273, 0.14101597620439077, 0.14411946602051617, 0.15282202985716775, 0.1415013569207686, 0.14301421849839413, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1571573551766411, 0.1552340770177747, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.15692009224327252, 0.15698722216387428, 0.1580636080386837, 0.16050779395916304, 0.16673765704202181, 0.14870682596182816, 0.16045374486843178, 0.1768967379523838, 0.1733826927034039, 0.2028812417861957, 0.17117501241936572, 0.1840951386782479, 0.17657939283136637, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.188688463014553, 0.20568880668582523, 0.06358122850432824, 0.05081117145569902, 0.06585155299632517, 0.057250565616783766, 0.05934830659822565, 0.0533550031798079, 0.07532529613519179, 0.055052269729343295, 0.04674619266333635]}, "mutation_prompt": null}
{"id": "9bbaf628-dccf-4650-b1c6-9bca4e0f9f3b", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "HybridHarmonyPSO", "description": "Implementing a dynamic adaptation of hmcr and par parameters to accelerate convergence speed by dynamically adjusting the exploration and exploitation rates.", "configspace": "", "generation": 34, "fitness": 0.11014083121353758, "feedback": "The algorithm HybridHarmonyPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.11.", "error": "", "parent_id": "c7a821aa-7010-4128-a1fb-24a311e31f28", "metadata": {"aucs": [0.1709404397982207, 0.17578811482102485, 0.170257377687277, 0.16845369514743413, 0.22534207735815892, 0.1743435064021196, 0.1785507992358102, 0.16299934718787568, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.03919225067219667, 0.04128992625519967, 0.03732066520661048, 0.043269612707969474, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.03149227199542726, 0.030929276720888965, 0.0481463786277756, 0.02827376645091395, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.0416260837629705, 0.029763828138413717, 0.5065359510474018, 0.5279810102366755, 0.5173099785277878, 0.535830186743541, 0.5368223044695226, 0.5151644684178602, 0.5323764291933398, 0.5312347589254325, 0.5338735371524632, 0.06757738494551291, 0.07510940173832203, 0.10171882691615464, 0.05582014737524932, 0.06652701777076597, 0.05190122563388122, 0.09472457566024695, 0.05913962244392135, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.14948243104172831, 0.11153611931354757, 0.09600400207146487, 0.1248938498681409, 0.11690291817505838, 0.1368487698841222, 0.11361149709236218, 9.999999999998899e-05, 9.999999999998899e-05, 0.013506851361393402, 0.009725685707564158, 9.999999999998899e-05, 0.006244945923276846, 0.00486031723528646, 9.999999999998899e-05, 0.019872591751231683, 0.004726484655766083, 0.06957272857429797, 0.01758612168876028, 0.010310803522691647, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 0.027130645705424783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045286380082674826, 0.06954783018607069, 0.03585061177191606, 0.055770453722678415, 0.05295698494644707, 0.038293627047065626, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19903226317683353, 0.18379488285344925, 0.2055799784281095, 0.19038052549897155, 0.20758925182018184, 0.1978530039868921, 0.1935659506118591, 0.1900970839960452, 0.04680390455819994, 0.03853992154267849, 0.04540456731106057, 0.03996840984097694, 0.038650047922826114, 0.046779233833527556, 0.073263588849099, 0.04804948744535198, 0.05229792848072812, 0.13709410100555053, 0.12739426512320573, 0.12602203673178558, 0.14776079809378628, 0.14330845579678753, 0.1248104632522643, 0.14963138758589234, 0.1519486330221338, 0.12862528034911247, 0.16581136048861322, 0.16810150441392124, 0.1708884007386109, 0.16836359285932123, 0.1821496595795835, 0.1769644640004372, 0.16248324581573614, 0.17377774300845283, 0.158273386427229, 0.11815478683836778, 0.11280978194220803, 0.11109491287868445, 0.10978923820566577, 0.13610603218022022, 0.11699439310920645, 0.10496528955152573, 0.1237427242099084, 0.12481228589388882, 0.1429128435865492, 0.16233450221944246, 0.15579351452130452, 0.16148409945229336, 0.1438479867140029, 0.16413767868192175, 0.15025358868369154, 0.17355151355563359, 0.18656212704725317, 0.14195011305864957, 0.14818437901077142, 0.14528239446922975, 0.14187561716008934, 0.1444161948692757, 0.15282202985716775, 0.13811865540041568, 0.1418559449375154, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.1793213659605366, 0.18540799854728474, 0.17477843717153851, 0.14269139344159354, 0.16181896156974962, 0.19312594872947209, 0.15692009224327252, 0.15672808824074347, 0.1636308278050963, 0.16050779395916304, 0.15202311182854444, 0.1489437599082306, 0.18749022965320938, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1738918222132887, 0.1840951386782479, 0.17521172209778724, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17844778892709057, 0.18953751425041876, 0.20568880668582523, 0.058344077551123696, 0.05081117145569902, 0.06762586258623504, 0.0521277740406102, 0.05934830659822565, 0.0533550031798079, 0.07532529613519179, 0.05491659739916577, 0.05251337521338861]}, "mutation_prompt": null}
{"id": "b5c91ddc-c140-41d0-8ab2-cc383944ed03", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "HybridHarmonyPSO", "description": "Implementing a dynamic adaptation of hmcr and par parameters to accelerate convergence speed by dynamically adjusting the exploration and exploitation rates.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9bbaf628-dccf-4650-b1c6-9bca4e0f9f3b", "metadata": {"aucs": [0.1709404397982207, 0.17578811482102485, 0.170257377687277, 0.16845369514743413, 0.22534207735815892, 0.1743435064021196, 0.1785507992358102, 0.16299934718787568, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.03919225067219667, 0.04128992625519967, 0.03732066520661048, 0.043269612707969474, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.03149227199542726, 0.030929276720888965, 0.0481463786277756, 0.02827376645091395, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.0416260837629705, 0.029763828138413717, 0.5065359510474018, 0.5279810102366755, 0.5173099785277878, 0.535830186743541, 0.5368223044695226, 0.5151644684178602, 0.5323764291933398, 0.5312347589254325, 0.5338735371524632, 0.06757738494551291, 0.07510940173832203, 0.10171882691615464, 0.05582014737524932, 0.06652701777076597, 0.05190122563388122, 0.09472457566024695, 0.05913962244392135, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.14948243104172831, 0.11153611931354757, 0.09600400207146487, 0.1248938498681409, 0.11690291817505838, 0.1368487698841222, 0.11361149709236218, 9.999999999998899e-05, 9.999999999998899e-05, 0.013506851361393402, 0.009725685707564158, 9.999999999998899e-05, 0.006244945923276846, 0.00486031723528646, 9.999999999998899e-05, 0.019872591751231683, 0.004726484655766083, 0.06957272857429797, 0.01758612168876028, 0.010310803522691647, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 0.027130645705424783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045286380082674826, 0.06954783018607069, 0.03585061177191606, 0.055770453722678415, 0.05295698494644707, 0.038293627047065626, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19903226317683353, 0.18379488285344925, 0.2055799784281095, 0.19038052549897155, 0.20758925182018184, 0.1978530039868921, 0.1935659506118591, 0.1900970839960452, 0.04680390455819994, 0.03853992154267849, 0.04540456731106057, 0.03996840984097694, 0.038650047922826114, 0.046779233833527556, 0.073263588849099, 0.04804948744535198, 0.05229792848072812, 0.13709410100555053, 0.12739426512320573, 0.12602203673178558, 0.14776079809378628, 0.14330845579678753, 0.1248104632522643, 0.14963138758589234, 0.1519486330221338, 0.12862528034911247, 0.16581136048861322, 0.16810150441392124, 0.1708884007386109, 0.16836359285932123, 0.1821496595795835, 0.1769644640004372, 0.16248324581573614, 0.17377774300845283, 0.158273386427229, 0.11815478683836778, 0.11280978194220803, 0.11109491287868445, 0.10978923820566577, 0.13610603218022022, 0.11699439310920645, 0.10496528955152573, 0.1237427242099084, 0.12481228589388882, 0.1429128435865492, 0.16233450221944246, 0.15579351452130452, 0.16148409945229336, 0.1438479867140029, 0.16413767868192175, 0.15025358868369154, 0.17355151355563359, 0.18656212704725317, 0.14195011305864957, 0.14818437901077142, 0.14528239446922975, 0.14187561716008934, 0.1444161948692757, 0.15282202985716775, 0.13811865540041568, 0.1418559449375154, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.1793213659605366, 0.18540799854728474, 0.17477843717153851, 0.14269139344159354, 0.16181896156974962, 0.19312594872947209, 0.15692009224327252, 0.15672808824074347, 0.1636308278050963, 0.16050779395916304, 0.15202311182854444, 0.1489437599082306, 0.18749022965320938, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1738918222132887, 0.1840951386782479, 0.17521172209778724, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17844778892709057, 0.18953751425041876, 0.20568880668582523, 0.058344077551123696, 0.05081117145569902, 0.06762586258623504, 0.0521277740406102, 0.05934830659822565, 0.0533550031798079, 0.07532529613519179, 0.05491659739916577, 0.05251337521338861]}, "mutation_prompt": null}
{"id": "a784d631-bec0-4a23-8806-a3c64a6430c3", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "HybridHarmonyPSO", "description": "Implementing a dynamic adaptation of hmcr and par parameters to accelerate convergence speed by dynamically adjusting the exploration and exploitation rates.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9bbaf628-dccf-4650-b1c6-9bca4e0f9f3b", "metadata": {"aucs": [0.1709404397982207, 0.17578811482102485, 0.170257377687277, 0.16845369514743413, 0.22534207735815892, 0.1743435064021196, 0.1785507992358102, 0.16299934718787568, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.03919225067219667, 0.04128992625519967, 0.03732066520661048, 0.043269612707969474, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.03149227199542726, 0.030929276720888965, 0.0481463786277756, 0.02827376645091395, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.0416260837629705, 0.029763828138413717, 0.5065359510474018, 0.5279810102366755, 0.5173099785277878, 0.535830186743541, 0.5368223044695226, 0.5151644684178602, 0.5323764291933398, 0.5312347589254325, 0.5338735371524632, 0.06757738494551291, 0.07510940173832203, 0.10171882691615464, 0.05582014737524932, 0.06652701777076597, 0.05190122563388122, 0.09472457566024695, 0.05913962244392135, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.14948243104172831, 0.11153611931354757, 0.09600400207146487, 0.1248938498681409, 0.11690291817505838, 0.1368487698841222, 0.11361149709236218, 9.999999999998899e-05, 9.999999999998899e-05, 0.013506851361393402, 0.009725685707564158, 9.999999999998899e-05, 0.006244945923276846, 0.00486031723528646, 9.999999999998899e-05, 0.019872591751231683, 0.004726484655766083, 0.06957272857429797, 0.01758612168876028, 0.010310803522691647, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 0.027130645705424783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045286380082674826, 0.06954783018607069, 0.03585061177191606, 0.055770453722678415, 0.05295698494644707, 0.038293627047065626, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19903226317683353, 0.18379488285344925, 0.2055799784281095, 0.19038052549897155, 0.20758925182018184, 0.1978530039868921, 0.1935659506118591, 0.1900970839960452, 0.04680390455819994, 0.03853992154267849, 0.04540456731106057, 0.03996840984097694, 0.038650047922826114, 0.046779233833527556, 0.073263588849099, 0.04804948744535198, 0.05229792848072812, 0.13709410100555053, 0.12739426512320573, 0.12602203673178558, 0.14776079809378628, 0.14330845579678753, 0.1248104632522643, 0.14963138758589234, 0.1519486330221338, 0.12862528034911247, 0.16581136048861322, 0.16810150441392124, 0.1708884007386109, 0.16836359285932123, 0.1821496595795835, 0.1769644640004372, 0.16248324581573614, 0.17377774300845283, 0.158273386427229, 0.11815478683836778, 0.11280978194220803, 0.11109491287868445, 0.10978923820566577, 0.13610603218022022, 0.11699439310920645, 0.10496528955152573, 0.1237427242099084, 0.12481228589388882, 0.1429128435865492, 0.16233450221944246, 0.15579351452130452, 0.16148409945229336, 0.1438479867140029, 0.16413767868192175, 0.15025358868369154, 0.17355151355563359, 0.18656212704725317, 0.14195011305864957, 0.14818437901077142, 0.14528239446922975, 0.14187561716008934, 0.1444161948692757, 0.15282202985716775, 0.13811865540041568, 0.1418559449375154, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.1793213659605366, 0.18540799854728474, 0.17477843717153851, 0.14269139344159354, 0.16181896156974962, 0.19312594872947209, 0.15692009224327252, 0.15672808824074347, 0.1636308278050963, 0.16050779395916304, 0.15202311182854444, 0.1489437599082306, 0.18749022965320938, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1738918222132887, 0.1840951386782479, 0.17521172209778724, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17844778892709057, 0.18953751425041876, 0.20568880668582523, 0.058344077551123696, 0.05081117145569902, 0.06762586258623504, 0.0521277740406102, 0.05934830659822565, 0.0533550031798079, 0.07532529613519179, 0.05491659739916577, 0.05251337521338861]}, "mutation_prompt": null}
{"id": "2bf75220-8af2-4440-a17d-323b1db53ae8", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "HybridHarmonyPSO", "description": "Implementing a dynamic adaptation of hmcr and par parameters to accelerate convergence speed by dynamically adjusting the exploration and exploitation rates.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9bbaf628-dccf-4650-b1c6-9bca4e0f9f3b", "metadata": {"aucs": [0.1709404397982207, 0.17578811482102485, 0.170257377687277, 0.16845369514743413, 0.22534207735815892, 0.1743435064021196, 0.1785507992358102, 0.16299934718787568, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.03919225067219667, 0.04128992625519967, 0.03732066520661048, 0.043269612707969474, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.03149227199542726, 0.030929276720888965, 0.0481463786277756, 0.02827376645091395, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.0416260837629705, 0.029763828138413717, 0.5065359510474018, 0.5279810102366755, 0.5173099785277878, 0.535830186743541, 0.5368223044695226, 0.5151644684178602, 0.5323764291933398, 0.5312347589254325, 0.5338735371524632, 0.06757738494551291, 0.07510940173832203, 0.10171882691615464, 0.05582014737524932, 0.06652701777076597, 0.05190122563388122, 0.09472457566024695, 0.05913962244392135, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.14948243104172831, 0.11153611931354757, 0.09600400207146487, 0.1248938498681409, 0.11690291817505838, 0.1368487698841222, 0.11361149709236218, 9.999999999998899e-05, 9.999999999998899e-05, 0.013506851361393402, 0.009725685707564158, 9.999999999998899e-05, 0.006244945923276846, 0.00486031723528646, 9.999999999998899e-05, 0.019872591751231683, 0.004726484655766083, 0.06957272857429797, 0.01758612168876028, 0.010310803522691647, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 0.027130645705424783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045286380082674826, 0.06954783018607069, 0.03585061177191606, 0.055770453722678415, 0.05295698494644707, 0.038293627047065626, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19903226317683353, 0.18379488285344925, 0.2055799784281095, 0.19038052549897155, 0.20758925182018184, 0.1978530039868921, 0.1935659506118591, 0.1900970839960452, 0.04680390455819994, 0.03853992154267849, 0.04540456731106057, 0.03996840984097694, 0.038650047922826114, 0.046779233833527556, 0.073263588849099, 0.04804948744535198, 0.05229792848072812, 0.13709410100555053, 0.12739426512320573, 0.12602203673178558, 0.14776079809378628, 0.14330845579678753, 0.1248104632522643, 0.14963138758589234, 0.1519486330221338, 0.12862528034911247, 0.16581136048861322, 0.16810150441392124, 0.1708884007386109, 0.16836359285932123, 0.1821496595795835, 0.1769644640004372, 0.16248324581573614, 0.17377774300845283, 0.158273386427229, 0.11815478683836778, 0.11280978194220803, 0.11109491287868445, 0.10978923820566577, 0.13610603218022022, 0.11699439310920645, 0.10496528955152573, 0.1237427242099084, 0.12481228589388882, 0.1429128435865492, 0.16233450221944246, 0.15579351452130452, 0.16148409945229336, 0.1438479867140029, 0.16413767868192175, 0.15025358868369154, 0.17355151355563359, 0.18656212704725317, 0.14195011305864957, 0.14818437901077142, 0.14528239446922975, 0.14187561716008934, 0.1444161948692757, 0.15282202985716775, 0.13811865540041568, 0.1418559449375154, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.1793213659605366, 0.18540799854728474, 0.17477843717153851, 0.14269139344159354, 0.16181896156974962, 0.19312594872947209, 0.15692009224327252, 0.15672808824074347, 0.1636308278050963, 0.16050779395916304, 0.15202311182854444, 0.1489437599082306, 0.18749022965320938, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1738918222132887, 0.1840951386782479, 0.17521172209778724, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17844778892709057, 0.18953751425041876, 0.20568880668582523, 0.058344077551123696, 0.05081117145569902, 0.06762586258623504, 0.0521277740406102, 0.05934830659822565, 0.0533550031798079, 0.07532529613519179, 0.05491659739916577, 0.05251337521338861]}, "mutation_prompt": null}
{"id": "37aeeafe-dd47-4cb0-bb54-ef13d6e9eb6a", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\nimport asyncio\n\nclass FastHybridHarmonyPSO(HybridHarmonyPSO):\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n\n        async def evaluate_solution_async(solution):\n            return func(solution)\n\n        async def evaluate_new_solutions(executor, new_solutions):\n            new_fitness = np.array(await asyncio.gather(*[executor.submit(evaluate_solution_async, sol) for sol in new_solutions]))\n            return new_fitness\n\n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)\n                    par = min(0.6, self.par + 0.001)\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n\n                new_fitness = asyncio.run(evaluate_new_solutions(executor, new_solutions))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "FastHybridHarmonyPSO", "description": "Implementing asynchronous parallel evaluation of new solutions using asynchronous functions for faster convergence speed.", "configspace": "", "generation": 38, "fitness": -Infinity, "feedback": "An exception occurred: TypeError('An asyncio.Future, a coroutine or an awaitable is required').", "error": "TypeError('An asyncio.Future, a coroutine or an awaitable is required')", "parent_id": "9bbaf628-dccf-4650-b1c6-9bca4e0f9f3b", "metadata": {}, "mutation_prompt": null}
{"id": "d9ff7ded-56ac-4891-91ec-70a386c61248", "solution": "# import numpy as np\n# from concurrent.futures import ThreadPoolExecutor\n\nclass ParallelHybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                futures = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                    futures.append(executor.submit(lambda x: self.evaluate_solution(func, x), new_solution))\n                \n                # Asynchronously evaluate new solutions\n                new_fitness = np.array([future.result() for future in futures])\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "ParallelHybridHarmonyPSO", "description": "Implementing a parallel asynchronous evaluation strategy for new solutions to speed up fitness calculations and exploration.", "configspace": "", "generation": 39, "fitness": 0.11014083121353758, "feedback": "The algorithm ParallelHybridHarmonyPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.11.", "error": "", "parent_id": "9bbaf628-dccf-4650-b1c6-9bca4e0f9f3b", "metadata": {"aucs": [0.1709404397982207, 0.17578811482102485, 0.170257377687277, 0.16845369514743413, 0.22534207735815892, 0.1743435064021196, 0.1785507992358102, 0.16299934718787568, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.03919225067219667, 0.04128992625519967, 0.03732066520661048, 0.043269612707969474, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.03149227199542726, 0.030929276720888965, 0.0481463786277756, 0.02827376645091395, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.0416260837629705, 0.029763828138413717, 0.5065359510474018, 0.5279810102366755, 0.5173099785277878, 0.535830186743541, 0.5368223044695226, 0.5151644684178602, 0.5323764291933398, 0.5312347589254325, 0.5338735371524632, 0.06757738494551291, 0.07510940173832203, 0.10171882691615464, 0.05582014737524932, 0.06652701777076597, 0.05190122563388122, 0.09472457566024695, 0.05913962244392135, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.14948243104172831, 0.11153611931354757, 0.09600400207146487, 0.1248938498681409, 0.11690291817505838, 0.1368487698841222, 0.11361149709236218, 9.999999999998899e-05, 9.999999999998899e-05, 0.013506851361393402, 0.009725685707564158, 9.999999999998899e-05, 0.006244945923276846, 0.00486031723528646, 9.999999999998899e-05, 0.019872591751231683, 0.004726484655766083, 0.06957272857429797, 0.01758612168876028, 0.010310803522691647, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 0.027130645705424783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045286380082674826, 0.06954783018607069, 0.03585061177191606, 0.055770453722678415, 0.05295698494644707, 0.038293627047065626, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19903226317683353, 0.18379488285344925, 0.2055799784281095, 0.19038052549897155, 0.20758925182018184, 0.1978530039868921, 0.1935659506118591, 0.1900970839960452, 0.04680390455819994, 0.03853992154267849, 0.04540456731106057, 0.03996840984097694, 0.038650047922826114, 0.046779233833527556, 0.073263588849099, 0.04804948744535198, 0.05229792848072812, 0.13709410100555053, 0.12739426512320573, 0.12602203673178558, 0.14776079809378628, 0.14330845579678753, 0.1248104632522643, 0.14963138758589234, 0.1519486330221338, 0.12862528034911247, 0.16581136048861322, 0.16810150441392124, 0.1708884007386109, 0.16836359285932123, 0.1821496595795835, 0.1769644640004372, 0.16248324581573614, 0.17377774300845283, 0.158273386427229, 0.11815478683836778, 0.11280978194220803, 0.11109491287868445, 0.10978923820566577, 0.13610603218022022, 0.11699439310920645, 0.10496528955152573, 0.1237427242099084, 0.12481228589388882, 0.1429128435865492, 0.16233450221944246, 0.15579351452130452, 0.16148409945229336, 0.1438479867140029, 0.16413767868192175, 0.15025358868369154, 0.17355151355563359, 0.18656212704725317, 0.14195011305864957, 0.14818437901077142, 0.14528239446922975, 0.14187561716008934, 0.1444161948692757, 0.15282202985716775, 0.13811865540041568, 0.1418559449375154, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.1793213659605366, 0.18540799854728474, 0.17477843717153851, 0.14269139344159354, 0.16181896156974962, 0.19312594872947209, 0.15692009224327252, 0.15672808824074347, 0.1636308278050963, 0.16050779395916304, 0.15202311182854444, 0.1489437599082306, 0.18749022965320938, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1738918222132887, 0.1840951386782479, 0.17521172209778724, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17844778892709057, 0.18953751425041876, 0.20568880668582523, 0.058344077551123696, 0.05081117145569902, 0.06762586258623504, 0.0521277740406102, 0.05934830659822565, 0.0533550031798079, 0.07532529613519179, 0.05491659739916577, 0.05251337521338861]}, "mutation_prompt": null}
{"id": "c44874dd-bf8f-40e6-a1a3-6e22e2d2863d", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "HybridHarmonyPSO", "description": "Implementing a dynamic adaptation of hmcr and par parameters to accelerate convergence speed by dynamically adjusting the exploration and exploitation rates.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9bbaf628-dccf-4650-b1c6-9bca4e0f9f3b", "metadata": {"aucs": [0.1709404397982207, 0.17578811482102485, 0.170257377687277, 0.16845369514743413, 0.22534207735815892, 0.1743435064021196, 0.1785507992358102, 0.16299934718787568, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.03919225067219667, 0.04128992625519967, 0.03732066520661048, 0.043269612707969474, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.03149227199542726, 0.030929276720888965, 0.0481463786277756, 0.02827376645091395, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.0416260837629705, 0.029763828138413717, 0.5065359510474018, 0.5279810102366755, 0.5173099785277878, 0.535830186743541, 0.5368223044695226, 0.5151644684178602, 0.5323764291933398, 0.5312347589254325, 0.5338735371524632, 0.06757738494551291, 0.07510940173832203, 0.10171882691615464, 0.05582014737524932, 0.06652701777076597, 0.05190122563388122, 0.09472457566024695, 0.05913962244392135, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.14948243104172831, 0.11153611931354757, 0.09600400207146487, 0.1248938498681409, 0.11690291817505838, 0.1368487698841222, 0.11361149709236218, 9.999999999998899e-05, 9.999999999998899e-05, 0.013506851361393402, 0.009725685707564158, 9.999999999998899e-05, 0.006244945923276846, 0.00486031723528646, 9.999999999998899e-05, 0.019872591751231683, 0.004726484655766083, 0.06957272857429797, 0.01758612168876028, 0.010310803522691647, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 0.027130645705424783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045286380082674826, 0.06954783018607069, 0.03585061177191606, 0.055770453722678415, 0.05295698494644707, 0.038293627047065626, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19903226317683353, 0.18379488285344925, 0.2055799784281095, 0.19038052549897155, 0.20758925182018184, 0.1978530039868921, 0.1935659506118591, 0.1900970839960452, 0.04680390455819994, 0.03853992154267849, 0.04540456731106057, 0.03996840984097694, 0.038650047922826114, 0.046779233833527556, 0.073263588849099, 0.04804948744535198, 0.05229792848072812, 0.13709410100555053, 0.12739426512320573, 0.12602203673178558, 0.14776079809378628, 0.14330845579678753, 0.1248104632522643, 0.14963138758589234, 0.1519486330221338, 0.12862528034911247, 0.16581136048861322, 0.16810150441392124, 0.1708884007386109, 0.16836359285932123, 0.1821496595795835, 0.1769644640004372, 0.16248324581573614, 0.17377774300845283, 0.158273386427229, 0.11815478683836778, 0.11280978194220803, 0.11109491287868445, 0.10978923820566577, 0.13610603218022022, 0.11699439310920645, 0.10496528955152573, 0.1237427242099084, 0.12481228589388882, 0.1429128435865492, 0.16233450221944246, 0.15579351452130452, 0.16148409945229336, 0.1438479867140029, 0.16413767868192175, 0.15025358868369154, 0.17355151355563359, 0.18656212704725317, 0.14195011305864957, 0.14818437901077142, 0.14528239446922975, 0.14187561716008934, 0.1444161948692757, 0.15282202985716775, 0.13811865540041568, 0.1418559449375154, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.1793213659605366, 0.18540799854728474, 0.17477843717153851, 0.14269139344159354, 0.16181896156974962, 0.19312594872947209, 0.15692009224327252, 0.15672808824074347, 0.1636308278050963, 0.16050779395916304, 0.15202311182854444, 0.1489437599082306, 0.18749022965320938, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1738918222132887, 0.1840951386782479, 0.17521172209778724, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17844778892709057, 0.18953751425041876, 0.20568880668582523, 0.058344077551123696, 0.05081117145569902, 0.06762586258623504, 0.0521277740406102, 0.05934830659822565, 0.0533550031798079, 0.07532529613519179, 0.05491659739916577, 0.05251337521338861]}, "mutation_prompt": null}
{"id": "b638ce44-4764-4a6c-b9bf-60bd11ceb5aa", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "HybridHarmonyPSO", "description": "Implementing a dynamic adaptation of hmcr and par parameters to accelerate convergence speed by dynamically adjusting the exploration and exploitation rates.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9bbaf628-dccf-4650-b1c6-9bca4e0f9f3b", "metadata": {"aucs": [0.1709404397982207, 0.17578811482102485, 0.170257377687277, 0.16845369514743413, 0.22534207735815892, 0.1743435064021196, 0.1785507992358102, 0.16299934718787568, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.03919225067219667, 0.04128992625519967, 0.03732066520661048, 0.043269612707969474, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.03149227199542726, 0.030929276720888965, 0.0481463786277756, 0.02827376645091395, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.0416260837629705, 0.029763828138413717, 0.5065359510474018, 0.5279810102366755, 0.5173099785277878, 0.535830186743541, 0.5368223044695226, 0.5151644684178602, 0.5323764291933398, 0.5312347589254325, 0.5338735371524632, 0.06757738494551291, 0.07510940173832203, 0.10171882691615464, 0.05582014737524932, 0.06652701777076597, 0.05190122563388122, 0.09472457566024695, 0.05913962244392135, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.14948243104172831, 0.11153611931354757, 0.09600400207146487, 0.1248938498681409, 0.11690291817505838, 0.1368487698841222, 0.11361149709236218, 9.999999999998899e-05, 9.999999999998899e-05, 0.013506851361393402, 0.009725685707564158, 9.999999999998899e-05, 0.006244945923276846, 0.00486031723528646, 9.999999999998899e-05, 0.019872591751231683, 0.004726484655766083, 0.06957272857429797, 0.01758612168876028, 0.010310803522691647, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 0.027130645705424783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045286380082674826, 0.06954783018607069, 0.03585061177191606, 0.055770453722678415, 0.05295698494644707, 0.038293627047065626, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19903226317683353, 0.18379488285344925, 0.2055799784281095, 0.19038052549897155, 0.20758925182018184, 0.1978530039868921, 0.1935659506118591, 0.1900970839960452, 0.04680390455819994, 0.03853992154267849, 0.04540456731106057, 0.03996840984097694, 0.038650047922826114, 0.046779233833527556, 0.073263588849099, 0.04804948744535198, 0.05229792848072812, 0.13709410100555053, 0.12739426512320573, 0.12602203673178558, 0.14776079809378628, 0.14330845579678753, 0.1248104632522643, 0.14963138758589234, 0.1519486330221338, 0.12862528034911247, 0.16581136048861322, 0.16810150441392124, 0.1708884007386109, 0.16836359285932123, 0.1821496595795835, 0.1769644640004372, 0.16248324581573614, 0.17377774300845283, 0.158273386427229, 0.11815478683836778, 0.11280978194220803, 0.11109491287868445, 0.10978923820566577, 0.13610603218022022, 0.11699439310920645, 0.10496528955152573, 0.1237427242099084, 0.12481228589388882, 0.1429128435865492, 0.16233450221944246, 0.15579351452130452, 0.16148409945229336, 0.1438479867140029, 0.16413767868192175, 0.15025358868369154, 0.17355151355563359, 0.18656212704725317, 0.14195011305864957, 0.14818437901077142, 0.14528239446922975, 0.14187561716008934, 0.1444161948692757, 0.15282202985716775, 0.13811865540041568, 0.1418559449375154, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.1793213659605366, 0.18540799854728474, 0.17477843717153851, 0.14269139344159354, 0.16181896156974962, 0.19312594872947209, 0.15692009224327252, 0.15672808824074347, 0.1636308278050963, 0.16050779395916304, 0.15202311182854444, 0.1489437599082306, 0.18749022965320938, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1738918222132887, 0.1840951386782479, 0.17521172209778724, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17844778892709057, 0.18953751425041876, 0.20568880668582523, 0.058344077551123696, 0.05081117145569902, 0.06762586258623504, 0.0521277740406102, 0.05934830659822565, 0.0533550031798079, 0.07532529613519179, 0.05491659739916577, 0.05251337521338861]}, "mutation_prompt": null}
{"id": "ed8ae3f7-f1c1-4bf2-9c44-b9df70bda74e", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "HybridHarmonyPSO", "description": "Implementing a dynamic adaptation of hmcr and par parameters to accelerate convergence speed by dynamically adjusting the exploration and exploitation rates.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "9bbaf628-dccf-4650-b1c6-9bca4e0f9f3b", "metadata": {"aucs": [0.1709404397982207, 0.17578811482102485, 0.170257377687277, 0.16845369514743413, 0.22534207735815892, 0.1743435064021196, 0.1785507992358102, 0.16299934718787568, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.03919225067219667, 0.04128992625519967, 0.03732066520661048, 0.043269612707969474, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.03149227199542726, 0.030929276720888965, 0.0481463786277756, 0.02827376645091395, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.0416260837629705, 0.029763828138413717, 0.5065359510474018, 0.5279810102366755, 0.5173099785277878, 0.535830186743541, 0.5368223044695226, 0.5151644684178602, 0.5323764291933398, 0.5312347589254325, 0.5338735371524632, 0.06757738494551291, 0.07510940173832203, 0.10171882691615464, 0.05582014737524932, 0.06652701777076597, 0.05190122563388122, 0.09472457566024695, 0.05913962244392135, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.14948243104172831, 0.11153611931354757, 0.09600400207146487, 0.1248938498681409, 0.11690291817505838, 0.1368487698841222, 0.11361149709236218, 9.999999999998899e-05, 9.999999999998899e-05, 0.013506851361393402, 0.009725685707564158, 9.999999999998899e-05, 0.006244945923276846, 0.00486031723528646, 9.999999999998899e-05, 0.019872591751231683, 0.004726484655766083, 0.06957272857429797, 0.01758612168876028, 0.010310803522691647, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 0.027130645705424783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045286380082674826, 0.06954783018607069, 0.03585061177191606, 0.055770453722678415, 0.05295698494644707, 0.038293627047065626, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19903226317683353, 0.18379488285344925, 0.2055799784281095, 0.19038052549897155, 0.20758925182018184, 0.1978530039868921, 0.1935659506118591, 0.1900970839960452, 0.04680390455819994, 0.03853992154267849, 0.04540456731106057, 0.03996840984097694, 0.038650047922826114, 0.046779233833527556, 0.073263588849099, 0.04804948744535198, 0.05229792848072812, 0.13709410100555053, 0.12739426512320573, 0.12602203673178558, 0.14776079809378628, 0.14330845579678753, 0.1248104632522643, 0.14963138758589234, 0.1519486330221338, 0.12862528034911247, 0.16581136048861322, 0.16810150441392124, 0.1708884007386109, 0.16836359285932123, 0.1821496595795835, 0.1769644640004372, 0.16248324581573614, 0.17377774300845283, 0.158273386427229, 0.11815478683836778, 0.11280978194220803, 0.11109491287868445, 0.10978923820566577, 0.13610603218022022, 0.11699439310920645, 0.10496528955152573, 0.1237427242099084, 0.12481228589388882, 0.1429128435865492, 0.16233450221944246, 0.15579351452130452, 0.16148409945229336, 0.1438479867140029, 0.16413767868192175, 0.15025358868369154, 0.17355151355563359, 0.18656212704725317, 0.14195011305864957, 0.14818437901077142, 0.14528239446922975, 0.14187561716008934, 0.1444161948692757, 0.15282202985716775, 0.13811865540041568, 0.1418559449375154, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.1793213659605366, 0.18540799854728474, 0.17477843717153851, 0.14269139344159354, 0.16181896156974962, 0.19312594872947209, 0.15692009224327252, 0.15672808824074347, 0.1636308278050963, 0.16050779395916304, 0.15202311182854444, 0.1489437599082306, 0.18749022965320938, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1738918222132887, 0.1840951386782479, 0.17521172209778724, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17844778892709057, 0.18953751425041876, 0.20568880668582523, 0.058344077551123696, 0.05081117145569902, 0.06762586258623504, 0.0521277740406102, 0.05934830659822565, 0.0533550031798079, 0.07532529613519179, 0.05491659739916577, 0.05251337521338861]}, "mutation_prompt": null}
{"id": "0fd35427-d7e2-45a7-8106-5a0cb13e23f9", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "HybridHarmonyPSO", "description": "Implementing a dynamic adaptation of hmcr and par parameters to accelerate convergence speed by dynamically adjusting the exploration and exploitation rates.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9bbaf628-dccf-4650-b1c6-9bca4e0f9f3b", "metadata": {"aucs": [0.1709404397982207, 0.17578811482102485, 0.170257377687277, 0.16845369514743413, 0.22534207735815892, 0.1743435064021196, 0.1785507992358102, 0.16299934718787568, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.03919225067219667, 0.04128992625519967, 0.03732066520661048, 0.043269612707969474, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.03149227199542726, 0.030929276720888965, 0.0481463786277756, 0.02827376645091395, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.0416260837629705, 0.029763828138413717, 0.5065359510474018, 0.5279810102366755, 0.5173099785277878, 0.535830186743541, 0.5368223044695226, 0.5151644684178602, 0.5323764291933398, 0.5312347589254325, 0.5338735371524632, 0.06757738494551291, 0.07510940173832203, 0.10171882691615464, 0.05582014737524932, 0.06652701777076597, 0.05190122563388122, 0.09472457566024695, 0.05913962244392135, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.14948243104172831, 0.11153611931354757, 0.09600400207146487, 0.1248938498681409, 0.11690291817505838, 0.1368487698841222, 0.11361149709236218, 9.999999999998899e-05, 9.999999999998899e-05, 0.013506851361393402, 0.009725685707564158, 9.999999999998899e-05, 0.006244945923276846, 0.00486031723528646, 9.999999999998899e-05, 0.019872591751231683, 0.004726484655766083, 0.06957272857429797, 0.01758612168876028, 0.010310803522691647, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 0.027130645705424783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045286380082674826, 0.06954783018607069, 0.03585061177191606, 0.055770453722678415, 0.05295698494644707, 0.038293627047065626, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19903226317683353, 0.18379488285344925, 0.2055799784281095, 0.19038052549897155, 0.20758925182018184, 0.1978530039868921, 0.1935659506118591, 0.1900970839960452, 0.04680390455819994, 0.03853992154267849, 0.04540456731106057, 0.03996840984097694, 0.038650047922826114, 0.046779233833527556, 0.073263588849099, 0.04804948744535198, 0.05229792848072812, 0.13709410100555053, 0.12739426512320573, 0.12602203673178558, 0.14776079809378628, 0.14330845579678753, 0.1248104632522643, 0.14963138758589234, 0.1519486330221338, 0.12862528034911247, 0.16581136048861322, 0.16810150441392124, 0.1708884007386109, 0.16836359285932123, 0.1821496595795835, 0.1769644640004372, 0.16248324581573614, 0.17377774300845283, 0.158273386427229, 0.11815478683836778, 0.11280978194220803, 0.11109491287868445, 0.10978923820566577, 0.13610603218022022, 0.11699439310920645, 0.10496528955152573, 0.1237427242099084, 0.12481228589388882, 0.1429128435865492, 0.16233450221944246, 0.15579351452130452, 0.16148409945229336, 0.1438479867140029, 0.16413767868192175, 0.15025358868369154, 0.17355151355563359, 0.18656212704725317, 0.14195011305864957, 0.14818437901077142, 0.14528239446922975, 0.14187561716008934, 0.1444161948692757, 0.15282202985716775, 0.13811865540041568, 0.1418559449375154, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.1793213659605366, 0.18540799854728474, 0.17477843717153851, 0.14269139344159354, 0.16181896156974962, 0.19312594872947209, 0.15692009224327252, 0.15672808824074347, 0.1636308278050963, 0.16050779395916304, 0.15202311182854444, 0.1489437599082306, 0.18749022965320938, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1738918222132887, 0.1840951386782479, 0.17521172209778724, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17844778892709057, 0.18953751425041876, 0.20568880668582523, 0.058344077551123696, 0.05081117145569902, 0.06762586258623504, 0.0521277740406102, 0.05934830659822565, 0.0533550031798079, 0.07532529613519179, 0.05491659739916577, 0.05251337521338861]}, "mutation_prompt": null}
{"id": "cc661ed0-07ca-4529-9e94-8b4aaf11168e", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass EnhancedHybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.8  # Adjusted HMCR\n        self.par = 0.3  # Adjusted PAR\n        self.bandwidth = 0.01\n        self.hm_size = int(0.6 * budget)  # Increased Harmony Memory size\n        self.num_threads = 4\n        self.pso_inertia = 0.6  # Adjusted PSO inertia\n        self.pso_c1 = 1.7  # Adjusted PSO cognitive parameter\n        self.pso_c2 = 1.7  # Adjusted PSO social parameter\n        self.pso_swarm_size = 15  # Increased PSO swarm size\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.4, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.5, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "EnhancedHybridHarmonyPSO", "description": "Implementing dynamic adjustment of both HMCR and PAR parameters and utilizing a larger swarm size for Particle Swarm Optimization (PSO) to enhance convergence speed.", "configspace": "", "generation": 44, "fitness": 0.10605781301962823, "feedback": "The algorithm EnhancedHybridHarmonyPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.10.", "error": "", "parent_id": "9bbaf628-dccf-4650-b1c6-9bca4e0f9f3b", "metadata": {"aucs": [0.1783204237481314, 0.1775900290469803, 0.170257377687277, 0.1720863846655335, 0.18818139055183436, 0.17485932532626614, 0.17879617397289582, 0.1676166735641771, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04209824630513448, 0.046372490884433515, 0.03930655751668133, 0.041028703578300574, 0.03732066520661048, 0.03792324223036159, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.03198517589454297, 0.030929276720888965, 0.0481463786277756, 0.025965940872886173, 0.05113668923969239, 0.05702674525995721, 0.040196886471646764, 0.040035993180335794, 0.034057233482783555, 0.40004039537938574, 0.4350272747972713, 0.44576257063863334, 0.425029017188279, 0.43951318980384635, 0.4436040884470671, 0.4412382626147283, 0.4385583348849629, 0.44003804146375736, 0.06795345746909609, 0.07739445517368271, 0.10171882691615464, 0.06431725022910595, 0.08454838988231839, 0.056454184995036516, 0.09472457566024695, 0.06111991941692618, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.11007923229407957, 0.0996755309072701, 0.1274911922412113, 0.1179605867771143, 0.1368487698841222, 0.1135869029704345, 0.01262917322267898, 0.004560104586776803, 0.003689195106263865, 0.006926786477036706, 9.999999999998899e-05, 9.999999999998899e-05, 0.0013263492776626196, 0.012699036904580518, 0.019872591751231683, 0.009379253237183915, 0.06957272857429797, 0.0029688418417046503, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 0.0034076564649522245, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.04490689360873623, 0.06941906045599022, 0.03203833848736448, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003479497089407202, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19305497168528818, 0.18389375812522712, 0.2055799784281095, 0.1898736678647861, 0.20724700933075846, 0.1978530039868921, 0.17885206630548933, 0.20219417324763578, 0.05001390496924141, 0.03713439913257166, 0.04401887178405428, 0.04406448694082632, 0.038899732437886136, 0.046080670610556984, 0.073263588849099, 0.055042291184853265, 0.05317175881197256, 0.14178348771676608, 0.12297275467438196, 0.13886679811392622, 0.14106301975521696, 0.14210959485758334, 0.12699841956553715, 0.1523613631871602, 0.14983548960964344, 0.13249652371683418, 0.17182146956930033, 0.15950729452706836, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16597874907975674, 0.17377774300845283, 0.15181853109072252, 0.1147064686340935, 0.10382166168941254, 0.11849032669552728, 0.10978923820566577, 0.13610603218022022, 0.11676919299387534, 0.10812998523195727, 0.1237427242099084, 0.1229185550255375, 0.14546773719893258, 0.16233450221944246, 0.1583470274596206, 0.160395092120871, 0.14782395684498206, 0.16443211455071816, 0.14866611074986524, 0.17355151355563359, 0.18277724523822958, 0.14214077758136612, 0.14635898048941254, 0.1421600495229861, 0.14173988242159563, 0.1447631454271785, 0.15282202985716775, 0.13697870895265896, 0.14164044590726022, 0.16207881422481074, 0.18402833448490363, 0.16981772769314207, 0.16657141521439822, 0.16098032785338745, 0.15120085377576964, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.16457383619914145, 0.15672808824074347, 0.1580636080386837, 0.16314382092367619, 0.15137119505004393, 0.15943442018384724, 0.17106830548535712, 0.17588299026224063, 0.1733826927034039, 0.2028812417861957, 0.1749173679671383, 0.19094915976158955, 0.1758625851896084, 0.1878616110532788, 0.2135749380374129, 0.18483035732633601, 0.1771222239165101, 0.188688463014553, 0.20568880668582523, 0.058344077551123696, 0.05202591573774984, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.0533550031798079, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "8ea3f7ae-c7ba-4889-b270-697deed4d607", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "HybridHarmonyPSO", "description": "Implementing a dynamic adaptation of hmcr and par parameters to accelerate convergence speed by dynamically adjusting the exploration and exploitation rates.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9bbaf628-dccf-4650-b1c6-9bca4e0f9f3b", "metadata": {"aucs": [0.1709404397982207, 0.17578811482102485, 0.170257377687277, 0.16845369514743413, 0.22534207735815892, 0.1743435064021196, 0.1785507992358102, 0.16299934718787568, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.03919225067219667, 0.04128992625519967, 0.03732066520661048, 0.043269612707969474, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.03149227199542726, 0.030929276720888965, 0.0481463786277756, 0.02827376645091395, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.0416260837629705, 0.029763828138413717, 0.5065359510474018, 0.5279810102366755, 0.5173099785277878, 0.535830186743541, 0.5368223044695226, 0.5151644684178602, 0.5323764291933398, 0.5312347589254325, 0.5338735371524632, 0.06757738494551291, 0.07510940173832203, 0.10171882691615464, 0.05582014737524932, 0.06652701777076597, 0.05190122563388122, 0.09472457566024695, 0.05913962244392135, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.14948243104172831, 0.11153611931354757, 0.09600400207146487, 0.1248938498681409, 0.11690291817505838, 0.1368487698841222, 0.11361149709236218, 9.999999999998899e-05, 9.999999999998899e-05, 0.013506851361393402, 0.009725685707564158, 9.999999999998899e-05, 0.006244945923276846, 0.00486031723528646, 9.999999999998899e-05, 0.019872591751231683, 0.004726484655766083, 0.06957272857429797, 0.01758612168876028, 0.010310803522691647, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 0.027130645705424783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045286380082674826, 0.06954783018607069, 0.03585061177191606, 0.055770453722678415, 0.05295698494644707, 0.038293627047065626, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19903226317683353, 0.18379488285344925, 0.2055799784281095, 0.19038052549897155, 0.20758925182018184, 0.1978530039868921, 0.1935659506118591, 0.1900970839960452, 0.04680390455819994, 0.03853992154267849, 0.04540456731106057, 0.03996840984097694, 0.038650047922826114, 0.046779233833527556, 0.073263588849099, 0.04804948744535198, 0.05229792848072812, 0.13709410100555053, 0.12739426512320573, 0.12602203673178558, 0.14776079809378628, 0.14330845579678753, 0.1248104632522643, 0.14963138758589234, 0.1519486330221338, 0.12862528034911247, 0.16581136048861322, 0.16810150441392124, 0.1708884007386109, 0.16836359285932123, 0.1821496595795835, 0.1769644640004372, 0.16248324581573614, 0.17377774300845283, 0.158273386427229, 0.11815478683836778, 0.11280978194220803, 0.11109491287868445, 0.10978923820566577, 0.13610603218022022, 0.11699439310920645, 0.10496528955152573, 0.1237427242099084, 0.12481228589388882, 0.1429128435865492, 0.16233450221944246, 0.15579351452130452, 0.16148409945229336, 0.1438479867140029, 0.16413767868192175, 0.15025358868369154, 0.17355151355563359, 0.18656212704725317, 0.14195011305864957, 0.14818437901077142, 0.14528239446922975, 0.14187561716008934, 0.1444161948692757, 0.15282202985716775, 0.13811865540041568, 0.1418559449375154, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.1793213659605366, 0.18540799854728474, 0.17477843717153851, 0.14269139344159354, 0.16181896156974962, 0.19312594872947209, 0.15692009224327252, 0.15672808824074347, 0.1636308278050963, 0.16050779395916304, 0.15202311182854444, 0.1489437599082306, 0.18749022965320938, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1738918222132887, 0.1840951386782479, 0.17521172209778724, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17844778892709057, 0.18953751425041876, 0.20568880668582523, 0.058344077551123696, 0.05081117145569902, 0.06762586258623504, 0.0521277740406102, 0.05934830659822565, 0.0533550031798079, 0.07532529613519179, 0.05491659739916577, 0.05251337521338861]}, "mutation_prompt": null}
{"id": "696dda98-50d5-45c7-9e89-d7a117e8c76f", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass CooperativeHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Cooperative Coevolution Strategy: Divide the search space into subcomponents\n                subcomponent_size = self.dim // self.num_threads\n                subcomponents = [harmony_memory[:, i*subcomponent_size:(i+1)*subcomponent_size] for i in range(self.num_threads)]\n                subfitness = [np.array([func(subcomponent) for subcomponent in subcomponents[i]]) for i in range(self.num_threads)]\n\n                for i in range(self.num_threads):\n                    best_index = np.argmin(subfitness[i])\n                    harmony_memory[:, i*subcomponent_size:(i+1)*subcomponent_size] = np.tile(subcomponents[i][best_index], (self.hm_size, 1))\n                    fitness = np.array([func(solution) for solution in harmony_memory])\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "CooperativeHarmonyPSO", "description": "Utilizing a cooperative coevolution strategy to divide the search space into subcomponents and optimize them concurrently.", "configspace": "", "generation": 46, "fitness": 0.09188686197266074, "feedback": "The algorithm CooperativeHarmonyPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "9bbaf628-dccf-4650-b1c6-9bca4e0f9f3b", "metadata": {"aucs": [0.19320731572803884, 0.17578811482102485, 0.170257377687277, 0.16845369514743413, 0.18818139055183436, 0.1743435064021196, 0.1785507992358102, 0.16108288315219066, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04216529290057769, 0.046372490884433515, 0.039833464329825485, 0.04271113133796045, 0.039191643977009694, 0.03858750500184793, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.029108217449482998, 0.03246745562054909, 0.0481463786277756, 0.030423038807032787, 0.04926774209271334, 0.06358184915597853, 0.03696417075239278, 0.04205420100046908, 0.030302582272371037, 0.08746944629118047, 0.06992874714624453, 0.09087431849796956, 0.08287363822411153, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.08005199574712607, 0.06522053816082407, 0.07510940173832203, 0.10171882691615464, 0.0630974648565985, 0.07976619508772564, 0.06773244077026352, 0.09472457566024695, 0.05718353518346264, 0.09436862702173698, 0.13487981876483923, 0.19308637766117165, 0.16569223024013513, 0.10909590260479085, 0.09383132408237305, 0.1248938498681409, 0.1161373594082461, 0.1368487698841222, 0.1135869029704345, 9.999999999998899e-05, 0.004342781283660391, 0.00379891092800988, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00568571061148071, 0.019872591751231683, 0.000384595680279598, 0.06957272857429797, 0.009697162707346663, 0.008545769538913062, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.02053967309530258, 0.02376198944201713, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.04505893351768431, 0.06941906045599022, 0.03370850269623282, 0.055770453722678415, 0.05508396625627432, 0.041003466524675014, 0.06445533616179877, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.2042032802633903, 0.19499542566287642, 0.21892136044248722, 0.18923395481742278, 0.20724700933075846, 0.20647573129208385, 0.1784211624537766, 0.1891480374906228, 0.04680390455819994, 0.036899537395828186, 0.04401887178405428, 0.04553002028311348, 0.04359997616229816, 0.05040760519609755, 0.073263588849099, 0.0479121796615245, 0.05327377708468206, 0.14404798587572298, 0.13248064838658424, 0.1379117341456606, 0.14106301975521696, 0.14115194246620144, 0.1280591802013763, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.15950729452706836, 0.16814906059237933, 0.16830900975719054, 0.1821496595795835, 0.1769644640004372, 0.16244737848268365, 0.17377774300845283, 0.1498435578063978, 0.1062088030534345, 0.10382166168941254, 0.11109491287868445, 0.11419098906762215, 0.13610603218022022, 0.11676919299387534, 0.1047405734700314, 0.1237427242099084, 0.1229185550255375, 0.14067664578267813, 0.16667347716230174, 0.15062247162954678, 0.1601583581414543, 0.1641995645014358, 0.1651876879740134, 0.1559177548337669, 0.17863323264901032, 0.18277724523822958, 0.14351331691460234, 0.14578023879947632, 0.14475502991749378, 0.14514800547677809, 0.1460792968538257, 0.15282202985716775, 0.13756211168355692, 0.1436767555908156, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1796435518702012, 0.15096921747452707, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.15692009224327252, 0.17777295103323376, 0.1580636080386837, 0.16050779395916304, 0.15400488813483748, 0.1560712268686919, 0.2016864976094359, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.17384470230485838, 0.1840951386782479, 0.18315638493115816, 0.19650600184681344, 0.2135749380374129, 0.18382439475410084, 0.17722270645935423, 0.188688463014553, 0.20568880668582523, 0.058344077551123696, 0.05645018444818528, 0.06585155299632517, 0.05282971595315955, 0.05960213804611181, 0.0533550031798079, 0.07532529613519179, 0.05576866184156437, 0.052791996561783905]}, "mutation_prompt": null}
{"id": "e1f4866e-dc6a-47bd-b540-22fbb7ddcd5e", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "HybridHarmonyPSO", "description": "Implementing a dynamic adaptation of hmcr and par parameters to accelerate convergence speed by dynamically adjusting the exploration and exploitation rates.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9bbaf628-dccf-4650-b1c6-9bca4e0f9f3b", "metadata": {"aucs": [0.1709404397982207, 0.17578811482102485, 0.170257377687277, 0.16845369514743413, 0.22534207735815892, 0.1743435064021196, 0.1785507992358102, 0.16299934718787568, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.03919225067219667, 0.04128992625519967, 0.03732066520661048, 0.043269612707969474, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.03149227199542726, 0.030929276720888965, 0.0481463786277756, 0.02827376645091395, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.0416260837629705, 0.029763828138413717, 0.5065359510474018, 0.5279810102366755, 0.5173099785277878, 0.535830186743541, 0.5368223044695226, 0.5151644684178602, 0.5323764291933398, 0.5312347589254325, 0.5338735371524632, 0.06757738494551291, 0.07510940173832203, 0.10171882691615464, 0.05582014737524932, 0.06652701777076597, 0.05190122563388122, 0.09472457566024695, 0.05913962244392135, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.14948243104172831, 0.11153611931354757, 0.09600400207146487, 0.1248938498681409, 0.11690291817505838, 0.1368487698841222, 0.11361149709236218, 9.999999999998899e-05, 9.999999999998899e-05, 0.013506851361393402, 0.009725685707564158, 9.999999999998899e-05, 0.006244945923276846, 0.00486031723528646, 9.999999999998899e-05, 0.019872591751231683, 0.004726484655766083, 0.06957272857429797, 0.01758612168876028, 0.010310803522691647, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 0.027130645705424783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045286380082674826, 0.06954783018607069, 0.03585061177191606, 0.055770453722678415, 0.05295698494644707, 0.038293627047065626, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19903226317683353, 0.18379488285344925, 0.2055799784281095, 0.19038052549897155, 0.20758925182018184, 0.1978530039868921, 0.1935659506118591, 0.1900970839960452, 0.04680390455819994, 0.03853992154267849, 0.04540456731106057, 0.03996840984097694, 0.038650047922826114, 0.046779233833527556, 0.073263588849099, 0.04804948744535198, 0.05229792848072812, 0.13709410100555053, 0.12739426512320573, 0.12602203673178558, 0.14776079809378628, 0.14330845579678753, 0.1248104632522643, 0.14963138758589234, 0.1519486330221338, 0.12862528034911247, 0.16581136048861322, 0.16810150441392124, 0.1708884007386109, 0.16836359285932123, 0.1821496595795835, 0.1769644640004372, 0.16248324581573614, 0.17377774300845283, 0.158273386427229, 0.11815478683836778, 0.11280978194220803, 0.11109491287868445, 0.10978923820566577, 0.13610603218022022, 0.11699439310920645, 0.10496528955152573, 0.1237427242099084, 0.12481228589388882, 0.1429128435865492, 0.16233450221944246, 0.15579351452130452, 0.16148409945229336, 0.1438479867140029, 0.16413767868192175, 0.15025358868369154, 0.17355151355563359, 0.18656212704725317, 0.14195011305864957, 0.14818437901077142, 0.14528239446922975, 0.14187561716008934, 0.1444161948692757, 0.15282202985716775, 0.13811865540041568, 0.1418559449375154, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.1793213659605366, 0.18540799854728474, 0.17477843717153851, 0.14269139344159354, 0.16181896156974962, 0.19312594872947209, 0.15692009224327252, 0.15672808824074347, 0.1636308278050963, 0.16050779395916304, 0.15202311182854444, 0.1489437599082306, 0.18749022965320938, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1738918222132887, 0.1840951386782479, 0.17521172209778724, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17844778892709057, 0.18953751425041876, 0.20568880668582523, 0.058344077551123696, 0.05081117145569902, 0.06762586258623504, 0.0521277740406102, 0.05934830659822565, 0.0533550031798079, 0.07532529613519179, 0.05491659739916577, 0.05251337521338861]}, "mutation_prompt": null}
{"id": "20006ff0-cc34-408f-a072-34d961dc3fc3", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "HybridHarmonyPSO", "description": "Implementing a dynamic adaptation of hmcr and par parameters to accelerate convergence speed by dynamically adjusting the exploration and exploitation rates.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9bbaf628-dccf-4650-b1c6-9bca4e0f9f3b", "metadata": {"aucs": [0.1709404397982207, 0.17578811482102485, 0.170257377687277, 0.16845369514743413, 0.22534207735815892, 0.1743435064021196, 0.1785507992358102, 0.16299934718787568, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.03919225067219667, 0.04128992625519967, 0.03732066520661048, 0.043269612707969474, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.03149227199542726, 0.030929276720888965, 0.0481463786277756, 0.02827376645091395, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.0416260837629705, 0.029763828138413717, 0.5065359510474018, 0.5279810102366755, 0.5173099785277878, 0.535830186743541, 0.5368223044695226, 0.5151644684178602, 0.5323764291933398, 0.5312347589254325, 0.5338735371524632, 0.06757738494551291, 0.07510940173832203, 0.10171882691615464, 0.05582014737524932, 0.06652701777076597, 0.05190122563388122, 0.09472457566024695, 0.05913962244392135, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.14948243104172831, 0.11153611931354757, 0.09600400207146487, 0.1248938498681409, 0.11690291817505838, 0.1368487698841222, 0.11361149709236218, 9.999999999998899e-05, 9.999999999998899e-05, 0.013506851361393402, 0.009725685707564158, 9.999999999998899e-05, 0.006244945923276846, 0.00486031723528646, 9.999999999998899e-05, 0.019872591751231683, 0.004726484655766083, 0.06957272857429797, 0.01758612168876028, 0.010310803522691647, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 0.027130645705424783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045286380082674826, 0.06954783018607069, 0.03585061177191606, 0.055770453722678415, 0.05295698494644707, 0.038293627047065626, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19903226317683353, 0.18379488285344925, 0.2055799784281095, 0.19038052549897155, 0.20758925182018184, 0.1978530039868921, 0.1935659506118591, 0.1900970839960452, 0.04680390455819994, 0.03853992154267849, 0.04540456731106057, 0.03996840984097694, 0.038650047922826114, 0.046779233833527556, 0.073263588849099, 0.04804948744535198, 0.05229792848072812, 0.13709410100555053, 0.12739426512320573, 0.12602203673178558, 0.14776079809378628, 0.14330845579678753, 0.1248104632522643, 0.14963138758589234, 0.1519486330221338, 0.12862528034911247, 0.16581136048861322, 0.16810150441392124, 0.1708884007386109, 0.16836359285932123, 0.1821496595795835, 0.1769644640004372, 0.16248324581573614, 0.17377774300845283, 0.158273386427229, 0.11815478683836778, 0.11280978194220803, 0.11109491287868445, 0.10978923820566577, 0.13610603218022022, 0.11699439310920645, 0.10496528955152573, 0.1237427242099084, 0.12481228589388882, 0.1429128435865492, 0.16233450221944246, 0.15579351452130452, 0.16148409945229336, 0.1438479867140029, 0.16413767868192175, 0.15025358868369154, 0.17355151355563359, 0.18656212704725317, 0.14195011305864957, 0.14818437901077142, 0.14528239446922975, 0.14187561716008934, 0.1444161948692757, 0.15282202985716775, 0.13811865540041568, 0.1418559449375154, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.1793213659605366, 0.18540799854728474, 0.17477843717153851, 0.14269139344159354, 0.16181896156974962, 0.19312594872947209, 0.15692009224327252, 0.15672808824074347, 0.1636308278050963, 0.16050779395916304, 0.15202311182854444, 0.1489437599082306, 0.18749022965320938, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1738918222132887, 0.1840951386782479, 0.17521172209778724, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17844778892709057, 0.18953751425041876, 0.20568880668582523, 0.058344077551123696, 0.05081117145569902, 0.06762586258623504, 0.0521277740406102, 0.05934830659822565, 0.0533550031798079, 0.07532529613519179, 0.05491659739916577, 0.05251337521338861]}, "mutation_prompt": null}
{"id": "2d85a4db-a1fc-467f-8ea6-54021a2f0085", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "HybridHarmonyPSO", "description": "Implementing a dynamic adaptation of hmcr and par parameters to accelerate convergence speed by dynamically adjusting the exploration and exploitation rates.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "9bbaf628-dccf-4650-b1c6-9bca4e0f9f3b", "metadata": {"aucs": [0.1709404397982207, 0.17578811482102485, 0.170257377687277, 0.16845369514743413, 0.22534207735815892, 0.1743435064021196, 0.1785507992358102, 0.16299934718787568, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.03919225067219667, 0.04128992625519967, 0.03732066520661048, 0.043269612707969474, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.03149227199542726, 0.030929276720888965, 0.0481463786277756, 0.02827376645091395, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.0416260837629705, 0.029763828138413717, 0.5065359510474018, 0.5279810102366755, 0.5173099785277878, 0.535830186743541, 0.5368223044695226, 0.5151644684178602, 0.5323764291933398, 0.5312347589254325, 0.5338735371524632, 0.06757738494551291, 0.07510940173832203, 0.10171882691615464, 0.05582014737524932, 0.06652701777076597, 0.05190122563388122, 0.09472457566024695, 0.05913962244392135, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.14948243104172831, 0.11153611931354757, 0.09600400207146487, 0.1248938498681409, 0.11690291817505838, 0.1368487698841222, 0.11361149709236218, 9.999999999998899e-05, 9.999999999998899e-05, 0.013506851361393402, 0.009725685707564158, 9.999999999998899e-05, 0.006244945923276846, 0.00486031723528646, 9.999999999998899e-05, 0.019872591751231683, 0.004726484655766083, 0.06957272857429797, 0.01758612168876028, 0.010310803522691647, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 0.027130645705424783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045286380082674826, 0.06954783018607069, 0.03585061177191606, 0.055770453722678415, 0.05295698494644707, 0.038293627047065626, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19903226317683353, 0.18379488285344925, 0.2055799784281095, 0.19038052549897155, 0.20758925182018184, 0.1978530039868921, 0.1935659506118591, 0.1900970839960452, 0.04680390455819994, 0.03853992154267849, 0.04540456731106057, 0.03996840984097694, 0.038650047922826114, 0.046779233833527556, 0.073263588849099, 0.04804948744535198, 0.05229792848072812, 0.13709410100555053, 0.12739426512320573, 0.12602203673178558, 0.14776079809378628, 0.14330845579678753, 0.1248104632522643, 0.14963138758589234, 0.1519486330221338, 0.12862528034911247, 0.16581136048861322, 0.16810150441392124, 0.1708884007386109, 0.16836359285932123, 0.1821496595795835, 0.1769644640004372, 0.16248324581573614, 0.17377774300845283, 0.158273386427229, 0.11815478683836778, 0.11280978194220803, 0.11109491287868445, 0.10978923820566577, 0.13610603218022022, 0.11699439310920645, 0.10496528955152573, 0.1237427242099084, 0.12481228589388882, 0.1429128435865492, 0.16233450221944246, 0.15579351452130452, 0.16148409945229336, 0.1438479867140029, 0.16413767868192175, 0.15025358868369154, 0.17355151355563359, 0.18656212704725317, 0.14195011305864957, 0.14818437901077142, 0.14528239446922975, 0.14187561716008934, 0.1444161948692757, 0.15282202985716775, 0.13811865540041568, 0.1418559449375154, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.1793213659605366, 0.18540799854728474, 0.17477843717153851, 0.14269139344159354, 0.16181896156974962, 0.19312594872947209, 0.15692009224327252, 0.15672808824074347, 0.1636308278050963, 0.16050779395916304, 0.15202311182854444, 0.1489437599082306, 0.18749022965320938, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1738918222132887, 0.1840951386782479, 0.17521172209778724, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17844778892709057, 0.18953751425041876, 0.20568880668582523, 0.058344077551123696, 0.05081117145569902, 0.06762586258623504, 0.0521277740406102, 0.05934830659822565, 0.0533550031798079, 0.07532529613519179, 0.05491659739916577, 0.05251337521338861]}, "mutation_prompt": null}
{"id": "b876fbf1-55d2-4d76-a496-8408234e0001", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "HybridHarmonyPSO", "description": "Implementing a dynamic adaptation of hmcr and par parameters to accelerate convergence speed by dynamically adjusting the exploration and exploitation rates.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "9bbaf628-dccf-4650-b1c6-9bca4e0f9f3b", "metadata": {"aucs": [0.1709404397982207, 0.17578811482102485, 0.170257377687277, 0.16845369514743413, 0.22534207735815892, 0.1743435064021196, 0.1785507992358102, 0.16299934718787568, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.03919225067219667, 0.04128992625519967, 0.03732066520661048, 0.043269612707969474, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.03149227199542726, 0.030929276720888965, 0.0481463786277756, 0.02827376645091395, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.0416260837629705, 0.029763828138413717, 0.5065359510474018, 0.5279810102366755, 0.5173099785277878, 0.535830186743541, 0.5368223044695226, 0.5151644684178602, 0.5323764291933398, 0.5312347589254325, 0.5338735371524632, 0.06757738494551291, 0.07510940173832203, 0.10171882691615464, 0.05582014737524932, 0.06652701777076597, 0.05190122563388122, 0.09472457566024695, 0.05913962244392135, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.14948243104172831, 0.11153611931354757, 0.09600400207146487, 0.1248938498681409, 0.11690291817505838, 0.1368487698841222, 0.11361149709236218, 9.999999999998899e-05, 9.999999999998899e-05, 0.013506851361393402, 0.009725685707564158, 9.999999999998899e-05, 0.006244945923276846, 0.00486031723528646, 9.999999999998899e-05, 0.019872591751231683, 0.004726484655766083, 0.06957272857429797, 0.01758612168876028, 0.010310803522691647, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 0.027130645705424783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045286380082674826, 0.06954783018607069, 0.03585061177191606, 0.055770453722678415, 0.05295698494644707, 0.038293627047065626, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19903226317683353, 0.18379488285344925, 0.2055799784281095, 0.19038052549897155, 0.20758925182018184, 0.1978530039868921, 0.1935659506118591, 0.1900970839960452, 0.04680390455819994, 0.03853992154267849, 0.04540456731106057, 0.03996840984097694, 0.038650047922826114, 0.046779233833527556, 0.073263588849099, 0.04804948744535198, 0.05229792848072812, 0.13709410100555053, 0.12739426512320573, 0.12602203673178558, 0.14776079809378628, 0.14330845579678753, 0.1248104632522643, 0.14963138758589234, 0.1519486330221338, 0.12862528034911247, 0.16581136048861322, 0.16810150441392124, 0.1708884007386109, 0.16836359285932123, 0.1821496595795835, 0.1769644640004372, 0.16248324581573614, 0.17377774300845283, 0.158273386427229, 0.11815478683836778, 0.11280978194220803, 0.11109491287868445, 0.10978923820566577, 0.13610603218022022, 0.11699439310920645, 0.10496528955152573, 0.1237427242099084, 0.12481228589388882, 0.1429128435865492, 0.16233450221944246, 0.15579351452130452, 0.16148409945229336, 0.1438479867140029, 0.16413767868192175, 0.15025358868369154, 0.17355151355563359, 0.18656212704725317, 0.14195011305864957, 0.14818437901077142, 0.14528239446922975, 0.14187561716008934, 0.1444161948692757, 0.15282202985716775, 0.13811865540041568, 0.1418559449375154, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.1793213659605366, 0.18540799854728474, 0.17477843717153851, 0.14269139344159354, 0.16181896156974962, 0.19312594872947209, 0.15692009224327252, 0.15672808824074347, 0.1636308278050963, 0.16050779395916304, 0.15202311182854444, 0.1489437599082306, 0.18749022965320938, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1738918222132887, 0.1840951386782479, 0.17521172209778724, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17844778892709057, 0.18953751425041876, 0.20568880668582523, 0.058344077551123696, 0.05081117145569902, 0.06762586258623504, 0.0521277740406102, 0.05934830659822565, 0.0533550031798079, 0.07532529613519179, 0.05491659739916577, 0.05251337521338861]}, "mutation_prompt": null}
{"id": "7b6e6e23-9d2d-4f25-92c9-660dd94ce224", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "HybridHarmonyPSO", "description": "Implementing a dynamic adaptation of hmcr and par parameters to accelerate convergence speed by dynamically adjusting the exploration and exploitation rates.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9bbaf628-dccf-4650-b1c6-9bca4e0f9f3b", "metadata": {"aucs": [0.1709404397982207, 0.17578811482102485, 0.170257377687277, 0.16845369514743413, 0.22534207735815892, 0.1743435064021196, 0.1785507992358102, 0.16299934718787568, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.03919225067219667, 0.04128992625519967, 0.03732066520661048, 0.043269612707969474, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.03149227199542726, 0.030929276720888965, 0.0481463786277756, 0.02827376645091395, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.0416260837629705, 0.029763828138413717, 0.5065359510474018, 0.5279810102366755, 0.5173099785277878, 0.535830186743541, 0.5368223044695226, 0.5151644684178602, 0.5323764291933398, 0.5312347589254325, 0.5338735371524632, 0.06757738494551291, 0.07510940173832203, 0.10171882691615464, 0.05582014737524932, 0.06652701777076597, 0.05190122563388122, 0.09472457566024695, 0.05913962244392135, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.14948243104172831, 0.11153611931354757, 0.09600400207146487, 0.1248938498681409, 0.11690291817505838, 0.1368487698841222, 0.11361149709236218, 9.999999999998899e-05, 9.999999999998899e-05, 0.013506851361393402, 0.009725685707564158, 9.999999999998899e-05, 0.006244945923276846, 0.00486031723528646, 9.999999999998899e-05, 0.019872591751231683, 0.004726484655766083, 0.06957272857429797, 0.01758612168876028, 0.010310803522691647, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 0.027130645705424783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045286380082674826, 0.06954783018607069, 0.03585061177191606, 0.055770453722678415, 0.05295698494644707, 0.038293627047065626, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19903226317683353, 0.18379488285344925, 0.2055799784281095, 0.19038052549897155, 0.20758925182018184, 0.1978530039868921, 0.1935659506118591, 0.1900970839960452, 0.04680390455819994, 0.03853992154267849, 0.04540456731106057, 0.03996840984097694, 0.038650047922826114, 0.046779233833527556, 0.073263588849099, 0.04804948744535198, 0.05229792848072812, 0.13709410100555053, 0.12739426512320573, 0.12602203673178558, 0.14776079809378628, 0.14330845579678753, 0.1248104632522643, 0.14963138758589234, 0.1519486330221338, 0.12862528034911247, 0.16581136048861322, 0.16810150441392124, 0.1708884007386109, 0.16836359285932123, 0.1821496595795835, 0.1769644640004372, 0.16248324581573614, 0.17377774300845283, 0.158273386427229, 0.11815478683836778, 0.11280978194220803, 0.11109491287868445, 0.10978923820566577, 0.13610603218022022, 0.11699439310920645, 0.10496528955152573, 0.1237427242099084, 0.12481228589388882, 0.1429128435865492, 0.16233450221944246, 0.15579351452130452, 0.16148409945229336, 0.1438479867140029, 0.16413767868192175, 0.15025358868369154, 0.17355151355563359, 0.18656212704725317, 0.14195011305864957, 0.14818437901077142, 0.14528239446922975, 0.14187561716008934, 0.1444161948692757, 0.15282202985716775, 0.13811865540041568, 0.1418559449375154, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.1793213659605366, 0.18540799854728474, 0.17477843717153851, 0.14269139344159354, 0.16181896156974962, 0.19312594872947209, 0.15692009224327252, 0.15672808824074347, 0.1636308278050963, 0.16050779395916304, 0.15202311182854444, 0.1489437599082306, 0.18749022965320938, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1738918222132887, 0.1840951386782479, 0.17521172209778724, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17844778892709057, 0.18953751425041876, 0.20568880668582523, 0.058344077551123696, 0.05081117145569902, 0.06762586258623504, 0.0521277740406102, 0.05934830659822565, 0.0533550031798079, 0.07532529613519179, 0.05491659739916577, 0.05251337521338861]}, "mutation_prompt": null}
{"id": "2ee85830-62bd-40cb-8655-8bfdc4c6ab7d", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "HybridHarmonyPSO", "description": "Implementing a dynamic adaptation of hmcr and par parameters to accelerate convergence speed by dynamically adjusting the exploration and exploitation rates.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "9bbaf628-dccf-4650-b1c6-9bca4e0f9f3b", "metadata": {"aucs": [0.1709404397982207, 0.17578811482102485, 0.170257377687277, 0.16845369514743413, 0.22534207735815892, 0.1743435064021196, 0.1785507992358102, 0.16299934718787568, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.03919225067219667, 0.04128992625519967, 0.03732066520661048, 0.043269612707969474, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.03149227199542726, 0.030929276720888965, 0.0481463786277756, 0.02827376645091395, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.0416260837629705, 0.029763828138413717, 0.5065359510474018, 0.5279810102366755, 0.5173099785277878, 0.535830186743541, 0.5368223044695226, 0.5151644684178602, 0.5323764291933398, 0.5312347589254325, 0.5338735371524632, 0.06757738494551291, 0.07510940173832203, 0.10171882691615464, 0.05582014737524932, 0.06652701777076597, 0.05190122563388122, 0.09472457566024695, 0.05913962244392135, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.14948243104172831, 0.11153611931354757, 0.09600400207146487, 0.1248938498681409, 0.11690291817505838, 0.1368487698841222, 0.11361149709236218, 9.999999999998899e-05, 9.999999999998899e-05, 0.013506851361393402, 0.009725685707564158, 9.999999999998899e-05, 0.006244945923276846, 0.00486031723528646, 9.999999999998899e-05, 0.019872591751231683, 0.004726484655766083, 0.06957272857429797, 0.01758612168876028, 0.010310803522691647, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 0.027130645705424783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045286380082674826, 0.06954783018607069, 0.03585061177191606, 0.055770453722678415, 0.05295698494644707, 0.038293627047065626, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19903226317683353, 0.18379488285344925, 0.2055799784281095, 0.19038052549897155, 0.20758925182018184, 0.1978530039868921, 0.1935659506118591, 0.1900970839960452, 0.04680390455819994, 0.03853992154267849, 0.04540456731106057, 0.03996840984097694, 0.038650047922826114, 0.046779233833527556, 0.073263588849099, 0.04804948744535198, 0.05229792848072812, 0.13709410100555053, 0.12739426512320573, 0.12602203673178558, 0.14776079809378628, 0.14330845579678753, 0.1248104632522643, 0.14963138758589234, 0.1519486330221338, 0.12862528034911247, 0.16581136048861322, 0.16810150441392124, 0.1708884007386109, 0.16836359285932123, 0.1821496595795835, 0.1769644640004372, 0.16248324581573614, 0.17377774300845283, 0.158273386427229, 0.11815478683836778, 0.11280978194220803, 0.11109491287868445, 0.10978923820566577, 0.13610603218022022, 0.11699439310920645, 0.10496528955152573, 0.1237427242099084, 0.12481228589388882, 0.1429128435865492, 0.16233450221944246, 0.15579351452130452, 0.16148409945229336, 0.1438479867140029, 0.16413767868192175, 0.15025358868369154, 0.17355151355563359, 0.18656212704725317, 0.14195011305864957, 0.14818437901077142, 0.14528239446922975, 0.14187561716008934, 0.1444161948692757, 0.15282202985716775, 0.13811865540041568, 0.1418559449375154, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.1793213659605366, 0.18540799854728474, 0.17477843717153851, 0.14269139344159354, 0.16181896156974962, 0.19312594872947209, 0.15692009224327252, 0.15672808824074347, 0.1636308278050963, 0.16050779395916304, 0.15202311182854444, 0.1489437599082306, 0.18749022965320938, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1738918222132887, 0.1840951386782479, 0.17521172209778724, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17844778892709057, 0.18953751425041876, 0.20568880668582523, 0.058344077551123696, 0.05081117145569902, 0.06762586258623504, 0.0521277740406102, 0.05934830659822565, 0.0533550031798079, 0.07532529613519179, 0.05491659739916577, 0.05251337521338861]}, "mutation_prompt": null}
{"id": "26a5f859-6963-489e-b6e6-6378c6274d70", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "HybridHarmonyPSO", "description": "Implementing a dynamic adaptation of hmcr and par parameters to accelerate convergence speed by dynamically adjusting the exploration and exploitation rates.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9bbaf628-dccf-4650-b1c6-9bca4e0f9f3b", "metadata": {"aucs": [0.1709404397982207, 0.17578811482102485, 0.170257377687277, 0.16845369514743413, 0.22534207735815892, 0.1743435064021196, 0.1785507992358102, 0.16299934718787568, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.03919225067219667, 0.04128992625519967, 0.03732066520661048, 0.043269612707969474, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.03149227199542726, 0.030929276720888965, 0.0481463786277756, 0.02827376645091395, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.0416260837629705, 0.029763828138413717, 0.5065359510474018, 0.5279810102366755, 0.5173099785277878, 0.535830186743541, 0.5368223044695226, 0.5151644684178602, 0.5323764291933398, 0.5312347589254325, 0.5338735371524632, 0.06757738494551291, 0.07510940173832203, 0.10171882691615464, 0.05582014737524932, 0.06652701777076597, 0.05190122563388122, 0.09472457566024695, 0.05913962244392135, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.14948243104172831, 0.11153611931354757, 0.09600400207146487, 0.1248938498681409, 0.11690291817505838, 0.1368487698841222, 0.11361149709236218, 9.999999999998899e-05, 9.999999999998899e-05, 0.013506851361393402, 0.009725685707564158, 9.999999999998899e-05, 0.006244945923276846, 0.00486031723528646, 9.999999999998899e-05, 0.019872591751231683, 0.004726484655766083, 0.06957272857429797, 0.01758612168876028, 0.010310803522691647, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 0.027130645705424783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045286380082674826, 0.06954783018607069, 0.03585061177191606, 0.055770453722678415, 0.05295698494644707, 0.038293627047065626, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19903226317683353, 0.18379488285344925, 0.2055799784281095, 0.19038052549897155, 0.20758925182018184, 0.1978530039868921, 0.1935659506118591, 0.1900970839960452, 0.04680390455819994, 0.03853992154267849, 0.04540456731106057, 0.03996840984097694, 0.038650047922826114, 0.046779233833527556, 0.073263588849099, 0.04804948744535198, 0.05229792848072812, 0.13709410100555053, 0.12739426512320573, 0.12602203673178558, 0.14776079809378628, 0.14330845579678753, 0.1248104632522643, 0.14963138758589234, 0.1519486330221338, 0.12862528034911247, 0.16581136048861322, 0.16810150441392124, 0.1708884007386109, 0.16836359285932123, 0.1821496595795835, 0.1769644640004372, 0.16248324581573614, 0.17377774300845283, 0.158273386427229, 0.11815478683836778, 0.11280978194220803, 0.11109491287868445, 0.10978923820566577, 0.13610603218022022, 0.11699439310920645, 0.10496528955152573, 0.1237427242099084, 0.12481228589388882, 0.1429128435865492, 0.16233450221944246, 0.15579351452130452, 0.16148409945229336, 0.1438479867140029, 0.16413767868192175, 0.15025358868369154, 0.17355151355563359, 0.18656212704725317, 0.14195011305864957, 0.14818437901077142, 0.14528239446922975, 0.14187561716008934, 0.1444161948692757, 0.15282202985716775, 0.13811865540041568, 0.1418559449375154, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.1793213659605366, 0.18540799854728474, 0.17477843717153851, 0.14269139344159354, 0.16181896156974962, 0.19312594872947209, 0.15692009224327252, 0.15672808824074347, 0.1636308278050963, 0.16050779395916304, 0.15202311182854444, 0.1489437599082306, 0.18749022965320938, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1738918222132887, 0.1840951386782479, 0.17521172209778724, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17844778892709057, 0.18953751425041876, 0.20568880668582523, 0.058344077551123696, 0.05081117145569902, 0.06762586258623504, 0.0521277740406102, 0.05934830659822565, 0.0533550031798079, 0.07532529613519179, 0.05491659739916577, 0.05251337521338861]}, "mutation_prompt": null}
{"id": "996773dc-7862-49b7-bd16-523fd3e33994", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "HybridHarmonyPSO", "description": "Implementing a dynamic adaptation of hmcr and par parameters to accelerate convergence speed by dynamically adjusting the exploration and exploitation rates.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9bbaf628-dccf-4650-b1c6-9bca4e0f9f3b", "metadata": {"aucs": [0.1709404397982207, 0.17578811482102485, 0.170257377687277, 0.16845369514743413, 0.22534207735815892, 0.1743435064021196, 0.1785507992358102, 0.16299934718787568, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.03919225067219667, 0.04128992625519967, 0.03732066520661048, 0.043269612707969474, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.03149227199542726, 0.030929276720888965, 0.0481463786277756, 0.02827376645091395, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.0416260837629705, 0.029763828138413717, 0.5065359510474018, 0.5279810102366755, 0.5173099785277878, 0.535830186743541, 0.5368223044695226, 0.5151644684178602, 0.5323764291933398, 0.5312347589254325, 0.5338735371524632, 0.06757738494551291, 0.07510940173832203, 0.10171882691615464, 0.05582014737524932, 0.06652701777076597, 0.05190122563388122, 0.09472457566024695, 0.05913962244392135, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.14948243104172831, 0.11153611931354757, 0.09600400207146487, 0.1248938498681409, 0.11690291817505838, 0.1368487698841222, 0.11361149709236218, 9.999999999998899e-05, 9.999999999998899e-05, 0.013506851361393402, 0.009725685707564158, 9.999999999998899e-05, 0.006244945923276846, 0.00486031723528646, 9.999999999998899e-05, 0.019872591751231683, 0.004726484655766083, 0.06957272857429797, 0.01758612168876028, 0.010310803522691647, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 0.027130645705424783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045286380082674826, 0.06954783018607069, 0.03585061177191606, 0.055770453722678415, 0.05295698494644707, 0.038293627047065626, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19903226317683353, 0.18379488285344925, 0.2055799784281095, 0.19038052549897155, 0.20758925182018184, 0.1978530039868921, 0.1935659506118591, 0.1900970839960452, 0.04680390455819994, 0.03853992154267849, 0.04540456731106057, 0.03996840984097694, 0.038650047922826114, 0.046779233833527556, 0.073263588849099, 0.04804948744535198, 0.05229792848072812, 0.13709410100555053, 0.12739426512320573, 0.12602203673178558, 0.14776079809378628, 0.14330845579678753, 0.1248104632522643, 0.14963138758589234, 0.1519486330221338, 0.12862528034911247, 0.16581136048861322, 0.16810150441392124, 0.1708884007386109, 0.16836359285932123, 0.1821496595795835, 0.1769644640004372, 0.16248324581573614, 0.17377774300845283, 0.158273386427229, 0.11815478683836778, 0.11280978194220803, 0.11109491287868445, 0.10978923820566577, 0.13610603218022022, 0.11699439310920645, 0.10496528955152573, 0.1237427242099084, 0.12481228589388882, 0.1429128435865492, 0.16233450221944246, 0.15579351452130452, 0.16148409945229336, 0.1438479867140029, 0.16413767868192175, 0.15025358868369154, 0.17355151355563359, 0.18656212704725317, 0.14195011305864957, 0.14818437901077142, 0.14528239446922975, 0.14187561716008934, 0.1444161948692757, 0.15282202985716775, 0.13811865540041568, 0.1418559449375154, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.1793213659605366, 0.18540799854728474, 0.17477843717153851, 0.14269139344159354, 0.16181896156974962, 0.19312594872947209, 0.15692009224327252, 0.15672808824074347, 0.1636308278050963, 0.16050779395916304, 0.15202311182854444, 0.1489437599082306, 0.18749022965320938, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1738918222132887, 0.1840951386782479, 0.17521172209778724, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17844778892709057, 0.18953751425041876, 0.20568880668582523, 0.058344077551123696, 0.05081117145569902, 0.06762586258623504, 0.0521277740406102, 0.05934830659822565, 0.0533550031798079, 0.07532529613519179, 0.05491659739916577, 0.05251337521338861]}, "mutation_prompt": null}
{"id": "06a2bd5a-c960-4571-85c2-8b7d5d67401d", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "HybridHarmonyPSO", "description": "Implementing a dynamic adaptation of hmcr and par parameters to accelerate convergence speed by dynamically adjusting the exploration and exploitation rates.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9bbaf628-dccf-4650-b1c6-9bca4e0f9f3b", "metadata": {"aucs": [0.1709404397982207, 0.17578811482102485, 0.170257377687277, 0.16845369514743413, 0.22534207735815892, 0.1743435064021196, 0.1785507992358102, 0.16299934718787568, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.03919225067219667, 0.04128992625519967, 0.03732066520661048, 0.043269612707969474, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.03149227199542726, 0.030929276720888965, 0.0481463786277756, 0.02827376645091395, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.0416260837629705, 0.029763828138413717, 0.5065359510474018, 0.5279810102366755, 0.5173099785277878, 0.535830186743541, 0.5368223044695226, 0.5151644684178602, 0.5323764291933398, 0.5312347589254325, 0.5338735371524632, 0.06757738494551291, 0.07510940173832203, 0.10171882691615464, 0.05582014737524932, 0.06652701777076597, 0.05190122563388122, 0.09472457566024695, 0.05913962244392135, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.14948243104172831, 0.11153611931354757, 0.09600400207146487, 0.1248938498681409, 0.11690291817505838, 0.1368487698841222, 0.11361149709236218, 9.999999999998899e-05, 9.999999999998899e-05, 0.013506851361393402, 0.009725685707564158, 9.999999999998899e-05, 0.006244945923276846, 0.00486031723528646, 9.999999999998899e-05, 0.019872591751231683, 0.004726484655766083, 0.06957272857429797, 0.01758612168876028, 0.010310803522691647, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 0.027130645705424783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045286380082674826, 0.06954783018607069, 0.03585061177191606, 0.055770453722678415, 0.05295698494644707, 0.038293627047065626, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19903226317683353, 0.18379488285344925, 0.2055799784281095, 0.19038052549897155, 0.20758925182018184, 0.1978530039868921, 0.1935659506118591, 0.1900970839960452, 0.04680390455819994, 0.03853992154267849, 0.04540456731106057, 0.03996840984097694, 0.038650047922826114, 0.046779233833527556, 0.073263588849099, 0.04804948744535198, 0.05229792848072812, 0.13709410100555053, 0.12739426512320573, 0.12602203673178558, 0.14776079809378628, 0.14330845579678753, 0.1248104632522643, 0.14963138758589234, 0.1519486330221338, 0.12862528034911247, 0.16581136048861322, 0.16810150441392124, 0.1708884007386109, 0.16836359285932123, 0.1821496595795835, 0.1769644640004372, 0.16248324581573614, 0.17377774300845283, 0.158273386427229, 0.11815478683836778, 0.11280978194220803, 0.11109491287868445, 0.10978923820566577, 0.13610603218022022, 0.11699439310920645, 0.10496528955152573, 0.1237427242099084, 0.12481228589388882, 0.1429128435865492, 0.16233450221944246, 0.15579351452130452, 0.16148409945229336, 0.1438479867140029, 0.16413767868192175, 0.15025358868369154, 0.17355151355563359, 0.18656212704725317, 0.14195011305864957, 0.14818437901077142, 0.14528239446922975, 0.14187561716008934, 0.1444161948692757, 0.15282202985716775, 0.13811865540041568, 0.1418559449375154, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.1793213659605366, 0.18540799854728474, 0.17477843717153851, 0.14269139344159354, 0.16181896156974962, 0.19312594872947209, 0.15692009224327252, 0.15672808824074347, 0.1636308278050963, 0.16050779395916304, 0.15202311182854444, 0.1489437599082306, 0.18749022965320938, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1738918222132887, 0.1840951386782479, 0.17521172209778724, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17844778892709057, 0.18953751425041876, 0.20568880668582523, 0.058344077551123696, 0.05081117145569902, 0.06762586258623504, 0.0521277740406102, 0.05934830659822565, 0.0533550031798079, 0.07532529613519179, 0.05491659739916577, 0.05251337521338861]}, "mutation_prompt": null}
{"id": "bad0332b-8d6c-42b3-9a01-1bfecbd82319", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "HybridHarmonyPSO", "description": "Implementing a dynamic adaptation of hmcr and par parameters to accelerate convergence speed by dynamically adjusting the exploration and exploitation rates.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9bbaf628-dccf-4650-b1c6-9bca4e0f9f3b", "metadata": {"aucs": [0.1709404397982207, 0.17578811482102485, 0.170257377687277, 0.16845369514743413, 0.22534207735815892, 0.1743435064021196, 0.1785507992358102, 0.16299934718787568, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.03919225067219667, 0.04128992625519967, 0.03732066520661048, 0.043269612707969474, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.03149227199542726, 0.030929276720888965, 0.0481463786277756, 0.02827376645091395, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.0416260837629705, 0.029763828138413717, 0.5065359510474018, 0.5279810102366755, 0.5173099785277878, 0.535830186743541, 0.5368223044695226, 0.5151644684178602, 0.5323764291933398, 0.5312347589254325, 0.5338735371524632, 0.06757738494551291, 0.07510940173832203, 0.10171882691615464, 0.05582014737524932, 0.06652701777076597, 0.05190122563388122, 0.09472457566024695, 0.05913962244392135, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.14948243104172831, 0.11153611931354757, 0.09600400207146487, 0.1248938498681409, 0.11690291817505838, 0.1368487698841222, 0.11361149709236218, 9.999999999998899e-05, 9.999999999998899e-05, 0.013506851361393402, 0.009725685707564158, 9.999999999998899e-05, 0.006244945923276846, 0.00486031723528646, 9.999999999998899e-05, 0.019872591751231683, 0.004726484655766083, 0.06957272857429797, 0.01758612168876028, 0.010310803522691647, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 0.027130645705424783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045286380082674826, 0.06954783018607069, 0.03585061177191606, 0.055770453722678415, 0.05295698494644707, 0.038293627047065626, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19903226317683353, 0.18379488285344925, 0.2055799784281095, 0.19038052549897155, 0.20758925182018184, 0.1978530039868921, 0.1935659506118591, 0.1900970839960452, 0.04680390455819994, 0.03853992154267849, 0.04540456731106057, 0.03996840984097694, 0.038650047922826114, 0.046779233833527556, 0.073263588849099, 0.04804948744535198, 0.05229792848072812, 0.13709410100555053, 0.12739426512320573, 0.12602203673178558, 0.14776079809378628, 0.14330845579678753, 0.1248104632522643, 0.14963138758589234, 0.1519486330221338, 0.12862528034911247, 0.16581136048861322, 0.16810150441392124, 0.1708884007386109, 0.16836359285932123, 0.1821496595795835, 0.1769644640004372, 0.16248324581573614, 0.17377774300845283, 0.158273386427229, 0.11815478683836778, 0.11280978194220803, 0.11109491287868445, 0.10978923820566577, 0.13610603218022022, 0.11699439310920645, 0.10496528955152573, 0.1237427242099084, 0.12481228589388882, 0.1429128435865492, 0.16233450221944246, 0.15579351452130452, 0.16148409945229336, 0.1438479867140029, 0.16413767868192175, 0.15025358868369154, 0.17355151355563359, 0.18656212704725317, 0.14195011305864957, 0.14818437901077142, 0.14528239446922975, 0.14187561716008934, 0.1444161948692757, 0.15282202985716775, 0.13811865540041568, 0.1418559449375154, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.1793213659605366, 0.18540799854728474, 0.17477843717153851, 0.14269139344159354, 0.16181896156974962, 0.19312594872947209, 0.15692009224327252, 0.15672808824074347, 0.1636308278050963, 0.16050779395916304, 0.15202311182854444, 0.1489437599082306, 0.18749022965320938, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1738918222132887, 0.1840951386782479, 0.17521172209778724, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17844778892709057, 0.18953751425041876, 0.20568880668582523, 0.058344077551123696, 0.05081117145569902, 0.06762586258623504, 0.0521277740406102, 0.05934830659822565, 0.0533550031798079, 0.07532529613519179, 0.05491659739916577, 0.05251337521338861]}, "mutation_prompt": null}
{"id": "9aba93a8-a8b1-4f67-89ae-46586efc8f09", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "HybridHarmonyPSO", "description": "Implementing a dynamic adaptation of hmcr and par parameters to accelerate convergence speed by dynamically adjusting the exploration and exploitation rates.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9bbaf628-dccf-4650-b1c6-9bca4e0f9f3b", "metadata": {"aucs": [0.1709404397982207, 0.17578811482102485, 0.170257377687277, 0.16845369514743413, 0.22534207735815892, 0.1743435064021196, 0.1785507992358102, 0.16299934718787568, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.03919225067219667, 0.04128992625519967, 0.03732066520661048, 0.043269612707969474, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.03149227199542726, 0.030929276720888965, 0.0481463786277756, 0.02827376645091395, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.0416260837629705, 0.029763828138413717, 0.5065359510474018, 0.5279810102366755, 0.5173099785277878, 0.535830186743541, 0.5368223044695226, 0.5151644684178602, 0.5323764291933398, 0.5312347589254325, 0.5338735371524632, 0.06757738494551291, 0.07510940173832203, 0.10171882691615464, 0.05582014737524932, 0.06652701777076597, 0.05190122563388122, 0.09472457566024695, 0.05913962244392135, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.14948243104172831, 0.11153611931354757, 0.09600400207146487, 0.1248938498681409, 0.11690291817505838, 0.1368487698841222, 0.11361149709236218, 9.999999999998899e-05, 9.999999999998899e-05, 0.013506851361393402, 0.009725685707564158, 9.999999999998899e-05, 0.006244945923276846, 0.00486031723528646, 9.999999999998899e-05, 0.019872591751231683, 0.004726484655766083, 0.06957272857429797, 0.01758612168876028, 0.010310803522691647, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 0.027130645705424783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045286380082674826, 0.06954783018607069, 0.03585061177191606, 0.055770453722678415, 0.05295698494644707, 0.038293627047065626, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19903226317683353, 0.18379488285344925, 0.2055799784281095, 0.19038052549897155, 0.20758925182018184, 0.1978530039868921, 0.1935659506118591, 0.1900970839960452, 0.04680390455819994, 0.03853992154267849, 0.04540456731106057, 0.03996840984097694, 0.038650047922826114, 0.046779233833527556, 0.073263588849099, 0.04804948744535198, 0.05229792848072812, 0.13709410100555053, 0.12739426512320573, 0.12602203673178558, 0.14776079809378628, 0.14330845579678753, 0.1248104632522643, 0.14963138758589234, 0.1519486330221338, 0.12862528034911247, 0.16581136048861322, 0.16810150441392124, 0.1708884007386109, 0.16836359285932123, 0.1821496595795835, 0.1769644640004372, 0.16248324581573614, 0.17377774300845283, 0.158273386427229, 0.11815478683836778, 0.11280978194220803, 0.11109491287868445, 0.10978923820566577, 0.13610603218022022, 0.11699439310920645, 0.10496528955152573, 0.1237427242099084, 0.12481228589388882, 0.1429128435865492, 0.16233450221944246, 0.15579351452130452, 0.16148409945229336, 0.1438479867140029, 0.16413767868192175, 0.15025358868369154, 0.17355151355563359, 0.18656212704725317, 0.14195011305864957, 0.14818437901077142, 0.14528239446922975, 0.14187561716008934, 0.1444161948692757, 0.15282202985716775, 0.13811865540041568, 0.1418559449375154, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.1793213659605366, 0.18540799854728474, 0.17477843717153851, 0.14269139344159354, 0.16181896156974962, 0.19312594872947209, 0.15692009224327252, 0.15672808824074347, 0.1636308278050963, 0.16050779395916304, 0.15202311182854444, 0.1489437599082306, 0.18749022965320938, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1738918222132887, 0.1840951386782479, 0.17521172209778724, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17844778892709057, 0.18953751425041876, 0.20568880668582523, 0.058344077551123696, 0.05081117145569902, 0.06762586258623504, 0.0521277740406102, 0.05934830659822565, 0.0533550031798079, 0.07532529613519179, 0.05491659739916577, 0.05251337521338861]}, "mutation_prompt": null}
{"id": "8893fbfc-a306-4bc6-a28f-f8414915c057", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass FastHybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "FastHybridHarmonyPSO", "description": "Implementing a dynamic adaptation of bandit-based parameter tuning to optimize the exploration and exploitation balance for faster convergence.", "configspace": "", "generation": 58, "fitness": 0.11014083121353758, "feedback": "The algorithm FastHybridHarmonyPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.11.", "error": "", "parent_id": "9bbaf628-dccf-4650-b1c6-9bca4e0f9f3b", "metadata": {"aucs": [0.1709404397982207, 0.17578811482102485, 0.170257377687277, 0.16845369514743413, 0.22534207735815892, 0.1743435064021196, 0.1785507992358102, 0.16299934718787568, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.03919225067219667, 0.04128992625519967, 0.03732066520661048, 0.043269612707969474, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.03149227199542726, 0.030929276720888965, 0.0481463786277756, 0.02827376645091395, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.0416260837629705, 0.029763828138413717, 0.5065359510474018, 0.5279810102366755, 0.5173099785277878, 0.535830186743541, 0.5368223044695226, 0.5151644684178602, 0.5323764291933398, 0.5312347589254325, 0.5338735371524632, 0.06757738494551291, 0.07510940173832203, 0.10171882691615464, 0.05582014737524932, 0.06652701777076597, 0.05190122563388122, 0.09472457566024695, 0.05913962244392135, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.14948243104172831, 0.11153611931354757, 0.09600400207146487, 0.1248938498681409, 0.11690291817505838, 0.1368487698841222, 0.11361149709236218, 9.999999999998899e-05, 9.999999999998899e-05, 0.013506851361393402, 0.009725685707564158, 9.999999999998899e-05, 0.006244945923276846, 0.00486031723528646, 9.999999999998899e-05, 0.019872591751231683, 0.004726484655766083, 0.06957272857429797, 0.01758612168876028, 0.010310803522691647, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 0.027130645705424783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045286380082674826, 0.06954783018607069, 0.03585061177191606, 0.055770453722678415, 0.05295698494644707, 0.038293627047065626, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19903226317683353, 0.18379488285344925, 0.2055799784281095, 0.19038052549897155, 0.20758925182018184, 0.1978530039868921, 0.1935659506118591, 0.1900970839960452, 0.04680390455819994, 0.03853992154267849, 0.04540456731106057, 0.03996840984097694, 0.038650047922826114, 0.046779233833527556, 0.073263588849099, 0.04804948744535198, 0.05229792848072812, 0.13709410100555053, 0.12739426512320573, 0.12602203673178558, 0.14776079809378628, 0.14330845579678753, 0.1248104632522643, 0.14963138758589234, 0.1519486330221338, 0.12862528034911247, 0.16581136048861322, 0.16810150441392124, 0.1708884007386109, 0.16836359285932123, 0.1821496595795835, 0.1769644640004372, 0.16248324581573614, 0.17377774300845283, 0.158273386427229, 0.11815478683836778, 0.11280978194220803, 0.11109491287868445, 0.10978923820566577, 0.13610603218022022, 0.11699439310920645, 0.10496528955152573, 0.1237427242099084, 0.12481228589388882, 0.1429128435865492, 0.16233450221944246, 0.15579351452130452, 0.16148409945229336, 0.1438479867140029, 0.16413767868192175, 0.15025358868369154, 0.17355151355563359, 0.18656212704725317, 0.14195011305864957, 0.14818437901077142, 0.14528239446922975, 0.14187561716008934, 0.1444161948692757, 0.15282202985716775, 0.13811865540041568, 0.1418559449375154, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.1793213659605366, 0.18540799854728474, 0.17477843717153851, 0.14269139344159354, 0.16181896156974962, 0.19312594872947209, 0.15692009224327252, 0.15672808824074347, 0.1636308278050963, 0.16050779395916304, 0.15202311182854444, 0.1489437599082306, 0.18749022965320938, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1738918222132887, 0.1840951386782479, 0.17521172209778724, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17844778892709057, 0.18953751425041876, 0.20568880668582523, 0.058344077551123696, 0.05081117145569902, 0.06762586258623504, 0.0521277740406102, 0.05934830659822565, 0.0533550031798079, 0.07532529613519179, 0.05491659739916577, 0.05251337521338861]}, "mutation_prompt": null}
{"id": "518237ad-e79c-4779-bab3-2c97e02ccd3b", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass HybridHarmonyPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.hmcr = 0.7\n        self.par = 0.4\n        self.bandwidth = 0.01\n        self.hm_size = int(0.5 * budget)\n        self.num_threads = 4  # Number of threads for parallel evaluation\n        self.pso_inertia = 0.5\n        self.pso_c1 = 1.5\n        self.pso_c2 = 1.5\n        self.pso_swarm_size = 10\n        self.pso_max_iter = 5\n\n    def evaluate_solution(self, func, solution):\n        return func(solution)\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array([func(solution) for solution in harmony_memory])\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(list(executor.map(lambda x: self.evaluate_solution(func, x), new_solutions)))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array([func(p) for p in pbest])\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "HybridHarmonyPSO", "description": "Implementing a dynamic adaptation of hmcr and par parameters to accelerate convergence speed by dynamically adjusting the exploration and exploitation rates.", "configspace": "", "generation": 35, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "9bbaf628-dccf-4650-b1c6-9bca4e0f9f3b", "metadata": {"aucs": [0.1709404397982207, 0.17578811482102485, 0.170257377687277, 0.16845369514743413, 0.22534207735815892, 0.1743435064021196, 0.1785507992358102, 0.16299934718787568, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.03919225067219667, 0.04128992625519967, 0.03732066520661048, 0.043269612707969474, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.03149227199542726, 0.030929276720888965, 0.0481463786277756, 0.02827376645091395, 0.04926774209271334, 0.05702674525995721, 0.03696417075239278, 0.0416260837629705, 0.029763828138413717, 0.5065359510474018, 0.5279810102366755, 0.5173099785277878, 0.535830186743541, 0.5368223044695226, 0.5151644684178602, 0.5323764291933398, 0.5312347589254325, 0.5338735371524632, 0.06757738494551291, 0.07510940173832203, 0.10171882691615464, 0.05582014737524932, 0.06652701777076597, 0.05190122563388122, 0.09472457566024695, 0.05913962244392135, 0.0928167823142052, 0.12553619411724048, 0.19308637766117165, 0.14948243104172831, 0.11153611931354757, 0.09600400207146487, 0.1248938498681409, 0.11690291817505838, 0.1368487698841222, 0.11361149709236218, 9.999999999998899e-05, 9.999999999998899e-05, 0.013506851361393402, 0.009725685707564158, 9.999999999998899e-05, 0.006244945923276846, 0.00486031723528646, 9.999999999998899e-05, 0.019872591751231683, 0.004726484655766083, 0.06957272857429797, 0.01758612168876028, 0.010310803522691647, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 0.027130645705424783, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045286380082674826, 0.06954783018607069, 0.03585061177191606, 0.055770453722678415, 0.05295698494644707, 0.038293627047065626, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19903226317683353, 0.18379488285344925, 0.2055799784281095, 0.19038052549897155, 0.20758925182018184, 0.1978530039868921, 0.1935659506118591, 0.1900970839960452, 0.04680390455819994, 0.03853992154267849, 0.04540456731106057, 0.03996840984097694, 0.038650047922826114, 0.046779233833527556, 0.073263588849099, 0.04804948744535198, 0.05229792848072812, 0.13709410100555053, 0.12739426512320573, 0.12602203673178558, 0.14776079809378628, 0.14330845579678753, 0.1248104632522643, 0.14963138758589234, 0.1519486330221338, 0.12862528034911247, 0.16581136048861322, 0.16810150441392124, 0.1708884007386109, 0.16836359285932123, 0.1821496595795835, 0.1769644640004372, 0.16248324581573614, 0.17377774300845283, 0.158273386427229, 0.11815478683836778, 0.11280978194220803, 0.11109491287868445, 0.10978923820566577, 0.13610603218022022, 0.11699439310920645, 0.10496528955152573, 0.1237427242099084, 0.12481228589388882, 0.1429128435865492, 0.16233450221944246, 0.15579351452130452, 0.16148409945229336, 0.1438479867140029, 0.16413767868192175, 0.15025358868369154, 0.17355151355563359, 0.18656212704725317, 0.14195011305864957, 0.14818437901077142, 0.14528239446922975, 0.14187561716008934, 0.1444161948692757, 0.15282202985716775, 0.13811865540041568, 0.1418559449375154, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.1793213659605366, 0.18540799854728474, 0.17477843717153851, 0.14269139344159354, 0.16181896156974962, 0.19312594872947209, 0.15692009224327252, 0.15672808824074347, 0.1636308278050963, 0.16050779395916304, 0.15202311182854444, 0.1489437599082306, 0.18749022965320938, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1738918222132887, 0.1840951386782479, 0.17521172209778724, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17844778892709057, 0.18953751425041876, 0.20568880668582523, 0.058344077551123696, 0.05081117145569902, 0.06762586258623504, 0.0521277740406102, 0.05934830659822565, 0.0533550031798079, 0.07532529613519179, 0.05491659739916577, 0.05251337521338861]}, "mutation_prompt": null}
{"id": "6312e537-914a-4f39-9083-be03a7ad68bf", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\nclass ImprovedHybridHarmonyPSO(HybridHarmonyPSO):\n    def evaluate_solutions_parallel(self, func, solutions):\n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            futures = [executor.submit(func, solution) for solution in solutions]\n            results = [future.result() for future in as_completed(futures)]\n        return results\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array(self.evaluate_solutions_parallel(func, harmony_memory))\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(self.evaluate_solutions_parallel(func, new_solutions))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array(self.evaluate_solutions_parallel(func, pbest))\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "ImprovedHybridHarmonyPSO", "description": "Implementing a parallel asynchronous evaluation strategy to speed up fitness evaluation and solution update process.", "configspace": "", "generation": 60, "fitness": 0.12384723924232847, "feedback": "The algorithm ImprovedHybridHarmonyPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.11.", "error": "", "parent_id": "9bbaf628-dccf-4650-b1c6-9bca4e0f9f3b", "metadata": {"aucs": [0.17106119617580662, 0.183164768591895, 0.197479246385302, 0.16845369514743413, 0.18818337038671906, 0.1743435064021196, 0.1785507992358102, 0.16281155072979714, 0.1900640255741839, 0.06599999999999995, 0.008199999999999985, 0.03810000000000002, 0.007399999999999962, 9.999999999998899e-05, 0.05740000000000001, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.04611047095548981, 0.046809513754464405, 0.04977074487583699, 0.1562798674125092, 0.0528437448134802, 0.09575461660818341, 0.058711088734964334, 0.025756673127183438, 0.07562830159195943, 0.0481463786277756, 0.04861513666111972, 0.04926774209271334, 0.05702674525995721, 0.052137356518779265, 0.03992308285267243, 0.03225126748607876, 0.48183854180125585, 0.5278745093405857, 0.5261593791440391, 0.556500796271775, 0.5726670685312326, 0.5069464340214569, 0.5803154798158203, 0.5300214696812768, 0.53386575924448, 0.06443028781665472, 0.07510940173832203, 0.10171882691615464, 0.053803800388950385, 0.10606928790512216, 0.05190122563388122, 0.10252066063771503, 0.08046864392575714, 0.0928167823142052, 0.13375175994902766, 0.25771507138995786, 0.1481850439168273, 0.15781678312503822, 0.1164135922493319, 0.13477630983343114, 0.14649742396249588, 0.19432038345520275, 0.13517209650225814, 9.999999999998899e-05, 0.06758189734965692, 0.003689195106263865, 0.04422137908095103, 0.08103101652691125, 0.0022454229096671163, 9.999999999998899e-05, 0.04249999999999998, 0.019872591751231683, 0.00458165826050172, 0.06957272857429797, 0.012758968564191675, 0.007159387613177359, 0.0434549217280622, 0.011860097762603106, 0.027645144410284983, 0.03960532873984468, 0.001276934196792201, 9.999999999998899e-05, 0.00770000000000004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1089, 9.999999999998899e-05, 0.015700000000000047, 0.08431122914033207, 0.06858859508378334, 0.04491109459619458, 0.06982319930116576, 0.03489049585261095, 0.06265830498961966, 0.05295698494644707, 0.03548550126745975, 0.06421743361722532, 0.02529999999999999, 9.999999999998899e-05, 0.00029999999999996696, 0.06669999999999998, 0.024499999999999966, 0.02400000000000002, 0.14529999999999998, 0.07310000000000005, 0.00039999999999995595, 9.999999999998899e-05, 9.999999999998899e-05, 0.007399999999999962, 0.032299999999999995, 0.048699999999999966, 9.999999999998899e-05, 0.03249999999999997, 0.006754747757416024, 0.032299999999999995, 0.22082032439354093, 0.19298032777251062, 0.19253305132024678, 0.2055799784281095, 0.20415139631429258, 0.23054183195205913, 0.2006523808210423, 0.29039544101253445, 0.20038910139557964, 0.06846678287190755, 0.07855684999585133, 0.1406480369258103, 0.03996840984097694, 0.04071283917873225, 0.06063776290823275, 0.073263588849099, 0.08868867521935331, 0.06743478383218948, 0.13819729600499175, 0.123984536869721, 0.13451158777775418, 0.14114924056111855, 0.16229191769130413, 0.17048253583379813, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.18238915336234562, 0.1709174786537795, 0.16833854391740677, 0.189057953399409, 0.1769644640004372, 0.16316150333705282, 0.17377774300845283, 0.15246898481322946, 0.10716386357745067, 0.1614151299400408, 0.11876343300790904, 0.10978923820566577, 0.13610603218022022, 0.11701239065941771, 0.1722971734787465, 0.1518550850524818, 0.1229185550255375, 0.16996571318955755, 0.23601626264373876, 0.14933789585266954, 0.16154286057415324, 0.23210716714019453, 0.17628730745050003, 0.15536184127756003, 0.17686874938039077, 0.18659688261942042, 0.14195011305864957, 0.14578023879947632, 0.14006577975982915, 0.14198304211372648, 0.14379127967294647, 0.15351998536504197, 0.13697870895265896, 0.14203070229532166, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.16060493753908556, 0.19437354069769097, 0.1411966535145892, 0.16149939526223867, 0.24369660765090406, 0.17165345144855548, 0.15672808824074347, 0.16372797834227915, 0.16761248675320972, 0.1520401669978272, 0.1508798013499696, 0.3034445194460117, 0.17887872157465678, 0.17366570869048104, 0.2028812417861957, 0.16944140470640723, 0.2237305618099873, 0.17685058076392857, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17967047337437525, 0.188688463014553, 0.2429699908236106, 0.0947762948743548, 0.07308116822850497, 0.07555298902537866, 0.05186305593955043, 0.062375095939128045, 0.14039733981369573, 0.12046684496579019, 0.05491659739916577, 0.05062431923767596]}, "mutation_prompt": null}
{"id": "73451cdb-2508-4545-ab99-01e678970ec1", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\nclass ImprovedHybridHarmonyPSO(HybridHarmonyPSO):\n    def evaluate_solutions_parallel(self, func, solutions):\n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            futures = [executor.submit(func, solution) for solution in solutions]\n            results = [future.result() for future in as_completed(futures)]\n        return results\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array(self.evaluate_solutions_parallel(func, harmony_memory))\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    bandwidth = max(0.1, self.bandwidth - 0.005)  # Dynamic adjustment of bandwidth\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-bandwidth, bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(self.evaluate_solutions_parallel(func, new_solutions))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array(self.evaluate_solutions_parallel(func, pbest))\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "ImprovedHybridHarmonyPSO", "description": "Implementing a dynamic update of the bandwidth parameter to control exploration-exploitation balance for faster convergence.", "configspace": "", "generation": 61, "fitness": 0.12019049266783341, "feedback": "The algorithm ImprovedHybridHarmonyPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.11.", "error": "", "parent_id": "6312e537-914a-4f39-9083-be03a7ad68bf", "metadata": {"aucs": [0.2050913261239884, 0.17611575151857373, 0.1813974450312379, 0.16845369514743413, 0.22559810571213945, 0.1749296168026, 0.22974100963670485, 0.16449152051058868, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 0.037900000000000045, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05173391518725856, 0.046372490884433515, 0.03618932539327069, 0.047886733978148355, 0.03780897838329378, 0.039490759067082215, 0.06004698657369134, 0.06702432684758475, 0.058711088734964334, 0.03275671146233694, 0.030929276720888965, 0.0481463786277756, 0.025965940872886173, 0.04926774209271334, 0.11912062455757311, 0.03696417075239278, 0.06245770127102335, 0.03133124457198233, 0.5031576793293899, 0.5413111550676748, 0.5838929263876949, 0.5327609285900834, 0.5339516734429075, 0.5073957117216595, 0.5416900654742052, 0.5320730050577558, 0.6045069160742904, 0.06443028781665472, 0.07510940173832203, 0.13527145606644486, 0.05900015908891587, 0.06761021607795559, 0.09695984081829634, 0.09472457566024695, 0.057034870011662187, 0.2182015754551404, 0.12553619411724048, 0.19332734327359746, 0.1834568259229714, 0.11033208483390988, 0.12037434307773043, 0.15340319095347277, 0.1161373594082461, 0.1368487698841222, 0.12161738155894475, 9.999999999998899e-05, 0.00019999999999997797, 0.003689195106263865, 0.011260944681148466, 0.09019999999999995, 9.999999999998899e-05, 9.999999999998899e-05, 0.05610000000000004, 0.019872591751231683, 0.0014894029093771577, 0.06957272857429797, 0.008516970491320719, 0.007159387613177359, 0.05251477233106017, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 0.03443756593158398, 9.999999999998899e-05, 0.030000000000000027, 0.007900000000000018, 9.999999999998899e-05, 0.022499999999999964, 9.999999999998899e-05, 0.08530000000000004, 0.03200000000000003, 9.999999999998899e-05, 0.05293794841224442, 0.09073498444851524, 0.06991091783382286, 0.07714149365924727, 0.08053329571131906, 0.055770453722678415, 0.07929759948413917, 0.04360666136700442, 0.06421743361722532, 0.01749999999999996, 0.024399999999999977, 9.999999999998899e-05, 0.017100000000000004, 0.023499999999999965, 9.999999999998899e-05, 0.03200000000000003, 9.999999999998899e-05, 9.999999999998899e-05, 0.025399999999999978, 0.014900000000000024, 0.02429999999999999, 9.999999999998899e-05, 0.04530000000000001, 0.02739999999999998, 9.999999999998899e-05, 0.006754747757416024, 0.0004692118682447788, 0.22082032439354093, 0.19298032777251062, 0.21835262749547169, 0.22576775873692356, 0.19041261349788596, 0.22750783089933457, 0.1978530039868921, 0.1942477308479965, 0.2504856177871353, 0.04680390455819994, 0.036156308771396306, 0.04591933476113175, 0.03996840984097694, 0.042706038954071435, 0.06227647236651701, 0.07354118533865273, 0.044286765660695004, 0.11246203908992991, 0.14278892244854546, 0.12097741977815568, 0.1295904955405105, 0.1432177322643451, 0.14118576849380837, 0.12688124051980398, 0.14963138758589234, 0.14861619065631115, 0.1349744115123811, 0.17898150647150124, 0.17726613380160283, 0.17710752258861562, 0.16838873489131545, 0.1821496595795835, 0.17762666007218064, 0.16362108493454763, 0.23780679542353333, 0.1535153890651373, 0.1062088030534345, 0.2474439731769258, 0.15057813370845996, 0.10978923820566577, 0.13610603218022022, 0.12834586377834944, 0.10498897131585239, 0.1237427242099084, 0.14152211259660685, 0.1487840873211952, 0.18531170116338513, 0.17131407969057, 0.1615274922807437, 0.152395087602481, 0.17326009965995093, 0.14870192970760543, 0.17355151355563359, 0.18659166928359538, 0.16465011305862698, 0.14578023879947632, 0.14829958492896256, 0.14195347698237604, 0.14379058119127952, 0.15282202985716775, 0.14040706096521882, 0.14202920801432062, 0.1825710572580297, 0.18983557502935178, 0.16679477618376493, 0.16670949782358568, 0.17311359655872072, 0.18065730655013246, 0.14399129858903903, 0.16139484817187333, 0.20439763808692812, 0.15692009224327252, 0.15672808824074347, 0.19919434972102135, 0.21615144601224157, 0.1520441799788348, 0.1522986698076556, 0.16045374486843178, 0.16855947523118198, 0.2245287261715413, 0.2028812417861957, 0.1684049600135309, 0.1842418909528165, 0.17605108825444238, 0.18683568409856555, 0.2135749380374129, 0.20359674833305286, 0.17594512205278, 0.188688463014553, 0.20568880668582523, 0.07769066904274535, 0.054445078794157276, 0.12226050247007425, 0.05723076364469981, 0.05935079835763013, 0.053643347067874325, 0.07532529613519179, 0.05491659739916577, 0.04674619266333635]}, "mutation_prompt": null}
{"id": "e3c21ed5-c8dd-4603-8927-0f7f71f2232c", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\nclass ImprovedHybridHarmonyPSO(HybridHarmonyPSO):\n    def evaluate_solutions_parallel(self, func, solutions):\n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            futures = [executor.submit(func, solution) for solution in solutions]\n            results = [future.result() for future in as_completed(futures)]\n        return results\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array(self.evaluate_solutions_parallel(func, harmony_memory))\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(self.evaluate_solutions_parallel(func, new_solutions))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array(self.evaluate_solutions_parallel(func, pbest))\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "ImprovedHybridHarmonyPSO", "description": "Implementing a parallel asynchronous evaluation strategy to speed up fitness evaluation and solution update process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6312e537-914a-4f39-9083-be03a7ad68bf", "metadata": {"aucs": [0.17106119617580662, 0.183164768591895, 0.197479246385302, 0.16845369514743413, 0.18818337038671906, 0.1743435064021196, 0.1785507992358102, 0.16281155072979714, 0.1900640255741839, 0.06599999999999995, 0.008199999999999985, 0.03810000000000002, 0.007399999999999962, 9.999999999998899e-05, 0.05740000000000001, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.04611047095548981, 0.046809513754464405, 0.04977074487583699, 0.1562798674125092, 0.0528437448134802, 0.09575461660818341, 0.058711088734964334, 0.025756673127183438, 0.07562830159195943, 0.0481463786277756, 0.04861513666111972, 0.04926774209271334, 0.05702674525995721, 0.052137356518779265, 0.03992308285267243, 0.03225126748607876, 0.48183854180125585, 0.5278745093405857, 0.5261593791440391, 0.556500796271775, 0.5726670685312326, 0.5069464340214569, 0.5803154798158203, 0.5300214696812768, 0.53386575924448, 0.06443028781665472, 0.07510940173832203, 0.10171882691615464, 0.053803800388950385, 0.10606928790512216, 0.05190122563388122, 0.10252066063771503, 0.08046864392575714, 0.0928167823142052, 0.13375175994902766, 0.25771507138995786, 0.1481850439168273, 0.15781678312503822, 0.1164135922493319, 0.13477630983343114, 0.14649742396249588, 0.19432038345520275, 0.13517209650225814, 9.999999999998899e-05, 0.06758189734965692, 0.003689195106263865, 0.04422137908095103, 0.08103101652691125, 0.0022454229096671163, 9.999999999998899e-05, 0.04249999999999998, 0.019872591751231683, 0.00458165826050172, 0.06957272857429797, 0.012758968564191675, 0.007159387613177359, 0.0434549217280622, 0.011860097762603106, 0.027645144410284983, 0.03960532873984468, 0.001276934196792201, 9.999999999998899e-05, 0.00770000000000004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1089, 9.999999999998899e-05, 0.015700000000000047, 0.08431122914033207, 0.06858859508378334, 0.04491109459619458, 0.06982319930116576, 0.03489049585261095, 0.06265830498961966, 0.05295698494644707, 0.03548550126745975, 0.06421743361722532, 0.02529999999999999, 9.999999999998899e-05, 0.00029999999999996696, 0.06669999999999998, 0.024499999999999966, 0.02400000000000002, 0.14529999999999998, 0.07310000000000005, 0.00039999999999995595, 9.999999999998899e-05, 9.999999999998899e-05, 0.007399999999999962, 0.032299999999999995, 0.048699999999999966, 9.999999999998899e-05, 0.03249999999999997, 0.006754747757416024, 0.032299999999999995, 0.22082032439354093, 0.19298032777251062, 0.19253305132024678, 0.2055799784281095, 0.20415139631429258, 0.23054183195205913, 0.2006523808210423, 0.29039544101253445, 0.20038910139557964, 0.06846678287190755, 0.07855684999585133, 0.1406480369258103, 0.03996840984097694, 0.04071283917873225, 0.06063776290823275, 0.073263588849099, 0.08868867521935331, 0.06743478383218948, 0.13819729600499175, 0.123984536869721, 0.13451158777775418, 0.14114924056111855, 0.16229191769130413, 0.17048253583379813, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.18238915336234562, 0.1709174786537795, 0.16833854391740677, 0.189057953399409, 0.1769644640004372, 0.16316150333705282, 0.17377774300845283, 0.15246898481322946, 0.10716386357745067, 0.1614151299400408, 0.11876343300790904, 0.10978923820566577, 0.13610603218022022, 0.11701239065941771, 0.1722971734787465, 0.1518550850524818, 0.1229185550255375, 0.16996571318955755, 0.23601626264373876, 0.14933789585266954, 0.16154286057415324, 0.23210716714019453, 0.17628730745050003, 0.15536184127756003, 0.17686874938039077, 0.18659688261942042, 0.14195011305864957, 0.14578023879947632, 0.14006577975982915, 0.14198304211372648, 0.14379127967294647, 0.15351998536504197, 0.13697870895265896, 0.14203070229532166, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.16060493753908556, 0.19437354069769097, 0.1411966535145892, 0.16149939526223867, 0.24369660765090406, 0.17165345144855548, 0.15672808824074347, 0.16372797834227915, 0.16761248675320972, 0.1520401669978272, 0.1508798013499696, 0.3034445194460117, 0.17887872157465678, 0.17366570869048104, 0.2028812417861957, 0.16944140470640723, 0.2237305618099873, 0.17685058076392857, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17967047337437525, 0.188688463014553, 0.2429699908236106, 0.0947762948743548, 0.07308116822850497, 0.07555298902537866, 0.05186305593955043, 0.062375095939128045, 0.14039733981369573, 0.12046684496579019, 0.05491659739916577, 0.05062431923767596]}, "mutation_prompt": null}
{"id": "8344fbd8-df6c-42f4-a4ca-8febb2b4704b", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\nclass ImprovedHybridHarmonyPSO(HybridHarmonyPSO):\n    def evaluate_solutions_parallel(self, func, solutions):\n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            futures = [executor.submit(func, solution) for solution in solutions]\n            results = [future.result() for future in as_completed(futures)]\n        return results\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array(self.evaluate_solutions_parallel(func, harmony_memory))\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(self.evaluate_solutions_parallel(func, new_solutions))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array(self.evaluate_solutions_parallel(func, pbest))\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "ImprovedHybridHarmonyPSO", "description": "Implementing a parallel asynchronous evaluation strategy to speed up fitness evaluation and solution update process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6312e537-914a-4f39-9083-be03a7ad68bf", "metadata": {"aucs": [0.17106119617580662, 0.183164768591895, 0.197479246385302, 0.16845369514743413, 0.18818337038671906, 0.1743435064021196, 0.1785507992358102, 0.16281155072979714, 0.1900640255741839, 0.06599999999999995, 0.008199999999999985, 0.03810000000000002, 0.007399999999999962, 9.999999999998899e-05, 0.05740000000000001, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.04611047095548981, 0.046809513754464405, 0.04977074487583699, 0.1562798674125092, 0.0528437448134802, 0.09575461660818341, 0.058711088734964334, 0.025756673127183438, 0.07562830159195943, 0.0481463786277756, 0.04861513666111972, 0.04926774209271334, 0.05702674525995721, 0.052137356518779265, 0.03992308285267243, 0.03225126748607876, 0.48183854180125585, 0.5278745093405857, 0.5261593791440391, 0.556500796271775, 0.5726670685312326, 0.5069464340214569, 0.5803154798158203, 0.5300214696812768, 0.53386575924448, 0.06443028781665472, 0.07510940173832203, 0.10171882691615464, 0.053803800388950385, 0.10606928790512216, 0.05190122563388122, 0.10252066063771503, 0.08046864392575714, 0.0928167823142052, 0.13375175994902766, 0.25771507138995786, 0.1481850439168273, 0.15781678312503822, 0.1164135922493319, 0.13477630983343114, 0.14649742396249588, 0.19432038345520275, 0.13517209650225814, 9.999999999998899e-05, 0.06758189734965692, 0.003689195106263865, 0.04422137908095103, 0.08103101652691125, 0.0022454229096671163, 9.999999999998899e-05, 0.04249999999999998, 0.019872591751231683, 0.00458165826050172, 0.06957272857429797, 0.012758968564191675, 0.007159387613177359, 0.0434549217280622, 0.011860097762603106, 0.027645144410284983, 0.03960532873984468, 0.001276934196792201, 9.999999999998899e-05, 0.00770000000000004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1089, 9.999999999998899e-05, 0.015700000000000047, 0.08431122914033207, 0.06858859508378334, 0.04491109459619458, 0.06982319930116576, 0.03489049585261095, 0.06265830498961966, 0.05295698494644707, 0.03548550126745975, 0.06421743361722532, 0.02529999999999999, 9.999999999998899e-05, 0.00029999999999996696, 0.06669999999999998, 0.024499999999999966, 0.02400000000000002, 0.14529999999999998, 0.07310000000000005, 0.00039999999999995595, 9.999999999998899e-05, 9.999999999998899e-05, 0.007399999999999962, 0.032299999999999995, 0.048699999999999966, 9.999999999998899e-05, 0.03249999999999997, 0.006754747757416024, 0.032299999999999995, 0.22082032439354093, 0.19298032777251062, 0.19253305132024678, 0.2055799784281095, 0.20415139631429258, 0.23054183195205913, 0.2006523808210423, 0.29039544101253445, 0.20038910139557964, 0.06846678287190755, 0.07855684999585133, 0.1406480369258103, 0.03996840984097694, 0.04071283917873225, 0.06063776290823275, 0.073263588849099, 0.08868867521935331, 0.06743478383218948, 0.13819729600499175, 0.123984536869721, 0.13451158777775418, 0.14114924056111855, 0.16229191769130413, 0.17048253583379813, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.18238915336234562, 0.1709174786537795, 0.16833854391740677, 0.189057953399409, 0.1769644640004372, 0.16316150333705282, 0.17377774300845283, 0.15246898481322946, 0.10716386357745067, 0.1614151299400408, 0.11876343300790904, 0.10978923820566577, 0.13610603218022022, 0.11701239065941771, 0.1722971734787465, 0.1518550850524818, 0.1229185550255375, 0.16996571318955755, 0.23601626264373876, 0.14933789585266954, 0.16154286057415324, 0.23210716714019453, 0.17628730745050003, 0.15536184127756003, 0.17686874938039077, 0.18659688261942042, 0.14195011305864957, 0.14578023879947632, 0.14006577975982915, 0.14198304211372648, 0.14379127967294647, 0.15351998536504197, 0.13697870895265896, 0.14203070229532166, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.16060493753908556, 0.19437354069769097, 0.1411966535145892, 0.16149939526223867, 0.24369660765090406, 0.17165345144855548, 0.15672808824074347, 0.16372797834227915, 0.16761248675320972, 0.1520401669978272, 0.1508798013499696, 0.3034445194460117, 0.17887872157465678, 0.17366570869048104, 0.2028812417861957, 0.16944140470640723, 0.2237305618099873, 0.17685058076392857, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17967047337437525, 0.188688463014553, 0.2429699908236106, 0.0947762948743548, 0.07308116822850497, 0.07555298902537866, 0.05186305593955043, 0.062375095939128045, 0.14039733981369573, 0.12046684496579019, 0.05491659739916577, 0.05062431923767596]}, "mutation_prompt": null}
{"id": "033c428b-f279-44c6-b10d-d65d37865b42", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\nclass ImprovedHybridHarmonyPSO(HybridHarmonyPSO):\n    def evaluate_solutions_parallel(self, func, solutions):\n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            futures = [executor.submit(func, solution) for solution in solutions]\n            results = [future.result() for future in as_completed(futures)]\n        return results\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array(self.evaluate_solutions_parallel(func, harmony_memory))\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(self.evaluate_solutions_parallel(func, new_solutions))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array(self.evaluate_solutions_parallel(func, pbest))\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "ImprovedHybridHarmonyPSO", "description": "Implementing a parallel asynchronous evaluation strategy to speed up fitness evaluation and solution update process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6312e537-914a-4f39-9083-be03a7ad68bf", "metadata": {"aucs": [0.17106119617580662, 0.183164768591895, 0.197479246385302, 0.16845369514743413, 0.18818337038671906, 0.1743435064021196, 0.1785507992358102, 0.16281155072979714, 0.1900640255741839, 0.06599999999999995, 0.008199999999999985, 0.03810000000000002, 0.007399999999999962, 9.999999999998899e-05, 0.05740000000000001, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.04611047095548981, 0.046809513754464405, 0.04977074487583699, 0.1562798674125092, 0.0528437448134802, 0.09575461660818341, 0.058711088734964334, 0.025756673127183438, 0.07562830159195943, 0.0481463786277756, 0.04861513666111972, 0.04926774209271334, 0.05702674525995721, 0.052137356518779265, 0.03992308285267243, 0.03225126748607876, 0.48183854180125585, 0.5278745093405857, 0.5261593791440391, 0.556500796271775, 0.5726670685312326, 0.5069464340214569, 0.5803154798158203, 0.5300214696812768, 0.53386575924448, 0.06443028781665472, 0.07510940173832203, 0.10171882691615464, 0.053803800388950385, 0.10606928790512216, 0.05190122563388122, 0.10252066063771503, 0.08046864392575714, 0.0928167823142052, 0.13375175994902766, 0.25771507138995786, 0.1481850439168273, 0.15781678312503822, 0.1164135922493319, 0.13477630983343114, 0.14649742396249588, 0.19432038345520275, 0.13517209650225814, 9.999999999998899e-05, 0.06758189734965692, 0.003689195106263865, 0.04422137908095103, 0.08103101652691125, 0.0022454229096671163, 9.999999999998899e-05, 0.04249999999999998, 0.019872591751231683, 0.00458165826050172, 0.06957272857429797, 0.012758968564191675, 0.007159387613177359, 0.0434549217280622, 0.011860097762603106, 0.027645144410284983, 0.03960532873984468, 0.001276934196792201, 9.999999999998899e-05, 0.00770000000000004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1089, 9.999999999998899e-05, 0.015700000000000047, 0.08431122914033207, 0.06858859508378334, 0.04491109459619458, 0.06982319930116576, 0.03489049585261095, 0.06265830498961966, 0.05295698494644707, 0.03548550126745975, 0.06421743361722532, 0.02529999999999999, 9.999999999998899e-05, 0.00029999999999996696, 0.06669999999999998, 0.024499999999999966, 0.02400000000000002, 0.14529999999999998, 0.07310000000000005, 0.00039999999999995595, 9.999999999998899e-05, 9.999999999998899e-05, 0.007399999999999962, 0.032299999999999995, 0.048699999999999966, 9.999999999998899e-05, 0.03249999999999997, 0.006754747757416024, 0.032299999999999995, 0.22082032439354093, 0.19298032777251062, 0.19253305132024678, 0.2055799784281095, 0.20415139631429258, 0.23054183195205913, 0.2006523808210423, 0.29039544101253445, 0.20038910139557964, 0.06846678287190755, 0.07855684999585133, 0.1406480369258103, 0.03996840984097694, 0.04071283917873225, 0.06063776290823275, 0.073263588849099, 0.08868867521935331, 0.06743478383218948, 0.13819729600499175, 0.123984536869721, 0.13451158777775418, 0.14114924056111855, 0.16229191769130413, 0.17048253583379813, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.18238915336234562, 0.1709174786537795, 0.16833854391740677, 0.189057953399409, 0.1769644640004372, 0.16316150333705282, 0.17377774300845283, 0.15246898481322946, 0.10716386357745067, 0.1614151299400408, 0.11876343300790904, 0.10978923820566577, 0.13610603218022022, 0.11701239065941771, 0.1722971734787465, 0.1518550850524818, 0.1229185550255375, 0.16996571318955755, 0.23601626264373876, 0.14933789585266954, 0.16154286057415324, 0.23210716714019453, 0.17628730745050003, 0.15536184127756003, 0.17686874938039077, 0.18659688261942042, 0.14195011305864957, 0.14578023879947632, 0.14006577975982915, 0.14198304211372648, 0.14379127967294647, 0.15351998536504197, 0.13697870895265896, 0.14203070229532166, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.16060493753908556, 0.19437354069769097, 0.1411966535145892, 0.16149939526223867, 0.24369660765090406, 0.17165345144855548, 0.15672808824074347, 0.16372797834227915, 0.16761248675320972, 0.1520401669978272, 0.1508798013499696, 0.3034445194460117, 0.17887872157465678, 0.17366570869048104, 0.2028812417861957, 0.16944140470640723, 0.2237305618099873, 0.17685058076392857, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17967047337437525, 0.188688463014553, 0.2429699908236106, 0.0947762948743548, 0.07308116822850497, 0.07555298902537866, 0.05186305593955043, 0.062375095939128045, 0.14039733981369573, 0.12046684496579019, 0.05491659739916577, 0.05062431923767596]}, "mutation_prompt": null}
{"id": "b13b857f-a494-4c6b-abf6-131d06a4b690", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\nclass ImprovedHybridHarmonyPSO(HybridHarmonyPSO):\n    def evaluate_solutions_parallel(self, func, solutions):\n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            futures = [executor.submit(func, solution) for solution in solutions]\n            results = [future.result() for future in as_completed(futures)]\n        return results\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array(self.evaluate_solutions_parallel(func, harmony_memory))\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(self.evaluate_solutions_parallel(func, new_solutions))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array(self.evaluate_solutions_parallel(func, pbest))\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "ImprovedHybridHarmonyPSO", "description": "Implementing a parallel asynchronous evaluation strategy to speed up fitness evaluation and solution update process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6312e537-914a-4f39-9083-be03a7ad68bf", "metadata": {"aucs": [0.17106119617580662, 0.183164768591895, 0.197479246385302, 0.16845369514743413, 0.18818337038671906, 0.1743435064021196, 0.1785507992358102, 0.16281155072979714, 0.1900640255741839, 0.06599999999999995, 0.008199999999999985, 0.03810000000000002, 0.007399999999999962, 9.999999999998899e-05, 0.05740000000000001, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.04611047095548981, 0.046809513754464405, 0.04977074487583699, 0.1562798674125092, 0.0528437448134802, 0.09575461660818341, 0.058711088734964334, 0.025756673127183438, 0.07562830159195943, 0.0481463786277756, 0.04861513666111972, 0.04926774209271334, 0.05702674525995721, 0.052137356518779265, 0.03992308285267243, 0.03225126748607876, 0.48183854180125585, 0.5278745093405857, 0.5261593791440391, 0.556500796271775, 0.5726670685312326, 0.5069464340214569, 0.5803154798158203, 0.5300214696812768, 0.53386575924448, 0.06443028781665472, 0.07510940173832203, 0.10171882691615464, 0.053803800388950385, 0.10606928790512216, 0.05190122563388122, 0.10252066063771503, 0.08046864392575714, 0.0928167823142052, 0.13375175994902766, 0.25771507138995786, 0.1481850439168273, 0.15781678312503822, 0.1164135922493319, 0.13477630983343114, 0.14649742396249588, 0.19432038345520275, 0.13517209650225814, 9.999999999998899e-05, 0.06758189734965692, 0.003689195106263865, 0.04422137908095103, 0.08103101652691125, 0.0022454229096671163, 9.999999999998899e-05, 0.04249999999999998, 0.019872591751231683, 0.00458165826050172, 0.06957272857429797, 0.012758968564191675, 0.007159387613177359, 0.0434549217280622, 0.011860097762603106, 0.027645144410284983, 0.03960532873984468, 0.001276934196792201, 9.999999999998899e-05, 0.00770000000000004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1089, 9.999999999998899e-05, 0.015700000000000047, 0.08431122914033207, 0.06858859508378334, 0.04491109459619458, 0.06982319930116576, 0.03489049585261095, 0.06265830498961966, 0.05295698494644707, 0.03548550126745975, 0.06421743361722532, 0.02529999999999999, 9.999999999998899e-05, 0.00029999999999996696, 0.06669999999999998, 0.024499999999999966, 0.02400000000000002, 0.14529999999999998, 0.07310000000000005, 0.00039999999999995595, 9.999999999998899e-05, 9.999999999998899e-05, 0.007399999999999962, 0.032299999999999995, 0.048699999999999966, 9.999999999998899e-05, 0.03249999999999997, 0.006754747757416024, 0.032299999999999995, 0.22082032439354093, 0.19298032777251062, 0.19253305132024678, 0.2055799784281095, 0.20415139631429258, 0.23054183195205913, 0.2006523808210423, 0.29039544101253445, 0.20038910139557964, 0.06846678287190755, 0.07855684999585133, 0.1406480369258103, 0.03996840984097694, 0.04071283917873225, 0.06063776290823275, 0.073263588849099, 0.08868867521935331, 0.06743478383218948, 0.13819729600499175, 0.123984536869721, 0.13451158777775418, 0.14114924056111855, 0.16229191769130413, 0.17048253583379813, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.18238915336234562, 0.1709174786537795, 0.16833854391740677, 0.189057953399409, 0.1769644640004372, 0.16316150333705282, 0.17377774300845283, 0.15246898481322946, 0.10716386357745067, 0.1614151299400408, 0.11876343300790904, 0.10978923820566577, 0.13610603218022022, 0.11701239065941771, 0.1722971734787465, 0.1518550850524818, 0.1229185550255375, 0.16996571318955755, 0.23601626264373876, 0.14933789585266954, 0.16154286057415324, 0.23210716714019453, 0.17628730745050003, 0.15536184127756003, 0.17686874938039077, 0.18659688261942042, 0.14195011305864957, 0.14578023879947632, 0.14006577975982915, 0.14198304211372648, 0.14379127967294647, 0.15351998536504197, 0.13697870895265896, 0.14203070229532166, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.16060493753908556, 0.19437354069769097, 0.1411966535145892, 0.16149939526223867, 0.24369660765090406, 0.17165345144855548, 0.15672808824074347, 0.16372797834227915, 0.16761248675320972, 0.1520401669978272, 0.1508798013499696, 0.3034445194460117, 0.17887872157465678, 0.17366570869048104, 0.2028812417861957, 0.16944140470640723, 0.2237305618099873, 0.17685058076392857, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17967047337437525, 0.188688463014553, 0.2429699908236106, 0.0947762948743548, 0.07308116822850497, 0.07555298902537866, 0.05186305593955043, 0.062375095939128045, 0.14039733981369573, 0.12046684496579019, 0.05491659739916577, 0.05062431923767596]}, "mutation_prompt": null}
{"id": "ee3ed4ed-f085-4ec6-ab09-153d8e5a6323", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\nclass ImprovedHybridHarmonyPSO(HybridHarmonyPSO):\n    def evaluate_solutions_parallel(self, func, solutions):\n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            futures = [executor.submit(func, solution) for solution in solutions]\n            results = [future.result() for future in as_completed(futures)]\n        return results\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array(self.evaluate_solutions_parallel(func, harmony_memory))\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(self.evaluate_solutions_parallel(func, new_solutions))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array(self.evaluate_solutions_parallel(func, pbest))\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "ImprovedHybridHarmonyPSO", "description": "Implementing a parallel asynchronous evaluation strategy to speed up fitness evaluation and solution update process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6312e537-914a-4f39-9083-be03a7ad68bf", "metadata": {"aucs": [0.17106119617580662, 0.183164768591895, 0.197479246385302, 0.16845369514743413, 0.18818337038671906, 0.1743435064021196, 0.1785507992358102, 0.16281155072979714, 0.1900640255741839, 0.06599999999999995, 0.008199999999999985, 0.03810000000000002, 0.007399999999999962, 9.999999999998899e-05, 0.05740000000000001, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.04611047095548981, 0.046809513754464405, 0.04977074487583699, 0.1562798674125092, 0.0528437448134802, 0.09575461660818341, 0.058711088734964334, 0.025756673127183438, 0.07562830159195943, 0.0481463786277756, 0.04861513666111972, 0.04926774209271334, 0.05702674525995721, 0.052137356518779265, 0.03992308285267243, 0.03225126748607876, 0.48183854180125585, 0.5278745093405857, 0.5261593791440391, 0.556500796271775, 0.5726670685312326, 0.5069464340214569, 0.5803154798158203, 0.5300214696812768, 0.53386575924448, 0.06443028781665472, 0.07510940173832203, 0.10171882691615464, 0.053803800388950385, 0.10606928790512216, 0.05190122563388122, 0.10252066063771503, 0.08046864392575714, 0.0928167823142052, 0.13375175994902766, 0.25771507138995786, 0.1481850439168273, 0.15781678312503822, 0.1164135922493319, 0.13477630983343114, 0.14649742396249588, 0.19432038345520275, 0.13517209650225814, 9.999999999998899e-05, 0.06758189734965692, 0.003689195106263865, 0.04422137908095103, 0.08103101652691125, 0.0022454229096671163, 9.999999999998899e-05, 0.04249999999999998, 0.019872591751231683, 0.00458165826050172, 0.06957272857429797, 0.012758968564191675, 0.007159387613177359, 0.0434549217280622, 0.011860097762603106, 0.027645144410284983, 0.03960532873984468, 0.001276934196792201, 9.999999999998899e-05, 0.00770000000000004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1089, 9.999999999998899e-05, 0.015700000000000047, 0.08431122914033207, 0.06858859508378334, 0.04491109459619458, 0.06982319930116576, 0.03489049585261095, 0.06265830498961966, 0.05295698494644707, 0.03548550126745975, 0.06421743361722532, 0.02529999999999999, 9.999999999998899e-05, 0.00029999999999996696, 0.06669999999999998, 0.024499999999999966, 0.02400000000000002, 0.14529999999999998, 0.07310000000000005, 0.00039999999999995595, 9.999999999998899e-05, 9.999999999998899e-05, 0.007399999999999962, 0.032299999999999995, 0.048699999999999966, 9.999999999998899e-05, 0.03249999999999997, 0.006754747757416024, 0.032299999999999995, 0.22082032439354093, 0.19298032777251062, 0.19253305132024678, 0.2055799784281095, 0.20415139631429258, 0.23054183195205913, 0.2006523808210423, 0.29039544101253445, 0.20038910139557964, 0.06846678287190755, 0.07855684999585133, 0.1406480369258103, 0.03996840984097694, 0.04071283917873225, 0.06063776290823275, 0.073263588849099, 0.08868867521935331, 0.06743478383218948, 0.13819729600499175, 0.123984536869721, 0.13451158777775418, 0.14114924056111855, 0.16229191769130413, 0.17048253583379813, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.18238915336234562, 0.1709174786537795, 0.16833854391740677, 0.189057953399409, 0.1769644640004372, 0.16316150333705282, 0.17377774300845283, 0.15246898481322946, 0.10716386357745067, 0.1614151299400408, 0.11876343300790904, 0.10978923820566577, 0.13610603218022022, 0.11701239065941771, 0.1722971734787465, 0.1518550850524818, 0.1229185550255375, 0.16996571318955755, 0.23601626264373876, 0.14933789585266954, 0.16154286057415324, 0.23210716714019453, 0.17628730745050003, 0.15536184127756003, 0.17686874938039077, 0.18659688261942042, 0.14195011305864957, 0.14578023879947632, 0.14006577975982915, 0.14198304211372648, 0.14379127967294647, 0.15351998536504197, 0.13697870895265896, 0.14203070229532166, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.16060493753908556, 0.19437354069769097, 0.1411966535145892, 0.16149939526223867, 0.24369660765090406, 0.17165345144855548, 0.15672808824074347, 0.16372797834227915, 0.16761248675320972, 0.1520401669978272, 0.1508798013499696, 0.3034445194460117, 0.17887872157465678, 0.17366570869048104, 0.2028812417861957, 0.16944140470640723, 0.2237305618099873, 0.17685058076392857, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17967047337437525, 0.188688463014553, 0.2429699908236106, 0.0947762948743548, 0.07308116822850497, 0.07555298902537866, 0.05186305593955043, 0.062375095939128045, 0.14039733981369573, 0.12046684496579019, 0.05491659739916577, 0.05062431923767596]}, "mutation_prompt": null}
{"id": "0e859f20-03a2-46d8-b475-835e185e1937", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\nclass ImprovedHybridHarmonyPSO(HybridHarmonyPSO):\n    def evaluate_solutions_parallel(self, func, solutions):\n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            futures = [executor.submit(func, solution) for solution in solutions]\n            results = [future.result() for future in as_completed(futures)]\n        return results\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array(self.evaluate_solutions_parallel(func, harmony_memory))\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(self.evaluate_solutions_parallel(func, new_solutions))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array(self.evaluate_solutions_parallel(func, pbest))\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "ImprovedHybridHarmonyPSO", "description": "Implementing a parallel asynchronous evaluation strategy to speed up fitness evaluation and solution update process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6312e537-914a-4f39-9083-be03a7ad68bf", "metadata": {"aucs": [0.17106119617580662, 0.183164768591895, 0.197479246385302, 0.16845369514743413, 0.18818337038671906, 0.1743435064021196, 0.1785507992358102, 0.16281155072979714, 0.1900640255741839, 0.06599999999999995, 0.008199999999999985, 0.03810000000000002, 0.007399999999999962, 9.999999999998899e-05, 0.05740000000000001, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.04611047095548981, 0.046809513754464405, 0.04977074487583699, 0.1562798674125092, 0.0528437448134802, 0.09575461660818341, 0.058711088734964334, 0.025756673127183438, 0.07562830159195943, 0.0481463786277756, 0.04861513666111972, 0.04926774209271334, 0.05702674525995721, 0.052137356518779265, 0.03992308285267243, 0.03225126748607876, 0.48183854180125585, 0.5278745093405857, 0.5261593791440391, 0.556500796271775, 0.5726670685312326, 0.5069464340214569, 0.5803154798158203, 0.5300214696812768, 0.53386575924448, 0.06443028781665472, 0.07510940173832203, 0.10171882691615464, 0.053803800388950385, 0.10606928790512216, 0.05190122563388122, 0.10252066063771503, 0.08046864392575714, 0.0928167823142052, 0.13375175994902766, 0.25771507138995786, 0.1481850439168273, 0.15781678312503822, 0.1164135922493319, 0.13477630983343114, 0.14649742396249588, 0.19432038345520275, 0.13517209650225814, 9.999999999998899e-05, 0.06758189734965692, 0.003689195106263865, 0.04422137908095103, 0.08103101652691125, 0.0022454229096671163, 9.999999999998899e-05, 0.04249999999999998, 0.019872591751231683, 0.00458165826050172, 0.06957272857429797, 0.012758968564191675, 0.007159387613177359, 0.0434549217280622, 0.011860097762603106, 0.027645144410284983, 0.03960532873984468, 0.001276934196792201, 9.999999999998899e-05, 0.00770000000000004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1089, 9.999999999998899e-05, 0.015700000000000047, 0.08431122914033207, 0.06858859508378334, 0.04491109459619458, 0.06982319930116576, 0.03489049585261095, 0.06265830498961966, 0.05295698494644707, 0.03548550126745975, 0.06421743361722532, 0.02529999999999999, 9.999999999998899e-05, 0.00029999999999996696, 0.06669999999999998, 0.024499999999999966, 0.02400000000000002, 0.14529999999999998, 0.07310000000000005, 0.00039999999999995595, 9.999999999998899e-05, 9.999999999998899e-05, 0.007399999999999962, 0.032299999999999995, 0.048699999999999966, 9.999999999998899e-05, 0.03249999999999997, 0.006754747757416024, 0.032299999999999995, 0.22082032439354093, 0.19298032777251062, 0.19253305132024678, 0.2055799784281095, 0.20415139631429258, 0.23054183195205913, 0.2006523808210423, 0.29039544101253445, 0.20038910139557964, 0.06846678287190755, 0.07855684999585133, 0.1406480369258103, 0.03996840984097694, 0.04071283917873225, 0.06063776290823275, 0.073263588849099, 0.08868867521935331, 0.06743478383218948, 0.13819729600499175, 0.123984536869721, 0.13451158777775418, 0.14114924056111855, 0.16229191769130413, 0.17048253583379813, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.18238915336234562, 0.1709174786537795, 0.16833854391740677, 0.189057953399409, 0.1769644640004372, 0.16316150333705282, 0.17377774300845283, 0.15246898481322946, 0.10716386357745067, 0.1614151299400408, 0.11876343300790904, 0.10978923820566577, 0.13610603218022022, 0.11701239065941771, 0.1722971734787465, 0.1518550850524818, 0.1229185550255375, 0.16996571318955755, 0.23601626264373876, 0.14933789585266954, 0.16154286057415324, 0.23210716714019453, 0.17628730745050003, 0.15536184127756003, 0.17686874938039077, 0.18659688261942042, 0.14195011305864957, 0.14578023879947632, 0.14006577975982915, 0.14198304211372648, 0.14379127967294647, 0.15351998536504197, 0.13697870895265896, 0.14203070229532166, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.16060493753908556, 0.19437354069769097, 0.1411966535145892, 0.16149939526223867, 0.24369660765090406, 0.17165345144855548, 0.15672808824074347, 0.16372797834227915, 0.16761248675320972, 0.1520401669978272, 0.1508798013499696, 0.3034445194460117, 0.17887872157465678, 0.17366570869048104, 0.2028812417861957, 0.16944140470640723, 0.2237305618099873, 0.17685058076392857, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17967047337437525, 0.188688463014553, 0.2429699908236106, 0.0947762948743548, 0.07308116822850497, 0.07555298902537866, 0.05186305593955043, 0.062375095939128045, 0.14039733981369573, 0.12046684496579019, 0.05491659739916577, 0.05062431923767596]}, "mutation_prompt": null}
{"id": "a635cd0c-6be9-4501-b7cb-41b40bdaaeb1", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\nclass ImprovedHybridHarmonyPSO(HybridHarmonyPSO):\n    def evaluate_solutions_parallel(self, func, solutions):\n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            futures = [executor.submit(func, solution) for solution in solutions]\n            results = [future.result() for future in as_completed(futures)]\n        return results\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array(self.evaluate_solutions_parallel(func, harmony_memory))\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(self.evaluate_solutions_parallel(func, new_solutions))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array(self.evaluate_solutions_parallel(func, pbest))\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "ImprovedHybridHarmonyPSO", "description": "Implementing a parallel asynchronous evaluation strategy to speed up fitness evaluation and solution update process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6312e537-914a-4f39-9083-be03a7ad68bf", "metadata": {"aucs": [0.17106119617580662, 0.183164768591895, 0.197479246385302, 0.16845369514743413, 0.18818337038671906, 0.1743435064021196, 0.1785507992358102, 0.16281155072979714, 0.1900640255741839, 0.06599999999999995, 0.008199999999999985, 0.03810000000000002, 0.007399999999999962, 9.999999999998899e-05, 0.05740000000000001, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.04611047095548981, 0.046809513754464405, 0.04977074487583699, 0.1562798674125092, 0.0528437448134802, 0.09575461660818341, 0.058711088734964334, 0.025756673127183438, 0.07562830159195943, 0.0481463786277756, 0.04861513666111972, 0.04926774209271334, 0.05702674525995721, 0.052137356518779265, 0.03992308285267243, 0.03225126748607876, 0.48183854180125585, 0.5278745093405857, 0.5261593791440391, 0.556500796271775, 0.5726670685312326, 0.5069464340214569, 0.5803154798158203, 0.5300214696812768, 0.53386575924448, 0.06443028781665472, 0.07510940173832203, 0.10171882691615464, 0.053803800388950385, 0.10606928790512216, 0.05190122563388122, 0.10252066063771503, 0.08046864392575714, 0.0928167823142052, 0.13375175994902766, 0.25771507138995786, 0.1481850439168273, 0.15781678312503822, 0.1164135922493319, 0.13477630983343114, 0.14649742396249588, 0.19432038345520275, 0.13517209650225814, 9.999999999998899e-05, 0.06758189734965692, 0.003689195106263865, 0.04422137908095103, 0.08103101652691125, 0.0022454229096671163, 9.999999999998899e-05, 0.04249999999999998, 0.019872591751231683, 0.00458165826050172, 0.06957272857429797, 0.012758968564191675, 0.007159387613177359, 0.0434549217280622, 0.011860097762603106, 0.027645144410284983, 0.03960532873984468, 0.001276934196792201, 9.999999999998899e-05, 0.00770000000000004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1089, 9.999999999998899e-05, 0.015700000000000047, 0.08431122914033207, 0.06858859508378334, 0.04491109459619458, 0.06982319930116576, 0.03489049585261095, 0.06265830498961966, 0.05295698494644707, 0.03548550126745975, 0.06421743361722532, 0.02529999999999999, 9.999999999998899e-05, 0.00029999999999996696, 0.06669999999999998, 0.024499999999999966, 0.02400000000000002, 0.14529999999999998, 0.07310000000000005, 0.00039999999999995595, 9.999999999998899e-05, 9.999999999998899e-05, 0.007399999999999962, 0.032299999999999995, 0.048699999999999966, 9.999999999998899e-05, 0.03249999999999997, 0.006754747757416024, 0.032299999999999995, 0.22082032439354093, 0.19298032777251062, 0.19253305132024678, 0.2055799784281095, 0.20415139631429258, 0.23054183195205913, 0.2006523808210423, 0.29039544101253445, 0.20038910139557964, 0.06846678287190755, 0.07855684999585133, 0.1406480369258103, 0.03996840984097694, 0.04071283917873225, 0.06063776290823275, 0.073263588849099, 0.08868867521935331, 0.06743478383218948, 0.13819729600499175, 0.123984536869721, 0.13451158777775418, 0.14114924056111855, 0.16229191769130413, 0.17048253583379813, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.18238915336234562, 0.1709174786537795, 0.16833854391740677, 0.189057953399409, 0.1769644640004372, 0.16316150333705282, 0.17377774300845283, 0.15246898481322946, 0.10716386357745067, 0.1614151299400408, 0.11876343300790904, 0.10978923820566577, 0.13610603218022022, 0.11701239065941771, 0.1722971734787465, 0.1518550850524818, 0.1229185550255375, 0.16996571318955755, 0.23601626264373876, 0.14933789585266954, 0.16154286057415324, 0.23210716714019453, 0.17628730745050003, 0.15536184127756003, 0.17686874938039077, 0.18659688261942042, 0.14195011305864957, 0.14578023879947632, 0.14006577975982915, 0.14198304211372648, 0.14379127967294647, 0.15351998536504197, 0.13697870895265896, 0.14203070229532166, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.16060493753908556, 0.19437354069769097, 0.1411966535145892, 0.16149939526223867, 0.24369660765090406, 0.17165345144855548, 0.15672808824074347, 0.16372797834227915, 0.16761248675320972, 0.1520401669978272, 0.1508798013499696, 0.3034445194460117, 0.17887872157465678, 0.17366570869048104, 0.2028812417861957, 0.16944140470640723, 0.2237305618099873, 0.17685058076392857, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17967047337437525, 0.188688463014553, 0.2429699908236106, 0.0947762948743548, 0.07308116822850497, 0.07555298902537866, 0.05186305593955043, 0.062375095939128045, 0.14039733981369573, 0.12046684496579019, 0.05491659739916577, 0.05062431923767596]}, "mutation_prompt": null}
{"id": "f8c8ec2e-27ca-4e46-91aa-2cac996c3f01", "solution": "def dynamic_population_size_adjustment(pop_size, iteration):\n    return int(pop_size * (1 - np.exp(-iteration / 100)))\n\nclass ImprovedHybridHarmonyPSO(HybridHarmonyPSO):\n    def __call__(self, func):\n        def initialize_harmony_memory(pop_size):\n            return np.random.uniform(self.lower_bound, self.upper_bound, (pop_size, self.dim))\n\n        pop_size = self.hm_size\n        harmony_memory = initialize_harmony_memory(pop_size)\n        fitness = np.array(self.evaluate_solutions_parallel(func, harmony_memory))\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - pop_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(pop_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(self.evaluate_solutions_parallel(func, new_solutions))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (pop_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array(self.evaluate_solutions_parallel(func, pbest))\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(pop_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n                pop_size = dynamic_population_size_adjustment(pop_size, _)\n                harmony_memory = np.concatenate((harmony_memory, initialize_harmony_memory(pop_size)), axis=0)\n                fitness = np.concatenate((fitness, np.array(self.evaluate_solutions_parallel(func, initialize_harmony_memory(pop_size)))), axis=0)\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "ImprovedHybridHarmonyPSO", "description": "Implementing a dynamic population size adjustment strategy to adapt to the optimization problem and speed up convergence.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'ImprovedHybridHarmonyPSO' object has no attribute 'evaluate_solutions_parallel'\").", "error": "AttributeError(\"'ImprovedHybridHarmonyPSO' object has no attribute 'evaluate_solutions_parallel'\")", "parent_id": "6312e537-914a-4f39-9083-be03a7ad68bf", "metadata": {}, "mutation_prompt": null}
{"id": "d540db91-debd-4bdc-8a96-afacbed20177", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\nclass ImprovedHybridHarmonyPSO(HybridHarmonyPSO):\n    def evaluate_solutions_parallel(self, func, solutions):\n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            futures = [executor.submit(func, solution) for solution in solutions]\n            results = [future.result() for future in as_completed(futures)]\n        return results\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array(self.evaluate_solutions_parallel(func, harmony_memory))\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(self.evaluate_solutions_parallel(func, new_solutions))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array(self.evaluate_solutions_parallel(func, pbest))\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "ImprovedHybridHarmonyPSO", "description": "Implementing a parallel asynchronous evaluation strategy to speed up fitness evaluation and solution update process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6312e537-914a-4f39-9083-be03a7ad68bf", "metadata": {"aucs": [0.17106119617580662, 0.183164768591895, 0.197479246385302, 0.16845369514743413, 0.18818337038671906, 0.1743435064021196, 0.1785507992358102, 0.16281155072979714, 0.1900640255741839, 0.06599999999999995, 0.008199999999999985, 0.03810000000000002, 0.007399999999999962, 9.999999999998899e-05, 0.05740000000000001, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.04611047095548981, 0.046809513754464405, 0.04977074487583699, 0.1562798674125092, 0.0528437448134802, 0.09575461660818341, 0.058711088734964334, 0.025756673127183438, 0.07562830159195943, 0.0481463786277756, 0.04861513666111972, 0.04926774209271334, 0.05702674525995721, 0.052137356518779265, 0.03992308285267243, 0.03225126748607876, 0.48183854180125585, 0.5278745093405857, 0.5261593791440391, 0.556500796271775, 0.5726670685312326, 0.5069464340214569, 0.5803154798158203, 0.5300214696812768, 0.53386575924448, 0.06443028781665472, 0.07510940173832203, 0.10171882691615464, 0.053803800388950385, 0.10606928790512216, 0.05190122563388122, 0.10252066063771503, 0.08046864392575714, 0.0928167823142052, 0.13375175994902766, 0.25771507138995786, 0.1481850439168273, 0.15781678312503822, 0.1164135922493319, 0.13477630983343114, 0.14649742396249588, 0.19432038345520275, 0.13517209650225814, 9.999999999998899e-05, 0.06758189734965692, 0.003689195106263865, 0.04422137908095103, 0.08103101652691125, 0.0022454229096671163, 9.999999999998899e-05, 0.04249999999999998, 0.019872591751231683, 0.00458165826050172, 0.06957272857429797, 0.012758968564191675, 0.007159387613177359, 0.0434549217280622, 0.011860097762603106, 0.027645144410284983, 0.03960532873984468, 0.001276934196792201, 9.999999999998899e-05, 0.00770000000000004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1089, 9.999999999998899e-05, 0.015700000000000047, 0.08431122914033207, 0.06858859508378334, 0.04491109459619458, 0.06982319930116576, 0.03489049585261095, 0.06265830498961966, 0.05295698494644707, 0.03548550126745975, 0.06421743361722532, 0.02529999999999999, 9.999999999998899e-05, 0.00029999999999996696, 0.06669999999999998, 0.024499999999999966, 0.02400000000000002, 0.14529999999999998, 0.07310000000000005, 0.00039999999999995595, 9.999999999998899e-05, 9.999999999998899e-05, 0.007399999999999962, 0.032299999999999995, 0.048699999999999966, 9.999999999998899e-05, 0.03249999999999997, 0.006754747757416024, 0.032299999999999995, 0.22082032439354093, 0.19298032777251062, 0.19253305132024678, 0.2055799784281095, 0.20415139631429258, 0.23054183195205913, 0.2006523808210423, 0.29039544101253445, 0.20038910139557964, 0.06846678287190755, 0.07855684999585133, 0.1406480369258103, 0.03996840984097694, 0.04071283917873225, 0.06063776290823275, 0.073263588849099, 0.08868867521935331, 0.06743478383218948, 0.13819729600499175, 0.123984536869721, 0.13451158777775418, 0.14114924056111855, 0.16229191769130413, 0.17048253583379813, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.18238915336234562, 0.1709174786537795, 0.16833854391740677, 0.189057953399409, 0.1769644640004372, 0.16316150333705282, 0.17377774300845283, 0.15246898481322946, 0.10716386357745067, 0.1614151299400408, 0.11876343300790904, 0.10978923820566577, 0.13610603218022022, 0.11701239065941771, 0.1722971734787465, 0.1518550850524818, 0.1229185550255375, 0.16996571318955755, 0.23601626264373876, 0.14933789585266954, 0.16154286057415324, 0.23210716714019453, 0.17628730745050003, 0.15536184127756003, 0.17686874938039077, 0.18659688261942042, 0.14195011305864957, 0.14578023879947632, 0.14006577975982915, 0.14198304211372648, 0.14379127967294647, 0.15351998536504197, 0.13697870895265896, 0.14203070229532166, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.16060493753908556, 0.19437354069769097, 0.1411966535145892, 0.16149939526223867, 0.24369660765090406, 0.17165345144855548, 0.15672808824074347, 0.16372797834227915, 0.16761248675320972, 0.1520401669978272, 0.1508798013499696, 0.3034445194460117, 0.17887872157465678, 0.17366570869048104, 0.2028812417861957, 0.16944140470640723, 0.2237305618099873, 0.17685058076392857, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17967047337437525, 0.188688463014553, 0.2429699908236106, 0.0947762948743548, 0.07308116822850497, 0.07555298902537866, 0.05186305593955043, 0.062375095939128045, 0.14039733981369573, 0.12046684496579019, 0.05491659739916577, 0.05062431923767596]}, "mutation_prompt": null}
{"id": "c6f50d3c-6012-4122-aa46-4b3bb596e512", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\nclass ImprovedHybridHarmonyPSO(HybridHarmonyPSO):\n    def evaluate_solutions_parallel(self, func, solutions):\n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            futures = [executor.submit(func, solution) for solution in solutions]\n            results = [future.result() for future in as_completed(futures)]\n        return results\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array(self.evaluate_solutions_parallel(func, harmony_memory))\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(self.evaluate_solutions_parallel(func, new_solutions))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array(self.evaluate_solutions_parallel(func, pbest))\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "ImprovedHybridHarmonyPSO", "description": "Implementing a parallel asynchronous evaluation strategy to speed up fitness evaluation and solution update process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6312e537-914a-4f39-9083-be03a7ad68bf", "metadata": {"aucs": [0.17106119617580662, 0.183164768591895, 0.197479246385302, 0.16845369514743413, 0.18818337038671906, 0.1743435064021196, 0.1785507992358102, 0.16281155072979714, 0.1900640255741839, 0.06599999999999995, 0.008199999999999985, 0.03810000000000002, 0.007399999999999962, 9.999999999998899e-05, 0.05740000000000001, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.04611047095548981, 0.046809513754464405, 0.04977074487583699, 0.1562798674125092, 0.0528437448134802, 0.09575461660818341, 0.058711088734964334, 0.025756673127183438, 0.07562830159195943, 0.0481463786277756, 0.04861513666111972, 0.04926774209271334, 0.05702674525995721, 0.052137356518779265, 0.03992308285267243, 0.03225126748607876, 0.48183854180125585, 0.5278745093405857, 0.5261593791440391, 0.556500796271775, 0.5726670685312326, 0.5069464340214569, 0.5803154798158203, 0.5300214696812768, 0.53386575924448, 0.06443028781665472, 0.07510940173832203, 0.10171882691615464, 0.053803800388950385, 0.10606928790512216, 0.05190122563388122, 0.10252066063771503, 0.08046864392575714, 0.0928167823142052, 0.13375175994902766, 0.25771507138995786, 0.1481850439168273, 0.15781678312503822, 0.1164135922493319, 0.13477630983343114, 0.14649742396249588, 0.19432038345520275, 0.13517209650225814, 9.999999999998899e-05, 0.06758189734965692, 0.003689195106263865, 0.04422137908095103, 0.08103101652691125, 0.0022454229096671163, 9.999999999998899e-05, 0.04249999999999998, 0.019872591751231683, 0.00458165826050172, 0.06957272857429797, 0.012758968564191675, 0.007159387613177359, 0.0434549217280622, 0.011860097762603106, 0.027645144410284983, 0.03960532873984468, 0.001276934196792201, 9.999999999998899e-05, 0.00770000000000004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1089, 9.999999999998899e-05, 0.015700000000000047, 0.08431122914033207, 0.06858859508378334, 0.04491109459619458, 0.06982319930116576, 0.03489049585261095, 0.06265830498961966, 0.05295698494644707, 0.03548550126745975, 0.06421743361722532, 0.02529999999999999, 9.999999999998899e-05, 0.00029999999999996696, 0.06669999999999998, 0.024499999999999966, 0.02400000000000002, 0.14529999999999998, 0.07310000000000005, 0.00039999999999995595, 9.999999999998899e-05, 9.999999999998899e-05, 0.007399999999999962, 0.032299999999999995, 0.048699999999999966, 9.999999999998899e-05, 0.03249999999999997, 0.006754747757416024, 0.032299999999999995, 0.22082032439354093, 0.19298032777251062, 0.19253305132024678, 0.2055799784281095, 0.20415139631429258, 0.23054183195205913, 0.2006523808210423, 0.29039544101253445, 0.20038910139557964, 0.06846678287190755, 0.07855684999585133, 0.1406480369258103, 0.03996840984097694, 0.04071283917873225, 0.06063776290823275, 0.073263588849099, 0.08868867521935331, 0.06743478383218948, 0.13819729600499175, 0.123984536869721, 0.13451158777775418, 0.14114924056111855, 0.16229191769130413, 0.17048253583379813, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.18238915336234562, 0.1709174786537795, 0.16833854391740677, 0.189057953399409, 0.1769644640004372, 0.16316150333705282, 0.17377774300845283, 0.15246898481322946, 0.10716386357745067, 0.1614151299400408, 0.11876343300790904, 0.10978923820566577, 0.13610603218022022, 0.11701239065941771, 0.1722971734787465, 0.1518550850524818, 0.1229185550255375, 0.16996571318955755, 0.23601626264373876, 0.14933789585266954, 0.16154286057415324, 0.23210716714019453, 0.17628730745050003, 0.15536184127756003, 0.17686874938039077, 0.18659688261942042, 0.14195011305864957, 0.14578023879947632, 0.14006577975982915, 0.14198304211372648, 0.14379127967294647, 0.15351998536504197, 0.13697870895265896, 0.14203070229532166, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.16060493753908556, 0.19437354069769097, 0.1411966535145892, 0.16149939526223867, 0.24369660765090406, 0.17165345144855548, 0.15672808824074347, 0.16372797834227915, 0.16761248675320972, 0.1520401669978272, 0.1508798013499696, 0.3034445194460117, 0.17887872157465678, 0.17366570869048104, 0.2028812417861957, 0.16944140470640723, 0.2237305618099873, 0.17685058076392857, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17967047337437525, 0.188688463014553, 0.2429699908236106, 0.0947762948743548, 0.07308116822850497, 0.07555298902537866, 0.05186305593955043, 0.062375095939128045, 0.14039733981369573, 0.12046684496579019, 0.05491659739916577, 0.05062431923767596]}, "mutation_prompt": null}
{"id": "63b84ab5-70b9-4639-96cf-f6395742e271", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\nclass ImprovedHybridHarmonyPSO(HybridHarmonyPSO):\n    def evaluate_solutions_parallel(self, func, solutions):\n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            futures = [executor.submit(func, solution) for solution in solutions]\n            results = [future.result() for future in as_completed(futures)]\n        return results\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array(self.evaluate_solutions_parallel(func, harmony_memory))\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(self.evaluate_solutions_parallel(func, new_solutions))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array(self.evaluate_solutions_parallel(func, pbest))\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "ImprovedHybridHarmonyPSO", "description": "Implementing a parallel asynchronous evaluation strategy to speed up fitness evaluation and solution update process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6312e537-914a-4f39-9083-be03a7ad68bf", "metadata": {"aucs": [0.17106119617580662, 0.183164768591895, 0.197479246385302, 0.16845369514743413, 0.18818337038671906, 0.1743435064021196, 0.1785507992358102, 0.16281155072979714, 0.1900640255741839, 0.06599999999999995, 0.008199999999999985, 0.03810000000000002, 0.007399999999999962, 9.999999999998899e-05, 0.05740000000000001, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.04611047095548981, 0.046809513754464405, 0.04977074487583699, 0.1562798674125092, 0.0528437448134802, 0.09575461660818341, 0.058711088734964334, 0.025756673127183438, 0.07562830159195943, 0.0481463786277756, 0.04861513666111972, 0.04926774209271334, 0.05702674525995721, 0.052137356518779265, 0.03992308285267243, 0.03225126748607876, 0.48183854180125585, 0.5278745093405857, 0.5261593791440391, 0.556500796271775, 0.5726670685312326, 0.5069464340214569, 0.5803154798158203, 0.5300214696812768, 0.53386575924448, 0.06443028781665472, 0.07510940173832203, 0.10171882691615464, 0.053803800388950385, 0.10606928790512216, 0.05190122563388122, 0.10252066063771503, 0.08046864392575714, 0.0928167823142052, 0.13375175994902766, 0.25771507138995786, 0.1481850439168273, 0.15781678312503822, 0.1164135922493319, 0.13477630983343114, 0.14649742396249588, 0.19432038345520275, 0.13517209650225814, 9.999999999998899e-05, 0.06758189734965692, 0.003689195106263865, 0.04422137908095103, 0.08103101652691125, 0.0022454229096671163, 9.999999999998899e-05, 0.04249999999999998, 0.019872591751231683, 0.00458165826050172, 0.06957272857429797, 0.012758968564191675, 0.007159387613177359, 0.0434549217280622, 0.011860097762603106, 0.027645144410284983, 0.03960532873984468, 0.001276934196792201, 9.999999999998899e-05, 0.00770000000000004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1089, 9.999999999998899e-05, 0.015700000000000047, 0.08431122914033207, 0.06858859508378334, 0.04491109459619458, 0.06982319930116576, 0.03489049585261095, 0.06265830498961966, 0.05295698494644707, 0.03548550126745975, 0.06421743361722532, 0.02529999999999999, 9.999999999998899e-05, 0.00029999999999996696, 0.06669999999999998, 0.024499999999999966, 0.02400000000000002, 0.14529999999999998, 0.07310000000000005, 0.00039999999999995595, 9.999999999998899e-05, 9.999999999998899e-05, 0.007399999999999962, 0.032299999999999995, 0.048699999999999966, 9.999999999998899e-05, 0.03249999999999997, 0.006754747757416024, 0.032299999999999995, 0.22082032439354093, 0.19298032777251062, 0.19253305132024678, 0.2055799784281095, 0.20415139631429258, 0.23054183195205913, 0.2006523808210423, 0.29039544101253445, 0.20038910139557964, 0.06846678287190755, 0.07855684999585133, 0.1406480369258103, 0.03996840984097694, 0.04071283917873225, 0.06063776290823275, 0.073263588849099, 0.08868867521935331, 0.06743478383218948, 0.13819729600499175, 0.123984536869721, 0.13451158777775418, 0.14114924056111855, 0.16229191769130413, 0.17048253583379813, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.18238915336234562, 0.1709174786537795, 0.16833854391740677, 0.189057953399409, 0.1769644640004372, 0.16316150333705282, 0.17377774300845283, 0.15246898481322946, 0.10716386357745067, 0.1614151299400408, 0.11876343300790904, 0.10978923820566577, 0.13610603218022022, 0.11701239065941771, 0.1722971734787465, 0.1518550850524818, 0.1229185550255375, 0.16996571318955755, 0.23601626264373876, 0.14933789585266954, 0.16154286057415324, 0.23210716714019453, 0.17628730745050003, 0.15536184127756003, 0.17686874938039077, 0.18659688261942042, 0.14195011305864957, 0.14578023879947632, 0.14006577975982915, 0.14198304211372648, 0.14379127967294647, 0.15351998536504197, 0.13697870895265896, 0.14203070229532166, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.16060493753908556, 0.19437354069769097, 0.1411966535145892, 0.16149939526223867, 0.24369660765090406, 0.17165345144855548, 0.15672808824074347, 0.16372797834227915, 0.16761248675320972, 0.1520401669978272, 0.1508798013499696, 0.3034445194460117, 0.17887872157465678, 0.17366570869048104, 0.2028812417861957, 0.16944140470640723, 0.2237305618099873, 0.17685058076392857, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17967047337437525, 0.188688463014553, 0.2429699908236106, 0.0947762948743548, 0.07308116822850497, 0.07555298902537866, 0.05186305593955043, 0.062375095939128045, 0.14039733981369573, 0.12046684496579019, 0.05491659739916577, 0.05062431923767596]}, "mutation_prompt": null}
{"id": "8296c9af-617e-4e41-a885-13a7bc121056", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\nclass ImprovedHybridHarmonyPSO(HybridHarmonyPSO):\n    def evaluate_solutions_parallel(self, func, solutions):\n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            futures = [executor.submit(func, solution) for solution in solutions]\n            results = [future.result() for future in as_completed(futures)]\n        return results\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array(self.evaluate_solutions_parallel(func, harmony_memory))\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(self.evaluate_solutions_parallel(func, new_solutions))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array(self.evaluate_solutions_parallel(func, pbest))\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "ImprovedHybridHarmonyPSO", "description": "Implementing a parallel asynchronous evaluation strategy to speed up fitness evaluation and solution update process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6312e537-914a-4f39-9083-be03a7ad68bf", "metadata": {"aucs": [0.17106119617580662, 0.183164768591895, 0.197479246385302, 0.16845369514743413, 0.18818337038671906, 0.1743435064021196, 0.1785507992358102, 0.16281155072979714, 0.1900640255741839, 0.06599999999999995, 0.008199999999999985, 0.03810000000000002, 0.007399999999999962, 9.999999999998899e-05, 0.05740000000000001, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.04611047095548981, 0.046809513754464405, 0.04977074487583699, 0.1562798674125092, 0.0528437448134802, 0.09575461660818341, 0.058711088734964334, 0.025756673127183438, 0.07562830159195943, 0.0481463786277756, 0.04861513666111972, 0.04926774209271334, 0.05702674525995721, 0.052137356518779265, 0.03992308285267243, 0.03225126748607876, 0.48183854180125585, 0.5278745093405857, 0.5261593791440391, 0.556500796271775, 0.5726670685312326, 0.5069464340214569, 0.5803154798158203, 0.5300214696812768, 0.53386575924448, 0.06443028781665472, 0.07510940173832203, 0.10171882691615464, 0.053803800388950385, 0.10606928790512216, 0.05190122563388122, 0.10252066063771503, 0.08046864392575714, 0.0928167823142052, 0.13375175994902766, 0.25771507138995786, 0.1481850439168273, 0.15781678312503822, 0.1164135922493319, 0.13477630983343114, 0.14649742396249588, 0.19432038345520275, 0.13517209650225814, 9.999999999998899e-05, 0.06758189734965692, 0.003689195106263865, 0.04422137908095103, 0.08103101652691125, 0.0022454229096671163, 9.999999999998899e-05, 0.04249999999999998, 0.019872591751231683, 0.00458165826050172, 0.06957272857429797, 0.012758968564191675, 0.007159387613177359, 0.0434549217280622, 0.011860097762603106, 0.027645144410284983, 0.03960532873984468, 0.001276934196792201, 9.999999999998899e-05, 0.00770000000000004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1089, 9.999999999998899e-05, 0.015700000000000047, 0.08431122914033207, 0.06858859508378334, 0.04491109459619458, 0.06982319930116576, 0.03489049585261095, 0.06265830498961966, 0.05295698494644707, 0.03548550126745975, 0.06421743361722532, 0.02529999999999999, 9.999999999998899e-05, 0.00029999999999996696, 0.06669999999999998, 0.024499999999999966, 0.02400000000000002, 0.14529999999999998, 0.07310000000000005, 0.00039999999999995595, 9.999999999998899e-05, 9.999999999998899e-05, 0.007399999999999962, 0.032299999999999995, 0.048699999999999966, 9.999999999998899e-05, 0.03249999999999997, 0.006754747757416024, 0.032299999999999995, 0.22082032439354093, 0.19298032777251062, 0.19253305132024678, 0.2055799784281095, 0.20415139631429258, 0.23054183195205913, 0.2006523808210423, 0.29039544101253445, 0.20038910139557964, 0.06846678287190755, 0.07855684999585133, 0.1406480369258103, 0.03996840984097694, 0.04071283917873225, 0.06063776290823275, 0.073263588849099, 0.08868867521935331, 0.06743478383218948, 0.13819729600499175, 0.123984536869721, 0.13451158777775418, 0.14114924056111855, 0.16229191769130413, 0.17048253583379813, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.18238915336234562, 0.1709174786537795, 0.16833854391740677, 0.189057953399409, 0.1769644640004372, 0.16316150333705282, 0.17377774300845283, 0.15246898481322946, 0.10716386357745067, 0.1614151299400408, 0.11876343300790904, 0.10978923820566577, 0.13610603218022022, 0.11701239065941771, 0.1722971734787465, 0.1518550850524818, 0.1229185550255375, 0.16996571318955755, 0.23601626264373876, 0.14933789585266954, 0.16154286057415324, 0.23210716714019453, 0.17628730745050003, 0.15536184127756003, 0.17686874938039077, 0.18659688261942042, 0.14195011305864957, 0.14578023879947632, 0.14006577975982915, 0.14198304211372648, 0.14379127967294647, 0.15351998536504197, 0.13697870895265896, 0.14203070229532166, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.16060493753908556, 0.19437354069769097, 0.1411966535145892, 0.16149939526223867, 0.24369660765090406, 0.17165345144855548, 0.15672808824074347, 0.16372797834227915, 0.16761248675320972, 0.1520401669978272, 0.1508798013499696, 0.3034445194460117, 0.17887872157465678, 0.17366570869048104, 0.2028812417861957, 0.16944140470640723, 0.2237305618099873, 0.17685058076392857, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17967047337437525, 0.188688463014553, 0.2429699908236106, 0.0947762948743548, 0.07308116822850497, 0.07555298902537866, 0.05186305593955043, 0.062375095939128045, 0.14039733981369573, 0.12046684496579019, 0.05491659739916577, 0.05062431923767596]}, "mutation_prompt": null}
{"id": "31a93e65-75dc-4f5c-9e1a-3d43c95c481f", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\nclass MultiSwarmImprovedHybridHarmonyPSO(HybridHarmonyPSO):\n    def evaluate_solutions_parallel(self, func, solutions):\n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            futures = [executor.submit(func, solution) for solution in solutions]\n            results = [future.result() for future in as_completed(futures)]\n        return results\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array(self.evaluate_solutions_parallel(func, harmony_memory))\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(self.evaluate_solutions_parallel(func, new_solutions))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Multi-Swarm Optimization\n                multi_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.multi_swarm_size, self.dim))\n                local_bests = multi_swarm.copy()\n                local_bests_fitness = np.array(self.evaluate_solutions_parallel(func, local_bests))\n                global_best_index = np.argmin(local_bests_fitness)\n                global_best = local_bests[global_best_index]\n\n                for _ in range(self.multi_swarm_max_iter):\n                    for i in range(self.multi_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        multi_swarm_velocity = self.pso_inertia * multi_swarm[i] + self.pso_c1 * r1 * (local_bests[i] - multi_swarm[i]) + self.pso_c2 * r2 * (global_best - multi_swarm[i])\n                        multi_swarm[i] = np.clip(multi_swarm[i] + multi_swarm_velocity, self.lower_bound, self.upper_bound)\n                        multi_fitness = func(multi_swarm[i])\n                        if multi_fitness < local_bests_fitness[i]:\n                            local_bests[i] = multi_swarm[i]\n                            local_bests_fitness[i] = multi_fitness\n                            if local_bests_fitness[i] < func(global_best):\n                                global_best = local_bests[i]\n                                global_best_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "MultiSwarmImprovedHybridHarmonyPSO", "description": "Implementing a multi-swarm optimization approach to enhance exploration and exploitation capabilities within the algorithm.", "configspace": "", "generation": 74, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"'MultiSwarmImprovedHybridHarmonyPSO' object has no attribute 'multi_swarm_size'\").", "error": "AttributeError(\"'MultiSwarmImprovedHybridHarmonyPSO' object has no attribute 'multi_swarm_size'\")", "parent_id": "6312e537-914a-4f39-9083-be03a7ad68bf", "metadata": {}, "mutation_prompt": null}
{"id": "d6c913ae-f1fe-40bd-9040-0453f021e5c0", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\nclass ImprovedHybridHarmonyPSO(HybridHarmonyPSO):\n    def evaluate_solutions_parallel(self, func, solutions):\n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            futures = [executor.submit(func, solution) for solution in solutions]\n            results = [future.result() for future in as_completed(futures)]\n        return results\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array(self.evaluate_solutions_parallel(func, harmony_memory))\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(self.evaluate_solutions_parallel(func, new_solutions))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array(self.evaluate_solutions_parallel(func, pbest))\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "ImprovedHybridHarmonyPSO", "description": "Implementing a parallel asynchronous evaluation strategy to speed up fitness evaluation and solution update process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6312e537-914a-4f39-9083-be03a7ad68bf", "metadata": {"aucs": [0.17106119617580662, 0.183164768591895, 0.197479246385302, 0.16845369514743413, 0.18818337038671906, 0.1743435064021196, 0.1785507992358102, 0.16281155072979714, 0.1900640255741839, 0.06599999999999995, 0.008199999999999985, 0.03810000000000002, 0.007399999999999962, 9.999999999998899e-05, 0.05740000000000001, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.04611047095548981, 0.046809513754464405, 0.04977074487583699, 0.1562798674125092, 0.0528437448134802, 0.09575461660818341, 0.058711088734964334, 0.025756673127183438, 0.07562830159195943, 0.0481463786277756, 0.04861513666111972, 0.04926774209271334, 0.05702674525995721, 0.052137356518779265, 0.03992308285267243, 0.03225126748607876, 0.48183854180125585, 0.5278745093405857, 0.5261593791440391, 0.556500796271775, 0.5726670685312326, 0.5069464340214569, 0.5803154798158203, 0.5300214696812768, 0.53386575924448, 0.06443028781665472, 0.07510940173832203, 0.10171882691615464, 0.053803800388950385, 0.10606928790512216, 0.05190122563388122, 0.10252066063771503, 0.08046864392575714, 0.0928167823142052, 0.13375175994902766, 0.25771507138995786, 0.1481850439168273, 0.15781678312503822, 0.1164135922493319, 0.13477630983343114, 0.14649742396249588, 0.19432038345520275, 0.13517209650225814, 9.999999999998899e-05, 0.06758189734965692, 0.003689195106263865, 0.04422137908095103, 0.08103101652691125, 0.0022454229096671163, 9.999999999998899e-05, 0.04249999999999998, 0.019872591751231683, 0.00458165826050172, 0.06957272857429797, 0.012758968564191675, 0.007159387613177359, 0.0434549217280622, 0.011860097762603106, 0.027645144410284983, 0.03960532873984468, 0.001276934196792201, 9.999999999998899e-05, 0.00770000000000004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1089, 9.999999999998899e-05, 0.015700000000000047, 0.08431122914033207, 0.06858859508378334, 0.04491109459619458, 0.06982319930116576, 0.03489049585261095, 0.06265830498961966, 0.05295698494644707, 0.03548550126745975, 0.06421743361722532, 0.02529999999999999, 9.999999999998899e-05, 0.00029999999999996696, 0.06669999999999998, 0.024499999999999966, 0.02400000000000002, 0.14529999999999998, 0.07310000000000005, 0.00039999999999995595, 9.999999999998899e-05, 9.999999999998899e-05, 0.007399999999999962, 0.032299999999999995, 0.048699999999999966, 9.999999999998899e-05, 0.03249999999999997, 0.006754747757416024, 0.032299999999999995, 0.22082032439354093, 0.19298032777251062, 0.19253305132024678, 0.2055799784281095, 0.20415139631429258, 0.23054183195205913, 0.2006523808210423, 0.29039544101253445, 0.20038910139557964, 0.06846678287190755, 0.07855684999585133, 0.1406480369258103, 0.03996840984097694, 0.04071283917873225, 0.06063776290823275, 0.073263588849099, 0.08868867521935331, 0.06743478383218948, 0.13819729600499175, 0.123984536869721, 0.13451158777775418, 0.14114924056111855, 0.16229191769130413, 0.17048253583379813, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.18238915336234562, 0.1709174786537795, 0.16833854391740677, 0.189057953399409, 0.1769644640004372, 0.16316150333705282, 0.17377774300845283, 0.15246898481322946, 0.10716386357745067, 0.1614151299400408, 0.11876343300790904, 0.10978923820566577, 0.13610603218022022, 0.11701239065941771, 0.1722971734787465, 0.1518550850524818, 0.1229185550255375, 0.16996571318955755, 0.23601626264373876, 0.14933789585266954, 0.16154286057415324, 0.23210716714019453, 0.17628730745050003, 0.15536184127756003, 0.17686874938039077, 0.18659688261942042, 0.14195011305864957, 0.14578023879947632, 0.14006577975982915, 0.14198304211372648, 0.14379127967294647, 0.15351998536504197, 0.13697870895265896, 0.14203070229532166, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.16060493753908556, 0.19437354069769097, 0.1411966535145892, 0.16149939526223867, 0.24369660765090406, 0.17165345144855548, 0.15672808824074347, 0.16372797834227915, 0.16761248675320972, 0.1520401669978272, 0.1508798013499696, 0.3034445194460117, 0.17887872157465678, 0.17366570869048104, 0.2028812417861957, 0.16944140470640723, 0.2237305618099873, 0.17685058076392857, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17967047337437525, 0.188688463014553, 0.2429699908236106, 0.0947762948743548, 0.07308116822850497, 0.07555298902537866, 0.05186305593955043, 0.062375095939128045, 0.14039733981369573, 0.12046684496579019, 0.05491659739916577, 0.05062431923767596]}, "mutation_prompt": null}
{"id": "15e0f44d-ddff-467a-bc2a-27aaf770b0dd", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\nclass ImprovedHybridHarmonyPSO(HybridHarmonyPSO):\n    def evaluate_solutions_parallel(self, func, solutions):\n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            futures = [executor.submit(func, solution) for solution in solutions]\n            results = [future.result() for future in as_completed(futures)]\n        return results\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array(self.evaluate_solutions_parallel(func, harmony_memory))\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(self.evaluate_solutions_parallel(func, new_solutions))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array(self.evaluate_solutions_parallel(func, pbest))\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "ImprovedHybridHarmonyPSO", "description": "Implementing a parallel asynchronous evaluation strategy to speed up fitness evaluation and solution update process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6312e537-914a-4f39-9083-be03a7ad68bf", "metadata": {"aucs": [0.17106119617580662, 0.183164768591895, 0.197479246385302, 0.16845369514743413, 0.18818337038671906, 0.1743435064021196, 0.1785507992358102, 0.16281155072979714, 0.1900640255741839, 0.06599999999999995, 0.008199999999999985, 0.03810000000000002, 0.007399999999999962, 9.999999999998899e-05, 0.05740000000000001, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.04611047095548981, 0.046809513754464405, 0.04977074487583699, 0.1562798674125092, 0.0528437448134802, 0.09575461660818341, 0.058711088734964334, 0.025756673127183438, 0.07562830159195943, 0.0481463786277756, 0.04861513666111972, 0.04926774209271334, 0.05702674525995721, 0.052137356518779265, 0.03992308285267243, 0.03225126748607876, 0.48183854180125585, 0.5278745093405857, 0.5261593791440391, 0.556500796271775, 0.5726670685312326, 0.5069464340214569, 0.5803154798158203, 0.5300214696812768, 0.53386575924448, 0.06443028781665472, 0.07510940173832203, 0.10171882691615464, 0.053803800388950385, 0.10606928790512216, 0.05190122563388122, 0.10252066063771503, 0.08046864392575714, 0.0928167823142052, 0.13375175994902766, 0.25771507138995786, 0.1481850439168273, 0.15781678312503822, 0.1164135922493319, 0.13477630983343114, 0.14649742396249588, 0.19432038345520275, 0.13517209650225814, 9.999999999998899e-05, 0.06758189734965692, 0.003689195106263865, 0.04422137908095103, 0.08103101652691125, 0.0022454229096671163, 9.999999999998899e-05, 0.04249999999999998, 0.019872591751231683, 0.00458165826050172, 0.06957272857429797, 0.012758968564191675, 0.007159387613177359, 0.0434549217280622, 0.011860097762603106, 0.027645144410284983, 0.03960532873984468, 0.001276934196792201, 9.999999999998899e-05, 0.00770000000000004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1089, 9.999999999998899e-05, 0.015700000000000047, 0.08431122914033207, 0.06858859508378334, 0.04491109459619458, 0.06982319930116576, 0.03489049585261095, 0.06265830498961966, 0.05295698494644707, 0.03548550126745975, 0.06421743361722532, 0.02529999999999999, 9.999999999998899e-05, 0.00029999999999996696, 0.06669999999999998, 0.024499999999999966, 0.02400000000000002, 0.14529999999999998, 0.07310000000000005, 0.00039999999999995595, 9.999999999998899e-05, 9.999999999998899e-05, 0.007399999999999962, 0.032299999999999995, 0.048699999999999966, 9.999999999998899e-05, 0.03249999999999997, 0.006754747757416024, 0.032299999999999995, 0.22082032439354093, 0.19298032777251062, 0.19253305132024678, 0.2055799784281095, 0.20415139631429258, 0.23054183195205913, 0.2006523808210423, 0.29039544101253445, 0.20038910139557964, 0.06846678287190755, 0.07855684999585133, 0.1406480369258103, 0.03996840984097694, 0.04071283917873225, 0.06063776290823275, 0.073263588849099, 0.08868867521935331, 0.06743478383218948, 0.13819729600499175, 0.123984536869721, 0.13451158777775418, 0.14114924056111855, 0.16229191769130413, 0.17048253583379813, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.18238915336234562, 0.1709174786537795, 0.16833854391740677, 0.189057953399409, 0.1769644640004372, 0.16316150333705282, 0.17377774300845283, 0.15246898481322946, 0.10716386357745067, 0.1614151299400408, 0.11876343300790904, 0.10978923820566577, 0.13610603218022022, 0.11701239065941771, 0.1722971734787465, 0.1518550850524818, 0.1229185550255375, 0.16996571318955755, 0.23601626264373876, 0.14933789585266954, 0.16154286057415324, 0.23210716714019453, 0.17628730745050003, 0.15536184127756003, 0.17686874938039077, 0.18659688261942042, 0.14195011305864957, 0.14578023879947632, 0.14006577975982915, 0.14198304211372648, 0.14379127967294647, 0.15351998536504197, 0.13697870895265896, 0.14203070229532166, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.16060493753908556, 0.19437354069769097, 0.1411966535145892, 0.16149939526223867, 0.24369660765090406, 0.17165345144855548, 0.15672808824074347, 0.16372797834227915, 0.16761248675320972, 0.1520401669978272, 0.1508798013499696, 0.3034445194460117, 0.17887872157465678, 0.17366570869048104, 0.2028812417861957, 0.16944140470640723, 0.2237305618099873, 0.17685058076392857, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17967047337437525, 0.188688463014553, 0.2429699908236106, 0.0947762948743548, 0.07308116822850497, 0.07555298902537866, 0.05186305593955043, 0.062375095939128045, 0.14039733981369573, 0.12046684496579019, 0.05491659739916577, 0.05062431923767596]}, "mutation_prompt": null}
{"id": "46339139-5ad1-4a41-8266-915368459e41", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\nclass ImprovedHybridHarmonyPSO(HybridHarmonyPSO):\n    def evaluate_solutions_parallel(self, func, solutions):\n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            futures = [executor.submit(func, solution) for solution in solutions]\n            results = [future.result() for future in as_completed(futures)]\n        return results\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array(self.evaluate_solutions_parallel(func, harmony_memory))\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(self.evaluate_solutions_parallel(func, new_solutions))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array(self.evaluate_solutions_parallel(func, pbest))\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "ImprovedHybridHarmonyPSO", "description": "Implementing a parallel asynchronous evaluation strategy to speed up fitness evaluation and solution update process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6312e537-914a-4f39-9083-be03a7ad68bf", "metadata": {"aucs": [0.17106119617580662, 0.183164768591895, 0.197479246385302, 0.16845369514743413, 0.18818337038671906, 0.1743435064021196, 0.1785507992358102, 0.16281155072979714, 0.1900640255741839, 0.06599999999999995, 0.008199999999999985, 0.03810000000000002, 0.007399999999999962, 9.999999999998899e-05, 0.05740000000000001, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.04611047095548981, 0.046809513754464405, 0.04977074487583699, 0.1562798674125092, 0.0528437448134802, 0.09575461660818341, 0.058711088734964334, 0.025756673127183438, 0.07562830159195943, 0.0481463786277756, 0.04861513666111972, 0.04926774209271334, 0.05702674525995721, 0.052137356518779265, 0.03992308285267243, 0.03225126748607876, 0.48183854180125585, 0.5278745093405857, 0.5261593791440391, 0.556500796271775, 0.5726670685312326, 0.5069464340214569, 0.5803154798158203, 0.5300214696812768, 0.53386575924448, 0.06443028781665472, 0.07510940173832203, 0.10171882691615464, 0.053803800388950385, 0.10606928790512216, 0.05190122563388122, 0.10252066063771503, 0.08046864392575714, 0.0928167823142052, 0.13375175994902766, 0.25771507138995786, 0.1481850439168273, 0.15781678312503822, 0.1164135922493319, 0.13477630983343114, 0.14649742396249588, 0.19432038345520275, 0.13517209650225814, 9.999999999998899e-05, 0.06758189734965692, 0.003689195106263865, 0.04422137908095103, 0.08103101652691125, 0.0022454229096671163, 9.999999999998899e-05, 0.04249999999999998, 0.019872591751231683, 0.00458165826050172, 0.06957272857429797, 0.012758968564191675, 0.007159387613177359, 0.0434549217280622, 0.011860097762603106, 0.027645144410284983, 0.03960532873984468, 0.001276934196792201, 9.999999999998899e-05, 0.00770000000000004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1089, 9.999999999998899e-05, 0.015700000000000047, 0.08431122914033207, 0.06858859508378334, 0.04491109459619458, 0.06982319930116576, 0.03489049585261095, 0.06265830498961966, 0.05295698494644707, 0.03548550126745975, 0.06421743361722532, 0.02529999999999999, 9.999999999998899e-05, 0.00029999999999996696, 0.06669999999999998, 0.024499999999999966, 0.02400000000000002, 0.14529999999999998, 0.07310000000000005, 0.00039999999999995595, 9.999999999998899e-05, 9.999999999998899e-05, 0.007399999999999962, 0.032299999999999995, 0.048699999999999966, 9.999999999998899e-05, 0.03249999999999997, 0.006754747757416024, 0.032299999999999995, 0.22082032439354093, 0.19298032777251062, 0.19253305132024678, 0.2055799784281095, 0.20415139631429258, 0.23054183195205913, 0.2006523808210423, 0.29039544101253445, 0.20038910139557964, 0.06846678287190755, 0.07855684999585133, 0.1406480369258103, 0.03996840984097694, 0.04071283917873225, 0.06063776290823275, 0.073263588849099, 0.08868867521935331, 0.06743478383218948, 0.13819729600499175, 0.123984536869721, 0.13451158777775418, 0.14114924056111855, 0.16229191769130413, 0.17048253583379813, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.18238915336234562, 0.1709174786537795, 0.16833854391740677, 0.189057953399409, 0.1769644640004372, 0.16316150333705282, 0.17377774300845283, 0.15246898481322946, 0.10716386357745067, 0.1614151299400408, 0.11876343300790904, 0.10978923820566577, 0.13610603218022022, 0.11701239065941771, 0.1722971734787465, 0.1518550850524818, 0.1229185550255375, 0.16996571318955755, 0.23601626264373876, 0.14933789585266954, 0.16154286057415324, 0.23210716714019453, 0.17628730745050003, 0.15536184127756003, 0.17686874938039077, 0.18659688261942042, 0.14195011305864957, 0.14578023879947632, 0.14006577975982915, 0.14198304211372648, 0.14379127967294647, 0.15351998536504197, 0.13697870895265896, 0.14203070229532166, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.16060493753908556, 0.19437354069769097, 0.1411966535145892, 0.16149939526223867, 0.24369660765090406, 0.17165345144855548, 0.15672808824074347, 0.16372797834227915, 0.16761248675320972, 0.1520401669978272, 0.1508798013499696, 0.3034445194460117, 0.17887872157465678, 0.17366570869048104, 0.2028812417861957, 0.16944140470640723, 0.2237305618099873, 0.17685058076392857, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17967047337437525, 0.188688463014553, 0.2429699908236106, 0.0947762948743548, 0.07308116822850497, 0.07555298902537866, 0.05186305593955043, 0.062375095939128045, 0.14039733981369573, 0.12046684496579019, 0.05491659739916577, 0.05062431923767596]}, "mutation_prompt": null}
{"id": "505bc43a-e322-410a-9fed-a9a264907cc5", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\nclass ImprovedHybridHarmonyPSO(HybridHarmonyPSO):\n    def evaluate_solutions_parallel(self, func, solutions):\n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            futures = [executor.submit(func, solution) for solution in solutions]\n            results = [future.result() for future in as_completed(futures)]\n        return results\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array(self.evaluate_solutions_parallel(func, harmony_memory))\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(self.evaluate_solutions_parallel(func, new_solutions))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array(self.evaluate_solutions_parallel(func, pbest))\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "ImprovedHybridHarmonyPSO", "description": "Implementing a parallel asynchronous evaluation strategy to speed up fitness evaluation and solution update process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6312e537-914a-4f39-9083-be03a7ad68bf", "metadata": {"aucs": [0.17106119617580662, 0.183164768591895, 0.197479246385302, 0.16845369514743413, 0.18818337038671906, 0.1743435064021196, 0.1785507992358102, 0.16281155072979714, 0.1900640255741839, 0.06599999999999995, 0.008199999999999985, 0.03810000000000002, 0.007399999999999962, 9.999999999998899e-05, 0.05740000000000001, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.04611047095548981, 0.046809513754464405, 0.04977074487583699, 0.1562798674125092, 0.0528437448134802, 0.09575461660818341, 0.058711088734964334, 0.025756673127183438, 0.07562830159195943, 0.0481463786277756, 0.04861513666111972, 0.04926774209271334, 0.05702674525995721, 0.052137356518779265, 0.03992308285267243, 0.03225126748607876, 0.48183854180125585, 0.5278745093405857, 0.5261593791440391, 0.556500796271775, 0.5726670685312326, 0.5069464340214569, 0.5803154798158203, 0.5300214696812768, 0.53386575924448, 0.06443028781665472, 0.07510940173832203, 0.10171882691615464, 0.053803800388950385, 0.10606928790512216, 0.05190122563388122, 0.10252066063771503, 0.08046864392575714, 0.0928167823142052, 0.13375175994902766, 0.25771507138995786, 0.1481850439168273, 0.15781678312503822, 0.1164135922493319, 0.13477630983343114, 0.14649742396249588, 0.19432038345520275, 0.13517209650225814, 9.999999999998899e-05, 0.06758189734965692, 0.003689195106263865, 0.04422137908095103, 0.08103101652691125, 0.0022454229096671163, 9.999999999998899e-05, 0.04249999999999998, 0.019872591751231683, 0.00458165826050172, 0.06957272857429797, 0.012758968564191675, 0.007159387613177359, 0.0434549217280622, 0.011860097762603106, 0.027645144410284983, 0.03960532873984468, 0.001276934196792201, 9.999999999998899e-05, 0.00770000000000004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1089, 9.999999999998899e-05, 0.015700000000000047, 0.08431122914033207, 0.06858859508378334, 0.04491109459619458, 0.06982319930116576, 0.03489049585261095, 0.06265830498961966, 0.05295698494644707, 0.03548550126745975, 0.06421743361722532, 0.02529999999999999, 9.999999999998899e-05, 0.00029999999999996696, 0.06669999999999998, 0.024499999999999966, 0.02400000000000002, 0.14529999999999998, 0.07310000000000005, 0.00039999999999995595, 9.999999999998899e-05, 9.999999999998899e-05, 0.007399999999999962, 0.032299999999999995, 0.048699999999999966, 9.999999999998899e-05, 0.03249999999999997, 0.006754747757416024, 0.032299999999999995, 0.22082032439354093, 0.19298032777251062, 0.19253305132024678, 0.2055799784281095, 0.20415139631429258, 0.23054183195205913, 0.2006523808210423, 0.29039544101253445, 0.20038910139557964, 0.06846678287190755, 0.07855684999585133, 0.1406480369258103, 0.03996840984097694, 0.04071283917873225, 0.06063776290823275, 0.073263588849099, 0.08868867521935331, 0.06743478383218948, 0.13819729600499175, 0.123984536869721, 0.13451158777775418, 0.14114924056111855, 0.16229191769130413, 0.17048253583379813, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.18238915336234562, 0.1709174786537795, 0.16833854391740677, 0.189057953399409, 0.1769644640004372, 0.16316150333705282, 0.17377774300845283, 0.15246898481322946, 0.10716386357745067, 0.1614151299400408, 0.11876343300790904, 0.10978923820566577, 0.13610603218022022, 0.11701239065941771, 0.1722971734787465, 0.1518550850524818, 0.1229185550255375, 0.16996571318955755, 0.23601626264373876, 0.14933789585266954, 0.16154286057415324, 0.23210716714019453, 0.17628730745050003, 0.15536184127756003, 0.17686874938039077, 0.18659688261942042, 0.14195011305864957, 0.14578023879947632, 0.14006577975982915, 0.14198304211372648, 0.14379127967294647, 0.15351998536504197, 0.13697870895265896, 0.14203070229532166, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.16060493753908556, 0.19437354069769097, 0.1411966535145892, 0.16149939526223867, 0.24369660765090406, 0.17165345144855548, 0.15672808824074347, 0.16372797834227915, 0.16761248675320972, 0.1520401669978272, 0.1508798013499696, 0.3034445194460117, 0.17887872157465678, 0.17366570869048104, 0.2028812417861957, 0.16944140470640723, 0.2237305618099873, 0.17685058076392857, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17967047337437525, 0.188688463014553, 0.2429699908236106, 0.0947762948743548, 0.07308116822850497, 0.07555298902537866, 0.05186305593955043, 0.062375095939128045, 0.14039733981369573, 0.12046684496579019, 0.05491659739916577, 0.05062431923767596]}, "mutation_prompt": null}
{"id": "27ac9d03-095b-4cba-9a75-f58dacd56848", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\nclass ImprovedHybridHarmonyPSO(HybridHarmonyPSO):\n    def evaluate_solutions_parallel(self, func, solutions):\n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            futures = [executor.submit(func, solution) for solution in solutions]\n            results = [future.result() for future in as_completed(futures)]\n        return results\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array(self.evaluate_solutions_parallel(func, harmony_memory))\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(self.evaluate_solutions_parallel(func, new_solutions))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array(self.evaluate_solutions_parallel(func, pbest))\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "ImprovedHybridHarmonyPSO", "description": "Implementing a parallel asynchronous evaluation strategy to speed up fitness evaluation and solution update process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6312e537-914a-4f39-9083-be03a7ad68bf", "metadata": {"aucs": [0.17106119617580662, 0.183164768591895, 0.197479246385302, 0.16845369514743413, 0.18818337038671906, 0.1743435064021196, 0.1785507992358102, 0.16281155072979714, 0.1900640255741839, 0.06599999999999995, 0.008199999999999985, 0.03810000000000002, 0.007399999999999962, 9.999999999998899e-05, 0.05740000000000001, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.04611047095548981, 0.046809513754464405, 0.04977074487583699, 0.1562798674125092, 0.0528437448134802, 0.09575461660818341, 0.058711088734964334, 0.025756673127183438, 0.07562830159195943, 0.0481463786277756, 0.04861513666111972, 0.04926774209271334, 0.05702674525995721, 0.052137356518779265, 0.03992308285267243, 0.03225126748607876, 0.48183854180125585, 0.5278745093405857, 0.5261593791440391, 0.556500796271775, 0.5726670685312326, 0.5069464340214569, 0.5803154798158203, 0.5300214696812768, 0.53386575924448, 0.06443028781665472, 0.07510940173832203, 0.10171882691615464, 0.053803800388950385, 0.10606928790512216, 0.05190122563388122, 0.10252066063771503, 0.08046864392575714, 0.0928167823142052, 0.13375175994902766, 0.25771507138995786, 0.1481850439168273, 0.15781678312503822, 0.1164135922493319, 0.13477630983343114, 0.14649742396249588, 0.19432038345520275, 0.13517209650225814, 9.999999999998899e-05, 0.06758189734965692, 0.003689195106263865, 0.04422137908095103, 0.08103101652691125, 0.0022454229096671163, 9.999999999998899e-05, 0.04249999999999998, 0.019872591751231683, 0.00458165826050172, 0.06957272857429797, 0.012758968564191675, 0.007159387613177359, 0.0434549217280622, 0.011860097762603106, 0.027645144410284983, 0.03960532873984468, 0.001276934196792201, 9.999999999998899e-05, 0.00770000000000004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1089, 9.999999999998899e-05, 0.015700000000000047, 0.08431122914033207, 0.06858859508378334, 0.04491109459619458, 0.06982319930116576, 0.03489049585261095, 0.06265830498961966, 0.05295698494644707, 0.03548550126745975, 0.06421743361722532, 0.02529999999999999, 9.999999999998899e-05, 0.00029999999999996696, 0.06669999999999998, 0.024499999999999966, 0.02400000000000002, 0.14529999999999998, 0.07310000000000005, 0.00039999999999995595, 9.999999999998899e-05, 9.999999999998899e-05, 0.007399999999999962, 0.032299999999999995, 0.048699999999999966, 9.999999999998899e-05, 0.03249999999999997, 0.006754747757416024, 0.032299999999999995, 0.22082032439354093, 0.19298032777251062, 0.19253305132024678, 0.2055799784281095, 0.20415139631429258, 0.23054183195205913, 0.2006523808210423, 0.29039544101253445, 0.20038910139557964, 0.06846678287190755, 0.07855684999585133, 0.1406480369258103, 0.03996840984097694, 0.04071283917873225, 0.06063776290823275, 0.073263588849099, 0.08868867521935331, 0.06743478383218948, 0.13819729600499175, 0.123984536869721, 0.13451158777775418, 0.14114924056111855, 0.16229191769130413, 0.17048253583379813, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.18238915336234562, 0.1709174786537795, 0.16833854391740677, 0.189057953399409, 0.1769644640004372, 0.16316150333705282, 0.17377774300845283, 0.15246898481322946, 0.10716386357745067, 0.1614151299400408, 0.11876343300790904, 0.10978923820566577, 0.13610603218022022, 0.11701239065941771, 0.1722971734787465, 0.1518550850524818, 0.1229185550255375, 0.16996571318955755, 0.23601626264373876, 0.14933789585266954, 0.16154286057415324, 0.23210716714019453, 0.17628730745050003, 0.15536184127756003, 0.17686874938039077, 0.18659688261942042, 0.14195011305864957, 0.14578023879947632, 0.14006577975982915, 0.14198304211372648, 0.14379127967294647, 0.15351998536504197, 0.13697870895265896, 0.14203070229532166, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.16060493753908556, 0.19437354069769097, 0.1411966535145892, 0.16149939526223867, 0.24369660765090406, 0.17165345144855548, 0.15672808824074347, 0.16372797834227915, 0.16761248675320972, 0.1520401669978272, 0.1508798013499696, 0.3034445194460117, 0.17887872157465678, 0.17366570869048104, 0.2028812417861957, 0.16944140470640723, 0.2237305618099873, 0.17685058076392857, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17967047337437525, 0.188688463014553, 0.2429699908236106, 0.0947762948743548, 0.07308116822850497, 0.07555298902537866, 0.05186305593955043, 0.062375095939128045, 0.14039733981369573, 0.12046684496579019, 0.05491659739916577, 0.05062431923767596]}, "mutation_prompt": null}
{"id": "7e583115-6442-4033-8d58-11160745599d", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\nclass ImprovedHybridHarmonyPSO(HybridHarmonyPSO):\n    def evaluate_solutions_parallel(self, func, solutions):\n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            futures = [executor.submit(func, solution) for solution in solutions]\n            results = [future.result() for future in as_completed(futures)]\n        return results\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array(self.evaluate_solutions_parallel(func, harmony_memory))\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(self.evaluate_solutions_parallel(func, new_solutions))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array(self.evaluate_solutions_parallel(func, pbest))\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "ImprovedHybridHarmonyPSO", "description": "Implementing a parallel asynchronous evaluation strategy to speed up fitness evaluation and solution update process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6312e537-914a-4f39-9083-be03a7ad68bf", "metadata": {"aucs": [0.17106119617580662, 0.183164768591895, 0.197479246385302, 0.16845369514743413, 0.18818337038671906, 0.1743435064021196, 0.1785507992358102, 0.16281155072979714, 0.1900640255741839, 0.06599999999999995, 0.008199999999999985, 0.03810000000000002, 0.007399999999999962, 9.999999999998899e-05, 0.05740000000000001, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.04611047095548981, 0.046809513754464405, 0.04977074487583699, 0.1562798674125092, 0.0528437448134802, 0.09575461660818341, 0.058711088734964334, 0.025756673127183438, 0.07562830159195943, 0.0481463786277756, 0.04861513666111972, 0.04926774209271334, 0.05702674525995721, 0.052137356518779265, 0.03992308285267243, 0.03225126748607876, 0.48183854180125585, 0.5278745093405857, 0.5261593791440391, 0.556500796271775, 0.5726670685312326, 0.5069464340214569, 0.5803154798158203, 0.5300214696812768, 0.53386575924448, 0.06443028781665472, 0.07510940173832203, 0.10171882691615464, 0.053803800388950385, 0.10606928790512216, 0.05190122563388122, 0.10252066063771503, 0.08046864392575714, 0.0928167823142052, 0.13375175994902766, 0.25771507138995786, 0.1481850439168273, 0.15781678312503822, 0.1164135922493319, 0.13477630983343114, 0.14649742396249588, 0.19432038345520275, 0.13517209650225814, 9.999999999998899e-05, 0.06758189734965692, 0.003689195106263865, 0.04422137908095103, 0.08103101652691125, 0.0022454229096671163, 9.999999999998899e-05, 0.04249999999999998, 0.019872591751231683, 0.00458165826050172, 0.06957272857429797, 0.012758968564191675, 0.007159387613177359, 0.0434549217280622, 0.011860097762603106, 0.027645144410284983, 0.03960532873984468, 0.001276934196792201, 9.999999999998899e-05, 0.00770000000000004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1089, 9.999999999998899e-05, 0.015700000000000047, 0.08431122914033207, 0.06858859508378334, 0.04491109459619458, 0.06982319930116576, 0.03489049585261095, 0.06265830498961966, 0.05295698494644707, 0.03548550126745975, 0.06421743361722532, 0.02529999999999999, 9.999999999998899e-05, 0.00029999999999996696, 0.06669999999999998, 0.024499999999999966, 0.02400000000000002, 0.14529999999999998, 0.07310000000000005, 0.00039999999999995595, 9.999999999998899e-05, 9.999999999998899e-05, 0.007399999999999962, 0.032299999999999995, 0.048699999999999966, 9.999999999998899e-05, 0.03249999999999997, 0.006754747757416024, 0.032299999999999995, 0.22082032439354093, 0.19298032777251062, 0.19253305132024678, 0.2055799784281095, 0.20415139631429258, 0.23054183195205913, 0.2006523808210423, 0.29039544101253445, 0.20038910139557964, 0.06846678287190755, 0.07855684999585133, 0.1406480369258103, 0.03996840984097694, 0.04071283917873225, 0.06063776290823275, 0.073263588849099, 0.08868867521935331, 0.06743478383218948, 0.13819729600499175, 0.123984536869721, 0.13451158777775418, 0.14114924056111855, 0.16229191769130413, 0.17048253583379813, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.18238915336234562, 0.1709174786537795, 0.16833854391740677, 0.189057953399409, 0.1769644640004372, 0.16316150333705282, 0.17377774300845283, 0.15246898481322946, 0.10716386357745067, 0.1614151299400408, 0.11876343300790904, 0.10978923820566577, 0.13610603218022022, 0.11701239065941771, 0.1722971734787465, 0.1518550850524818, 0.1229185550255375, 0.16996571318955755, 0.23601626264373876, 0.14933789585266954, 0.16154286057415324, 0.23210716714019453, 0.17628730745050003, 0.15536184127756003, 0.17686874938039077, 0.18659688261942042, 0.14195011305864957, 0.14578023879947632, 0.14006577975982915, 0.14198304211372648, 0.14379127967294647, 0.15351998536504197, 0.13697870895265896, 0.14203070229532166, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.16060493753908556, 0.19437354069769097, 0.1411966535145892, 0.16149939526223867, 0.24369660765090406, 0.17165345144855548, 0.15672808824074347, 0.16372797834227915, 0.16761248675320972, 0.1520401669978272, 0.1508798013499696, 0.3034445194460117, 0.17887872157465678, 0.17366570869048104, 0.2028812417861957, 0.16944140470640723, 0.2237305618099873, 0.17685058076392857, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17967047337437525, 0.188688463014553, 0.2429699908236106, 0.0947762948743548, 0.07308116822850497, 0.07555298902537866, 0.05186305593955043, 0.062375095939128045, 0.14039733981369573, 0.12046684496579019, 0.05491659739916577, 0.05062431923767596]}, "mutation_prompt": null}
{"id": "9b20b328-23ed-44b8-b26d-2ad8b4b253b7", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\nclass ImprovedHybridHarmonyPSO(HybridHarmonyPSO):\n    def evaluate_solutions_parallel(self, func, solutions):\n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            futures = [executor.submit(func, solution) for solution in solutions]\n            results = [future.result() for future in as_completed(futures)]\n        return results\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array(self.evaluate_solutions_parallel(func, harmony_memory))\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(self.evaluate_solutions_parallel(func, new_solutions))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array(self.evaluate_solutions_parallel(func, pbest))\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "ImprovedHybridHarmonyPSO", "description": "Implementing a parallel asynchronous evaluation strategy to speed up fitness evaluation and solution update process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6312e537-914a-4f39-9083-be03a7ad68bf", "metadata": {"aucs": [0.17106119617580662, 0.183164768591895, 0.197479246385302, 0.16845369514743413, 0.18818337038671906, 0.1743435064021196, 0.1785507992358102, 0.16281155072979714, 0.1900640255741839, 0.06599999999999995, 0.008199999999999985, 0.03810000000000002, 0.007399999999999962, 9.999999999998899e-05, 0.05740000000000001, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.04611047095548981, 0.046809513754464405, 0.04977074487583699, 0.1562798674125092, 0.0528437448134802, 0.09575461660818341, 0.058711088734964334, 0.025756673127183438, 0.07562830159195943, 0.0481463786277756, 0.04861513666111972, 0.04926774209271334, 0.05702674525995721, 0.052137356518779265, 0.03992308285267243, 0.03225126748607876, 0.48183854180125585, 0.5278745093405857, 0.5261593791440391, 0.556500796271775, 0.5726670685312326, 0.5069464340214569, 0.5803154798158203, 0.5300214696812768, 0.53386575924448, 0.06443028781665472, 0.07510940173832203, 0.10171882691615464, 0.053803800388950385, 0.10606928790512216, 0.05190122563388122, 0.10252066063771503, 0.08046864392575714, 0.0928167823142052, 0.13375175994902766, 0.25771507138995786, 0.1481850439168273, 0.15781678312503822, 0.1164135922493319, 0.13477630983343114, 0.14649742396249588, 0.19432038345520275, 0.13517209650225814, 9.999999999998899e-05, 0.06758189734965692, 0.003689195106263865, 0.04422137908095103, 0.08103101652691125, 0.0022454229096671163, 9.999999999998899e-05, 0.04249999999999998, 0.019872591751231683, 0.00458165826050172, 0.06957272857429797, 0.012758968564191675, 0.007159387613177359, 0.0434549217280622, 0.011860097762603106, 0.027645144410284983, 0.03960532873984468, 0.001276934196792201, 9.999999999998899e-05, 0.00770000000000004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1089, 9.999999999998899e-05, 0.015700000000000047, 0.08431122914033207, 0.06858859508378334, 0.04491109459619458, 0.06982319930116576, 0.03489049585261095, 0.06265830498961966, 0.05295698494644707, 0.03548550126745975, 0.06421743361722532, 0.02529999999999999, 9.999999999998899e-05, 0.00029999999999996696, 0.06669999999999998, 0.024499999999999966, 0.02400000000000002, 0.14529999999999998, 0.07310000000000005, 0.00039999999999995595, 9.999999999998899e-05, 9.999999999998899e-05, 0.007399999999999962, 0.032299999999999995, 0.048699999999999966, 9.999999999998899e-05, 0.03249999999999997, 0.006754747757416024, 0.032299999999999995, 0.22082032439354093, 0.19298032777251062, 0.19253305132024678, 0.2055799784281095, 0.20415139631429258, 0.23054183195205913, 0.2006523808210423, 0.29039544101253445, 0.20038910139557964, 0.06846678287190755, 0.07855684999585133, 0.1406480369258103, 0.03996840984097694, 0.04071283917873225, 0.06063776290823275, 0.073263588849099, 0.08868867521935331, 0.06743478383218948, 0.13819729600499175, 0.123984536869721, 0.13451158777775418, 0.14114924056111855, 0.16229191769130413, 0.17048253583379813, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.18238915336234562, 0.1709174786537795, 0.16833854391740677, 0.189057953399409, 0.1769644640004372, 0.16316150333705282, 0.17377774300845283, 0.15246898481322946, 0.10716386357745067, 0.1614151299400408, 0.11876343300790904, 0.10978923820566577, 0.13610603218022022, 0.11701239065941771, 0.1722971734787465, 0.1518550850524818, 0.1229185550255375, 0.16996571318955755, 0.23601626264373876, 0.14933789585266954, 0.16154286057415324, 0.23210716714019453, 0.17628730745050003, 0.15536184127756003, 0.17686874938039077, 0.18659688261942042, 0.14195011305864957, 0.14578023879947632, 0.14006577975982915, 0.14198304211372648, 0.14379127967294647, 0.15351998536504197, 0.13697870895265896, 0.14203070229532166, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.16060493753908556, 0.19437354069769097, 0.1411966535145892, 0.16149939526223867, 0.24369660765090406, 0.17165345144855548, 0.15672808824074347, 0.16372797834227915, 0.16761248675320972, 0.1520401669978272, 0.1508798013499696, 0.3034445194460117, 0.17887872157465678, 0.17366570869048104, 0.2028812417861957, 0.16944140470640723, 0.2237305618099873, 0.17685058076392857, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17967047337437525, 0.188688463014553, 0.2429699908236106, 0.0947762948743548, 0.07308116822850497, 0.07555298902537866, 0.05186305593955043, 0.062375095939128045, 0.14039733981369573, 0.12046684496579019, 0.05491659739916577, 0.05062431923767596]}, "mutation_prompt": null}
{"id": "0bc8f56e-1ce2-4483-9742-ec1a86e178fb", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\nclass ImprovedHybridHarmonyPSO(HybridHarmonyPSO):\n    def evaluate_solutions_parallel(self, func, solutions):\n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            futures = [executor.submit(func, solution) for solution in solutions]\n            results = [future.result() for future in as_completed(futures)]\n        return results\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array(self.evaluate_solutions_parallel(func, harmony_memory))\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(self.evaluate_solutions_parallel(func, new_solutions))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array(self.evaluate_solutions_parallel(func, pbest))\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "ImprovedHybridHarmonyPSO", "description": "Implementing a parallel asynchronous evaluation strategy to speed up fitness evaluation and solution update process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6312e537-914a-4f39-9083-be03a7ad68bf", "metadata": {"aucs": [0.17106119617580662, 0.183164768591895, 0.197479246385302, 0.16845369514743413, 0.18818337038671906, 0.1743435064021196, 0.1785507992358102, 0.16281155072979714, 0.1900640255741839, 0.06599999999999995, 0.008199999999999985, 0.03810000000000002, 0.007399999999999962, 9.999999999998899e-05, 0.05740000000000001, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.04611047095548981, 0.046809513754464405, 0.04977074487583699, 0.1562798674125092, 0.0528437448134802, 0.09575461660818341, 0.058711088734964334, 0.025756673127183438, 0.07562830159195943, 0.0481463786277756, 0.04861513666111972, 0.04926774209271334, 0.05702674525995721, 0.052137356518779265, 0.03992308285267243, 0.03225126748607876, 0.48183854180125585, 0.5278745093405857, 0.5261593791440391, 0.556500796271775, 0.5726670685312326, 0.5069464340214569, 0.5803154798158203, 0.5300214696812768, 0.53386575924448, 0.06443028781665472, 0.07510940173832203, 0.10171882691615464, 0.053803800388950385, 0.10606928790512216, 0.05190122563388122, 0.10252066063771503, 0.08046864392575714, 0.0928167823142052, 0.13375175994902766, 0.25771507138995786, 0.1481850439168273, 0.15781678312503822, 0.1164135922493319, 0.13477630983343114, 0.14649742396249588, 0.19432038345520275, 0.13517209650225814, 9.999999999998899e-05, 0.06758189734965692, 0.003689195106263865, 0.04422137908095103, 0.08103101652691125, 0.0022454229096671163, 9.999999999998899e-05, 0.04249999999999998, 0.019872591751231683, 0.00458165826050172, 0.06957272857429797, 0.012758968564191675, 0.007159387613177359, 0.0434549217280622, 0.011860097762603106, 0.027645144410284983, 0.03960532873984468, 0.001276934196792201, 9.999999999998899e-05, 0.00770000000000004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1089, 9.999999999998899e-05, 0.015700000000000047, 0.08431122914033207, 0.06858859508378334, 0.04491109459619458, 0.06982319930116576, 0.03489049585261095, 0.06265830498961966, 0.05295698494644707, 0.03548550126745975, 0.06421743361722532, 0.02529999999999999, 9.999999999998899e-05, 0.00029999999999996696, 0.06669999999999998, 0.024499999999999966, 0.02400000000000002, 0.14529999999999998, 0.07310000000000005, 0.00039999999999995595, 9.999999999998899e-05, 9.999999999998899e-05, 0.007399999999999962, 0.032299999999999995, 0.048699999999999966, 9.999999999998899e-05, 0.03249999999999997, 0.006754747757416024, 0.032299999999999995, 0.22082032439354093, 0.19298032777251062, 0.19253305132024678, 0.2055799784281095, 0.20415139631429258, 0.23054183195205913, 0.2006523808210423, 0.29039544101253445, 0.20038910139557964, 0.06846678287190755, 0.07855684999585133, 0.1406480369258103, 0.03996840984097694, 0.04071283917873225, 0.06063776290823275, 0.073263588849099, 0.08868867521935331, 0.06743478383218948, 0.13819729600499175, 0.123984536869721, 0.13451158777775418, 0.14114924056111855, 0.16229191769130413, 0.17048253583379813, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.18238915336234562, 0.1709174786537795, 0.16833854391740677, 0.189057953399409, 0.1769644640004372, 0.16316150333705282, 0.17377774300845283, 0.15246898481322946, 0.10716386357745067, 0.1614151299400408, 0.11876343300790904, 0.10978923820566577, 0.13610603218022022, 0.11701239065941771, 0.1722971734787465, 0.1518550850524818, 0.1229185550255375, 0.16996571318955755, 0.23601626264373876, 0.14933789585266954, 0.16154286057415324, 0.23210716714019453, 0.17628730745050003, 0.15536184127756003, 0.17686874938039077, 0.18659688261942042, 0.14195011305864957, 0.14578023879947632, 0.14006577975982915, 0.14198304211372648, 0.14379127967294647, 0.15351998536504197, 0.13697870895265896, 0.14203070229532166, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.16060493753908556, 0.19437354069769097, 0.1411966535145892, 0.16149939526223867, 0.24369660765090406, 0.17165345144855548, 0.15672808824074347, 0.16372797834227915, 0.16761248675320972, 0.1520401669978272, 0.1508798013499696, 0.3034445194460117, 0.17887872157465678, 0.17366570869048104, 0.2028812417861957, 0.16944140470640723, 0.2237305618099873, 0.17685058076392857, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17967047337437525, 0.188688463014553, 0.2429699908236106, 0.0947762948743548, 0.07308116822850497, 0.07555298902537866, 0.05186305593955043, 0.062375095939128045, 0.14039733981369573, 0.12046684496579019, 0.05491659739916577, 0.05062431923767596]}, "mutation_prompt": null}
{"id": "90866792-5e85-481b-b7f0-2a3ec805eb18", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\nclass ImprovedHybridHarmonyPSO(HybridHarmonyPSO):\n    def evaluate_solutions_parallel(self, func, solutions):\n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            futures = [executor.submit(func, solution) for solution in solutions]\n            results = [future.result() for future in as_completed(futures)]\n        return results\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array(self.evaluate_solutions_parallel(func, harmony_memory))\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(self.evaluate_solutions_parallel(func, new_solutions))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array(self.evaluate_solutions_parallel(func, pbest))\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "ImprovedHybridHarmonyPSO", "description": "Implementing a parallel asynchronous evaluation strategy to speed up fitness evaluation and solution update process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6312e537-914a-4f39-9083-be03a7ad68bf", "metadata": {"aucs": [0.17106119617580662, 0.183164768591895, 0.197479246385302, 0.16845369514743413, 0.18818337038671906, 0.1743435064021196, 0.1785507992358102, 0.16281155072979714, 0.1900640255741839, 0.06599999999999995, 0.008199999999999985, 0.03810000000000002, 0.007399999999999962, 9.999999999998899e-05, 0.05740000000000001, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.04611047095548981, 0.046809513754464405, 0.04977074487583699, 0.1562798674125092, 0.0528437448134802, 0.09575461660818341, 0.058711088734964334, 0.025756673127183438, 0.07562830159195943, 0.0481463786277756, 0.04861513666111972, 0.04926774209271334, 0.05702674525995721, 0.052137356518779265, 0.03992308285267243, 0.03225126748607876, 0.48183854180125585, 0.5278745093405857, 0.5261593791440391, 0.556500796271775, 0.5726670685312326, 0.5069464340214569, 0.5803154798158203, 0.5300214696812768, 0.53386575924448, 0.06443028781665472, 0.07510940173832203, 0.10171882691615464, 0.053803800388950385, 0.10606928790512216, 0.05190122563388122, 0.10252066063771503, 0.08046864392575714, 0.0928167823142052, 0.13375175994902766, 0.25771507138995786, 0.1481850439168273, 0.15781678312503822, 0.1164135922493319, 0.13477630983343114, 0.14649742396249588, 0.19432038345520275, 0.13517209650225814, 9.999999999998899e-05, 0.06758189734965692, 0.003689195106263865, 0.04422137908095103, 0.08103101652691125, 0.0022454229096671163, 9.999999999998899e-05, 0.04249999999999998, 0.019872591751231683, 0.00458165826050172, 0.06957272857429797, 0.012758968564191675, 0.007159387613177359, 0.0434549217280622, 0.011860097762603106, 0.027645144410284983, 0.03960532873984468, 0.001276934196792201, 9.999999999998899e-05, 0.00770000000000004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1089, 9.999999999998899e-05, 0.015700000000000047, 0.08431122914033207, 0.06858859508378334, 0.04491109459619458, 0.06982319930116576, 0.03489049585261095, 0.06265830498961966, 0.05295698494644707, 0.03548550126745975, 0.06421743361722532, 0.02529999999999999, 9.999999999998899e-05, 0.00029999999999996696, 0.06669999999999998, 0.024499999999999966, 0.02400000000000002, 0.14529999999999998, 0.07310000000000005, 0.00039999999999995595, 9.999999999998899e-05, 9.999999999998899e-05, 0.007399999999999962, 0.032299999999999995, 0.048699999999999966, 9.999999999998899e-05, 0.03249999999999997, 0.006754747757416024, 0.032299999999999995, 0.22082032439354093, 0.19298032777251062, 0.19253305132024678, 0.2055799784281095, 0.20415139631429258, 0.23054183195205913, 0.2006523808210423, 0.29039544101253445, 0.20038910139557964, 0.06846678287190755, 0.07855684999585133, 0.1406480369258103, 0.03996840984097694, 0.04071283917873225, 0.06063776290823275, 0.073263588849099, 0.08868867521935331, 0.06743478383218948, 0.13819729600499175, 0.123984536869721, 0.13451158777775418, 0.14114924056111855, 0.16229191769130413, 0.17048253583379813, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.18238915336234562, 0.1709174786537795, 0.16833854391740677, 0.189057953399409, 0.1769644640004372, 0.16316150333705282, 0.17377774300845283, 0.15246898481322946, 0.10716386357745067, 0.1614151299400408, 0.11876343300790904, 0.10978923820566577, 0.13610603218022022, 0.11701239065941771, 0.1722971734787465, 0.1518550850524818, 0.1229185550255375, 0.16996571318955755, 0.23601626264373876, 0.14933789585266954, 0.16154286057415324, 0.23210716714019453, 0.17628730745050003, 0.15536184127756003, 0.17686874938039077, 0.18659688261942042, 0.14195011305864957, 0.14578023879947632, 0.14006577975982915, 0.14198304211372648, 0.14379127967294647, 0.15351998536504197, 0.13697870895265896, 0.14203070229532166, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.16060493753908556, 0.19437354069769097, 0.1411966535145892, 0.16149939526223867, 0.24369660765090406, 0.17165345144855548, 0.15672808824074347, 0.16372797834227915, 0.16761248675320972, 0.1520401669978272, 0.1508798013499696, 0.3034445194460117, 0.17887872157465678, 0.17366570869048104, 0.2028812417861957, 0.16944140470640723, 0.2237305618099873, 0.17685058076392857, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17967047337437525, 0.188688463014553, 0.2429699908236106, 0.0947762948743548, 0.07308116822850497, 0.07555298902537866, 0.05186305593955043, 0.062375095939128045, 0.14039733981369573, 0.12046684496579019, 0.05491659739916577, 0.05062431923767596]}, "mutation_prompt": null}
{"id": "3708021d-ec24-48b6-94ab-af721e648796", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\nclass ImprovedHybridHarmonyPSO(HybridHarmonyPSO):\n    def evaluate_solutions_parallel(self, func, solutions):\n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            futures = [executor.submit(func, solution) for solution in solutions]\n            results = [future.result() for future in as_completed(futures)]\n        return results\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array(self.evaluate_solutions_parallel(func, harmony_memory))\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(self.evaluate_solutions_parallel(func, new_solutions))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array(self.evaluate_solutions_parallel(func, pbest))\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "ImprovedHybridHarmonyPSO", "description": "Implementing a parallel asynchronous evaluation strategy to speed up fitness evaluation and solution update process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6312e537-914a-4f39-9083-be03a7ad68bf", "metadata": {"aucs": [0.17106119617580662, 0.183164768591895, 0.197479246385302, 0.16845369514743413, 0.18818337038671906, 0.1743435064021196, 0.1785507992358102, 0.16281155072979714, 0.1900640255741839, 0.06599999999999995, 0.008199999999999985, 0.03810000000000002, 0.007399999999999962, 9.999999999998899e-05, 0.05740000000000001, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.04611047095548981, 0.046809513754464405, 0.04977074487583699, 0.1562798674125092, 0.0528437448134802, 0.09575461660818341, 0.058711088734964334, 0.025756673127183438, 0.07562830159195943, 0.0481463786277756, 0.04861513666111972, 0.04926774209271334, 0.05702674525995721, 0.052137356518779265, 0.03992308285267243, 0.03225126748607876, 0.48183854180125585, 0.5278745093405857, 0.5261593791440391, 0.556500796271775, 0.5726670685312326, 0.5069464340214569, 0.5803154798158203, 0.5300214696812768, 0.53386575924448, 0.06443028781665472, 0.07510940173832203, 0.10171882691615464, 0.053803800388950385, 0.10606928790512216, 0.05190122563388122, 0.10252066063771503, 0.08046864392575714, 0.0928167823142052, 0.13375175994902766, 0.25771507138995786, 0.1481850439168273, 0.15781678312503822, 0.1164135922493319, 0.13477630983343114, 0.14649742396249588, 0.19432038345520275, 0.13517209650225814, 9.999999999998899e-05, 0.06758189734965692, 0.003689195106263865, 0.04422137908095103, 0.08103101652691125, 0.0022454229096671163, 9.999999999998899e-05, 0.04249999999999998, 0.019872591751231683, 0.00458165826050172, 0.06957272857429797, 0.012758968564191675, 0.007159387613177359, 0.0434549217280622, 0.011860097762603106, 0.027645144410284983, 0.03960532873984468, 0.001276934196792201, 9.999999999998899e-05, 0.00770000000000004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1089, 9.999999999998899e-05, 0.015700000000000047, 0.08431122914033207, 0.06858859508378334, 0.04491109459619458, 0.06982319930116576, 0.03489049585261095, 0.06265830498961966, 0.05295698494644707, 0.03548550126745975, 0.06421743361722532, 0.02529999999999999, 9.999999999998899e-05, 0.00029999999999996696, 0.06669999999999998, 0.024499999999999966, 0.02400000000000002, 0.14529999999999998, 0.07310000000000005, 0.00039999999999995595, 9.999999999998899e-05, 9.999999999998899e-05, 0.007399999999999962, 0.032299999999999995, 0.048699999999999966, 9.999999999998899e-05, 0.03249999999999997, 0.006754747757416024, 0.032299999999999995, 0.22082032439354093, 0.19298032777251062, 0.19253305132024678, 0.2055799784281095, 0.20415139631429258, 0.23054183195205913, 0.2006523808210423, 0.29039544101253445, 0.20038910139557964, 0.06846678287190755, 0.07855684999585133, 0.1406480369258103, 0.03996840984097694, 0.04071283917873225, 0.06063776290823275, 0.073263588849099, 0.08868867521935331, 0.06743478383218948, 0.13819729600499175, 0.123984536869721, 0.13451158777775418, 0.14114924056111855, 0.16229191769130413, 0.17048253583379813, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.18238915336234562, 0.1709174786537795, 0.16833854391740677, 0.189057953399409, 0.1769644640004372, 0.16316150333705282, 0.17377774300845283, 0.15246898481322946, 0.10716386357745067, 0.1614151299400408, 0.11876343300790904, 0.10978923820566577, 0.13610603218022022, 0.11701239065941771, 0.1722971734787465, 0.1518550850524818, 0.1229185550255375, 0.16996571318955755, 0.23601626264373876, 0.14933789585266954, 0.16154286057415324, 0.23210716714019453, 0.17628730745050003, 0.15536184127756003, 0.17686874938039077, 0.18659688261942042, 0.14195011305864957, 0.14578023879947632, 0.14006577975982915, 0.14198304211372648, 0.14379127967294647, 0.15351998536504197, 0.13697870895265896, 0.14203070229532166, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.16060493753908556, 0.19437354069769097, 0.1411966535145892, 0.16149939526223867, 0.24369660765090406, 0.17165345144855548, 0.15672808824074347, 0.16372797834227915, 0.16761248675320972, 0.1520401669978272, 0.1508798013499696, 0.3034445194460117, 0.17887872157465678, 0.17366570869048104, 0.2028812417861957, 0.16944140470640723, 0.2237305618099873, 0.17685058076392857, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17967047337437525, 0.188688463014553, 0.2429699908236106, 0.0947762948743548, 0.07308116822850497, 0.07555298902537866, 0.05186305593955043, 0.062375095939128045, 0.14039733981369573, 0.12046684496579019, 0.05491659739916577, 0.05062431923767596]}, "mutation_prompt": null}
{"id": "c3e32b33-82c6-46c7-b81f-31d4d09aed85", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\nclass ImprovedHybridHarmonyPSO(HybridHarmonyPSO):\n    def evaluate_solutions_parallel(self, func, solutions):\n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            futures = [executor.submit(func, solution) for solution in solutions]\n            results = [future.result() for future in as_completed(futures)]\n        return results\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array(self.evaluate_solutions_parallel(func, harmony_memory))\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(self.evaluate_solutions_parallel(func, new_solutions))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array(self.evaluate_solutions_parallel(func, pbest))\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "ImprovedHybridHarmonyPSO", "description": "Implementing a parallel asynchronous evaluation strategy to speed up fitness evaluation and solution update process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6312e537-914a-4f39-9083-be03a7ad68bf", "metadata": {"aucs": [0.17106119617580662, 0.183164768591895, 0.197479246385302, 0.16845369514743413, 0.18818337038671906, 0.1743435064021196, 0.1785507992358102, 0.16281155072979714, 0.1900640255741839, 0.06599999999999995, 0.008199999999999985, 0.03810000000000002, 0.007399999999999962, 9.999999999998899e-05, 0.05740000000000001, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.04611047095548981, 0.046809513754464405, 0.04977074487583699, 0.1562798674125092, 0.0528437448134802, 0.09575461660818341, 0.058711088734964334, 0.025756673127183438, 0.07562830159195943, 0.0481463786277756, 0.04861513666111972, 0.04926774209271334, 0.05702674525995721, 0.052137356518779265, 0.03992308285267243, 0.03225126748607876, 0.48183854180125585, 0.5278745093405857, 0.5261593791440391, 0.556500796271775, 0.5726670685312326, 0.5069464340214569, 0.5803154798158203, 0.5300214696812768, 0.53386575924448, 0.06443028781665472, 0.07510940173832203, 0.10171882691615464, 0.053803800388950385, 0.10606928790512216, 0.05190122563388122, 0.10252066063771503, 0.08046864392575714, 0.0928167823142052, 0.13375175994902766, 0.25771507138995786, 0.1481850439168273, 0.15781678312503822, 0.1164135922493319, 0.13477630983343114, 0.14649742396249588, 0.19432038345520275, 0.13517209650225814, 9.999999999998899e-05, 0.06758189734965692, 0.003689195106263865, 0.04422137908095103, 0.08103101652691125, 0.0022454229096671163, 9.999999999998899e-05, 0.04249999999999998, 0.019872591751231683, 0.00458165826050172, 0.06957272857429797, 0.012758968564191675, 0.007159387613177359, 0.0434549217280622, 0.011860097762603106, 0.027645144410284983, 0.03960532873984468, 0.001276934196792201, 9.999999999998899e-05, 0.00770000000000004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1089, 9.999999999998899e-05, 0.015700000000000047, 0.08431122914033207, 0.06858859508378334, 0.04491109459619458, 0.06982319930116576, 0.03489049585261095, 0.06265830498961966, 0.05295698494644707, 0.03548550126745975, 0.06421743361722532, 0.02529999999999999, 9.999999999998899e-05, 0.00029999999999996696, 0.06669999999999998, 0.024499999999999966, 0.02400000000000002, 0.14529999999999998, 0.07310000000000005, 0.00039999999999995595, 9.999999999998899e-05, 9.999999999998899e-05, 0.007399999999999962, 0.032299999999999995, 0.048699999999999966, 9.999999999998899e-05, 0.03249999999999997, 0.006754747757416024, 0.032299999999999995, 0.22082032439354093, 0.19298032777251062, 0.19253305132024678, 0.2055799784281095, 0.20415139631429258, 0.23054183195205913, 0.2006523808210423, 0.29039544101253445, 0.20038910139557964, 0.06846678287190755, 0.07855684999585133, 0.1406480369258103, 0.03996840984097694, 0.04071283917873225, 0.06063776290823275, 0.073263588849099, 0.08868867521935331, 0.06743478383218948, 0.13819729600499175, 0.123984536869721, 0.13451158777775418, 0.14114924056111855, 0.16229191769130413, 0.17048253583379813, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.18238915336234562, 0.1709174786537795, 0.16833854391740677, 0.189057953399409, 0.1769644640004372, 0.16316150333705282, 0.17377774300845283, 0.15246898481322946, 0.10716386357745067, 0.1614151299400408, 0.11876343300790904, 0.10978923820566577, 0.13610603218022022, 0.11701239065941771, 0.1722971734787465, 0.1518550850524818, 0.1229185550255375, 0.16996571318955755, 0.23601626264373876, 0.14933789585266954, 0.16154286057415324, 0.23210716714019453, 0.17628730745050003, 0.15536184127756003, 0.17686874938039077, 0.18659688261942042, 0.14195011305864957, 0.14578023879947632, 0.14006577975982915, 0.14198304211372648, 0.14379127967294647, 0.15351998536504197, 0.13697870895265896, 0.14203070229532166, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.16060493753908556, 0.19437354069769097, 0.1411966535145892, 0.16149939526223867, 0.24369660765090406, 0.17165345144855548, 0.15672808824074347, 0.16372797834227915, 0.16761248675320972, 0.1520401669978272, 0.1508798013499696, 0.3034445194460117, 0.17887872157465678, 0.17366570869048104, 0.2028812417861957, 0.16944140470640723, 0.2237305618099873, 0.17685058076392857, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17967047337437525, 0.188688463014553, 0.2429699908236106, 0.0947762948743548, 0.07308116822850497, 0.07555298902537866, 0.05186305593955043, 0.062375095939128045, 0.14039733981369573, 0.12046684496579019, 0.05491659739916577, 0.05062431923767596]}, "mutation_prompt": null}
{"id": "2d9feaa3-0d1a-4181-a7b0-ac568e9451e5", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\nclass ImprovedHybridHarmonyPSO(HybridHarmonyPSO):\n    def evaluate_solutions_parallel(self, func, solutions):\n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            futures = [executor.submit(func, solution) for solution in solutions]\n            results = [future.result() for future in as_completed(futures)]\n        return results\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array(self.evaluate_solutions_parallel(func, harmony_memory))\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(self.evaluate_solutions_parallel(func, new_solutions))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array(self.evaluate_solutions_parallel(func, pbest))\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "ImprovedHybridHarmonyPSO", "description": "Implementing a parallel asynchronous evaluation strategy to speed up fitness evaluation and solution update process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6312e537-914a-4f39-9083-be03a7ad68bf", "metadata": {"aucs": [0.17106119617580662, 0.183164768591895, 0.197479246385302, 0.16845369514743413, 0.18818337038671906, 0.1743435064021196, 0.1785507992358102, 0.16281155072979714, 0.1900640255741839, 0.06599999999999995, 0.008199999999999985, 0.03810000000000002, 0.007399999999999962, 9.999999999998899e-05, 0.05740000000000001, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.04611047095548981, 0.046809513754464405, 0.04977074487583699, 0.1562798674125092, 0.0528437448134802, 0.09575461660818341, 0.058711088734964334, 0.025756673127183438, 0.07562830159195943, 0.0481463786277756, 0.04861513666111972, 0.04926774209271334, 0.05702674525995721, 0.052137356518779265, 0.03992308285267243, 0.03225126748607876, 0.48183854180125585, 0.5278745093405857, 0.5261593791440391, 0.556500796271775, 0.5726670685312326, 0.5069464340214569, 0.5803154798158203, 0.5300214696812768, 0.53386575924448, 0.06443028781665472, 0.07510940173832203, 0.10171882691615464, 0.053803800388950385, 0.10606928790512216, 0.05190122563388122, 0.10252066063771503, 0.08046864392575714, 0.0928167823142052, 0.13375175994902766, 0.25771507138995786, 0.1481850439168273, 0.15781678312503822, 0.1164135922493319, 0.13477630983343114, 0.14649742396249588, 0.19432038345520275, 0.13517209650225814, 9.999999999998899e-05, 0.06758189734965692, 0.003689195106263865, 0.04422137908095103, 0.08103101652691125, 0.0022454229096671163, 9.999999999998899e-05, 0.04249999999999998, 0.019872591751231683, 0.00458165826050172, 0.06957272857429797, 0.012758968564191675, 0.007159387613177359, 0.0434549217280622, 0.011860097762603106, 0.027645144410284983, 0.03960532873984468, 0.001276934196792201, 9.999999999998899e-05, 0.00770000000000004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1089, 9.999999999998899e-05, 0.015700000000000047, 0.08431122914033207, 0.06858859508378334, 0.04491109459619458, 0.06982319930116576, 0.03489049585261095, 0.06265830498961966, 0.05295698494644707, 0.03548550126745975, 0.06421743361722532, 0.02529999999999999, 9.999999999998899e-05, 0.00029999999999996696, 0.06669999999999998, 0.024499999999999966, 0.02400000000000002, 0.14529999999999998, 0.07310000000000005, 0.00039999999999995595, 9.999999999998899e-05, 9.999999999998899e-05, 0.007399999999999962, 0.032299999999999995, 0.048699999999999966, 9.999999999998899e-05, 0.03249999999999997, 0.006754747757416024, 0.032299999999999995, 0.22082032439354093, 0.19298032777251062, 0.19253305132024678, 0.2055799784281095, 0.20415139631429258, 0.23054183195205913, 0.2006523808210423, 0.29039544101253445, 0.20038910139557964, 0.06846678287190755, 0.07855684999585133, 0.1406480369258103, 0.03996840984097694, 0.04071283917873225, 0.06063776290823275, 0.073263588849099, 0.08868867521935331, 0.06743478383218948, 0.13819729600499175, 0.123984536869721, 0.13451158777775418, 0.14114924056111855, 0.16229191769130413, 0.17048253583379813, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.18238915336234562, 0.1709174786537795, 0.16833854391740677, 0.189057953399409, 0.1769644640004372, 0.16316150333705282, 0.17377774300845283, 0.15246898481322946, 0.10716386357745067, 0.1614151299400408, 0.11876343300790904, 0.10978923820566577, 0.13610603218022022, 0.11701239065941771, 0.1722971734787465, 0.1518550850524818, 0.1229185550255375, 0.16996571318955755, 0.23601626264373876, 0.14933789585266954, 0.16154286057415324, 0.23210716714019453, 0.17628730745050003, 0.15536184127756003, 0.17686874938039077, 0.18659688261942042, 0.14195011305864957, 0.14578023879947632, 0.14006577975982915, 0.14198304211372648, 0.14379127967294647, 0.15351998536504197, 0.13697870895265896, 0.14203070229532166, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.16060493753908556, 0.19437354069769097, 0.1411966535145892, 0.16149939526223867, 0.24369660765090406, 0.17165345144855548, 0.15672808824074347, 0.16372797834227915, 0.16761248675320972, 0.1520401669978272, 0.1508798013499696, 0.3034445194460117, 0.17887872157465678, 0.17366570869048104, 0.2028812417861957, 0.16944140470640723, 0.2237305618099873, 0.17685058076392857, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17967047337437525, 0.188688463014553, 0.2429699908236106, 0.0947762948743548, 0.07308116822850497, 0.07555298902537866, 0.05186305593955043, 0.062375095939128045, 0.14039733981369573, 0.12046684496579019, 0.05491659739916577, 0.05062431923767596]}, "mutation_prompt": null}
{"id": "24733e4d-f20b-424c-9f2a-fc9d29284d79", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\nclass ImprovedHybridHarmonyPSO(HybridHarmonyPSO):\n    def evaluate_solutions_parallel(self, func, solutions):\n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            futures = [executor.submit(func, solution) for solution in solutions]\n            results = [future.result() for future in as_completed(futures)]\n        return results\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array(self.evaluate_solutions_parallel(func, harmony_memory))\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(self.evaluate_solutions_parallel(func, new_solutions))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array(self.evaluate_solutions_parallel(func, pbest))\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "ImprovedHybridHarmonyPSO", "description": "Implementing a parallel asynchronous evaluation strategy to speed up fitness evaluation and solution update process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6312e537-914a-4f39-9083-be03a7ad68bf", "metadata": {"aucs": [0.17106119617580662, 0.183164768591895, 0.197479246385302, 0.16845369514743413, 0.18818337038671906, 0.1743435064021196, 0.1785507992358102, 0.16281155072979714, 0.1900640255741839, 0.06599999999999995, 0.008199999999999985, 0.03810000000000002, 0.007399999999999962, 9.999999999998899e-05, 0.05740000000000001, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.04611047095548981, 0.046809513754464405, 0.04977074487583699, 0.1562798674125092, 0.0528437448134802, 0.09575461660818341, 0.058711088734964334, 0.025756673127183438, 0.07562830159195943, 0.0481463786277756, 0.04861513666111972, 0.04926774209271334, 0.05702674525995721, 0.052137356518779265, 0.03992308285267243, 0.03225126748607876, 0.48183854180125585, 0.5278745093405857, 0.5261593791440391, 0.556500796271775, 0.5726670685312326, 0.5069464340214569, 0.5803154798158203, 0.5300214696812768, 0.53386575924448, 0.06443028781665472, 0.07510940173832203, 0.10171882691615464, 0.053803800388950385, 0.10606928790512216, 0.05190122563388122, 0.10252066063771503, 0.08046864392575714, 0.0928167823142052, 0.13375175994902766, 0.25771507138995786, 0.1481850439168273, 0.15781678312503822, 0.1164135922493319, 0.13477630983343114, 0.14649742396249588, 0.19432038345520275, 0.13517209650225814, 9.999999999998899e-05, 0.06758189734965692, 0.003689195106263865, 0.04422137908095103, 0.08103101652691125, 0.0022454229096671163, 9.999999999998899e-05, 0.04249999999999998, 0.019872591751231683, 0.00458165826050172, 0.06957272857429797, 0.012758968564191675, 0.007159387613177359, 0.0434549217280622, 0.011860097762603106, 0.027645144410284983, 0.03960532873984468, 0.001276934196792201, 9.999999999998899e-05, 0.00770000000000004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1089, 9.999999999998899e-05, 0.015700000000000047, 0.08431122914033207, 0.06858859508378334, 0.04491109459619458, 0.06982319930116576, 0.03489049585261095, 0.06265830498961966, 0.05295698494644707, 0.03548550126745975, 0.06421743361722532, 0.02529999999999999, 9.999999999998899e-05, 0.00029999999999996696, 0.06669999999999998, 0.024499999999999966, 0.02400000000000002, 0.14529999999999998, 0.07310000000000005, 0.00039999999999995595, 9.999999999998899e-05, 9.999999999998899e-05, 0.007399999999999962, 0.032299999999999995, 0.048699999999999966, 9.999999999998899e-05, 0.03249999999999997, 0.006754747757416024, 0.032299999999999995, 0.22082032439354093, 0.19298032777251062, 0.19253305132024678, 0.2055799784281095, 0.20415139631429258, 0.23054183195205913, 0.2006523808210423, 0.29039544101253445, 0.20038910139557964, 0.06846678287190755, 0.07855684999585133, 0.1406480369258103, 0.03996840984097694, 0.04071283917873225, 0.06063776290823275, 0.073263588849099, 0.08868867521935331, 0.06743478383218948, 0.13819729600499175, 0.123984536869721, 0.13451158777775418, 0.14114924056111855, 0.16229191769130413, 0.17048253583379813, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.18238915336234562, 0.1709174786537795, 0.16833854391740677, 0.189057953399409, 0.1769644640004372, 0.16316150333705282, 0.17377774300845283, 0.15246898481322946, 0.10716386357745067, 0.1614151299400408, 0.11876343300790904, 0.10978923820566577, 0.13610603218022022, 0.11701239065941771, 0.1722971734787465, 0.1518550850524818, 0.1229185550255375, 0.16996571318955755, 0.23601626264373876, 0.14933789585266954, 0.16154286057415324, 0.23210716714019453, 0.17628730745050003, 0.15536184127756003, 0.17686874938039077, 0.18659688261942042, 0.14195011305864957, 0.14578023879947632, 0.14006577975982915, 0.14198304211372648, 0.14379127967294647, 0.15351998536504197, 0.13697870895265896, 0.14203070229532166, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.16060493753908556, 0.19437354069769097, 0.1411966535145892, 0.16149939526223867, 0.24369660765090406, 0.17165345144855548, 0.15672808824074347, 0.16372797834227915, 0.16761248675320972, 0.1520401669978272, 0.1508798013499696, 0.3034445194460117, 0.17887872157465678, 0.17366570869048104, 0.2028812417861957, 0.16944140470640723, 0.2237305618099873, 0.17685058076392857, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17967047337437525, 0.188688463014553, 0.2429699908236106, 0.0947762948743548, 0.07308116822850497, 0.07555298902537866, 0.05186305593955043, 0.062375095939128045, 0.14039733981369573, 0.12046684496579019, 0.05491659739916577, 0.05062431923767596]}, "mutation_prompt": null}
{"id": "6a640502-500e-403f-95d9-a01b863e94c1", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\nclass ImprovedHybridHarmonyPSO(HybridHarmonyPSO):\n    def evaluate_solutions_parallel(self, func, solutions):\n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            futures = [executor.submit(func, solution) for solution in solutions]\n            results = [future.result() for future in as_completed(futures)]\n        return results\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array(self.evaluate_solutions_parallel(func, harmony_memory))\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(self.evaluate_solutions_parallel(func, new_solutions))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array(self.evaluate_solutions_parallel(func, pbest))\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + 0.5 * self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + 0.5 * self.pso_c2 * r2 * (gbest - pso_swarm[i])  # Accelerated convergence by adjusting PSO parameters\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "ImprovedHybridHarmonyPSO", "description": "Implement accelerated convergence by introducing a dynamic adjustment of PSO parameters based on fitness improvement.", "configspace": "", "generation": 88, "fitness": 0.12125173199019924, "feedback": "The algorithm ImprovedHybridHarmonyPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.11.", "error": "", "parent_id": "6312e537-914a-4f39-9083-be03a7ad68bf", "metadata": {"aucs": [0.1709404397982207, 0.19045810003663832, 0.170257377687277, 0.17477518006892168, 0.20937441446713878, 0.1743435064021196, 0.1785507992358102, 0.16393325913143786, 0.19126842712450554, 9.999999999998899e-05, 0.056599999999999984, 0.02429999999999999, 0.007099999999999995, 9.999999999998899e-05, 0.07110000000000005, 0.20940000000000003, 0.0413, 0.013299999999999979, 0.04250791821503552, 0.046372490884433515, 0.037985201593719986, 0.0619997704880898, 0.03732066520661048, 0.044535914738977556, 0.11363208505690436, 0.11211160267082831, 0.058711088734964334, 0.025785843545155562, 0.030929276720888965, 0.06371147287006662, 0.025965940872886173, 0.0721554443972966, 0.05702674525995721, 0.044550763635585966, 0.03992308285267243, 0.05988538148897826, 0.5293805974544883, 0.48109944742959787, 0.38736360888721955, 0.4778432805627728, 0.5517734037898457, 0.5343367733157735, 0.5331416145516295, 0.5389601320996569, 0.5326826825982457, 0.06443028781665472, 0.07510940173832203, 0.10171882691615464, 0.053952969800360684, 0.06778457845597585, 0.05190122563388122, 0.11706970998084709, 0.057034870011662187, 0.11483249790908556, 0.14684770892347643, 0.21974853226842128, 0.1481850439168273, 0.10375357913913519, 0.0983224372146344, 0.16832050262320442, 0.1997099744843056, 0.1368487698841222, 0.1378702456937363, 9.999999999998899e-05, 0.00039999999999995595, 0.05228919510622476, 9.999999999998899e-05, 0.0837, 0.0479330158043344, 0.008299999999999974, 9.999999999998899e-05, 0.019872591751231683, 0.06083559316355569, 0.06957272857429797, 0.05523795018688127, 0.007159387613177359, 0.035362057023575866, 0.011860097762603106, 0.0307564284698294, 0.006868189490159771, 0.0013070678448446893, 9.999999999998899e-05, 0.10150000000000003, 9.999999999998899e-05, 9.999999999998899e-05, 0.022599999999999953, 0.01649999999999996, 9.999999999998899e-05, 9.999999999998899e-05, 0.0464, 0.05293794841224442, 0.1533272164531354, 0.048232022089733095, 0.0701342277261292, 0.026730708648839974, 0.055770453722678415, 0.06015698494644717, 0.0339060597669375, 0.06421743361722532, 0.007900000000000018, 0.00019999999999997797, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03190000000000004, 9.999999999998899e-05, 0.01639999999999997, 9.999999999998899e-05, 0.032299999999999995, 0.05879999999999996, 0.04300000000000004, 0.03169999999999995, 9.999999999998899e-05, 9.999999999998899e-05, 0.06940000000000002, 0.006754747757416024, 0.05579999999999996, 0.22782393994893702, 0.20988076848281, 0.18622521244388468, 0.2055799784281095, 0.19045581186708038, 0.20724700933075846, 0.1978530039868921, 0.19561791054586497, 0.19723136143737496, 0.04680390455819994, 0.05087573945770474, 0.04401887178405428, 0.03996840984097694, 0.03847325190279738, 0.053474168376233866, 0.09522221189684676, 0.052306493818867095, 0.05229792848072812, 0.22255802628998, 0.12407077450742965, 0.1291916243989708, 0.14106301975521696, 0.14115194246620144, 0.12439502916632517, 0.14963138758589234, 0.14861619065631115, 0.12939561608884176, 0.16581136048861322, 0.15950729452706836, 0.17107389778365212, 0.16779352461211916, 0.19552720302139281, 0.19730019391711207, 0.16244860231539715, 0.1998024546352275, 0.1926059775900245, 0.12236267980789539, 0.14073847751571034, 0.11842234791355877, 0.11382862725053888, 0.1864432948632283, 0.13339767753868015, 0.1047405734700314, 0.1237427242099084, 0.12292122459837118, 0.1501573743228437, 0.16233450221944246, 0.17909741144589408, 0.16159755361834593, 0.14771356712590422, 0.19304646911123668, 0.14860716125581908, 0.26677646375146014, 0.18277724523822958, 0.14205011305864956, 0.14578023879947632, 0.14726577975983224, 0.15013196144542418, 0.16072660326611188, 0.15282202985716775, 0.13697870895265896, 0.14164044590726022, 0.16207881422481074, 0.21718764282316905, 0.16679477618376493, 0.16657141521439822, 0.16058996740871911, 0.21614507042233588, 0.1507442851495966, 0.18150597019568304, 0.2071276875751039, 0.21386256500335543, 0.15672808824074347, 0.1580636080386837, 0.16050779395916304, 0.17311037081612668, 0.14870682596182816, 0.16045374486843178, 0.16855947523118198, 0.2197678494937626, 0.2028812417861957, 0.176758241106019, 0.21272780634931865, 0.17521172209778724, 0.20048672851852112, 0.2135749380374129, 0.18533960778985514, 0.17594512205278, 0.2093479654378202, 0.2282085701174773, 0.058344077551123696, 0.10314510571701907, 0.09446031777370612, 0.07438945040165057, 0.05934830659822565, 0.0533550031798079, 0.07532529613519179, 0.05491659739916577, 0.046843706108865235]}, "mutation_prompt": null}
{"id": "118d0d8c-39b3-41f3-8a71-0b5e94332c8d", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\nclass ImprovedHybridHarmonyPSO(HybridHarmonyPSO):\n    def evaluate_solutions_parallel(self, func, solutions):\n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            futures = [executor.submit(func, solution) for solution in solutions]\n            results = [future.result() for future in as_completed(futures)]\n        return results\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array(self.evaluate_solutions_parallel(func, harmony_memory))\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(self.evaluate_solutions_parallel(func, new_solutions))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array(self.evaluate_solutions_parallel(func, pbest))\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "ImprovedHybridHarmonyPSO", "description": "Implementing a parallel asynchronous evaluation strategy to speed up fitness evaluation and solution update process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6312e537-914a-4f39-9083-be03a7ad68bf", "metadata": {"aucs": [0.17106119617580662, 0.183164768591895, 0.197479246385302, 0.16845369514743413, 0.18818337038671906, 0.1743435064021196, 0.1785507992358102, 0.16281155072979714, 0.1900640255741839, 0.06599999999999995, 0.008199999999999985, 0.03810000000000002, 0.007399999999999962, 9.999999999998899e-05, 0.05740000000000001, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.04611047095548981, 0.046809513754464405, 0.04977074487583699, 0.1562798674125092, 0.0528437448134802, 0.09575461660818341, 0.058711088734964334, 0.025756673127183438, 0.07562830159195943, 0.0481463786277756, 0.04861513666111972, 0.04926774209271334, 0.05702674525995721, 0.052137356518779265, 0.03992308285267243, 0.03225126748607876, 0.48183854180125585, 0.5278745093405857, 0.5261593791440391, 0.556500796271775, 0.5726670685312326, 0.5069464340214569, 0.5803154798158203, 0.5300214696812768, 0.53386575924448, 0.06443028781665472, 0.07510940173832203, 0.10171882691615464, 0.053803800388950385, 0.10606928790512216, 0.05190122563388122, 0.10252066063771503, 0.08046864392575714, 0.0928167823142052, 0.13375175994902766, 0.25771507138995786, 0.1481850439168273, 0.15781678312503822, 0.1164135922493319, 0.13477630983343114, 0.14649742396249588, 0.19432038345520275, 0.13517209650225814, 9.999999999998899e-05, 0.06758189734965692, 0.003689195106263865, 0.04422137908095103, 0.08103101652691125, 0.0022454229096671163, 9.999999999998899e-05, 0.04249999999999998, 0.019872591751231683, 0.00458165826050172, 0.06957272857429797, 0.012758968564191675, 0.007159387613177359, 0.0434549217280622, 0.011860097762603106, 0.027645144410284983, 0.03960532873984468, 0.001276934196792201, 9.999999999998899e-05, 0.00770000000000004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1089, 9.999999999998899e-05, 0.015700000000000047, 0.08431122914033207, 0.06858859508378334, 0.04491109459619458, 0.06982319930116576, 0.03489049585261095, 0.06265830498961966, 0.05295698494644707, 0.03548550126745975, 0.06421743361722532, 0.02529999999999999, 9.999999999998899e-05, 0.00029999999999996696, 0.06669999999999998, 0.024499999999999966, 0.02400000000000002, 0.14529999999999998, 0.07310000000000005, 0.00039999999999995595, 9.999999999998899e-05, 9.999999999998899e-05, 0.007399999999999962, 0.032299999999999995, 0.048699999999999966, 9.999999999998899e-05, 0.03249999999999997, 0.006754747757416024, 0.032299999999999995, 0.22082032439354093, 0.19298032777251062, 0.19253305132024678, 0.2055799784281095, 0.20415139631429258, 0.23054183195205913, 0.2006523808210423, 0.29039544101253445, 0.20038910139557964, 0.06846678287190755, 0.07855684999585133, 0.1406480369258103, 0.03996840984097694, 0.04071283917873225, 0.06063776290823275, 0.073263588849099, 0.08868867521935331, 0.06743478383218948, 0.13819729600499175, 0.123984536869721, 0.13451158777775418, 0.14114924056111855, 0.16229191769130413, 0.17048253583379813, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.18238915336234562, 0.1709174786537795, 0.16833854391740677, 0.189057953399409, 0.1769644640004372, 0.16316150333705282, 0.17377774300845283, 0.15246898481322946, 0.10716386357745067, 0.1614151299400408, 0.11876343300790904, 0.10978923820566577, 0.13610603218022022, 0.11701239065941771, 0.1722971734787465, 0.1518550850524818, 0.1229185550255375, 0.16996571318955755, 0.23601626264373876, 0.14933789585266954, 0.16154286057415324, 0.23210716714019453, 0.17628730745050003, 0.15536184127756003, 0.17686874938039077, 0.18659688261942042, 0.14195011305864957, 0.14578023879947632, 0.14006577975982915, 0.14198304211372648, 0.14379127967294647, 0.15351998536504197, 0.13697870895265896, 0.14203070229532166, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.16060493753908556, 0.19437354069769097, 0.1411966535145892, 0.16149939526223867, 0.24369660765090406, 0.17165345144855548, 0.15672808824074347, 0.16372797834227915, 0.16761248675320972, 0.1520401669978272, 0.1508798013499696, 0.3034445194460117, 0.17887872157465678, 0.17366570869048104, 0.2028812417861957, 0.16944140470640723, 0.2237305618099873, 0.17685058076392857, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17967047337437525, 0.188688463014553, 0.2429699908236106, 0.0947762948743548, 0.07308116822850497, 0.07555298902537866, 0.05186305593955043, 0.062375095939128045, 0.14039733981369573, 0.12046684496579019, 0.05491659739916577, 0.05062431923767596]}, "mutation_prompt": null}
{"id": "e5eeb9e1-ecdc-4d19-bfe3-186e1808a311", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\nclass ImprovedHybridHarmonyPSO(HybridHarmonyPSO):\n    def evaluate_solutions_parallel(self, func, solutions):\n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            futures = [executor.submit(func, solution) for solution in solutions]\n            results = [future.result() for future in as_completed(futures)]\n        return results\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array(self.evaluate_solutions_parallel(func, harmony_memory))\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(self.evaluate_solutions_parallel(func, new_solutions))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array(self.evaluate_solutions_parallel(func, pbest))\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "ImprovedHybridHarmonyPSO", "description": "Implementing a parallel asynchronous evaluation strategy to speed up fitness evaluation and solution update process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6312e537-914a-4f39-9083-be03a7ad68bf", "metadata": {"aucs": [0.17106119617580662, 0.183164768591895, 0.197479246385302, 0.16845369514743413, 0.18818337038671906, 0.1743435064021196, 0.1785507992358102, 0.16281155072979714, 0.1900640255741839, 0.06599999999999995, 0.008199999999999985, 0.03810000000000002, 0.007399999999999962, 9.999999999998899e-05, 0.05740000000000001, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.04611047095548981, 0.046809513754464405, 0.04977074487583699, 0.1562798674125092, 0.0528437448134802, 0.09575461660818341, 0.058711088734964334, 0.025756673127183438, 0.07562830159195943, 0.0481463786277756, 0.04861513666111972, 0.04926774209271334, 0.05702674525995721, 0.052137356518779265, 0.03992308285267243, 0.03225126748607876, 0.48183854180125585, 0.5278745093405857, 0.5261593791440391, 0.556500796271775, 0.5726670685312326, 0.5069464340214569, 0.5803154798158203, 0.5300214696812768, 0.53386575924448, 0.06443028781665472, 0.07510940173832203, 0.10171882691615464, 0.053803800388950385, 0.10606928790512216, 0.05190122563388122, 0.10252066063771503, 0.08046864392575714, 0.0928167823142052, 0.13375175994902766, 0.25771507138995786, 0.1481850439168273, 0.15781678312503822, 0.1164135922493319, 0.13477630983343114, 0.14649742396249588, 0.19432038345520275, 0.13517209650225814, 9.999999999998899e-05, 0.06758189734965692, 0.003689195106263865, 0.04422137908095103, 0.08103101652691125, 0.0022454229096671163, 9.999999999998899e-05, 0.04249999999999998, 0.019872591751231683, 0.00458165826050172, 0.06957272857429797, 0.012758968564191675, 0.007159387613177359, 0.0434549217280622, 0.011860097762603106, 0.027645144410284983, 0.03960532873984468, 0.001276934196792201, 9.999999999998899e-05, 0.00770000000000004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1089, 9.999999999998899e-05, 0.015700000000000047, 0.08431122914033207, 0.06858859508378334, 0.04491109459619458, 0.06982319930116576, 0.03489049585261095, 0.06265830498961966, 0.05295698494644707, 0.03548550126745975, 0.06421743361722532, 0.02529999999999999, 9.999999999998899e-05, 0.00029999999999996696, 0.06669999999999998, 0.024499999999999966, 0.02400000000000002, 0.14529999999999998, 0.07310000000000005, 0.00039999999999995595, 9.999999999998899e-05, 9.999999999998899e-05, 0.007399999999999962, 0.032299999999999995, 0.048699999999999966, 9.999999999998899e-05, 0.03249999999999997, 0.006754747757416024, 0.032299999999999995, 0.22082032439354093, 0.19298032777251062, 0.19253305132024678, 0.2055799784281095, 0.20415139631429258, 0.23054183195205913, 0.2006523808210423, 0.29039544101253445, 0.20038910139557964, 0.06846678287190755, 0.07855684999585133, 0.1406480369258103, 0.03996840984097694, 0.04071283917873225, 0.06063776290823275, 0.073263588849099, 0.08868867521935331, 0.06743478383218948, 0.13819729600499175, 0.123984536869721, 0.13451158777775418, 0.14114924056111855, 0.16229191769130413, 0.17048253583379813, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.18238915336234562, 0.1709174786537795, 0.16833854391740677, 0.189057953399409, 0.1769644640004372, 0.16316150333705282, 0.17377774300845283, 0.15246898481322946, 0.10716386357745067, 0.1614151299400408, 0.11876343300790904, 0.10978923820566577, 0.13610603218022022, 0.11701239065941771, 0.1722971734787465, 0.1518550850524818, 0.1229185550255375, 0.16996571318955755, 0.23601626264373876, 0.14933789585266954, 0.16154286057415324, 0.23210716714019453, 0.17628730745050003, 0.15536184127756003, 0.17686874938039077, 0.18659688261942042, 0.14195011305864957, 0.14578023879947632, 0.14006577975982915, 0.14198304211372648, 0.14379127967294647, 0.15351998536504197, 0.13697870895265896, 0.14203070229532166, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.16060493753908556, 0.19437354069769097, 0.1411966535145892, 0.16149939526223867, 0.24369660765090406, 0.17165345144855548, 0.15672808824074347, 0.16372797834227915, 0.16761248675320972, 0.1520401669978272, 0.1508798013499696, 0.3034445194460117, 0.17887872157465678, 0.17366570869048104, 0.2028812417861957, 0.16944140470640723, 0.2237305618099873, 0.17685058076392857, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17967047337437525, 0.188688463014553, 0.2429699908236106, 0.0947762948743548, 0.07308116822850497, 0.07555298902537866, 0.05186305593955043, 0.062375095939128045, 0.14039733981369573, 0.12046684496579019, 0.05491659739916577, 0.05062431923767596]}, "mutation_prompt": null}
{"id": "9cfc86c6-cd4d-43c4-8132-964e6a936833", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\nclass ImprovedHybridHarmonyPSO(HybridHarmonyPSO):\n    def evaluate_solutions_parallel(self, func, solutions):\n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            futures = [executor.submit(func, solution) for solution in solutions]\n            results = [future.result() for future in as_completed(futures)]\n        return results\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array(self.evaluate_solutions_parallel(func, harmony_memory))\n        mutation_factor = 0.2\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(self.evaluate_solutions_parallel(func, new_solutions))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n                        mutation_factor = max(0.1, mutation_factor - 0.001)  # Dynamic adjustment of mutation factor\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array(self.evaluate_solutions_parallel(func, pbest))\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "ImprovedHybridHarmonyPSO", "description": "Implementing a dynamic adjustment of the mutation factor based on solution improvement to speed up convergence.", "configspace": "", "generation": 91, "fitness": 0.12116087893318385, "feedback": "The algorithm ImprovedHybridHarmonyPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.11.", "error": "", "parent_id": "6312e537-914a-4f39-9083-be03a7ad68bf", "metadata": {"aucs": [0.1713115410055034, 0.17771043090125238, 0.2100246893572486, 0.17488162408106378, 0.18818139055183436, 0.1743435064021196, 0.1785507992358102, 0.17098148216699915, 0.1900640255741839, 0.00039999999999995595, 0.03059999999999996, 0.03969999999999996, 0.038799999999999946, 9.999999999998899e-05, 0.08899999999999997, 9.999999999998899e-05, 0.007399999999999962, 0.02749999999999997, 0.042054227992728954, 0.05352598411043452, 0.06191477974888315, 0.04605153576654886, 0.05384214612848848, 0.03788038037943098, 0.06022477239872315, 0.06702432684758475, 0.05871329187415153, 0.03334790410582522, 0.030929276720888965, 0.0481463786277756, 0.025965940872886173, 0.15213123621688773, 0.09927478917828136, 0.03696417075239278, 0.10446084148159318, 0.029763828138413717, 0.5210784953197984, 0.5350340861172787, 0.5113612161377872, 0.5483488745763694, 0.570341154035416, 0.5072966144282021, 0.4296792556843114, 0.5708532525176505, 0.5339270250279853, 0.06443028781665472, 0.11204237725743382, 0.10171882691615464, 0.08490994866734147, 0.07735139541596325, 0.06045081201051472, 0.11367752387979235, 0.05957704362026617, 0.09290775634558901, 0.12757898994840322, 0.19308637766117165, 0.1481850439168273, 0.10375357913913519, 0.19602831912674523, 0.12507750102703974, 0.1462208884673346, 0.16578783308913903, 0.12824684691079824, 0.07848300893333804, 0.059699999999999975, 0.020789195106248215, 0.0009896327823657458, 0.06410000000000005, 0.020670417225187143, 0.010022764806987605, 9.999999999998899e-05, 0.019872591751231683, 0.06072896089820601, 0.08300161457223532, 0.01358852382506448, 0.007159387613177359, 0.035362057023575866, 0.012173717655606153, 0.017993280776203546, 0.006568189490159582, 0.02567435131267337, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008000000000000007, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.11043794841219456, 0.09785153104292454, 0.04500224780072204, 0.13727137988362081, 0.026791446926792584, 0.05861544389218254, 0.05295698494644707, 0.036226677812335906, 0.06421743361722532, 9.999999999998899e-05, 0.024900000000000033, 0.00880000000000003, 9.999999999998899e-05, 0.024599999999999955, 0.06589999999999996, 0.02400000000000002, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025399999999999978, 0.12080000000000002, 9.999999999998899e-05, 0.007900000000000018, 9.999999999998899e-05, 0.04079999999999995, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.22046365769598886, 0.17783153199113855, 0.2055799784281095, 0.19040965946610533, 0.20724700933075846, 0.21151430232790747, 0.23017842266202315, 0.1944970863746044, 0.04710047110866855, 0.037042969643928725, 0.1415282621143482, 0.03996840984097694, 0.04335708883273948, 0.046009660620107806, 0.073263588849099, 0.10574229016421943, 0.05239526111362813, 0.1372718125207193, 0.1335581228378504, 0.1374659666639092, 0.1443530247703675, 0.14736881421106895, 0.12888472057054934, 0.15065364456050478, 0.167337081816757, 0.13128253356446862, 0.18816194107912898, 0.1792792271279935, 0.19672244593672616, 0.1745172289196011, 0.1821496595795835, 0.1769644640004372, 0.16244737848268365, 0.22467051241192326, 0.1970921285920727, 0.1468154021786251, 0.11165985250426036, 0.11190060553350922, 0.13908481743571666, 0.13610603218022022, 0.1510511573972777, 0.10556344926629446, 0.14992609833033788, 0.1229185550255375, 0.1429264286067703, 0.16233450221944246, 0.14678582120476746, 0.161544668608672, 0.1414167651513295, 0.1623526323543667, 0.14860716125581908, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.14578023879947632, 0.14372521989762443, 0.14200406652717734, 0.14379058119127952, 0.1596334483701004, 0.16195916373068775, 0.14164044590726022, 0.16207881422481074, 0.18918717893556736, 0.16773495884121203, 0.16657141521439822, 0.1649653026746979, 0.20045539959063885, 0.14138266811153133, 0.18820706788500507, 0.199183304781414, 0.19095247875682964, 0.21412227739913947, 0.17086249251172936, 0.16050779395916304, 0.1593175567142191, 0.19510670427666932, 0.16045374486843178, 0.2155581802058142, 0.1733826927034039, 0.2028812417861957, 0.17145312457551187, 0.1840951386782479, 0.17874297708725795, 0.18683568409856555, 0.2135749380374129, 0.1848366871306808, 0.1772611299913941, 0.21341212984895475, 0.2493568708397742, 0.058344077551123696, 0.06527561998959519, 0.06763004727866373, 0.05186305593955043, 0.05934830659822565, 0.0533550031798079, 0.07532529613519179, 0.05491659739916577, 0.0526550620912567]}, "mutation_prompt": null}
{"id": "e78e5fa1-2fbd-4e84-ad1d-1ab16c8cd529", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\nclass ImprovedHybridHarmonyPSO(HybridHarmonyPSO):\n    def evaluate_solutions_parallel(self, func, solutions):\n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            futures = [executor.submit(func, solution) for solution in solutions]\n            results = [future.result() for future in as_completed(futures)]\n        return results\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array(self.evaluate_solutions_parallel(func, harmony_memory))\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(self.evaluate_solutions_parallel(func, new_solutions))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array(self.evaluate_solutions_parallel(func, pbest))\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "ImprovedHybridHarmonyPSO", "description": "Implementing a parallel asynchronous evaluation strategy to speed up fitness evaluation and solution update process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6312e537-914a-4f39-9083-be03a7ad68bf", "metadata": {"aucs": [0.17106119617580662, 0.183164768591895, 0.197479246385302, 0.16845369514743413, 0.18818337038671906, 0.1743435064021196, 0.1785507992358102, 0.16281155072979714, 0.1900640255741839, 0.06599999999999995, 0.008199999999999985, 0.03810000000000002, 0.007399999999999962, 9.999999999998899e-05, 0.05740000000000001, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.04611047095548981, 0.046809513754464405, 0.04977074487583699, 0.1562798674125092, 0.0528437448134802, 0.09575461660818341, 0.058711088734964334, 0.025756673127183438, 0.07562830159195943, 0.0481463786277756, 0.04861513666111972, 0.04926774209271334, 0.05702674525995721, 0.052137356518779265, 0.03992308285267243, 0.03225126748607876, 0.48183854180125585, 0.5278745093405857, 0.5261593791440391, 0.556500796271775, 0.5726670685312326, 0.5069464340214569, 0.5803154798158203, 0.5300214696812768, 0.53386575924448, 0.06443028781665472, 0.07510940173832203, 0.10171882691615464, 0.053803800388950385, 0.10606928790512216, 0.05190122563388122, 0.10252066063771503, 0.08046864392575714, 0.0928167823142052, 0.13375175994902766, 0.25771507138995786, 0.1481850439168273, 0.15781678312503822, 0.1164135922493319, 0.13477630983343114, 0.14649742396249588, 0.19432038345520275, 0.13517209650225814, 9.999999999998899e-05, 0.06758189734965692, 0.003689195106263865, 0.04422137908095103, 0.08103101652691125, 0.0022454229096671163, 9.999999999998899e-05, 0.04249999999999998, 0.019872591751231683, 0.00458165826050172, 0.06957272857429797, 0.012758968564191675, 0.007159387613177359, 0.0434549217280622, 0.011860097762603106, 0.027645144410284983, 0.03960532873984468, 0.001276934196792201, 9.999999999998899e-05, 0.00770000000000004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1089, 9.999999999998899e-05, 0.015700000000000047, 0.08431122914033207, 0.06858859508378334, 0.04491109459619458, 0.06982319930116576, 0.03489049585261095, 0.06265830498961966, 0.05295698494644707, 0.03548550126745975, 0.06421743361722532, 0.02529999999999999, 9.999999999998899e-05, 0.00029999999999996696, 0.06669999999999998, 0.024499999999999966, 0.02400000000000002, 0.14529999999999998, 0.07310000000000005, 0.00039999999999995595, 9.999999999998899e-05, 9.999999999998899e-05, 0.007399999999999962, 0.032299999999999995, 0.048699999999999966, 9.999999999998899e-05, 0.03249999999999997, 0.006754747757416024, 0.032299999999999995, 0.22082032439354093, 0.19298032777251062, 0.19253305132024678, 0.2055799784281095, 0.20415139631429258, 0.23054183195205913, 0.2006523808210423, 0.29039544101253445, 0.20038910139557964, 0.06846678287190755, 0.07855684999585133, 0.1406480369258103, 0.03996840984097694, 0.04071283917873225, 0.06063776290823275, 0.073263588849099, 0.08868867521935331, 0.06743478383218948, 0.13819729600499175, 0.123984536869721, 0.13451158777775418, 0.14114924056111855, 0.16229191769130413, 0.17048253583379813, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.18238915336234562, 0.1709174786537795, 0.16833854391740677, 0.189057953399409, 0.1769644640004372, 0.16316150333705282, 0.17377774300845283, 0.15246898481322946, 0.10716386357745067, 0.1614151299400408, 0.11876343300790904, 0.10978923820566577, 0.13610603218022022, 0.11701239065941771, 0.1722971734787465, 0.1518550850524818, 0.1229185550255375, 0.16996571318955755, 0.23601626264373876, 0.14933789585266954, 0.16154286057415324, 0.23210716714019453, 0.17628730745050003, 0.15536184127756003, 0.17686874938039077, 0.18659688261942042, 0.14195011305864957, 0.14578023879947632, 0.14006577975982915, 0.14198304211372648, 0.14379127967294647, 0.15351998536504197, 0.13697870895265896, 0.14203070229532166, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.16060493753908556, 0.19437354069769097, 0.1411966535145892, 0.16149939526223867, 0.24369660765090406, 0.17165345144855548, 0.15672808824074347, 0.16372797834227915, 0.16761248675320972, 0.1520401669978272, 0.1508798013499696, 0.3034445194460117, 0.17887872157465678, 0.17366570869048104, 0.2028812417861957, 0.16944140470640723, 0.2237305618099873, 0.17685058076392857, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17967047337437525, 0.188688463014553, 0.2429699908236106, 0.0947762948743548, 0.07308116822850497, 0.07555298902537866, 0.05186305593955043, 0.062375095939128045, 0.14039733981369573, 0.12046684496579019, 0.05491659739916577, 0.05062431923767596]}, "mutation_prompt": null}
{"id": "ebbe480d-b19b-4302-a0d1-a5ee30f29eb2", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\nclass ImprovedHybridHarmonyPSO(HybridHarmonyPSO):\n    def evaluate_solutions_parallel(self, func, solutions):\n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            futures = [executor.submit(func, solution) for solution in solutions]\n            results = [future.result() for future in as_completed(futures)]\n        return results\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array(self.evaluate_solutions_parallel(func, harmony_memory))\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(self.evaluate_solutions_parallel(func, new_solutions))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array(self.evaluate_solutions_parallel(func, pbest))\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "ImprovedHybridHarmonyPSO", "description": "Implementing a parallel asynchronous evaluation strategy to speed up fitness evaluation and solution update process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6312e537-914a-4f39-9083-be03a7ad68bf", "metadata": {"aucs": [0.17106119617580662, 0.183164768591895, 0.197479246385302, 0.16845369514743413, 0.18818337038671906, 0.1743435064021196, 0.1785507992358102, 0.16281155072979714, 0.1900640255741839, 0.06599999999999995, 0.008199999999999985, 0.03810000000000002, 0.007399999999999962, 9.999999999998899e-05, 0.05740000000000001, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.04611047095548981, 0.046809513754464405, 0.04977074487583699, 0.1562798674125092, 0.0528437448134802, 0.09575461660818341, 0.058711088734964334, 0.025756673127183438, 0.07562830159195943, 0.0481463786277756, 0.04861513666111972, 0.04926774209271334, 0.05702674525995721, 0.052137356518779265, 0.03992308285267243, 0.03225126748607876, 0.48183854180125585, 0.5278745093405857, 0.5261593791440391, 0.556500796271775, 0.5726670685312326, 0.5069464340214569, 0.5803154798158203, 0.5300214696812768, 0.53386575924448, 0.06443028781665472, 0.07510940173832203, 0.10171882691615464, 0.053803800388950385, 0.10606928790512216, 0.05190122563388122, 0.10252066063771503, 0.08046864392575714, 0.0928167823142052, 0.13375175994902766, 0.25771507138995786, 0.1481850439168273, 0.15781678312503822, 0.1164135922493319, 0.13477630983343114, 0.14649742396249588, 0.19432038345520275, 0.13517209650225814, 9.999999999998899e-05, 0.06758189734965692, 0.003689195106263865, 0.04422137908095103, 0.08103101652691125, 0.0022454229096671163, 9.999999999998899e-05, 0.04249999999999998, 0.019872591751231683, 0.00458165826050172, 0.06957272857429797, 0.012758968564191675, 0.007159387613177359, 0.0434549217280622, 0.011860097762603106, 0.027645144410284983, 0.03960532873984468, 0.001276934196792201, 9.999999999998899e-05, 0.00770000000000004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1089, 9.999999999998899e-05, 0.015700000000000047, 0.08431122914033207, 0.06858859508378334, 0.04491109459619458, 0.06982319930116576, 0.03489049585261095, 0.06265830498961966, 0.05295698494644707, 0.03548550126745975, 0.06421743361722532, 0.02529999999999999, 9.999999999998899e-05, 0.00029999999999996696, 0.06669999999999998, 0.024499999999999966, 0.02400000000000002, 0.14529999999999998, 0.07310000000000005, 0.00039999999999995595, 9.999999999998899e-05, 9.999999999998899e-05, 0.007399999999999962, 0.032299999999999995, 0.048699999999999966, 9.999999999998899e-05, 0.03249999999999997, 0.006754747757416024, 0.032299999999999995, 0.22082032439354093, 0.19298032777251062, 0.19253305132024678, 0.2055799784281095, 0.20415139631429258, 0.23054183195205913, 0.2006523808210423, 0.29039544101253445, 0.20038910139557964, 0.06846678287190755, 0.07855684999585133, 0.1406480369258103, 0.03996840984097694, 0.04071283917873225, 0.06063776290823275, 0.073263588849099, 0.08868867521935331, 0.06743478383218948, 0.13819729600499175, 0.123984536869721, 0.13451158777775418, 0.14114924056111855, 0.16229191769130413, 0.17048253583379813, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.18238915336234562, 0.1709174786537795, 0.16833854391740677, 0.189057953399409, 0.1769644640004372, 0.16316150333705282, 0.17377774300845283, 0.15246898481322946, 0.10716386357745067, 0.1614151299400408, 0.11876343300790904, 0.10978923820566577, 0.13610603218022022, 0.11701239065941771, 0.1722971734787465, 0.1518550850524818, 0.1229185550255375, 0.16996571318955755, 0.23601626264373876, 0.14933789585266954, 0.16154286057415324, 0.23210716714019453, 0.17628730745050003, 0.15536184127756003, 0.17686874938039077, 0.18659688261942042, 0.14195011305864957, 0.14578023879947632, 0.14006577975982915, 0.14198304211372648, 0.14379127967294647, 0.15351998536504197, 0.13697870895265896, 0.14203070229532166, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.16060493753908556, 0.19437354069769097, 0.1411966535145892, 0.16149939526223867, 0.24369660765090406, 0.17165345144855548, 0.15672808824074347, 0.16372797834227915, 0.16761248675320972, 0.1520401669978272, 0.1508798013499696, 0.3034445194460117, 0.17887872157465678, 0.17366570869048104, 0.2028812417861957, 0.16944140470640723, 0.2237305618099873, 0.17685058076392857, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17967047337437525, 0.188688463014553, 0.2429699908236106, 0.0947762948743548, 0.07308116822850497, 0.07555298902537866, 0.05186305593955043, 0.062375095939128045, 0.14039733981369573, 0.12046684496579019, 0.05491659739916577, 0.05062431923767596]}, "mutation_prompt": null}
{"id": "1d447cec-6b91-447e-a189-e1bf9f3c7422", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\nclass ImprovedHybridHarmonyPSO(HybridHarmonyPSO):\n    def evaluate_solutions_parallel(self, func, solutions):\n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            futures = [executor.submit(func, solution) for solution in solutions]\n            results = [future.result() for future in as_completed(futures)]\n        return results\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array(self.evaluate_solutions_parallel(func, harmony_memory))\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(self.evaluate_solutions_parallel(func, new_solutions))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array(self.evaluate_solutions_parallel(func, pbest))\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "ImprovedHybridHarmonyPSO", "description": "Implementing a parallel asynchronous evaluation strategy to speed up fitness evaluation and solution update process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6312e537-914a-4f39-9083-be03a7ad68bf", "metadata": {"aucs": [0.17106119617580662, 0.183164768591895, 0.197479246385302, 0.16845369514743413, 0.18818337038671906, 0.1743435064021196, 0.1785507992358102, 0.16281155072979714, 0.1900640255741839, 0.06599999999999995, 0.008199999999999985, 0.03810000000000002, 0.007399999999999962, 9.999999999998899e-05, 0.05740000000000001, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.04611047095548981, 0.046809513754464405, 0.04977074487583699, 0.1562798674125092, 0.0528437448134802, 0.09575461660818341, 0.058711088734964334, 0.025756673127183438, 0.07562830159195943, 0.0481463786277756, 0.04861513666111972, 0.04926774209271334, 0.05702674525995721, 0.052137356518779265, 0.03992308285267243, 0.03225126748607876, 0.48183854180125585, 0.5278745093405857, 0.5261593791440391, 0.556500796271775, 0.5726670685312326, 0.5069464340214569, 0.5803154798158203, 0.5300214696812768, 0.53386575924448, 0.06443028781665472, 0.07510940173832203, 0.10171882691615464, 0.053803800388950385, 0.10606928790512216, 0.05190122563388122, 0.10252066063771503, 0.08046864392575714, 0.0928167823142052, 0.13375175994902766, 0.25771507138995786, 0.1481850439168273, 0.15781678312503822, 0.1164135922493319, 0.13477630983343114, 0.14649742396249588, 0.19432038345520275, 0.13517209650225814, 9.999999999998899e-05, 0.06758189734965692, 0.003689195106263865, 0.04422137908095103, 0.08103101652691125, 0.0022454229096671163, 9.999999999998899e-05, 0.04249999999999998, 0.019872591751231683, 0.00458165826050172, 0.06957272857429797, 0.012758968564191675, 0.007159387613177359, 0.0434549217280622, 0.011860097762603106, 0.027645144410284983, 0.03960532873984468, 0.001276934196792201, 9.999999999998899e-05, 0.00770000000000004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1089, 9.999999999998899e-05, 0.015700000000000047, 0.08431122914033207, 0.06858859508378334, 0.04491109459619458, 0.06982319930116576, 0.03489049585261095, 0.06265830498961966, 0.05295698494644707, 0.03548550126745975, 0.06421743361722532, 0.02529999999999999, 9.999999999998899e-05, 0.00029999999999996696, 0.06669999999999998, 0.024499999999999966, 0.02400000000000002, 0.14529999999999998, 0.07310000000000005, 0.00039999999999995595, 9.999999999998899e-05, 9.999999999998899e-05, 0.007399999999999962, 0.032299999999999995, 0.048699999999999966, 9.999999999998899e-05, 0.03249999999999997, 0.006754747757416024, 0.032299999999999995, 0.22082032439354093, 0.19298032777251062, 0.19253305132024678, 0.2055799784281095, 0.20415139631429258, 0.23054183195205913, 0.2006523808210423, 0.29039544101253445, 0.20038910139557964, 0.06846678287190755, 0.07855684999585133, 0.1406480369258103, 0.03996840984097694, 0.04071283917873225, 0.06063776290823275, 0.073263588849099, 0.08868867521935331, 0.06743478383218948, 0.13819729600499175, 0.123984536869721, 0.13451158777775418, 0.14114924056111855, 0.16229191769130413, 0.17048253583379813, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.18238915336234562, 0.1709174786537795, 0.16833854391740677, 0.189057953399409, 0.1769644640004372, 0.16316150333705282, 0.17377774300845283, 0.15246898481322946, 0.10716386357745067, 0.1614151299400408, 0.11876343300790904, 0.10978923820566577, 0.13610603218022022, 0.11701239065941771, 0.1722971734787465, 0.1518550850524818, 0.1229185550255375, 0.16996571318955755, 0.23601626264373876, 0.14933789585266954, 0.16154286057415324, 0.23210716714019453, 0.17628730745050003, 0.15536184127756003, 0.17686874938039077, 0.18659688261942042, 0.14195011305864957, 0.14578023879947632, 0.14006577975982915, 0.14198304211372648, 0.14379127967294647, 0.15351998536504197, 0.13697870895265896, 0.14203070229532166, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.16060493753908556, 0.19437354069769097, 0.1411966535145892, 0.16149939526223867, 0.24369660765090406, 0.17165345144855548, 0.15672808824074347, 0.16372797834227915, 0.16761248675320972, 0.1520401669978272, 0.1508798013499696, 0.3034445194460117, 0.17887872157465678, 0.17366570869048104, 0.2028812417861957, 0.16944140470640723, 0.2237305618099873, 0.17685058076392857, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17967047337437525, 0.188688463014553, 0.2429699908236106, 0.0947762948743548, 0.07308116822850497, 0.07555298902537866, 0.05186305593955043, 0.062375095939128045, 0.14039733981369573, 0.12046684496579019, 0.05491659739916577, 0.05062431923767596]}, "mutation_prompt": null}
{"id": "fc2d30a5-aaef-4cc5-bac2-9bed7a7bb714", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\nclass ImprovedHybridHarmonyPSO(HybridHarmonyPSO):\n    def evaluate_solutions_parallel(self, func, solutions):\n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            futures = [executor.submit(func, solution) for solution in solutions]\n            results = [future.result() for future in as_completed(futures)]\n        return results\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array(self.evaluate_solutions_parallel(func, harmony_memory))\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(self.evaluate_solutions_parallel(func, new_solutions))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array(self.evaluate_solutions_parallel(func, pbest))\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "ImprovedHybridHarmonyPSO", "description": "Implementing a parallel asynchronous evaluation strategy to speed up fitness evaluation and solution update process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6312e537-914a-4f39-9083-be03a7ad68bf", "metadata": {"aucs": [0.17106119617580662, 0.183164768591895, 0.197479246385302, 0.16845369514743413, 0.18818337038671906, 0.1743435064021196, 0.1785507992358102, 0.16281155072979714, 0.1900640255741839, 0.06599999999999995, 0.008199999999999985, 0.03810000000000002, 0.007399999999999962, 9.999999999998899e-05, 0.05740000000000001, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.04611047095548981, 0.046809513754464405, 0.04977074487583699, 0.1562798674125092, 0.0528437448134802, 0.09575461660818341, 0.058711088734964334, 0.025756673127183438, 0.07562830159195943, 0.0481463786277756, 0.04861513666111972, 0.04926774209271334, 0.05702674525995721, 0.052137356518779265, 0.03992308285267243, 0.03225126748607876, 0.48183854180125585, 0.5278745093405857, 0.5261593791440391, 0.556500796271775, 0.5726670685312326, 0.5069464340214569, 0.5803154798158203, 0.5300214696812768, 0.53386575924448, 0.06443028781665472, 0.07510940173832203, 0.10171882691615464, 0.053803800388950385, 0.10606928790512216, 0.05190122563388122, 0.10252066063771503, 0.08046864392575714, 0.0928167823142052, 0.13375175994902766, 0.25771507138995786, 0.1481850439168273, 0.15781678312503822, 0.1164135922493319, 0.13477630983343114, 0.14649742396249588, 0.19432038345520275, 0.13517209650225814, 9.999999999998899e-05, 0.06758189734965692, 0.003689195106263865, 0.04422137908095103, 0.08103101652691125, 0.0022454229096671163, 9.999999999998899e-05, 0.04249999999999998, 0.019872591751231683, 0.00458165826050172, 0.06957272857429797, 0.012758968564191675, 0.007159387613177359, 0.0434549217280622, 0.011860097762603106, 0.027645144410284983, 0.03960532873984468, 0.001276934196792201, 9.999999999998899e-05, 0.00770000000000004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1089, 9.999999999998899e-05, 0.015700000000000047, 0.08431122914033207, 0.06858859508378334, 0.04491109459619458, 0.06982319930116576, 0.03489049585261095, 0.06265830498961966, 0.05295698494644707, 0.03548550126745975, 0.06421743361722532, 0.02529999999999999, 9.999999999998899e-05, 0.00029999999999996696, 0.06669999999999998, 0.024499999999999966, 0.02400000000000002, 0.14529999999999998, 0.07310000000000005, 0.00039999999999995595, 9.999999999998899e-05, 9.999999999998899e-05, 0.007399999999999962, 0.032299999999999995, 0.048699999999999966, 9.999999999998899e-05, 0.03249999999999997, 0.006754747757416024, 0.032299999999999995, 0.22082032439354093, 0.19298032777251062, 0.19253305132024678, 0.2055799784281095, 0.20415139631429258, 0.23054183195205913, 0.2006523808210423, 0.29039544101253445, 0.20038910139557964, 0.06846678287190755, 0.07855684999585133, 0.1406480369258103, 0.03996840984097694, 0.04071283917873225, 0.06063776290823275, 0.073263588849099, 0.08868867521935331, 0.06743478383218948, 0.13819729600499175, 0.123984536869721, 0.13451158777775418, 0.14114924056111855, 0.16229191769130413, 0.17048253583379813, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.18238915336234562, 0.1709174786537795, 0.16833854391740677, 0.189057953399409, 0.1769644640004372, 0.16316150333705282, 0.17377774300845283, 0.15246898481322946, 0.10716386357745067, 0.1614151299400408, 0.11876343300790904, 0.10978923820566577, 0.13610603218022022, 0.11701239065941771, 0.1722971734787465, 0.1518550850524818, 0.1229185550255375, 0.16996571318955755, 0.23601626264373876, 0.14933789585266954, 0.16154286057415324, 0.23210716714019453, 0.17628730745050003, 0.15536184127756003, 0.17686874938039077, 0.18659688261942042, 0.14195011305864957, 0.14578023879947632, 0.14006577975982915, 0.14198304211372648, 0.14379127967294647, 0.15351998536504197, 0.13697870895265896, 0.14203070229532166, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.16060493753908556, 0.19437354069769097, 0.1411966535145892, 0.16149939526223867, 0.24369660765090406, 0.17165345144855548, 0.15672808824074347, 0.16372797834227915, 0.16761248675320972, 0.1520401669978272, 0.1508798013499696, 0.3034445194460117, 0.17887872157465678, 0.17366570869048104, 0.2028812417861957, 0.16944140470640723, 0.2237305618099873, 0.17685058076392857, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17967047337437525, 0.188688463014553, 0.2429699908236106, 0.0947762948743548, 0.07308116822850497, 0.07555298902537866, 0.05186305593955043, 0.062375095939128045, 0.14039733981369573, 0.12046684496579019, 0.05491659739916577, 0.05062431923767596]}, "mutation_prompt": null}
{"id": "5f43b2a8-9959-4c47-8b8f-e7c0e566fa61", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\nclass ImprovedHybridHarmonyPSO(HybridHarmonyPSO):\n    def evaluate_solutions_parallel(self, func, solutions):\n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            futures = [executor.submit(func, solution) for solution in solutions]\n            results = [future.result() for future in as_completed(futures)]\n        return results\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array(self.evaluate_solutions_parallel(func, harmony_memory))\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(self.evaluate_solutions_parallel(func, new_solutions))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array(self.evaluate_solutions_parallel(func, pbest))\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "ImprovedHybridHarmonyPSO", "description": "Implementing a parallel asynchronous evaluation strategy to speed up fitness evaluation and solution update process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6312e537-914a-4f39-9083-be03a7ad68bf", "metadata": {"aucs": [0.17106119617580662, 0.183164768591895, 0.197479246385302, 0.16845369514743413, 0.18818337038671906, 0.1743435064021196, 0.1785507992358102, 0.16281155072979714, 0.1900640255741839, 0.06599999999999995, 0.008199999999999985, 0.03810000000000002, 0.007399999999999962, 9.999999999998899e-05, 0.05740000000000001, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.04611047095548981, 0.046809513754464405, 0.04977074487583699, 0.1562798674125092, 0.0528437448134802, 0.09575461660818341, 0.058711088734964334, 0.025756673127183438, 0.07562830159195943, 0.0481463786277756, 0.04861513666111972, 0.04926774209271334, 0.05702674525995721, 0.052137356518779265, 0.03992308285267243, 0.03225126748607876, 0.48183854180125585, 0.5278745093405857, 0.5261593791440391, 0.556500796271775, 0.5726670685312326, 0.5069464340214569, 0.5803154798158203, 0.5300214696812768, 0.53386575924448, 0.06443028781665472, 0.07510940173832203, 0.10171882691615464, 0.053803800388950385, 0.10606928790512216, 0.05190122563388122, 0.10252066063771503, 0.08046864392575714, 0.0928167823142052, 0.13375175994902766, 0.25771507138995786, 0.1481850439168273, 0.15781678312503822, 0.1164135922493319, 0.13477630983343114, 0.14649742396249588, 0.19432038345520275, 0.13517209650225814, 9.999999999998899e-05, 0.06758189734965692, 0.003689195106263865, 0.04422137908095103, 0.08103101652691125, 0.0022454229096671163, 9.999999999998899e-05, 0.04249999999999998, 0.019872591751231683, 0.00458165826050172, 0.06957272857429797, 0.012758968564191675, 0.007159387613177359, 0.0434549217280622, 0.011860097762603106, 0.027645144410284983, 0.03960532873984468, 0.001276934196792201, 9.999999999998899e-05, 0.00770000000000004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1089, 9.999999999998899e-05, 0.015700000000000047, 0.08431122914033207, 0.06858859508378334, 0.04491109459619458, 0.06982319930116576, 0.03489049585261095, 0.06265830498961966, 0.05295698494644707, 0.03548550126745975, 0.06421743361722532, 0.02529999999999999, 9.999999999998899e-05, 0.00029999999999996696, 0.06669999999999998, 0.024499999999999966, 0.02400000000000002, 0.14529999999999998, 0.07310000000000005, 0.00039999999999995595, 9.999999999998899e-05, 9.999999999998899e-05, 0.007399999999999962, 0.032299999999999995, 0.048699999999999966, 9.999999999998899e-05, 0.03249999999999997, 0.006754747757416024, 0.032299999999999995, 0.22082032439354093, 0.19298032777251062, 0.19253305132024678, 0.2055799784281095, 0.20415139631429258, 0.23054183195205913, 0.2006523808210423, 0.29039544101253445, 0.20038910139557964, 0.06846678287190755, 0.07855684999585133, 0.1406480369258103, 0.03996840984097694, 0.04071283917873225, 0.06063776290823275, 0.073263588849099, 0.08868867521935331, 0.06743478383218948, 0.13819729600499175, 0.123984536869721, 0.13451158777775418, 0.14114924056111855, 0.16229191769130413, 0.17048253583379813, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.18238915336234562, 0.1709174786537795, 0.16833854391740677, 0.189057953399409, 0.1769644640004372, 0.16316150333705282, 0.17377774300845283, 0.15246898481322946, 0.10716386357745067, 0.1614151299400408, 0.11876343300790904, 0.10978923820566577, 0.13610603218022022, 0.11701239065941771, 0.1722971734787465, 0.1518550850524818, 0.1229185550255375, 0.16996571318955755, 0.23601626264373876, 0.14933789585266954, 0.16154286057415324, 0.23210716714019453, 0.17628730745050003, 0.15536184127756003, 0.17686874938039077, 0.18659688261942042, 0.14195011305864957, 0.14578023879947632, 0.14006577975982915, 0.14198304211372648, 0.14379127967294647, 0.15351998536504197, 0.13697870895265896, 0.14203070229532166, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.16060493753908556, 0.19437354069769097, 0.1411966535145892, 0.16149939526223867, 0.24369660765090406, 0.17165345144855548, 0.15672808824074347, 0.16372797834227915, 0.16761248675320972, 0.1520401669978272, 0.1508798013499696, 0.3034445194460117, 0.17887872157465678, 0.17366570869048104, 0.2028812417861957, 0.16944140470640723, 0.2237305618099873, 0.17685058076392857, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17967047337437525, 0.188688463014553, 0.2429699908236106, 0.0947762948743548, 0.07308116822850497, 0.07555298902537866, 0.05186305593955043, 0.062375095939128045, 0.14039733981369573, 0.12046684496579019, 0.05491659739916577, 0.05062431923767596]}, "mutation_prompt": null}
{"id": "78886cdd-723c-4605-b539-54c4fe3f975b", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\nclass ImprovedHybridHarmonyPSO(HybridHarmonyPSO):\n    def evaluate_solutions_parallel(self, func, solutions):\n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            futures = [executor.submit(func, solution) for solution in solutions]\n            results = [future.result() for future in as_completed(futures)]\n        return results\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array(self.evaluate_solutions_parallel(func, harmony_memory))\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(self.evaluate_solutions_parallel(func, new_solutions))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array(self.evaluate_solutions_parallel(func, pbest))\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "ImprovedHybridHarmonyPSO", "description": "Implementing a parallel asynchronous evaluation strategy to speed up fitness evaluation and solution update process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6312e537-914a-4f39-9083-be03a7ad68bf", "metadata": {"aucs": [0.17106119617580662, 0.183164768591895, 0.197479246385302, 0.16845369514743413, 0.18818337038671906, 0.1743435064021196, 0.1785507992358102, 0.16281155072979714, 0.1900640255741839, 0.06599999999999995, 0.008199999999999985, 0.03810000000000002, 0.007399999999999962, 9.999999999998899e-05, 0.05740000000000001, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.04611047095548981, 0.046809513754464405, 0.04977074487583699, 0.1562798674125092, 0.0528437448134802, 0.09575461660818341, 0.058711088734964334, 0.025756673127183438, 0.07562830159195943, 0.0481463786277756, 0.04861513666111972, 0.04926774209271334, 0.05702674525995721, 0.052137356518779265, 0.03992308285267243, 0.03225126748607876, 0.48183854180125585, 0.5278745093405857, 0.5261593791440391, 0.556500796271775, 0.5726670685312326, 0.5069464340214569, 0.5803154798158203, 0.5300214696812768, 0.53386575924448, 0.06443028781665472, 0.07510940173832203, 0.10171882691615464, 0.053803800388950385, 0.10606928790512216, 0.05190122563388122, 0.10252066063771503, 0.08046864392575714, 0.0928167823142052, 0.13375175994902766, 0.25771507138995786, 0.1481850439168273, 0.15781678312503822, 0.1164135922493319, 0.13477630983343114, 0.14649742396249588, 0.19432038345520275, 0.13517209650225814, 9.999999999998899e-05, 0.06758189734965692, 0.003689195106263865, 0.04422137908095103, 0.08103101652691125, 0.0022454229096671163, 9.999999999998899e-05, 0.04249999999999998, 0.019872591751231683, 0.00458165826050172, 0.06957272857429797, 0.012758968564191675, 0.007159387613177359, 0.0434549217280622, 0.011860097762603106, 0.027645144410284983, 0.03960532873984468, 0.001276934196792201, 9.999999999998899e-05, 0.00770000000000004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1089, 9.999999999998899e-05, 0.015700000000000047, 0.08431122914033207, 0.06858859508378334, 0.04491109459619458, 0.06982319930116576, 0.03489049585261095, 0.06265830498961966, 0.05295698494644707, 0.03548550126745975, 0.06421743361722532, 0.02529999999999999, 9.999999999998899e-05, 0.00029999999999996696, 0.06669999999999998, 0.024499999999999966, 0.02400000000000002, 0.14529999999999998, 0.07310000000000005, 0.00039999999999995595, 9.999999999998899e-05, 9.999999999998899e-05, 0.007399999999999962, 0.032299999999999995, 0.048699999999999966, 9.999999999998899e-05, 0.03249999999999997, 0.006754747757416024, 0.032299999999999995, 0.22082032439354093, 0.19298032777251062, 0.19253305132024678, 0.2055799784281095, 0.20415139631429258, 0.23054183195205913, 0.2006523808210423, 0.29039544101253445, 0.20038910139557964, 0.06846678287190755, 0.07855684999585133, 0.1406480369258103, 0.03996840984097694, 0.04071283917873225, 0.06063776290823275, 0.073263588849099, 0.08868867521935331, 0.06743478383218948, 0.13819729600499175, 0.123984536869721, 0.13451158777775418, 0.14114924056111855, 0.16229191769130413, 0.17048253583379813, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.18238915336234562, 0.1709174786537795, 0.16833854391740677, 0.189057953399409, 0.1769644640004372, 0.16316150333705282, 0.17377774300845283, 0.15246898481322946, 0.10716386357745067, 0.1614151299400408, 0.11876343300790904, 0.10978923820566577, 0.13610603218022022, 0.11701239065941771, 0.1722971734787465, 0.1518550850524818, 0.1229185550255375, 0.16996571318955755, 0.23601626264373876, 0.14933789585266954, 0.16154286057415324, 0.23210716714019453, 0.17628730745050003, 0.15536184127756003, 0.17686874938039077, 0.18659688261942042, 0.14195011305864957, 0.14578023879947632, 0.14006577975982915, 0.14198304211372648, 0.14379127967294647, 0.15351998536504197, 0.13697870895265896, 0.14203070229532166, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.16060493753908556, 0.19437354069769097, 0.1411966535145892, 0.16149939526223867, 0.24369660765090406, 0.17165345144855548, 0.15672808824074347, 0.16372797834227915, 0.16761248675320972, 0.1520401669978272, 0.1508798013499696, 0.3034445194460117, 0.17887872157465678, 0.17366570869048104, 0.2028812417861957, 0.16944140470640723, 0.2237305618099873, 0.17685058076392857, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17967047337437525, 0.188688463014553, 0.2429699908236106, 0.0947762948743548, 0.07308116822850497, 0.07555298902537866, 0.05186305593955043, 0.062375095939128045, 0.14039733981369573, 0.12046684496579019, 0.05491659739916577, 0.05062431923767596]}, "mutation_prompt": null}
{"id": "9aaa33f7-3471-4186-af7e-3a2e7fb4bf8a", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\nclass ImprovedHybridHarmonyPSO(HybridHarmonyPSO):\n    def evaluate_solutions_parallel(self, func, solutions):\n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            futures = [executor.submit(func, solution) for solution in solutions]\n            results = [future.result() for future in as_completed(futures)]\n        return results\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array(self.evaluate_solutions_parallel(func, harmony_memory))\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(self.evaluate_solutions_parallel(func, new_solutions))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array(self.evaluate_solutions_parallel(func, pbest))\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "ImprovedHybridHarmonyPSO", "description": "Implementing a parallel asynchronous evaluation strategy to speed up fitness evaluation and solution update process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6312e537-914a-4f39-9083-be03a7ad68bf", "metadata": {"aucs": [0.17106119617580662, 0.183164768591895, 0.197479246385302, 0.16845369514743413, 0.18818337038671906, 0.1743435064021196, 0.1785507992358102, 0.16281155072979714, 0.1900640255741839, 0.06599999999999995, 0.008199999999999985, 0.03810000000000002, 0.007399999999999962, 9.999999999998899e-05, 0.05740000000000001, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.04611047095548981, 0.046809513754464405, 0.04977074487583699, 0.1562798674125092, 0.0528437448134802, 0.09575461660818341, 0.058711088734964334, 0.025756673127183438, 0.07562830159195943, 0.0481463786277756, 0.04861513666111972, 0.04926774209271334, 0.05702674525995721, 0.052137356518779265, 0.03992308285267243, 0.03225126748607876, 0.48183854180125585, 0.5278745093405857, 0.5261593791440391, 0.556500796271775, 0.5726670685312326, 0.5069464340214569, 0.5803154798158203, 0.5300214696812768, 0.53386575924448, 0.06443028781665472, 0.07510940173832203, 0.10171882691615464, 0.053803800388950385, 0.10606928790512216, 0.05190122563388122, 0.10252066063771503, 0.08046864392575714, 0.0928167823142052, 0.13375175994902766, 0.25771507138995786, 0.1481850439168273, 0.15781678312503822, 0.1164135922493319, 0.13477630983343114, 0.14649742396249588, 0.19432038345520275, 0.13517209650225814, 9.999999999998899e-05, 0.06758189734965692, 0.003689195106263865, 0.04422137908095103, 0.08103101652691125, 0.0022454229096671163, 9.999999999998899e-05, 0.04249999999999998, 0.019872591751231683, 0.00458165826050172, 0.06957272857429797, 0.012758968564191675, 0.007159387613177359, 0.0434549217280622, 0.011860097762603106, 0.027645144410284983, 0.03960532873984468, 0.001276934196792201, 9.999999999998899e-05, 0.00770000000000004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1089, 9.999999999998899e-05, 0.015700000000000047, 0.08431122914033207, 0.06858859508378334, 0.04491109459619458, 0.06982319930116576, 0.03489049585261095, 0.06265830498961966, 0.05295698494644707, 0.03548550126745975, 0.06421743361722532, 0.02529999999999999, 9.999999999998899e-05, 0.00029999999999996696, 0.06669999999999998, 0.024499999999999966, 0.02400000000000002, 0.14529999999999998, 0.07310000000000005, 0.00039999999999995595, 9.999999999998899e-05, 9.999999999998899e-05, 0.007399999999999962, 0.032299999999999995, 0.048699999999999966, 9.999999999998899e-05, 0.03249999999999997, 0.006754747757416024, 0.032299999999999995, 0.22082032439354093, 0.19298032777251062, 0.19253305132024678, 0.2055799784281095, 0.20415139631429258, 0.23054183195205913, 0.2006523808210423, 0.29039544101253445, 0.20038910139557964, 0.06846678287190755, 0.07855684999585133, 0.1406480369258103, 0.03996840984097694, 0.04071283917873225, 0.06063776290823275, 0.073263588849099, 0.08868867521935331, 0.06743478383218948, 0.13819729600499175, 0.123984536869721, 0.13451158777775418, 0.14114924056111855, 0.16229191769130413, 0.17048253583379813, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.18238915336234562, 0.1709174786537795, 0.16833854391740677, 0.189057953399409, 0.1769644640004372, 0.16316150333705282, 0.17377774300845283, 0.15246898481322946, 0.10716386357745067, 0.1614151299400408, 0.11876343300790904, 0.10978923820566577, 0.13610603218022022, 0.11701239065941771, 0.1722971734787465, 0.1518550850524818, 0.1229185550255375, 0.16996571318955755, 0.23601626264373876, 0.14933789585266954, 0.16154286057415324, 0.23210716714019453, 0.17628730745050003, 0.15536184127756003, 0.17686874938039077, 0.18659688261942042, 0.14195011305864957, 0.14578023879947632, 0.14006577975982915, 0.14198304211372648, 0.14379127967294647, 0.15351998536504197, 0.13697870895265896, 0.14203070229532166, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.16060493753908556, 0.19437354069769097, 0.1411966535145892, 0.16149939526223867, 0.24369660765090406, 0.17165345144855548, 0.15672808824074347, 0.16372797834227915, 0.16761248675320972, 0.1520401669978272, 0.1508798013499696, 0.3034445194460117, 0.17887872157465678, 0.17366570869048104, 0.2028812417861957, 0.16944140470640723, 0.2237305618099873, 0.17685058076392857, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17967047337437525, 0.188688463014553, 0.2429699908236106, 0.0947762948743548, 0.07308116822850497, 0.07555298902537866, 0.05186305593955043, 0.062375095939128045, 0.14039733981369573, 0.12046684496579019, 0.05491659739916577, 0.05062431923767596]}, "mutation_prompt": null}
{"id": "d69e8dff-4b8f-4a54-92dc-57707401f1b9", "solution": "import numpy as np\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n\nclass ImprovedHybridHarmonyPSO(HybridHarmonyPSO):\n    def evaluate_solutions_parallel(self, func, solutions):\n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            futures = [executor.submit(func, solution) for solution in solutions]\n            results = [future.result() for future in as_completed(futures)]\n        return results\n\n    def __call__(self, func):\n        def initialize_harmony_memory():\n            return np.random.uniform(self.lower_bound, self.upper_bound, (self.hm_size, self.dim))\n\n        harmony_memory = initialize_harmony_memory()\n        fitness = np.array(self.evaluate_solutions_parallel(func, harmony_memory))\n        \n        with ThreadPoolExecutor(max_workers=self.num_threads) as executor:\n            for _ in range(self.budget - self.hm_size):\n                new_solutions = []\n                for _ in range(self.num_threads):\n                    new_solution = np.zeros(self.dim)\n                    hmcr = max(0.3, self.hmcr - 0.001)  # Dynamic adjustment of HMCR\n                    par = min(0.6, self.par + 0.001)  # Dynamic adjustment of PAR\n                    for i in range(self.dim):\n                        if np.random.rand() < hmcr:\n                            new_solution[i] = harmony_memory[np.random.choice(self.hm_size)][i]\n                        else:\n                            new_solution[i] = np.random.uniform(self.lower_bound, self.upper_bound)\n                        new_solution[i] = new_solution[i] + np.random.uniform(-self.bandwidth, self.bandwidth)\n                        new_solution[i] = np.clip(new_solution[i], self.lower_bound, self.upper_bound)\n                    new_solutions.append(new_solution)\n                \n                # Evaluate new solutions in parallel\n                new_fitness = np.array(self.evaluate_solutions_parallel(func, new_solutions))\n\n                for idx, new_solution in enumerate(new_solutions):\n                    worst_index = np.argmax(fitness)\n                    if new_fitness[idx] < fitness[worst_index]:\n                        harmony_memory[worst_index] = new_solution\n                        fitness[worst_index] = new_fitness[idx]\n\n                # Particle Swarm Optimization (PSO) for local exploration\n                pso_swarm = np.random.uniform(self.lower_bound, self.upper_bound, (self.pso_swarm_size, self.dim))\n                pbest = pso_swarm.copy()\n                pbest_fitness = np.array(self.evaluate_solutions_parallel(func, pbest))\n                gbest_index = np.argmin(pbest_fitness)\n                gbest = pbest[gbest_index]\n\n                for _ in range(self.pso_max_iter):\n                    for i in range(self.pso_swarm_size):\n                        r1, r2 = np.random.rand(self.dim), np.random.rand(self.dim)\n                        pso_velocity = self.pso_inertia * pso_swarm[i] + self.pso_c1 * r1 * (pbest[i] - pso_swarm[i]) + self.pso_c2 * r2 * (gbest - pso_swarm[i])\n                        pso_swarm[i] = np.clip(pso_swarm[i] + pso_velocity, self.lower_bound, self.upper_bound)\n                        pso_fitness = func(pso_swarm[i])\n                        if pso_fitness < pbest_fitness[i]:\n                            pbest[i] = pso_swarm[i]\n                            pbest_fitness[i] = pso_fitness\n                            if pbest_fitness[i] < func(gbest):\n                                gbest = pbest[i]\n                                gbest_index = i\n\n        best_index = np.argmin(fitness)\n        return harmony_memory[best_index], fitness[best_index]", "name": "ImprovedHybridHarmonyPSO", "description": "Implementing a parallel asynchronous evaluation strategy to speed up fitness evaluation and solution update process.", "configspace": "", "generation": 61, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6312e537-914a-4f39-9083-be03a7ad68bf", "metadata": {"aucs": [0.17106119617580662, 0.183164768591895, 0.197479246385302, 0.16845369514743413, 0.18818337038671906, 0.1743435064021196, 0.1785507992358102, 0.16281155072979714, 0.1900640255741839, 0.06599999999999995, 0.008199999999999985, 0.03810000000000002, 0.007399999999999962, 9.999999999998899e-05, 0.05740000000000001, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.042054227992728954, 0.046372490884433515, 0.04611047095548981, 0.046809513754464405, 0.04977074487583699, 0.1562798674125092, 0.0528437448134802, 0.09575461660818341, 0.058711088734964334, 0.025756673127183438, 0.07562830159195943, 0.0481463786277756, 0.04861513666111972, 0.04926774209271334, 0.05702674525995721, 0.052137356518779265, 0.03992308285267243, 0.03225126748607876, 0.48183854180125585, 0.5278745093405857, 0.5261593791440391, 0.556500796271775, 0.5726670685312326, 0.5069464340214569, 0.5803154798158203, 0.5300214696812768, 0.53386575924448, 0.06443028781665472, 0.07510940173832203, 0.10171882691615464, 0.053803800388950385, 0.10606928790512216, 0.05190122563388122, 0.10252066063771503, 0.08046864392575714, 0.0928167823142052, 0.13375175994902766, 0.25771507138995786, 0.1481850439168273, 0.15781678312503822, 0.1164135922493319, 0.13477630983343114, 0.14649742396249588, 0.19432038345520275, 0.13517209650225814, 9.999999999998899e-05, 0.06758189734965692, 0.003689195106263865, 0.04422137908095103, 0.08103101652691125, 0.0022454229096671163, 9.999999999998899e-05, 0.04249999999999998, 0.019872591751231683, 0.00458165826050172, 0.06957272857429797, 0.012758968564191675, 0.007159387613177359, 0.0434549217280622, 0.011860097762603106, 0.027645144410284983, 0.03960532873984468, 0.001276934196792201, 9.999999999998899e-05, 0.00770000000000004, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1089, 9.999999999998899e-05, 0.015700000000000047, 0.08431122914033207, 0.06858859508378334, 0.04491109459619458, 0.06982319930116576, 0.03489049585261095, 0.06265830498961966, 0.05295698494644707, 0.03548550126745975, 0.06421743361722532, 0.02529999999999999, 9.999999999998899e-05, 0.00029999999999996696, 0.06669999999999998, 0.024499999999999966, 0.02400000000000002, 0.14529999999999998, 0.07310000000000005, 0.00039999999999995595, 9.999999999998899e-05, 9.999999999998899e-05, 0.007399999999999962, 0.032299999999999995, 0.048699999999999966, 9.999999999998899e-05, 0.03249999999999997, 0.006754747757416024, 0.032299999999999995, 0.22082032439354093, 0.19298032777251062, 0.19253305132024678, 0.2055799784281095, 0.20415139631429258, 0.23054183195205913, 0.2006523808210423, 0.29039544101253445, 0.20038910139557964, 0.06846678287190755, 0.07855684999585133, 0.1406480369258103, 0.03996840984097694, 0.04071283917873225, 0.06063776290823275, 0.073263588849099, 0.08868867521935331, 0.06743478383218948, 0.13819729600499175, 0.123984536869721, 0.13451158777775418, 0.14114924056111855, 0.16229191769130413, 0.17048253583379813, 0.14963138758589234, 0.14861619065631115, 0.12862528034911247, 0.16581136048861322, 0.18238915336234562, 0.1709174786537795, 0.16833854391740677, 0.189057953399409, 0.1769644640004372, 0.16316150333705282, 0.17377774300845283, 0.15246898481322946, 0.10716386357745067, 0.1614151299400408, 0.11876343300790904, 0.10978923820566577, 0.13610603218022022, 0.11701239065941771, 0.1722971734787465, 0.1518550850524818, 0.1229185550255375, 0.16996571318955755, 0.23601626264373876, 0.14933789585266954, 0.16154286057415324, 0.23210716714019453, 0.17628730745050003, 0.15536184127756003, 0.17686874938039077, 0.18659688261942042, 0.14195011305864957, 0.14578023879947632, 0.14006577975982915, 0.14198304211372648, 0.14379127967294647, 0.15351998536504197, 0.13697870895265896, 0.14203070229532166, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.16060493753908556, 0.19437354069769097, 0.1411966535145892, 0.16149939526223867, 0.24369660765090406, 0.17165345144855548, 0.15672808824074347, 0.16372797834227915, 0.16761248675320972, 0.1520401669978272, 0.1508798013499696, 0.3034445194460117, 0.17887872157465678, 0.17366570869048104, 0.2028812417861957, 0.16944140470640723, 0.2237305618099873, 0.17685058076392857, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17967047337437525, 0.188688463014553, 0.2429699908236106, 0.0947762948743548, 0.07308116822850497, 0.07555298902537866, 0.05186305593955043, 0.062375095939128045, 0.14039733981369573, 0.12046684496579019, 0.05491659739916577, 0.05062431923767596]}, "mutation_prompt": null}
