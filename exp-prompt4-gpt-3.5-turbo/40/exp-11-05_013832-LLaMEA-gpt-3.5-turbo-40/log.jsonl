{"id": "f7ba2783-fbba-4fb1-8a78-9f72db9cd67b", "solution": "import numpy as np\n\nclass HybridEvolutionaryDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def mutation(x, F):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            mutant = x[idxs[0]] + F * (x[idxs[1]] - x[idxs[2]])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def harmonic_search(x):\n            new_x = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_x[i] = np.random.uniform(-5.0, 5.0)\n            return new_x\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                x = population[i]\n                mutant = mutation(x, F)\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = harmonic_search(x)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "HybridEvolutionaryDifferentialHarmonySearch", "description": "Hybrid Evolutionary Differential Harmony Search Algorithm for Black Box Optimization", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "An exception occured: Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 39, in __call__\n  File \"<string>\", line 21, in crossover\nIndexError: invalid index to scalar variable.\n.", "error": "IndexError('invalid index to scalar variable.')Traceback (most recent call last):\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 187, in initialize_single\n    new_individual = self.evaluate_fitness(new_individual)\n  File \"/scratch/hyin/LLaMEA/llamea/llamea.py\", line 264, in evaluate_fitness\n    updated_individual = self.f(individual, self.logger)\n  File \"mutation_exp.py\", line 52, in evaluateBBOB\n    algorithm(problem)\n  File \"<string>\", line 39, in __call__\n  File \"<string>\", line 21, in crossover\nIndexError: invalid index to scalar variable.\n", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "1960e3a3-e73a-4dda-b5e0-ea58e4977258", "solution": "import numpy as np\n\nclass HybridEvolutionaryDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def mutation(x, F):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            mutant = x + F * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def harmonic_search(x):\n            new_x = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_x[i] = np.random.uniform(-5.0, 5.0)\n            return new_x\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                x = population[i]\n                mutant = mutation(x, F)\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = harmonic_search(x)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution\n", "name": "HybridEvolutionaryDifferentialHarmonySearch", "description": "Enhancing the mutation process by introducing a differential evolution strategy to generate mutants.", "configspace": "", "generation": 1, "fitness": 0.09064465235167149, "feedback": "The algorithm HybridEvolutionaryDifferentialHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "f7ba2783-fbba-4fb1-8a78-9f72db9cd67b", "metadata": {"aucs": [0.21862008563665414, 0.17969234111626287, 0.16448328917513333, 0.157697289116024, 0.1796103115685268, 0.1676108213525751, 0.17499300259039918, 0.15408564870541908, 0.18225832583347723, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04243024575055698, 0.05177619077381823, 0.03274280644597982, 0.0452909513796389, 0.036723746989933304, 0.03772230423778933, 0.05050563866040425, 0.061114140497672276, 0.051677731033129004, 0.02790885612832239, 0.030056939584589104, 0.038142367806189736, 0.03695322029305248, 0.044563382514604344, 0.0549942226110417, 0.03656990665462423, 0.03609023925653798, 0.033122670046067504, 0.10541088214910199, 0.08850444323133255, 0.1344464626328452, 0.1398575681920089, 0.10235685647822901, 0.10684760619820355, 0.11622222232980761, 0.12600417150776577, 0.08939864333924341, 0.0691997676284205, 0.0760037287084615, 0.10019098225768097, 0.05565655362763011, 0.06683905686229719, 0.05833533298579474, 0.09167639638598646, 0.07567251227654992, 0.10089899052393791, 0.12050723145156228, 0.1892914634083318, 0.1491099404058681, 0.09815882543926369, 0.11140523997696417, 0.1216675412448116, 0.10521704964233647, 0.12985935185139874, 0.15386579925824095, 0.0061240011094443325, 9.999999999998899e-05, 0.0007938462085036457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016790757226985753, 9.999999999998899e-05, 0.05883216933625113, 0.023887171759948478, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.004386754093764433, 0.0006057945186920266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03576209526198304, 0.06600492231431232, 0.04325570707499371, 0.08228037600074445, 0.025351669426271872, 0.04978722650184586, 0.04710860922525695, 0.03938757735711518, 0.060011603562132754, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21412604138845137, 0.198979856314365, 0.18164115235311584, 0.20427302587260143, 0.19613486787524426, 0.19789533548174598, 0.19542856790839447, 0.18413197122505487, 0.18870306607728848, 0.0421745865782337, 0.03701734460339012, 0.03891297134772198, 0.04313268188217756, 0.0440331207034278, 0.04403472079714155, 0.05394972962188471, 0.048356294761902285, 0.04861263043741293, 0.1506366719912856, 0.1587913403277038, 0.14352801695744166, 0.13987505845860904, 0.13917748197901914, 0.1259183740709734, 0.14889811508630335, 0.14497038057783396, 0.1267148032139327, 0.17476745872065802, 0.15624498200069192, 0.16747299077403854, 0.16510391564295546, 0.1794474642696201, 0.16809591042631022, 0.15825010286215424, 0.1736451070718653, 0.15008620394814842, 0.1043106046892639, 0.10183924489011276, 0.1092669828617383, 0.10730230005058006, 0.1257745490213289, 0.10667123533641809, 0.10210335133531134, 0.12313792350961972, 0.11713176861784136, 0.15675978586616734, 0.15833099518171634, 0.14742829109349842, 0.1530290717339451, 0.15394885084263787, 0.16934593874666293, 0.1485769639575223, 0.1594494124078798, 0.17644625365519206, 0.141165003346039, 0.14327342669569754, 0.1423592288212101, 0.13229506903954025, 0.13787850996367668, 0.14972821397747826, 0.1270266671820537, 0.16221981707423716, 0.1604757114380957, 0.15241282734514972, 0.1636436509644651, 0.16211791347595683, 0.15783408121019116, 0.16105452610301962, 0.16835244619017808, 0.15878097335182406, 0.21679598032187086, 0.17215550976685223, 0.14840130522528894, 0.1536319260701957, 0.15026004368890844, 0.1340300054706448, 0.14380762731312025, 0.15488006022828582, 0.16368613281713829, 0.17214826184197374, 0.15225753159783673, 0.16856554244907906, 0.190497034302464, 0.18049370061433512, 0.184280261781676, 0.21117341159352954, 0.1773643585792528, 0.17599721712912764, 0.18574148011518843, 0.202878010803769, 0.05611002094425388, 0.04969816598774501, 0.0639824361372785, 0.059884548596587095, 0.058613969522546716, 0.06263890879219525, 0.07243458959092675, 0.05280336120983231, 0.0488804048307282]}, "mutation_prompt": null}
{"id": "d87b4303-e5ff-428a-853f-66dd4555afa6", "solution": "import numpy as np\n\nclass ImprovedHybridEvolutionaryDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def mutation(x, F):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            mutant = x + F * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def harmonic_search(x):\n            new_x = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_x[i] = np.random.uniform(-5.0, 5.0)\n            return new_x\n\n        def select_mutation(x, mutants, F):\n            fitness_x = cost_function(x)\n            fitness_mutants = [cost_function(mutant) for mutant in mutants]\n            best_mutant = mutants[np.argmin(fitness_mutants)]\n            if cost_function(best_mutant) < fitness_x:\n                return best_mutant\n            return mutation(x, F)\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                x = population[i]\n                mutant = select_mutation(x, [mutation(x, F) for _ in range(3)], F)\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = harmonic_search(x)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "ImprovedHybridEvolutionaryDifferentialHarmonySearch", "description": "Improving convergence diversity by incorporating a mutation selection mechanism based on individual fitness evaluations.", "configspace": "", "generation": 2, "fitness": 0.08458595785283686, "feedback": "The algorithm ImprovedHybridEvolutionaryDifferentialHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.07.", "error": "", "parent_id": "1960e3a3-e73a-4dda-b5e0-ea58e4977258", "metadata": {"aucs": [0.16758721807527166, 0.18618346752316195, 0.1634096995623311, 0.16215072572824463, 0.17064290006682514, 0.1602900020244129, 0.15407038922761418, 0.17761411766712232, 0.16655799689619566, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03975577348566517, 0.04356963074613829, 0.032939300977193, 0.03182555721500413, 0.033056364363646784, 0.045637103763524145, 0.03780904645623284, 0.04799141995922196, 0.03268274210166877, 0.026360402467892508, 0.026261053513132904, 0.022003954177240992, 0.029855599075680916, 0.01907464752111321, 0.02930061863214961, 0.0319970695905093, 0.026737325138657564, 0.030176179878906417, 0.09398434855102988, 0.09800464942346732, 0.1322998006122118, 0.10541611995507283, 0.11207430661004547, 0.09520597224696448, 0.101908058717458, 0.09572069609167588, 0.09757730699493516, 0.0645520848466209, 0.06768638078549993, 0.09707476568560891, 0.04958571374646836, 0.05951375031883421, 0.05000378966061092, 0.08647096628032613, 0.06271365383281191, 0.10676646042925952, 0.11353283676059056, 0.17334851186178224, 0.11641341482226053, 0.08189089100238411, 0.09435967370296494, 0.12580464009448988, 0.0949786602354219, 0.12260374926648532, 0.11364197920362917, 0.00042595808806433766, 9.999999999998899e-05, 9.999999999998899e-05, 0.001673163727178295, 9.999999999998899e-05, 0.01834075037443017, 0.002393088792371434, 9.999999999998899e-05, 0.00542071086608098, 9.999999999998899e-05, 0.005177501118531991, 9.999999999998899e-05, 9.999999999998899e-05, 0.027573983458665685, 9.999999999998899e-05, 0.01604744798227553, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05056360380226255, 0.05592008371396129, 0.050393888930598596, 0.03998868125195931, 0.03885692226612558, 0.03544192809028246, 0.06478945610975329, 0.052908720063380876, 0.021736686245125036, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18699339810179194, 0.1914893920218188, 0.17273241545266993, 0.20162735938828313, 0.17091041258262574, 0.187638276619013, 0.18666074217603978, 0.16649543316997462, 0.2099668189262771, 0.05485449192247738, 0.036038061121040466, 0.03438776785307274, 0.05005706483350836, 0.04001238676842345, 0.043038593313884155, 0.03737238070762394, 0.03391227776547712, 0.04076924676676319, 0.13315392626566758, 0.13555255079919803, 0.13835461048808795, 0.13677539385803394, 0.16229305340518407, 0.10836244438149101, 0.14418215975108029, 0.13009493672346994, 0.12611159007236128, 0.16947207564623, 0.1465322044194317, 0.16421737260964908, 0.15728631380948388, 0.1890614793389812, 0.17875382777593463, 0.14524450015130375, 0.19731091846053295, 0.13886279416486236, 0.09150039065232818, 0.10829305933717659, 0.10153651094890193, 0.09407076209255283, 0.11605921700336697, 0.10281059673792003, 0.10366947326731502, 0.12139437784648177, 0.09705759825436522, 0.13841369477511067, 0.14655658309579722, 0.14275317372131247, 0.15981814656635907, 0.1541721898642947, 0.1473225386920567, 0.14477489639018493, 0.14426491461240898, 0.16587839891201694, 0.1461800699263125, 0.13243668479797943, 0.11714101020839807, 0.1445412475182225, 0.14030823358766442, 0.12657613152276825, 0.1457025683711205, 0.13662721094253827, 0.1530588594965986, 0.1315825036314865, 0.154823159191669, 0.15307999864263078, 0.1470794153089784, 0.12448867329175428, 0.1900177446538961, 0.13379840296815548, 0.1593281559761528, 0.158956567540966, 0.17119568816847264, 0.16652302149424136, 0.12881158079412158, 0.12594539368321944, 0.10719517409200052, 0.1161980012324928, 0.1532921249043384, 0.17205022332632758, 0.17254119959165104, 0.17699418758165264, 0.18158137871025637, 0.1783966079603435, 0.19415504669497763, 0.19548815942079356, 0.17697536646421086, 0.17531136296350047, 0.17832179270734483, 0.19686769625310763, 0.05424687817933427, 0.05135617748815968, 0.05652227212839733, 0.04757339135179717, 0.05685640681208348, 0.05736857204556778, 0.058712866198709524, 0.048149525840089136, 0.048358905711864075]}, "mutation_prompt": null}
{"id": "3331f43d-d959-4a13-9e02-84b041c1c8b9", "solution": "import numpy as np\n\nclass EnhancedHybridEvolutionaryDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def mutation(x, F):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            mutant = x + F * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def harmonic_search(x):\n            new_x = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_x[i] = np.random.uniform(-5.0, 5.0)\n            return new_x\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        # Dynamic adaptation of F and CR\n        progress = 0\n        max_progress = self.budget // 10\n        F_min, F_max = 0.2, 0.8\n        CR_min, CR_max = 0.6, 1.0\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                x = population[i]\n                F = max(F_min, F_max - (F_max - F_min) * progress / max_progress)\n                CR = min(CR_max, CR_min + (CR_max - CR_min) * progress / max_progress)\n                \n                mutant = mutation(x, F)\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = harmonic_search(x)\n                \n                progress += 1\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedHybridEvolutionaryDifferentialHarmonySearch", "description": "Introducing a dynamic adaptive mechanism to adjust mutation and crossover parameters based on the search progress.", "configspace": "", "generation": 3, "fitness": 0.09094361411151138, "feedback": "The algorithm EnhancedHybridEvolutionaryDifferentialHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "1960e3a3-e73a-4dda-b5e0-ea58e4977258", "metadata": {"aucs": [0.1754158022531599, 0.1742399377565429, 0.16482683367207884, 0.16380697447232084, 0.17912692330458302, 0.169905028698902, 0.17058430667689828, 0.15846308924275054, 0.17284319390796576, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03998857518757426, 0.04492890685026507, 0.04202829246020179, 0.04096536645900539, 0.05293669648696575, 0.041139952101755584, 0.047877889712494515, 0.06154883997885463, 0.05313868349176265, 0.022183989822407102, 0.03408912305004175, 0.04746118548088629, 0.02853790289600422, 0.046407571780896384, 0.05071721376435401, 0.03744445470014546, 0.0331299963807864, 0.03430031644396336, 0.11248323720134212, 0.12084409661600437, 0.09612959282316136, 0.1199879752651477, 0.0985873157901036, 0.08582023871242983, 0.12890315650705197, 0.08713312862001843, 0.10536350223423452, 0.06438682329336842, 0.07428459403704857, 0.10019098225768097, 0.0636489083546854, 0.08217176065280751, 0.061680310785691694, 0.09115391308882481, 0.06812202660986111, 0.08951011704082756, 0.1380064419906636, 0.1892914634083318, 0.14280445449937706, 0.13445938022855675, 0.10294471902280533, 0.11882730147550014, 0.10950853691003559, 0.11872790388218257, 0.13607117691012027, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011319815218617801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01825163444084643, 9.999999999998899e-05, 0.016790757226985753, 0.004599034043301753, 0.05883216933625113, 0.013552503950725603, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.004386754093764433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06944176349243203, 0.06600492231431232, 0.04325570707499371, 0.060384555444494836, 0.06200672390952222, 0.04804745747438843, 0.04666020591494857, 0.0519187216257222, 0.0538001048697937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21611031810154013, 0.19727680684114557, 0.20462395135152855, 0.2054980842687566, 0.19319229779408154, 0.19863237337506534, 0.19633309416986156, 0.17146444158566354, 0.18602959961048304, 0.04665631229905398, 0.03569608216584108, 0.04071520748496538, 0.0366752287988833, 0.0417495959348011, 0.04298852919057683, 0.05905851245752203, 0.0417200553666055, 0.04528571105900847, 0.14187983733662202, 0.13661202568091413, 0.1608454440008854, 0.13987826727797859, 0.14116534405619063, 0.1304001594436932, 0.14782294242034255, 0.1455570179349297, 0.12469374289395785, 0.16465195643278951, 0.16016959588714474, 0.16747871403992776, 0.16571292727279308, 0.17028946060411676, 0.1803045371755776, 0.15844269479373652, 0.1736484268167494, 0.17167926955818946, 0.10349524771294805, 0.10519787776450829, 0.10930754034710388, 0.10841432221636638, 0.12711805654710318, 0.10668556206405044, 0.10879769999527089, 0.1230947074684926, 0.11969227692814766, 0.13805337670424722, 0.1675163349325247, 0.15725386039826628, 0.15943228763631, 0.146088930377121, 0.15550704038859509, 0.16477199849584778, 0.16344193564384057, 0.1772069846047032, 0.1452663506694416, 0.15040969676484417, 0.13441456973629662, 0.13194452214700692, 0.1450986022431775, 0.14867949797299784, 0.13309805266933472, 0.1451918913553505, 0.1604757114380957, 0.16436322889624733, 0.17846723281187404, 0.1618819145344782, 0.15435533057044393, 0.1633219154294867, 0.14643363172524748, 0.18531338201470815, 0.228057811351014, 0.1604417992269659, 0.15244990030756977, 0.1543722937961427, 0.14934980091523054, 0.15224113128351469, 0.1540750802633667, 0.14932761915430726, 0.16920941352192254, 0.16879434180549469, 0.14738344543194193, 0.18291405024787288, 0.1836763228853221, 0.1740979271027081, 0.18742562433738297, 0.21127869092896712, 0.1793648559710478, 0.1776498704056756, 0.18601410717601707, 0.20838239536275682, 0.05452031218506925, 0.04906239963832881, 0.06619364574487185, 0.05705697197188442, 0.06435175544588367, 0.05027850781770504, 0.07234491958866363, 0.05274675649865146, 0.05177606872568652]}, "mutation_prompt": null}
{"id": "86390b94-6449-449b-8cc8-9215446e7bec", "solution": "import numpy as np\n\nclass EnhancedHybridEvolutionaryDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def mutation(x, F):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            mutant = x + F * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def harmonic_search(x):\n            new_x = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_x[i] = np.random.uniform(-5.0, 5.0)\n            return new_x\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        # Dynamic adaptation of F and CR\n        progress = 0\n        max_progress = self.budget // 10\n        F_min, F_max = 0.2, 0.8\n        CR_min, CR_max = 0.6, 1.0\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                x = population[i]\n                F = max(F_min, F_max - (F_max - F_min) * progress / max_progress)\n                CR = min(CR_max, CR_min + (CR_max - CR_min) * progress / max_progress)\n                \n                mutant = mutation(x, F)\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = harmonic_search(x)\n                \n                progress += 1\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedHybridEvolutionaryDifferentialHarmonySearch", "description": "Introducing a dynamic adaptive mechanism to adjust mutation and crossover parameters based on the search progress.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3331f43d-d959-4a13-9e02-84b041c1c8b9", "metadata": {"aucs": [0.1754158022531599, 0.1742399377565429, 0.16482683367207884, 0.16380697447232084, 0.17912692330458302, 0.169905028698902, 0.17058430667689828, 0.15846308924275054, 0.17284319390796576, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03998857518757426, 0.04492890685026507, 0.04202829246020179, 0.04096536645900539, 0.05293669648696575, 0.041139952101755584, 0.047877889712494515, 0.06154883997885463, 0.05313868349176265, 0.022183989822407102, 0.03408912305004175, 0.04746118548088629, 0.02853790289600422, 0.046407571780896384, 0.05071721376435401, 0.03744445470014546, 0.0331299963807864, 0.03430031644396336, 0.11248323720134212, 0.12084409661600437, 0.09612959282316136, 0.1199879752651477, 0.0985873157901036, 0.08582023871242983, 0.12890315650705197, 0.08713312862001843, 0.10536350223423452, 0.06438682329336842, 0.07428459403704857, 0.10019098225768097, 0.0636489083546854, 0.08217176065280751, 0.061680310785691694, 0.09115391308882481, 0.06812202660986111, 0.08951011704082756, 0.1380064419906636, 0.1892914634083318, 0.14280445449937706, 0.13445938022855675, 0.10294471902280533, 0.11882730147550014, 0.10950853691003559, 0.11872790388218257, 0.13607117691012027, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011319815218617801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01825163444084643, 9.999999999998899e-05, 0.016790757226985753, 0.004599034043301753, 0.05883216933625113, 0.013552503950725603, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.004386754093764433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06944176349243203, 0.06600492231431232, 0.04325570707499371, 0.060384555444494836, 0.06200672390952222, 0.04804745747438843, 0.04666020591494857, 0.0519187216257222, 0.0538001048697937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21611031810154013, 0.19727680684114557, 0.20462395135152855, 0.2054980842687566, 0.19319229779408154, 0.19863237337506534, 0.19633309416986156, 0.17146444158566354, 0.18602959961048304, 0.04665631229905398, 0.03569608216584108, 0.04071520748496538, 0.0366752287988833, 0.0417495959348011, 0.04298852919057683, 0.05905851245752203, 0.0417200553666055, 0.04528571105900847, 0.14187983733662202, 0.13661202568091413, 0.1608454440008854, 0.13987826727797859, 0.14116534405619063, 0.1304001594436932, 0.14782294242034255, 0.1455570179349297, 0.12469374289395785, 0.16465195643278951, 0.16016959588714474, 0.16747871403992776, 0.16571292727279308, 0.17028946060411676, 0.1803045371755776, 0.15844269479373652, 0.1736484268167494, 0.17167926955818946, 0.10349524771294805, 0.10519787776450829, 0.10930754034710388, 0.10841432221636638, 0.12711805654710318, 0.10668556206405044, 0.10879769999527089, 0.1230947074684926, 0.11969227692814766, 0.13805337670424722, 0.1675163349325247, 0.15725386039826628, 0.15943228763631, 0.146088930377121, 0.15550704038859509, 0.16477199849584778, 0.16344193564384057, 0.1772069846047032, 0.1452663506694416, 0.15040969676484417, 0.13441456973629662, 0.13194452214700692, 0.1450986022431775, 0.14867949797299784, 0.13309805266933472, 0.1451918913553505, 0.1604757114380957, 0.16436322889624733, 0.17846723281187404, 0.1618819145344782, 0.15435533057044393, 0.1633219154294867, 0.14643363172524748, 0.18531338201470815, 0.228057811351014, 0.1604417992269659, 0.15244990030756977, 0.1543722937961427, 0.14934980091523054, 0.15224113128351469, 0.1540750802633667, 0.14932761915430726, 0.16920941352192254, 0.16879434180549469, 0.14738344543194193, 0.18291405024787288, 0.1836763228853221, 0.1740979271027081, 0.18742562433738297, 0.21127869092896712, 0.1793648559710478, 0.1776498704056756, 0.18601410717601707, 0.20838239536275682, 0.05452031218506925, 0.04906239963832881, 0.06619364574487185, 0.05705697197188442, 0.06435175544588367, 0.05027850781770504, 0.07234491958866363, 0.05274675649865146, 0.05177606872568652]}, "mutation_prompt": null}
{"id": "fedd2219-ced6-42d8-8b3c-28b58ff28456", "solution": "import numpy as np\n\nclass EnhancedHybridEvolutionaryDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def mutation(x, F):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            mutant = x + F * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def harmonic_search(x):\n            new_x = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_x[i] = np.random.uniform(-5.0, 5.0)\n            return new_x\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        # Dynamic adaptation of F and CR\n        progress = 0\n        max_progress = self.budget // 10\n        F_min, F_max = 0.2, 0.8\n        CR_min, CR_max = 0.6, 1.0\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                x = population[i]\n                F = max(F_min, F_max - (F_max - F_min) * progress / max_progress)\n                CR = min(CR_max, CR_min + (CR_max - CR_min) * progress / max_progress)\n                \n                mutant = mutation(x, F)\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = harmonic_search(x)\n                \n                progress += 1\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedHybridEvolutionaryDifferentialHarmonySearch", "description": "Introducing a dynamic adaptive mechanism to adjust mutation and crossover parameters based on the search progress.", "configspace": "", "generation": 4, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3331f43d-d959-4a13-9e02-84b041c1c8b9", "metadata": {"aucs": [0.1754158022531599, 0.1742399377565429, 0.16482683367207884, 0.16380697447232084, 0.17912692330458302, 0.169905028698902, 0.17058430667689828, 0.15846308924275054, 0.17284319390796576, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03998857518757426, 0.04492890685026507, 0.04202829246020179, 0.04096536645900539, 0.05293669648696575, 0.041139952101755584, 0.047877889712494515, 0.06154883997885463, 0.05313868349176265, 0.022183989822407102, 0.03408912305004175, 0.04746118548088629, 0.02853790289600422, 0.046407571780896384, 0.05071721376435401, 0.03744445470014546, 0.0331299963807864, 0.03430031644396336, 0.11248323720134212, 0.12084409661600437, 0.09612959282316136, 0.1199879752651477, 0.0985873157901036, 0.08582023871242983, 0.12890315650705197, 0.08713312862001843, 0.10536350223423452, 0.06438682329336842, 0.07428459403704857, 0.10019098225768097, 0.0636489083546854, 0.08217176065280751, 0.061680310785691694, 0.09115391308882481, 0.06812202660986111, 0.08951011704082756, 0.1380064419906636, 0.1892914634083318, 0.14280445449937706, 0.13445938022855675, 0.10294471902280533, 0.11882730147550014, 0.10950853691003559, 0.11872790388218257, 0.13607117691012027, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011319815218617801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01825163444084643, 9.999999999998899e-05, 0.016790757226985753, 0.004599034043301753, 0.05883216933625113, 0.013552503950725603, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.004386754093764433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06944176349243203, 0.06600492231431232, 0.04325570707499371, 0.060384555444494836, 0.06200672390952222, 0.04804745747438843, 0.04666020591494857, 0.0519187216257222, 0.0538001048697937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21611031810154013, 0.19727680684114557, 0.20462395135152855, 0.2054980842687566, 0.19319229779408154, 0.19863237337506534, 0.19633309416986156, 0.17146444158566354, 0.18602959961048304, 0.04665631229905398, 0.03569608216584108, 0.04071520748496538, 0.0366752287988833, 0.0417495959348011, 0.04298852919057683, 0.05905851245752203, 0.0417200553666055, 0.04528571105900847, 0.14187983733662202, 0.13661202568091413, 0.1608454440008854, 0.13987826727797859, 0.14116534405619063, 0.1304001594436932, 0.14782294242034255, 0.1455570179349297, 0.12469374289395785, 0.16465195643278951, 0.16016959588714474, 0.16747871403992776, 0.16571292727279308, 0.17028946060411676, 0.1803045371755776, 0.15844269479373652, 0.1736484268167494, 0.17167926955818946, 0.10349524771294805, 0.10519787776450829, 0.10930754034710388, 0.10841432221636638, 0.12711805654710318, 0.10668556206405044, 0.10879769999527089, 0.1230947074684926, 0.11969227692814766, 0.13805337670424722, 0.1675163349325247, 0.15725386039826628, 0.15943228763631, 0.146088930377121, 0.15550704038859509, 0.16477199849584778, 0.16344193564384057, 0.1772069846047032, 0.1452663506694416, 0.15040969676484417, 0.13441456973629662, 0.13194452214700692, 0.1450986022431775, 0.14867949797299784, 0.13309805266933472, 0.1451918913553505, 0.1604757114380957, 0.16436322889624733, 0.17846723281187404, 0.1618819145344782, 0.15435533057044393, 0.1633219154294867, 0.14643363172524748, 0.18531338201470815, 0.228057811351014, 0.1604417992269659, 0.15244990030756977, 0.1543722937961427, 0.14934980091523054, 0.15224113128351469, 0.1540750802633667, 0.14932761915430726, 0.16920941352192254, 0.16879434180549469, 0.14738344543194193, 0.18291405024787288, 0.1836763228853221, 0.1740979271027081, 0.18742562433738297, 0.21127869092896712, 0.1793648559710478, 0.1776498704056756, 0.18601410717601707, 0.20838239536275682, 0.05452031218506925, 0.04906239963832881, 0.06619364574487185, 0.05705697197188442, 0.06435175544588367, 0.05027850781770504, 0.07234491958866363, 0.05274675649865146, 0.05177606872568652]}, "mutation_prompt": null}
{"id": "ae96b77e-9c63-4b46-93bf-db4b3e28e121", "solution": "import numpy as np\n\nclass DynamicAdaptiveHybridEvolutionaryDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def mutation(x, F):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            mutant = x + F * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def harmonic_search(x):\n            new_x = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_x[i] = np.random.uniform(-5.0, 5.0)\n            return new_x\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        progress = 0\n        max_progress = self.budget // 10\n        F_min, F_max = 0.2, 0.8\n        CR_min, CR_max = 0.6, 1.0\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                x = population[i]\n                F = max(F_min, F_max - (F_max - F_min) * progress / max_progress)\n                CR = min(CR_max, CR_min + (CR_max - CR_min) * progress / max_progress)\n                \n                mutant = mutation(x, F)\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = harmonic_search(x)\n                \n                progress += 1\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "DynamicAdaptiveHybridEvolutionaryDifferentialHarmonySearch", "description": "Introducing a dynamic adaptive mechanism to adjust mutation and crossover parameters based on the individual search progress and quality.", "configspace": "", "generation": 6, "fitness": 0.09094361411151138, "feedback": "The algorithm DynamicAdaptiveHybridEvolutionaryDifferentialHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "3331f43d-d959-4a13-9e02-84b041c1c8b9", "metadata": {"aucs": [0.1754158022531599, 0.1742399377565429, 0.16482683367207884, 0.16380697447232084, 0.17912692330458302, 0.169905028698902, 0.17058430667689828, 0.15846308924275054, 0.17284319390796576, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03998857518757426, 0.04492890685026507, 0.04202829246020179, 0.04096536645900539, 0.05293669648696575, 0.041139952101755584, 0.047877889712494515, 0.06154883997885463, 0.05313868349176265, 0.022183989822407102, 0.03408912305004175, 0.04746118548088629, 0.02853790289600422, 0.046407571780896384, 0.05071721376435401, 0.03744445470014546, 0.0331299963807864, 0.03430031644396336, 0.11248323720134212, 0.12084409661600437, 0.09612959282316136, 0.1199879752651477, 0.0985873157901036, 0.08582023871242983, 0.12890315650705197, 0.08713312862001843, 0.10536350223423452, 0.06438682329336842, 0.07428459403704857, 0.10019098225768097, 0.0636489083546854, 0.08217176065280751, 0.061680310785691694, 0.09115391308882481, 0.06812202660986111, 0.08951011704082756, 0.1380064419906636, 0.1892914634083318, 0.14280445449937706, 0.13445938022855675, 0.10294471902280533, 0.11882730147550014, 0.10950853691003559, 0.11872790388218257, 0.13607117691012027, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011319815218617801, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01825163444084643, 9.999999999998899e-05, 0.016790757226985753, 0.004599034043301753, 0.05883216933625113, 0.013552503950725603, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.004386754093764433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06944176349243203, 0.06600492231431232, 0.04325570707499371, 0.060384555444494836, 0.06200672390952222, 0.04804745747438843, 0.04666020591494857, 0.0519187216257222, 0.0538001048697937, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21611031810154013, 0.19727680684114557, 0.20462395135152855, 0.2054980842687566, 0.19319229779408154, 0.19863237337506534, 0.19633309416986156, 0.17146444158566354, 0.18602959961048304, 0.04665631229905398, 0.03569608216584108, 0.04071520748496538, 0.0366752287988833, 0.0417495959348011, 0.04298852919057683, 0.05905851245752203, 0.0417200553666055, 0.04528571105900847, 0.14187983733662202, 0.13661202568091413, 0.1608454440008854, 0.13987826727797859, 0.14116534405619063, 0.1304001594436932, 0.14782294242034255, 0.1455570179349297, 0.12469374289395785, 0.16465195643278951, 0.16016959588714474, 0.16747871403992776, 0.16571292727279308, 0.17028946060411676, 0.1803045371755776, 0.15844269479373652, 0.1736484268167494, 0.17167926955818946, 0.10349524771294805, 0.10519787776450829, 0.10930754034710388, 0.10841432221636638, 0.12711805654710318, 0.10668556206405044, 0.10879769999527089, 0.1230947074684926, 0.11969227692814766, 0.13805337670424722, 0.1675163349325247, 0.15725386039826628, 0.15943228763631, 0.146088930377121, 0.15550704038859509, 0.16477199849584778, 0.16344193564384057, 0.1772069846047032, 0.1452663506694416, 0.15040969676484417, 0.13441456973629662, 0.13194452214700692, 0.1450986022431775, 0.14867949797299784, 0.13309805266933472, 0.1451918913553505, 0.1604757114380957, 0.16436322889624733, 0.17846723281187404, 0.1618819145344782, 0.15435533057044393, 0.1633219154294867, 0.14643363172524748, 0.18531338201470815, 0.228057811351014, 0.1604417992269659, 0.15244990030756977, 0.1543722937961427, 0.14934980091523054, 0.15224113128351469, 0.1540750802633667, 0.14932761915430726, 0.16920941352192254, 0.16879434180549469, 0.14738344543194193, 0.18291405024787288, 0.1836763228853221, 0.1740979271027081, 0.18742562433738297, 0.21127869092896712, 0.1793648559710478, 0.1776498704056756, 0.18601410717601707, 0.20838239536275682, 0.05452031218506925, 0.04906239963832881, 0.06619364574487185, 0.05705697197188442, 0.06435175544588367, 0.05027850781770504, 0.07234491958866363, 0.05274675649865146, 0.05177606872568652]}, "mutation_prompt": null}
{"id": "2b9cb0f8-33fc-4716-b9b6-9a82f719e372", "solution": "import numpy as np\n\nclass EnhancedHybridEvolutionaryDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def mutation(x, F):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            mutant = x + F * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def harmonic_search(x):\n            new_x = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_x[i] = np.random.uniform(-5.0, 5.0)\n            return new_x\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        # Self-adaptive mechanism for F\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = mutation(x, F)\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = harmonic_search(x)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution\n", "name": "EnhancedHybridEvolutionaryDifferentialHarmonySearch", "description": "Introducing a self-adaptive mechanism for mutation scaling factor F for enhanced exploration.", "configspace": "", "generation": 7, "fitness": 0.0919040625824979, "feedback": "The algorithm EnhancedHybridEvolutionaryDifferentialHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "3331f43d-d959-4a13-9e02-84b041c1c8b9", "metadata": {"aucs": [0.16924673196354068, 0.21970154286155008, 0.16292496815961954, 0.15713293788184057, 0.17808202692091712, 0.16936144660701247, 0.17347725933518343, 0.17221793874931723, 0.16375292025202492, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04375958860071749, 0.04444557484093925, 0.04729769764756442, 0.04899242657188663, 0.04231065080580809, 0.04302288095513218, 0.04773306108594422, 0.06100723845683165, 0.051931949930965504, 0.038843284053069915, 0.027904339255831467, 0.04050965798477624, 0.026655653508149246, 0.04174867353132161, 0.05497527742494712, 0.03548780070194535, 0.03483039061799864, 0.028502288425745204, 0.10386319821496304, 0.10058785400951364, 0.11827767020661817, 0.11750954437732053, 0.11155315109796904, 0.10061478372750987, 0.10328636536040325, 0.12024093975669059, 0.11228960807976363, 0.06734025770107599, 0.07617396735579574, 0.10050728334270587, 0.08398334131106111, 0.07065827330508179, 0.057220146124187354, 0.09304148257430367, 0.058108538446700386, 0.0894403634800155, 0.15264587433190624, 0.18933703431597426, 0.14374647345181424, 0.1328168771464523, 0.08798205890980826, 0.12271966866621986, 0.1283849841550775, 0.11834504120169476, 0.12919150371061683, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 0.0008649598838210704, 0.0010494968721109776, 9.999999999998899e-05, 9.999999999998899e-05, 0.007654392210652117, 0.016790757226985753, 9.999999999998899e-05, 0.05883216933625113, 9.999999999998899e-05, 0.038983658118186715, 0.03406038839019088, 0.010541791336374229, 0.017667153369731237, 0.006994436492887557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059620373449874364, 0.06600492231431232, 0.05173281231181104, 0.0628717104709714, 0.040122451036449625, 0.045999554680021926, 0.042602328090791564, 0.032021600354247504, 0.050630049558975765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.2199064939125217, 0.19096318535811663, 0.183521754320089, 0.20277868850656555, 0.19185576977298913, 0.19904756737567175, 0.20485862166320845, 0.1785374642067069, 0.1898916752783535, 0.04162156454541166, 0.036813789735172575, 0.03828554750005553, 0.03626750094406439, 0.037617954664495246, 0.04284740434456291, 0.06468839433871831, 0.04404609198955678, 0.04556512016983483, 0.13647238877569012, 0.12874066125825157, 0.12491234425758613, 0.13988933132811177, 0.13917560316942856, 0.13465005926479667, 0.14845182903264542, 0.1468181938055657, 0.1240266236832942, 0.16399842324571912, 0.1921150851307425, 0.1674774579978473, 0.17455513218679752, 0.18102188489393034, 0.1693871850460973, 0.16004500818415346, 0.1736684248857162, 0.1481939427607476, 0.10548785234625124, 0.10178926564160662, 0.11149025144065727, 0.10926694995869257, 0.12653308494751636, 0.1072470567290118, 0.10355281509081127, 0.1231006517948583, 0.11781567203421384, 0.1614587701953727, 0.15641074836895097, 0.1463036350588096, 0.15394668335807982, 0.14379938096635891, 0.15432471009362758, 0.15974939230810015, 0.1704957880058764, 0.17698093889951683, 0.1527806859477463, 0.1462335918550023, 0.1535479109317508, 0.15335672829971447, 0.14032302480629988, 0.151421678882953, 0.14248592880142918, 0.1562018187655232, 0.1604757114380957, 0.21216512442079138, 0.1638243128510738, 0.22946736350674246, 0.156349346875282, 0.15254250071192277, 0.1484838425183218, 0.16823857105413276, 0.15522209112681007, 0.15752727582434467, 0.17429231518528, 0.22037352868069227, 0.15291865246831782, 0.1706782462618186, 0.1420905843651712, 0.1484702730520514, 0.2243180879411366, 0.16587281998295655, 0.14443929569984415, 0.184500482979443, 0.19562317268234086, 0.1718137140179058, 0.18608575609477307, 0.21349213428059388, 0.1824815257933735, 0.18250553464995978, 0.1880598827758444, 0.20308889957197607, 0.051990059976106395, 0.04963698019331675, 0.06418938724651235, 0.051339453883900044, 0.058608060758111646, 0.04906964415901416, 0.07206661963763417, 0.05458565170203167, 0.047272586045848386]}, "mutation_prompt": null}
{"id": "885ac80d-26ad-4079-a476-88b77e5214fc", "solution": "import numpy as np\n\nclass EnhancedPopulationDiversityEvolutionaryDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def mutation(x, F):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            mutant = x + F * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def crowding_selection(population, cost_function):\n            pop_size = len(population)\n            sorted_indices = np.argsort([cost_function(x) for x in population])\n            selected_indices = []\n            while len(selected_indices) < pop_size:\n                for idx in sorted_indices:\n                    if idx not in selected_indices:\n                        selected_indices.append(idx)\n                    if len(selected_indices) == pop_size:\n                        break\n            return [population[idx] for idx in selected_indices]\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        # Self-adaptive mechanism for F\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            population = crowding_selection(population, cost_function)\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = mutation(x, F)\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedPopulationDiversityEvolutionaryDifferentialHarmonySearch", "description": "Enhancing population diversity using a novel crowding-based selection mechanism to promote exploration.", "configspace": "", "generation": 8, "fitness": 0.09144843562834938, "feedback": "The algorithm EnhancedPopulationDiversityEvolutionaryDifferentialHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "2b9cb0f8-33fc-4716-b9b6-9a82f719e372", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "e364ee06-2c2d-4e9e-bb10-905e85fe79f4", "solution": "import numpy as np\n\nclass EnhancedHybridEvolutionaryDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def mutation(x, F):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            mutant = x + F * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def harmonic_search(x):\n            new_x = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_x[i] = np.random.uniform(-5.0, 5.0)\n            return new_x\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        # Self-adaptive mechanism for F\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = mutation(x, F)\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = harmonic_search(x)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution\n", "name": "EnhancedHybridEvolutionaryDifferentialHarmonySearch", "description": "Introducing a self-adaptive mechanism for mutation scaling factor F for enhanced exploration.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2b9cb0f8-33fc-4716-b9b6-9a82f719e372", "metadata": {"aucs": [0.16924673196354068, 0.21970154286155008, 0.16292496815961954, 0.15713293788184057, 0.17808202692091712, 0.16936144660701247, 0.17347725933518343, 0.17221793874931723, 0.16375292025202492, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04375958860071749, 0.04444557484093925, 0.04729769764756442, 0.04899242657188663, 0.04231065080580809, 0.04302288095513218, 0.04773306108594422, 0.06100723845683165, 0.051931949930965504, 0.038843284053069915, 0.027904339255831467, 0.04050965798477624, 0.026655653508149246, 0.04174867353132161, 0.05497527742494712, 0.03548780070194535, 0.03483039061799864, 0.028502288425745204, 0.10386319821496304, 0.10058785400951364, 0.11827767020661817, 0.11750954437732053, 0.11155315109796904, 0.10061478372750987, 0.10328636536040325, 0.12024093975669059, 0.11228960807976363, 0.06734025770107599, 0.07617396735579574, 0.10050728334270587, 0.08398334131106111, 0.07065827330508179, 0.057220146124187354, 0.09304148257430367, 0.058108538446700386, 0.0894403634800155, 0.15264587433190624, 0.18933703431597426, 0.14374647345181424, 0.1328168771464523, 0.08798205890980826, 0.12271966866621986, 0.1283849841550775, 0.11834504120169476, 0.12919150371061683, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 0.0008649598838210704, 0.0010494968721109776, 9.999999999998899e-05, 9.999999999998899e-05, 0.007654392210652117, 0.016790757226985753, 9.999999999998899e-05, 0.05883216933625113, 9.999999999998899e-05, 0.038983658118186715, 0.03406038839019088, 0.010541791336374229, 0.017667153369731237, 0.006994436492887557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059620373449874364, 0.06600492231431232, 0.05173281231181104, 0.0628717104709714, 0.040122451036449625, 0.045999554680021926, 0.042602328090791564, 0.032021600354247504, 0.050630049558975765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.2199064939125217, 0.19096318535811663, 0.183521754320089, 0.20277868850656555, 0.19185576977298913, 0.19904756737567175, 0.20485862166320845, 0.1785374642067069, 0.1898916752783535, 0.04162156454541166, 0.036813789735172575, 0.03828554750005553, 0.03626750094406439, 0.037617954664495246, 0.04284740434456291, 0.06468839433871831, 0.04404609198955678, 0.04556512016983483, 0.13647238877569012, 0.12874066125825157, 0.12491234425758613, 0.13988933132811177, 0.13917560316942856, 0.13465005926479667, 0.14845182903264542, 0.1468181938055657, 0.1240266236832942, 0.16399842324571912, 0.1921150851307425, 0.1674774579978473, 0.17455513218679752, 0.18102188489393034, 0.1693871850460973, 0.16004500818415346, 0.1736684248857162, 0.1481939427607476, 0.10548785234625124, 0.10178926564160662, 0.11149025144065727, 0.10926694995869257, 0.12653308494751636, 0.1072470567290118, 0.10355281509081127, 0.1231006517948583, 0.11781567203421384, 0.1614587701953727, 0.15641074836895097, 0.1463036350588096, 0.15394668335807982, 0.14379938096635891, 0.15432471009362758, 0.15974939230810015, 0.1704957880058764, 0.17698093889951683, 0.1527806859477463, 0.1462335918550023, 0.1535479109317508, 0.15335672829971447, 0.14032302480629988, 0.151421678882953, 0.14248592880142918, 0.1562018187655232, 0.1604757114380957, 0.21216512442079138, 0.1638243128510738, 0.22946736350674246, 0.156349346875282, 0.15254250071192277, 0.1484838425183218, 0.16823857105413276, 0.15522209112681007, 0.15752727582434467, 0.17429231518528, 0.22037352868069227, 0.15291865246831782, 0.1706782462618186, 0.1420905843651712, 0.1484702730520514, 0.2243180879411366, 0.16587281998295655, 0.14443929569984415, 0.184500482979443, 0.19562317268234086, 0.1718137140179058, 0.18608575609477307, 0.21349213428059388, 0.1824815257933735, 0.18250553464995978, 0.1880598827758444, 0.20308889957197607, 0.051990059976106395, 0.04963698019331675, 0.06418938724651235, 0.051339453883900044, 0.058608060758111646, 0.04906964415901416, 0.07206661963763417, 0.05458565170203167, 0.047272586045848386]}, "mutation_prompt": null}
{"id": "530ac0e9-8570-40dd-8f41-a9fc8e14aa22", "solution": "import numpy as np\n\nclass EnhancedHybridEvolutionaryDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def mutation(x, F):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            mutant = x + F * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def harmonic_search(x):\n            new_x = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_x[i] = np.random.uniform(-5.0, 5.0)\n            return new_x\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        # Self-adaptive mechanism for F\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = mutation(x, F)\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = harmonic_search(x)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution\n", "name": "EnhancedHybridEvolutionaryDifferentialHarmonySearch", "description": "Introducing a self-adaptive mechanism for mutation scaling factor F for enhanced exploration.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2b9cb0f8-33fc-4716-b9b6-9a82f719e372", "metadata": {"aucs": [0.16924673196354068, 0.21970154286155008, 0.16292496815961954, 0.15713293788184057, 0.17808202692091712, 0.16936144660701247, 0.17347725933518343, 0.17221793874931723, 0.16375292025202492, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04375958860071749, 0.04444557484093925, 0.04729769764756442, 0.04899242657188663, 0.04231065080580809, 0.04302288095513218, 0.04773306108594422, 0.06100723845683165, 0.051931949930965504, 0.038843284053069915, 0.027904339255831467, 0.04050965798477624, 0.026655653508149246, 0.04174867353132161, 0.05497527742494712, 0.03548780070194535, 0.03483039061799864, 0.028502288425745204, 0.10386319821496304, 0.10058785400951364, 0.11827767020661817, 0.11750954437732053, 0.11155315109796904, 0.10061478372750987, 0.10328636536040325, 0.12024093975669059, 0.11228960807976363, 0.06734025770107599, 0.07617396735579574, 0.10050728334270587, 0.08398334131106111, 0.07065827330508179, 0.057220146124187354, 0.09304148257430367, 0.058108538446700386, 0.0894403634800155, 0.15264587433190624, 0.18933703431597426, 0.14374647345181424, 0.1328168771464523, 0.08798205890980826, 0.12271966866621986, 0.1283849841550775, 0.11834504120169476, 0.12919150371061683, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 0.0008649598838210704, 0.0010494968721109776, 9.999999999998899e-05, 9.999999999998899e-05, 0.007654392210652117, 0.016790757226985753, 9.999999999998899e-05, 0.05883216933625113, 9.999999999998899e-05, 0.038983658118186715, 0.03406038839019088, 0.010541791336374229, 0.017667153369731237, 0.006994436492887557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059620373449874364, 0.06600492231431232, 0.05173281231181104, 0.0628717104709714, 0.040122451036449625, 0.045999554680021926, 0.042602328090791564, 0.032021600354247504, 0.050630049558975765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.2199064939125217, 0.19096318535811663, 0.183521754320089, 0.20277868850656555, 0.19185576977298913, 0.19904756737567175, 0.20485862166320845, 0.1785374642067069, 0.1898916752783535, 0.04162156454541166, 0.036813789735172575, 0.03828554750005553, 0.03626750094406439, 0.037617954664495246, 0.04284740434456291, 0.06468839433871831, 0.04404609198955678, 0.04556512016983483, 0.13647238877569012, 0.12874066125825157, 0.12491234425758613, 0.13988933132811177, 0.13917560316942856, 0.13465005926479667, 0.14845182903264542, 0.1468181938055657, 0.1240266236832942, 0.16399842324571912, 0.1921150851307425, 0.1674774579978473, 0.17455513218679752, 0.18102188489393034, 0.1693871850460973, 0.16004500818415346, 0.1736684248857162, 0.1481939427607476, 0.10548785234625124, 0.10178926564160662, 0.11149025144065727, 0.10926694995869257, 0.12653308494751636, 0.1072470567290118, 0.10355281509081127, 0.1231006517948583, 0.11781567203421384, 0.1614587701953727, 0.15641074836895097, 0.1463036350588096, 0.15394668335807982, 0.14379938096635891, 0.15432471009362758, 0.15974939230810015, 0.1704957880058764, 0.17698093889951683, 0.1527806859477463, 0.1462335918550023, 0.1535479109317508, 0.15335672829971447, 0.14032302480629988, 0.151421678882953, 0.14248592880142918, 0.1562018187655232, 0.1604757114380957, 0.21216512442079138, 0.1638243128510738, 0.22946736350674246, 0.156349346875282, 0.15254250071192277, 0.1484838425183218, 0.16823857105413276, 0.15522209112681007, 0.15752727582434467, 0.17429231518528, 0.22037352868069227, 0.15291865246831782, 0.1706782462618186, 0.1420905843651712, 0.1484702730520514, 0.2243180879411366, 0.16587281998295655, 0.14443929569984415, 0.184500482979443, 0.19562317268234086, 0.1718137140179058, 0.18608575609477307, 0.21349213428059388, 0.1824815257933735, 0.18250553464995978, 0.1880598827758444, 0.20308889957197607, 0.051990059976106395, 0.04963698019331675, 0.06418938724651235, 0.051339453883900044, 0.058608060758111646, 0.04906964415901416, 0.07206661963763417, 0.05458565170203167, 0.047272586045848386]}, "mutation_prompt": null}
{"id": "ccfc7ad3-52b5-4086-863e-78ff18285710", "solution": "import numpy as np\n\nclass CrowdedHybridEvolutionaryDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def mutation(x, F):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            diff = population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)]\n            mutant = x + F * diff\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def harmonic_search(x):\n            new_x = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_x[i] = np.random.uniform(-5.0, 5.0)\n            return new_x\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        # Crowding selection mechanism\n        for _ in range(self.budget):\n            scores = [cost_function(x) for x in population]\n            sorted_indices = np.argsort(scores)\n            for i in range(self.budget):\n                idx = sorted_indices[i]\n                x = population[idx]\n                F = 0.5 + 0.3 * np.random.randn()\n                F = np.clip(F, 0.2, 0.8)\n\n                mutant = mutation(x, F)\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[idx] = trial\n                else:\n                    population[idx] = harmonic_search(x)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "CrowdedHybridEvolutionaryDifferentialHarmonySearch", "description": "Enhancing population diversity through a novel crowding selection mechanism to promote exploration.", "configspace": "", "generation": 11, "fitness": 0.09144843562834938, "feedback": "The algorithm CrowdedHybridEvolutionaryDifferentialHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "2b9cb0f8-33fc-4716-b9b6-9a82f719e372", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "c21f9d65-02e6-44ab-a13c-35e0e98f645c", "solution": "import numpy as np\n\nclass AdaptiveCRHybridEvolutionaryDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def mutation(x, F):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            mutant = x + F * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def harmonic_search(x):\n            new_x = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_x[i] = np.random.uniform(-5.0, 5.0)\n            return new_x\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        # Adaptive mechanism to adjust CR\n        CR_adapt = 0.9\n        CR_lower, CR_upper = 0.1, 1.0\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                x = population[i]\n                F = 0.5 + 0.1 * np.random.randn()\n                F = np.clip(F, 0.2, 0.8)\n\n                mutant = mutation(x, F)\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = harmonic_search(x)\n\n                # Dynamic adjustment of CR\n                if np.random.rand() < 0.1:\n                    CR = CR_adapt + 0.1 * np.random.randn()\n                    CR = np.clip(CR, CR_lower, CR_upper)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "AdaptiveCRHybridEvolutionaryDifferentialHarmonySearch", "description": "Implement an adaptive mechanism to dynamically adjust the crossover rate CR during optimization.", "configspace": "", "generation": 12, "fitness": 0.0913066221667825, "feedback": "The algorithm AdaptiveCRHybridEvolutionaryDifferentialHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "2b9cb0f8-33fc-4716-b9b6-9a82f719e372", "metadata": {"aucs": [0.1693753379528734, 0.1741220531791854, 0.16656705489906476, 0.17156203549923577, 0.1804800851070376, 0.16849541145421387, 0.17181195494157397, 0.1651714470820983, 0.16780411865474054, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03908370601863698, 0.04474012185615395, 0.03708919940481281, 0.03892812641496346, 0.036920618136319194, 0.03962029986021498, 0.050945516340512254, 0.060861939999900416, 0.05192236194418254, 0.04057159583464254, 0.033612108048474476, 0.03887322098040791, 0.022673734596468265, 0.04700528194857667, 0.05301966402317415, 0.042883615831809774, 0.03671434355022596, 0.030532977572029663, 0.09824052283733453, 0.12653874437401136, 0.12607153274911276, 0.09435415141731007, 0.09522053893792604, 0.22682704251190866, 0.10288471349848982, 0.11090018913165622, 0.10391652688500763, 0.07548121841336741, 0.09059583869555321, 0.10019098225768097, 0.10872749234226398, 0.07513387915637593, 0.06068829965583278, 0.09135403303916989, 0.05442833290033011, 0.09009922087139277, 0.11728873731830203, 0.1894598626137064, 0.14289639282184485, 0.10118751641907187, 0.09939202736446129, 0.11906098479180205, 0.1771597458470724, 0.118221960087186, 0.10876256110838545, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 0.00011282555289748863, 9.999999999998899e-05, 9.999999999998899e-05, 0.007770557975979919, 9.999999999998899e-05, 0.016790757226985753, 0.0001049759286719798, 0.05883216933625113, 0.0030922167570121006, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.004386754093764433, 0.0027671890206291128, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03949459021225443, 0.06600492231431232, 0.04325570707499371, 0.05941523347397892, 0.023644779453676934, 0.048576983479662106, 0.04501918276321282, 0.04029924494388948, 0.05423736442933025, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21410749948760244, 0.1906507866038578, 0.18080580204961316, 0.20330985103801769, 0.18505366550962332, 0.19639935209995196, 0.19626358707077318, 0.18796185027140777, 0.20657600189436187, 0.03408244459982601, 0.03684507818522087, 0.038111720336589494, 0.046224386641301685, 0.037577209115058796, 0.043890969784822986, 0.058140636484573016, 0.049211699790361996, 0.04528571105900847, 0.1372130885322158, 0.14077249058283725, 0.12200550305347102, 0.16767562885217735, 0.13917560316942856, 0.18488328742119275, 0.14781160586942588, 0.14606251116765234, 0.12335004400913019, 0.16382910508986548, 0.17096293615890845, 0.1881208248402556, 0.16502724160329418, 0.17351614867776788, 0.16808926644775823, 0.16661895726257392, 0.17381347958765714, 0.1501419521141828, 0.1044244417716389, 0.10401379883107043, 0.10912330471014342, 0.1130072003409146, 0.12605303127077894, 0.10976003564805759, 0.10755563069128327, 0.12519375430373147, 0.11750412267409394, 0.15963772114876407, 0.15743806052085496, 0.14548888522310188, 0.15446903658508693, 0.15678994079130482, 0.15384814898074295, 0.17380507556328706, 0.16033356482625682, 0.17722564964614118, 0.14261285742972651, 0.14988013754606766, 0.13371796461786856, 0.16079044040710055, 0.1592340720675799, 0.14745271696104445, 0.13766929275167805, 0.13830861457158627, 0.1604757114380957, 0.14108788877375467, 0.1640560469378033, 0.16326384669218863, 0.16077773425581565, 0.17815991897675287, 0.13644320276320432, 0.16279823181011122, 0.15397389377245474, 0.16115922501818858, 0.14928249996446463, 0.1586455034194032, 0.1679877467971821, 0.1499394726657678, 0.14562864837550293, 0.15449134686270916, 0.1621048515807475, 0.22157234214244537, 0.1528975438949115, 0.16631223827034447, 0.18902013960163544, 0.1874012612616328, 0.1850819171186403, 0.21139183049571897, 0.1767867898234341, 0.17928221697344338, 0.1815507178656982, 0.20485328913583678, 0.05273765241512918, 0.04939538884664452, 0.06407270883857508, 0.05783383623978333, 0.058623416154444774, 0.052848776597625546, 0.07239435003356554, 0.0646055784808437, 0.04740932764243677]}, "mutation_prompt": null}
{"id": "35c3bff5-11ea-4bef-a8db-95d5c0765af2", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def mutation(x, F):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            pbest = population[np.argmin([cost_function(p) for p in population])]\n            mutant = x + F * (pbest - x)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def pso_update(x, pbest, w=0.5, c1=1.5, c2=1.5):\n            v = np.random.uniform(-1, 1, self.dim)\n            new_x = x + v\n            new_x = np.clip(new_x, -5.0, 5.0)\n            return new_x\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                x = population[i]\n                F = 0.5 + 0.1 * np.random.randn()\n                F = np.clip(F, 0.2, 0.8)\n\n                mutant = mutation(x, F)\n                trial = crossover(x, mutant, CR)\n                trial = pso_update(x, trial)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "HybridPSODE", "description": "Implementing a hybrid algorithm combining Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation.", "configspace": "", "generation": 13, "fitness": 0.09144843562834938, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "2b9cb0f8-33fc-4716-b9b6-9a82f719e372", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "15b2d1c1-2d35-46f9-ba17-eb231dacfde8", "solution": "import numpy as np\n\nclass EnhancedHybridEvolutionaryDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def mutation(x, F):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            mutant = x + F * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def harmonic_search(x):\n            new_x = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_x[i] = np.random.uniform(-5.0, 5.0)\n            return new_x\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        # Self-adaptive mechanism for F\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = mutation(x, F)\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = harmonic_search(x)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution\n", "name": "EnhancedHybridEvolutionaryDifferentialHarmonySearch", "description": "Introducing a self-adaptive mechanism for mutation scaling factor F for enhanced exploration.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2b9cb0f8-33fc-4716-b9b6-9a82f719e372", "metadata": {"aucs": [0.16924673196354068, 0.21970154286155008, 0.16292496815961954, 0.15713293788184057, 0.17808202692091712, 0.16936144660701247, 0.17347725933518343, 0.17221793874931723, 0.16375292025202492, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04375958860071749, 0.04444557484093925, 0.04729769764756442, 0.04899242657188663, 0.04231065080580809, 0.04302288095513218, 0.04773306108594422, 0.06100723845683165, 0.051931949930965504, 0.038843284053069915, 0.027904339255831467, 0.04050965798477624, 0.026655653508149246, 0.04174867353132161, 0.05497527742494712, 0.03548780070194535, 0.03483039061799864, 0.028502288425745204, 0.10386319821496304, 0.10058785400951364, 0.11827767020661817, 0.11750954437732053, 0.11155315109796904, 0.10061478372750987, 0.10328636536040325, 0.12024093975669059, 0.11228960807976363, 0.06734025770107599, 0.07617396735579574, 0.10050728334270587, 0.08398334131106111, 0.07065827330508179, 0.057220146124187354, 0.09304148257430367, 0.058108538446700386, 0.0894403634800155, 0.15264587433190624, 0.18933703431597426, 0.14374647345181424, 0.1328168771464523, 0.08798205890980826, 0.12271966866621986, 0.1283849841550775, 0.11834504120169476, 0.12919150371061683, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 0.0008649598838210704, 0.0010494968721109776, 9.999999999998899e-05, 9.999999999998899e-05, 0.007654392210652117, 0.016790757226985753, 9.999999999998899e-05, 0.05883216933625113, 9.999999999998899e-05, 0.038983658118186715, 0.03406038839019088, 0.010541791336374229, 0.017667153369731237, 0.006994436492887557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059620373449874364, 0.06600492231431232, 0.05173281231181104, 0.0628717104709714, 0.040122451036449625, 0.045999554680021926, 0.042602328090791564, 0.032021600354247504, 0.050630049558975765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.2199064939125217, 0.19096318535811663, 0.183521754320089, 0.20277868850656555, 0.19185576977298913, 0.19904756737567175, 0.20485862166320845, 0.1785374642067069, 0.1898916752783535, 0.04162156454541166, 0.036813789735172575, 0.03828554750005553, 0.03626750094406439, 0.037617954664495246, 0.04284740434456291, 0.06468839433871831, 0.04404609198955678, 0.04556512016983483, 0.13647238877569012, 0.12874066125825157, 0.12491234425758613, 0.13988933132811177, 0.13917560316942856, 0.13465005926479667, 0.14845182903264542, 0.1468181938055657, 0.1240266236832942, 0.16399842324571912, 0.1921150851307425, 0.1674774579978473, 0.17455513218679752, 0.18102188489393034, 0.1693871850460973, 0.16004500818415346, 0.1736684248857162, 0.1481939427607476, 0.10548785234625124, 0.10178926564160662, 0.11149025144065727, 0.10926694995869257, 0.12653308494751636, 0.1072470567290118, 0.10355281509081127, 0.1231006517948583, 0.11781567203421384, 0.1614587701953727, 0.15641074836895097, 0.1463036350588096, 0.15394668335807982, 0.14379938096635891, 0.15432471009362758, 0.15974939230810015, 0.1704957880058764, 0.17698093889951683, 0.1527806859477463, 0.1462335918550023, 0.1535479109317508, 0.15335672829971447, 0.14032302480629988, 0.151421678882953, 0.14248592880142918, 0.1562018187655232, 0.1604757114380957, 0.21216512442079138, 0.1638243128510738, 0.22946736350674246, 0.156349346875282, 0.15254250071192277, 0.1484838425183218, 0.16823857105413276, 0.15522209112681007, 0.15752727582434467, 0.17429231518528, 0.22037352868069227, 0.15291865246831782, 0.1706782462618186, 0.1420905843651712, 0.1484702730520514, 0.2243180879411366, 0.16587281998295655, 0.14443929569984415, 0.184500482979443, 0.19562317268234086, 0.1718137140179058, 0.18608575609477307, 0.21349213428059388, 0.1824815257933735, 0.18250553464995978, 0.1880598827758444, 0.20308889957197607, 0.051990059976106395, 0.04963698019331675, 0.06418938724651235, 0.051339453883900044, 0.058608060758111646, 0.04906964415901416, 0.07206661963763417, 0.05458565170203167, 0.047272586045848386]}, "mutation_prompt": null}
{"id": "737fca43-954a-4e2e-b0e9-f90d08f78f97", "solution": "import numpy as np\n\nclass EnhancedHybridEvolutionaryDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def mutation(x, F):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            mutant = x + F * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def harmonic_search(x):\n            new_x = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_x[i] = np.random.uniform(-5.0, 5.0)\n            return new_x\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        # Self-adaptive mechanism for F\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = mutation(x, F)\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = harmonic_search(x)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution\n", "name": "EnhancedHybridEvolutionaryDifferentialHarmonySearch", "description": "Introducing a self-adaptive mechanism for mutation scaling factor F for enhanced exploration.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2b9cb0f8-33fc-4716-b9b6-9a82f719e372", "metadata": {"aucs": [0.16924673196354068, 0.21970154286155008, 0.16292496815961954, 0.15713293788184057, 0.17808202692091712, 0.16936144660701247, 0.17347725933518343, 0.17221793874931723, 0.16375292025202492, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04375958860071749, 0.04444557484093925, 0.04729769764756442, 0.04899242657188663, 0.04231065080580809, 0.04302288095513218, 0.04773306108594422, 0.06100723845683165, 0.051931949930965504, 0.038843284053069915, 0.027904339255831467, 0.04050965798477624, 0.026655653508149246, 0.04174867353132161, 0.05497527742494712, 0.03548780070194535, 0.03483039061799864, 0.028502288425745204, 0.10386319821496304, 0.10058785400951364, 0.11827767020661817, 0.11750954437732053, 0.11155315109796904, 0.10061478372750987, 0.10328636536040325, 0.12024093975669059, 0.11228960807976363, 0.06734025770107599, 0.07617396735579574, 0.10050728334270587, 0.08398334131106111, 0.07065827330508179, 0.057220146124187354, 0.09304148257430367, 0.058108538446700386, 0.0894403634800155, 0.15264587433190624, 0.18933703431597426, 0.14374647345181424, 0.1328168771464523, 0.08798205890980826, 0.12271966866621986, 0.1283849841550775, 0.11834504120169476, 0.12919150371061683, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 0.0008649598838210704, 0.0010494968721109776, 9.999999999998899e-05, 9.999999999998899e-05, 0.007654392210652117, 0.016790757226985753, 9.999999999998899e-05, 0.05883216933625113, 9.999999999998899e-05, 0.038983658118186715, 0.03406038839019088, 0.010541791336374229, 0.017667153369731237, 0.006994436492887557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059620373449874364, 0.06600492231431232, 0.05173281231181104, 0.0628717104709714, 0.040122451036449625, 0.045999554680021926, 0.042602328090791564, 0.032021600354247504, 0.050630049558975765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.2199064939125217, 0.19096318535811663, 0.183521754320089, 0.20277868850656555, 0.19185576977298913, 0.19904756737567175, 0.20485862166320845, 0.1785374642067069, 0.1898916752783535, 0.04162156454541166, 0.036813789735172575, 0.03828554750005553, 0.03626750094406439, 0.037617954664495246, 0.04284740434456291, 0.06468839433871831, 0.04404609198955678, 0.04556512016983483, 0.13647238877569012, 0.12874066125825157, 0.12491234425758613, 0.13988933132811177, 0.13917560316942856, 0.13465005926479667, 0.14845182903264542, 0.1468181938055657, 0.1240266236832942, 0.16399842324571912, 0.1921150851307425, 0.1674774579978473, 0.17455513218679752, 0.18102188489393034, 0.1693871850460973, 0.16004500818415346, 0.1736684248857162, 0.1481939427607476, 0.10548785234625124, 0.10178926564160662, 0.11149025144065727, 0.10926694995869257, 0.12653308494751636, 0.1072470567290118, 0.10355281509081127, 0.1231006517948583, 0.11781567203421384, 0.1614587701953727, 0.15641074836895097, 0.1463036350588096, 0.15394668335807982, 0.14379938096635891, 0.15432471009362758, 0.15974939230810015, 0.1704957880058764, 0.17698093889951683, 0.1527806859477463, 0.1462335918550023, 0.1535479109317508, 0.15335672829971447, 0.14032302480629988, 0.151421678882953, 0.14248592880142918, 0.1562018187655232, 0.1604757114380957, 0.21216512442079138, 0.1638243128510738, 0.22946736350674246, 0.156349346875282, 0.15254250071192277, 0.1484838425183218, 0.16823857105413276, 0.15522209112681007, 0.15752727582434467, 0.17429231518528, 0.22037352868069227, 0.15291865246831782, 0.1706782462618186, 0.1420905843651712, 0.1484702730520514, 0.2243180879411366, 0.16587281998295655, 0.14443929569984415, 0.184500482979443, 0.19562317268234086, 0.1718137140179058, 0.18608575609477307, 0.21349213428059388, 0.1824815257933735, 0.18250553464995978, 0.1880598827758444, 0.20308889957197607, 0.051990059976106395, 0.04963698019331675, 0.06418938724651235, 0.051339453883900044, 0.058608060758111646, 0.04906964415901416, 0.07206661963763417, 0.05458565170203167, 0.047272586045848386]}, "mutation_prompt": null}
{"id": "102ae15b-ad16-4047-b0ee-fba01d1cf6eb", "solution": "import numpy as np\n\nclass EnhancedHybridEvolutionaryDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def mutation(x, F):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            mutant = x + F * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def harmonic_search(x):\n            new_x = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_x[i] = np.random.uniform(-5.0, 5.0)\n            return new_x\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        # Self-adaptive mechanism for F\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = mutation(x, F)\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = harmonic_search(x)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution\n", "name": "EnhancedHybridEvolutionaryDifferentialHarmonySearch", "description": "Introducing a self-adaptive mechanism for mutation scaling factor F for enhanced exploration.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2b9cb0f8-33fc-4716-b9b6-9a82f719e372", "metadata": {"aucs": [0.16924673196354068, 0.21970154286155008, 0.16292496815961954, 0.15713293788184057, 0.17808202692091712, 0.16936144660701247, 0.17347725933518343, 0.17221793874931723, 0.16375292025202492, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04375958860071749, 0.04444557484093925, 0.04729769764756442, 0.04899242657188663, 0.04231065080580809, 0.04302288095513218, 0.04773306108594422, 0.06100723845683165, 0.051931949930965504, 0.038843284053069915, 0.027904339255831467, 0.04050965798477624, 0.026655653508149246, 0.04174867353132161, 0.05497527742494712, 0.03548780070194535, 0.03483039061799864, 0.028502288425745204, 0.10386319821496304, 0.10058785400951364, 0.11827767020661817, 0.11750954437732053, 0.11155315109796904, 0.10061478372750987, 0.10328636536040325, 0.12024093975669059, 0.11228960807976363, 0.06734025770107599, 0.07617396735579574, 0.10050728334270587, 0.08398334131106111, 0.07065827330508179, 0.057220146124187354, 0.09304148257430367, 0.058108538446700386, 0.0894403634800155, 0.15264587433190624, 0.18933703431597426, 0.14374647345181424, 0.1328168771464523, 0.08798205890980826, 0.12271966866621986, 0.1283849841550775, 0.11834504120169476, 0.12919150371061683, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 0.0008649598838210704, 0.0010494968721109776, 9.999999999998899e-05, 9.999999999998899e-05, 0.007654392210652117, 0.016790757226985753, 9.999999999998899e-05, 0.05883216933625113, 9.999999999998899e-05, 0.038983658118186715, 0.03406038839019088, 0.010541791336374229, 0.017667153369731237, 0.006994436492887557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059620373449874364, 0.06600492231431232, 0.05173281231181104, 0.0628717104709714, 0.040122451036449625, 0.045999554680021926, 0.042602328090791564, 0.032021600354247504, 0.050630049558975765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.2199064939125217, 0.19096318535811663, 0.183521754320089, 0.20277868850656555, 0.19185576977298913, 0.19904756737567175, 0.20485862166320845, 0.1785374642067069, 0.1898916752783535, 0.04162156454541166, 0.036813789735172575, 0.03828554750005553, 0.03626750094406439, 0.037617954664495246, 0.04284740434456291, 0.06468839433871831, 0.04404609198955678, 0.04556512016983483, 0.13647238877569012, 0.12874066125825157, 0.12491234425758613, 0.13988933132811177, 0.13917560316942856, 0.13465005926479667, 0.14845182903264542, 0.1468181938055657, 0.1240266236832942, 0.16399842324571912, 0.1921150851307425, 0.1674774579978473, 0.17455513218679752, 0.18102188489393034, 0.1693871850460973, 0.16004500818415346, 0.1736684248857162, 0.1481939427607476, 0.10548785234625124, 0.10178926564160662, 0.11149025144065727, 0.10926694995869257, 0.12653308494751636, 0.1072470567290118, 0.10355281509081127, 0.1231006517948583, 0.11781567203421384, 0.1614587701953727, 0.15641074836895097, 0.1463036350588096, 0.15394668335807982, 0.14379938096635891, 0.15432471009362758, 0.15974939230810015, 0.1704957880058764, 0.17698093889951683, 0.1527806859477463, 0.1462335918550023, 0.1535479109317508, 0.15335672829971447, 0.14032302480629988, 0.151421678882953, 0.14248592880142918, 0.1562018187655232, 0.1604757114380957, 0.21216512442079138, 0.1638243128510738, 0.22946736350674246, 0.156349346875282, 0.15254250071192277, 0.1484838425183218, 0.16823857105413276, 0.15522209112681007, 0.15752727582434467, 0.17429231518528, 0.22037352868069227, 0.15291865246831782, 0.1706782462618186, 0.1420905843651712, 0.1484702730520514, 0.2243180879411366, 0.16587281998295655, 0.14443929569984415, 0.184500482979443, 0.19562317268234086, 0.1718137140179058, 0.18608575609477307, 0.21349213428059388, 0.1824815257933735, 0.18250553464995978, 0.1880598827758444, 0.20308889957197607, 0.051990059976106395, 0.04963698019331675, 0.06418938724651235, 0.051339453883900044, 0.058608060758111646, 0.04906964415901416, 0.07206661963763417, 0.05458565170203167, 0.047272586045848386]}, "mutation_prompt": null}
{"id": "e2ee9f32-11cc-4f5e-93dd-942b593dfaaf", "solution": "import numpy as np\n\nclass DynamicMutationHybridEvolutionaryDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def mutation(x, F, F_history):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            F_new = F + 0.1 * np.random.randn()\n            F_new = np.clip(F_new, 0.2, 0.8)\n            F_history.append(F_new)\n            F = np.mean(F_history[-5:])  # Adaptive adjustment based on recent history\n            mutant = x + F * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def harmonic_search(x):\n            new_x = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_x[i] = np.random.uniform(-5.0, 5.0)\n            return new_x\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n        F_history = []\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                x = population[i]\n\n                mutant = mutation(x, F, F_history)\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = harmonic_search(x)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "DynamicMutationHybridEvolutionaryDifferentialHarmonySearch", "description": "Introducing a dynamic mutation strategy based on individual performance history to adaptively adjust mutation scaling factor F.", "configspace": "", "generation": 17, "fitness": 0.08954530020135533, "feedback": "The algorithm DynamicMutationHybridEvolutionaryDifferentialHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "2b9cb0f8-33fc-4716-b9b6-9a82f719e372", "metadata": {"aucs": [0.169376566897799, 0.17770846053616407, 0.16979544420834536, 0.15739480265412187, 0.17990138688195456, 0.17209128308304866, 0.1727211784798719, 0.15658000011331352, 0.16319989851075445, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05905423354957218, 0.05446812716936733, 0.03153619648047157, 0.042437557592848285, 0.041187762990447685, 0.03723045947872883, 0.04773381301653168, 0.06075899196723333, 0.053598615237964053, 0.030819482092021788, 0.03436074531665512, 0.03880834854307946, 0.03500483267887644, 0.0426462960595827, 0.05258530990419419, 0.03696805349945187, 0.034639269580395426, 0.028348436004557387, 0.1129924268523298, 0.1171533409194837, 0.13862687228601867, 0.0951706872623368, 0.09350173813341933, 0.11397694155205806, 0.12524027032521823, 0.09604895594278184, 0.1059936525225883, 0.06384417797859765, 0.07139537313784838, 0.10019098225768097, 0.08450125723831281, 0.07731524186399241, 0.07354388262128742, 0.0937673451417923, 0.03920715581757672, 0.0894403634800155, 0.11709042268810677, 0.18949467765310946, 0.14280511380450445, 0.09677461727951364, 0.10066958125085257, 0.13796226460918992, 0.10230729638870018, 0.11866262123529792, 0.10892185609645566, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025645939305914855, 9.999999999998899e-05, 0.016790757226985753, 9.999999999998899e-05, 0.05883216933625113, 0.00163967875927995, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.004386754093764433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03915607522747944, 0.06600492231431232, 0.052546571479077264, 0.05941523347397892, 0.02829673374842301, 0.049627778695433666, 0.031484297717062515, 0.04021451901690254, 0.05321691861435429, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00037189788890878983, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 0.000565604818483556, 0.21577771219080422, 0.2033662921727598, 0.1767939793291503, 0.20522356808271858, 0.18332823347937055, 0.195819179433125, 0.19545694678206604, 0.17267471497733078, 0.18774723731861442, 0.030910630307000808, 0.03564900970088147, 0.04111998276053741, 0.046062223111915435, 0.04486858007252126, 0.04422161579265027, 0.06532666778395446, 0.04612663533582051, 0.04528571105900847, 0.1363488745300907, 0.12156307650083986, 0.12312215917579139, 0.16582964571680425, 0.1391696963655502, 0.11902105582853728, 0.14798611320007693, 0.17137008848958446, 0.15081548016256952, 0.1633659326914998, 0.1547593646507679, 0.16748265745931146, 0.16430792315720477, 0.1678822015458603, 0.16815415975195358, 0.16115032127404227, 0.1736527510377297, 0.16106867208303155, 0.10396371617686273, 0.11118301426144395, 0.10918206908610795, 0.10150600213994987, 0.1267766555414115, 0.10668522233345068, 0.10823459509448219, 0.12309553392645955, 0.11783252664611976, 0.1474747991293479, 0.15483090514107212, 0.15388923160969248, 0.15325819645273808, 0.15819675975509107, 0.15363186244603144, 0.14561791982088035, 0.15821630121319485, 0.17644336155048768, 0.14615190854959614, 0.1408072237894139, 0.13958102915131843, 0.13834654400328394, 0.14820817904957873, 0.14645992550933573, 0.13148557505426195, 0.13405056029278606, 0.16110421663404073, 0.1586297582080679, 0.16458156417600966, 0.16324577318454447, 0.1714167462498617, 0.14316112947109783, 0.14032432476439938, 0.1534523981017195, 0.15447972074199823, 0.1669310572029875, 0.14981027666640057, 0.17840666340247513, 0.15396529241964108, 0.1342688883174673, 0.14869559008788458, 0.15044735301406886, 0.16238766487810896, 0.17544791699156392, 0.1752498983643005, 0.18724443916225486, 0.18359081171764358, 0.18018635692762308, 0.18509204657146483, 0.2098126421985509, 0.18116730782718882, 0.18372437944454145, 0.19649959905518533, 0.20326227001604502, 0.054431483204333886, 0.054740091348984055, 0.06398307101242806, 0.050182168442675534, 0.05880788210407806, 0.04955922322583539, 0.07252904023688367, 0.05919126893839144, 0.047303861032275796]}, "mutation_prompt": null}
{"id": "e6963d46-7353-48df-ae8b-9d385e88171f", "solution": "import numpy as np\n\nclass EnhancedDynamicMutationEvolutionaryDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def mutation(x, F):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            mutant = x + F * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def harmonic_search(x):\n            new_x = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_x[i] = np.random.uniform(-5.0, 5.0)\n            return new_x\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        # Dynamic mutation strategy based on function evaluations\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n        evaluation_count = 0\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = mutation(x, F)\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = harmonic_search(x)\n                \n                evaluation_count += 1\n                if evaluation_count % 10 == 0:  # Adjust F based on function evaluations\n                    F_adapt = F_lower + (F_upper - F_lower) * (evaluation_count / self.budget)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedDynamicMutationEvolutionaryDifferentialHarmonySearch", "description": "Implement a dynamic mutation strategy based on function evaluations to adaptively adjust mutation scaling factor F for improved exploration.", "configspace": "", "generation": 18, "fitness": 0.09130128663090364, "feedback": "The algorithm EnhancedDynamicMutationEvolutionaryDifferentialHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "2b9cb0f8-33fc-4716-b9b6-9a82f719e372", "metadata": {"aucs": [0.17012362582111384, 0.1844206853593089, 0.168527298046241, 0.17618836401560112, 0.17714098622763863, 0.16688036761577818, 0.17159005203417832, 0.15908018886597508, 0.20440915422513395, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.040376620681994435, 0.044744390652571964, 0.04646565021032378, 0.037837558130266014, 0.03751800753769863, 0.03702093208110546, 0.050963003868653156, 0.06263688120742006, 0.053612884994047816, 0.02527810151388643, 0.02640387870101435, 0.04253556196381325, 0.02601022888718385, 0.043785186919929164, 0.052473256449293015, 0.03603295064916623, 0.03431990933078455, 0.04055093072011606, 0.08903888003283333, 0.09026374484101884, 0.11165266866485779, 0.11290890685396393, 0.0867159534472064, 0.09430317897175244, 0.09675447310101681, 0.11127473997401449, 0.09350432291647026, 0.06384417797859765, 0.07530993417768184, 0.10019382107418606, 0.05219978629390898, 0.07473593607609053, 0.06376547525386811, 0.09164521750452492, 0.07471762931201742, 0.08980490220929405, 0.12050050330374962, 0.19009760452168345, 0.14325403092594913, 0.13529873305308338, 0.12728368432374848, 0.12075831929977354, 0.1540675300206238, 0.118678444292874, 0.10834384790330642, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 0.00223776981919821, 0.021699124068699116, 0.0010594667519168155, 9.999999999998899e-05, 9.999999999998899e-05, 0.016790757226985753, 9.999999999998899e-05, 0.05883216933625113, 0.0007743546439998861, 0.008768127676777149, 0.03406038839019088, 0.014435024318176115, 0.017667153369731237, 0.004386754093764433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06326105690357398, 0.07043979498838493, 0.04491757680390074, 0.06782538880034572, 0.024971016918754363, 0.04708570654594735, 0.04596619169187466, 0.041472630039197766, 0.06284316909344967, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004695988757788316, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.2146854762375221, 0.21680811996846783, 0.18158736007750675, 0.20359465687499678, 0.1850911548619284, 0.2091737413476923, 0.19617952643203895, 0.17261122188886346, 0.2172452762220961, 0.03056352238493054, 0.03561295627328365, 0.042658083526449064, 0.039942907571765884, 0.03951206219963532, 0.04272331861703771, 0.05538746908098091, 0.04801344083367454, 0.047053631546544405, 0.13736056296757104, 0.13336828368224884, 0.14536611512626862, 0.14269522402165713, 0.1482615761380628, 0.1640582157594166, 0.14768134595680005, 0.1450824192614325, 0.12983208454172834, 0.16384385664219192, 0.15992527292128977, 0.1674959382613488, 0.16712933282955278, 0.18719216990791898, 0.16813006471678038, 0.1572993213450633, 0.17364822808382996, 0.15479561444628165, 0.10775681664382175, 0.09824440217209829, 0.10919969863901113, 0.10105955016148838, 0.12806299291606216, 0.11737029838377855, 0.10165808234676588, 0.12308705760395, 0.11900528167460744, 0.13818793878205848, 0.15896071117653665, 0.14983264498128623, 0.15479334170047987, 0.16862036560959426, 0.15369412141467598, 0.1925663429625667, 0.16118677706977413, 0.17944410258914845, 0.1311947540959807, 0.15174578506182312, 0.1445425835952303, 0.13616420071793167, 0.15157044819333665, 0.16578684691758405, 0.12890118176408993, 0.14246041699684042, 0.16048942430107804, 0.19138280238181637, 0.16445723062521556, 0.16200607276213908, 0.15498870540131993, 0.14712119731041928, 0.16599408992371467, 0.1631323903982813, 0.23006440894646707, 0.17112630289060526, 0.15560698627435354, 0.14619693813570034, 0.15658828285909998, 0.16593203741382656, 0.1541558155003837, 0.1506660260039362, 0.16236109617405348, 0.1687286595304096, 0.19716498711653885, 0.17696849280895988, 0.18571021201388238, 0.17242997961085726, 0.18612698775541225, 0.20943014836036822, 0.1869806436149929, 0.18055359061106502, 0.18143800180933245, 0.2028582608550058, 0.05935363372610847, 0.050166341600549114, 0.06398529919841767, 0.050385177854688434, 0.058657341103742544, 0.050543012316131564, 0.07212306063617913, 0.053440525459723554, 0.055693391640133094]}, "mutation_prompt": null}
{"id": "86b9cd29-765c-4b5f-9615-ffe66f59e712", "solution": "import numpy as np\n\nclass EnhancedHybridEvolutionaryDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def mutation(x, F):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            mutant = x + F * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def harmonic_search(x):\n            new_x = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_x[i] = np.random.uniform(-5.0, 5.0)\n            return new_x\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        # Self-adaptive mechanism for F\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = mutation(x, F)\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = harmonic_search(x)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution\n", "name": "EnhancedHybridEvolutionaryDifferentialHarmonySearch", "description": "Introducing a self-adaptive mechanism for mutation scaling factor F for enhanced exploration.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2b9cb0f8-33fc-4716-b9b6-9a82f719e372", "metadata": {"aucs": [0.16924673196354068, 0.21970154286155008, 0.16292496815961954, 0.15713293788184057, 0.17808202692091712, 0.16936144660701247, 0.17347725933518343, 0.17221793874931723, 0.16375292025202492, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04375958860071749, 0.04444557484093925, 0.04729769764756442, 0.04899242657188663, 0.04231065080580809, 0.04302288095513218, 0.04773306108594422, 0.06100723845683165, 0.051931949930965504, 0.038843284053069915, 0.027904339255831467, 0.04050965798477624, 0.026655653508149246, 0.04174867353132161, 0.05497527742494712, 0.03548780070194535, 0.03483039061799864, 0.028502288425745204, 0.10386319821496304, 0.10058785400951364, 0.11827767020661817, 0.11750954437732053, 0.11155315109796904, 0.10061478372750987, 0.10328636536040325, 0.12024093975669059, 0.11228960807976363, 0.06734025770107599, 0.07617396735579574, 0.10050728334270587, 0.08398334131106111, 0.07065827330508179, 0.057220146124187354, 0.09304148257430367, 0.058108538446700386, 0.0894403634800155, 0.15264587433190624, 0.18933703431597426, 0.14374647345181424, 0.1328168771464523, 0.08798205890980826, 0.12271966866621986, 0.1283849841550775, 0.11834504120169476, 0.12919150371061683, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 0.0008649598838210704, 0.0010494968721109776, 9.999999999998899e-05, 9.999999999998899e-05, 0.007654392210652117, 0.016790757226985753, 9.999999999998899e-05, 0.05883216933625113, 9.999999999998899e-05, 0.038983658118186715, 0.03406038839019088, 0.010541791336374229, 0.017667153369731237, 0.006994436492887557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059620373449874364, 0.06600492231431232, 0.05173281231181104, 0.0628717104709714, 0.040122451036449625, 0.045999554680021926, 0.042602328090791564, 0.032021600354247504, 0.050630049558975765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.2199064939125217, 0.19096318535811663, 0.183521754320089, 0.20277868850656555, 0.19185576977298913, 0.19904756737567175, 0.20485862166320845, 0.1785374642067069, 0.1898916752783535, 0.04162156454541166, 0.036813789735172575, 0.03828554750005553, 0.03626750094406439, 0.037617954664495246, 0.04284740434456291, 0.06468839433871831, 0.04404609198955678, 0.04556512016983483, 0.13647238877569012, 0.12874066125825157, 0.12491234425758613, 0.13988933132811177, 0.13917560316942856, 0.13465005926479667, 0.14845182903264542, 0.1468181938055657, 0.1240266236832942, 0.16399842324571912, 0.1921150851307425, 0.1674774579978473, 0.17455513218679752, 0.18102188489393034, 0.1693871850460973, 0.16004500818415346, 0.1736684248857162, 0.1481939427607476, 0.10548785234625124, 0.10178926564160662, 0.11149025144065727, 0.10926694995869257, 0.12653308494751636, 0.1072470567290118, 0.10355281509081127, 0.1231006517948583, 0.11781567203421384, 0.1614587701953727, 0.15641074836895097, 0.1463036350588096, 0.15394668335807982, 0.14379938096635891, 0.15432471009362758, 0.15974939230810015, 0.1704957880058764, 0.17698093889951683, 0.1527806859477463, 0.1462335918550023, 0.1535479109317508, 0.15335672829971447, 0.14032302480629988, 0.151421678882953, 0.14248592880142918, 0.1562018187655232, 0.1604757114380957, 0.21216512442079138, 0.1638243128510738, 0.22946736350674246, 0.156349346875282, 0.15254250071192277, 0.1484838425183218, 0.16823857105413276, 0.15522209112681007, 0.15752727582434467, 0.17429231518528, 0.22037352868069227, 0.15291865246831782, 0.1706782462618186, 0.1420905843651712, 0.1484702730520514, 0.2243180879411366, 0.16587281998295655, 0.14443929569984415, 0.184500482979443, 0.19562317268234086, 0.1718137140179058, 0.18608575609477307, 0.21349213428059388, 0.1824815257933735, 0.18250553464995978, 0.1880598827758444, 0.20308889957197607, 0.051990059976106395, 0.04963698019331675, 0.06418938724651235, 0.051339453883900044, 0.058608060758111646, 0.04906964415901416, 0.07206661963763417, 0.05458565170203167, 0.047272586045848386]}, "mutation_prompt": null}
{"id": "8af381f3-6e1b-463c-bc2f-72275db1e92f", "solution": "import numpy as np\n\nclass EnhancedHybridEvolutionaryDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def mutation(x, F):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            mutant = x + F * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def harmonic_search(x):\n            new_x = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_x[i] = np.random.uniform(-5.0, 5.0)\n            return new_x\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        # Self-adaptive mechanism for F\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = mutation(x, F)\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = harmonic_search(x)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution\n", "name": "EnhancedHybridEvolutionaryDifferentialHarmonySearch", "description": "Introducing a self-adaptive mechanism for mutation scaling factor F for enhanced exploration.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2b9cb0f8-33fc-4716-b9b6-9a82f719e372", "metadata": {"aucs": [0.16924673196354068, 0.21970154286155008, 0.16292496815961954, 0.15713293788184057, 0.17808202692091712, 0.16936144660701247, 0.17347725933518343, 0.17221793874931723, 0.16375292025202492, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04375958860071749, 0.04444557484093925, 0.04729769764756442, 0.04899242657188663, 0.04231065080580809, 0.04302288095513218, 0.04773306108594422, 0.06100723845683165, 0.051931949930965504, 0.038843284053069915, 0.027904339255831467, 0.04050965798477624, 0.026655653508149246, 0.04174867353132161, 0.05497527742494712, 0.03548780070194535, 0.03483039061799864, 0.028502288425745204, 0.10386319821496304, 0.10058785400951364, 0.11827767020661817, 0.11750954437732053, 0.11155315109796904, 0.10061478372750987, 0.10328636536040325, 0.12024093975669059, 0.11228960807976363, 0.06734025770107599, 0.07617396735579574, 0.10050728334270587, 0.08398334131106111, 0.07065827330508179, 0.057220146124187354, 0.09304148257430367, 0.058108538446700386, 0.0894403634800155, 0.15264587433190624, 0.18933703431597426, 0.14374647345181424, 0.1328168771464523, 0.08798205890980826, 0.12271966866621986, 0.1283849841550775, 0.11834504120169476, 0.12919150371061683, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 0.0008649598838210704, 0.0010494968721109776, 9.999999999998899e-05, 9.999999999998899e-05, 0.007654392210652117, 0.016790757226985753, 9.999999999998899e-05, 0.05883216933625113, 9.999999999998899e-05, 0.038983658118186715, 0.03406038839019088, 0.010541791336374229, 0.017667153369731237, 0.006994436492887557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059620373449874364, 0.06600492231431232, 0.05173281231181104, 0.0628717104709714, 0.040122451036449625, 0.045999554680021926, 0.042602328090791564, 0.032021600354247504, 0.050630049558975765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.2199064939125217, 0.19096318535811663, 0.183521754320089, 0.20277868850656555, 0.19185576977298913, 0.19904756737567175, 0.20485862166320845, 0.1785374642067069, 0.1898916752783535, 0.04162156454541166, 0.036813789735172575, 0.03828554750005553, 0.03626750094406439, 0.037617954664495246, 0.04284740434456291, 0.06468839433871831, 0.04404609198955678, 0.04556512016983483, 0.13647238877569012, 0.12874066125825157, 0.12491234425758613, 0.13988933132811177, 0.13917560316942856, 0.13465005926479667, 0.14845182903264542, 0.1468181938055657, 0.1240266236832942, 0.16399842324571912, 0.1921150851307425, 0.1674774579978473, 0.17455513218679752, 0.18102188489393034, 0.1693871850460973, 0.16004500818415346, 0.1736684248857162, 0.1481939427607476, 0.10548785234625124, 0.10178926564160662, 0.11149025144065727, 0.10926694995869257, 0.12653308494751636, 0.1072470567290118, 0.10355281509081127, 0.1231006517948583, 0.11781567203421384, 0.1614587701953727, 0.15641074836895097, 0.1463036350588096, 0.15394668335807982, 0.14379938096635891, 0.15432471009362758, 0.15974939230810015, 0.1704957880058764, 0.17698093889951683, 0.1527806859477463, 0.1462335918550023, 0.1535479109317508, 0.15335672829971447, 0.14032302480629988, 0.151421678882953, 0.14248592880142918, 0.1562018187655232, 0.1604757114380957, 0.21216512442079138, 0.1638243128510738, 0.22946736350674246, 0.156349346875282, 0.15254250071192277, 0.1484838425183218, 0.16823857105413276, 0.15522209112681007, 0.15752727582434467, 0.17429231518528, 0.22037352868069227, 0.15291865246831782, 0.1706782462618186, 0.1420905843651712, 0.1484702730520514, 0.2243180879411366, 0.16587281998295655, 0.14443929569984415, 0.184500482979443, 0.19562317268234086, 0.1718137140179058, 0.18608575609477307, 0.21349213428059388, 0.1824815257933735, 0.18250553464995978, 0.1880598827758444, 0.20308889957197607, 0.051990059976106395, 0.04963698019331675, 0.06418938724651235, 0.051339453883900044, 0.058608060758111646, 0.04906964415901416, 0.07206661963763417, 0.05458565170203167, 0.047272586045848386]}, "mutation_prompt": null}
{"id": "b12d7541-4acf-4f75-a29c-8ec81965d4c7", "solution": "class EnhancedLevyFlightEvolutionaryDifferentialHarmonySearch:\n    def __call__(self, func):\n        def levy_flight_mutation(x, lambda_=1.5, alpha=0.01):\n            levy = lambda_ * np.random.standard_cauchy(size=self.dim) / (np.abs(np.random.normal(0, 1, size=self.dim)) ** (1/alpha))\n            mutant = x + levy\n            return np.clip(mutant, -5.0, 5.0)\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = levy_flight_mutation(x)\n                trial = crossover(x, mutant, CR)\n                \n                population[i] = trial if cost_function(trial) < cost_function(x) else harmonic_search(x)", "name": "EnhancedLevyFlightEvolutionaryDifferentialHarmonySearch", "description": "Enhancing population diversity by incorporating a novel mutation strategy based on Levy flights for improved exploration.", "configspace": "", "generation": 21, "fitness": -Infinity, "feedback": "An exception occurred: TypeError('EnhancedLevyFlightEvolutionaryDifferentialHarmonySearch() takes no arguments').", "error": "TypeError('EnhancedLevyFlightEvolutionaryDifferentialHarmonySearch() takes no arguments')", "parent_id": "2b9cb0f8-33fc-4716-b9b6-9a82f719e372", "metadata": {}, "mutation_prompt": null}
{"id": "ab37ccce-528d-43bb-ae94-d278193d65f1", "solution": "import numpy as np\n\nclass EnhancedHybridEvolutionaryDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def mutation(x, F):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            mutant = x + F * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def harmonic_search(x):\n            new_x = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_x[i] = np.random.uniform(-5.0, 5.0)\n            return new_x\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        # Self-adaptive mechanism for F\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = mutation(x, F)\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = harmonic_search(x)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution\n", "name": "EnhancedHybridEvolutionaryDifferentialHarmonySearch", "description": "Introducing a self-adaptive mechanism for mutation scaling factor F for enhanced exploration.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2b9cb0f8-33fc-4716-b9b6-9a82f719e372", "metadata": {"aucs": [0.16924673196354068, 0.21970154286155008, 0.16292496815961954, 0.15713293788184057, 0.17808202692091712, 0.16936144660701247, 0.17347725933518343, 0.17221793874931723, 0.16375292025202492, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04375958860071749, 0.04444557484093925, 0.04729769764756442, 0.04899242657188663, 0.04231065080580809, 0.04302288095513218, 0.04773306108594422, 0.06100723845683165, 0.051931949930965504, 0.038843284053069915, 0.027904339255831467, 0.04050965798477624, 0.026655653508149246, 0.04174867353132161, 0.05497527742494712, 0.03548780070194535, 0.03483039061799864, 0.028502288425745204, 0.10386319821496304, 0.10058785400951364, 0.11827767020661817, 0.11750954437732053, 0.11155315109796904, 0.10061478372750987, 0.10328636536040325, 0.12024093975669059, 0.11228960807976363, 0.06734025770107599, 0.07617396735579574, 0.10050728334270587, 0.08398334131106111, 0.07065827330508179, 0.057220146124187354, 0.09304148257430367, 0.058108538446700386, 0.0894403634800155, 0.15264587433190624, 0.18933703431597426, 0.14374647345181424, 0.1328168771464523, 0.08798205890980826, 0.12271966866621986, 0.1283849841550775, 0.11834504120169476, 0.12919150371061683, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 0.0008649598838210704, 0.0010494968721109776, 9.999999999998899e-05, 9.999999999998899e-05, 0.007654392210652117, 0.016790757226985753, 9.999999999998899e-05, 0.05883216933625113, 9.999999999998899e-05, 0.038983658118186715, 0.03406038839019088, 0.010541791336374229, 0.017667153369731237, 0.006994436492887557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059620373449874364, 0.06600492231431232, 0.05173281231181104, 0.0628717104709714, 0.040122451036449625, 0.045999554680021926, 0.042602328090791564, 0.032021600354247504, 0.050630049558975765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.2199064939125217, 0.19096318535811663, 0.183521754320089, 0.20277868850656555, 0.19185576977298913, 0.19904756737567175, 0.20485862166320845, 0.1785374642067069, 0.1898916752783535, 0.04162156454541166, 0.036813789735172575, 0.03828554750005553, 0.03626750094406439, 0.037617954664495246, 0.04284740434456291, 0.06468839433871831, 0.04404609198955678, 0.04556512016983483, 0.13647238877569012, 0.12874066125825157, 0.12491234425758613, 0.13988933132811177, 0.13917560316942856, 0.13465005926479667, 0.14845182903264542, 0.1468181938055657, 0.1240266236832942, 0.16399842324571912, 0.1921150851307425, 0.1674774579978473, 0.17455513218679752, 0.18102188489393034, 0.1693871850460973, 0.16004500818415346, 0.1736684248857162, 0.1481939427607476, 0.10548785234625124, 0.10178926564160662, 0.11149025144065727, 0.10926694995869257, 0.12653308494751636, 0.1072470567290118, 0.10355281509081127, 0.1231006517948583, 0.11781567203421384, 0.1614587701953727, 0.15641074836895097, 0.1463036350588096, 0.15394668335807982, 0.14379938096635891, 0.15432471009362758, 0.15974939230810015, 0.1704957880058764, 0.17698093889951683, 0.1527806859477463, 0.1462335918550023, 0.1535479109317508, 0.15335672829971447, 0.14032302480629988, 0.151421678882953, 0.14248592880142918, 0.1562018187655232, 0.1604757114380957, 0.21216512442079138, 0.1638243128510738, 0.22946736350674246, 0.156349346875282, 0.15254250071192277, 0.1484838425183218, 0.16823857105413276, 0.15522209112681007, 0.15752727582434467, 0.17429231518528, 0.22037352868069227, 0.15291865246831782, 0.1706782462618186, 0.1420905843651712, 0.1484702730520514, 0.2243180879411366, 0.16587281998295655, 0.14443929569984415, 0.184500482979443, 0.19562317268234086, 0.1718137140179058, 0.18608575609477307, 0.21349213428059388, 0.1824815257933735, 0.18250553464995978, 0.1880598827758444, 0.20308889957197607, 0.051990059976106395, 0.04963698019331675, 0.06418938724651235, 0.051339453883900044, 0.058608060758111646, 0.04906964415901416, 0.07206661963763417, 0.05458565170203167, 0.047272586045848386]}, "mutation_prompt": null}
{"id": "507b77da-21d1-48a1-9652-0c1dceec66d4", "solution": "import numpy as np\n\nclass EnhancedHybridEvolutionaryDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def mutation(x, F):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            mutant = x + F * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def harmonic_search(x):\n            new_x = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_x[i] = np.random.uniform(-5.0, 5.0)\n            return new_x\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        # Self-adaptive mechanism for F\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = mutation(x, F)\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = harmonic_search(x)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution\n", "name": "EnhancedHybridEvolutionaryDifferentialHarmonySearch", "description": "Introducing a self-adaptive mechanism for mutation scaling factor F for enhanced exploration.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2b9cb0f8-33fc-4716-b9b6-9a82f719e372", "metadata": {"aucs": [0.16924673196354068, 0.21970154286155008, 0.16292496815961954, 0.15713293788184057, 0.17808202692091712, 0.16936144660701247, 0.17347725933518343, 0.17221793874931723, 0.16375292025202492, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04375958860071749, 0.04444557484093925, 0.04729769764756442, 0.04899242657188663, 0.04231065080580809, 0.04302288095513218, 0.04773306108594422, 0.06100723845683165, 0.051931949930965504, 0.038843284053069915, 0.027904339255831467, 0.04050965798477624, 0.026655653508149246, 0.04174867353132161, 0.05497527742494712, 0.03548780070194535, 0.03483039061799864, 0.028502288425745204, 0.10386319821496304, 0.10058785400951364, 0.11827767020661817, 0.11750954437732053, 0.11155315109796904, 0.10061478372750987, 0.10328636536040325, 0.12024093975669059, 0.11228960807976363, 0.06734025770107599, 0.07617396735579574, 0.10050728334270587, 0.08398334131106111, 0.07065827330508179, 0.057220146124187354, 0.09304148257430367, 0.058108538446700386, 0.0894403634800155, 0.15264587433190624, 0.18933703431597426, 0.14374647345181424, 0.1328168771464523, 0.08798205890980826, 0.12271966866621986, 0.1283849841550775, 0.11834504120169476, 0.12919150371061683, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 0.0008649598838210704, 0.0010494968721109776, 9.999999999998899e-05, 9.999999999998899e-05, 0.007654392210652117, 0.016790757226985753, 9.999999999998899e-05, 0.05883216933625113, 9.999999999998899e-05, 0.038983658118186715, 0.03406038839019088, 0.010541791336374229, 0.017667153369731237, 0.006994436492887557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059620373449874364, 0.06600492231431232, 0.05173281231181104, 0.0628717104709714, 0.040122451036449625, 0.045999554680021926, 0.042602328090791564, 0.032021600354247504, 0.050630049558975765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.2199064939125217, 0.19096318535811663, 0.183521754320089, 0.20277868850656555, 0.19185576977298913, 0.19904756737567175, 0.20485862166320845, 0.1785374642067069, 0.1898916752783535, 0.04162156454541166, 0.036813789735172575, 0.03828554750005553, 0.03626750094406439, 0.037617954664495246, 0.04284740434456291, 0.06468839433871831, 0.04404609198955678, 0.04556512016983483, 0.13647238877569012, 0.12874066125825157, 0.12491234425758613, 0.13988933132811177, 0.13917560316942856, 0.13465005926479667, 0.14845182903264542, 0.1468181938055657, 0.1240266236832942, 0.16399842324571912, 0.1921150851307425, 0.1674774579978473, 0.17455513218679752, 0.18102188489393034, 0.1693871850460973, 0.16004500818415346, 0.1736684248857162, 0.1481939427607476, 0.10548785234625124, 0.10178926564160662, 0.11149025144065727, 0.10926694995869257, 0.12653308494751636, 0.1072470567290118, 0.10355281509081127, 0.1231006517948583, 0.11781567203421384, 0.1614587701953727, 0.15641074836895097, 0.1463036350588096, 0.15394668335807982, 0.14379938096635891, 0.15432471009362758, 0.15974939230810015, 0.1704957880058764, 0.17698093889951683, 0.1527806859477463, 0.1462335918550023, 0.1535479109317508, 0.15335672829971447, 0.14032302480629988, 0.151421678882953, 0.14248592880142918, 0.1562018187655232, 0.1604757114380957, 0.21216512442079138, 0.1638243128510738, 0.22946736350674246, 0.156349346875282, 0.15254250071192277, 0.1484838425183218, 0.16823857105413276, 0.15522209112681007, 0.15752727582434467, 0.17429231518528, 0.22037352868069227, 0.15291865246831782, 0.1706782462618186, 0.1420905843651712, 0.1484702730520514, 0.2243180879411366, 0.16587281998295655, 0.14443929569984415, 0.184500482979443, 0.19562317268234086, 0.1718137140179058, 0.18608575609477307, 0.21349213428059388, 0.1824815257933735, 0.18250553464995978, 0.1880598827758444, 0.20308889957197607, 0.051990059976106395, 0.04963698019331675, 0.06418938724651235, 0.051339453883900044, 0.058608060758111646, 0.04906964415901416, 0.07206661963763417, 0.05458565170203167, 0.047272586045848386]}, "mutation_prompt": null}
{"id": "f6fd56ff-a736-4bb8-a24d-4c0d7863a51e", "solution": "import numpy as np\n\nclass EnhancedHybridEvolutionaryDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def mutation(x, F):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            mutant = x + F * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def harmonic_search(x):\n            new_x = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_x[i] = np.random.uniform(-5.0, 5.0)\n            return new_x\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        # Self-adaptive mechanism for F\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = mutation(x, F)\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = harmonic_search(x)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution\n", "name": "EnhancedHybridEvolutionaryDifferentialHarmonySearch", "description": "Introducing a self-adaptive mechanism for mutation scaling factor F for enhanced exploration.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2b9cb0f8-33fc-4716-b9b6-9a82f719e372", "metadata": {"aucs": [0.16924673196354068, 0.21970154286155008, 0.16292496815961954, 0.15713293788184057, 0.17808202692091712, 0.16936144660701247, 0.17347725933518343, 0.17221793874931723, 0.16375292025202492, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04375958860071749, 0.04444557484093925, 0.04729769764756442, 0.04899242657188663, 0.04231065080580809, 0.04302288095513218, 0.04773306108594422, 0.06100723845683165, 0.051931949930965504, 0.038843284053069915, 0.027904339255831467, 0.04050965798477624, 0.026655653508149246, 0.04174867353132161, 0.05497527742494712, 0.03548780070194535, 0.03483039061799864, 0.028502288425745204, 0.10386319821496304, 0.10058785400951364, 0.11827767020661817, 0.11750954437732053, 0.11155315109796904, 0.10061478372750987, 0.10328636536040325, 0.12024093975669059, 0.11228960807976363, 0.06734025770107599, 0.07617396735579574, 0.10050728334270587, 0.08398334131106111, 0.07065827330508179, 0.057220146124187354, 0.09304148257430367, 0.058108538446700386, 0.0894403634800155, 0.15264587433190624, 0.18933703431597426, 0.14374647345181424, 0.1328168771464523, 0.08798205890980826, 0.12271966866621986, 0.1283849841550775, 0.11834504120169476, 0.12919150371061683, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 0.0008649598838210704, 0.0010494968721109776, 9.999999999998899e-05, 9.999999999998899e-05, 0.007654392210652117, 0.016790757226985753, 9.999999999998899e-05, 0.05883216933625113, 9.999999999998899e-05, 0.038983658118186715, 0.03406038839019088, 0.010541791336374229, 0.017667153369731237, 0.006994436492887557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059620373449874364, 0.06600492231431232, 0.05173281231181104, 0.0628717104709714, 0.040122451036449625, 0.045999554680021926, 0.042602328090791564, 0.032021600354247504, 0.050630049558975765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.2199064939125217, 0.19096318535811663, 0.183521754320089, 0.20277868850656555, 0.19185576977298913, 0.19904756737567175, 0.20485862166320845, 0.1785374642067069, 0.1898916752783535, 0.04162156454541166, 0.036813789735172575, 0.03828554750005553, 0.03626750094406439, 0.037617954664495246, 0.04284740434456291, 0.06468839433871831, 0.04404609198955678, 0.04556512016983483, 0.13647238877569012, 0.12874066125825157, 0.12491234425758613, 0.13988933132811177, 0.13917560316942856, 0.13465005926479667, 0.14845182903264542, 0.1468181938055657, 0.1240266236832942, 0.16399842324571912, 0.1921150851307425, 0.1674774579978473, 0.17455513218679752, 0.18102188489393034, 0.1693871850460973, 0.16004500818415346, 0.1736684248857162, 0.1481939427607476, 0.10548785234625124, 0.10178926564160662, 0.11149025144065727, 0.10926694995869257, 0.12653308494751636, 0.1072470567290118, 0.10355281509081127, 0.1231006517948583, 0.11781567203421384, 0.1614587701953727, 0.15641074836895097, 0.1463036350588096, 0.15394668335807982, 0.14379938096635891, 0.15432471009362758, 0.15974939230810015, 0.1704957880058764, 0.17698093889951683, 0.1527806859477463, 0.1462335918550023, 0.1535479109317508, 0.15335672829971447, 0.14032302480629988, 0.151421678882953, 0.14248592880142918, 0.1562018187655232, 0.1604757114380957, 0.21216512442079138, 0.1638243128510738, 0.22946736350674246, 0.156349346875282, 0.15254250071192277, 0.1484838425183218, 0.16823857105413276, 0.15522209112681007, 0.15752727582434467, 0.17429231518528, 0.22037352868069227, 0.15291865246831782, 0.1706782462618186, 0.1420905843651712, 0.1484702730520514, 0.2243180879411366, 0.16587281998295655, 0.14443929569984415, 0.184500482979443, 0.19562317268234086, 0.1718137140179058, 0.18608575609477307, 0.21349213428059388, 0.1824815257933735, 0.18250553464995978, 0.1880598827758444, 0.20308889957197607, 0.051990059976106395, 0.04963698019331675, 0.06418938724651235, 0.051339453883900044, 0.058608060758111646, 0.04906964415901416, 0.07206661963763417, 0.05458565170203167, 0.047272586045848386]}, "mutation_prompt": null}
{"id": "d5dafcf0-c1fa-4bc6-8e4e-dd28c29c7310", "solution": "import numpy as np\n\nclass EnhancedHybridEvolutionaryDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def mutation(x, F):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            mutant = x + F * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def harmonic_search(x):\n            new_x = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_x[i] = np.random.uniform(-5.0, 5.0)\n            return new_x\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        # Self-adaptive mechanism for F\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = mutation(x, F)\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = harmonic_search(x)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution\n", "name": "EnhancedHybridEvolutionaryDifferentialHarmonySearch", "description": "Introducing a self-adaptive mechanism for mutation scaling factor F for enhanced exploration.", "configspace": "", "generation": 8, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2b9cb0f8-33fc-4716-b9b6-9a82f719e372", "metadata": {"aucs": [0.16924673196354068, 0.21970154286155008, 0.16292496815961954, 0.15713293788184057, 0.17808202692091712, 0.16936144660701247, 0.17347725933518343, 0.17221793874931723, 0.16375292025202492, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04375958860071749, 0.04444557484093925, 0.04729769764756442, 0.04899242657188663, 0.04231065080580809, 0.04302288095513218, 0.04773306108594422, 0.06100723845683165, 0.051931949930965504, 0.038843284053069915, 0.027904339255831467, 0.04050965798477624, 0.026655653508149246, 0.04174867353132161, 0.05497527742494712, 0.03548780070194535, 0.03483039061799864, 0.028502288425745204, 0.10386319821496304, 0.10058785400951364, 0.11827767020661817, 0.11750954437732053, 0.11155315109796904, 0.10061478372750987, 0.10328636536040325, 0.12024093975669059, 0.11228960807976363, 0.06734025770107599, 0.07617396735579574, 0.10050728334270587, 0.08398334131106111, 0.07065827330508179, 0.057220146124187354, 0.09304148257430367, 0.058108538446700386, 0.0894403634800155, 0.15264587433190624, 0.18933703431597426, 0.14374647345181424, 0.1328168771464523, 0.08798205890980826, 0.12271966866621986, 0.1283849841550775, 0.11834504120169476, 0.12919150371061683, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 0.0008649598838210704, 0.0010494968721109776, 9.999999999998899e-05, 9.999999999998899e-05, 0.007654392210652117, 0.016790757226985753, 9.999999999998899e-05, 0.05883216933625113, 9.999999999998899e-05, 0.038983658118186715, 0.03406038839019088, 0.010541791336374229, 0.017667153369731237, 0.006994436492887557, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059620373449874364, 0.06600492231431232, 0.05173281231181104, 0.0628717104709714, 0.040122451036449625, 0.045999554680021926, 0.042602328090791564, 0.032021600354247504, 0.050630049558975765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.2199064939125217, 0.19096318535811663, 0.183521754320089, 0.20277868850656555, 0.19185576977298913, 0.19904756737567175, 0.20485862166320845, 0.1785374642067069, 0.1898916752783535, 0.04162156454541166, 0.036813789735172575, 0.03828554750005553, 0.03626750094406439, 0.037617954664495246, 0.04284740434456291, 0.06468839433871831, 0.04404609198955678, 0.04556512016983483, 0.13647238877569012, 0.12874066125825157, 0.12491234425758613, 0.13988933132811177, 0.13917560316942856, 0.13465005926479667, 0.14845182903264542, 0.1468181938055657, 0.1240266236832942, 0.16399842324571912, 0.1921150851307425, 0.1674774579978473, 0.17455513218679752, 0.18102188489393034, 0.1693871850460973, 0.16004500818415346, 0.1736684248857162, 0.1481939427607476, 0.10548785234625124, 0.10178926564160662, 0.11149025144065727, 0.10926694995869257, 0.12653308494751636, 0.1072470567290118, 0.10355281509081127, 0.1231006517948583, 0.11781567203421384, 0.1614587701953727, 0.15641074836895097, 0.1463036350588096, 0.15394668335807982, 0.14379938096635891, 0.15432471009362758, 0.15974939230810015, 0.1704957880058764, 0.17698093889951683, 0.1527806859477463, 0.1462335918550023, 0.1535479109317508, 0.15335672829971447, 0.14032302480629988, 0.151421678882953, 0.14248592880142918, 0.1562018187655232, 0.1604757114380957, 0.21216512442079138, 0.1638243128510738, 0.22946736350674246, 0.156349346875282, 0.15254250071192277, 0.1484838425183218, 0.16823857105413276, 0.15522209112681007, 0.15752727582434467, 0.17429231518528, 0.22037352868069227, 0.15291865246831782, 0.1706782462618186, 0.1420905843651712, 0.1484702730520514, 0.2243180879411366, 0.16587281998295655, 0.14443929569984415, 0.184500482979443, 0.19562317268234086, 0.1718137140179058, 0.18608575609477307, 0.21349213428059388, 0.1824815257933735, 0.18250553464995978, 0.1880598827758444, 0.20308889957197607, 0.051990059976106395, 0.04963698019331675, 0.06418938724651235, 0.051339453883900044, 0.058608060758111646, 0.04906964415901416, 0.07206661963763417, 0.05458565170203167, 0.047272586045848386]}, "mutation_prompt": null}
{"id": "c5bdeb2e-52e5-4c1e-ad87-6a44fa544f1f", "solution": "import numpy as np\n\nclass AdaptiveHybridEvolutionaryDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            mutant = x + F * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)]) * diversity\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def harmonic_search(x):\n            new_x = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_x[i] = np.random.uniform(-5.0, 5.0)\n            return new_x\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        # Adaptive mechanism for F based on diversity\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            diversity = np.std(population)  # Calculate diversity\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = adaptive_mutation(x, F, diversity)\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = harmonic_search(x)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "AdaptiveHybridEvolutionaryDifferentialHarmonySearch", "description": "Introducing a novel adaptive mutation strategy based on a dynamic scaling factor considering population diversity.", "configspace": "", "generation": 26, "fitness": 0.1111807457760368, "feedback": "The algorithm AdaptiveHybridEvolutionaryDifferentialHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.14.", "error": "", "parent_id": "2b9cb0f8-33fc-4716-b9b6-9a82f719e372", "metadata": {"aucs": [0.17106537134224764, 0.1762770779895676, 0.16341382642065272, 0.15745239068477135, 0.1767322361176864, 0.16809992298225152, 0.17105027488018498, 0.1508423920172287, 0.1632484696736154, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03521363227915064, 0.04428675240948199, 0.03180431995083122, 0.0352839483060543, 0.03577247694108321, 0.03613391757328954, 0.04773306108594422, 0.060802592032543346, 0.05387225116731664, 0.021661247659076843, 0.02282714176515943, 0.03786406994821845, 0.021106640868510662, 0.041243176331391074, 0.050719164991818944, 0.0352462949077853, 0.03306792703295092, 0.02797730971513268, 0.9899679747487681, 0.8521946468543176, 0.8889288726933935, 0.3582886684271175, 0.643576168034603, 0.3665020449215727, 0.8636275490991108, 0.699183805465535, 0.5029024227149437, 0.06384417797859765, 0.07184140995940447, 0.10019098225768097, 0.07395664295115634, 0.06162208724914375, 0.038115250987663774, 0.09115391308882481, 0.042061624653776164, 0.0894403634800155, 0.1253842122874146, 0.1892914634083318, 0.14280445449937706, 0.09632674356074544, 0.08541951423733296, 0.11913746548730741, 0.09942748529273526, 0.11825656828257558, 0.10836128468090678, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016790757226985753, 9.999999999998899e-05, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.004386754093764433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0358465485503362, 0.06614951746653874, 0.04335396261545066, 0.05941523347397892, 0.023644779453676934, 0.07719290921273114, 0.03568315099746311, 0.033340696974982875, 0.04976213829629195, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21369218474775709, 0.1906447862500691, 0.18432525927312982, 0.20408423564743539, 0.18340870171465362, 0.1957640765124108, 0.19542847619908932, 0.1865617830164662, 0.18573676542749773, 0.03222277125402273, 0.037801425175359116, 0.040425438720084084, 0.036270999032178786, 0.036943092161684565, 0.042699362075576563, 0.054116896973627426, 0.040000271876137194, 0.04528571105900847, 0.1365767637689127, 0.1334762009727447, 0.13416167693519432, 0.13988608627029953, 0.13917575655322567, 0.1238997368964565, 0.1570039239622565, 0.14468787743483968, 0.1242756740305504, 0.16368873799722716, 0.15452267214647186, 0.16746068309021833, 0.163238208273214, 0.16733137391564035, 0.1678699120712921, 0.15706037217931934, 0.1736387847493175, 0.15453101863393226, 0.10304385556538476, 0.09662817346387786, 0.10915637624597152, 0.10107704861481359, 0.1263609968283732, 0.10668160377518565, 0.10142053252328986, 0.12308357953784621, 0.11669836040867698, 0.13285511985148346, 0.15461475811640646, 0.145231653195813, 0.15463731204067976, 0.13709443982548986, 0.16075982125127486, 0.14560302327531138, 0.15241142524093299, 0.1764547015396003, 0.13119101986936088, 0.1408072237894139, 0.13371796461786856, 0.13192751931897528, 0.13683617398183856, 0.14705428079370264, 0.12573287947523692, 0.1333603491712232, 0.1604757114380957, 0.1432913425610699, 0.16363958731342954, 0.19380600048612118, 0.15423738655554375, 0.14932888606002181, 0.15237002550897216, 0.15348762323963439, 0.15390969139858446, 0.15528700122723527, 0.15061022326390705, 0.15935421854670928, 0.14821729931969363, 0.13419372903205584, 0.1387684312824775, 0.14832725512797673, 0.17129353488624943, 0.16663688323765524, 0.16786699369607827, 0.16996472591314216, 0.18389854781573844, 0.20542769549925166, 0.18475641310530833, 0.2116363406112599, 0.1773727201673435, 0.17834756711486222, 0.17929036013949662, 0.2040514803800756, 0.05172998510497273, 0.053583726624214845, 0.0639824361372785, 0.05052760859334082, 0.058768333464460976, 0.04906964415901416, 0.07205485235507059, 0.052733179429026, 0.04220001890767977]}, "mutation_prompt": null}
{"id": "4db99a58-ae52-4e99-8d90-31a3a847f294", "solution": "import numpy as np\n\nclass EnhancedAdaptiveHybridEvolutionaryDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            chaotic_perturbation = np.random.uniform(-1, 1, self.dim) * diversity\n            mutant = x + F * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)]) * diversity + chaotic_perturbation\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def harmonic_search(x):\n            new_x = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_x[i] = np.random.uniform(-5.0, 5.0)\n            return new_x\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        # Adaptive mechanism for F based on diversity\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            diversity = np.std(population)  # Calculate diversity\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = adaptive_mutation(x, F, diversity)\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = harmonic_search(x)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedAdaptiveHybridEvolutionaryDifferentialHarmonySearch", "description": "Enhancing search diversity by introducing chaos-based perturbation to explore the solution space effectively.", "configspace": "", "generation": 27, "fitness": 0.11013869003883642, "feedback": "The algorithm EnhancedAdaptiveHybridEvolutionaryDifferentialHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.11 with standard deviation 0.14.", "error": "", "parent_id": "c5bdeb2e-52e5-4c1e-ad87-6a44fa544f1f", "metadata": {"aucs": [0.16923025056906116, 0.17405415667452684, 0.1629460813526593, 0.15717392650277673, 0.1804366066102786, 0.1672397814827089, 0.1739943996417871, 0.15941252246573767, 0.16320170327696792, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03603494671850038, 0.04428675240948199, 0.03503508400072419, 0.03794389477260718, 0.03579393154122157, 0.03610436849566234, 0.04773306108594422, 0.06073974743546873, 0.05268197617721582, 0.021661247659076843, 0.02282714176515943, 0.03786406994821845, 0.021106640868510662, 0.04120471300980921, 0.05117808946242752, 0.0352462949077853, 0.034639346788149505, 0.03166110752006246, 0.9095615865829454, 0.18362679481931865, 0.3026691743514234, 0.5274374344815054, 0.6324795217679351, 0.8361683462132945, 0.8734150102355079, 0.6857422964150919, 0.8975151481336444, 0.06384417797859765, 0.07139421194488493, 0.10019098225768097, 0.05157161438747859, 0.06162208724914375, 0.04261104053963749, 0.0915947457358296, 0.051458686904020445, 0.0894403634800155, 0.11705227410278107, 0.1897153446271863, 0.14280445449937706, 0.09632674356074544, 0.09944451110417907, 0.12750562173925628, 0.09993832146484949, 0.1177214586405857, 0.10813080959113164, 9.999999999998899e-05, 9.999999999998899e-05, 0.01989266482313956, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016790757226985753, 0.006020116524569352, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.004386754093764433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04722897615665256, 0.06601896911453708, 0.04325570707499371, 0.05941523347397892, 0.04524700155011929, 0.045999554680021926, 0.033465176991685386, 0.040369326002090755, 0.045789234843286564, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.2145078899073709, 0.19065028020964814, 0.17703025444756937, 0.20274245411757952, 0.1833155311540572, 0.19824007553919998, 0.19542796058812328, 0.16587897672235086, 0.1860434754859821, 0.03205591415327713, 0.035632850710177966, 0.03625095077621732, 0.03624249063079643, 0.03538018083011307, 0.0429026043681382, 0.053691998991280854, 0.0384683054630075, 0.04528571105900847, 0.14267306722446338, 0.13754672774684218, 0.1355960240397448, 0.14167928618858916, 0.1392030808020881, 0.12341068498669538, 0.1482063667061837, 0.16403339984849696, 0.15827376574355934, 0.16326384706032937, 0.15452342953341847, 0.16746719731834525, 0.16323632166614166, 0.16738060644475827, 0.16796436699091244, 0.1654740864605223, 0.1736458684634512, 0.1473862452997211, 0.10310542720815918, 0.10239652712534864, 0.10911778677700346, 0.1052432868862283, 0.12526209824229195, 0.10676502462769588, 0.11909300407889845, 0.12309149532976227, 0.1167956299892845, 0.1499064067963578, 0.15451513024576047, 0.14499812426139214, 0.15378591119998086, 0.13646201581057615, 0.15357332289974523, 0.1456049666919429, 0.15482417427498152, 0.17644112118371702, 0.13119101986936088, 0.1408072237894139, 0.13371796461786856, 0.14042560263324266, 0.13683617398183856, 0.14645992550933573, 0.1253883308104321, 0.1333603491712232, 0.1604757114380957, 0.1470375603887475, 0.16422679901913795, 0.16185370949182143, 0.15436926315614752, 0.15274914845045384, 0.12917256591021087, 0.1541175930277805, 0.15393315888803172, 0.1564826217866605, 0.14839770802600927, 0.15184159170503686, 0.1478325939101125, 0.13523576887778033, 0.13614409760055024, 0.14854531274340754, 0.16870208162757228, 0.16583595633196968, 0.15644622563771282, 0.1812039835414122, 0.18821634689453426, 0.1975556007675645, 0.1872793480946333, 0.20997648710353545, 0.17768599703996646, 0.18551634526083793, 0.20734144757324413, 0.2047179602062248, 0.05265991836479533, 0.049039147045157216, 0.06398445296563038, 0.05011327415224809, 0.058607580480619204, 0.04943544679965328, 0.07208641872541921, 0.052700790134994735, 0.043122875365980695]}, "mutation_prompt": null}
{"id": "55b5b927-8288-4121-8b39-f42b12963565", "solution": "import numpy as np\n\nclass EnhancedAdaptiveHybridEvolutionaryDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, best_individual, worst_individual):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            mutant = x + F * (best_individual - x) + F * (x - worst_individual) * diversity\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def perturbation(x, perturb_rate=0.1):\n            perturbed_idx = np.random.choice(range(self.dim), int(self.dim * perturb_rate), replace=False)\n            x[perturbed_idx] = np.random.uniform(-5.0, 5.0, len(perturbed_idx))\n            return x\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        # Adaptive mechanism for F based on diversity\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            diversity = np.std(population)  # Calculate diversity\n            best_idx = np.argmin([cost_function(x) for x in population])\n            worst_idx = np.argmax([cost_function(x) for x in population])\n            best_individual = population[best_idx]\n            worst_individual = population[worst_idx]\n\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = adaptive_mutation(x, F, diversity, best_individual, worst_individual)\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = perturbation(x)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedAdaptiveHybridEvolutionaryDifferentialHarmonySearch", "description": "Enhancing the mutation mechanism by incorporating a dynamic strategy based on the individual's performance and a novel perturbation operation.", "configspace": "", "generation": 28, "fitness": 0.09144843562834938, "feedback": "The algorithm EnhancedAdaptiveHybridEvolutionaryDifferentialHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "c5bdeb2e-52e5-4c1e-ad87-6a44fa544f1f", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "d841088e-a7c2-4c63-8ed2-2ac1444060f2", "solution": "import numpy as np\n\nclass AdaptiveHybridEvolutionaryDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            mutant = x + F * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)]) * diversity\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def harmonic_search(x):\n            new_x = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_x[i] = np.random.uniform(-5.0, 5.0)\n            return new_x\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        # Adaptive mechanism for F based on diversity\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            diversity = np.std(population)  # Calculate diversity\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = adaptive_mutation(x, F, diversity)\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = harmonic_search(x)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "AdaptiveHybridEvolutionaryDifferentialHarmonySearch", "description": "Introducing a novel adaptive mutation strategy based on a dynamic scaling factor considering population diversity.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c5bdeb2e-52e5-4c1e-ad87-6a44fa544f1f", "metadata": {"aucs": [0.17106537134224764, 0.1762770779895676, 0.16341382642065272, 0.15745239068477135, 0.1767322361176864, 0.16809992298225152, 0.17105027488018498, 0.1508423920172287, 0.1632484696736154, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03521363227915064, 0.04428675240948199, 0.03180431995083122, 0.0352839483060543, 0.03577247694108321, 0.03613391757328954, 0.04773306108594422, 0.060802592032543346, 0.05387225116731664, 0.021661247659076843, 0.02282714176515943, 0.03786406994821845, 0.021106640868510662, 0.041243176331391074, 0.050719164991818944, 0.0352462949077853, 0.03306792703295092, 0.02797730971513268, 0.9899679747487681, 0.8521946468543176, 0.8889288726933935, 0.3582886684271175, 0.643576168034603, 0.3665020449215727, 0.8636275490991108, 0.699183805465535, 0.5029024227149437, 0.06384417797859765, 0.07184140995940447, 0.10019098225768097, 0.07395664295115634, 0.06162208724914375, 0.038115250987663774, 0.09115391308882481, 0.042061624653776164, 0.0894403634800155, 0.1253842122874146, 0.1892914634083318, 0.14280445449937706, 0.09632674356074544, 0.08541951423733296, 0.11913746548730741, 0.09942748529273526, 0.11825656828257558, 0.10836128468090678, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016790757226985753, 9.999999999998899e-05, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.004386754093764433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0358465485503362, 0.06614951746653874, 0.04335396261545066, 0.05941523347397892, 0.023644779453676934, 0.07719290921273114, 0.03568315099746311, 0.033340696974982875, 0.04976213829629195, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21369218474775709, 0.1906447862500691, 0.18432525927312982, 0.20408423564743539, 0.18340870171465362, 0.1957640765124108, 0.19542847619908932, 0.1865617830164662, 0.18573676542749773, 0.03222277125402273, 0.037801425175359116, 0.040425438720084084, 0.036270999032178786, 0.036943092161684565, 0.042699362075576563, 0.054116896973627426, 0.040000271876137194, 0.04528571105900847, 0.1365767637689127, 0.1334762009727447, 0.13416167693519432, 0.13988608627029953, 0.13917575655322567, 0.1238997368964565, 0.1570039239622565, 0.14468787743483968, 0.1242756740305504, 0.16368873799722716, 0.15452267214647186, 0.16746068309021833, 0.163238208273214, 0.16733137391564035, 0.1678699120712921, 0.15706037217931934, 0.1736387847493175, 0.15453101863393226, 0.10304385556538476, 0.09662817346387786, 0.10915637624597152, 0.10107704861481359, 0.1263609968283732, 0.10668160377518565, 0.10142053252328986, 0.12308357953784621, 0.11669836040867698, 0.13285511985148346, 0.15461475811640646, 0.145231653195813, 0.15463731204067976, 0.13709443982548986, 0.16075982125127486, 0.14560302327531138, 0.15241142524093299, 0.1764547015396003, 0.13119101986936088, 0.1408072237894139, 0.13371796461786856, 0.13192751931897528, 0.13683617398183856, 0.14705428079370264, 0.12573287947523692, 0.1333603491712232, 0.1604757114380957, 0.1432913425610699, 0.16363958731342954, 0.19380600048612118, 0.15423738655554375, 0.14932888606002181, 0.15237002550897216, 0.15348762323963439, 0.15390969139858446, 0.15528700122723527, 0.15061022326390705, 0.15935421854670928, 0.14821729931969363, 0.13419372903205584, 0.1387684312824775, 0.14832725512797673, 0.17129353488624943, 0.16663688323765524, 0.16786699369607827, 0.16996472591314216, 0.18389854781573844, 0.20542769549925166, 0.18475641310530833, 0.2116363406112599, 0.1773727201673435, 0.17834756711486222, 0.17929036013949662, 0.2040514803800756, 0.05172998510497273, 0.053583726624214845, 0.0639824361372785, 0.05052760859334082, 0.058768333464460976, 0.04906964415901416, 0.07205485235507059, 0.052733179429026, 0.04220001890767977]}, "mutation_prompt": null}
{"id": "eb4c6e2a-1784-4886-92f5-af48abfb9d0a", "solution": "import numpy as np\n\nclass AdaptiveHybridEvolutionaryDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            mutant = x + F * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)]) * diversity\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def harmonic_search(x):\n            new_x = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_x[i] = np.random.uniform(-5.0, 5.0)\n            return new_x\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        # Adaptive mechanism for F based on diversity\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            diversity = np.std(population)  # Calculate diversity\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = adaptive_mutation(x, F, diversity)\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = harmonic_search(x)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "AdaptiveHybridEvolutionaryDifferentialHarmonySearch", "description": "Introducing a novel adaptive mutation strategy based on a dynamic scaling factor considering population diversity.", "configspace": "", "generation": 27, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c5bdeb2e-52e5-4c1e-ad87-6a44fa544f1f", "metadata": {"aucs": [0.17106537134224764, 0.1762770779895676, 0.16341382642065272, 0.15745239068477135, 0.1767322361176864, 0.16809992298225152, 0.17105027488018498, 0.1508423920172287, 0.1632484696736154, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03521363227915064, 0.04428675240948199, 0.03180431995083122, 0.0352839483060543, 0.03577247694108321, 0.03613391757328954, 0.04773306108594422, 0.060802592032543346, 0.05387225116731664, 0.021661247659076843, 0.02282714176515943, 0.03786406994821845, 0.021106640868510662, 0.041243176331391074, 0.050719164991818944, 0.0352462949077853, 0.03306792703295092, 0.02797730971513268, 0.9899679747487681, 0.8521946468543176, 0.8889288726933935, 0.3582886684271175, 0.643576168034603, 0.3665020449215727, 0.8636275490991108, 0.699183805465535, 0.5029024227149437, 0.06384417797859765, 0.07184140995940447, 0.10019098225768097, 0.07395664295115634, 0.06162208724914375, 0.038115250987663774, 0.09115391308882481, 0.042061624653776164, 0.0894403634800155, 0.1253842122874146, 0.1892914634083318, 0.14280445449937706, 0.09632674356074544, 0.08541951423733296, 0.11913746548730741, 0.09942748529273526, 0.11825656828257558, 0.10836128468090678, 9.999999999998899e-05, 9.999999999998899e-05, 0.0007938462085036457, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016790757226985753, 9.999999999998899e-05, 0.05883216933625113, 9.999999999998899e-05, 0.0021740940913237417, 0.03406038839019088, 0.009468453331913929, 0.017667153369731237, 0.004386754093764433, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0358465485503362, 0.06614951746653874, 0.04335396261545066, 0.05941523347397892, 0.023644779453676934, 0.07719290921273114, 0.03568315099746311, 0.033340696974982875, 0.04976213829629195, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.002537501139155629, 9.999999999998899e-05, 0.21369218474775709, 0.1906447862500691, 0.18432525927312982, 0.20408423564743539, 0.18340870171465362, 0.1957640765124108, 0.19542847619908932, 0.1865617830164662, 0.18573676542749773, 0.03222277125402273, 0.037801425175359116, 0.040425438720084084, 0.036270999032178786, 0.036943092161684565, 0.042699362075576563, 0.054116896973627426, 0.040000271876137194, 0.04528571105900847, 0.1365767637689127, 0.1334762009727447, 0.13416167693519432, 0.13988608627029953, 0.13917575655322567, 0.1238997368964565, 0.1570039239622565, 0.14468787743483968, 0.1242756740305504, 0.16368873799722716, 0.15452267214647186, 0.16746068309021833, 0.163238208273214, 0.16733137391564035, 0.1678699120712921, 0.15706037217931934, 0.1736387847493175, 0.15453101863393226, 0.10304385556538476, 0.09662817346387786, 0.10915637624597152, 0.10107704861481359, 0.1263609968283732, 0.10668160377518565, 0.10142053252328986, 0.12308357953784621, 0.11669836040867698, 0.13285511985148346, 0.15461475811640646, 0.145231653195813, 0.15463731204067976, 0.13709443982548986, 0.16075982125127486, 0.14560302327531138, 0.15241142524093299, 0.1764547015396003, 0.13119101986936088, 0.1408072237894139, 0.13371796461786856, 0.13192751931897528, 0.13683617398183856, 0.14705428079370264, 0.12573287947523692, 0.1333603491712232, 0.1604757114380957, 0.1432913425610699, 0.16363958731342954, 0.19380600048612118, 0.15423738655554375, 0.14932888606002181, 0.15237002550897216, 0.15348762323963439, 0.15390969139858446, 0.15528700122723527, 0.15061022326390705, 0.15935421854670928, 0.14821729931969363, 0.13419372903205584, 0.1387684312824775, 0.14832725512797673, 0.17129353488624943, 0.16663688323765524, 0.16786699369607827, 0.16996472591314216, 0.18389854781573844, 0.20542769549925166, 0.18475641310530833, 0.2116363406112599, 0.1773727201673435, 0.17834756711486222, 0.17929036013949662, 0.2040514803800756, 0.05172998510497273, 0.053583726624214845, 0.0639824361372785, 0.05052760859334082, 0.058768333464460976, 0.04906964415901416, 0.07205485235507059, 0.052733179429026, 0.04220001890767977]}, "mutation_prompt": null}
{"id": "9f37e62c-787d-4acb-a0f7-bd30197665b7", "solution": "import numpy as np\n\nclass ImprovedAdaptiveHybridEvolutionaryDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            mutant = x + step_size * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def harmonic_search(x):\n            new_x = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_x[i] = np.random.uniform(-5.0, 5.0)\n            return new_x\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        # Adaptive mechanism for F based on diversity\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            diversity = np.std(population)  # Calculate diversity\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = adaptive_mutation(x, F, diversity, cost_function(x))\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = harmonic_search(x)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "ImprovedAdaptiveHybridEvolutionaryDifferentialHarmonySearch", "description": "Improving the diversity maintenance mechanism by incorporating a dynamic adjustment of mutation step size based on individual fitness evaluations.", "configspace": "", "generation": 31, "fitness": 0.11806631156569461, "feedback": "The algorithm ImprovedAdaptiveHybridEvolutionaryDifferentialHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "c5bdeb2e-52e5-4c1e-ad87-6a44fa544f1f", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.15401903781043824, 0.16485052096657127, 0.15923898843951667, 0.1626934574080704, 0.1394327624586822, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9589589505175594, 0.9812962745888482, 0.9935505077898834, 0.9978753476915768, 0.9925352483426699, 0.9350068121172644, 0.9689536907167747, 0.9851939940564622, 0.966824953735457, 0.06327105142008482, 0.06721697510924984, 0.09882068675465161, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.1126317008225034, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 9.999999999998899e-05, 0.05018136656028038, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.028356792322776325, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20659543889476695, 0.18834580867213868, 0.17579218048408696, 0.1999369180904158, 0.17740226273796744, 0.18871239861538502, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.13562356500513384, 0.1337406998098104, 0.12106933339459824, 0.1387155273583558, 0.13721084259603444, 0.14958145082345342, 0.14567254095405768, 0.14732078316895236, 0.11746728159546149, 0.16080981203863698, 0.15669229165538656, 0.16689511301103044, 0.15870518443591952, 0.1525413158615342, 0.16235954446448564, 0.15127901597955062, 0.17353063573099226, 0.14054305037889958, 0.10046308574535379, 0.08910116385918976, 0.10716210774176638, 0.09500120273374746, 0.11444150503280293, 0.10109362614848993, 0.09812208369943642, 0.12244929523955983, 0.11049284867651388, 0.12991170131181373, 0.14672985924506943, 0.14036465663538056, 0.14711678499612058, 0.1316881543130981, 0.14784841317392816, 0.14262918755463816, 0.1345553064938575, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.12551178674474872, 0.16061914835787772, 0.1581003469671246, 0.1513356545171608, 0.13537681215441366, 0.12435099696387775, 0.14557321055036465, 0.14444836304044384, 0.15297447791381913, 0.1405973198872802, 0.13406252454194778, 0.13348704823630742, 0.11958253901542626, 0.11993531585963524, 0.1367504112204837, 0.15850786804890415, 0.15593140343586853, 0.1375804998716379, 0.16487445936335576, 0.18771094368374563, 0.1810291010689512, 0.18277394057081642, 0.2033135868576701, 0.16960870391446392, 0.18352863217376858, 0.1736547482309232, 0.20024542928485844, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "3ab55915-ffb8-4a84-8052-34963c9ed760", "solution": "import numpy as np\n\nclass ImprovedAdaptiveHybridEvolutionaryDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            mutant = x + step_size * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def harmonic_search(x):\n            new_x = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_x[i] = np.random.uniform(-5.0, 5.0)\n            return new_x\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        # Adaptive mechanism for F based on diversity\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            diversity = np.std(population)  # Calculate diversity\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = adaptive_mutation(x, F, diversity, cost_function(x))\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = harmonic_search(x)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "ImprovedAdaptiveHybridEvolutionaryDifferentialHarmonySearch", "description": "Improving the diversity maintenance mechanism by incorporating a dynamic adjustment of mutation step size based on individual fitness evaluations.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9f37e62c-787d-4acb-a0f7-bd30197665b7", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.15401903781043824, 0.16485052096657127, 0.15923898843951667, 0.1626934574080704, 0.1394327624586822, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9589589505175594, 0.9812962745888482, 0.9935505077898834, 0.9978753476915768, 0.9925352483426699, 0.9350068121172644, 0.9689536907167747, 0.9851939940564622, 0.966824953735457, 0.06327105142008482, 0.06721697510924984, 0.09882068675465161, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.1126317008225034, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 9.999999999998899e-05, 0.05018136656028038, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.028356792322776325, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20659543889476695, 0.18834580867213868, 0.17579218048408696, 0.1999369180904158, 0.17740226273796744, 0.18871239861538502, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.13562356500513384, 0.1337406998098104, 0.12106933339459824, 0.1387155273583558, 0.13721084259603444, 0.14958145082345342, 0.14567254095405768, 0.14732078316895236, 0.11746728159546149, 0.16080981203863698, 0.15669229165538656, 0.16689511301103044, 0.15870518443591952, 0.1525413158615342, 0.16235954446448564, 0.15127901597955062, 0.17353063573099226, 0.14054305037889958, 0.10046308574535379, 0.08910116385918976, 0.10716210774176638, 0.09500120273374746, 0.11444150503280293, 0.10109362614848993, 0.09812208369943642, 0.12244929523955983, 0.11049284867651388, 0.12991170131181373, 0.14672985924506943, 0.14036465663538056, 0.14711678499612058, 0.1316881543130981, 0.14784841317392816, 0.14262918755463816, 0.1345553064938575, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.12551178674474872, 0.16061914835787772, 0.1581003469671246, 0.1513356545171608, 0.13537681215441366, 0.12435099696387775, 0.14557321055036465, 0.14444836304044384, 0.15297447791381913, 0.1405973198872802, 0.13406252454194778, 0.13348704823630742, 0.11958253901542626, 0.11993531585963524, 0.1367504112204837, 0.15850786804890415, 0.15593140343586853, 0.1375804998716379, 0.16487445936335576, 0.18771094368374563, 0.1810291010689512, 0.18277394057081642, 0.2033135868576701, 0.16960870391446392, 0.18352863217376858, 0.1736547482309232, 0.20024542928485844, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "5fd90019-58a5-4deb-b2b2-876028f5dcfc", "solution": "import numpy as np\n\nclass ImprovedAdaptiveHybridEvolutionaryDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            mutant = x + step_size * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def harmonic_search(x):\n            new_x = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_x[i] = np.random.uniform(-5.0, 5.0)\n            return new_x\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        # Adaptive mechanism for F based on diversity\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            diversity = np.std(population)  # Calculate diversity\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = adaptive_mutation(x, F, diversity, cost_function(x))\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = harmonic_search(x)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "ImprovedAdaptiveHybridEvolutionaryDifferentialHarmonySearch", "description": "Improving the diversity maintenance mechanism by incorporating a dynamic adjustment of mutation step size based on individual fitness evaluations.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9f37e62c-787d-4acb-a0f7-bd30197665b7", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.15401903781043824, 0.16485052096657127, 0.15923898843951667, 0.1626934574080704, 0.1394327624586822, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9589589505175594, 0.9812962745888482, 0.9935505077898834, 0.9978753476915768, 0.9925352483426699, 0.9350068121172644, 0.9689536907167747, 0.9851939940564622, 0.966824953735457, 0.06327105142008482, 0.06721697510924984, 0.09882068675465161, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.1126317008225034, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 9.999999999998899e-05, 0.05018136656028038, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.028356792322776325, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20659543889476695, 0.18834580867213868, 0.17579218048408696, 0.1999369180904158, 0.17740226273796744, 0.18871239861538502, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.13562356500513384, 0.1337406998098104, 0.12106933339459824, 0.1387155273583558, 0.13721084259603444, 0.14958145082345342, 0.14567254095405768, 0.14732078316895236, 0.11746728159546149, 0.16080981203863698, 0.15669229165538656, 0.16689511301103044, 0.15870518443591952, 0.1525413158615342, 0.16235954446448564, 0.15127901597955062, 0.17353063573099226, 0.14054305037889958, 0.10046308574535379, 0.08910116385918976, 0.10716210774176638, 0.09500120273374746, 0.11444150503280293, 0.10109362614848993, 0.09812208369943642, 0.12244929523955983, 0.11049284867651388, 0.12991170131181373, 0.14672985924506943, 0.14036465663538056, 0.14711678499612058, 0.1316881543130981, 0.14784841317392816, 0.14262918755463816, 0.1345553064938575, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.12551178674474872, 0.16061914835787772, 0.1581003469671246, 0.1513356545171608, 0.13537681215441366, 0.12435099696387775, 0.14557321055036465, 0.14444836304044384, 0.15297447791381913, 0.1405973198872802, 0.13406252454194778, 0.13348704823630742, 0.11958253901542626, 0.11993531585963524, 0.1367504112204837, 0.15850786804890415, 0.15593140343586853, 0.1375804998716379, 0.16487445936335576, 0.18771094368374563, 0.1810291010689512, 0.18277394057081642, 0.2033135868576701, 0.16960870391446392, 0.18352863217376858, 0.1736547482309232, 0.20024542928485844, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "b16c4e93-0a3b-4e99-98fb-f903589bdbb7", "solution": "import numpy as np\n\nclass ImprovedAdaptiveHybridEvolutionaryDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            mutant = x + step_size * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def harmonic_search(x):\n            new_x = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < 0.5:\n                    new_x[i] = np.random.uniform(-5.0, 5.0)\n            return new_x\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        # Adaptive mechanism for F based on diversity\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            diversity = np.std(population)  # Calculate diversity\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = adaptive_mutation(x, F, diversity, cost_function(x))\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = harmonic_search(x)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "ImprovedAdaptiveHybridEvolutionaryDifferentialHarmonySearch", "description": "Improving the diversity maintenance mechanism by incorporating a dynamic adjustment of mutation step size based on individual fitness evaluations.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9f37e62c-787d-4acb-a0f7-bd30197665b7", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.15401903781043824, 0.16485052096657127, 0.15923898843951667, 0.1626934574080704, 0.1394327624586822, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9589589505175594, 0.9812962745888482, 0.9935505077898834, 0.9978753476915768, 0.9925352483426699, 0.9350068121172644, 0.9689536907167747, 0.9851939940564622, 0.966824953735457, 0.06327105142008482, 0.06721697510924984, 0.09882068675465161, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.1126317008225034, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 9.999999999998899e-05, 0.05018136656028038, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.028356792322776325, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20659543889476695, 0.18834580867213868, 0.17579218048408696, 0.1999369180904158, 0.17740226273796744, 0.18871239861538502, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.13562356500513384, 0.1337406998098104, 0.12106933339459824, 0.1387155273583558, 0.13721084259603444, 0.14958145082345342, 0.14567254095405768, 0.14732078316895236, 0.11746728159546149, 0.16080981203863698, 0.15669229165538656, 0.16689511301103044, 0.15870518443591952, 0.1525413158615342, 0.16235954446448564, 0.15127901597955062, 0.17353063573099226, 0.14054305037889958, 0.10046308574535379, 0.08910116385918976, 0.10716210774176638, 0.09500120273374746, 0.11444150503280293, 0.10109362614848993, 0.09812208369943642, 0.12244929523955983, 0.11049284867651388, 0.12991170131181373, 0.14672985924506943, 0.14036465663538056, 0.14711678499612058, 0.1316881543130981, 0.14784841317392816, 0.14262918755463816, 0.1345553064938575, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.12551178674474872, 0.16061914835787772, 0.1581003469671246, 0.1513356545171608, 0.13537681215441366, 0.12435099696387775, 0.14557321055036465, 0.14444836304044384, 0.15297447791381913, 0.1405973198872802, 0.13406252454194778, 0.13348704823630742, 0.11958253901542626, 0.11993531585963524, 0.1367504112204837, 0.15850786804890415, 0.15593140343586853, 0.1375804998716379, 0.16487445936335576, 0.18771094368374563, 0.1810291010689512, 0.18277394057081642, 0.2033135868576701, 0.16960870391446392, 0.18352863217376858, 0.1736547482309232, 0.20024542928485844, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "0d4d940c-83a9-43f4-b4a9-ea7ea31573f8", "solution": "import numpy as np\n\nclass ImprovedAdaptiveHybridEvolutionaryDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            mutant = x + step_size * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def chaotic_map_search(x):\n            new_x = np.copy(x)\n            chaotic_factor = 0.05  # Adjust for exploration\n            for i in range(self.dim):\n                new_x[i] = np.clip(x[i] + chaotic_factor * (np.sin(x[i]) + np.cos(x[i])), -5.0, 5.0)\n            return new_x\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        # Adaptive mechanism for F based on diversity\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            diversity = np.std(population)  # Calculate diversity\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = adaptive_mutation(x, F, diversity, cost_function(x))\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = chaotic_map_search(x)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "ImprovedAdaptiveHybridEvolutionaryDifferentialHarmonySearch", "description": "Enhancing exploration by integrating a chaotic map to generate diverse solutions for improved convergence.", "configspace": "", "generation": 35, "fitness": 0.11814572885631212, "feedback": "The algorithm ImprovedAdaptiveHybridEvolutionaryDifferentialHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "9f37e62c-787d-4acb-a0f7-bd30197665b7", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.1539666791903357, 0.16486012632784497, 0.15906138340069975, 0.1626934574080704, 0.1394327624586822, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9911478391627996, 0.9950575033659549, 0.9993008272268011, 0.9773046207726279, 0.9895067705294837, 0.9713312063542248, 0.9890773027187121, 0.938295661769681, 0.9761311474667956, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03440544895429609, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.1126317008225034, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 0.0004713917554159952, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20659958450393112, 0.18834580867213868, 0.17579218048408696, 0.1999369180904158, 0.17740226273796744, 0.18870432363626577, 0.19325028361517582, 0.156468898507079, 0.18235995559725393, 0.025816910901456658, 0.03499491360583029, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.13638581284088525, 0.12022389211954965, 0.12976362380882278, 0.13872199495975368, 0.13813251819184313, 0.13804991891849872, 0.1459994168109734, 0.14140111879076944, 0.11906409230783177, 0.1608398482098814, 0.14939603588276207, 0.16681818235072587, 0.15870518443591952, 0.1525413158615342, 0.16219816198597414, 0.15127901597955062, 0.17353063573099226, 0.14054305037889958, 0.09992351009678224, 0.08910270045930069, 0.10716210774176638, 0.09500120273374746, 0.11444150503280293, 0.10109362614848993, 0.09812208369943642, 0.12245915313657973, 0.11050892964534687, 0.12991170131181373, 0.14673882578657982, 0.14036465663538056, 0.14711678499612058, 0.1316881543130981, 0.14784841317392816, 0.14262918755463816, 0.1345553064938575, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1255082226009958, 0.16111872927761028, 0.1580928823157255, 0.1513356545171608, 0.1353744901740942, 0.1218929565446577, 0.14557321055036465, 0.14444836304044384, 0.1530157303001468, 0.1405973198872802, 0.13406252454194778, 0.13348704823630742, 0.11958253901542626, 0.11993534616826074, 0.1367504112204837, 0.15815670752111743, 0.15703642757728098, 0.10984767619882008, 0.1703491294511461, 0.18676317388808839, 0.19038016719834228, 0.1819912265030813, 0.21013454692341715, 0.1852372784057157, 0.1733276089715613, 0.1753152127321459, 0.20002012489960708, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "796932a4-54eb-446c-a5d7-31d730aefb08", "solution": "import numpy as np\n\nclass ImprovedAdaptiveHybridEvolutionaryDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            mutant = x + step_size * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def chaotic_map_search(x):\n            new_x = np.copy(x)\n            chaotic_factor = 0.05  # Adjust for exploration\n            for i in range(self.dim):\n                new_x[i] = np.clip(x[i] + chaotic_factor * (np.sin(x[i]) + np.cos(x[i])), -5.0, 5.0)\n            return new_x\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        # Adaptive mechanism for F based on diversity\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            diversity = np.std(population)  # Calculate diversity\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = adaptive_mutation(x, F, diversity, cost_function(x))\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = chaotic_map_search(x)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "ImprovedAdaptiveHybridEvolutionaryDifferentialHarmonySearch", "description": "Enhancing exploration by integrating a chaotic map to generate diverse solutions for improved convergence.", "configspace": "", "generation": 36, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d4d940c-83a9-43f4-b4a9-ea7ea31573f8", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.1539666791903357, 0.16486012632784497, 0.15906138340069975, 0.1626934574080704, 0.1394327624586822, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9911478391627996, 0.9950575033659549, 0.9993008272268011, 0.9773046207726279, 0.9895067705294837, 0.9713312063542248, 0.9890773027187121, 0.938295661769681, 0.9761311474667956, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03440544895429609, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.1126317008225034, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 0.0004713917554159952, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20659958450393112, 0.18834580867213868, 0.17579218048408696, 0.1999369180904158, 0.17740226273796744, 0.18870432363626577, 0.19325028361517582, 0.156468898507079, 0.18235995559725393, 0.025816910901456658, 0.03499491360583029, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.13638581284088525, 0.12022389211954965, 0.12976362380882278, 0.13872199495975368, 0.13813251819184313, 0.13804991891849872, 0.1459994168109734, 0.14140111879076944, 0.11906409230783177, 0.1608398482098814, 0.14939603588276207, 0.16681818235072587, 0.15870518443591952, 0.1525413158615342, 0.16219816198597414, 0.15127901597955062, 0.17353063573099226, 0.14054305037889958, 0.09992351009678224, 0.08910270045930069, 0.10716210774176638, 0.09500120273374746, 0.11444150503280293, 0.10109362614848993, 0.09812208369943642, 0.12245915313657973, 0.11050892964534687, 0.12991170131181373, 0.14673882578657982, 0.14036465663538056, 0.14711678499612058, 0.1316881543130981, 0.14784841317392816, 0.14262918755463816, 0.1345553064938575, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1255082226009958, 0.16111872927761028, 0.1580928823157255, 0.1513356545171608, 0.1353744901740942, 0.1218929565446577, 0.14557321055036465, 0.14444836304044384, 0.1530157303001468, 0.1405973198872802, 0.13406252454194778, 0.13348704823630742, 0.11958253901542626, 0.11993534616826074, 0.1367504112204837, 0.15815670752111743, 0.15703642757728098, 0.10984767619882008, 0.1703491294511461, 0.18676317388808839, 0.19038016719834228, 0.1819912265030813, 0.21013454692341715, 0.1852372784057157, 0.1733276089715613, 0.1753152127321459, 0.20002012489960708, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "5a58f48f-a902-4cfb-91c2-fbf89514fcd6", "solution": "import numpy as np\n\nclass ImprovedAdaptiveHybridEvolutionaryDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            mutant = x + step_size * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def chaotic_map_search(x):\n            new_x = np.copy(x)\n            chaotic_factor = 0.05  # Adjust for exploration\n            for i in range(self.dim):\n                new_x[i] = np.clip(x[i] + chaotic_factor * (np.sin(x[i]) + np.cos(x[i])), -5.0, 5.0)\n            return new_x\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        # Adaptive mechanism for F based on diversity\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            diversity = np.std(population)  # Calculate diversity\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = adaptive_mutation(x, F, diversity, cost_function(x))\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = chaotic_map_search(x)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "ImprovedAdaptiveHybridEvolutionaryDifferentialHarmonySearch", "description": "Enhancing exploration by integrating a chaotic map to generate diverse solutions for improved convergence.", "configspace": "", "generation": 36, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d4d940c-83a9-43f4-b4a9-ea7ea31573f8", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.1539666791903357, 0.16486012632784497, 0.15906138340069975, 0.1626934574080704, 0.1394327624586822, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9911478391627996, 0.9950575033659549, 0.9993008272268011, 0.9773046207726279, 0.9895067705294837, 0.9713312063542248, 0.9890773027187121, 0.938295661769681, 0.9761311474667956, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03440544895429609, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.1126317008225034, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 0.0004713917554159952, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20659958450393112, 0.18834580867213868, 0.17579218048408696, 0.1999369180904158, 0.17740226273796744, 0.18870432363626577, 0.19325028361517582, 0.156468898507079, 0.18235995559725393, 0.025816910901456658, 0.03499491360583029, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.13638581284088525, 0.12022389211954965, 0.12976362380882278, 0.13872199495975368, 0.13813251819184313, 0.13804991891849872, 0.1459994168109734, 0.14140111879076944, 0.11906409230783177, 0.1608398482098814, 0.14939603588276207, 0.16681818235072587, 0.15870518443591952, 0.1525413158615342, 0.16219816198597414, 0.15127901597955062, 0.17353063573099226, 0.14054305037889958, 0.09992351009678224, 0.08910270045930069, 0.10716210774176638, 0.09500120273374746, 0.11444150503280293, 0.10109362614848993, 0.09812208369943642, 0.12245915313657973, 0.11050892964534687, 0.12991170131181373, 0.14673882578657982, 0.14036465663538056, 0.14711678499612058, 0.1316881543130981, 0.14784841317392816, 0.14262918755463816, 0.1345553064938575, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1255082226009958, 0.16111872927761028, 0.1580928823157255, 0.1513356545171608, 0.1353744901740942, 0.1218929565446577, 0.14557321055036465, 0.14444836304044384, 0.1530157303001468, 0.1405973198872802, 0.13406252454194778, 0.13348704823630742, 0.11958253901542626, 0.11993534616826074, 0.1367504112204837, 0.15815670752111743, 0.15703642757728098, 0.10984767619882008, 0.1703491294511461, 0.18676317388808839, 0.19038016719834228, 0.1819912265030813, 0.21013454692341715, 0.1852372784057157, 0.1733276089715613, 0.1753152127321459, 0.20002012489960708, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "63706086-dd5f-4e83-bb33-90ac6b448854", "solution": "import numpy as np\n\nclass ImprovedAdaptiveHybridEvolutionaryDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            mutant = x + step_size * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def chaotic_map_search(x):\n            new_x = np.copy(x)\n            chaotic_factor = 0.05  # Adjust for exploration\n            for i in range(self.dim):\n                new_x[i] = np.clip(x[i] + chaotic_factor * (np.sin(x[i]) + np.cos(x[i])), -5.0, 5.0)\n            return new_x\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        # Adaptive mechanism for F based on diversity\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            diversity = np.std(population)  # Calculate diversity\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = adaptive_mutation(x, F, diversity, cost_function(x))\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = chaotic_map_search(x)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "ImprovedAdaptiveHybridEvolutionaryDifferentialHarmonySearch", "description": "Enhancing exploration by integrating a chaotic map to generate diverse solutions for improved convergence.", "configspace": "", "generation": 36, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d4d940c-83a9-43f4-b4a9-ea7ea31573f8", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.1539666791903357, 0.16486012632784497, 0.15906138340069975, 0.1626934574080704, 0.1394327624586822, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9911478391627996, 0.9950575033659549, 0.9993008272268011, 0.9773046207726279, 0.9895067705294837, 0.9713312063542248, 0.9890773027187121, 0.938295661769681, 0.9761311474667956, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03440544895429609, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.1126317008225034, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 0.0004713917554159952, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20659958450393112, 0.18834580867213868, 0.17579218048408696, 0.1999369180904158, 0.17740226273796744, 0.18870432363626577, 0.19325028361517582, 0.156468898507079, 0.18235995559725393, 0.025816910901456658, 0.03499491360583029, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.13638581284088525, 0.12022389211954965, 0.12976362380882278, 0.13872199495975368, 0.13813251819184313, 0.13804991891849872, 0.1459994168109734, 0.14140111879076944, 0.11906409230783177, 0.1608398482098814, 0.14939603588276207, 0.16681818235072587, 0.15870518443591952, 0.1525413158615342, 0.16219816198597414, 0.15127901597955062, 0.17353063573099226, 0.14054305037889958, 0.09992351009678224, 0.08910270045930069, 0.10716210774176638, 0.09500120273374746, 0.11444150503280293, 0.10109362614848993, 0.09812208369943642, 0.12245915313657973, 0.11050892964534687, 0.12991170131181373, 0.14673882578657982, 0.14036465663538056, 0.14711678499612058, 0.1316881543130981, 0.14784841317392816, 0.14262918755463816, 0.1345553064938575, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1255082226009958, 0.16111872927761028, 0.1580928823157255, 0.1513356545171608, 0.1353744901740942, 0.1218929565446577, 0.14557321055036465, 0.14444836304044384, 0.1530157303001468, 0.1405973198872802, 0.13406252454194778, 0.13348704823630742, 0.11958253901542626, 0.11993534616826074, 0.1367504112204837, 0.15815670752111743, 0.15703642757728098, 0.10984767619882008, 0.1703491294511461, 0.18676317388808839, 0.19038016719834228, 0.1819912265030813, 0.21013454692341715, 0.1852372784057157, 0.1733276089715613, 0.1753152127321459, 0.20002012489960708, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "2106b9e1-f360-419b-93ce-0c99ed25a57f", "solution": "import numpy as np\n\nclass ImprovedAdaptiveHybridEvolutionaryDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            mutant = x + step_size * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def chaotic_map_search(x):\n            new_x = np.copy(x)\n            chaotic_factor = 0.05  # Adjust for exploration\n            for i in range(self.dim):\n                new_x[i] = np.clip(x[i] + chaotic_factor * (np.sin(x[i]) + np.cos(x[i])), -5.0, 5.0)\n            return new_x\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        # Adaptive mechanism for F based on diversity\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        global_best = population[np.argmin([cost_function(x) for x in population])]\n\n        for _ in range(self.budget):\n            diversity = np.std(population)  # Calculate diversity\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = adaptive_mutation(x, F, diversity, cost_function(x))\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                    if cost_function(trial) < cost_function(global_best):\n                        global_best = np.copy(trial)\n                else:\n                    population[i] = chaotic_map_search(x)\n\n        return global_best", "name": "ImprovedAdaptiveHybridEvolutionaryDifferentialHarmonySearch", "description": "Enhancing exploration by incorporating a global-best update strategy to guide the search towards promising regions.", "configspace": "", "generation": 39, "fitness": 0.09144843562834938, "feedback": "The algorithm ImprovedAdaptiveHybridEvolutionaryDifferentialHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "0d4d940c-83a9-43f4-b4a9-ea7ea31573f8", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "c750d14e-31a5-463f-8eff-28f50e42c643", "solution": "import numpy as np\n\nclass EnhancedHybridSelfAdaptiveDifferentialChaosSearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def self_adaptive_mutation(x, F, diversity, fitness_eval):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            mutant = x + step_size * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def chaotic_map_search(x):\n            new_x = np.copy(x)\n            chaotic_factor = 0.05  # Adjust for exploration\n            for i in range(self.dim):\n                new_x[i] = np.clip(x[i] + chaotic_factor * (np.sin(x[i]) + np.cos(x[i])), -5.0, 5.0)\n            return new_x\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            diversity = np.std(population)\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = self_adaptive_mutation(x, F, diversity, cost_function(x))\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = chaotic_map_search(x)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedHybridSelfAdaptiveDifferentialChaosSearch", "description": "Incorporating a hybrid self-adaptive mutation strategy combining differential evolution and chaotic map dynamics to enhance exploration and exploitation for improved optimization performance.", "configspace": "", "generation": 40, "fitness": 0.11814572885631212, "feedback": "The algorithm EnhancedHybridSelfAdaptiveDifferentialChaosSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "0d4d940c-83a9-43f4-b4a9-ea7ea31573f8", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.1539666791903357, 0.16486012632784497, 0.15906138340069975, 0.1626934574080704, 0.1394327624586822, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9911478391627996, 0.9950575033659549, 0.9993008272268011, 0.9773046207726279, 0.9895067705294837, 0.9713312063542248, 0.9890773027187121, 0.938295661769681, 0.9761311474667956, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03440544895429609, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.1126317008225034, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 0.0004713917554159952, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20659958450393112, 0.18834580867213868, 0.17579218048408696, 0.1999369180904158, 0.17740226273796744, 0.18870432363626577, 0.19325028361517582, 0.156468898507079, 0.18235995559725393, 0.025816910901456658, 0.03499491360583029, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.13638581284088525, 0.12022389211954965, 0.12976362380882278, 0.13872199495975368, 0.13813251819184313, 0.13804991891849872, 0.1459994168109734, 0.14140111879076944, 0.11906409230783177, 0.1608398482098814, 0.14939603588276207, 0.16681818235072587, 0.15870518443591952, 0.1525413158615342, 0.16219816198597414, 0.15127901597955062, 0.17353063573099226, 0.14054305037889958, 0.09992351009678224, 0.08910270045930069, 0.10716210774176638, 0.09500120273374746, 0.11444150503280293, 0.10109362614848993, 0.09812208369943642, 0.12245915313657973, 0.11050892964534687, 0.12991170131181373, 0.14673882578657982, 0.14036465663538056, 0.14711678499612058, 0.1316881543130981, 0.14784841317392816, 0.14262918755463816, 0.1345553064938575, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1255082226009958, 0.16111872927761028, 0.1580928823157255, 0.1513356545171608, 0.1353744901740942, 0.1218929565446577, 0.14557321055036465, 0.14444836304044384, 0.1530157303001468, 0.1405973198872802, 0.13406252454194778, 0.13348704823630742, 0.11958253901542626, 0.11993534616826074, 0.1367504112204837, 0.15815670752111743, 0.15703642757728098, 0.10984767619882008, 0.1703491294511461, 0.18676317388808839, 0.19038016719834228, 0.1819912265030813, 0.21013454692341715, 0.1852372784057157, 0.1733276089715613, 0.1753152127321459, 0.20002012489960708, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "328483ad-7129-4759-b081-f8c3e5837378", "solution": "import numpy as np\n\nclass ImprovedOppositionBasedHybridEvolutionaryDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            mutant = x + step_size * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def opposition_based_search(x):\n            opposite = -1 * x\n            return np.clip(opposite, -5.0, 5.0)\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        # Adaptive mechanism for F based on diversity\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            diversity = np.std(population)  # Calculate diversity\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = adaptive_mutation(x, F, diversity, cost_function(x))\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = opposition_based_search(x)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "ImprovedOppositionBasedHybridEvolutionaryDifferentialHarmonySearch", "description": "Improving convergence by incorporating a novel opposition-based learning strategy for diverse exploration.", "configspace": "", "generation": 41, "fitness": 0.1181286602974022, "feedback": "The algorithm ImprovedOppositionBasedHybridEvolutionaryDifferentialHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "0d4d940c-83a9-43f4-b4a9-ea7ea31573f8", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.1539666791903357, 0.16486012632784497, 0.15906138340069975, 0.1626934574080704, 0.1394327624586822, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9911478391627996, 0.9950575033659549, 0.9993008272268011, 0.9773046207726279, 0.9895067705294837, 0.9713312063542248, 0.9890773027187121, 0.938295661769681, 0.9761311474667956, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03440544895429609, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.1126317008225034, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 9.999999999998899e-05, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20659958450393112, 0.18834580867213868, 0.17579218048408696, 0.1999369180904158, 0.17740226273796744, 0.18870432363626577, 0.19325028361517582, 0.156468898507079, 0.18235995559725393, 0.025816910901456658, 0.03499491360583029, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.13638581284088525, 0.12022389211954965, 0.12976362380882278, 0.13872199495975368, 0.13813251819184313, 0.13804991891849872, 0.1459994168109734, 0.14140111879076944, 0.11979665788388594, 0.1608398482098814, 0.14939603588276207, 0.16681818235072587, 0.15870518443591952, 0.1525413158615342, 0.16219816198597414, 0.15127901597955062, 0.17353063573099226, 0.14054305037889958, 0.09992351009678224, 0.08910270045930069, 0.10716210774176638, 0.09500120273374746, 0.11444150503280293, 0.10109362614848993, 0.09812208369943642, 0.12245915313657973, 0.11050892964534687, 0.12991170131181373, 0.14673882578657982, 0.14036465663538056, 0.14711678499612058, 0.1316881543130981, 0.14784841317392816, 0.14262918755463816, 0.1345553064938575, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1255082226009958, 0.16111872927761028, 0.1580928823157255, 0.1513356545171608, 0.1353744901740942, 0.1218929565446577, 0.14557321055036465, 0.14444836304044384, 0.1530157303001468, 0.1405973198872802, 0.13406252454194778, 0.13348704823630742, 0.11958253901542626, 0.11993534616826074, 0.1367504112204837, 0.15815670752111743, 0.15703642757728098, 0.10984767619882008, 0.1703491294511461, 0.18676317388808839, 0.1901655605876481, 0.1819912265030813, 0.21013454692341715, 0.18140390247122518, 0.1733276089715613, 0.1753152127321459, 0.20002012489960708, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "f4d1cb16-cda9-4d51-9ed7-2ab9c1529cd9", "solution": "import numpy as np\n\nclass EnhancedAdaptiveHybridEvolutionaryDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            mutant = x + step_size * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def chaotic_map_search(x):\n            new_x = np.copy(x)\n            chaotic_factor = 0.05  # Adjust for exploration\n            for i in range(self.dim):\n                new_x[i] = np.clip(x[i] + chaotic_factor * (np.sin(x[i]) + np.cos(x[i])), -5.0, 5.0)\n            return new_x\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        # Adaptive mechanism for F based on diversity\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            diversity = np.std(population)  # Calculate diversity\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = adaptive_mutation(x, F, diversity, cost_function(x))\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = chaotic_map_search(x)\n\n            # Dynamic population size strategy\n            population = np.vstack((population, np.random.uniform(-5.0, 5.0, (self.budget, self.dim))))\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedAdaptiveHybridEvolutionaryDifferentialHarmonySearch", "description": "Enhancing exploration and exploitation by incorporating a dynamic population size strategy to adapt to the problem complexity.", "configspace": "", "generation": 42, "fitness": 0.11814572885631212, "feedback": "The algorithm EnhancedAdaptiveHybridEvolutionaryDifferentialHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "0d4d940c-83a9-43f4-b4a9-ea7ea31573f8", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.1539666791903357, 0.16486012632784497, 0.15906138340069975, 0.1626934574080704, 0.1394327624586822, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9911478391627996, 0.9950575033659549, 0.9993008272268011, 0.9773046207726279, 0.9895067705294837, 0.9713312063542248, 0.9890773027187121, 0.938295661769681, 0.9761311474667956, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03440544895429609, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.1126317008225034, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 0.0004713917554159952, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20659958450393112, 0.18834580867213868, 0.17579218048408696, 0.1999369180904158, 0.17740226273796744, 0.18870432363626577, 0.19325028361517582, 0.156468898507079, 0.18235995559725393, 0.025816910901456658, 0.03499491360583029, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.13638581284088525, 0.12022389211954965, 0.12976362380882278, 0.13872199495975368, 0.13813251819184313, 0.13804991891849872, 0.1459994168109734, 0.14140111879076944, 0.11906409230783177, 0.1608398482098814, 0.14939603588276207, 0.16681818235072587, 0.15870518443591952, 0.1525413158615342, 0.16219816198597414, 0.15127901597955062, 0.17353063573099226, 0.14054305037889958, 0.09992351009678224, 0.08910270045930069, 0.10716210774176638, 0.09500120273374746, 0.11444150503280293, 0.10109362614848993, 0.09812208369943642, 0.12245915313657973, 0.11050892964534687, 0.12991170131181373, 0.14673882578657982, 0.14036465663538056, 0.14711678499612058, 0.1316881543130981, 0.14784841317392816, 0.14262918755463816, 0.1345553064938575, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1255082226009958, 0.16111872927761028, 0.1580928823157255, 0.1513356545171608, 0.1353744901740942, 0.1218929565446577, 0.14557321055036465, 0.14444836304044384, 0.1530157303001468, 0.1405973198872802, 0.13406252454194778, 0.13348704823630742, 0.11958253901542626, 0.11993534616826074, 0.1367504112204837, 0.15815670752111743, 0.15703642757728098, 0.10984767619882008, 0.1703491294511461, 0.18676317388808839, 0.19038016719834228, 0.1819912265030813, 0.21013454692341715, 0.1852372784057157, 0.1733276089715613, 0.1753152127321459, 0.20002012489960708, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "e478cbe7-ec99-4db6-9de6-e398ec03f906", "solution": "import numpy as np\n\nclass ImprovedAdaptiveHybridEvolutionaryDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            mutant = x + step_size * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def chaotic_map_search(x):\n            new_x = np.copy(x)\n            chaotic_factor = 0.05  # Adjust for exploration\n            for i in range(self.dim):\n                new_x[i] = np.clip(x[i] + chaotic_factor * (np.sin(x[i]) + np.cos(x[i])), -5.0, 5.0)\n            return new_x\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        # Adaptive mechanism for F based on diversity\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            diversity = np.std(population)  # Calculate diversity\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = adaptive_mutation(x, F, diversity, cost_function(x))\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = chaotic_map_search(x)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "ImprovedAdaptiveHybridEvolutionaryDifferentialHarmonySearch", "description": "Enhancing exploration by integrating a chaotic map to generate diverse solutions for improved convergence.", "configspace": "", "generation": 36, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0d4d940c-83a9-43f4-b4a9-ea7ea31573f8", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.1539666791903357, 0.16486012632784497, 0.15906138340069975, 0.1626934574080704, 0.1394327624586822, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9911478391627996, 0.9950575033659549, 0.9993008272268011, 0.9773046207726279, 0.9895067705294837, 0.9713312063542248, 0.9890773027187121, 0.938295661769681, 0.9761311474667956, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03440544895429609, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.1126317008225034, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 0.0004713917554159952, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20659958450393112, 0.18834580867213868, 0.17579218048408696, 0.1999369180904158, 0.17740226273796744, 0.18870432363626577, 0.19325028361517582, 0.156468898507079, 0.18235995559725393, 0.025816910901456658, 0.03499491360583029, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.13638581284088525, 0.12022389211954965, 0.12976362380882278, 0.13872199495975368, 0.13813251819184313, 0.13804991891849872, 0.1459994168109734, 0.14140111879076944, 0.11906409230783177, 0.1608398482098814, 0.14939603588276207, 0.16681818235072587, 0.15870518443591952, 0.1525413158615342, 0.16219816198597414, 0.15127901597955062, 0.17353063573099226, 0.14054305037889958, 0.09992351009678224, 0.08910270045930069, 0.10716210774176638, 0.09500120273374746, 0.11444150503280293, 0.10109362614848993, 0.09812208369943642, 0.12245915313657973, 0.11050892964534687, 0.12991170131181373, 0.14673882578657982, 0.14036465663538056, 0.14711678499612058, 0.1316881543130981, 0.14784841317392816, 0.14262918755463816, 0.1345553064938575, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1255082226009958, 0.16111872927761028, 0.1580928823157255, 0.1513356545171608, 0.1353744901740942, 0.1218929565446577, 0.14557321055036465, 0.14444836304044384, 0.1530157303001468, 0.1405973198872802, 0.13406252454194778, 0.13348704823630742, 0.11958253901542626, 0.11993534616826074, 0.1367504112204837, 0.15815670752111743, 0.15703642757728098, 0.10984767619882008, 0.1703491294511461, 0.18676317388808839, 0.19038016719834228, 0.1819912265030813, 0.21013454692341715, 0.1852372784057157, 0.1733276089715613, 0.1753152127321459, 0.20002012489960708, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "fe7c16e2-5e3f-40e6-9e79-896aa37ac072", "solution": "import numpy as np\n\nclass ImprovedAdaptiveHybridEvolutionaryDifferentialHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            reference_individual = population[np.random.randint(self.budget)]\n            similar_individual = population[np.argmin(np.sum((population - reference_individual)**2, axis=1))]\n            mutant = x + step_size * (reference_individual - similar_individual)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def chaotic_map_search(x):\n            new_x = np.copy(x)\n            chaotic_factor = 0.05  # Adjust for exploration\n            for i in range(self.dim):\n                new_x[i] = np.clip(x[i] + chaotic_factor * (np.sin(x[i]) + np.cos(x[i])), -5.0, 5.0)\n            return new_x\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        # Adaptive mechanism for F based on diversity\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            diversity = np.std(population)  # Calculate diversity\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = adaptive_mutation(x, F, diversity, cost_function(x))\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = chaotic_map_search(x)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "ImprovedAdaptiveHybridEvolutionaryDifferentialHarmonySearch", "description": "Enhancing exploration and exploitation by introducing a novel adaptive mutation strategy based on cosine similarity for improved convergence.", "configspace": "", "generation": 44, "fitness": 0.07981569288363734, "feedback": "The algorithm ImprovedAdaptiveHybridEvolutionaryDifferentialHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.06.", "error": "", "parent_id": "0d4d940c-83a9-43f4-b4a9-ea7ea31573f8", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.1539666791903357, 0.16485052096657127, 0.15895233292401567, 0.16268879234922262, 0.1394327624586822, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.06627008772211107, 0.06681197977842457, 0.07658319026970528, 0.07649533299022915, 0.07940608740585997, 0.07525896959157452, 0.07832626347259575, 0.07352620179891678, 0.07734145785707802, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.1126317008225034, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 9.999999999998899e-05, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2065901113042089, 0.18834580867213868, 0.17579218048408696, 0.1999369180904158, 0.17740226273796744, 0.18869028876902638, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.1352067457754409, 0.11516365404714635, 0.11795695037128229, 0.1387155273583558, 0.13721084259603444, 0.1097355930509093, 0.145666792236392, 0.14065903363721466, 0.11739468264674835, 0.1606069339743006, 0.14930042609085925, 0.1667976334561032, 0.15870518443591952, 0.15253174936598612, 0.16219816198597414, 0.15127901597955062, 0.17353063573099226, 0.14047736335456307, 0.09989989921586839, 0.08910116385918976, 0.10716210774176638, 0.09500120273374746, 0.11432659763482012, 0.10109362614848993, 0.09812208369943642, 0.12244929523955983, 0.11047114970772398, 0.12991170131181373, 0.1467272681078131, 0.14036465663538056, 0.14711678499612058, 0.1316881543130981, 0.14784841317392816, 0.14262918755463816, 0.1345553064938575, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1253386609536803, 0.16049072535632225, 0.1580928823157255, 0.1513356545171608, 0.13537345295724312, 0.12035742854989107, 0.14557321055036465, 0.14444836304044384, 0.15294909362803888, 0.1400986269807849, 0.13406252454194778, 0.13348704823630742, 0.1195820390294009, 0.11993531585963524, 0.1367504112204837, 0.15810863249052032, 0.15459622979309096, 0.10833417730993056, 0.16323453923992692, 0.18297812867283236, 0.1679679949868309, 0.18169452842091738, 0.20197928114519936, 0.16896571707373476, 0.17165293653672054, 0.17292991187226925, 0.20002012489960708, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "90afe9f8-b7cf-4fde-abb0-da72022edba1", "solution": "import numpy as np\n\nclass EnhancedMultiPhaseEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            mutant = x + step_size * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def chaotic_map_search(x):\n            new_x = np.copy(x)\n            chaotic_factor = 0.05  # Adjust for exploration\n            for i in range(self.dim):\n                new_x[i] = np.clip(x[i] + chaotic_factor * (np.sin(x[i]) + np.cos(x[i])), -5.0, 5.0)\n            return new_x\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        # Adaptive mechanism for F based on diversity\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            diversity = np.std(population)  # Calculate diversity\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = adaptive_mutation(x, F, diversity, cost_function(x))\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = chaotic_map_search(x)\n\n                # Additional phase for exploration and exploitation balance\n                if np.random.rand() < 0.1:\n                    population[i] = chaotic_map_search(x)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedMultiPhaseEvolutionaryHybridHarmonySearch", "description": "Enhancing exploration and exploitation balance by incorporating a multi-phase evolutionary strategy with adaptive mutation control and dynamic chaotic map adjustments.", "configspace": "", "generation": 45, "fitness": 0.1182764662884409, "feedback": "The algorithm EnhancedMultiPhaseEvolutionaryHybridHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "0d4d940c-83a9-43f4-b4a9-ea7ea31573f8", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.15400264008777975, 0.16485052096657127, 0.15906138340069975, 0.1626934574080704, 0.1394327624586822, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9790169256427225, 0.9973029429715151, 0.9993008272268011, 0.9832614647480635, 0.9909458209516089, 0.9823705036346329, 0.9831680706218727, 0.9832383452640744, 0.995032158880771, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.11264553172146008, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 9.999999999998899e-05, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20660378855180106, 0.18834580867213868, 0.17579218048408696, 0.1999369180904158, 0.17740226273796744, 0.18870871771519515, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.13938769019591324, 0.1221695216980635, 0.12003541764135683, 0.1387155273583558, 0.13721084259603444, 0.11030022426031716, 0.145666792236392, 0.1407654513585458, 0.12127805783360124, 0.16082493090743066, 0.1494330505969721, 0.1667976334561032, 0.15870518443591952, 0.1525413158615342, 0.16221177950426824, 0.15127901597955062, 0.17353063573099226, 0.140564590258355, 0.09989989921586839, 0.08910270045930069, 0.10716210774176638, 0.09500120273374746, 0.11444150503280293, 0.10109362614848993, 0.09812208369943642, 0.12245915313657973, 0.11048386500105822, 0.12991170131181373, 0.14673390258327834, 0.14036465663538056, 0.14711678499612058, 0.1316881543130981, 0.14784841317392816, 0.14262918755463816, 0.13455865692828484, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1292137181221228, 0.1605080055840883, 0.1580928823157255, 0.1513356545171608, 0.1353744901740942, 0.12036755225168105, 0.14557321055036465, 0.14444836304044384, 0.15294909362803888, 0.1405973198872802, 0.13406252454194778, 0.1335493985489944, 0.11958253901542626, 0.11993534616826074, 0.1367504112204837, 0.1599982964472325, 0.15654142794851122, 0.12633330631668338, 0.172875152217277, 0.1838500235340288, 0.17095535428939734, 0.1830669643680215, 0.20542241061462851, 0.17407183010378124, 0.17231902629286722, 0.18779175869155684, 0.2000557947309477, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "cce8f93e-c40d-4641-8979-4573f05fabb3", "solution": "import numpy as np\n\nclass EnhancedMultiPhaseEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            mutant = x + step_size * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def chaotic_map_search(x):\n            new_x = np.copy(x)\n            chaotic_factor = 0.05  # Adjust for exploration\n            for i in range(self.dim):\n                new_x[i] = np.clip(x[i] + chaotic_factor * (np.sin(x[i]) + np.cos(x[i])), -5.0, 5.0)\n            return new_x\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        # Adaptive mechanism for F based on diversity\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            diversity = np.std(population)  # Calculate diversity\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = adaptive_mutation(x, F, diversity, cost_function(x))\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = chaotic_map_search(x)\n\n                # Additional phase for exploration and exploitation balance\n                if np.random.rand() < 0.1:\n                    population[i] = chaotic_map_search(x)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedMultiPhaseEvolutionaryHybridHarmonySearch", "description": "Enhancing exploration and exploitation balance by incorporating a multi-phase evolutionary strategy with adaptive mutation control and dynamic chaotic map adjustments.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "90afe9f8-b7cf-4fde-abb0-da72022edba1", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.15400264008777975, 0.16485052096657127, 0.15906138340069975, 0.1626934574080704, 0.1394327624586822, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9790169256427225, 0.9973029429715151, 0.9993008272268011, 0.9832614647480635, 0.9909458209516089, 0.9823705036346329, 0.9831680706218727, 0.9832383452640744, 0.995032158880771, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.11264553172146008, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 9.999999999998899e-05, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20660378855180106, 0.18834580867213868, 0.17579218048408696, 0.1999369180904158, 0.17740226273796744, 0.18870871771519515, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.13938769019591324, 0.1221695216980635, 0.12003541764135683, 0.1387155273583558, 0.13721084259603444, 0.11030022426031716, 0.145666792236392, 0.1407654513585458, 0.12127805783360124, 0.16082493090743066, 0.1494330505969721, 0.1667976334561032, 0.15870518443591952, 0.1525413158615342, 0.16221177950426824, 0.15127901597955062, 0.17353063573099226, 0.140564590258355, 0.09989989921586839, 0.08910270045930069, 0.10716210774176638, 0.09500120273374746, 0.11444150503280293, 0.10109362614848993, 0.09812208369943642, 0.12245915313657973, 0.11048386500105822, 0.12991170131181373, 0.14673390258327834, 0.14036465663538056, 0.14711678499612058, 0.1316881543130981, 0.14784841317392816, 0.14262918755463816, 0.13455865692828484, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1292137181221228, 0.1605080055840883, 0.1580928823157255, 0.1513356545171608, 0.1353744901740942, 0.12036755225168105, 0.14557321055036465, 0.14444836304044384, 0.15294909362803888, 0.1405973198872802, 0.13406252454194778, 0.1335493985489944, 0.11958253901542626, 0.11993534616826074, 0.1367504112204837, 0.1599982964472325, 0.15654142794851122, 0.12633330631668338, 0.172875152217277, 0.1838500235340288, 0.17095535428939734, 0.1830669643680215, 0.20542241061462851, 0.17407183010378124, 0.17231902629286722, 0.18779175869155684, 0.2000557947309477, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "f7abbb50-c866-4ca4-8730-3dcf43b27dd3", "solution": "import numpy as np\n\nclass EnhancedMultiPhaseEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            mutant = x + step_size * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def chaotic_map_search(x):\n            new_x = np.copy(x)\n            chaotic_factor = 0.05  # Adjust for exploration\n            for i in range(self.dim):\n                new_x[i] = np.clip(x[i] + chaotic_factor * (np.sin(x[i]) + np.cos(x[i])), -5.0, 5.0)\n            return new_x\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        # Adaptive mechanism for F based on diversity\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            diversity = np.std(population)  # Calculate diversity\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = adaptive_mutation(x, F, diversity, cost_function(x))\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = chaotic_map_search(x)\n\n                # Additional phase for exploration and exploitation balance\n                if np.random.rand() < 0.1:\n                    population[i] = chaotic_map_search(x)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedMultiPhaseEvolutionaryHybridHarmonySearch", "description": "Enhancing exploration and exploitation balance by incorporating a multi-phase evolutionary strategy with adaptive mutation control and dynamic chaotic map adjustments.", "configspace": "", "generation": 46, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "90afe9f8-b7cf-4fde-abb0-da72022edba1", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.15400264008777975, 0.16485052096657127, 0.15906138340069975, 0.1626934574080704, 0.1394327624586822, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9790169256427225, 0.9973029429715151, 0.9993008272268011, 0.9832614647480635, 0.9909458209516089, 0.9823705036346329, 0.9831680706218727, 0.9832383452640744, 0.995032158880771, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.11264553172146008, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 9.999999999998899e-05, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20660378855180106, 0.18834580867213868, 0.17579218048408696, 0.1999369180904158, 0.17740226273796744, 0.18870871771519515, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.13938769019591324, 0.1221695216980635, 0.12003541764135683, 0.1387155273583558, 0.13721084259603444, 0.11030022426031716, 0.145666792236392, 0.1407654513585458, 0.12127805783360124, 0.16082493090743066, 0.1494330505969721, 0.1667976334561032, 0.15870518443591952, 0.1525413158615342, 0.16221177950426824, 0.15127901597955062, 0.17353063573099226, 0.140564590258355, 0.09989989921586839, 0.08910270045930069, 0.10716210774176638, 0.09500120273374746, 0.11444150503280293, 0.10109362614848993, 0.09812208369943642, 0.12245915313657973, 0.11048386500105822, 0.12991170131181373, 0.14673390258327834, 0.14036465663538056, 0.14711678499612058, 0.1316881543130981, 0.14784841317392816, 0.14262918755463816, 0.13455865692828484, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1292137181221228, 0.1605080055840883, 0.1580928823157255, 0.1513356545171608, 0.1353744901740942, 0.12036755225168105, 0.14557321055036465, 0.14444836304044384, 0.15294909362803888, 0.1405973198872802, 0.13406252454194778, 0.1335493985489944, 0.11958253901542626, 0.11993534616826074, 0.1367504112204837, 0.1599982964472325, 0.15654142794851122, 0.12633330631668338, 0.172875152217277, 0.1838500235340288, 0.17095535428939734, 0.1830669643680215, 0.20542241061462851, 0.17407183010378124, 0.17231902629286722, 0.18779175869155684, 0.2000557947309477, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "0cae4b22-5365-4f4f-800b-982b82e14e3c", "solution": "import numpy as np\n\nclass EnhancedMultiPhaseEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            mutant = x + step_size * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            diversity = np.std(population)\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = adaptive_mutation(x, F, diversity, cost_function(x))\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                if np.random.rand() < 0.1:\n                    population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedMultiPhaseEvolutionaryHybridHarmonySearch", "description": "Improving diversity maintenance and adaptive mutation control by incorporating a self-adaptive mechanism for mutation step size adjustment based on individual performance and enhancing exploration through a dynamic boundary adjustment.", "configspace": "", "generation": 48, "fitness": 0.11829075444667499, "feedback": "The algorithm EnhancedMultiPhaseEvolutionaryHybridHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "90afe9f8-b7cf-4fde-abb0-da72022edba1", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.15400264008777975, 0.16485052096657127, 0.15906138340069975, 0.1626934574080704, 0.1394327624586822, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9790169256427225, 0.9973029429715151, 0.9993008272268011, 0.9832614647480635, 0.9909458209516089, 0.9823705036346329, 0.9831680706218727, 0.9832383452640744, 0.995032158880771, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.11264553172146008, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 9.999999999998899e-05, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20660378855180106, 0.18834580867213868, 0.17579218048408696, 0.1999369180904158, 0.17740226273796744, 0.18870871771519515, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.026218735074649557, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.13938769019591324, 0.1221695216980635, 0.12012397640755013, 0.1387155273583558, 0.13721084259603444, 0.11030022426031716, 0.145666792236392, 0.1407654513585458, 0.12127805783360124, 0.16082493090743066, 0.14934015062476735, 0.1667976334561032, 0.15870518443591952, 0.1525413158615342, 0.16221177950426824, 0.15127901597955062, 0.17353063573099226, 0.140564590258355, 0.09989989921586839, 0.08910270045930069, 0.10716210774176638, 0.09500120273374746, 0.11444150503280293, 0.10109362614848993, 0.09812208369943642, 0.12245915313657973, 0.11048386500105822, 0.12991170131181373, 0.14673390258327834, 0.14036465663538056, 0.14711678499612058, 0.1316881543130981, 0.14784841317392816, 0.14262918755463816, 0.13455865692828484, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1292137181221228, 0.1605080055840883, 0.1580928823157255, 0.1513356545171608, 0.1353744901740942, 0.12036755225168105, 0.14557321055036465, 0.14444836304044384, 0.15294909362803888, 0.1405973198872802, 0.13406252454194778, 0.1335493985489944, 0.11958253901542626, 0.11993534616826074, 0.1367504112204837, 0.1599982964472325, 0.15654142794851122, 0.12851294197279117, 0.172875152217277, 0.1838500235340288, 0.17095535428939734, 0.1830669643680215, 0.20542241061462851, 0.17407183010378124, 0.17231902629286722, 0.18779175869155684, 0.2000557947309477, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "4ecd3c6d-2aa7-4175-92be-fad72b2cfacb", "solution": "import numpy as np\n\nclass EnhancedMultiPhaseEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            mutant = x + step_size * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            diversity = np.std(population)\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = adaptive_mutation(x, F, diversity, cost_function(x))\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                if np.random.rand() < 0.1:\n                    population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedMultiPhaseEvolutionaryHybridHarmonySearch", "description": "Improving diversity maintenance and adaptive mutation control by incorporating a self-adaptive mechanism for mutation step size adjustment based on individual performance and enhancing exploration through a dynamic boundary adjustment.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cae4b22-5365-4f4f-800b-982b82e14e3c", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.15400264008777975, 0.16485052096657127, 0.15906138340069975, 0.1626934574080704, 0.1394327624586822, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9790169256427225, 0.9973029429715151, 0.9993008272268011, 0.9832614647480635, 0.9909458209516089, 0.9823705036346329, 0.9831680706218727, 0.9832383452640744, 0.995032158880771, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.11264553172146008, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 9.999999999998899e-05, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20660378855180106, 0.18834580867213868, 0.17579218048408696, 0.1999369180904158, 0.17740226273796744, 0.18870871771519515, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.026218735074649557, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.13938769019591324, 0.1221695216980635, 0.12012397640755013, 0.1387155273583558, 0.13721084259603444, 0.11030022426031716, 0.145666792236392, 0.1407654513585458, 0.12127805783360124, 0.16082493090743066, 0.14934015062476735, 0.1667976334561032, 0.15870518443591952, 0.1525413158615342, 0.16221177950426824, 0.15127901597955062, 0.17353063573099226, 0.140564590258355, 0.09989989921586839, 0.08910270045930069, 0.10716210774176638, 0.09500120273374746, 0.11444150503280293, 0.10109362614848993, 0.09812208369943642, 0.12245915313657973, 0.11048386500105822, 0.12991170131181373, 0.14673390258327834, 0.14036465663538056, 0.14711678499612058, 0.1316881543130981, 0.14784841317392816, 0.14262918755463816, 0.13455865692828484, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1292137181221228, 0.1605080055840883, 0.1580928823157255, 0.1513356545171608, 0.1353744901740942, 0.12036755225168105, 0.14557321055036465, 0.14444836304044384, 0.15294909362803888, 0.1405973198872802, 0.13406252454194778, 0.1335493985489944, 0.11958253901542626, 0.11993534616826074, 0.1367504112204837, 0.1599982964472325, 0.15654142794851122, 0.12851294197279117, 0.172875152217277, 0.1838500235340288, 0.17095535428939734, 0.1830669643680215, 0.20542241061462851, 0.17407183010378124, 0.17231902629286722, 0.18779175869155684, 0.2000557947309477, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "a2c8dd68-24d2-4ed5-8502-c41a0002a25c", "solution": "import numpy as np\n\nclass EnhancedMultiPhaseEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            mutant = x + step_size * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            diversity = np.std(population)\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = adaptive_mutation(x, F, diversity, cost_function(x))\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                if np.random.rand() < 0.1:\n                    population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedMultiPhaseEvolutionaryHybridHarmonySearch", "description": "Improving diversity maintenance and adaptive mutation control by incorporating a self-adaptive mechanism for mutation step size adjustment based on individual performance and enhancing exploration through a dynamic boundary adjustment.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cae4b22-5365-4f4f-800b-982b82e14e3c", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.15400264008777975, 0.16485052096657127, 0.15906138340069975, 0.1626934574080704, 0.1394327624586822, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9790169256427225, 0.9973029429715151, 0.9993008272268011, 0.9832614647480635, 0.9909458209516089, 0.9823705036346329, 0.9831680706218727, 0.9832383452640744, 0.995032158880771, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.11264553172146008, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 9.999999999998899e-05, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20660378855180106, 0.18834580867213868, 0.17579218048408696, 0.1999369180904158, 0.17740226273796744, 0.18870871771519515, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.026218735074649557, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.13938769019591324, 0.1221695216980635, 0.12012397640755013, 0.1387155273583558, 0.13721084259603444, 0.11030022426031716, 0.145666792236392, 0.1407654513585458, 0.12127805783360124, 0.16082493090743066, 0.14934015062476735, 0.1667976334561032, 0.15870518443591952, 0.1525413158615342, 0.16221177950426824, 0.15127901597955062, 0.17353063573099226, 0.140564590258355, 0.09989989921586839, 0.08910270045930069, 0.10716210774176638, 0.09500120273374746, 0.11444150503280293, 0.10109362614848993, 0.09812208369943642, 0.12245915313657973, 0.11048386500105822, 0.12991170131181373, 0.14673390258327834, 0.14036465663538056, 0.14711678499612058, 0.1316881543130981, 0.14784841317392816, 0.14262918755463816, 0.13455865692828484, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1292137181221228, 0.1605080055840883, 0.1580928823157255, 0.1513356545171608, 0.1353744901740942, 0.12036755225168105, 0.14557321055036465, 0.14444836304044384, 0.15294909362803888, 0.1405973198872802, 0.13406252454194778, 0.1335493985489944, 0.11958253901542626, 0.11993534616826074, 0.1367504112204837, 0.1599982964472325, 0.15654142794851122, 0.12851294197279117, 0.172875152217277, 0.1838500235340288, 0.17095535428939734, 0.1830669643680215, 0.20542241061462851, 0.17407183010378124, 0.17231902629286722, 0.18779175869155684, 0.2000557947309477, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "4d7968e0-3baf-4079-acd1-b0ce7602687c", "solution": "import numpy as np\n\nclass EnhancedMultiPhaseEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            mutant = x + step_size * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            diversity = np.std(population)\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = adaptive_mutation(x, F, diversity, cost_function(x))\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                if np.random.rand() < 0.1:\n                    population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedMultiPhaseEvolutionaryHybridHarmonySearch", "description": "Improving diversity maintenance and adaptive mutation control by incorporating a self-adaptive mechanism for mutation step size adjustment based on individual performance and enhancing exploration through a dynamic boundary adjustment.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cae4b22-5365-4f4f-800b-982b82e14e3c", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.15400264008777975, 0.16485052096657127, 0.15906138340069975, 0.1626934574080704, 0.1394327624586822, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9790169256427225, 0.9973029429715151, 0.9993008272268011, 0.9832614647480635, 0.9909458209516089, 0.9823705036346329, 0.9831680706218727, 0.9832383452640744, 0.995032158880771, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.11264553172146008, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 9.999999999998899e-05, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20660378855180106, 0.18834580867213868, 0.17579218048408696, 0.1999369180904158, 0.17740226273796744, 0.18870871771519515, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.026218735074649557, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.13938769019591324, 0.1221695216980635, 0.12012397640755013, 0.1387155273583558, 0.13721084259603444, 0.11030022426031716, 0.145666792236392, 0.1407654513585458, 0.12127805783360124, 0.16082493090743066, 0.14934015062476735, 0.1667976334561032, 0.15870518443591952, 0.1525413158615342, 0.16221177950426824, 0.15127901597955062, 0.17353063573099226, 0.140564590258355, 0.09989989921586839, 0.08910270045930069, 0.10716210774176638, 0.09500120273374746, 0.11444150503280293, 0.10109362614848993, 0.09812208369943642, 0.12245915313657973, 0.11048386500105822, 0.12991170131181373, 0.14673390258327834, 0.14036465663538056, 0.14711678499612058, 0.1316881543130981, 0.14784841317392816, 0.14262918755463816, 0.13455865692828484, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1292137181221228, 0.1605080055840883, 0.1580928823157255, 0.1513356545171608, 0.1353744901740942, 0.12036755225168105, 0.14557321055036465, 0.14444836304044384, 0.15294909362803888, 0.1405973198872802, 0.13406252454194778, 0.1335493985489944, 0.11958253901542626, 0.11993534616826074, 0.1367504112204837, 0.1599982964472325, 0.15654142794851122, 0.12851294197279117, 0.172875152217277, 0.1838500235340288, 0.17095535428939734, 0.1830669643680215, 0.20542241061462851, 0.17407183010378124, 0.17231902629286722, 0.18779175869155684, 0.2000557947309477, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "4eb33516-40f9-41f9-93f0-b8bbbd472dc8", "solution": "import numpy as np\n\nclass ImprovedEnhancedMultiPhaseEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            mutant = x + step_size * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        def adaptive_population_maintenance(population, best_solution):\n            new_population = []\n            for i in range(self.budget):\n                if np.random.rand() < 0.5:\n                    new_population.append(best_solution + np.random.randn(self.dim) * 0.1)\n                else:\n                    new_population.append(population[np.random.randint(self.budget)])\n            return np.array(new_population)\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            diversity = np.std(population)\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = adaptive_mutation(x, F, diversity, cost_function(x))\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                if np.random.rand() < 0.1:\n                    population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n            population = adaptive_population_maintenance(population, population[np.argmin([cost_function(x) for x in population])])\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "ImprovedEnhancedMultiPhaseEvolutionaryHybridHarmonySearch", "description": "Incorporating a novel adaptive population diversity maintenance strategy to enhance exploration and exploitation balance in search space optimization.", "configspace": "", "generation": 52, "fitness": 0.11829075444667499, "feedback": "The algorithm ImprovedEnhancedMultiPhaseEvolutionaryHybridHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "0cae4b22-5365-4f4f-800b-982b82e14e3c", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.15400264008777975, 0.16485052096657127, 0.15906138340069975, 0.1626934574080704, 0.1394327624586822, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9790169256427225, 0.9973029429715151, 0.9993008272268011, 0.9832614647480635, 0.9909458209516089, 0.9823705036346329, 0.9831680706218727, 0.9832383452640744, 0.995032158880771, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.11264553172146008, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 9.999999999998899e-05, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20660378855180106, 0.18834580867213868, 0.17579218048408696, 0.1999369180904158, 0.17740226273796744, 0.18870871771519515, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.026218735074649557, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.13938769019591324, 0.1221695216980635, 0.12012397640755013, 0.1387155273583558, 0.13721084259603444, 0.11030022426031716, 0.145666792236392, 0.1407654513585458, 0.12127805783360124, 0.16082493090743066, 0.14934015062476735, 0.1667976334561032, 0.15870518443591952, 0.1525413158615342, 0.16221177950426824, 0.15127901597955062, 0.17353063573099226, 0.140564590258355, 0.09989989921586839, 0.08910270045930069, 0.10716210774176638, 0.09500120273374746, 0.11444150503280293, 0.10109362614848993, 0.09812208369943642, 0.12245915313657973, 0.11048386500105822, 0.12991170131181373, 0.14673390258327834, 0.14036465663538056, 0.14711678499612058, 0.1316881543130981, 0.14784841317392816, 0.14262918755463816, 0.13455865692828484, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1292137181221228, 0.1605080055840883, 0.1580928823157255, 0.1513356545171608, 0.1353744901740942, 0.12036755225168105, 0.14557321055036465, 0.14444836304044384, 0.15294909362803888, 0.1405973198872802, 0.13406252454194778, 0.1335493985489944, 0.11958253901542626, 0.11993534616826074, 0.1367504112204837, 0.1599982964472325, 0.15654142794851122, 0.12851294197279117, 0.172875152217277, 0.1838500235340288, 0.17095535428939734, 0.1830669643680215, 0.20542241061462851, 0.17407183010378124, 0.17231902629286722, 0.18779175869155684, 0.2000557947309477, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "b24a95f2-2957-4d36-8f07-5a7361e0868a", "solution": "import numpy as np\n\nclass EnhancedMultiPhaseEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            mutant = x + step_size * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            diversity = np.std(population)\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = adaptive_mutation(x, F, diversity, cost_function(x))\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                if np.random.rand() < 0.1:\n                    population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedMultiPhaseEvolutionaryHybridHarmonySearch", "description": "Improving diversity maintenance and adaptive mutation control by incorporating a self-adaptive mechanism for mutation step size adjustment based on individual performance and enhancing exploration through a dynamic boundary adjustment.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cae4b22-5365-4f4f-800b-982b82e14e3c", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.15400264008777975, 0.16485052096657127, 0.15906138340069975, 0.1626934574080704, 0.1394327624586822, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9790169256427225, 0.9973029429715151, 0.9993008272268011, 0.9832614647480635, 0.9909458209516089, 0.9823705036346329, 0.9831680706218727, 0.9832383452640744, 0.995032158880771, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.11264553172146008, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 9.999999999998899e-05, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20660378855180106, 0.18834580867213868, 0.17579218048408696, 0.1999369180904158, 0.17740226273796744, 0.18870871771519515, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.026218735074649557, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.13938769019591324, 0.1221695216980635, 0.12012397640755013, 0.1387155273583558, 0.13721084259603444, 0.11030022426031716, 0.145666792236392, 0.1407654513585458, 0.12127805783360124, 0.16082493090743066, 0.14934015062476735, 0.1667976334561032, 0.15870518443591952, 0.1525413158615342, 0.16221177950426824, 0.15127901597955062, 0.17353063573099226, 0.140564590258355, 0.09989989921586839, 0.08910270045930069, 0.10716210774176638, 0.09500120273374746, 0.11444150503280293, 0.10109362614848993, 0.09812208369943642, 0.12245915313657973, 0.11048386500105822, 0.12991170131181373, 0.14673390258327834, 0.14036465663538056, 0.14711678499612058, 0.1316881543130981, 0.14784841317392816, 0.14262918755463816, 0.13455865692828484, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1292137181221228, 0.1605080055840883, 0.1580928823157255, 0.1513356545171608, 0.1353744901740942, 0.12036755225168105, 0.14557321055036465, 0.14444836304044384, 0.15294909362803888, 0.1405973198872802, 0.13406252454194778, 0.1335493985489944, 0.11958253901542626, 0.11993534616826074, 0.1367504112204837, 0.1599982964472325, 0.15654142794851122, 0.12851294197279117, 0.172875152217277, 0.1838500235340288, 0.17095535428939734, 0.1830669643680215, 0.20542241061462851, 0.17407183010378124, 0.17231902629286722, 0.18779175869155684, 0.2000557947309477, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "f5e97223-59ad-4ff9-a65f-cac8d6a7ef69", "solution": "import numpy as np\n\nclass EnhancedMultiPhaseEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            mutant = x + step_size * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            diversity = np.std(population)\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = adaptive_mutation(x, F, diversity, cost_function(x))\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                if np.random.rand() < 0.1:\n                    population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedMultiPhaseEvolutionaryHybridHarmonySearch", "description": "Improving diversity maintenance and adaptive mutation control by incorporating a self-adaptive mechanism for mutation step size adjustment based on individual performance and enhancing exploration through a dynamic boundary adjustment.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cae4b22-5365-4f4f-800b-982b82e14e3c", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.15400264008777975, 0.16485052096657127, 0.15906138340069975, 0.1626934574080704, 0.1394327624586822, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9790169256427225, 0.9973029429715151, 0.9993008272268011, 0.9832614647480635, 0.9909458209516089, 0.9823705036346329, 0.9831680706218727, 0.9832383452640744, 0.995032158880771, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.11264553172146008, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 9.999999999998899e-05, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20660378855180106, 0.18834580867213868, 0.17579218048408696, 0.1999369180904158, 0.17740226273796744, 0.18870871771519515, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.026218735074649557, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.13938769019591324, 0.1221695216980635, 0.12012397640755013, 0.1387155273583558, 0.13721084259603444, 0.11030022426031716, 0.145666792236392, 0.1407654513585458, 0.12127805783360124, 0.16082493090743066, 0.14934015062476735, 0.1667976334561032, 0.15870518443591952, 0.1525413158615342, 0.16221177950426824, 0.15127901597955062, 0.17353063573099226, 0.140564590258355, 0.09989989921586839, 0.08910270045930069, 0.10716210774176638, 0.09500120273374746, 0.11444150503280293, 0.10109362614848993, 0.09812208369943642, 0.12245915313657973, 0.11048386500105822, 0.12991170131181373, 0.14673390258327834, 0.14036465663538056, 0.14711678499612058, 0.1316881543130981, 0.14784841317392816, 0.14262918755463816, 0.13455865692828484, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1292137181221228, 0.1605080055840883, 0.1580928823157255, 0.1513356545171608, 0.1353744901740942, 0.12036755225168105, 0.14557321055036465, 0.14444836304044384, 0.15294909362803888, 0.1405973198872802, 0.13406252454194778, 0.1335493985489944, 0.11958253901542626, 0.11993534616826074, 0.1367504112204837, 0.1599982964472325, 0.15654142794851122, 0.12851294197279117, 0.172875152217277, 0.1838500235340288, 0.17095535428939734, 0.1830669643680215, 0.20542241061462851, 0.17407183010378124, 0.17231902629286722, 0.18779175869155684, 0.2000557947309477, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "4a334290-5bac-4f44-9d6d-a6a7bfd0455a", "solution": "import numpy as np\n\nclass EnhancedMultiPhaseEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            mutant = x + step_size * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            diversity = np.std(population)\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = adaptive_mutation(x, F, diversity, cost_function(x))\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                if np.random.rand() < 0.1:\n                    population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedMultiPhaseEvolutionaryHybridHarmonySearch", "description": "Improving diversity maintenance and adaptive mutation control by incorporating a self-adaptive mechanism for mutation step size adjustment based on individual performance and enhancing exploration through a dynamic boundary adjustment.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cae4b22-5365-4f4f-800b-982b82e14e3c", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.15400264008777975, 0.16485052096657127, 0.15906138340069975, 0.1626934574080704, 0.1394327624586822, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9790169256427225, 0.9973029429715151, 0.9993008272268011, 0.9832614647480635, 0.9909458209516089, 0.9823705036346329, 0.9831680706218727, 0.9832383452640744, 0.995032158880771, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.11264553172146008, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 9.999999999998899e-05, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20660378855180106, 0.18834580867213868, 0.17579218048408696, 0.1999369180904158, 0.17740226273796744, 0.18870871771519515, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.026218735074649557, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.13938769019591324, 0.1221695216980635, 0.12012397640755013, 0.1387155273583558, 0.13721084259603444, 0.11030022426031716, 0.145666792236392, 0.1407654513585458, 0.12127805783360124, 0.16082493090743066, 0.14934015062476735, 0.1667976334561032, 0.15870518443591952, 0.1525413158615342, 0.16221177950426824, 0.15127901597955062, 0.17353063573099226, 0.140564590258355, 0.09989989921586839, 0.08910270045930069, 0.10716210774176638, 0.09500120273374746, 0.11444150503280293, 0.10109362614848993, 0.09812208369943642, 0.12245915313657973, 0.11048386500105822, 0.12991170131181373, 0.14673390258327834, 0.14036465663538056, 0.14711678499612058, 0.1316881543130981, 0.14784841317392816, 0.14262918755463816, 0.13455865692828484, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1292137181221228, 0.1605080055840883, 0.1580928823157255, 0.1513356545171608, 0.1353744901740942, 0.12036755225168105, 0.14557321055036465, 0.14444836304044384, 0.15294909362803888, 0.1405973198872802, 0.13406252454194778, 0.1335493985489944, 0.11958253901542626, 0.11993534616826074, 0.1367504112204837, 0.1599982964472325, 0.15654142794851122, 0.12851294197279117, 0.172875152217277, 0.1838500235340288, 0.17095535428939734, 0.1830669643680215, 0.20542241061462851, 0.17407183010378124, 0.17231902629286722, 0.18779175869155684, 0.2000557947309477, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "2d9cbb42-5246-44b2-89eb-8980328bbdd9", "solution": "import numpy as np\n\nclass EnhancedMultiPhaseEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            mutant = x + step_size * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            diversity = np.std(population)\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = adaptive_mutation(x, F, diversity, cost_function(x))\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                if np.random.rand() < 0.1:\n                    population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                # Introduce dynamic mutation scaling based on diversity and fitness evaluation\n                diversity_factor = 1 + 0.1 * np.random.randn()\n                F_adapt *= diversity_factor\n                F_adapt = np.clip(F_adapt, F_lower, F_upper)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedMultiPhaseEvolutionaryHybridHarmonySearch", "description": "Introducing dynamic mutation scaling based on diversity and fitness evaluation to enhance exploration and exploitation.", "configspace": "", "generation": 56, "fitness": 0.11784880351584989, "feedback": "The algorithm EnhancedMultiPhaseEvolutionaryHybridHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "0cae4b22-5365-4f4f-800b-982b82e14e3c", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.1539666791903357, 0.16485052096657127, 0.15906138340069975, 0.1626934574080704, 0.1394327624586822, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.8965815529489285, 0.9538166858028375, 0.988883256941832, 0.997587047463907, 0.9833148031423219, 0.976529220415598, 0.9911150838566427, 0.9562571103021376, 0.986322740345782, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03307350159540945, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.13745532985939135, 0.08978602851270656, 0.08299744133218068, 0.1126317008225034, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 0.000621692212285363, 0.048107652755784325, 0.008739439801401239, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.02826963379566294, 0.036241743907918456, 0.013145577149220489, 0.03037949715314825, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.206592394101607, 0.18834580867213868, 0.17579218048408696, 0.1999369180904158, 0.17740782019750567, 0.18872693357779957, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03517062386028735, 0.033519659588494344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.037718617788130904, 0.03149234042422633, 0.04231214916752091, 0.1357605418423593, 0.11684019351128772, 0.12468644905083093, 0.1387155273583558, 0.13738515034989518, 0.11645276657330961, 0.1457126721956098, 0.1409840270054299, 0.12064979087471217, 0.16401888207392767, 0.15111172026884978, 0.1667976334561032, 0.15870518443591952, 0.1525413158615342, 0.1622672876036857, 0.15127901597955062, 0.17353063573099226, 0.14054305037889958, 0.09989989921586839, 0.08910116385918976, 0.10718201494881163, 0.09500120273374746, 0.11444150503280293, 0.10111588455339349, 0.09812208369943642, 0.1224552636388464, 0.11049662810105365, 0.12991170131181373, 0.14674470707490128, 0.14036465663538056, 0.14711678499612058, 0.1316881543130981, 0.14784841317392816, 0.14262918755463816, 0.13468024012148583, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1263313591301417, 0.16132419506672868, 0.1581859790819442, 0.1513356545171608, 0.1437449149047072, 0.12036649639555796, 0.14557321055036465, 0.14444836304044384, 0.15308979436051373, 0.1405973198872802, 0.13406252454194778, 0.13348704823630742, 0.11958253901542626, 0.11993531585963524, 0.1367504112204837, 0.15917475115975266, 0.1546121049799314, 0.1310872960758197, 0.1928222049858852, 0.1916468043815992, 0.18215460124393135, 0.18242295907155126, 0.20709074139139316, 0.17801229835900323, 0.17284223142751054, 0.17343628275619338, 0.20077425310854802, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "9ca9ae81-727d-4a9d-8a47-10ee5cf22cf0", "solution": "import numpy as np\n\nclass EnhancedMultiPhaseEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            mutant = x + step_size * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            diversity = np.std(population)\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = adaptive_mutation(x, F, diversity, cost_function(x))\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                if np.random.rand() < 0.1:\n                    population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                # Introducing Differential Evolution\n                CR = 0.9 - 0.8 * _ / self.budget\n                candidate = population[np.random.choice(range(self.budget))]\n                donor = population[np.random.choice(range(self.budget))]\n                mutant_de = x + F * (candidate - donor)\n                trial_de = crossover(x, mutant_de, CR)\n                if cost_function(trial_de) < cost_function(x):\n                    population[i] = trial_de\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedMultiPhaseEvolutionaryHybridHarmonySearch", "description": "Incorporating a differential evolution strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 57, "fitness": 0.11722625915498457, "feedback": "The algorithm EnhancedMultiPhaseEvolutionaryHybridHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "0cae4b22-5365-4f4f-800b-982b82e14e3c", "metadata": {"aucs": [0.1659126210533579, 0.1692803308278833, 0.14958591959230505, 0.15381701568050354, 0.14566073943341185, 0.14584002023411435, 0.15156440424978246, 0.1367788239131924, 0.1397304709416909, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03435888346474658, 0.04130474018723229, 0.038037701485210906, 0.035746650858779816, 0.03152539927415188, 0.039631506884449164, 0.037388335219869395, 0.04873313933764167, 0.037386782590667855, 0.021704596332602022, 0.016802028254162882, 0.025828404059999976, 0.041662612568617474, 0.018009232195048575, 0.04257862736030493, 0.03028381004978309, 0.01670498952861288, 0.022855831779206692, 0.9007110204657508, 0.9970406963092296, 0.9717426379434138, 0.9823507712777538, 0.9867422154515062, 0.9779502827819674, 0.9966081047986478, 0.9975889940564623, 0.991769334477041, 0.06214619189219717, 0.05969093785545465, 0.09687627191486936, 0.042146441181373895, 0.059889772497004556, 0.05110702399668876, 0.0922977967409615, 0.04013702205082681, 0.08457404027954107, 0.11912068637111684, 0.17798543316657212, 0.12761739897805857, 0.1068389142134798, 0.0787903142574583, 0.10502608467296848, 0.08532873441112698, 0.13029887060375656, 0.09812630498590058, 9.999999999998899e-05, 9.999999999998899e-05, 0.0021898094392898138, 0.019014710179107497, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.007554395424840599, 9.999999999998899e-05, 0.02664257693716021, 9.999999999998899e-05, 9.999999999998899e-05, 0.030170007980302005, 0.00229918073672275, 0.0166960589135855, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0020021557479896757, 0.0591037071417273, 0.05721787724446037, 0.04228772971277517, 0.03290483335773409, 0.016713034093251755, 9.999999999998899e-05, 0.026382498323849313, 0.006508247030618808, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.19760847149971572, 0.18389908418349765, 0.17375282897702693, 0.19706783336624412, 0.1702765117004985, 0.1862791891205069, 0.1892384659714157, 0.19850327458896444, 0.18062430205191726, 0.029976588366424584, 0.03398647390614118, 0.023227247541539153, 0.032231122671891876, 0.026516180045888738, 0.035551718524415854, 0.0525849482220343, 0.02414445506812879, 0.038459102529883604, 0.13534387114288893, 0.12881093133680677, 0.1292822872835876, 0.13681982539562598, 0.13732878159182016, 0.1113539897755832, 0.1426484090962804, 0.13765854390915466, 0.11543620167873292, 0.1557503980212699, 0.14659973949759564, 0.16553884913597505, 0.15727833847161732, 0.14894462234596118, 0.15981698869296956, 0.14749505915331917, 0.1732965093244042, 0.15256560547703357, 0.10385613015825712, 0.09370201629340047, 0.10325813167874154, 0.10067808576690862, 0.1091574645106621, 0.10929187991864986, 0.09473779905433, 0.12126515343134703, 0.10004472884241644, 0.1294262670860118, 0.13305626184861685, 0.13851045383861915, 0.14500640645133156, 0.12935430386901248, 0.15260261695274202, 0.15902206348287362, 0.13426236687479198, 0.18449215706629152, 0.11490868876814098, 0.13023869481427064, 0.13406346969467597, 0.1528933767041012, 0.14456084420029824, 0.12778625716311398, 0.12017909355828793, 0.11780908531021628, 0.15573183584475514, 0.19064887743239256, 0.15479704741073597, 0.1533561500403381, 0.1493600505812327, 0.13223455044127563, 0.14564192466551318, 0.1319496425575979, 0.1256700759138556, 0.14908008525078364, 0.15708799975660737, 0.11006144104513371, 0.1294617961110467, 0.13174967944114646, 0.11038222508493511, 0.15543839567408635, 0.15597147477616147, 0.14838684426631155, 0.11516401896225748, 0.17187631519651914, 0.18245760902917918, 0.16565719047698346, 0.1826851505801972, 0.20178330957723578, 0.17602031490156422, 0.17024743258067498, 0.17233949608353216, 0.19484369660710366, 0.036468889150671036, 0.048169028257631696, 0.06038911254354584, 0.046945178295129564, 0.05698495842402229, 0.04504839919150294, 0.06325097908702881, 0.053978721671165464, 0.03778879631007004]}, "mutation_prompt": null}
{"id": "02873e7f-af98-4753-a67b-5f2cfafc91c5", "solution": "import numpy as np\n\nclass EnhancedMultiPhaseEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            mutant = x + step_size * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            diversity = np.std(population)\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = adaptive_mutation(x, F, diversity, cost_function(x))\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                if np.random.rand() < 0.1:\n                    population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedMultiPhaseEvolutionaryHybridHarmonySearch", "description": "Improving diversity maintenance and adaptive mutation control by incorporating a self-adaptive mechanism for mutation step size adjustment based on individual performance and enhancing exploration through a dynamic boundary adjustment.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cae4b22-5365-4f4f-800b-982b82e14e3c", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.15400264008777975, 0.16485052096657127, 0.15906138340069975, 0.1626934574080704, 0.1394327624586822, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9790169256427225, 0.9973029429715151, 0.9993008272268011, 0.9832614647480635, 0.9909458209516089, 0.9823705036346329, 0.9831680706218727, 0.9832383452640744, 0.995032158880771, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.11264553172146008, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 9.999999999998899e-05, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20660378855180106, 0.18834580867213868, 0.17579218048408696, 0.1999369180904158, 0.17740226273796744, 0.18870871771519515, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.026218735074649557, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.13938769019591324, 0.1221695216980635, 0.12012397640755013, 0.1387155273583558, 0.13721084259603444, 0.11030022426031716, 0.145666792236392, 0.1407654513585458, 0.12127805783360124, 0.16082493090743066, 0.14934015062476735, 0.1667976334561032, 0.15870518443591952, 0.1525413158615342, 0.16221177950426824, 0.15127901597955062, 0.17353063573099226, 0.140564590258355, 0.09989989921586839, 0.08910270045930069, 0.10716210774176638, 0.09500120273374746, 0.11444150503280293, 0.10109362614848993, 0.09812208369943642, 0.12245915313657973, 0.11048386500105822, 0.12991170131181373, 0.14673390258327834, 0.14036465663538056, 0.14711678499612058, 0.1316881543130981, 0.14784841317392816, 0.14262918755463816, 0.13455865692828484, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1292137181221228, 0.1605080055840883, 0.1580928823157255, 0.1513356545171608, 0.1353744901740942, 0.12036755225168105, 0.14557321055036465, 0.14444836304044384, 0.15294909362803888, 0.1405973198872802, 0.13406252454194778, 0.1335493985489944, 0.11958253901542626, 0.11993534616826074, 0.1367504112204837, 0.1599982964472325, 0.15654142794851122, 0.12851294197279117, 0.172875152217277, 0.1838500235340288, 0.17095535428939734, 0.1830669643680215, 0.20542241061462851, 0.17407183010378124, 0.17231902629286722, 0.18779175869155684, 0.2000557947309477, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "6bb776ff-8c73-4cb0-ae4e-1c7e943f5b1f", "solution": "import numpy as np\n\nclass EnhancedMultiPhaseEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval, population):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            mutants = [population[np.random.randint(self.budget)] for _ in range(3)]\n            mutant = x + F * np.mean(mutants, axis=0) - x\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            diversity = np.std(population)\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = adaptive_mutation(x, F, diversity, cost_function(x), population)\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                if np.random.rand() < 0.1:\n                    population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedMultiPhaseEvolutionaryHybridHarmonySearch", "description": "Integrating a novel adaptive diversification strategy using a differential evolution approach to enhance population diversity and improve convergence speed.", "configspace": "", "generation": 59, "fitness": 0.09283778569318162, "feedback": "The algorithm EnhancedMultiPhaseEvolutionaryHybridHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "0cae4b22-5365-4f4f-800b-982b82e14e3c", "metadata": {"aucs": [0.16851973655433305, 0.18408830124252717, 0.17009872891306554, 0.15405902127089632, 0.16485511578117307, 0.1589858599426296, 0.16273297973289214, 0.1397989444405643, 0.14882899268798033, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03943720741972756, 0.04293236609179263, 0.03377237275751355, 0.035570768422669596, 0.03424649464287921, 0.03559272547187042, 0.04307210482584256, 0.05445470516326456, 0.04465656861857947, 0.027599435446784115, 0.03535793640802398, 0.033770220947572316, 0.01969646754387211, 0.037824261573522366, 0.047722498204528674, 0.03353613547250134, 0.03199154277616234, 0.028548488951571693, 0.06627008772211107, 0.066812700502909, 0.07658319026970528, 0.07649606173581669, 0.07940608740585997, 0.07525896959157452, 0.07832712810775644, 0.07352620179891678, 0.07734145785707802, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.060799016498146785, 0.061119150221252694, 0.052641227550559555, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.15935364295963006, 0.19049602706176483, 0.16855603467349978, 0.08978602851270656, 0.08299744133218068, 0.11272507126159403, 0.08775404212311477, 0.10611071494075475, 0.1037062884181853, 9.999999999998899e-05, 0.16050316471234405, 9.999999999998899e-05, 0.0010138900023366482, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 0.0940995665554285, 0.1234012418781193, 0.09824250750304386, 0.101100419284611, 0.09587565231645079, 0.10869635107258091, 0.09062744229021502, 0.10851150627046824, 0.09900287650701012, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027029044925757306, 0.06343546399841216, 0.05359097462076656, 0.05791970543944425, 0.039115748283791385, 0.0461594012103933, 0.019694778649001043, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20901578911518115, 0.1884310379494213, 0.17579218048408696, 0.20018167493281946, 0.18042103346434346, 0.18947819039857683, 0.20895794489420338, 0.19016956974417398, 0.1925126275947503, 0.025816910901456658, 0.03499033382125216, 0.02530778734618344, 0.032762137336578734, 0.034365685239290955, 0.04024563935222558, 0.040497934616969156, 0.037890456594420585, 0.04301193424401195, 0.1365172807411985, 0.15420850983669154, 0.14173007617569255, 0.13872336365796767, 0.14126548031156927, 0.1229325746827471, 0.1469728965588838, 0.14595639247735293, 0.15139421338257275, 0.16192437644010593, 0.15034293326269055, 0.1668305593739442, 0.18627073270630656, 0.18514937664053788, 0.18043970685998234, 0.15166881074417893, 0.17359624306125565, 0.14344854268527873, 0.1001324252974296, 0.08950799206836602, 0.10717961417699995, 0.12980876974415312, 0.13567079129054094, 0.12989818168261846, 0.09812386148043684, 0.12250388208882868, 0.11186832243570077, 0.20802095003243015, 0.1901797972317102, 0.20926144895646004, 0.2041565462911139, 0.19517355182635587, 0.1873644032756453, 0.21989426303795812, 0.2094398625671795, 0.20699098199083465, 0.15366071123702696, 0.14185476916745743, 0.14660839934790004, 0.157247377221977, 0.14884389729416547, 0.14842646530915649, 0.1507419027404585, 0.1404581092654693, 0.15890532503478294, 0.14400774895681734, 0.1634872124451895, 0.1591506777706545, 0.15164662615008073, 0.16768794732571002, 0.12644201893789575, 0.1609310148308608, 0.1511422863711428, 0.1530485259293315, 0.20828158567762634, 0.1401558026939439, 0.16780523922918167, 0.1510026122245064, 0.1880036636882858, 0.1367504112204837, 0.159528474745395, 0.16261502941679196, 0.11446922977851137, 0.17715015855841432, 0.184076480484613, 0.17262453999005278, 0.18277842239501063, 0.2076731058503759, 0.17098203995065686, 0.1766725285874874, 0.17937690398721917, 0.20021692880859632, 0.0688048942924111, 0.06230522540912664, 0.0635413573030208, 0.06226053154267808, 0.0845958467891218, 0.06513667447468363, 0.07148610734312966, 0.06141678503870385, 0.06714855689444943]}, "mutation_prompt": null}
{"id": "668fa95e-4452-4f34-ae27-2b894b53256c", "solution": "import numpy as np\n\nclass EnhancedMultiPhaseEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            mutant = x + step_size * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            diversity = np.std(population)\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = adaptive_mutation(x, F, diversity, cost_function(x))\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                if np.random.rand() < 0.1:\n                    population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedMultiPhaseEvolutionaryHybridHarmonySearch", "description": "Improving diversity maintenance and adaptive mutation control by incorporating a self-adaptive mechanism for mutation step size adjustment based on individual performance and enhancing exploration through a dynamic boundary adjustment.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cae4b22-5365-4f4f-800b-982b82e14e3c", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.15400264008777975, 0.16485052096657127, 0.15906138340069975, 0.1626934574080704, 0.1394327624586822, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9790169256427225, 0.9973029429715151, 0.9993008272268011, 0.9832614647480635, 0.9909458209516089, 0.9823705036346329, 0.9831680706218727, 0.9832383452640744, 0.995032158880771, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.11264553172146008, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 9.999999999998899e-05, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20660378855180106, 0.18834580867213868, 0.17579218048408696, 0.1999369180904158, 0.17740226273796744, 0.18870871771519515, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.026218735074649557, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.13938769019591324, 0.1221695216980635, 0.12012397640755013, 0.1387155273583558, 0.13721084259603444, 0.11030022426031716, 0.145666792236392, 0.1407654513585458, 0.12127805783360124, 0.16082493090743066, 0.14934015062476735, 0.1667976334561032, 0.15870518443591952, 0.1525413158615342, 0.16221177950426824, 0.15127901597955062, 0.17353063573099226, 0.140564590258355, 0.09989989921586839, 0.08910270045930069, 0.10716210774176638, 0.09500120273374746, 0.11444150503280293, 0.10109362614848993, 0.09812208369943642, 0.12245915313657973, 0.11048386500105822, 0.12991170131181373, 0.14673390258327834, 0.14036465663538056, 0.14711678499612058, 0.1316881543130981, 0.14784841317392816, 0.14262918755463816, 0.13455865692828484, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1292137181221228, 0.1605080055840883, 0.1580928823157255, 0.1513356545171608, 0.1353744901740942, 0.12036755225168105, 0.14557321055036465, 0.14444836304044384, 0.15294909362803888, 0.1405973198872802, 0.13406252454194778, 0.1335493985489944, 0.11958253901542626, 0.11993534616826074, 0.1367504112204837, 0.1599982964472325, 0.15654142794851122, 0.12851294197279117, 0.172875152217277, 0.1838500235340288, 0.17095535428939734, 0.1830669643680215, 0.20542241061462851, 0.17407183010378124, 0.17231902629286722, 0.18779175869155684, 0.2000557947309477, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "cc1c9a70-56cc-4599-97c6-d6ebd7c26bb7", "solution": "import numpy as np\n\nclass EnhancedMultiPhaseEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            mutant = x + step_size * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            diversity = np.std(population)\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = adaptive_mutation(x, F, diversity, cost_function(x))\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                if np.random.rand() < 0.1:\n                    population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedMultiPhaseEvolutionaryHybridHarmonySearch", "description": "Improving diversity maintenance and adaptive mutation control by incorporating a self-adaptive mechanism for mutation step size adjustment based on individual performance and enhancing exploration through a dynamic boundary adjustment.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cae4b22-5365-4f4f-800b-982b82e14e3c", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.15400264008777975, 0.16485052096657127, 0.15906138340069975, 0.1626934574080704, 0.1394327624586822, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9790169256427225, 0.9973029429715151, 0.9993008272268011, 0.9832614647480635, 0.9909458209516089, 0.9823705036346329, 0.9831680706218727, 0.9832383452640744, 0.995032158880771, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.11264553172146008, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 9.999999999998899e-05, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20660378855180106, 0.18834580867213868, 0.17579218048408696, 0.1999369180904158, 0.17740226273796744, 0.18870871771519515, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.026218735074649557, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.13938769019591324, 0.1221695216980635, 0.12012397640755013, 0.1387155273583558, 0.13721084259603444, 0.11030022426031716, 0.145666792236392, 0.1407654513585458, 0.12127805783360124, 0.16082493090743066, 0.14934015062476735, 0.1667976334561032, 0.15870518443591952, 0.1525413158615342, 0.16221177950426824, 0.15127901597955062, 0.17353063573099226, 0.140564590258355, 0.09989989921586839, 0.08910270045930069, 0.10716210774176638, 0.09500120273374746, 0.11444150503280293, 0.10109362614848993, 0.09812208369943642, 0.12245915313657973, 0.11048386500105822, 0.12991170131181373, 0.14673390258327834, 0.14036465663538056, 0.14711678499612058, 0.1316881543130981, 0.14784841317392816, 0.14262918755463816, 0.13455865692828484, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1292137181221228, 0.1605080055840883, 0.1580928823157255, 0.1513356545171608, 0.1353744901740942, 0.12036755225168105, 0.14557321055036465, 0.14444836304044384, 0.15294909362803888, 0.1405973198872802, 0.13406252454194778, 0.1335493985489944, 0.11958253901542626, 0.11993534616826074, 0.1367504112204837, 0.1599982964472325, 0.15654142794851122, 0.12851294197279117, 0.172875152217277, 0.1838500235340288, 0.17095535428939734, 0.1830669643680215, 0.20542241061462851, 0.17407183010378124, 0.17231902629286722, 0.18779175869155684, 0.2000557947309477, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "999120ac-8040-41c4-ba6e-c61f193340c6", "solution": "import numpy as np\n\nclass EnhancedMultiPhaseEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            mutant = x + step_size * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            diversity = np.std(population)\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = adaptive_mutation(x, F, diversity, cost_function(x))\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                if np.random.rand() < 0.1:\n                    population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedMultiPhaseEvolutionaryHybridHarmonySearch", "description": "Improving diversity maintenance and adaptive mutation control by incorporating a self-adaptive mechanism for mutation step size adjustment based on individual performance and enhancing exploration through a dynamic boundary adjustment.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cae4b22-5365-4f4f-800b-982b82e14e3c", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.15400264008777975, 0.16485052096657127, 0.15906138340069975, 0.1626934574080704, 0.1394327624586822, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9790169256427225, 0.9973029429715151, 0.9993008272268011, 0.9832614647480635, 0.9909458209516089, 0.9823705036346329, 0.9831680706218727, 0.9832383452640744, 0.995032158880771, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.11264553172146008, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 9.999999999998899e-05, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20660378855180106, 0.18834580867213868, 0.17579218048408696, 0.1999369180904158, 0.17740226273796744, 0.18870871771519515, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.026218735074649557, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.13938769019591324, 0.1221695216980635, 0.12012397640755013, 0.1387155273583558, 0.13721084259603444, 0.11030022426031716, 0.145666792236392, 0.1407654513585458, 0.12127805783360124, 0.16082493090743066, 0.14934015062476735, 0.1667976334561032, 0.15870518443591952, 0.1525413158615342, 0.16221177950426824, 0.15127901597955062, 0.17353063573099226, 0.140564590258355, 0.09989989921586839, 0.08910270045930069, 0.10716210774176638, 0.09500120273374746, 0.11444150503280293, 0.10109362614848993, 0.09812208369943642, 0.12245915313657973, 0.11048386500105822, 0.12991170131181373, 0.14673390258327834, 0.14036465663538056, 0.14711678499612058, 0.1316881543130981, 0.14784841317392816, 0.14262918755463816, 0.13455865692828484, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1292137181221228, 0.1605080055840883, 0.1580928823157255, 0.1513356545171608, 0.1353744901740942, 0.12036755225168105, 0.14557321055036465, 0.14444836304044384, 0.15294909362803888, 0.1405973198872802, 0.13406252454194778, 0.1335493985489944, 0.11958253901542626, 0.11993534616826074, 0.1367504112204837, 0.1599982964472325, 0.15654142794851122, 0.12851294197279117, 0.172875152217277, 0.1838500235340288, 0.17095535428939734, 0.1830669643680215, 0.20542241061462851, 0.17407183010378124, 0.17231902629286722, 0.18779175869155684, 0.2000557947309477, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "bca5d83e-f04c-462a-b563-713c6ff1b844", "solution": "import numpy as np\n\nclass EnhancedMultiPhaseEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            mutant = x + step_size * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            diversity = np.std(population)\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = adaptive_mutation(x, F, diversity, cost_function(x))\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                if np.random.rand() < 0.1:\n                    population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedMultiPhaseEvolutionaryHybridHarmonySearch", "description": "Improving diversity maintenance and adaptive mutation control by incorporating a self-adaptive mechanism for mutation step size adjustment based on individual performance and enhancing exploration through a dynamic boundary adjustment.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cae4b22-5365-4f4f-800b-982b82e14e3c", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.15400264008777975, 0.16485052096657127, 0.15906138340069975, 0.1626934574080704, 0.1394327624586822, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9790169256427225, 0.9973029429715151, 0.9993008272268011, 0.9832614647480635, 0.9909458209516089, 0.9823705036346329, 0.9831680706218727, 0.9832383452640744, 0.995032158880771, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.11264553172146008, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 9.999999999998899e-05, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20660378855180106, 0.18834580867213868, 0.17579218048408696, 0.1999369180904158, 0.17740226273796744, 0.18870871771519515, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.026218735074649557, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.13938769019591324, 0.1221695216980635, 0.12012397640755013, 0.1387155273583558, 0.13721084259603444, 0.11030022426031716, 0.145666792236392, 0.1407654513585458, 0.12127805783360124, 0.16082493090743066, 0.14934015062476735, 0.1667976334561032, 0.15870518443591952, 0.1525413158615342, 0.16221177950426824, 0.15127901597955062, 0.17353063573099226, 0.140564590258355, 0.09989989921586839, 0.08910270045930069, 0.10716210774176638, 0.09500120273374746, 0.11444150503280293, 0.10109362614848993, 0.09812208369943642, 0.12245915313657973, 0.11048386500105822, 0.12991170131181373, 0.14673390258327834, 0.14036465663538056, 0.14711678499612058, 0.1316881543130981, 0.14784841317392816, 0.14262918755463816, 0.13455865692828484, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1292137181221228, 0.1605080055840883, 0.1580928823157255, 0.1513356545171608, 0.1353744901740942, 0.12036755225168105, 0.14557321055036465, 0.14444836304044384, 0.15294909362803888, 0.1405973198872802, 0.13406252454194778, 0.1335493985489944, 0.11958253901542626, 0.11993534616826074, 0.1367504112204837, 0.1599982964472325, 0.15654142794851122, 0.12851294197279117, 0.172875152217277, 0.1838500235340288, 0.17095535428939734, 0.1830669643680215, 0.20542241061462851, 0.17407183010378124, 0.17231902629286722, 0.18779175869155684, 0.2000557947309477, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "330b94ad-e1c2-45d3-854f-3f9a34a04c23", "solution": "import numpy as np\n\nclass EnhancedMultiPhaseEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            mutant = x + step_size * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            diversity = np.std(population)\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = adaptive_mutation(x, F, diversity, cost_function(x))\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                if np.random.rand() < 0.1:\n                    population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedMultiPhaseEvolutionaryHybridHarmonySearch", "description": "Improving diversity maintenance and adaptive mutation control by incorporating a self-adaptive mechanism for mutation step size adjustment based on individual performance and enhancing exploration through a dynamic boundary adjustment.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cae4b22-5365-4f4f-800b-982b82e14e3c", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.15400264008777975, 0.16485052096657127, 0.15906138340069975, 0.1626934574080704, 0.1394327624586822, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9790169256427225, 0.9973029429715151, 0.9993008272268011, 0.9832614647480635, 0.9909458209516089, 0.9823705036346329, 0.9831680706218727, 0.9832383452640744, 0.995032158880771, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.11264553172146008, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 9.999999999998899e-05, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20660378855180106, 0.18834580867213868, 0.17579218048408696, 0.1999369180904158, 0.17740226273796744, 0.18870871771519515, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.026218735074649557, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.13938769019591324, 0.1221695216980635, 0.12012397640755013, 0.1387155273583558, 0.13721084259603444, 0.11030022426031716, 0.145666792236392, 0.1407654513585458, 0.12127805783360124, 0.16082493090743066, 0.14934015062476735, 0.1667976334561032, 0.15870518443591952, 0.1525413158615342, 0.16221177950426824, 0.15127901597955062, 0.17353063573099226, 0.140564590258355, 0.09989989921586839, 0.08910270045930069, 0.10716210774176638, 0.09500120273374746, 0.11444150503280293, 0.10109362614848993, 0.09812208369943642, 0.12245915313657973, 0.11048386500105822, 0.12991170131181373, 0.14673390258327834, 0.14036465663538056, 0.14711678499612058, 0.1316881543130981, 0.14784841317392816, 0.14262918755463816, 0.13455865692828484, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1292137181221228, 0.1605080055840883, 0.1580928823157255, 0.1513356545171608, 0.1353744901740942, 0.12036755225168105, 0.14557321055036465, 0.14444836304044384, 0.15294909362803888, 0.1405973198872802, 0.13406252454194778, 0.1335493985489944, 0.11958253901542626, 0.11993534616826074, 0.1367504112204837, 0.1599982964472325, 0.15654142794851122, 0.12851294197279117, 0.172875152217277, 0.1838500235340288, 0.17095535428939734, 0.1830669643680215, 0.20542241061462851, 0.17407183010378124, 0.17231902629286722, 0.18779175869155684, 0.2000557947309477, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "307a5b7c-87db-4be0-96d0-75f0ac923966", "solution": "import numpy as np\n\nclass EnhancedMultiPhaseEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            mutant = x + step_size * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            diversity = np.std(population)\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = adaptive_mutation(x, F, diversity, cost_function(x))\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                if np.random.rand() < 0.1:\n                    population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedMultiPhaseEvolutionaryHybridHarmonySearch", "description": "Improving diversity maintenance and adaptive mutation control by incorporating a self-adaptive mechanism for mutation step size adjustment based on individual performance and enhancing exploration through a dynamic boundary adjustment.", "configspace": "", "generation": 49, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0cae4b22-5365-4f4f-800b-982b82e14e3c", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.15400264008777975, 0.16485052096657127, 0.15906138340069975, 0.1626934574080704, 0.1394327624586822, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9790169256427225, 0.9973029429715151, 0.9993008272268011, 0.9832614647480635, 0.9909458209516089, 0.9823705036346329, 0.9831680706218727, 0.9832383452640744, 0.995032158880771, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.11264553172146008, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 9.999999999998899e-05, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20660378855180106, 0.18834580867213868, 0.17579218048408696, 0.1999369180904158, 0.17740226273796744, 0.18870871771519515, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.026218735074649557, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.13938769019591324, 0.1221695216980635, 0.12012397640755013, 0.1387155273583558, 0.13721084259603444, 0.11030022426031716, 0.145666792236392, 0.1407654513585458, 0.12127805783360124, 0.16082493090743066, 0.14934015062476735, 0.1667976334561032, 0.15870518443591952, 0.1525413158615342, 0.16221177950426824, 0.15127901597955062, 0.17353063573099226, 0.140564590258355, 0.09989989921586839, 0.08910270045930069, 0.10716210774176638, 0.09500120273374746, 0.11444150503280293, 0.10109362614848993, 0.09812208369943642, 0.12245915313657973, 0.11048386500105822, 0.12991170131181373, 0.14673390258327834, 0.14036465663538056, 0.14711678499612058, 0.1316881543130981, 0.14784841317392816, 0.14262918755463816, 0.13455865692828484, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1292137181221228, 0.1605080055840883, 0.1580928823157255, 0.1513356545171608, 0.1353744901740942, 0.12036755225168105, 0.14557321055036465, 0.14444836304044384, 0.15294909362803888, 0.1405973198872802, 0.13406252454194778, 0.1335493985489944, 0.11958253901542626, 0.11993534616826074, 0.1367504112204837, 0.1599982964472325, 0.15654142794851122, 0.12851294197279117, 0.172875152217277, 0.1838500235340288, 0.17095535428939734, 0.1830669643680215, 0.20542241061462851, 0.17407183010378124, 0.17231902629286722, 0.18779175869155684, 0.2000557947309477, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "ddc13d70-156e-4965-a8ec-0506079fd33f", "solution": "import numpy as np\n\nclass EnhancedMultiPhaseEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval, mutation_prob):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            mutant = x + step_size * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            if np.random.rand() < mutation_prob:\n                return np.clip(mutant, -5.0, 5.0)\n            else:\n                return x\n\n        def update_mutation_prob(history, threshold):\n            return np.sum(history < threshold) / len(history)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        mutation_prob_history = []\n\n        for _ in range(self.budget):\n            diversity = np.std(population)\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = adaptive_mutation(x, F, diversity, cost_function(x), mutation_prob)\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                if np.random.rand() < 0.1:\n                    population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                mutation_prob = update_mutation_prob(mutation_prob_history, 0.5)\n                mutation_prob_history.append(np.random.rand())\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedMultiPhaseEvolutionaryHybridHarmonySearch", "description": "Introducing a dynamic adaptation of mutation probability based on local search history to enhance exploration and exploitation balance.", "configspace": "", "generation": 66, "fitness": -Infinity, "feedback": "An exception occurred: UnboundLocalError(\"local variable 'mutation_prob' referenced before assignment\").", "error": "UnboundLocalError(\"local variable 'mutation_prob' referenced before assignment\")", "parent_id": "0cae4b22-5365-4f4f-800b-982b82e14e3c", "metadata": {}, "mutation_prompt": null}
{"id": "315965af-5236-48b1-bbd3-cd316d3d413e", "solution": "import numpy as np\n\nclass EnhancedMultiPhaseEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            dist = np.linalg.norm(population - x, axis=1)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8) * np.min(dist)\n            mutant = x + step_size * (population[np.random.randint(self.budget)] - population[np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        population = np.random.uniform(-5.0, 5.0, (self.budget, self.dim))\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            diversity = np.std(population)\n            for i in range(self.budget):\n                x = population[i]\n                F = F_adapt + 0.1 * np.random.randn()\n                F = np.clip(F, F_lower, F_upper)\n\n                mutant = adaptive_mutation(x, F, diversity, cost_function(x))\n                trial = crossover(x, mutant, CR)\n                if cost_function(trial) < cost_function(x):\n                    population[i] = trial\n                else:\n                    population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                if np.random.rand() < 0.1:\n                    population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n        best_idx = np.argmin([cost_function(x) for x in population])\n        best_solution = population[best_idx]\n\n        return best_solution", "name": "EnhancedMultiPhaseEvolutionaryHybridHarmonySearch", "description": "Enhancing population diversity by incorporating a novel diversity-based mutation operator that dynamically adjusts mutation step sizes based on the distance between individuals.", "configspace": "", "generation": 67, "fitness": 0.07981569288363734, "feedback": "The algorithm EnhancedMultiPhaseEvolutionaryHybridHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.08 with standard deviation 0.06.", "error": "", "parent_id": "0cae4b22-5365-4f4f-800b-982b82e14e3c", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.1539666791903357, 0.16485052096657127, 0.15895233292401567, 0.16268879234922262, 0.1394327624586822, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.06627008772211107, 0.06681197977842457, 0.07658319026970528, 0.07649533299022915, 0.07940608740585997, 0.07525896959157452, 0.07832626347259575, 0.07352620179891678, 0.07734145785707802, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.1126317008225034, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 9.999999999998899e-05, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2065901113042089, 0.18834580867213868, 0.17579218048408696, 0.1999369180904158, 0.17740226273796744, 0.18869028876902638, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.1352067457754409, 0.11516365404714635, 0.11795695037128229, 0.1387155273583558, 0.13721084259603444, 0.1097355930509093, 0.145666792236392, 0.14065903363721466, 0.11739468264674835, 0.1606069339743006, 0.14930042609085925, 0.1667976334561032, 0.15870518443591952, 0.15253174936598612, 0.16219816198597414, 0.15127901597955062, 0.17353063573099226, 0.14047736335456307, 0.09989989921586839, 0.08910116385918976, 0.10716210774176638, 0.09500120273374746, 0.11432659763482012, 0.10109362614848993, 0.09812208369943642, 0.12244929523955983, 0.11047114970772398, 0.12991170131181373, 0.1467272681078131, 0.14036465663538056, 0.14711678499612058, 0.1316881543130981, 0.14784841317392816, 0.14262918755463816, 0.1345553064938575, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1253386609536803, 0.16049072535632225, 0.1580928823157255, 0.1513356545171608, 0.13537345295724312, 0.12035742854989107, 0.14557321055036465, 0.14444836304044384, 0.15294909362803888, 0.1400986269807849, 0.13406252454194778, 0.13348704823630742, 0.1195820390294009, 0.11993531585963524, 0.1367504112204837, 0.15810863249052032, 0.15459622979309096, 0.10833417730993056, 0.16323453923992692, 0.18297812867283236, 0.1679679949868309, 0.18169452842091738, 0.20197928114519936, 0.16896571707373476, 0.17165293653672054, 0.17292991187226925, 0.20002012489960708, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "6bdf6984-857e-4b9c-bf72-efbe95e7cbb0", "solution": "import numpy as np\n\nclass EnhancedMultiSwarmEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval, population):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            swarm_idx = np.random.randint(0, len(population))\n            mutant = x + step_size * (population[swarm_idx][np.random.randint(self.budget)] - population[swarm_idx][np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        num_swarms = 5\n        populations = [np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) for _ in range(num_swarms)]\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            for swarm_idx in range(num_swarms):\n                population = populations[swarm_idx]\n                diversity = np.std(population)\n                for i in range(self.budget):\n                    x = population[i]\n                    F = F_adapt + 0.1 * np.random.randn()\n                    F = np.clip(F, F_lower, F_upper)\n\n                    mutant = adaptive_mutation(x, F, diversity, cost_function(x), populations)\n                    trial = crossover(x, mutant, CR)\n                    if cost_function(trial) < cost_function(x):\n                        population[i] = trial\n                    else:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                    if np.random.rand() < 0.1:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n            # Information exchange among swarms\n            for i in range(num_swarms):\n                exchange_swarm = np.random.choice([x for x in range(num_swarms) if x != i])\n                exchange_idx = np.random.randint(self.budget)\n                populations[i][exchange_idx] = populations[exchange_swarm][exchange_idx]\n\n        all_populations = np.concatenate(populations)\n        best_idx = np.argmin([cost_function(x) for x in all_populations])\n        best_solution = all_populations[best_idx]\n\n        return best_solution", "name": "EnhancedMultiSwarmEvolutionaryHybridHarmonySearch", "description": "Enhancing exploration by adding a multi-swarm approach with information exchange among swarms.", "configspace": "", "generation": 68, "fitness": 0.11835265432041353, "feedback": "The algorithm EnhancedMultiSwarmEvolutionaryHybridHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "0cae4b22-5365-4f4f-800b-982b82e14e3c", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.1539666791903357, 0.16487638146265782, 0.15900466267637314, 0.16268879234922262, 0.14012639330576426, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9799482781666569, 0.9981876031868977, 0.9871873280142246, 0.9484714233945116, 0.9823963435962645, 0.9719957965241044, 0.9930367189994146, 0.9819667284685399, 0.9925756949855238, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.1126317008225034, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 0.0036993686210942123, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20661064307109722, 0.1883461228120139, 0.17579218048408696, 0.1999369180904158, 0.17740879973320867, 0.1886924430605572, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.1357003554125198, 0.13254231323392418, 0.12145920009434463, 0.1387155273583558, 0.13730945121854765, 0.11676002731246482, 0.14568463264249076, 0.14092241483279122, 0.1280848478480342, 0.16124902965938548, 0.1561022183367471, 0.1667976334561032, 0.15870518443591952, 0.15270193456849246, 0.16220190241581622, 0.15127901597955062, 0.17353063573099226, 0.14047736335456307, 0.09989989921586839, 0.09605678983869381, 0.10716210774176638, 0.09500120273374746, 0.11436419551271415, 0.10109741643996695, 0.09812208369943642, 0.12244929523955983, 0.11052532239009139, 0.12992706471991533, 0.1467272681078131, 0.14036568773983238, 0.14711678499612058, 0.1316881543130981, 0.14785057622912734, 0.14262918755463816, 0.1345553064938575, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1255248242688627, 0.16060621107131812, 0.1580928823157255, 0.1513356545171608, 0.13537433152013767, 0.12036266907687043, 0.14578479676063294, 0.14444836304044384, 0.15294909362803888, 0.14009870570354033, 0.13406252454194778, 0.13348704823630742, 0.1195820390294009, 0.11993531585963524, 0.1367504112204837, 0.1607166036882618, 0.15477518177534966, 0.15949139283849112, 0.17819544829146072, 0.18313405177858655, 0.1790753712443215, 0.18195578656271294, 0.20685162527407042, 0.17326035481618252, 0.17275383773212727, 0.18082168665376164, 0.20059152152077075, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "0d11ff7a-e2d3-44d5-b0c6-09a461baa705", "solution": "import numpy as np\n\nclass EnhancedMultiSwarmEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval, population):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            swarm_idx = np.random.randint(0, len(population))\n            mutant = x + step_size * (population[swarm_idx][np.random.randint(self.budget)] - population[swarm_idx][np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        num_swarms = 5\n        populations = [np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) for _ in range(num_swarms)]\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            for swarm_idx in range(num_swarms):\n                population = populations[swarm_idx]\n                diversity = np.std(population)\n                for i in range(self.budget):\n                    x = population[i]\n                    F = F_adapt + 0.1 * np.random.randn()\n                    F = np.clip(F, F_lower, F_upper)\n\n                    mutant = adaptive_mutation(x, F, diversity, cost_function(x), populations)\n                    trial = crossover(x, mutant, CR)\n                    if cost_function(trial) < cost_function(x):\n                        population[i] = trial\n                    else:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                    if np.random.rand() < 0.1:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n            # Information exchange among swarms\n            for i in range(num_swarms):\n                exchange_swarm = np.random.choice([x for x in range(num_swarms) if x != i])\n                exchange_idx = np.random.randint(self.budget)\n                populations[i][exchange_idx] = populations[exchange_swarm][exchange_idx]\n\n        all_populations = np.concatenate(populations)\n        best_idx = np.argmin([cost_function(x) for x in all_populations])\n        best_solution = all_populations[best_idx]\n\n        return best_solution", "name": "EnhancedMultiSwarmEvolutionaryHybridHarmonySearch", "description": "Enhancing exploration by adding a multi-swarm approach with information exchange among swarms.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6bdf6984-857e-4b9c-bf72-efbe95e7cbb0", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.1539666791903357, 0.16487638146265782, 0.15900466267637314, 0.16268879234922262, 0.14012639330576426, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9799482781666569, 0.9981876031868977, 0.9871873280142246, 0.9484714233945116, 0.9823963435962645, 0.9719957965241044, 0.9930367189994146, 0.9819667284685399, 0.9925756949855238, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.1126317008225034, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 0.0036993686210942123, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20661064307109722, 0.1883461228120139, 0.17579218048408696, 0.1999369180904158, 0.17740879973320867, 0.1886924430605572, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.1357003554125198, 0.13254231323392418, 0.12145920009434463, 0.1387155273583558, 0.13730945121854765, 0.11676002731246482, 0.14568463264249076, 0.14092241483279122, 0.1280848478480342, 0.16124902965938548, 0.1561022183367471, 0.1667976334561032, 0.15870518443591952, 0.15270193456849246, 0.16220190241581622, 0.15127901597955062, 0.17353063573099226, 0.14047736335456307, 0.09989989921586839, 0.09605678983869381, 0.10716210774176638, 0.09500120273374746, 0.11436419551271415, 0.10109741643996695, 0.09812208369943642, 0.12244929523955983, 0.11052532239009139, 0.12992706471991533, 0.1467272681078131, 0.14036568773983238, 0.14711678499612058, 0.1316881543130981, 0.14785057622912734, 0.14262918755463816, 0.1345553064938575, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1255248242688627, 0.16060621107131812, 0.1580928823157255, 0.1513356545171608, 0.13537433152013767, 0.12036266907687043, 0.14578479676063294, 0.14444836304044384, 0.15294909362803888, 0.14009870570354033, 0.13406252454194778, 0.13348704823630742, 0.1195820390294009, 0.11993531585963524, 0.1367504112204837, 0.1607166036882618, 0.15477518177534966, 0.15949139283849112, 0.17819544829146072, 0.18313405177858655, 0.1790753712443215, 0.18195578656271294, 0.20685162527407042, 0.17326035481618252, 0.17275383773212727, 0.18082168665376164, 0.20059152152077075, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "7c56893e-48a9-48dd-8c2c-241dbf534831", "solution": "import numpy as np\n\nclass EnhancedMultiSwarmEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def differential_mutation(a, b, c, F):\n            return a + F * (b - c)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval, population):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            swarm_idx = np.random.randint(0, len(population))\n            mutant = differential_mutation(x, population[swarm_idx][np.random.randint(self.budget)], population[swarm_idx][np.random.randint(self.budget)], step_size)\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        num_swarms = 5\n        populations = [np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) for _ in range(num_swarms)]\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            for swarm_idx in range(num_swarms):\n                population = populations[swarm_idx]\n                diversity = np.std(population)\n                for i in range(self.budget):\n                    x = population[i]\n                    F = F_adapt + 0.1 * np.random.randn()\n                    F = np.clip(F, F_lower, F_upper)\n\n                    mutant = adaptive_mutation(x, F, diversity, cost_function(x), populations)\n                    trial = crossover(x, mutant, CR)\n                    if cost_function(trial) < cost_function(x):\n                        population[i] = trial\n                    else:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                    if np.random.rand() < 0.1:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n            # Information exchange among swarms\n            for i in range(num_swarms):\n                exchange_swarm = np.random.choice([x for x in range(num_swarms) if x != i])\n                exchange_idx = np.random.randint(self.budget)\n                populations[i][exchange_idx] = populations[exchange_swarm][exchange_idx]\n\n        all_populations = np.concatenate(populations)\n        best_idx = np.argmin([cost_function(x) for x in all_populations])\n        best_solution = all_populations[best_idx]\n\n        return best_solution", "name": "EnhancedMultiSwarmEvolutionaryHybridHarmonySearch", "description": "Enhancing evolutionary strategy by incorporating a differential evolution mutation scheme for improved exploration and exploitation.", "configspace": "", "generation": 70, "fitness": 0.11835265432041353, "feedback": "The algorithm EnhancedMultiSwarmEvolutionaryHybridHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "6bdf6984-857e-4b9c-bf72-efbe95e7cbb0", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.1539666791903357, 0.16487638146265782, 0.15900466267637314, 0.16268879234922262, 0.14012639330576426, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9799482781666569, 0.9981876031868977, 0.9871873280142246, 0.9484714233945116, 0.9823963435962645, 0.9719957965241044, 0.9930367189994146, 0.9819667284685399, 0.9925756949855238, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.1126317008225034, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 0.0036993686210942123, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20661064307109722, 0.1883461228120139, 0.17579218048408696, 0.1999369180904158, 0.17740879973320867, 0.1886924430605572, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.1357003554125198, 0.13254231323392418, 0.12145920009434463, 0.1387155273583558, 0.13730945121854765, 0.11676002731246482, 0.14568463264249076, 0.14092241483279122, 0.1280848478480342, 0.16124902965938548, 0.1561022183367471, 0.1667976334561032, 0.15870518443591952, 0.15270193456849246, 0.16220190241581622, 0.15127901597955062, 0.17353063573099226, 0.14047736335456307, 0.09989989921586839, 0.09605678983869381, 0.10716210774176638, 0.09500120273374746, 0.11436419551271415, 0.10109741643996695, 0.09812208369943642, 0.12244929523955983, 0.11052532239009139, 0.12992706471991533, 0.1467272681078131, 0.14036568773983238, 0.14711678499612058, 0.1316881543130981, 0.14785057622912734, 0.14262918755463816, 0.1345553064938575, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1255248242688627, 0.16060621107131812, 0.1580928823157255, 0.1513356545171608, 0.13537433152013767, 0.12036266907687043, 0.14578479676063294, 0.14444836304044384, 0.15294909362803888, 0.14009870570354033, 0.13406252454194778, 0.13348704823630742, 0.1195820390294009, 0.11993531585963524, 0.1367504112204837, 0.1607166036882618, 0.15477518177534966, 0.15949139283849112, 0.17819544829146072, 0.18313405177858655, 0.1790753712443215, 0.18195578656271294, 0.20685162527407042, 0.17326035481618252, 0.17275383773212727, 0.18082168665376164, 0.20059152152077075, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "81f71233-5d27-4ca8-b662-813d1b1ff39c", "solution": "import numpy as np\n\nclass EnhancedMultiSwarmEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval, population):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            swarm_idx = np.random.randint(0, len(population))\n            mutant = x + step_size * (population[swarm_idx][np.random.randint(self.budget)] - population[swarm_idx][np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        num_swarms = 5\n        populations = [np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) for _ in range(num_swarms)]\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            for swarm_idx in range(num_swarms):\n                population = populations[swarm_idx]\n                diversity = np.std(population)\n                for i in range(self.budget):\n                    x = population[i]\n                    F = F_adapt + 0.1 * np.random.randn()\n                    F = np.clip(F, F_lower, F_upper)\n\n                    mutant = adaptive_mutation(x, F, diversity, cost_function(x), populations)\n                    trial = crossover(x, mutant, CR)\n                    if cost_function(trial) < cost_function(x):\n                        population[i] = trial\n                    else:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                    if np.random.rand() < 0.1:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n            # Information exchange among swarms\n            for i in range(num_swarms):\n                exchange_swarm = np.random.choice([x for x in range(num_swarms) if x != i])\n                exchange_idx = np.random.randint(self.budget)\n                populations[i][exchange_idx] = populations[exchange_swarm][exchange_idx]\n\n        all_populations = np.concatenate(populations)\n        best_idx = np.argmin([cost_function(x) for x in all_populations])\n        best_solution = all_populations[best_idx]\n\n        return best_solution", "name": "EnhancedMultiSwarmEvolutionaryHybridHarmonySearch", "description": "Enhancing exploration by adding a multi-swarm approach with information exchange among swarms.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6bdf6984-857e-4b9c-bf72-efbe95e7cbb0", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.1539666791903357, 0.16487638146265782, 0.15900466267637314, 0.16268879234922262, 0.14012639330576426, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9799482781666569, 0.9981876031868977, 0.9871873280142246, 0.9484714233945116, 0.9823963435962645, 0.9719957965241044, 0.9930367189994146, 0.9819667284685399, 0.9925756949855238, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.1126317008225034, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 0.0036993686210942123, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20661064307109722, 0.1883461228120139, 0.17579218048408696, 0.1999369180904158, 0.17740879973320867, 0.1886924430605572, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.1357003554125198, 0.13254231323392418, 0.12145920009434463, 0.1387155273583558, 0.13730945121854765, 0.11676002731246482, 0.14568463264249076, 0.14092241483279122, 0.1280848478480342, 0.16124902965938548, 0.1561022183367471, 0.1667976334561032, 0.15870518443591952, 0.15270193456849246, 0.16220190241581622, 0.15127901597955062, 0.17353063573099226, 0.14047736335456307, 0.09989989921586839, 0.09605678983869381, 0.10716210774176638, 0.09500120273374746, 0.11436419551271415, 0.10109741643996695, 0.09812208369943642, 0.12244929523955983, 0.11052532239009139, 0.12992706471991533, 0.1467272681078131, 0.14036568773983238, 0.14711678499612058, 0.1316881543130981, 0.14785057622912734, 0.14262918755463816, 0.1345553064938575, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1255248242688627, 0.16060621107131812, 0.1580928823157255, 0.1513356545171608, 0.13537433152013767, 0.12036266907687043, 0.14578479676063294, 0.14444836304044384, 0.15294909362803888, 0.14009870570354033, 0.13406252454194778, 0.13348704823630742, 0.1195820390294009, 0.11993531585963524, 0.1367504112204837, 0.1607166036882618, 0.15477518177534966, 0.15949139283849112, 0.17819544829146072, 0.18313405177858655, 0.1790753712443215, 0.18195578656271294, 0.20685162527407042, 0.17326035481618252, 0.17275383773212727, 0.18082168665376164, 0.20059152152077075, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "21e58efc-8a87-4f7b-aa3e-3d77d338184d", "solution": "import numpy as np\n\nclass ImprovedEnhancedMultiSwarmEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval, population):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            swarm_idx = np.random.randint(0, len(population))\n            mutant = x + step_size * (population[swarm_idx][np.random.randint(self.budget)] - population[swarm_idx][np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        num_swarms = 5\n        populations = [np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) for _ in range(num_swarms)]\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            for swarm_idx in range(num_swarms):\n                population = populations[swarm_idx]\n                swarm_fitness = [cost_function(x) for x in population]\n                best_in_swarm = population[np.argmin(swarm_fitness)]\n                worst_in_swarm = population[np.argmax(swarm_fitness)]\n                diversity = np.std(population)\n                \n                swarm_size_factor = 0.5 + 0.1 * np.random.randn()\n                swarm_size = int(self.budget * swarm_size_factor)\n                \n                for i in range(swarm_size):\n                    x = population[i]\n                    F = F_adapt + 0.1 * np.random.randn()\n                    F = np.clip(F, F_lower, F_upper)\n\n                    mutant = adaptive_mutation(x, F, diversity, cost_function(x), populations)\n                    trial = crossover(x, mutant, CR)\n                    if cost_function(trial) < cost_function(x):\n                        population[i] = trial\n                    else:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                    if np.random.rand() < 0.1:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n            # Information exchange among swarms\n            for i in range(num_swarms):\n                exchange_swarm = np.random.choice([x for x in range(num_swarms) if x != i])\n                exchange_idx = np.random.randint(self.budget)\n                populations[i][exchange_idx] = populations[exchange_swarm][exchange_idx]\n\n        all_populations = np.concatenate(populations)\n        best_idx = np.argmin([cost_function(x) for x in all_populations])\n        best_solution = all_populations[best_idx]\n\n        return best_solution", "name": "ImprovedEnhancedMultiSwarmEvolutionaryHybridHarmonySearch", "description": "Introducing dynamic swarm size adaptation based on swarm performance to enhance exploration and exploitation.", "configspace": "", "generation": 72, "fitness": 0.09144843562834938, "feedback": "The algorithm ImprovedEnhancedMultiSwarmEvolutionaryHybridHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.07.", "error": "", "parent_id": "6bdf6984-857e-4b9c-bf72-efbe95e7cbb0", "metadata": {"aucs": [0.1777139996739341, 0.17578811482102485, 0.170257377687277, 0.17150387971053227, 0.18818139055183436, 0.1743435064021196, 0.17856999940812623, 0.1627570653971666, 0.1900640255741839, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0420769044974153, 0.046540046771576415, 0.036843840851905174, 0.041028703578300574, 0.03732066520661048, 0.03948978223329991, 0.0528437448134802, 0.06702432684758475, 0.058711088734964334, 0.025979934130904825, 0.032508982847686774, 0.0481463786277756, 0.027803019802558393, 0.04926774209271334, 0.05702674525995721, 0.03768548859383769, 0.03992308285267243, 0.029898291447754133, 0.08746944629118047, 0.0741770523943478, 0.09087431849796956, 0.08822863271431869, 0.08032688292695478, 0.08639412375773481, 0.08222559889516068, 0.08620909750186001, 0.07933359613958268, 0.07973913569416458, 0.08043703106553202, 0.10171882691615464, 0.06783755759972065, 0.062276416502640486, 0.06130150772388787, 0.09472457566024695, 0.061028138297436585, 0.09992729358139563, 0.12553619411724048, 0.19308637766117165, 0.1481850439168273, 0.10471519865355927, 0.09685346092514469, 0.13123694841517808, 0.12595553978877339, 0.1368487698841222, 0.11599925472713601, 0.0043507767599104685, 0.004560104586776803, 0.006205422871878197, 0.004189550067818515, 9.999999999998899e-05, 0.0004343670982023262, 9.999999999998899e-05, 9.999999999998899e-05, 0.019872591751231683, 0.008148577147152003, 0.06957272857429797, 9.999999999998899e-05, 0.011988543793833517, 0.035362057023575866, 0.011860097762603106, 0.017993280776203546, 0.006568189490159582, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05293794841224442, 0.06858859508378334, 0.045274884319672526, 0.06941906045599022, 0.03258759184138249, 0.055770453722678415, 0.05295698494644707, 0.05008726726802559, 0.06421743361722532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006754747757416024, 9.999999999998899e-05, 0.22082032439354093, 0.19298032777251062, 0.19495588911784612, 0.2055799784281095, 0.18923395481742278, 0.20724700933075846, 0.1998807079546645, 0.17860340449937617, 0.20408032060320924, 0.05001390496924141, 0.04250646008327186, 0.04401887178405428, 0.04318053323128679, 0.04044574604984119, 0.046009660620107806, 0.073263588849099, 0.043993360971981255, 0.05229792848072812, 0.1375278309273661, 0.1273795545501063, 0.13721680985239493, 0.1412797182171618, 0.14115194246620144, 0.13013755749087796, 0.15034268976310372, 0.14861619065631115, 0.1338453581186947, 0.17182146956930033, 0.16056014438130572, 0.1760473800192245, 0.16779352461211916, 0.1821496595795835, 0.1769644640004372, 0.16591313548350284, 0.17377774300845283, 0.15374618240477322, 0.11534321591796037, 0.10382166168941254, 0.11849032669552728, 0.1123738480417984, 0.13610603218022022, 0.11676919299387534, 0.10628682615994733, 0.1237427242099084, 0.1229185550255375, 0.1410630187122207, 0.16233450221944246, 0.1583470274596206, 0.1601583581414543, 0.1453603756054126, 0.16236042742370171, 0.15533346120938785, 0.17355151355563359, 0.18277724523822958, 0.14195011305864957, 0.1458796029894096, 0.1426064404081222, 0.14101597620439077, 0.1441162926604549, 0.15282202985716775, 0.14096434603863706, 0.14175390856222403, 0.16207881422481074, 0.18402833448490363, 0.16679477618376493, 0.16657141521439822, 0.1596427042756502, 0.15120231260257588, 0.1411966535145892, 0.16139484817187333, 0.1634028490223587, 0.17650083581544018, 0.15768378219198798, 0.15833462142207844, 0.16490498282695387, 0.150330135465925, 0.18886734367950586, 0.16045374486843178, 0.16855947523118198, 0.1733826927034039, 0.2028812417861957, 0.1757397014909311, 0.19094915976158955, 0.17585034123885257, 0.18683568409856555, 0.2135749380374129, 0.18382439475410084, 0.17594512205278, 0.18933528979092384, 0.20568880668582523, 0.058344077551123696, 0.055317793090979506, 0.06585155299632517, 0.05186305593955043, 0.05934830659822565, 0.055933964908894684, 0.07532529613519179, 0.05491659739916577, 0.06073069639553741]}, "mutation_prompt": null}
{"id": "032e74fb-f69b-46f0-90c1-d22e64bd1f16", "solution": "import numpy as np\n\nclass EnhancedMultiSwarmEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval, population):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            swarm_idx = np.random.randint(0, len(population))\n            mutant = x + step_size * (population[swarm_idx][np.random.randint(self.budget)] - population[swarm_idx][np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        num_swarms = 5\n        populations = [np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) for _ in range(num_swarms)]\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            for swarm_idx in range(num_swarms):\n                population = populations[swarm_idx]\n                diversity = np.std(population)\n                for i in range(self.budget):\n                    x = population[i]\n                    F = F_adapt + 0.1 * np.random.randn()\n                    F = np.clip(F, F_lower, F_upper)\n\n                    mutant = adaptive_mutation(x, F, diversity, cost_function(x), populations)\n                    trial = crossover(x, mutant, CR)\n                    if cost_function(trial) < cost_function(x):\n                        population[i] = trial\n                    else:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                    if np.random.rand() < 0.1:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n            # Information exchange among swarms\n            for i in range(num_swarms):\n                exchange_swarm = np.random.choice([x for x in range(num_swarms) if x != i])\n                exchange_idx = np.random.randint(self.budget)\n                populations[i][exchange_idx] = populations[exchange_swarm][exchange_idx]\n\n        all_populations = np.concatenate(populations)\n        best_idx = np.argmin([cost_function(x) for x in all_populations])\n        best_solution = all_populations[best_idx]\n\n        return best_solution", "name": "EnhancedMultiSwarmEvolutionaryHybridHarmonySearch", "description": "Enhancing exploration by adding a multi-swarm approach with information exchange among swarms.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6bdf6984-857e-4b9c-bf72-efbe95e7cbb0", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.1539666791903357, 0.16487638146265782, 0.15900466267637314, 0.16268879234922262, 0.14012639330576426, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9799482781666569, 0.9981876031868977, 0.9871873280142246, 0.9484714233945116, 0.9823963435962645, 0.9719957965241044, 0.9930367189994146, 0.9819667284685399, 0.9925756949855238, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.1126317008225034, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 0.0036993686210942123, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20661064307109722, 0.1883461228120139, 0.17579218048408696, 0.1999369180904158, 0.17740879973320867, 0.1886924430605572, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.1357003554125198, 0.13254231323392418, 0.12145920009434463, 0.1387155273583558, 0.13730945121854765, 0.11676002731246482, 0.14568463264249076, 0.14092241483279122, 0.1280848478480342, 0.16124902965938548, 0.1561022183367471, 0.1667976334561032, 0.15870518443591952, 0.15270193456849246, 0.16220190241581622, 0.15127901597955062, 0.17353063573099226, 0.14047736335456307, 0.09989989921586839, 0.09605678983869381, 0.10716210774176638, 0.09500120273374746, 0.11436419551271415, 0.10109741643996695, 0.09812208369943642, 0.12244929523955983, 0.11052532239009139, 0.12992706471991533, 0.1467272681078131, 0.14036568773983238, 0.14711678499612058, 0.1316881543130981, 0.14785057622912734, 0.14262918755463816, 0.1345553064938575, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1255248242688627, 0.16060621107131812, 0.1580928823157255, 0.1513356545171608, 0.13537433152013767, 0.12036266907687043, 0.14578479676063294, 0.14444836304044384, 0.15294909362803888, 0.14009870570354033, 0.13406252454194778, 0.13348704823630742, 0.1195820390294009, 0.11993531585963524, 0.1367504112204837, 0.1607166036882618, 0.15477518177534966, 0.15949139283849112, 0.17819544829146072, 0.18313405177858655, 0.1790753712443215, 0.18195578656271294, 0.20685162527407042, 0.17326035481618252, 0.17275383773212727, 0.18082168665376164, 0.20059152152077075, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "ec136340-9a83-4973-93ce-2f6251f0aa70", "solution": "import numpy as np\n\nclass EnhancedDynamicPopulationSizeEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval, population):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            swarm_idx = np.random.randint(0, len(population))\n            mutant = x + step_size * (population[swarm_idx][np.random.randint(self.budget)] - population[swarm_idx][np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        num_swarms = 5\n        populations = [np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) for _ in range(num_swarms)]\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            for swarm_idx in range(num_swarms):\n                population = populations[swarm_idx]\n                diversity = np.std(population)\n                for i in range(self.budget):\n                    x = population[i]\n                    F = F_adapt + 0.1 * np.random.randn()\n                    F = np.clip(F, F_lower, F_upper)\n\n                    mutant = adaptive_mutation(x, F, diversity, cost_function(x), populations)\n                    trial = crossover(x, mutant, CR)\n                    if cost_function(trial) < cost_function(x):\n                        population[i] = trial\n                    else:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                    if np.random.rand() < 0.1:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n            # Information exchange among swarms\n            for i in range(num_swarms):\n                exchange_swarm = np.random.choice([x for x in range(num_swarms) if x != i])\n                exchange_idx = np.random.randint(self.budget)\n                populations[i][exchange_idx] = populations[exchange_swarm][exchange_idx]\n\n            # Dynamic population size adaptation\n            if np.random.rand() < 0.1:\n                populations.append(np.random.uniform(-5.0, 5.0, (self.budget, self.dim)))\n                populations = populations[:num_swarms]  # Keep the number of swarms constant\n\n        all_populations = np.concatenate(populations)\n        best_idx = np.argmin([cost_function(x) for x in all_populations])\n        best_solution = all_populations[best_idx]\n\n        return best_solution", "name": "EnhancedDynamicPopulationSizeEvolutionaryHybridHarmonySearch", "description": "Introducing a dynamic population size adaptation mechanism to enhance diversity and exploration.", "configspace": "", "generation": 74, "fitness": 0.11835265432041353, "feedback": "The algorithm EnhancedDynamicPopulationSizeEvolutionaryHybridHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "6bdf6984-857e-4b9c-bf72-efbe95e7cbb0", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.1539666791903357, 0.16487638146265782, 0.15900466267637314, 0.16268879234922262, 0.14012639330576426, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9799482781666569, 0.9981876031868977, 0.9871873280142246, 0.9484714233945116, 0.9823963435962645, 0.9719957965241044, 0.9930367189994146, 0.9819667284685399, 0.9925756949855238, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.1126317008225034, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 0.0036993686210942123, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20661064307109722, 0.1883461228120139, 0.17579218048408696, 0.1999369180904158, 0.17740879973320867, 0.1886924430605572, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.1357003554125198, 0.13254231323392418, 0.12145920009434463, 0.1387155273583558, 0.13730945121854765, 0.11676002731246482, 0.14568463264249076, 0.14092241483279122, 0.1280848478480342, 0.16124902965938548, 0.1561022183367471, 0.1667976334561032, 0.15870518443591952, 0.15270193456849246, 0.16220190241581622, 0.15127901597955062, 0.17353063573099226, 0.14047736335456307, 0.09989989921586839, 0.09605678983869381, 0.10716210774176638, 0.09500120273374746, 0.11436419551271415, 0.10109741643996695, 0.09812208369943642, 0.12244929523955983, 0.11052532239009139, 0.12992706471991533, 0.1467272681078131, 0.14036568773983238, 0.14711678499612058, 0.1316881543130981, 0.14785057622912734, 0.14262918755463816, 0.1345553064938575, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1255248242688627, 0.16060621107131812, 0.1580928823157255, 0.1513356545171608, 0.13537433152013767, 0.12036266907687043, 0.14578479676063294, 0.14444836304044384, 0.15294909362803888, 0.14009870570354033, 0.13406252454194778, 0.13348704823630742, 0.1195820390294009, 0.11993531585963524, 0.1367504112204837, 0.1607166036882618, 0.15477518177534966, 0.15949139283849112, 0.17819544829146072, 0.18313405177858655, 0.1790753712443215, 0.18195578656271294, 0.20685162527407042, 0.17326035481618252, 0.17275383773212727, 0.18082168665376164, 0.20059152152077075, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "f6fb10bb-f69f-496b-83e7-4ec5dae3e283", "solution": "import numpy as np\n\nclass EnhancedMultiSwarmEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval, population, budget):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            swarm_idx = np.random.randint(0, len(population))\n            mutant = x + step_size * (population[swarm_idx][np.random.randint(budget)] - population[swarm_idx][np.random.randint(budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        num_swarms = 5\n        populations = [np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) for _ in range(num_swarms)]\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            for swarm_idx in range(num_swarms):\n                population = populations[swarm_idx]\n                diversity = np.std(population)\n                for i in range(self.budget):\n                    x = population[i]\n                    F = F_adapt + 0.1 * np.random.randn()\n                    F = np.clip(F, F_lower, F_upper)\n\n                    mutant = adaptive_mutation(x, F, diversity, cost_function(x), populations, self.budget)\n                    trial = crossover(x, mutant, CR)\n                    if cost_function(trial) < cost_function(x):\n                        population[i] = trial\n                    else:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                    if np.random.rand() < 0.1:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n            # Information exchange among swarms\n            for i in range(num_swarms):\n                exchange_swarm = np.random.choice([x for x in range(num_swarms) if x != i])\n                exchange_idx = np.random.randint(self.budget)\n                populations[i][exchange_idx] = populations[exchange_swarm][exchange_idx]\n\n            # Dynamic population size adaptation\n            if np.random.rand() < 0.1:\n                if len(populations[0]) > 1:\n                    for j in range(num_swarms):\n                        populations[j] = np.delete(populations[j], np.random.randint(self.budget), axis=0)\n\n        all_populations = np.concatenate(populations)\n        best_idx = np.argmin([cost_function(x) for x in all_populations])\n        best_solution = all_populations[best_idx]\n\n        return best_solution", "name": "EnhancedMultiSwarmEvolutionaryHybridHarmonySearch", "description": "Introducing dynamic population size adaptation to enhance exploration and exploitation.", "configspace": "", "generation": 75, "fitness": 0.11835265432041353, "feedback": "The algorithm EnhancedMultiSwarmEvolutionaryHybridHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "6bdf6984-857e-4b9c-bf72-efbe95e7cbb0", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.1539666791903357, 0.16487638146265782, 0.15900466267637314, 0.16268879234922262, 0.14012639330576426, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9799482781666569, 0.9981876031868977, 0.9871873280142246, 0.9484714233945116, 0.9823963435962645, 0.9719957965241044, 0.9930367189994146, 0.9819667284685399, 0.9925756949855238, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.1126317008225034, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 0.0036993686210942123, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20661064307109722, 0.1883461228120139, 0.17579218048408696, 0.1999369180904158, 0.17740879973320867, 0.1886924430605572, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.1357003554125198, 0.13254231323392418, 0.12145920009434463, 0.1387155273583558, 0.13730945121854765, 0.11676002731246482, 0.14568463264249076, 0.14092241483279122, 0.1280848478480342, 0.16124902965938548, 0.1561022183367471, 0.1667976334561032, 0.15870518443591952, 0.15270193456849246, 0.16220190241581622, 0.15127901597955062, 0.17353063573099226, 0.14047736335456307, 0.09989989921586839, 0.09605678983869381, 0.10716210774176638, 0.09500120273374746, 0.11436419551271415, 0.10109741643996695, 0.09812208369943642, 0.12244929523955983, 0.11052532239009139, 0.12992706471991533, 0.1467272681078131, 0.14036568773983238, 0.14711678499612058, 0.1316881543130981, 0.14785057622912734, 0.14262918755463816, 0.1345553064938575, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1255248242688627, 0.16060621107131812, 0.1580928823157255, 0.1513356545171608, 0.13537433152013767, 0.12036266907687043, 0.14578479676063294, 0.14444836304044384, 0.15294909362803888, 0.14009870570354033, 0.13406252454194778, 0.13348704823630742, 0.1195820390294009, 0.11993531585963524, 0.1367504112204837, 0.1607166036882618, 0.15477518177534966, 0.15949139283849112, 0.17819544829146072, 0.18313405177858655, 0.1790753712443215, 0.18195578656271294, 0.20685162527407042, 0.17326035481618252, 0.17275383773212727, 0.18082168665376164, 0.20059152152077075, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "b4ff7655-a122-4acb-9560-f619c1839f81", "solution": "import numpy as np\n\nclass EnhancedMultiSwarmEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval, population):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            swarm_idx = np.random.randint(0, len(population))\n            mutant = x + step_size * (population[swarm_idx][np.random.randint(self.budget)] - population[swarm_idx][np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        num_swarms = 5\n        populations = [np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) for _ in range(num_swarms)]\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            for swarm_idx in range(num_swarms):\n                population = populations[swarm_idx]\n                diversity = np.std(population)\n                for i in range(self.budget):\n                    x = population[i]\n                    F = F_adapt + 0.1 * np.random.randn()\n                    F = np.clip(F, F_lower, F_upper)\n\n                    mutant = adaptive_mutation(x, F, diversity, cost_function(x), populations)\n                    trial = crossover(x, mutant, CR)\n                    if cost_function(trial) < cost_function(x):\n                        population[i] = trial\n                    else:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                    if np.random.rand() < 0.1:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n            # Information exchange among swarms\n            for i in range(num_swarms):\n                exchange_swarm = np.random.choice([x for x in range(num_swarms) if x != i])\n                exchange_idx = np.random.randint(self.budget)\n                populations[i][exchange_idx] = populations[exchange_swarm][exchange_idx]\n\n            # Dynamic search space adaptation based on swarm performance\n            swarm_fitness = [np.mean([cost_function(x) for x in pop]) for pop in populations]\n            best_swarm = np.argmin(swarm_fitness)\n            for i in range(num_swarms):\n                if i != best_swarm:\n                    scaling_factor = np.exp(-swarm_fitness[i] / swarm_fitness[best_swarm])\n                    populations[i] = populations[i] * scaling_factor\n\n        all_populations = np.concatenate(populations)\n        best_idx = np.argmin([cost_function(x) for x in all_populations])\n        best_solution = all_populations[best_idx]\n\n        return best_solution", "name": "EnhancedMultiSwarmEvolutionaryHybridHarmonySearch", "description": "Improving exploration by incorporating a dynamic search space adaptation mechanism based on individual swarm performance.", "configspace": "", "generation": 76, "fitness": 0.11835265432041353, "feedback": "The algorithm EnhancedMultiSwarmEvolutionaryHybridHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "6bdf6984-857e-4b9c-bf72-efbe95e7cbb0", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.1539666791903357, 0.16487638146265782, 0.15900466267637314, 0.16268879234922262, 0.14012639330576426, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9799482781666569, 0.9981876031868977, 0.9871873280142246, 0.9484714233945116, 0.9823963435962645, 0.9719957965241044, 0.9930367189994146, 0.9819667284685399, 0.9925756949855238, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.1126317008225034, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 0.0036993686210942123, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20661064307109722, 0.1883461228120139, 0.17579218048408696, 0.1999369180904158, 0.17740879973320867, 0.1886924430605572, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.1357003554125198, 0.13254231323392418, 0.12145920009434463, 0.1387155273583558, 0.13730945121854765, 0.11676002731246482, 0.14568463264249076, 0.14092241483279122, 0.1280848478480342, 0.16124902965938548, 0.1561022183367471, 0.1667976334561032, 0.15870518443591952, 0.15270193456849246, 0.16220190241581622, 0.15127901597955062, 0.17353063573099226, 0.14047736335456307, 0.09989989921586839, 0.09605678983869381, 0.10716210774176638, 0.09500120273374746, 0.11436419551271415, 0.10109741643996695, 0.09812208369943642, 0.12244929523955983, 0.11052532239009139, 0.12992706471991533, 0.1467272681078131, 0.14036568773983238, 0.14711678499612058, 0.1316881543130981, 0.14785057622912734, 0.14262918755463816, 0.1345553064938575, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1255248242688627, 0.16060621107131812, 0.1580928823157255, 0.1513356545171608, 0.13537433152013767, 0.12036266907687043, 0.14578479676063294, 0.14444836304044384, 0.15294909362803888, 0.14009870570354033, 0.13406252454194778, 0.13348704823630742, 0.1195820390294009, 0.11993531585963524, 0.1367504112204837, 0.1607166036882618, 0.15477518177534966, 0.15949139283849112, 0.17819544829146072, 0.18313405177858655, 0.1790753712443215, 0.18195578656271294, 0.20685162527407042, 0.17326035481618252, 0.17275383773212727, 0.18082168665376164, 0.20059152152077075, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "cc4d00a1-7bdf-4869-823b-7ba364497bee", "solution": "import numpy as np\n\nclass EnhancedMultiSwarmEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval, population):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            swarm_idx = np.random.randint(0, len(population))\n            mutant = x + step_size * (population[swarm_idx][np.random.randint(self.budget)] - population[swarm_idx][np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        num_swarms = 5\n        populations = [np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) for _ in range(num_swarms)]\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            for swarm_idx in range(num_swarms):\n                population = populations[swarm_idx]\n                diversity = np.std(population)\n                for i in range(self.budget):\n                    x = population[i]\n                    F = F_adapt + 0.1 * np.random.randn()\n                    F = np.clip(F, F_lower, F_upper)\n\n                    mutant = adaptive_mutation(x, F, diversity, cost_function(x), populations)\n                    trial = crossover(x, mutant, CR)\n                    if cost_function(trial) < cost_function(x):\n                        population[i] = trial\n                    else:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                    if np.random.rand() < 0.1:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n            # Information exchange among swarms\n            for i in range(num_swarms):\n                exchange_swarm = np.random.choice([x for x in range(num_swarms) if x != i])\n                exchange_idx = np.random.randint(self.budget)\n                populations[i][exchange_idx] = populations[exchange_swarm][exchange_idx]\n\n        all_populations = np.concatenate(populations)\n        best_idx = np.argmin([cost_function(x) for x in all_populations])\n        best_solution = all_populations[best_idx]\n\n        return best_solution", "name": "EnhancedMultiSwarmEvolutionaryHybridHarmonySearch", "description": "Enhancing exploration by adding a multi-swarm approach with information exchange among swarms.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6bdf6984-857e-4b9c-bf72-efbe95e7cbb0", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.1539666791903357, 0.16487638146265782, 0.15900466267637314, 0.16268879234922262, 0.14012639330576426, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9799482781666569, 0.9981876031868977, 0.9871873280142246, 0.9484714233945116, 0.9823963435962645, 0.9719957965241044, 0.9930367189994146, 0.9819667284685399, 0.9925756949855238, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.1126317008225034, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 0.0036993686210942123, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20661064307109722, 0.1883461228120139, 0.17579218048408696, 0.1999369180904158, 0.17740879973320867, 0.1886924430605572, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.1357003554125198, 0.13254231323392418, 0.12145920009434463, 0.1387155273583558, 0.13730945121854765, 0.11676002731246482, 0.14568463264249076, 0.14092241483279122, 0.1280848478480342, 0.16124902965938548, 0.1561022183367471, 0.1667976334561032, 0.15870518443591952, 0.15270193456849246, 0.16220190241581622, 0.15127901597955062, 0.17353063573099226, 0.14047736335456307, 0.09989989921586839, 0.09605678983869381, 0.10716210774176638, 0.09500120273374746, 0.11436419551271415, 0.10109741643996695, 0.09812208369943642, 0.12244929523955983, 0.11052532239009139, 0.12992706471991533, 0.1467272681078131, 0.14036568773983238, 0.14711678499612058, 0.1316881543130981, 0.14785057622912734, 0.14262918755463816, 0.1345553064938575, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1255248242688627, 0.16060621107131812, 0.1580928823157255, 0.1513356545171608, 0.13537433152013767, 0.12036266907687043, 0.14578479676063294, 0.14444836304044384, 0.15294909362803888, 0.14009870570354033, 0.13406252454194778, 0.13348704823630742, 0.1195820390294009, 0.11993531585963524, 0.1367504112204837, 0.1607166036882618, 0.15477518177534966, 0.15949139283849112, 0.17819544829146072, 0.18313405177858655, 0.1790753712443215, 0.18195578656271294, 0.20685162527407042, 0.17326035481618252, 0.17275383773212727, 0.18082168665376164, 0.20059152152077075, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "16e1764d-b379-46a5-be5d-bc808e890797", "solution": "import numpy as np\n\nclass EnhancedMultiSwarmEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval, population):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            swarm_idx = np.random.randint(0, len(population))\n            mutant = x + step_size * (population[swarm_idx][np.random.randint(self.budget)] - population[swarm_idx][np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        num_swarms = 5\n        populations = [np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) for _ in range(num_swarms)]\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            for swarm_idx in range(num_swarms):\n                population = populations[swarm_idx]\n                diversity = np.std(population)\n                for i in range(self.budget):\n                    x = population[i]\n                    F = F_adapt + 0.1 * np.random.randn()\n                    F = np.clip(F, F_lower, F_upper)\n\n                    mutant = adaptive_mutation(x, F, diversity, cost_function(x), populations)\n                    trial = crossover(x, mutant, CR)\n                    if cost_function(trial) < cost_function(x):\n                        population[i] = trial\n                    else:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                    if np.random.rand() < 0.1:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n            # Information exchange among swarms\n            for i in range(num_swarms):\n                exchange_swarm = np.random.choice([x for x in range(num_swarms) if x != i])\n                exchange_idx = np.random.randint(self.budget)\n                populations[i][exchange_idx] = populations[exchange_swarm][exchange_idx]\n\n        all_populations = np.concatenate(populations)\n        best_idx = np.argmin([cost_function(x) for x in all_populations])\n        best_solution = all_populations[best_idx]\n\n        return best_solution", "name": "EnhancedMultiSwarmEvolutionaryHybridHarmonySearch", "description": "Enhancing exploration by adding a multi-swarm approach with information exchange among swarms.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6bdf6984-857e-4b9c-bf72-efbe95e7cbb0", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.1539666791903357, 0.16487638146265782, 0.15900466267637314, 0.16268879234922262, 0.14012639330576426, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9799482781666569, 0.9981876031868977, 0.9871873280142246, 0.9484714233945116, 0.9823963435962645, 0.9719957965241044, 0.9930367189994146, 0.9819667284685399, 0.9925756949855238, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.1126317008225034, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 0.0036993686210942123, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20661064307109722, 0.1883461228120139, 0.17579218048408696, 0.1999369180904158, 0.17740879973320867, 0.1886924430605572, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.1357003554125198, 0.13254231323392418, 0.12145920009434463, 0.1387155273583558, 0.13730945121854765, 0.11676002731246482, 0.14568463264249076, 0.14092241483279122, 0.1280848478480342, 0.16124902965938548, 0.1561022183367471, 0.1667976334561032, 0.15870518443591952, 0.15270193456849246, 0.16220190241581622, 0.15127901597955062, 0.17353063573099226, 0.14047736335456307, 0.09989989921586839, 0.09605678983869381, 0.10716210774176638, 0.09500120273374746, 0.11436419551271415, 0.10109741643996695, 0.09812208369943642, 0.12244929523955983, 0.11052532239009139, 0.12992706471991533, 0.1467272681078131, 0.14036568773983238, 0.14711678499612058, 0.1316881543130981, 0.14785057622912734, 0.14262918755463816, 0.1345553064938575, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1255248242688627, 0.16060621107131812, 0.1580928823157255, 0.1513356545171608, 0.13537433152013767, 0.12036266907687043, 0.14578479676063294, 0.14444836304044384, 0.15294909362803888, 0.14009870570354033, 0.13406252454194778, 0.13348704823630742, 0.1195820390294009, 0.11993531585963524, 0.1367504112204837, 0.1607166036882618, 0.15477518177534966, 0.15949139283849112, 0.17819544829146072, 0.18313405177858655, 0.1790753712443215, 0.18195578656271294, 0.20685162527407042, 0.17326035481618252, 0.17275383773212727, 0.18082168665376164, 0.20059152152077075, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "bc4b4d2d-5f3a-4fd8-8dfb-5cf1e418c1d3", "solution": "import numpy as np\n\nclass EnhancedDynamicAdaptiveMultiSwarmEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval, population):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            swarm_idx = np.random.randint(0, len(population))\n            mutant = x + step_size * (population[swarm_idx][np.random.randint(self.budget)] - population[swarm_idx][np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        num_swarms = 5\n        populations = [np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) for _ in range(num_swarms)]\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n        CR_adapt = 0.9\n        CR_lower, CR_upper = 0.7, 0.95\n\n        for _ in range(self.budget):\n            for swarm_idx in range(num_swarms):\n                population = populations[swarm_idx]\n                diversity = np.std(population)\n                for i in range(self.budget):\n                    x = population[i]\n                    F = F_adapt + 0.1 * np.random.randn()\n                    F = np.clip(F, F_lower, F_upper)\n\n                    CR = CR_adapt + 0.05 * np.random.randn()\n                    CR = np.clip(CR, CR_lower, CR_upper)\n\n                    mutant = adaptive_mutation(x, F, diversity, cost_function(x), populations)\n                    trial = crossover(x, mutant, CR)\n                    if cost_function(trial) < cost_function(x):\n                        population[i] = trial\n                    else:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                    if np.random.rand() < 0.1:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n            # Information exchange among swarms\n            for i in range(num_swarms):\n                exchange_swarm = np.random.choice([x for x in range(num_swarms) if x != i])\n                exchange_idx = np.random.randint(self.budget)\n                populations[i][exchange_idx] = populations[exchange_swarm][exchange_idx]\n\n        all_populations = np.concatenate(populations)\n        best_idx = np.argmin([cost_function(x) for x in all_populations])\n        best_solution = all_populations[best_idx]\n\n        return best_solution", "name": "EnhancedDynamicAdaptiveMultiSwarmEvolutionaryHybridHarmonySearch", "description": "Incorporating a dynamic adaptation of crossover probability and a self-adaptive mechanism for mutation to enhance exploration and exploitation balance in multi-swarm evolution.", "configspace": "", "generation": 79, "fitness": 0.11824155092731774, "feedback": "The algorithm EnhancedDynamicAdaptiveMultiSwarmEvolutionaryHybridHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "6bdf6984-857e-4b9c-bf72-efbe95e7cbb0", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.15403729372910835, 0.16485052096657127, 0.15895233292401567, 0.16268879234922262, 0.14022572148753265, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9862460620666132, 0.98436947444481, 0.9825182634880543, 0.9752537455457576, 0.9784673602411167, 0.9941905324698088, 0.9712826108536191, 0.9643213879485504, 0.9816218326254024, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08992449682948267, 0.08299744133218068, 0.11270100872903477, 0.08752786722852868, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 9.999999999998899e-05, 0.05162798573575933, 0.0025382472110415666, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.026223189606011, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2066330567804303, 0.18834580867213868, 0.17579218048408696, 0.1999369180904158, 0.1774487507462802, 0.18869859327373473, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.13587359688727318, 0.12066703902392706, 0.11799566603150524, 0.1387155273583558, 0.1383417841617498, 0.11184344814271174, 0.14613565008598595, 0.14068060420781325, 0.1229874414361386, 0.16066726568038525, 0.14968161951291148, 0.1667976334561032, 0.15870518443591952, 0.1525697722498408, 0.1622150060558477, 0.15127901597955062, 0.17353063573099226, 0.14049135311185712, 0.10072869022387021, 0.08923670180310406, 0.10716210774176638, 0.09500120273374746, 0.11436825478218993, 0.10109362614848993, 0.09812208369943642, 0.1224539119088458, 0.11047177870440683, 0.12991170131181373, 0.1467272681078131, 0.14036465663538056, 0.14711678499612058, 0.1316881543130981, 0.14784841317392816, 0.14262918755463816, 0.1345553064938575, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1255248242688627, 0.1604909488566011, 0.1580928823157255, 0.1513356545171608, 0.13537433152013767, 0.12046972136959777, 0.1455891272416424, 0.14444836304044384, 0.15294909362803888, 0.14009870570354033, 0.13406252454194778, 0.13348704823630742, 0.1195820390294009, 0.11993531585963524, 0.1367504112204837, 0.17643351261751428, 0.15882068249841064, 0.15808889486759148, 0.184657874258347, 0.18301540706219954, 0.17638542000684743, 0.18375574570586972, 0.2048211631836918, 0.1725142390117853, 0.1781433066442274, 0.17836566082832817, 0.2001292078113205, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "186a900b-04a0-481a-87b2-336560a4f502", "solution": "import numpy as np\n\nclass EnhancedMultiSwarmEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval, population):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            swarm_idx = np.random.randint(0, len(population))\n            mutant = x + step_size * (population[swarm_idx][np.random.randint(self.budget)] - population[swarm_idx][np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        num_swarms = 5\n        populations = [np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) for _ in range(num_swarms)]\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            for swarm_idx in range(num_swarms):\n                population = populations[swarm_idx]\n                diversity = np.std(population)\n                for i in range(self.budget):\n                    x = population[i]\n                    F = F_adapt + 0.1 * np.random.randn()\n                    F = np.clip(F, F_lower, F_upper)\n\n                    mutant = adaptive_mutation(x, F, diversity, cost_function(x), populations)\n                    trial = crossover(x, mutant, CR)\n                    if cost_function(trial) < cost_function(x):\n                        population[i] = trial\n                    else:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                    if np.random.rand() < 0.1:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n            # Information exchange among swarms\n            for i in range(num_swarms):\n                exchange_swarm = np.random.choice([x for x in range(num_swarms) if x != i])\n                exchange_idx = np.random.randint(self.budget)\n                populations[i][exchange_idx] = populations[exchange_swarm][exchange_idx]\n\n        all_populations = np.concatenate(populations)\n        best_idx = np.argmin([cost_function(x) for x in all_populations])\n        best_solution = all_populations[best_idx]\n\n        return best_solution", "name": "EnhancedMultiSwarmEvolutionaryHybridHarmonySearch", "description": "Enhancing convergence by incorporating adaptive mutation control based on population diversity and fitness evaluations.", "configspace": "", "generation": 80, "fitness": 0.11835265432041353, "feedback": "The algorithm EnhancedMultiSwarmEvolutionaryHybridHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "6bdf6984-857e-4b9c-bf72-efbe95e7cbb0", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.1539666791903357, 0.16487638146265782, 0.15900466267637314, 0.16268879234922262, 0.14012639330576426, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9799482781666569, 0.9981876031868977, 0.9871873280142246, 0.9484714233945116, 0.9823963435962645, 0.9719957965241044, 0.9930367189994146, 0.9819667284685399, 0.9925756949855238, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.1126317008225034, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 0.0036993686210942123, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20661064307109722, 0.1883461228120139, 0.17579218048408696, 0.1999369180904158, 0.17740879973320867, 0.1886924430605572, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.1357003554125198, 0.13254231323392418, 0.12145920009434463, 0.1387155273583558, 0.13730945121854765, 0.11676002731246482, 0.14568463264249076, 0.14092241483279122, 0.1280848478480342, 0.16124902965938548, 0.1561022183367471, 0.1667976334561032, 0.15870518443591952, 0.15270193456849246, 0.16220190241581622, 0.15127901597955062, 0.17353063573099226, 0.14047736335456307, 0.09989989921586839, 0.09605678983869381, 0.10716210774176638, 0.09500120273374746, 0.11436419551271415, 0.10109741643996695, 0.09812208369943642, 0.12244929523955983, 0.11052532239009139, 0.12992706471991533, 0.1467272681078131, 0.14036568773983238, 0.14711678499612058, 0.1316881543130981, 0.14785057622912734, 0.14262918755463816, 0.1345553064938575, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1255248242688627, 0.16060621107131812, 0.1580928823157255, 0.1513356545171608, 0.13537433152013767, 0.12036266907687043, 0.14578479676063294, 0.14444836304044384, 0.15294909362803888, 0.14009870570354033, 0.13406252454194778, 0.13348704823630742, 0.1195820390294009, 0.11993531585963524, 0.1367504112204837, 0.1607166036882618, 0.15477518177534966, 0.15949139283849112, 0.17819544829146072, 0.18313405177858655, 0.1790753712443215, 0.18195578656271294, 0.20685162527407042, 0.17326035481618252, 0.17275383773212727, 0.18082168665376164, 0.20059152152077075, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "48d1fb4e-5510-466c-973b-7de2d9821982", "solution": "import numpy as np\n\nclass EnhancedMultiSwarmEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval, population):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            swarm_idx = np.random.randint(0, len(population))\n            mutant = x + step_size * (population[swarm_idx][np.random.randint(self.budget)] - population[swarm_idx][np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        num_swarms = 5\n        populations = [np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) for _ in range(num_swarms)]\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            for swarm_idx in range(num_swarms):\n                population = populations[swarm_idx]\n                diversity = np.std(population)\n                for i in range(self.budget):\n                    x = population[i]\n                    F = F_adapt + 0.1 * np.random.randn()\n                    F = np.clip(F, F_lower, F_upper)\n\n                    mutant = adaptive_mutation(x, F, diversity, cost_function(x), populations)\n                    trial = crossover(x, mutant, CR)\n                    if cost_function(trial) < cost_function(x):\n                        population[i] = trial\n                    else:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                    if np.random.rand() < 0.1:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n            # Information exchange among swarms\n            for i in range(num_swarms):\n                exchange_swarm = np.random.choice([x for x in range(num_swarms) if x != i])\n                exchange_idx = np.random.randint(self.budget)\n                populations[i][exchange_idx] = populations[exchange_swarm][exchange_idx]\n\n        all_populations = np.concatenate(populations)\n        best_idx = np.argmin([cost_function(x) for x in all_populations])\n        best_solution = all_populations[best_idx]\n\n        return best_solution", "name": "EnhancedMultiSwarmEvolutionaryHybridHarmonySearch", "description": "Enhancing exploration by adding a multi-swarm approach with information exchange among swarms.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6bdf6984-857e-4b9c-bf72-efbe95e7cbb0", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.1539666791903357, 0.16487638146265782, 0.15900466267637314, 0.16268879234922262, 0.14012639330576426, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9799482781666569, 0.9981876031868977, 0.9871873280142246, 0.9484714233945116, 0.9823963435962645, 0.9719957965241044, 0.9930367189994146, 0.9819667284685399, 0.9925756949855238, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.1126317008225034, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 0.0036993686210942123, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20661064307109722, 0.1883461228120139, 0.17579218048408696, 0.1999369180904158, 0.17740879973320867, 0.1886924430605572, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.1357003554125198, 0.13254231323392418, 0.12145920009434463, 0.1387155273583558, 0.13730945121854765, 0.11676002731246482, 0.14568463264249076, 0.14092241483279122, 0.1280848478480342, 0.16124902965938548, 0.1561022183367471, 0.1667976334561032, 0.15870518443591952, 0.15270193456849246, 0.16220190241581622, 0.15127901597955062, 0.17353063573099226, 0.14047736335456307, 0.09989989921586839, 0.09605678983869381, 0.10716210774176638, 0.09500120273374746, 0.11436419551271415, 0.10109741643996695, 0.09812208369943642, 0.12244929523955983, 0.11052532239009139, 0.12992706471991533, 0.1467272681078131, 0.14036568773983238, 0.14711678499612058, 0.1316881543130981, 0.14785057622912734, 0.14262918755463816, 0.1345553064938575, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1255248242688627, 0.16060621107131812, 0.1580928823157255, 0.1513356545171608, 0.13537433152013767, 0.12036266907687043, 0.14578479676063294, 0.14444836304044384, 0.15294909362803888, 0.14009870570354033, 0.13406252454194778, 0.13348704823630742, 0.1195820390294009, 0.11993531585963524, 0.1367504112204837, 0.1607166036882618, 0.15477518177534966, 0.15949139283849112, 0.17819544829146072, 0.18313405177858655, 0.1790753712443215, 0.18195578656271294, 0.20685162527407042, 0.17326035481618252, 0.17275383773212727, 0.18082168665376164, 0.20059152152077075, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "2f1e89d4-85bc-45f5-b8a9-5fd401048988", "solution": "import numpy as np\n\nclass EnhancedMultiSwarmEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval, population):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            swarm_idx = np.random.randint(0, len(population))\n            mutant = x + step_size * (population[swarm_idx][np.random.randint(self.budget)] - population[swarm_idx][np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        num_swarms = 5\n        populations = [np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) for _ in range(num_swarms)]\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            for swarm_idx in range(num_swarms):\n                population = populations[swarm_idx]\n                diversity = np.std(population)\n                for i in range(self.budget):\n                    x = population[i]\n                    F = F_adapt + 0.1 * np.random.randn()\n                    F = np.clip(F, F_lower, F_upper)\n\n                    mutant = adaptive_mutation(x, F, diversity, cost_function(x), populations)\n                    trial = crossover(x, mutant, CR)\n                    if cost_function(trial) < cost_function(x):\n                        population[i] = trial\n                    else:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                    if np.random.rand() < 0.1:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n            # Information exchange among swarms\n            for i in range(num_swarms):\n                exchange_swarm = np.random.choice([x for x in range(num_swarms) if x != i])\n                exchange_idx = np.random.randint(self.budget)\n                populations[i][exchange_idx] = populations[exchange_swarm][exchange_idx]\n\n        all_populations = np.concatenate(populations)\n        best_idx = np.argmin([cost_function(x) for x in all_populations])\n        best_solution = all_populations[best_idx]\n\n        return best_solution", "name": "EnhancedMultiSwarmEvolutionaryHybridHarmonySearch", "description": "Enhancing exploration by adding a multi-swarm approach with information exchange among swarms.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "6bdf6984-857e-4b9c-bf72-efbe95e7cbb0", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.1539666791903357, 0.16487638146265782, 0.15900466267637314, 0.16268879234922262, 0.14012639330576426, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9799482781666569, 0.9981876031868977, 0.9871873280142246, 0.9484714233945116, 0.9823963435962645, 0.9719957965241044, 0.9930367189994146, 0.9819667284685399, 0.9925756949855238, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.1126317008225034, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 0.0036993686210942123, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20661064307109722, 0.1883461228120139, 0.17579218048408696, 0.1999369180904158, 0.17740879973320867, 0.1886924430605572, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.1357003554125198, 0.13254231323392418, 0.12145920009434463, 0.1387155273583558, 0.13730945121854765, 0.11676002731246482, 0.14568463264249076, 0.14092241483279122, 0.1280848478480342, 0.16124902965938548, 0.1561022183367471, 0.1667976334561032, 0.15870518443591952, 0.15270193456849246, 0.16220190241581622, 0.15127901597955062, 0.17353063573099226, 0.14047736335456307, 0.09989989921586839, 0.09605678983869381, 0.10716210774176638, 0.09500120273374746, 0.11436419551271415, 0.10109741643996695, 0.09812208369943642, 0.12244929523955983, 0.11052532239009139, 0.12992706471991533, 0.1467272681078131, 0.14036568773983238, 0.14711678499612058, 0.1316881543130981, 0.14785057622912734, 0.14262918755463816, 0.1345553064938575, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1255248242688627, 0.16060621107131812, 0.1580928823157255, 0.1513356545171608, 0.13537433152013767, 0.12036266907687043, 0.14578479676063294, 0.14444836304044384, 0.15294909362803888, 0.14009870570354033, 0.13406252454194778, 0.13348704823630742, 0.1195820390294009, 0.11993531585963524, 0.1367504112204837, 0.1607166036882618, 0.15477518177534966, 0.15949139283849112, 0.17819544829146072, 0.18313405177858655, 0.1790753712443215, 0.18195578656271294, 0.20685162527407042, 0.17326035481618252, 0.17275383773212727, 0.18082168665376164, 0.20059152152077075, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "786c8440-18ef-41d4-bbdb-f78e267ac80f", "solution": "import numpy as np\n\nclass EnhancedMultiSwarmEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval, population):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            swarm_idx = np.random.randint(0, len(population))\n            mutant = x + step_size * (population[swarm_idx][np.random.randint(self.budget)] - population[swarm_idx][np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        num_swarms = 5\n        populations = [np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) for _ in range(num_swarms)]\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            for swarm_idx in range(num_swarms):\n                population = populations[swarm_idx]\n                diversity = np.std(population)\n                for i in range(self.budget):\n                    x = population[i]\n                    F = F_adapt + 0.1 * np.random.randn()\n                    F = np.clip(F, F_lower, F_upper)\n\n                    mutant = adaptive_mutation(x, F, diversity, cost_function(x), populations)\n                    trial = crossover(x, mutant, CR)\n                    if cost_function(trial) < cost_function(x):\n                        population[i] = trial\n                    else:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                    if np.random.rand() < 0.1:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n            # Information exchange among swarms\n            for i in range(num_swarms):\n                exchange_swarm = np.random.choice([x for x in range(num_swarms) if x != i])\n                exchange_idx = np.random.randint(self.budget)\n                populations[i][exchange_idx] = populations[exchange_swarm][exchange_idx]\n\n        all_populations = np.concatenate(populations)\n        best_idx = np.argmin([cost_function(x) for x in all_populations])\n        best_solution = all_populations[best_idx]\n\n        return best_solution", "name": "EnhancedMultiSwarmEvolutionaryHybridHarmonySearch", "description": "Enhancing exploration by adding a multi-swarm approach with information exchange among swarms.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6bdf6984-857e-4b9c-bf72-efbe95e7cbb0", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.1539666791903357, 0.16487638146265782, 0.15900466267637314, 0.16268879234922262, 0.14012639330576426, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9799482781666569, 0.9981876031868977, 0.9871873280142246, 0.9484714233945116, 0.9823963435962645, 0.9719957965241044, 0.9930367189994146, 0.9819667284685399, 0.9925756949855238, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.1126317008225034, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 0.0036993686210942123, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20661064307109722, 0.1883461228120139, 0.17579218048408696, 0.1999369180904158, 0.17740879973320867, 0.1886924430605572, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.1357003554125198, 0.13254231323392418, 0.12145920009434463, 0.1387155273583558, 0.13730945121854765, 0.11676002731246482, 0.14568463264249076, 0.14092241483279122, 0.1280848478480342, 0.16124902965938548, 0.1561022183367471, 0.1667976334561032, 0.15870518443591952, 0.15270193456849246, 0.16220190241581622, 0.15127901597955062, 0.17353063573099226, 0.14047736335456307, 0.09989989921586839, 0.09605678983869381, 0.10716210774176638, 0.09500120273374746, 0.11436419551271415, 0.10109741643996695, 0.09812208369943642, 0.12244929523955983, 0.11052532239009139, 0.12992706471991533, 0.1467272681078131, 0.14036568773983238, 0.14711678499612058, 0.1316881543130981, 0.14785057622912734, 0.14262918755463816, 0.1345553064938575, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1255248242688627, 0.16060621107131812, 0.1580928823157255, 0.1513356545171608, 0.13537433152013767, 0.12036266907687043, 0.14578479676063294, 0.14444836304044384, 0.15294909362803888, 0.14009870570354033, 0.13406252454194778, 0.13348704823630742, 0.1195820390294009, 0.11993531585963524, 0.1367504112204837, 0.1607166036882618, 0.15477518177534966, 0.15949139283849112, 0.17819544829146072, 0.18313405177858655, 0.1790753712443215, 0.18195578656271294, 0.20685162527407042, 0.17326035481618252, 0.17275383773212727, 0.18082168665376164, 0.20059152152077075, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "ca576ded-8c9b-4882-b09f-ca6dc66127eb", "solution": "import numpy as np\n\nclass EnhancedMultiSwarmEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval, population):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            swarm_idx = np.random.randint(0, len(population))\n            mutant = x + step_size * (population[swarm_idx][np.random.randint(self.budget)] - population[swarm_idx][np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        num_swarms = 5\n        populations = [np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) for _ in range(num_swarms)]\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            for swarm_idx in range(num_swarms):\n                population = populations[swarm_idx]\n                diversity = np.std(population)\n                for i in range(self.budget):\n                    x = population[i]\n                    F = F_adapt + 0.1 * np.random.randn()\n                    F = np.clip(F, F_lower, F_upper)\n\n                    mutant = adaptive_mutation(x, F, diversity, cost_function(x), populations)\n                    trial = crossover(x, mutant, CR)\n                    if cost_function(trial) < cost_function(x):\n                        population[i] = trial\n                    else:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                    if np.random.rand() < 0.1:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n            # Information exchange among swarms\n            for i in range(num_swarms):\n                exchange_swarm = np.random.choice([x for x in range(num_swarms) if x != i])\n                exchange_idx = np.random.randint(self.budget)\n                populations[i][exchange_idx] = populations[exchange_swarm][exchange_idx]\n\n        all_populations = np.concatenate(populations)\n        best_idx = np.argmin([cost_function(x) for x in all_populations])\n        best_solution = all_populations[best_idx]\n\n        return best_solution", "name": "EnhancedMultiSwarmEvolutionaryHybridHarmonySearch", "description": "Enhancing exploration by adding a multi-swarm approach with information exchange among swarms.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6bdf6984-857e-4b9c-bf72-efbe95e7cbb0", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.1539666791903357, 0.16487638146265782, 0.15900466267637314, 0.16268879234922262, 0.14012639330576426, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9799482781666569, 0.9981876031868977, 0.9871873280142246, 0.9484714233945116, 0.9823963435962645, 0.9719957965241044, 0.9930367189994146, 0.9819667284685399, 0.9925756949855238, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.1126317008225034, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 0.0036993686210942123, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20661064307109722, 0.1883461228120139, 0.17579218048408696, 0.1999369180904158, 0.17740879973320867, 0.1886924430605572, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.1357003554125198, 0.13254231323392418, 0.12145920009434463, 0.1387155273583558, 0.13730945121854765, 0.11676002731246482, 0.14568463264249076, 0.14092241483279122, 0.1280848478480342, 0.16124902965938548, 0.1561022183367471, 0.1667976334561032, 0.15870518443591952, 0.15270193456849246, 0.16220190241581622, 0.15127901597955062, 0.17353063573099226, 0.14047736335456307, 0.09989989921586839, 0.09605678983869381, 0.10716210774176638, 0.09500120273374746, 0.11436419551271415, 0.10109741643996695, 0.09812208369943642, 0.12244929523955983, 0.11052532239009139, 0.12992706471991533, 0.1467272681078131, 0.14036568773983238, 0.14711678499612058, 0.1316881543130981, 0.14785057622912734, 0.14262918755463816, 0.1345553064938575, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1255248242688627, 0.16060621107131812, 0.1580928823157255, 0.1513356545171608, 0.13537433152013767, 0.12036266907687043, 0.14578479676063294, 0.14444836304044384, 0.15294909362803888, 0.14009870570354033, 0.13406252454194778, 0.13348704823630742, 0.1195820390294009, 0.11993531585963524, 0.1367504112204837, 0.1607166036882618, 0.15477518177534966, 0.15949139283849112, 0.17819544829146072, 0.18313405177858655, 0.1790753712443215, 0.18195578656271294, 0.20685162527407042, 0.17326035481618252, 0.17275383773212727, 0.18082168665376164, 0.20059152152077075, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "84185a7c-8415-40f6-a4e5-138008e62ff4", "solution": "import numpy as np\n\nclass EnhancedMultiSwarmEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval, population):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            swarm_idx = np.random.randint(0, len(population))\n            mutant = x + step_size * (population[swarm_idx][np.random.randint(self.budget)] - population[swarm_idx][np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        num_swarms = 5\n        populations = [np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) for _ in range(num_swarms)]\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            for swarm_idx in range(num_swarms):\n                population = populations[swarm_idx]\n                diversity = np.std(population)\n                for i in range(self.budget):\n                    x = population[i]\n                    F = F_adapt + 0.1 * np.random.randn()\n                    F = np.clip(F, F_lower, F_upper)\n\n                    mutant = adaptive_mutation(x, F, diversity, cost_function(x), populations)\n                    trial = crossover(x, mutant, CR)\n                    if cost_function(trial) < cost_function(x):\n                        population[i] = trial\n                    else:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                    if np.random.rand() < 0.1:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                # Dynamic Population Sizing\n                if np.random.rand() < 0.2:  # Adjust population size\n                    if np.std(population) > 1.0:\n                        population = np.vstack((population, np.random.uniform(-5.0, 5.0, (1, self.dim))))\n                    elif len(population) > 1:\n                        population = np.delete(population, np.random.randint(len(population)), axis=0)\n\n            # Information exchange among swarms\n            for i in range(num_swarms):\n                exchange_swarm = np.random.choice([x for x in range(num_swarms) if x != i])\n                exchange_idx = np.random.randint(self.budget)\n                populations[i][exchange_idx] = populations[exchange_swarm][exchange_idx]\n\n        all_populations = np.concatenate(populations)\n        best_idx = np.argmin([cost_function(x) for x in all_populations])\n        best_solution = all_populations[best_idx]\n\n        return best_solution", "name": "EnhancedMultiSwarmEvolutionaryHybridHarmonySearch", "description": "Improving exploration and exploitation balance by incorporating a dynamic population sizing strategy.", "configspace": "", "generation": 85, "fitness": 0.11835265432041353, "feedback": "The algorithm EnhancedMultiSwarmEvolutionaryHybridHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "6bdf6984-857e-4b9c-bf72-efbe95e7cbb0", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.1539666791903357, 0.16487638146265782, 0.15900466267637314, 0.16268879234922262, 0.14012639330576426, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9799482781666569, 0.9981876031868977, 0.9871873280142246, 0.9484714233945116, 0.9823963435962645, 0.9719957965241044, 0.9930367189994146, 0.9819667284685399, 0.9925756949855238, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.1126317008225034, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 0.0036993686210942123, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20661064307109722, 0.1883461228120139, 0.17579218048408696, 0.1999369180904158, 0.17740879973320867, 0.1886924430605572, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.1357003554125198, 0.13254231323392418, 0.12145920009434463, 0.1387155273583558, 0.13730945121854765, 0.11676002731246482, 0.14568463264249076, 0.14092241483279122, 0.1280848478480342, 0.16124902965938548, 0.1561022183367471, 0.1667976334561032, 0.15870518443591952, 0.15270193456849246, 0.16220190241581622, 0.15127901597955062, 0.17353063573099226, 0.14047736335456307, 0.09989989921586839, 0.09605678983869381, 0.10716210774176638, 0.09500120273374746, 0.11436419551271415, 0.10109741643996695, 0.09812208369943642, 0.12244929523955983, 0.11052532239009139, 0.12992706471991533, 0.1467272681078131, 0.14036568773983238, 0.14711678499612058, 0.1316881543130981, 0.14785057622912734, 0.14262918755463816, 0.1345553064938575, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1255248242688627, 0.16060621107131812, 0.1580928823157255, 0.1513356545171608, 0.13537433152013767, 0.12036266907687043, 0.14578479676063294, 0.14444836304044384, 0.15294909362803888, 0.14009870570354033, 0.13406252454194778, 0.13348704823630742, 0.1195820390294009, 0.11993531585963524, 0.1367504112204837, 0.1607166036882618, 0.15477518177534966, 0.15949139283849112, 0.17819544829146072, 0.18313405177858655, 0.1790753712443215, 0.18195578656271294, 0.20685162527407042, 0.17326035481618252, 0.17275383773212727, 0.18082168665376164, 0.20059152152077075, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "9c87afcf-015f-4e47-a4f4-512bd8a406fe", "solution": "class EnhancedMultiSwarmEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval, population):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            swarm_idx = np.random.randint(0, len(population))\n            mutant = x + step_size * (population[swarm_idx][np.random.randint(self.budget)] - population[swarm_idx][np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        num_swarms = 5\n        populations = [np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) for _ in range(num_swarms)]\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            for swarm_idx in range(num_swarms):\n                population = populations[swarm_idx]\n                diversity = np.std(population)\n                for i in range(self.budget):\n                    x = population[i]\n                    F = F_adapt + 0.1 * np.random.randn()\n                    F = np.clip(F, F_lower, F_upper)\n\n                    mutant = adaptive_mutation(x, F, diversity, cost_function(x), populations)\n                    trial = crossover(x, mutant, CR)\n                    if cost_function(trial) < cost_function(x):\n                        population[i] = trial\n                    else:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                    if np.random.rand() < 0.1:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n            # Information exchange among swarms\n            for i in range(num_swarms):\n                exchange_swarm = np.random.choice([x for x in range(num_swarms) if x != i])\n                exchange_idx = np.random.randint(self.budget)\n                populations[i][exchange_idx] = populations[exchange_swarm][exchange_idx]\n\n        all_populations = np.concatenate(populations)\n        best_idx = np.argmin([cost_function(x) for x in all_populations])\n        best_solution = all_populations[best_idx]\n\n        return best_solution", "name": "EnhancedMultiSwarmEvolutionaryHybridHarmonySearch", "description": "Improving convergence by dynamically adjusting mutation and crossover rates based on population diversity.", "configspace": "", "generation": 86, "fitness": 0.11835265432041353, "feedback": "The algorithm EnhancedMultiSwarmEvolutionaryHybridHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "6bdf6984-857e-4b9c-bf72-efbe95e7cbb0", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.1539666791903357, 0.16487638146265782, 0.15900466267637314, 0.16268879234922262, 0.14012639330576426, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9799482781666569, 0.9981876031868977, 0.9871873280142246, 0.9484714233945116, 0.9823963435962645, 0.9719957965241044, 0.9930367189994146, 0.9819667284685399, 0.9925756949855238, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.1126317008225034, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 0.0036993686210942123, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20661064307109722, 0.1883461228120139, 0.17579218048408696, 0.1999369180904158, 0.17740879973320867, 0.1886924430605572, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.1357003554125198, 0.13254231323392418, 0.12145920009434463, 0.1387155273583558, 0.13730945121854765, 0.11676002731246482, 0.14568463264249076, 0.14092241483279122, 0.1280848478480342, 0.16124902965938548, 0.1561022183367471, 0.1667976334561032, 0.15870518443591952, 0.15270193456849246, 0.16220190241581622, 0.15127901597955062, 0.17353063573099226, 0.14047736335456307, 0.09989989921586839, 0.09605678983869381, 0.10716210774176638, 0.09500120273374746, 0.11436419551271415, 0.10109741643996695, 0.09812208369943642, 0.12244929523955983, 0.11052532239009139, 0.12992706471991533, 0.1467272681078131, 0.14036568773983238, 0.14711678499612058, 0.1316881543130981, 0.14785057622912734, 0.14262918755463816, 0.1345553064938575, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1255248242688627, 0.16060621107131812, 0.1580928823157255, 0.1513356545171608, 0.13537433152013767, 0.12036266907687043, 0.14578479676063294, 0.14444836304044384, 0.15294909362803888, 0.14009870570354033, 0.13406252454194778, 0.13348704823630742, 0.1195820390294009, 0.11993531585963524, 0.1367504112204837, 0.1607166036882618, 0.15477518177534966, 0.15949139283849112, 0.17819544829146072, 0.18313405177858655, 0.1790753712443215, 0.18195578656271294, 0.20685162527407042, 0.17326035481618252, 0.17275383773212727, 0.18082168665376164, 0.20059152152077075, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "f5b46ce3-1ad4-4e99-ad40-4bf8495c92c8", "solution": "import numpy as np\n\nclass EnhancedMultiSwarmEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval, population):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            swarm_idx = np.random.randint(0, len(population))\n            mutant = x + step_size * (population[swarm_idx][np.random.randint(self.budget)] - population[swarm_idx][np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        num_swarms = 5\n        populations = [np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) for _ in range(num_swarms)]\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n\n        for _ in range(self.budget):\n            for swarm_idx in range(num_swarms):\n                population = populations[swarm_idx]\n                diversity = np.std(population)\n                for i in range(self.budget):\n                    x = population[i]\n                    F = F_adapt + 0.1 * np.random.randn()\n                    F = np.clip(F, F_lower, F_upper)\n\n                    mutant = adaptive_mutation(x, F, diversity, cost_function(x), populations)\n                    trial = crossover(x, mutant, CR)\n                    if cost_function(trial) < cost_function(x):\n                        population[i] = trial\n                    else:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                    if np.random.rand() < 0.1:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n            # Information exchange among swarms\n            for i in range(num_swarms):\n                exchange_swarm = np.random.choice([x for x in range(num_swarms) if x != i])\n                exchange_idx = np.random.randint(self.budget)\n                populations[i][exchange_idx] = populations[exchange_swarm][exchange_idx]\n\n        all_populations = np.concatenate(populations)\n        best_idx = np.argmin([cost_function(x) for x in all_populations])\n        best_solution = all_populations[best_idx]\n\n        return best_solution", "name": "EnhancedMultiSwarmEvolutionaryHybridHarmonySearch", "description": "Enhancing exploration by adding a multi-swarm approach with information exchange among swarms.", "configspace": "", "generation": 69, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "6bdf6984-857e-4b9c-bf72-efbe95e7cbb0", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.1539666791903357, 0.16487638146265782, 0.15900466267637314, 0.16268879234922262, 0.14012639330576426, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9799482781666569, 0.9981876031868977, 0.9871873280142246, 0.9484714233945116, 0.9823963435962645, 0.9719957965241044, 0.9930367189994146, 0.9819667284685399, 0.9925756949855238, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.1126317008225034, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 0.0036993686210942123, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20661064307109722, 0.1883461228120139, 0.17579218048408696, 0.1999369180904158, 0.17740879973320867, 0.1886924430605572, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.1357003554125198, 0.13254231323392418, 0.12145920009434463, 0.1387155273583558, 0.13730945121854765, 0.11676002731246482, 0.14568463264249076, 0.14092241483279122, 0.1280848478480342, 0.16124902965938548, 0.1561022183367471, 0.1667976334561032, 0.15870518443591952, 0.15270193456849246, 0.16220190241581622, 0.15127901597955062, 0.17353063573099226, 0.14047736335456307, 0.09989989921586839, 0.09605678983869381, 0.10716210774176638, 0.09500120273374746, 0.11436419551271415, 0.10109741643996695, 0.09812208369943642, 0.12244929523955983, 0.11052532239009139, 0.12992706471991533, 0.1467272681078131, 0.14036568773983238, 0.14711678499612058, 0.1316881543130981, 0.14785057622912734, 0.14262918755463816, 0.1345553064938575, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1255248242688627, 0.16060621107131812, 0.1580928823157255, 0.1513356545171608, 0.13537433152013767, 0.12036266907687043, 0.14578479676063294, 0.14444836304044384, 0.15294909362803888, 0.14009870570354033, 0.13406252454194778, 0.13348704823630742, 0.1195820390294009, 0.11993531585963524, 0.1367504112204837, 0.1607166036882618, 0.15477518177534966, 0.15949139283849112, 0.17819544829146072, 0.18313405177858655, 0.1790753712443215, 0.18195578656271294, 0.20685162527407042, 0.17326035481618252, 0.17275383773212727, 0.18082168665376164, 0.20059152152077075, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "8f1b6d0c-2ea7-4997-a574-5c0cdb390d6f", "solution": "import numpy as np\n\nclass DynamicRateEnhancedMultiSwarmEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval, population):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            swarm_idx = np.random.randint(0, len(population))\n            mutant = x + step_size * (population[swarm_idx][np.random.randint(self.budget)] - population[swarm_idx][np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        num_swarms = 5\n        populations = [np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) for _ in range(num_swarms)]\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n        CR_adapt = 0.9\n        CR_lower, CR_upper = 0.7, 1.0\n\n        for _ in range(self.budget):\n            for swarm_idx in range(num_swarms):\n                population = populations[swarm_idx]\n                diversity = np.std(population)\n                for i in range(self.budget):\n                    x = population[i]\n                    F = F_adapt + 0.1 * np.random.randn()\n                    F = np.clip(F, F_lower, F_upper)\n                    CR = CR_adapt + 0.1 * np.random.randn()\n                    CR = np.clip(CR, CR_lower, CR_upper)\n\n                    mutant = adaptive_mutation(x, F, diversity, cost_function(x), populations)\n                    trial = crossover(x, mutant, CR)\n                    if cost_function(trial) < cost_function(x):\n                        population[i] = trial\n                    else:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                    if np.random.rand() < 0.1:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n            # Information exchange among swarms\n            for i in range(num_swarms):\n                exchange_swarm = np.random.choice([x for x in range(num_swarms) if x != i])\n                exchange_idx = np.random.randint(self.budget)\n                populations[i][exchange_idx] = populations[exchange_swarm][exchange_idx]\n\n        all_populations = np.concatenate(populations)\n        best_idx = np.argmin([cost_function(x) for x in all_populations])\n        best_solution = all_populations[best_idx]\n\n        return best_solution", "name": "DynamicRateEnhancedMultiSwarmEvolutionaryHybridHarmonySearch", "description": "Improving exploration and exploitation balance by introducing a dynamic update of mutation and crossover rates based on population diversity.", "configspace": "", "generation": 88, "fitness": 0.11869545979613884, "feedback": "The algorithm DynamicRateEnhancedMultiSwarmEvolutionaryHybridHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "6bdf6984-857e-4b9c-bf72-efbe95e7cbb0", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.15403729372910835, 0.16485052096657127, 0.15895233292401567, 0.16268879234922262, 0.14022572148753265, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9861225557962815, 0.9845697400540335, 0.9825182634880543, 0.9928171680597329, 0.9784673602411167, 0.9941905324698088, 0.9715851431297241, 0.9643213879485504, 0.9764839784163721, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08992449682948267, 0.08299744133218068, 0.11270100872903477, 0.08752786722852868, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 9.999999999998899e-05, 0.048107652755784325, 0.0025382472110415666, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.015326726098678245, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20661008392810376, 0.18834580867213868, 0.17579218048408696, 0.2025248536379043, 0.17740226273796744, 0.18869859327373473, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.1353478236142337, 0.1883637165218066, 0.12053802963972304, 0.1387155273583558, 0.1383417841617498, 0.11184344814271174, 0.14627104226881804, 0.14068060420781325, 0.11741548601912999, 0.1606583706757838, 0.1496816590257808, 0.1667976334561032, 0.15870518443591952, 0.1525697722498408, 0.1622150060558477, 0.15127901597955062, 0.17353157571146183, 0.14049135311185712, 0.10072869022387021, 0.09038497643210286, 0.10716210774176638, 0.09500120273374746, 0.11434512986173961, 0.10109362614848993, 0.09812208369943642, 0.12245612943804896, 0.11047177870440683, 0.12991170131181373, 0.1467272681078131, 0.14036465663538056, 0.14711678499612058, 0.1316881543130981, 0.14784841317392816, 0.14262918755463816, 0.1345553064938575, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1253386609536803, 0.1604909488566011, 0.1580928823157255, 0.1513356545171608, 0.13537433152013767, 0.12035763892156992, 0.1455891272416424, 0.14444836304044384, 0.15294909362803888, 0.14009870570354033, 0.13406252454194778, 0.13348704823630742, 0.1195820390294009, 0.11993531585963524, 0.1367504112204837, 0.17643359737873288, 0.1589307597231271, 0.15808889486759148, 0.21233194653836485, 0.18301540706219954, 0.17635618573292888, 0.18375574570586972, 0.20527890136182136, 0.17331001597264584, 0.172648932875495, 0.17836566082832817, 0.2001292078113205, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "9c8e321a-740a-4c6b-a435-f0597563fcef", "solution": "import numpy as np\n\nclass DynamicRateEnhancedMultiSwarmEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval, population):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            swarm_idx = np.random.randint(0, len(population))\n            mutant = x + step_size * (population[swarm_idx][np.random.randint(self.budget)] - population[swarm_idx][np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        num_swarms = 5\n        populations = [np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) for _ in range(num_swarms)]\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n        CR_adapt = 0.9\n        CR_lower, CR_upper = 0.7, 1.0\n\n        for _ in range(self.budget):\n            for swarm_idx in range(num_swarms):\n                population = populations[swarm_idx]\n                diversity = np.std(population)\n                for i in range(self.budget):\n                    x = population[i]\n                    F = F_adapt + 0.1 * np.random.randn()\n                    F = np.clip(F, F_lower, F_upper)\n                    CR = CR_adapt + 0.1 * np.random.randn()\n                    CR = np.clip(CR, CR_lower, CR_upper)\n\n                    mutant = adaptive_mutation(x, F, diversity, cost_function(x), populations)\n                    trial = crossover(x, mutant, CR)\n                    if cost_function(trial) < cost_function(x):\n                        population[i] = trial\n                    else:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                    if np.random.rand() < 0.1:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n            # Information exchange among swarms\n            for i in range(num_swarms):\n                exchange_swarm = np.random.choice([x for x in range(num_swarms) if x != i])\n                exchange_idx = np.random.randint(self.budget)\n                populations[i][exchange_idx] = populations[exchange_swarm][exchange_idx]\n\n        all_populations = np.concatenate(populations)\n        best_idx = np.argmin([cost_function(x) for x in all_populations])\n        best_solution = all_populations[best_idx]\n\n        return best_solution", "name": "DynamicRateEnhancedMultiSwarmEvolutionaryHybridHarmonySearch", "description": "Improving exploration and exploitation balance by introducing a dynamic update of mutation and crossover rates based on population diversity.", "configspace": "", "generation": 89, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8f1b6d0c-2ea7-4997-a574-5c0cdb390d6f", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.15403729372910835, 0.16485052096657127, 0.15895233292401567, 0.16268879234922262, 0.14022572148753265, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9861225557962815, 0.9845697400540335, 0.9825182634880543, 0.9928171680597329, 0.9784673602411167, 0.9941905324698088, 0.9715851431297241, 0.9643213879485504, 0.9764839784163721, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08992449682948267, 0.08299744133218068, 0.11270100872903477, 0.08752786722852868, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 9.999999999998899e-05, 0.048107652755784325, 0.0025382472110415666, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.015326726098678245, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20661008392810376, 0.18834580867213868, 0.17579218048408696, 0.2025248536379043, 0.17740226273796744, 0.18869859327373473, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.1353478236142337, 0.1883637165218066, 0.12053802963972304, 0.1387155273583558, 0.1383417841617498, 0.11184344814271174, 0.14627104226881804, 0.14068060420781325, 0.11741548601912999, 0.1606583706757838, 0.1496816590257808, 0.1667976334561032, 0.15870518443591952, 0.1525697722498408, 0.1622150060558477, 0.15127901597955062, 0.17353157571146183, 0.14049135311185712, 0.10072869022387021, 0.09038497643210286, 0.10716210774176638, 0.09500120273374746, 0.11434512986173961, 0.10109362614848993, 0.09812208369943642, 0.12245612943804896, 0.11047177870440683, 0.12991170131181373, 0.1467272681078131, 0.14036465663538056, 0.14711678499612058, 0.1316881543130981, 0.14784841317392816, 0.14262918755463816, 0.1345553064938575, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1253386609536803, 0.1604909488566011, 0.1580928823157255, 0.1513356545171608, 0.13537433152013767, 0.12035763892156992, 0.1455891272416424, 0.14444836304044384, 0.15294909362803888, 0.14009870570354033, 0.13406252454194778, 0.13348704823630742, 0.1195820390294009, 0.11993531585963524, 0.1367504112204837, 0.17643359737873288, 0.1589307597231271, 0.15808889486759148, 0.21233194653836485, 0.18301540706219954, 0.17635618573292888, 0.18375574570586972, 0.20527890136182136, 0.17331001597264584, 0.172648932875495, 0.17836566082832817, 0.2001292078113205, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "568e3e8e-12ce-44f4-a4cc-cf692450b575", "solution": "import numpy as np\n\nclass EnhancedDynamicRateEnhancedMultiSwarmEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval, population):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            swarm_idx = np.random.randint(0, len(population))\n            mutant = x + step_size * (population[swarm_idx][np.random.randint(self.budget)] - population[swarm_idx][np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def opposition_based_mutation(x, F, diversity, fitness_eval, population):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            swarm_idx = np.random.randint(0, len(population))\n            mutant = x - step_size * (population[swarm_idx][np.random.randint(self.budget)] - population[swarm_idx][np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        num_swarms = 5\n        populations = [np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) for _ in range(num_swarms)]\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n        CR_adapt = 0.9\n        CR_lower, CR_upper = 0.7, 1.0\n\n        for _ in range(self.budget):\n            for swarm_idx in range(num_swarms):\n                population = populations[swarm_idx]\n                diversity = np.std(population)\n                for i in range(self.budget):\n                    x = population[i]\n                    F = F_adapt + 0.1 * np.random.randn()\n                    F = np.clip(F, F_lower, F_upper)\n                    CR = CR_adapt + 0.1 * np.random.randn()\n                    CR = np.clip(CR, CR_lower, CR_upper)\n\n                    mutant = adaptive_mutation(x, F, diversity, cost_function(x), populations)\n                    trial = crossover(x, mutant, CR)\n                    if cost_function(trial) < cost_function(x):\n                        population[i] = trial\n                    else:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                    if np.random.rand() < 0.1:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n            # Information exchange among swarms\n            for i in range(num_swarms):\n                exchange_swarm = np.random.choice([x for x in range(num_swarms) if x != i])\n                exchange_idx = np.random.randint(self.budget)\n                populations[i][exchange_idx] = populations[exchange_swarm][exchange_idx]\n\n        all_populations = np.concatenate(populations)\n        best_idx = np.argmin([cost_function(x) for x in all_populations])\n        best_solution = all_populations[best_idx]\n\n        return best_solution", "name": "EnhancedDynamicRateEnhancedMultiSwarmEvolutionaryHybridHarmonySearch", "description": "Enhancing population diversity through adaptive mutation strategies and improving exploration by introducing a new mutation operator based on opposition-based learning.", "configspace": "", "generation": 90, "fitness": 0.11869545979613884, "feedback": "The algorithm EnhancedDynamicRateEnhancedMultiSwarmEvolutionaryHybridHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "8f1b6d0c-2ea7-4997-a574-5c0cdb390d6f", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.15403729372910835, 0.16485052096657127, 0.15895233292401567, 0.16268879234922262, 0.14022572148753265, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9861225557962815, 0.9845697400540335, 0.9825182634880543, 0.9928171680597329, 0.9784673602411167, 0.9941905324698088, 0.9715851431297241, 0.9643213879485504, 0.9764839784163721, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08992449682948267, 0.08299744133218068, 0.11270100872903477, 0.08752786722852868, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 9.999999999998899e-05, 0.048107652755784325, 0.0025382472110415666, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.015326726098678245, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20661008392810376, 0.18834580867213868, 0.17579218048408696, 0.2025248536379043, 0.17740226273796744, 0.18869859327373473, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.1353478236142337, 0.1883637165218066, 0.12053802963972304, 0.1387155273583558, 0.1383417841617498, 0.11184344814271174, 0.14627104226881804, 0.14068060420781325, 0.11741548601912999, 0.1606583706757838, 0.1496816590257808, 0.1667976334561032, 0.15870518443591952, 0.1525697722498408, 0.1622150060558477, 0.15127901597955062, 0.17353157571146183, 0.14049135311185712, 0.10072869022387021, 0.09038497643210286, 0.10716210774176638, 0.09500120273374746, 0.11434512986173961, 0.10109362614848993, 0.09812208369943642, 0.12245612943804896, 0.11047177870440683, 0.12991170131181373, 0.1467272681078131, 0.14036465663538056, 0.14711678499612058, 0.1316881543130981, 0.14784841317392816, 0.14262918755463816, 0.1345553064938575, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1253386609536803, 0.1604909488566011, 0.1580928823157255, 0.1513356545171608, 0.13537433152013767, 0.12035763892156992, 0.1455891272416424, 0.14444836304044384, 0.15294909362803888, 0.14009870570354033, 0.13406252454194778, 0.13348704823630742, 0.1195820390294009, 0.11993531585963524, 0.1367504112204837, 0.17643359737873288, 0.1589307597231271, 0.15808889486759148, 0.21233194653836485, 0.18301540706219954, 0.17635618573292888, 0.18375574570586972, 0.20527890136182136, 0.17331001597264584, 0.172648932875495, 0.17836566082832817, 0.2001292078113205, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "b8bbdd51-7344-4ce2-9c8d-06c1703dd927", "solution": "import numpy as np\n\nclass DynamicRateEnhancedMultiSwarmEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval, population):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            swarm_idx = np.random.randint(0, len(population))\n            mutant = x + step_size * (population[swarm_idx][np.random.randint(self.budget)] - population[swarm_idx][np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        num_swarms = 5\n        populations = [np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) for _ in range(num_swarms)]\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n        CR_adapt = 0.9\n        CR_lower, CR_upper = 0.7, 1.0\n\n        for _ in range(self.budget):\n            for swarm_idx in range(num_swarms):\n                population = populations[swarm_idx]\n                diversity = np.std(population)\n                for i in range(self.budget):\n                    x = population[i]\n                    F = F_adapt + 0.1 * np.random.randn()\n                    F = np.clip(F, F_lower, F_upper)\n                    CR = CR_adapt + 0.1 * np.random.randn()\n                    CR = np.clip(CR, CR_lower, CR_upper)\n\n                    mutant = adaptive_mutation(x, F, diversity, cost_function(x), populations)\n                    trial = crossover(x, mutant, CR)\n                    if cost_function(trial) < cost_function(x):\n                        population[i] = trial\n                    else:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                    if np.random.rand() < 0.1:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n            # Information exchange among swarms\n            for i in range(num_swarms):\n                exchange_swarm = np.random.choice([x for x in range(num_swarms) if x != i])\n                exchange_idx = np.random.randint(self.budget)\n                populations[i][exchange_idx] = populations[exchange_swarm][exchange_idx]\n\n        all_populations = np.concatenate(populations)\n        best_idx = np.argmin([cost_function(x) for x in all_populations])\n        best_solution = all_populations[best_idx]\n\n        return best_solution", "name": "DynamicRateEnhancedMultiSwarmEvolutionaryHybridHarmonySearch", "description": "Improving exploration and exploitation balance by introducing a dynamic update of mutation and crossover rates based on population diversity.", "configspace": "", "generation": 89, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "8f1b6d0c-2ea7-4997-a574-5c0cdb390d6f", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.15403729372910835, 0.16485052096657127, 0.15895233292401567, 0.16268879234922262, 0.14022572148753265, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9861225557962815, 0.9845697400540335, 0.9825182634880543, 0.9928171680597329, 0.9784673602411167, 0.9941905324698088, 0.9715851431297241, 0.9643213879485504, 0.9764839784163721, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08992449682948267, 0.08299744133218068, 0.11270100872903477, 0.08752786722852868, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 9.999999999998899e-05, 0.048107652755784325, 0.0025382472110415666, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.015326726098678245, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20661008392810376, 0.18834580867213868, 0.17579218048408696, 0.2025248536379043, 0.17740226273796744, 0.18869859327373473, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.1353478236142337, 0.1883637165218066, 0.12053802963972304, 0.1387155273583558, 0.1383417841617498, 0.11184344814271174, 0.14627104226881804, 0.14068060420781325, 0.11741548601912999, 0.1606583706757838, 0.1496816590257808, 0.1667976334561032, 0.15870518443591952, 0.1525697722498408, 0.1622150060558477, 0.15127901597955062, 0.17353157571146183, 0.14049135311185712, 0.10072869022387021, 0.09038497643210286, 0.10716210774176638, 0.09500120273374746, 0.11434512986173961, 0.10109362614848993, 0.09812208369943642, 0.12245612943804896, 0.11047177870440683, 0.12991170131181373, 0.1467272681078131, 0.14036465663538056, 0.14711678499612058, 0.1316881543130981, 0.14784841317392816, 0.14262918755463816, 0.1345553064938575, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1253386609536803, 0.1604909488566011, 0.1580928823157255, 0.1513356545171608, 0.13537433152013767, 0.12035763892156992, 0.1455891272416424, 0.14444836304044384, 0.15294909362803888, 0.14009870570354033, 0.13406252454194778, 0.13348704823630742, 0.1195820390294009, 0.11993531585963524, 0.1367504112204837, 0.17643359737873288, 0.1589307597231271, 0.15808889486759148, 0.21233194653836485, 0.18301540706219954, 0.17635618573292888, 0.18375574570586972, 0.20527890136182136, 0.17331001597264584, 0.172648932875495, 0.17836566082832817, 0.2001292078113205, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "c23e6d16-ab50-4539-a7b4-bc26b52b07d4", "solution": "import numpy as np\n\nclass DynamicRateEnhancedMultiSwarmEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval, population):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            swarm_idx = np.random.randint(0, len(population))\n            mutant = x + step_size * (population[swarm_idx][np.random.randint(self.budget)] - population[swarm_idx][np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        num_swarms = 5\n        populations = [np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) for _ in range(num_swarms)]\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n        CR_adapt = 0.9\n        CR_lower, CR_upper = 0.7, 1.0\n\n        for _ in range(self.budget):\n            for swarm_idx in range(num_swarms):\n                population = populations[swarm_idx]\n                diversity = np.std(population)\n                for i in range(self.budget):\n                    x = population[i]\n                    F = F_adapt + 0.1 * np.random.randn()\n                    F = np.clip(F, F_lower, F_upper)\n                    CR = CR_adapt + 0.1 * np.random.randn()\n                    CR = np.clip(CR, CR_lower, CR_upper)\n\n                    mutant = adaptive_mutation(x, F, diversity, cost_function(x), populations)\n                    trial = crossover(x, mutant, CR)\n                    if cost_function(trial) < cost_function(x):\n                        population[i] = trial\n                    else:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                    if np.random.rand() < 0.1:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n            # Information exchange among swarms\n            for i in range(num_swarms):\n                exchange_swarm = np.random.choice([x for x in range(num_swarms) if x != i])\n                exchange_idx = np.random.randint(self.budget)\n                populations[i][exchange_idx] = populations[exchange_swarm][exchange_idx]\n\n        all_populations = np.concatenate(populations)\n        best_idx = np.argmin([cost_function(x) for x in all_populations])\n        best_solution = all_populations[best_idx]\n\n        return best_solution", "name": "DynamicRateEnhancedMultiSwarmEvolutionaryHybridHarmonySearch", "description": "Improving exploration and exploitation balance by introducing a dynamic update of mutation and crossover rates based on population diversity.", "configspace": "", "generation": 89, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "8f1b6d0c-2ea7-4997-a574-5c0cdb390d6f", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.15403729372910835, 0.16485052096657127, 0.15895233292401567, 0.16268879234922262, 0.14022572148753265, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9861225557962815, 0.9845697400540335, 0.9825182634880543, 0.9928171680597329, 0.9784673602411167, 0.9941905324698088, 0.9715851431297241, 0.9643213879485504, 0.9764839784163721, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08992449682948267, 0.08299744133218068, 0.11270100872903477, 0.08752786722852868, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 9.999999999998899e-05, 0.048107652755784325, 0.0025382472110415666, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.015326726098678245, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20661008392810376, 0.18834580867213868, 0.17579218048408696, 0.2025248536379043, 0.17740226273796744, 0.18869859327373473, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.1353478236142337, 0.1883637165218066, 0.12053802963972304, 0.1387155273583558, 0.1383417841617498, 0.11184344814271174, 0.14627104226881804, 0.14068060420781325, 0.11741548601912999, 0.1606583706757838, 0.1496816590257808, 0.1667976334561032, 0.15870518443591952, 0.1525697722498408, 0.1622150060558477, 0.15127901597955062, 0.17353157571146183, 0.14049135311185712, 0.10072869022387021, 0.09038497643210286, 0.10716210774176638, 0.09500120273374746, 0.11434512986173961, 0.10109362614848993, 0.09812208369943642, 0.12245612943804896, 0.11047177870440683, 0.12991170131181373, 0.1467272681078131, 0.14036465663538056, 0.14711678499612058, 0.1316881543130981, 0.14784841317392816, 0.14262918755463816, 0.1345553064938575, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1253386609536803, 0.1604909488566011, 0.1580928823157255, 0.1513356545171608, 0.13537433152013767, 0.12035763892156992, 0.1455891272416424, 0.14444836304044384, 0.15294909362803888, 0.14009870570354033, 0.13406252454194778, 0.13348704823630742, 0.1195820390294009, 0.11993531585963524, 0.1367504112204837, 0.17643359737873288, 0.1589307597231271, 0.15808889486759148, 0.21233194653836485, 0.18301540706219954, 0.17635618573292888, 0.18375574570586972, 0.20527890136182136, 0.17331001597264584, 0.172648932875495, 0.17836566082832817, 0.2001292078113205, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "b23ee49e-6512-41ab-a3b0-a7e1c6575053", "solution": "import numpy as np\n\nclass DynamicRateEnhancedMultiSwarmEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval, population):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            swarm_idx = np.random.randint(0, len(population))\n            mutant = x + step_size * (population[swarm_idx][np.random.randint(self.budget)] - population[swarm_idx][np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        num_swarms = 5\n        populations = [np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) for _ in range(num_swarms)]\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n        CR_adapt = 0.9\n        CR_lower, CR_upper = 0.7, 1.0\n\n        for _ in range(self.budget):\n            for swarm_idx in range(num_swarms):\n                population = populations[swarm_idx]\n                diversity = np.std(population)\n                for i in range(self.budget):\n                    x = population[i]\n                    F = F_adapt + 0.1 * np.random.randn()\n                    F = np.clip(F, F_lower, F_upper)\n                    CR = CR_adapt + 0.1 * np.random.randn()\n                    CR = np.clip(CR, CR_lower, CR_upper)\n\n                    mutant = adaptive_mutation(x, F, diversity, cost_function(x), populations)\n                    trial = crossover(x, mutant, CR)\n                    if cost_function(trial) < cost_function(x):\n                        population[i] = trial\n                    else:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                    if np.random.rand() < 0.1:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n            # Information exchange among swarms\n            for i in range(num_swarms):\n                exchange_swarm = np.random.choice([x for x in range(num_swarms) if x != i])\n                exchange_idx = np.random.randint(self.budget)\n                populations[i][exchange_idx] = populations[exchange_swarm][exchange_idx]\n\n        all_populations = np.concatenate(populations)\n        best_idx = np.argmin([cost_function(x) for x in all_populations])\n        best_solution = all_populations[best_idx]\n\n        return best_solution", "name": "DynamicRateEnhancedMultiSwarmEvolutionaryHybridHarmonySearch", "description": "Improving exploration and exploitation balance by introducing a dynamic update of mutation and crossover rates based on population diversity.", "configspace": "", "generation": 89, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8f1b6d0c-2ea7-4997-a574-5c0cdb390d6f", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.15403729372910835, 0.16485052096657127, 0.15895233292401567, 0.16268879234922262, 0.14022572148753265, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9861225557962815, 0.9845697400540335, 0.9825182634880543, 0.9928171680597329, 0.9784673602411167, 0.9941905324698088, 0.9715851431297241, 0.9643213879485504, 0.9764839784163721, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08992449682948267, 0.08299744133218068, 0.11270100872903477, 0.08752786722852868, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 9.999999999998899e-05, 0.048107652755784325, 0.0025382472110415666, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.015326726098678245, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20661008392810376, 0.18834580867213868, 0.17579218048408696, 0.2025248536379043, 0.17740226273796744, 0.18869859327373473, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.1353478236142337, 0.1883637165218066, 0.12053802963972304, 0.1387155273583558, 0.1383417841617498, 0.11184344814271174, 0.14627104226881804, 0.14068060420781325, 0.11741548601912999, 0.1606583706757838, 0.1496816590257808, 0.1667976334561032, 0.15870518443591952, 0.1525697722498408, 0.1622150060558477, 0.15127901597955062, 0.17353157571146183, 0.14049135311185712, 0.10072869022387021, 0.09038497643210286, 0.10716210774176638, 0.09500120273374746, 0.11434512986173961, 0.10109362614848993, 0.09812208369943642, 0.12245612943804896, 0.11047177870440683, 0.12991170131181373, 0.1467272681078131, 0.14036465663538056, 0.14711678499612058, 0.1316881543130981, 0.14784841317392816, 0.14262918755463816, 0.1345553064938575, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1253386609536803, 0.1604909488566011, 0.1580928823157255, 0.1513356545171608, 0.13537433152013767, 0.12035763892156992, 0.1455891272416424, 0.14444836304044384, 0.15294909362803888, 0.14009870570354033, 0.13406252454194778, 0.13348704823630742, 0.1195820390294009, 0.11993531585963524, 0.1367504112204837, 0.17643359737873288, 0.1589307597231271, 0.15808889486759148, 0.21233194653836485, 0.18301540706219954, 0.17635618573292888, 0.18375574570586972, 0.20527890136182136, 0.17331001597264584, 0.172648932875495, 0.17836566082832817, 0.2001292078113205, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "b359aad1-b6c4-4ba7-8bf3-06e953d6fe3b", "solution": "import numpy as np\n\nclass DynamicRateEnhancedMultiSwarmEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval, population):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            swarm_idx = np.random.randint(0, len(population))\n            mutant = x + step_size * (population[swarm_idx][np.random.randint(self.budget)] - population[swarm_idx][np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def adaptive_step_mutation(x, F, diversity, fitness_eval, population):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            swarm_idx = np.random.randint(0, len(population))\n            mutant = x + step_size * (population[swarm_idx][np.random.randint(self.budget)] - population[swarm_idx][np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        num_swarms = 5\n        populations = [np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) for _ in range(num_swarms)]\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n        CR_adapt = 0.9\n        CR_lower, CR_upper = 0.7, 1.0\n\n        for _ in range(self.budget):\n            for swarm_idx in range(num_swarms):\n                population = populations[swarm_idx]\n                diversity = np.std(population)\n                for i in range(self.budget):\n                    x = population[i]\n                    F = F_adapt + 0.1 * np.random.randn()\n                    F = np.clip(F, F_lower, F_upper)\n                    CR = CR_adapt + 0.1 * np.random.randn()\n                    CR = np.clip(CR, CR_lower, CR_upper)\n\n                    mutant = adaptive_step_mutation(x, F, diversity, cost_function(x), populations)  # Changed mutation strategy\n                    trial = crossover(x, mutant, CR)\n                    if cost_function(trial) < cost_function(x):\n                        population[i] = trial\n                    else:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                    if np.random.rand() < 0.1:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n            # Information exchange among swarms\n            for i in range(num_swarms):\n                exchange_swarm = np.random.choice([x for x in range(num_swarms) if x != i])\n                exchange_idx = np.random.randint(self.budget)\n                populations[i][exchange_idx] = populations[exchange_swarm][exchange_idx]\n\n        all_populations = np.concatenate(populations)\n        best_idx = np.argmin([cost_function(x) for x in all_populations])\n        best_solution = all_populations[best_idx]\n\n        return best_solution", "name": "DynamicRateEnhancedMultiSwarmEvolutionaryHybridHarmonySearch", "description": "Enhancing diversity and convergence by introducing a new mutation strategy with adaptive step size based on population fitness.", "configspace": "", "generation": 94, "fitness": 0.11869545979613884, "feedback": "The algorithm DynamicRateEnhancedMultiSwarmEvolutionaryHybridHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "8f1b6d0c-2ea7-4997-a574-5c0cdb390d6f", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.15403729372910835, 0.16485052096657127, 0.15895233292401567, 0.16268879234922262, 0.14022572148753265, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9861225557962815, 0.9845697400540335, 0.9825182634880543, 0.9928171680597329, 0.9784673602411167, 0.9941905324698088, 0.9715851431297241, 0.9643213879485504, 0.9764839784163721, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08992449682948267, 0.08299744133218068, 0.11270100872903477, 0.08752786722852868, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 9.999999999998899e-05, 0.048107652755784325, 0.0025382472110415666, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.015326726098678245, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20661008392810376, 0.18834580867213868, 0.17579218048408696, 0.2025248536379043, 0.17740226273796744, 0.18869859327373473, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.1353478236142337, 0.1883637165218066, 0.12053802963972304, 0.1387155273583558, 0.1383417841617498, 0.11184344814271174, 0.14627104226881804, 0.14068060420781325, 0.11741548601912999, 0.1606583706757838, 0.1496816590257808, 0.1667976334561032, 0.15870518443591952, 0.1525697722498408, 0.1622150060558477, 0.15127901597955062, 0.17353157571146183, 0.14049135311185712, 0.10072869022387021, 0.09038497643210286, 0.10716210774176638, 0.09500120273374746, 0.11434512986173961, 0.10109362614848993, 0.09812208369943642, 0.12245612943804896, 0.11047177870440683, 0.12991170131181373, 0.1467272681078131, 0.14036465663538056, 0.14711678499612058, 0.1316881543130981, 0.14784841317392816, 0.14262918755463816, 0.1345553064938575, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1253386609536803, 0.1604909488566011, 0.1580928823157255, 0.1513356545171608, 0.13537433152013767, 0.12035763892156992, 0.1455891272416424, 0.14444836304044384, 0.15294909362803888, 0.14009870570354033, 0.13406252454194778, 0.13348704823630742, 0.1195820390294009, 0.11993531585963524, 0.1367504112204837, 0.17643359737873288, 0.1589307597231271, 0.15808889486759148, 0.21233194653836485, 0.18301540706219954, 0.17635618573292888, 0.18375574570586972, 0.20527890136182136, 0.17331001597264584, 0.172648932875495, 0.17836566082832817, 0.2001292078113205, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "4263ea29-d6cd-43b7-af84-8b3a88334f3c", "solution": "import numpy as np\n\nclass DynamicRateEnhancedMultiSwarmEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def chaotic_mutation(x, F, diversity, fitness_eval, population):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8) * np.random.uniform(0.5, 2.0)\n            swarm_idx = np.random.randint(0, len(population))\n            chaotic_factor = np.random.uniform(0.1, 0.9)\n            mutant = x + chaotic_factor * step_size * (population[swarm_idx][np.random.randint(self.budget)] - population[swarm_idx][np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def dynamic_radius_adjustment(x, lower_bound, upper_bound):\n            step_size = np.abs(upper_bound - lower_bound) / 5.0\n            radius = np.random.uniform(0.1, 1.0) * step_size\n            return np.clip(x, x - radius, x + radius, lower_bound, upper_bound)\n\n        num_swarms = 5\n        populations = [np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) for _ in range(num_swarms)]\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n        CR_adapt = 0.9\n        CR_lower, CR_upper = 0.7, 1.0\n\n        for _ in range(self.budget):\n            for swarm_idx in range(num_swarms):\n                population = populations[swarm_idx]\n                diversity = np.std(population)\n                for i in range(self.budget):\n                    x = population[i]\n                    F = F_adapt + 0.1 * np.random.randn()\n                    F = np.clip(F, F_lower, F_upper)\n                    CR = CR_adapt + 0.1 * np.random.randn()\n                    CR = np.clip(CR, CR_lower, CR_upper)\n\n                    mutant = chaotic_mutation(x, F, diversity, cost_function(x), populations)\n                    trial = crossover(x, mutant, CR)\n                    if cost_function(trial) < cost_function(x):\n                        population[i] = trial\n                    else:\n                        population[i] = dynamic_radius_adjustment(x, -5.0, 5.0)\n\n                    if np.random.rand() < 0.1:\n                        population[i] = dynamic_radius_adjustment(x, -5.0, 5.0)\n\n            # Information exchange among swarms\n            for i in range(num_swarms):\n                exchange_swarm = np.random.choice([x for x in range(num_swarms) if x != i])\n                exchange_idx = np.random.randint(self.budget)\n                populations[i][exchange_idx] = populations[exchange_swarm][exchange_idx]\n\n        all_populations = np.concatenate(populations)\n        best_idx = np.argmin([cost_function(x) for x in all_populations])\n        best_solution = all_populations[best_idx]\n\n        return best_solution", "name": "DynamicRateEnhancedMultiSwarmEvolutionaryHybridHarmonySearch", "description": "Enhancing diversity and adaptation by incorporating a chaotic search strategy for mutation and a dynamic search radius adjustment mechanism.", "configspace": "", "generation": 95, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'crossover' is not defined\").", "error": "NameError(\"name 'crossover' is not defined\")", "parent_id": "8f1b6d0c-2ea7-4997-a574-5c0cdb390d6f", "metadata": {}, "mutation_prompt": null}
{"id": "ac4deab9-99a7-479a-b163-50e3012ef0b9", "solution": "import numpy as np\n\nclass EnhancedDynamicRateMultiSwarmEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_levy_mutation(x, F, diversity, fitness_eval, population):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            swarm_idx = np.random.randint(0, len(population))\n            mutant = x + step_size * (population[swarm_idx][np.random.randint(self.budget)] - population[swarm_idx][np.random.randint(self.budget)])\n\n            # Levy flight\n            beta = 1.5\n            levy = np.random.standard_cauchy(self.dim) / np.power(np.linalg.norm(np.random.standard_cauchy(self.dim)), 1/beta)\n            mutant += 0.01 * step_size * levy\n\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        num_swarms = 5\n        populations = [np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) for _ in range(num_swarms)]\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n        CR_adapt = 0.9\n        CR_lower, CR_upper = 0.7, 1.0\n\n        for _ in range(self.budget):\n            for swarm_idx in range(num_swarms):\n                population = populations[swarm_idx]\n                diversity = np.std(population)\n                for i in range(self.budget):\n                    x = population[i]\n                    F = F_adapt + 0.1 * np.random.randn()\n                    F = np.clip(F, F_lower, F_upper)\n                    CR = CR_adapt + 0.1 * np.random.randn()\n                    CR = np.clip(CR, CR_lower, CR_upper)\n\n                    mutant = adaptive_levy_mutation(x, F, diversity, cost_function(x), populations)\n                    trial = crossover(x, mutant, CR)\n                    if cost_function(trial) < cost_function(x):\n                        population[i] = trial\n                    else:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                    if np.random.rand() < 0.1:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n            # Information exchange among swarms\n            for i in range(num_swarms):\n                exchange_swarm = np.random.choice([x for x in range(num_swarms) if x != i])\n                exchange_idx = np.random.randint(self.budget)\n                populations[i][exchange_idx] = populations[exchange_swarm][exchange_idx]\n\n        all_populations = np.concatenate(populations)\n        best_idx = np.argmin([cost_function(x) for x in all_populations])\n        best_solution = all_populations[best_idx]\n\n        return best_solution", "name": "EnhancedDynamicRateMultiSwarmEvolutionaryHybridHarmonySearch", "description": "Enhancing exploration by incorporating a novel adaptive levy flight mechanism for mutation.", "configspace": "", "generation": 96, "fitness": 0.11846500397743999, "feedback": "The algorithm EnhancedDynamicRateMultiSwarmEvolutionaryHybridHarmonySearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "8f1b6d0c-2ea7-4997-a574-5c0cdb390d6f", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.1539666791903357, 0.16486214515571407, 0.16183336783768865, 0.16268879234922262, 0.13946535159278917, 0.14888573004390981, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03072098282037028, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9970322123525461, 0.9835919649943666, 0.9978604917881148, 0.9692694273910611, 0.9930213527481064, 0.9663800156932908, 0.988245, 0.9976199875381602, 0.9919989351651597, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08978602851270656, 0.08299744133218068, 0.1126317008225034, 0.08751079828435271, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 9.999999999998899e-05, 0.048107652755784325, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.02277337315684347, 0.036241743907918456, 0.013145577149220489, 0.030144279045393296, 0.029630979130150226, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2066216626828038, 0.1883481219041543, 0.17579218048408696, 0.19997647731487667, 0.17740777630171056, 0.18870331517505234, 0.19325028361517582, 0.15648643071977308, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03190400779658609, 0.04231214916752091, 0.13551294241599243, 0.11831587592385207, 0.13483084636087284, 0.1387155273583558, 0.13721663009380658, 0.13318138480148067, 0.14568397521884013, 0.14091049065403838, 0.12888008221033065, 0.16136572329821697, 0.14974906452957326, 0.16681248108046365, 0.15870518443591952, 0.15269269670604813, 0.16220088987380676, 0.15127901597955062, 0.17353063573099226, 0.14047736335456307, 0.09995452841257735, 0.08910116385918976, 0.1085260641294401, 0.09500120273374746, 0.11437373975170884, 0.10109743393695081, 0.09812208369943642, 0.12244929523955983, 0.11047114970772398, 0.12991170131181373, 0.14676915723881834, 0.1403758478089585, 0.14711678499612058, 0.13169146578853652, 0.14784841317392816, 0.14262918755463816, 0.1345553064938575, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.13090051259387292, 0.16267828314182042, 0.158109044518697, 0.1513356545171608, 0.13537428954981456, 0.12035818147032518, 0.14557321055036465, 0.14444836304044384, 0.15294909362803888, 0.14009870570354033, 0.13406252454194778, 0.13356443941066287, 0.1195820390294009, 0.11993531585963524, 0.1367504112204837, 0.1593120782077032, 0.15476926674312985, 0.10841433970800585, 0.19304600281387974, 0.18321588122210763, 0.17869328549235397, 0.18291761020125463, 0.20778104558713217, 0.173691794346005, 0.1717411971160473, 0.17901933097031475, 0.20006551845707055, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "32dd1ae7-ef75-49a6-9970-e720b06e87e1", "solution": "import numpy as np\n\nclass DynamicRateEnhancedMultiSwarmEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval, population):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            swarm_idx = np.random.randint(0, len(population))\n            mutant = x + step_size * (population[swarm_idx][np.random.randint(self.budget)] - population[swarm_idx][np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        num_swarms = 5\n        populations = [np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) for _ in range(num_swarms)]\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n        CR_adapt = 0.9\n        CR_lower, CR_upper = 0.7, 1.0\n\n        for _ in range(self.budget):\n            for swarm_idx in range(num_swarms):\n                population = populations[swarm_idx]\n                diversity = np.std(population)\n                for i in range(self.budget):\n                    x = population[i]\n                    F = F_adapt + 0.1 * np.random.randn()\n                    F = np.clip(F, F_lower, F_upper)\n                    CR = CR_adapt + 0.1 * np.random.randn()\n                    CR = np.clip(CR, CR_lower, CR_upper)\n\n                    # Updated mutation probability\n                    p_mutate = np.clip(0.1 + 0.9 * (1 - np.exp(-fitness_eval)), 0.1, 0.9)\n                    if np.random.rand() < p_mutate:\n                        mutant = adaptive_mutation(x, F, diversity, cost_function(x), populations)\n                    else:\n                        mutant = x\n\n                    trial = crossover(x, mutant, CR)\n                    if cost_function(trial) < cost_function(x):\n                        population[i] = trial\n                    else:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                    if np.random.rand() < 0.1:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n            # Information exchange among swarms\n            for i in range(num_swarms):\n                exchange_swarm = np.random.choice([x for x in range(num_swarms) if x != i])\n                exchange_idx = np.random.randint(self.budget)\n                populations[i][exchange_idx] = populations[exchange_swarm][exchange_idx]\n\n        all_populations = np.concatenate(populations)\n        best_idx = np.argmin([cost_function(x) for x in all_populations])\n        best_solution = all_populations[best_idx]\n\n        return best_solution", "name": "DynamicRateEnhancedMultiSwarmEvolutionaryHybridHarmonySearch", "description": "Enhancing population diversity by introducing a dynamic mechanism for individual mutation probabilities based on individual fitness evaluations.", "configspace": "", "generation": 97, "fitness": -Infinity, "feedback": "An exception occurred: NameError(\"name 'fitness_eval' is not defined\").", "error": "NameError(\"name 'fitness_eval' is not defined\")", "parent_id": "8f1b6d0c-2ea7-4997-a574-5c0cdb390d6f", "metadata": {}, "mutation_prompt": null}
{"id": "48c00768-4cfa-474f-91d9-5933b42db5c5", "solution": "import numpy as np\n\nclass EnhancedDynamicRateESwithDynamicSwarmSize:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval, population):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            swarm_idx = np.random.randint(0, len(population))\n            mutant = x + step_size * (population[swarm_idx][np.random.randint(self.budget)] - population[swarm_idx][np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        num_swarms = 8  # Changing swarm size for better exploration\n        populations = [np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) for _ in range(num_swarms)]\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n        CR_adapt = 0.9\n        CR_lower, CR_upper = 0.7, 1.0\n\n        for _ in range(self.budget):\n            for swarm_idx in range(num_swarms):\n                population = populations[swarm_idx]\n                diversity = np.std(population)\n                for i in range(self.budget):\n                    x = population[i]\n                    F = F_adapt + 0.1 * np.random.randn()\n                    F = np.clip(F, F_lower, F_upper)\n                    CR = CR_adapt + 0.1 * np.random.randn()\n                    CR = np.clip(CR, CR_lower, CR_upper)\n\n                    mutant = adaptive_mutation(x, F, diversity, cost_function(x), populations)\n                    trial = crossover(x, mutant, CR)\n                    if cost_function(trial) < cost_function(x):\n                        population[i] = trial\n                    else:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                    if np.random.rand() < 0.1:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n            # Information exchange among swarms with dynamic neighborhood search\n            for i in range(num_swarms):\n                exchange_swarm = np.random.choice([x for x in range(num_swarms) if x != i])\n                exchange_idx = np.random.randint(self.budget)\n                populations[i][exchange_idx] = populations[exchange_swarm][exchange_idx]\n\n        all_populations = np.concatenate(populations)\n        best_idx = np.argmin([cost_function(x) for x in all_populations])\n        best_solution = all_populations[best_idx]\n\n        return best_solution", "name": "EnhancedDynamicRateESwithDynamicSwarmSize", "description": "Enhancing convergence speed and exploration capability through adaptive swarm size and dynamic neighborhood search.", "configspace": "", "generation": 98, "fitness": 0.11835742718868854, "feedback": "The algorithm EnhancedDynamicRateESwithDynamicSwarmSize got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "8f1b6d0c-2ea7-4997-a574-5c0cdb390d6f", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.15407479292920434, 0.16485052096657127, 0.15898312006284354, 0.16268879234922262, 0.13946776857567167, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.988674731837086, 0.9930720107758092, 0.9518252719247563, 0.982175864354456, 0.9987411120585002, 0.9955518067599458, 0.9807343155897518, 0.9806531932439512, 0.9996008669876817, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08984663414467975, 0.08299744133218068, 0.1126317008225034, 0.09318986501408832, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 9.999999999998899e-05, 0.04830194969314394, 9.999999999998899e-05, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.044944707459387834, 0.016651358898406965, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.2065901113042089, 0.18834580867213868, 0.17579218048408696, 0.1999369180904158, 0.17740226273796744, 0.18871535236781567, 0.19325028361517582, 0.156468898507079, 0.18239238127821544, 0.025855934961815596, 0.03499033382125216, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.037731560485842586, 0.03149234042422633, 0.04231214916752091, 0.13684398242748008, 0.12466706648279291, 0.1183514089620219, 0.13873647797282884, 0.13721084259603444, 0.11671982405905923, 0.14766426122489484, 0.14091212811809384, 0.12154085307840012, 0.16182972643547144, 0.1496366658517183, 0.1667976334561032, 0.15870518443591952, 0.15254634947254564, 0.16221641537904652, 0.15127901597955062, 0.17353063573099226, 0.14047736335456307, 0.100308506092045, 0.08910116385918976, 0.10716210774176638, 0.09500120273374746, 0.11439598068749524, 0.10111588455339349, 0.09812208369943642, 0.12244929523955983, 0.11047114970772398, 0.12991170131181373, 0.1467301552760375, 0.14036465663538056, 0.14711678499612058, 0.1316881543130981, 0.14784841317392816, 0.14262918755463816, 0.1345553064938575, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.12550595437352985, 0.16049072535632225, 0.1583634122217532, 0.1513356545171608, 0.13537367958455981, 0.13865729956112505, 0.1461998896809349, 0.14444836304044384, 0.1533199236750017, 0.1400986269807849, 0.13406252454194778, 0.13348704823630742, 0.1195820390294009, 0.11993531585963524, 0.1367504112204837, 0.15830056343638332, 0.15527002203810225, 0.10933829469764256, 0.16945570516046793, 0.18325225681204116, 0.18526885381277236, 0.18877403808312154, 0.2045099243205728, 0.17101283914010257, 0.17366951566791955, 0.19217127879465912, 0.20024360336899916, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
{"id": "e078711a-0b7e-4d76-8778-fd79321ab00c", "solution": "import numpy as np\n\nclass DynamicRateEnhancedMultiSwarmEvolutionaryHybridHarmonySearch:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        def cost_function(x):\n            return func(x)\n\n        def adaptive_mutation(x, F, diversity, fitness_eval, population):\n            idxs = np.random.choice(range(self.dim), 3, replace=False)\n            step_size = F * (fitness_eval + 1e-8) / (diversity + 1e-8)\n            swarm_idx = np.random.randint(0, len(population))\n            mutant = x + step_size * (population[swarm_idx][np.random.randint(self.budget)] - population[swarm_idx][np.random.randint(self.budget)])\n            return np.clip(mutant, -5.0, 5.0)\n\n        def crossover(x, mutant, CR):\n            trial = np.copy(x)\n            for i in range(self.dim):\n                if np.random.rand() < CR:\n                    trial[i] = mutant[i]\n            return trial\n\n        def dynamic_boundary_adjustment(x, lower_bound, upper_bound):\n            return np.clip(x, lower_bound, upper_bound)\n\n        num_swarms = 5\n        populations = [np.random.uniform(-5.0, 5.0, (self.budget, self.dim)) for _ in range(num_swarms)]\n        F = 0.5\n        CR = 0.9\n\n        F_adapt = 0.5\n        F_lower, F_upper = 0.2, 0.8\n        CR_adapt = 0.9\n        CR_lower, CR_upper = 0.7, 1.0\n\n        for _ in range(self.budget):\n            for swarm_idx in range(num_swarms):\n                population = populations[swarm_idx]\n                diversity = np.std(population)\n                for i in range(self.budget):\n                    x = population[i]\n                    F = F_adapt + 0.1 * np.random.randn()\n                    F = np.clip(F, F_lower, F_upper)\n                    CR = CR_adapt + 0.1 * np.random.randn()\n                    CR = np.clip(CR, CR_lower, CR_upper)\n\n                    mutant = adaptive_mutation(x, F, diversity, cost_function(x), populations)\n                    trial = crossover(x, mutant, CR)\n                    if cost_function(trial) < cost_function(x):\n                        population[i] = trial\n                    else:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n                    if np.random.rand() < 0.1:\n                        population[i] = dynamic_boundary_adjustment(x, -5.0, 5.0)\n\n            # Information exchange among swarms\n            for i in range(num_swarms):\n                exchange_swarm = np.random.choice([x for x in range(num_swarms) if x != i])\n                exchange_idx = np.random.randint(self.budget)\n                populations[i][exchange_idx] = populations[exchange_swarm][exchange_idx]\n\n        all_populations = np.concatenate(populations)\n        best_idx = np.argmin([cost_function(x) for x in all_populations])\n        best_solution = all_populations[best_idx]\n\n        return best_solution", "name": "DynamicRateEnhancedMultiSwarmEvolutionaryHybridHarmonySearch", "description": "Improving exploration and exploitation balance by introducing a dynamic update of mutation and crossover rates based on population diversity.", "configspace": "", "generation": 89, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "8f1b6d0c-2ea7-4997-a574-5c0cdb390d6f", "metadata": {"aucs": [0.16752715953555253, 0.17235140596932397, 0.15551956802883338, 0.15403729372910835, 0.16485052096657127, 0.15895233292401567, 0.16268879234922262, 0.14022572148753265, 0.14875423023049572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.030687720146829855, 0.04229676289419204, 0.028707454718879255, 0.030147444489367126, 0.03423204244623079, 0.03559272547187042, 0.04263394824411648, 0.05445470516326456, 0.04465656861857947, 0.01974211233680201, 0.015344511823577212, 0.029561342867899132, 0.01969646754387211, 0.033153130081172266, 0.04442032952410169, 0.03353613547250134, 0.026080074937419484, 0.026197081361168384, 0.9861225557962815, 0.9845697400540335, 0.9825182634880543, 0.9928171680597329, 0.9784673602411167, 0.9941905324698088, 0.9715851431297241, 0.9643213879485504, 0.9764839784163721, 0.06327105142008482, 0.06721697510924984, 0.09868376693352243, 0.04682316521506413, 0.06098032414479804, 0.03131469230493367, 0.08760288956504869, 0.03242934921204976, 0.08688468824530027, 0.11482447823799447, 0.18553590541387488, 0.1374545582085941, 0.08992449682948267, 0.08299744133218068, 0.11270100872903477, 0.08752786722852868, 0.10611071494075475, 0.10269850481101384, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01371349358802576, 9.999999999998899e-05, 0.048107652755784325, 0.0025382472110415666, 9.999999999998899e-05, 0.032766032501938436, 0.007079639249655378, 0.017344669844895355, 0.002207048622274499, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.02167130277064644, 0.06343546399841216, 0.04161381215727966, 0.0494272710694551, 0.021831543164293143, 0.036241743907918456, 0.015326726098678245, 0.030144279045393296, 0.02743219442430067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.20661008392810376, 0.18834580867213868, 0.17579218048408696, 0.2025248536379043, 0.17740226273796744, 0.18869859327373473, 0.19325028361517582, 0.156468898507079, 0.18235760657212507, 0.025816910901456658, 0.03499033382125216, 0.02530778734618344, 0.032525290286609776, 0.03229621311972519, 0.039398907522902316, 0.03771420465876418, 0.03149234042422633, 0.04231214916752091, 0.1353478236142337, 0.1883637165218066, 0.12053802963972304, 0.1387155273583558, 0.1383417841617498, 0.11184344814271174, 0.14627104226881804, 0.14068060420781325, 0.11741548601912999, 0.1606583706757838, 0.1496816590257808, 0.1667976334561032, 0.15870518443591952, 0.1525697722498408, 0.1622150060558477, 0.15127901597955062, 0.17353157571146183, 0.14049135311185712, 0.10072869022387021, 0.09038497643210286, 0.10716210774176638, 0.09500120273374746, 0.11434512986173961, 0.10109362614848993, 0.09812208369943642, 0.12245612943804896, 0.11047177870440683, 0.12991170131181373, 0.1467272681078131, 0.14036465663538056, 0.14711678499612058, 0.1316881543130981, 0.14784841317392816, 0.14262918755463816, 0.1345553064938575, 0.17013624414560324, 0.1204624485213639, 0.13614477447544615, 0.12739941219488515, 0.12286906332027014, 0.13289564873324067, 0.1401296379883603, 0.11382764648576171, 0.12773466300142378, 0.15890532503478294, 0.1253386609536803, 0.1604909488566011, 0.1580928823157255, 0.1513356545171608, 0.13537433152013767, 0.12035763892156992, 0.1455891272416424, 0.14444836304044384, 0.15294909362803888, 0.14009870570354033, 0.13406252454194778, 0.13348704823630742, 0.1195820390294009, 0.11993531585963524, 0.1367504112204837, 0.17643359737873288, 0.1589307597231271, 0.15808889486759148, 0.21233194653836485, 0.18301540706219954, 0.17635618573292888, 0.18375574570586972, 0.20527890136182136, 0.17331001597264584, 0.172648932875495, 0.17836566082832817, 0.2001292078113205, 0.04512870466548535, 0.047277619273608074, 0.062126843412190436, 0.048606583543504, 0.057877828208915294, 0.04637196696227075, 0.06879788403785514, 0.05049556536897848, 0.03944780500592682]}, "mutation_prompt": null}
