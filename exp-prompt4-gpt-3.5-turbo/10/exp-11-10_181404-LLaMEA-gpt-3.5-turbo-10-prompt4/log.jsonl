{"id": "73f91950-b3f6-402c-8993-b7f8dcb51265", "solution": "", "name": "", "description": "", "configspace": "", "generation": 0, "fitness": -Infinity, "feedback": "No code was extracted.", "error": "", "parent_id": null, "metadata": {}, "mutation_prompt": null}
{"id": "913ebd1f-b479-480a-b914-53d04ab30f02", "solution": "import numpy as np\n\nclass DynamicDE:\n    def __init__(self, budget, dim, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n        \n        return best", "name": "DynamicDE", "description": "Utilizing Differential Evolution (DE) with a dynamic mutation strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 1, "fitness": 0.38961586939502635, "feedback": "The algorithm DynamicDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.25.", "error": "", "parent_id": "73f91950-b3f6-402c-8993-b7f8dcb51265", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6374593667227992, 0.6889401945204383, 0.6840853480293522, 0.6967349454168776, 0.6836546441420059, 0.7013571449635906, 0.6666788686750416, 0.6770639713943923, 0.6863840800439489, 0.12406593503725594, 0.12297465129273255, 0.14058632370994584, 0.1052595427488272, 0.11167461882941265, 0.13007467230320757, 0.12365019145486145, 0.11918356450990464, 0.11488744604263235, 0.10535781951712397, 0.11481994548974239, 0.09822569063089581, 0.11315686760328558, 0.095718207154741, 0.1284589936656112, 0.11755130828269289, 0.12022350325463882, 0.11584820962019216, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.5245512181825833, 0.48590193773332546, 0.4726385713433626, 0.49755790842027525, 0.44050793004714717, 0.4860225812214042, 0.48923614479716393, 0.5626004529120301, 0.5661570195281409, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.49293502300884817, 0.271219826626266, 0.19525206862626898, 0.21208489548313536, 0.28795742039245853, 0.23712476040114228, 0.26456600091702454, 0.42421509633777477, 0.24608110188436494, 0.20232704007066327, 0.3997401225652686, 0.3946916881107272, 0.3321086903701219, 0.17433639000156165, 0.34057707605230425, 0.3185375665222645, 0.44875467299607996, 0.22345913743219759, 0.47817446858601365, 0.4614805127441417, 0.4102169989000195, 0.44686108002553415, 0.43915453207298905, 0.4440057175463302, 0.44242477992667906, 0.45027983433914365, 0.45654985092748845, 0.5447193995815659, 0.587850359461022, 0.5479286276366925, 0.5932712354594567, 0.5281597245465506, 0.576369408068012, 0.5895215243182369, 0.6533175907468016, 0.5580757098786728, 0.1820234248487943, 0.10042102185966051, 0.1094458063176349, 0.18975380863799762, 0.2616899769940645, 0.2704787827836086, 0.14806365752002526, 0.16644564002240947, 0.15630378745456364, 0.3522612834402613, 0.34558762409589794, 0.30832940654158036, 0.3548320422232081, 0.36776095379850093, 0.36386973613151785, 0.32759195569500954, 0.36128975575133904, 0.3295039643056106, 0.7251247130914591, 0.7421906635710509, 0.7496270213295275, 0.7230575132501221, 0.7251778593971584, 0.755831239590211, 0.7223247260970481, 0.7243412267015438, 0.7346211765929873, 0.09425026936346892, 0.10579369271440497, 0.09773862024513658, 0.09069026109797595, 0.09873614125013352, 0.11727414971731487, 0.11161073672894872, 0.1053016798615024, 0.10926195124569171, 0.1668445090052374, 0.13100362643348562, 0.14861021678460906, 0.1597184884703442, 0.1703972777954268, 0.1536571464041484, 0.21274717756607497, 0.1577126553447179, 0.17778289692217875, 0.41067801371860546, 0.43734698273738726, 0.46862066207838815, 0.39221448766203615, 0.41783463202763027, 0.4328395179856588, 0.4438323548298344, 0.4822833501481897, 0.4826278681932962, 0.3433992730587172, 0.3441615990342961, 0.33987749587443383, 0.3503815404539863, 0.32444776412018095, 0.3406782878289202, 0.35588497881207926, 0.35848157334592856, 0.32881957612434887, 0.20687612780704456, 0.21476317805421452, 0.19118188338739683, 0.20720838202013414, 0.22689532950204405, 0.19706522310943897, 0.2048548004556734, 0.2102999473590339, 0.2048058029438542, 0.19922743430889167, 0.2137604528357705, 0.1964308170507908, 0.18742924286984874, 0.25777128882776845, 0.18928562755462075, 0.2023242721488182, 0.21173853655341168, 0.24001795766827494, 0.6726255830604337, 0.19796955755725243, 0.19251605048532705, 0.6089964619245598, 0.7234653051791861, 0.1786098411700403, 0.565304270779537, 0.17117816801315844, 0.18106701919554602, 0.6868763099660992, 0.31772736525156975, 0.710391785663764, 0.1979188806567178, 0.2012540407726643, 0.70839429766416, 0.6418310694978038, 0.15061184268873962, 0.2104471192807641, 0.1938161867954813, 0.1886171753911593, 0.21371843256686773, 0.18694601503491992, 0.2054013654456397, 0.18033810841782072, 0.1958685708189951, 0.20650369436260085, 0.1886939359094303, 0.07497160228750599, 0.08931752520059522, 0.08148000773387032, 0.07270439939139905, 0.08257615351081926, 0.08619801121010329, 0.08427141040888397, 0.07555033649169784, 0.08109924643008071]}, "mutation_prompt": null}
{"id": "ce2bf7e3-5cbd-4193-bcf6-1914624e7b15", "solution": "import numpy as np\n\nclass DynamicDE:\n    def __init__(self, budget, dim, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n        \n        return best", "name": "DynamicDE", "description": "Utilizing Differential Evolution (DE) with a dynamic mutation strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "913ebd1f-b479-480a-b914-53d04ab30f02", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6374593667227992, 0.6889401945204383, 0.6840853480293522, 0.6967349454168776, 0.6836546441420059, 0.7013571449635906, 0.6666788686750416, 0.6770639713943923, 0.6863840800439489, 0.12406593503725594, 0.12297465129273255, 0.14058632370994584, 0.1052595427488272, 0.11167461882941265, 0.13007467230320757, 0.12365019145486145, 0.11918356450990464, 0.11488744604263235, 0.10535781951712397, 0.11481994548974239, 0.09822569063089581, 0.11315686760328558, 0.095718207154741, 0.1284589936656112, 0.11755130828269289, 0.12022350325463882, 0.11584820962019216, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.5245512181825833, 0.48590193773332546, 0.4726385713433626, 0.49755790842027525, 0.44050793004714717, 0.4860225812214042, 0.48923614479716393, 0.5626004529120301, 0.5661570195281409, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.49293502300884817, 0.271219826626266, 0.19525206862626898, 0.21208489548313536, 0.28795742039245853, 0.23712476040114228, 0.26456600091702454, 0.42421509633777477, 0.24608110188436494, 0.20232704007066327, 0.3997401225652686, 0.3946916881107272, 0.3321086903701219, 0.17433639000156165, 0.34057707605230425, 0.3185375665222645, 0.44875467299607996, 0.22345913743219759, 0.47817446858601365, 0.4614805127441417, 0.4102169989000195, 0.44686108002553415, 0.43915453207298905, 0.4440057175463302, 0.44242477992667906, 0.45027983433914365, 0.45654985092748845, 0.5447193995815659, 0.587850359461022, 0.5479286276366925, 0.5932712354594567, 0.5281597245465506, 0.576369408068012, 0.5895215243182369, 0.6533175907468016, 0.5580757098786728, 0.1820234248487943, 0.10042102185966051, 0.1094458063176349, 0.18975380863799762, 0.2616899769940645, 0.2704787827836086, 0.14806365752002526, 0.16644564002240947, 0.15630378745456364, 0.3522612834402613, 0.34558762409589794, 0.30832940654158036, 0.3548320422232081, 0.36776095379850093, 0.36386973613151785, 0.32759195569500954, 0.36128975575133904, 0.3295039643056106, 0.7251247130914591, 0.7421906635710509, 0.7496270213295275, 0.7230575132501221, 0.7251778593971584, 0.755831239590211, 0.7223247260970481, 0.7243412267015438, 0.7346211765929873, 0.09425026936346892, 0.10579369271440497, 0.09773862024513658, 0.09069026109797595, 0.09873614125013352, 0.11727414971731487, 0.11161073672894872, 0.1053016798615024, 0.10926195124569171, 0.1668445090052374, 0.13100362643348562, 0.14861021678460906, 0.1597184884703442, 0.1703972777954268, 0.1536571464041484, 0.21274717756607497, 0.1577126553447179, 0.17778289692217875, 0.41067801371860546, 0.43734698273738726, 0.46862066207838815, 0.39221448766203615, 0.41783463202763027, 0.4328395179856588, 0.4438323548298344, 0.4822833501481897, 0.4826278681932962, 0.3433992730587172, 0.3441615990342961, 0.33987749587443383, 0.3503815404539863, 0.32444776412018095, 0.3406782878289202, 0.35588497881207926, 0.35848157334592856, 0.32881957612434887, 0.20687612780704456, 0.21476317805421452, 0.19118188338739683, 0.20720838202013414, 0.22689532950204405, 0.19706522310943897, 0.2048548004556734, 0.2102999473590339, 0.2048058029438542, 0.19922743430889167, 0.2137604528357705, 0.1964308170507908, 0.18742924286984874, 0.25777128882776845, 0.18928562755462075, 0.2023242721488182, 0.21173853655341168, 0.24001795766827494, 0.6726255830604337, 0.19796955755725243, 0.19251605048532705, 0.6089964619245598, 0.7234653051791861, 0.1786098411700403, 0.565304270779537, 0.17117816801315844, 0.18106701919554602, 0.6868763099660992, 0.31772736525156975, 0.710391785663764, 0.1979188806567178, 0.2012540407726643, 0.70839429766416, 0.6418310694978038, 0.15061184268873962, 0.2104471192807641, 0.1938161867954813, 0.1886171753911593, 0.21371843256686773, 0.18694601503491992, 0.2054013654456397, 0.18033810841782072, 0.1958685708189951, 0.20650369436260085, 0.1886939359094303, 0.07497160228750599, 0.08931752520059522, 0.08148000773387032, 0.07270439939139905, 0.08257615351081926, 0.08619801121010329, 0.08427141040888397, 0.07555033649169784, 0.08109924643008071]}, "mutation_prompt": null}
{"id": "d4f54b14-9dfd-4920-b5c4-f0818229fc6b", "solution": "import numpy as np\n\nclass SelfAdaptiveDE:\n    def __init__(self, budget, dim, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.F_l = 0.1\n        self.F_u = 0.9\n        self.CR_l = 0.1\n        self.CR_u = 0.9\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_val = np.random.uniform(self.F_l, self.F_u)\n                CR_val = np.random.uniform(self.CR_l, self.CR_u)\n                mutant = np.clip(a + F_val * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < CR_val\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n        \n        return best", "name": "SelfAdaptiveDE", "description": "Introducing a self-adaptive mechanism for mutation and crossover probabilities to enhance exploration and exploitation balance in Differential Evolution.", "configspace": "", "generation": 3, "fitness": 0.3115200579394831, "feedback": "The algorithm SelfAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.23.", "error": "", "parent_id": "913ebd1f-b479-480a-b914-53d04ab30f02", "metadata": {"aucs": [0.8001712828711236, 0.7754027541410247, 0.8016582414691543, 0.7678698841785947, 0.7961942521009014, 0.7822187686430242, 0.7872386657405246, 0.8030349358557162, 0.7734652544392973, 0.6115379742261864, 0.6168946816061207, 0.6062132468923592, 0.6099586788522406, 0.5935167690188674, 0.6098049406340109, 0.5951528649849004, 0.6028645194582822, 0.6321181432193657, 0.36606343047371726, 0.4002460192963806, 0.406157902878309, 0.41407910640934875, 0.36238433792259883, 0.43340875436928894, 0.4439142063755569, 0.4317968447997774, 0.47668390070478983, 0.26873292541077876, 0.3063282980806442, 0.2662471230115362, 0.3449805807822439, 0.36966010716295705, 0.3376896262130905, 0.3310751207689351, 0.30054230341402977, 0.35395541931985897, 0.9452509673885287, 0.9362508703386578, 0.9285210977793796, 0.9567585614371324, 0.9403705499406787, 0.9379974667388616, 0.9488123258546718, 0.9604460546318325, 0.9365546645072746, 0.37583116559786556, 0.3573645449509334, 0.3184467266614356, 0.40203905049507516, 0.337706511561385, 0.3402511654898671, 0.27407806484366337, 0.2906873387006459, 0.2994007724879856, 0.3564262323440973, 0.35684383646192763, 0.5545543815672043, 0.5699772270937167, 0.6537097681104993, 0.6260768481985104, 0.5129297422643365, 0.5353143489178459, 0.5419103989540953, 0.23621900884865077, 0.2340608109080038, 0.21697621347755425, 0.15882369951012587, 0.16837943584576476, 0.19127755722923456, 0.18915266110485818, 0.16516599497871554, 0.1896095686917154, 0.1857631820641522, 0.1555355675280451, 0.1434764340697955, 0.19384960876156232, 0.18524378972780442, 0.19511924557173876, 0.1614987841088792, 0.20486228466208167, 0.1463877814500193, 0.04354068985740411, 0.020808548861565024, 0.045683260130217285, 0.04349771366385524, 0.0532559389810654, 0.04826443506030209, 0.01995366406846444, 0.03741629557853854, 0.04255242826472072, 0.17441887462283956, 0.1542929823533934, 0.11443811478546195, 0.13574533324540916, 0.14358137950308425, 0.131324481144237, 0.16169221216593688, 0.17061732482211378, 0.15213682662642258, 0.040728921828341313, 0.025013241972826616, 0.029208035957463685, 0.024844507128199633, 0.010446025322336183, 0.019373362529817695, 0.06040226294759543, 0.05362172627706474, 0.05433259347294084, 0.13884891755939677, 0.17158822335285917, 0.14426784615369048, 0.15886274576603499, 0.1787534524800729, 0.16028592131284236, 0.15192202725773407, 0.12419620084258953, 0.14170638860555462, 0.5067945685193176, 0.5105623032244955, 0.5162584645745417, 0.5214164356926702, 0.5148178251677706, 0.5102633558093403, 0.5160783998164704, 0.53902201116549, 0.5220252629699433, 0.10391620145303093, 0.10384220765712493, 0.10037545639867207, 0.10222589604267796, 0.11296315950369096, 0.10725074337492935, 0.10847467075307815, 0.10346944668182101, 0.10759928269312291, 0.15563286594591152, 0.19749076338670202, 0.17151433867472188, 0.14489426107334746, 0.13546990251292368, 0.15594926818363508, 0.14414955638405846, 0.15581696558597546, 0.15531538425853286, 0.30147992230940435, 0.3325922483327486, 0.3279878560542743, 0.2969195633706093, 0.30623758798419853, 0.3594092755204601, 0.3547743682653478, 0.3884446765086378, 0.3565438676805591, 0.2595955030280387, 0.23820200250726098, 0.21124883878983336, 0.22252710490260752, 0.22332025863677363, 0.25687927220632456, 0.2664108836796306, 0.27020911965370065, 0.24719236622819507, 0.19738422469111305, 0.1849315808625469, 0.19422530305543229, 0.2092471832128766, 0.21148662996913836, 0.18321720492270566, 0.19075255082431797, 0.19988564034113254, 0.2199489380007098, 0.24919543075481743, 0.2820096719428651, 0.22495391686135668, 0.27949267931916055, 0.22370879908981012, 0.23535586881537296, 0.21442575098754857, 0.24179965224759248, 0.3483506856027345, 0.6119864658420182, 0.19844740489244073, 0.6713396695503886, 0.4397384400252331, 0.4878443726177728, 0.6757734344094178, 0.4639090861144012, 0.17557711759901973, 0.2560440696170859, 0.18813763886492307, 0.3591251362002077, 0.4611650637457536, 0.19849249883411535, 0.3583873750918618, 0.19179840402515924, 0.194890869745023, 0.3064259049460133, 0.2025801598705289, 0.20636441293836771, 0.1797670961759048, 0.208857119907492, 0.1860674952735749, 0.18385060663308794, 0.18123856864396404, 0.19101345140813974, 0.17975728647002231, 0.18955208688924063, 0.08468627861192601, 0.08639635340260188, 0.08253896286462736, 0.07504575627454979, 0.07757399345472482, 0.08485785588250405, 0.0815865888056273, 0.07056353396228987, 0.08621944858977026]}, "mutation_prompt": null}
{"id": "7426f65e-8e6a-4502-8694-61408219d8e5", "solution": "import numpy as np\n\nclass DynamicDE:\n    def __init__(self, budget, dim, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n        \n        return best", "name": "DynamicDE", "description": "Utilizing Differential Evolution (DE) with a dynamic mutation strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "913ebd1f-b479-480a-b914-53d04ab30f02", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6374593667227992, 0.6889401945204383, 0.6840853480293522, 0.6967349454168776, 0.6836546441420059, 0.7013571449635906, 0.6666788686750416, 0.6770639713943923, 0.6863840800439489, 0.12406593503725594, 0.12297465129273255, 0.14058632370994584, 0.1052595427488272, 0.11167461882941265, 0.13007467230320757, 0.12365019145486145, 0.11918356450990464, 0.11488744604263235, 0.10535781951712397, 0.11481994548974239, 0.09822569063089581, 0.11315686760328558, 0.095718207154741, 0.1284589936656112, 0.11755130828269289, 0.12022350325463882, 0.11584820962019216, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.5245512181825833, 0.48590193773332546, 0.4726385713433626, 0.49755790842027525, 0.44050793004714717, 0.4860225812214042, 0.48923614479716393, 0.5626004529120301, 0.5661570195281409, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.49293502300884817, 0.271219826626266, 0.19525206862626898, 0.21208489548313536, 0.28795742039245853, 0.23712476040114228, 0.26456600091702454, 0.42421509633777477, 0.24608110188436494, 0.20232704007066327, 0.3997401225652686, 0.3946916881107272, 0.3321086903701219, 0.17433639000156165, 0.34057707605230425, 0.3185375665222645, 0.44875467299607996, 0.22345913743219759, 0.47817446858601365, 0.4614805127441417, 0.4102169989000195, 0.44686108002553415, 0.43915453207298905, 0.4440057175463302, 0.44242477992667906, 0.45027983433914365, 0.45654985092748845, 0.5447193995815659, 0.587850359461022, 0.5479286276366925, 0.5932712354594567, 0.5281597245465506, 0.576369408068012, 0.5895215243182369, 0.6533175907468016, 0.5580757098786728, 0.1820234248487943, 0.10042102185966051, 0.1094458063176349, 0.18975380863799762, 0.2616899769940645, 0.2704787827836086, 0.14806365752002526, 0.16644564002240947, 0.15630378745456364, 0.3522612834402613, 0.34558762409589794, 0.30832940654158036, 0.3548320422232081, 0.36776095379850093, 0.36386973613151785, 0.32759195569500954, 0.36128975575133904, 0.3295039643056106, 0.7251247130914591, 0.7421906635710509, 0.7496270213295275, 0.7230575132501221, 0.7251778593971584, 0.755831239590211, 0.7223247260970481, 0.7243412267015438, 0.7346211765929873, 0.09425026936346892, 0.10579369271440497, 0.09773862024513658, 0.09069026109797595, 0.09873614125013352, 0.11727414971731487, 0.11161073672894872, 0.1053016798615024, 0.10926195124569171, 0.1668445090052374, 0.13100362643348562, 0.14861021678460906, 0.1597184884703442, 0.1703972777954268, 0.1536571464041484, 0.21274717756607497, 0.1577126553447179, 0.17778289692217875, 0.41067801371860546, 0.43734698273738726, 0.46862066207838815, 0.39221448766203615, 0.41783463202763027, 0.4328395179856588, 0.4438323548298344, 0.4822833501481897, 0.4826278681932962, 0.3433992730587172, 0.3441615990342961, 0.33987749587443383, 0.3503815404539863, 0.32444776412018095, 0.3406782878289202, 0.35588497881207926, 0.35848157334592856, 0.32881957612434887, 0.20687612780704456, 0.21476317805421452, 0.19118188338739683, 0.20720838202013414, 0.22689532950204405, 0.19706522310943897, 0.2048548004556734, 0.2102999473590339, 0.2048058029438542, 0.19922743430889167, 0.2137604528357705, 0.1964308170507908, 0.18742924286984874, 0.25777128882776845, 0.18928562755462075, 0.2023242721488182, 0.21173853655341168, 0.24001795766827494, 0.6726255830604337, 0.19796955755725243, 0.19251605048532705, 0.6089964619245598, 0.7234653051791861, 0.1786098411700403, 0.565304270779537, 0.17117816801315844, 0.18106701919554602, 0.6868763099660992, 0.31772736525156975, 0.710391785663764, 0.1979188806567178, 0.2012540407726643, 0.70839429766416, 0.6418310694978038, 0.15061184268873962, 0.2104471192807641, 0.1938161867954813, 0.1886171753911593, 0.21371843256686773, 0.18694601503491992, 0.2054013654456397, 0.18033810841782072, 0.1958685708189951, 0.20650369436260085, 0.1886939359094303, 0.07497160228750599, 0.08931752520059522, 0.08148000773387032, 0.07270439939139905, 0.08257615351081926, 0.08619801121010329, 0.08427141040888397, 0.07555033649169784, 0.08109924643008071]}, "mutation_prompt": null}
{"id": "f78c2186-a880-4c75-92f9-ea03320af78e", "solution": "import numpy as np\n\nclass SelfAdaptiveDE:\n    def __init__(self, budget, dim, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        \n        F_lower, F_upper = 0.2, 0.8  # Define lower and upper bounds for F\n        CR_lower, CR_upper = 0.2, 1.0  # Define lower and upper bounds for CR\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                \n                # Self-adaptive mutation strategy for F and CR\n                F = np.clip(np.random.normal(self.F, 0.1), F_lower, F_upper)\n                CR = np.clip(np.random.normal(self.CR, 0.1), CR_lower, CR_upper)\n                \n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n        \n        return best", "name": "SelfAdaptiveDE", "description": "Implementing a self-adaptive mutation strategy to dynamically adjust the mutation parameters during optimization.", "configspace": "", "generation": 5, "fitness": 0.38820691408338626, "feedback": "The algorithm SelfAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.25.", "error": "", "parent_id": "913ebd1f-b479-480a-b914-53d04ab30f02", "metadata": {"aucs": [0.8047773817087588, 0.8111796115012465, 0.8268853892114394, 0.8214472403421972, 0.8124663539495374, 0.8321547356369579, 0.8250039454194112, 0.8137684048664592, 0.8034490885647771, 0.6709601169352691, 0.6786665138157006, 0.676366462543273, 0.663302317153375, 0.6720855024661627, 0.6738323197483341, 0.6781567488621414, 0.7059064465979122, 0.6690977537342981, 0.11838995906905836, 0.11983663428123836, 0.12954563500657656, 0.11970128485912013, 0.11665130278097424, 0.11302589579056499, 0.1284198019664856, 0.1324768208614272, 0.12548102233311342, 0.10751232942921285, 0.11522132080442593, 0.12652015721025056, 0.11214470184734016, 0.11176363457856076, 0.11532311194491307, 0.11353883764188033, 0.10154573664457589, 0.11801159685097207, 0.9489186501205555, 0.9232177100241903, 0.9311339602918118, 0.8354708350340581, 0.91116901316713, 0.9327895784842343, 0.8734008023571508, 0.8655022036299904, 0.9066350694366648, 0.5391605124811971, 0.5296455362852834, 0.5104468420980484, 0.4866915314579775, 0.5290293595560025, 0.4769210952059326, 0.38070535557606344, 0.4957836204175775, 0.509833298348738, 0.7757985625760131, 0.7832634359252039, 0.7525829979886373, 0.7978198923641481, 0.8202441176057155, 0.8099223060379258, 0.7657827627151943, 0.7611653186029365, 0.7754448658560815, 0.22076073111475658, 0.24851253661117734, 0.21832848627136148, 0.2044052326117768, 0.17912685225176517, 0.21184685722354846, 0.22579421383719445, 0.24121794301087807, 0.39849000026214554, 0.2323977886212193, 0.5058317118925222, 0.27620157267857004, 0.19402381431627014, 0.2663433085264715, 0.22845071461959154, 0.25338306375455355, 0.2589273204358947, 0.22671139033498777, 0.46758259445718076, 0.45580498352263343, 0.46940594983886386, 0.49650008938866974, 0.4652282264251255, 0.48864937454752977, 0.47042115809764096, 0.46707452918416525, 0.4590421396138469, 0.5837447735755299, 0.562541983997656, 0.548470246269849, 0.5681084706937426, 0.5659686134437201, 0.6243434804399207, 0.6548046949181472, 0.5637344110970797, 0.5943072123405855, 0.25532044532736686, 0.14984593564401238, 0.12682751231730927, 0.26752940016905036, 0.32623811223294763, 0.20514800763462726, 0.19690046022536112, 0.1883498160437438, 0.14771658949629896, 0.37387156049709036, 0.35850953522447815, 0.3693730013467884, 0.347104783920987, 0.36293120695651704, 0.37814963988102324, 0.3461714411900292, 0.34140989813983214, 0.38165573067050795, 0.7235262737898054, 0.7352461304558067, 0.7680531591560037, 0.7140693460758318, 0.7263921061650591, 0.7488849366741499, 0.7412085308596703, 0.7407986973874358, 0.7519448031916718, 0.11065464762113064, 0.09649792125407819, 0.10555138083731108, 0.10161739436983896, 0.10353613677132945, 0.09599308846401056, 0.09702018485768515, 0.1027735078794747, 0.11197900451715614, 0.16328580897383216, 0.17879010306969956, 0.19648525374928494, 0.16269837611952065, 0.1516753043178356, 0.13881177979934634, 0.14718981286248034, 0.14179853306269474, 0.15195599898174716, 0.4319807404951307, 0.45577009135981483, 0.450431221078021, 0.44606998353203575, 0.4351448221840053, 0.46812581613725157, 0.466805947491023, 0.49057010915574617, 0.4368477858441451, 0.35167877177900064, 0.33431028635565485, 0.3604478413844656, 0.35669129122255827, 0.3370654774676264, 0.31834020436480204, 0.3778057759243666, 0.3638389664639814, 0.3523307910778889, 0.21572285871868013, 0.21294215491678847, 0.3088134468415046, 0.2035992680072377, 0.17858618846177454, 0.18184744834122235, 0.21607460381806154, 0.18769706207682268, 0.19891948574234064, 0.414148548821925, 0.18234761038544645, 0.3635194140529192, 0.19390298721161803, 0.22506973972046462, 0.21150163264299404, 0.19288841186015626, 0.33420371476230326, 0.1917288891873512, 0.7902076393006908, 0.17152291822241728, 0.8141236702292077, 0.19181758742320576, 0.6245408221348052, 0.19685112326001086, 0.17821062817286926, 0.5990043029146829, 0.16634592088826883, 0.6276725815929822, 0.6483783916561195, 0.19894913947071835, 0.19677285761928565, 0.4439767251084893, 0.16145766927901173, 0.20614083315604848, 0.2081662170560331, 0.15285794172975764, 0.18303961173825256, 0.17453691617059963, 0.19569420614305577, 0.18843682330214673, 0.17346130546218974, 0.18292713484802736, 0.17592810943084147, 0.18411469006854508, 0.19966364738417952, 0.08981016838396605, 0.08295672956250533, 0.07152514324878667, 0.08615769097069426, 0.08632696427284658, 0.07880831981672509, 0.08444425631781927, 0.08235049626579183, 0.08667175151189799]}, "mutation_prompt": null}
{"id": "4523b041-e7f4-431b-8863-e040f7ce26f8", "solution": "import numpy as np\n\nclass EnhancedDynamicDE:\n    def __init__(self, budget, dim, F=0.5, CR=0.9, F_min=0.2, F_max=0.8, CR_min=0.1, CR_max=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.F_min = F_min\n        self.F_max = F_max\n        self.CR_min = CR_min\n        self.CR_max = CR_max\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F = np.clip(self.F + np.random.normal(0, 0.1), self.F_min, self.F_max)\n                CR = np.clip(self.CR + np.random.normal(0, 0.1), self.CR_min, self.CR_max)\n                mutant = np.clip(a + F * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n        \n        return best", "name": "EnhancedDynamicDE", "description": "Implementing a dynamic mutation strategy based on the individual fitness to adapt the mutation rate and crossover probability during the optimization process.", "configspace": "", "generation": 6, "fitness": 0.3724017312079045, "feedback": "The algorithm EnhancedDynamicDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.37 with standard deviation 0.25.", "error": "", "parent_id": "913ebd1f-b479-480a-b914-53d04ab30f02", "metadata": {"aucs": [0.8082862742066441, 0.8012476634645345, 0.8211503415421361, 0.8272261416567708, 0.8171450449334133, 0.8211302772970991, 0.81102988832127, 0.8265824863946327, 0.8018167618564749, 0.642131241285178, 0.6428499409487266, 0.6597865095066464, 0.6583972132662989, 0.6658938589115592, 0.6657789644240886, 0.6769627924510988, 0.6981395747802899, 0.6811486731979799, 0.13169324420634843, 0.11698126723571245, 0.12600879166329892, 0.11742334533874232, 0.11831454700872368, 0.13236564255166416, 0.12419333397573717, 0.11106850812535829, 0.11473745293601245, 0.11867564576568423, 0.10113099752648103, 0.11671481688771979, 0.11029595623148047, 0.1195619374576874, 0.10891783139889066, 0.12212448700459322, 0.11966719001793857, 0.12161879325845604, 0.952367731802367, 0.8960694908481568, 0.8577872322813698, 0.8987389246528614, 0.9226711945135672, 0.8666748459986289, 0.9474936474621114, 0.922407762628429, 0.892702243255848, 0.48460511717358645, 0.49602579618558773, 0.4893639532201344, 0.5329378280810914, 0.4976732701751152, 0.48917231481241363, 0.46214324330621737, 0.4837173248555571, 0.5010024174232712, 0.7588338239768424, 0.7939037117525896, 0.7275794059478105, 0.7863781865510003, 0.8010171623735269, 0.7431040799726161, 0.7890970238371339, 0.7955923546852526, 0.8010540916918102, 0.17382552594501066, 0.23750253839313895, 0.24159321102062226, 0.187406766345393, 0.294726220169521, 0.19376611288463896, 0.2880019065396233, 0.2527689062358869, 0.3737480231403105, 0.19531007680739032, 0.24138823451175673, 0.1914257127702318, 0.26703394029570493, 0.223699726723957, 0.31624115239659456, 0.15670306650157817, 0.22206853991655884, 0.17216483958296835, 0.34272221498976607, 0.3216385501895417, 0.33401606205119183, 0.3310203199226005, 0.32578283920715334, 0.3627254946729712, 0.3695267686873501, 0.36980312496447243, 0.37967671284624194, 0.4905815968147671, 0.5334139337545225, 0.5003093943404613, 0.4621912276392862, 0.4733660963526627, 0.49469773296921504, 0.551219104117836, 0.49432101202329737, 0.5411195954316115, 0.13135006628653012, 0.06774377487420391, 0.18168229878865427, 0.23951041578317123, 0.23987141555537095, 0.23854838703094028, 0.176908988567692, 0.1712304375877728, 0.10823088735807085, 0.27828900554966707, 0.26655451491013515, 0.3030913888447365, 0.3237480140374648, 0.32117004462900856, 0.31402329462497314, 0.28829838198354063, 0.29049180447818546, 0.25987258359449195, 0.7247295400557938, 0.6994871174677919, 0.7209131831051364, 0.6831803803531685, 0.7004032543239129, 0.7014035418579565, 0.7063782332363224, 0.7209326670430359, 0.7283189903516641, 0.12041031289227089, 0.09793929870440843, 0.10499102075159716, 0.08656564427590785, 0.10815541162200393, 0.09715445877894469, 0.10366300843749232, 0.09701811657559412, 0.10764418949099186, 0.1898323064068258, 0.14685367938243254, 0.1379397296529884, 0.15336742300074802, 0.16661803946080023, 0.15102021892152984, 0.15718159335380866, 0.17037039422202505, 0.13751310661579774, 0.40696559242847274, 0.41844599936512317, 0.42067244817022487, 0.39668912240540255, 0.3945355045124549, 0.440120609772241, 0.43610173558529497, 0.4405593272527005, 0.4337311184699768, 0.3033395189142657, 0.3257872484074442, 0.3319523213225961, 0.33111678919185483, 0.3007520597485377, 0.32108043765003735, 0.35735958859114547, 0.34089100553453955, 0.3494930410313226, 0.21228471507475177, 0.20293805672679754, 0.18349078409113295, 0.19464235281485676, 0.1894978713681683, 0.2060027137292385, 0.19889213258330352, 0.21751240900017177, 0.20030045282804287, 0.2972841045739213, 0.22873119954637777, 0.2070387110261146, 0.19048849398935974, 0.19163422054059143, 0.18953701655608757, 0.1805962811493509, 0.18435195616720157, 0.18460059900640258, 0.7449171764249468, 0.19595635478297013, 0.15042819442138367, 0.7669331277284566, 0.3587652118504435, 0.19623167178158785, 0.7307152769713436, 0.6022274668786478, 0.5660292613079774, 0.5075760285116615, 0.20694683407323278, 0.2682380201365835, 0.5893176334021136, 0.6732123185293439, 0.6243259520266002, 0.14845510820807428, 0.2047973475573044, 0.20231611928841076, 0.186485760211773, 0.17356900401388975, 0.19332719755213523, 0.1785031419323565, 0.18470347173307045, 0.18990723871307635, 0.18798652614873712, 0.1869365132452131, 0.18616950391688225, 0.07965363099902023, 0.08573303121077225, 0.07989058422388062, 0.09301864559406836, 0.08842972684088857, 0.07891179920673608, 0.08172194578135772, 0.07810326836587833, 0.08249784572937369]}, "mutation_prompt": null}
{"id": "56f8ba69-011f-4447-94c6-86dff452e066", "solution": "import numpy as np\n\nclass DynamicDE:\n    def __init__(self, budget, dim, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        \n        for _ in range(self.budget - pop_size):\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n        \n        return best", "name": "DynamicDE", "description": "Utilizing Differential Evolution (DE) with a dynamic mutation strategy to enhance population diversity and convergence speed.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "913ebd1f-b479-480a-b914-53d04ab30f02", "metadata": {"aucs": [0.8082951982740995, 0.8014414204667654, 0.8054453577133506, 0.8046704133521985, 0.8058463131857888, 0.8188884175907455, 0.8319621845238742, 0.8024921727708646, 0.8156784341351663, 0.6374593667227992, 0.6889401945204383, 0.6840853480293522, 0.6967349454168776, 0.6836546441420059, 0.7013571449635906, 0.6666788686750416, 0.6770639713943923, 0.6863840800439489, 0.12406593503725594, 0.12297465129273255, 0.14058632370994584, 0.1052595427488272, 0.11167461882941265, 0.13007467230320757, 0.12365019145486145, 0.11918356450990464, 0.11488744604263235, 0.10535781951712397, 0.11481994548974239, 0.09822569063089581, 0.11315686760328558, 0.095718207154741, 0.1284589936656112, 0.11755130828269289, 0.12022350325463882, 0.11584820962019216, 0.8597756612502457, 0.9157991407067686, 0.8919211963318844, 0.9422525779112587, 0.8841830878570923, 0.8793771590025652, 0.8459523177512822, 0.848382114063899, 0.9598061880317073, 0.5245512181825833, 0.48590193773332546, 0.4726385713433626, 0.49755790842027525, 0.44050793004714717, 0.4860225812214042, 0.48923614479716393, 0.5626004529120301, 0.5661570195281409, 0.7502562973574359, 0.7880396995674364, 0.774806000419606, 0.7926459197490786, 0.8196606075332389, 0.7521743278710327, 0.804043637659155, 0.826297721791377, 0.7746707969526332, 0.49293502300884817, 0.271219826626266, 0.19525206862626898, 0.21208489548313536, 0.28795742039245853, 0.23712476040114228, 0.26456600091702454, 0.42421509633777477, 0.24608110188436494, 0.20232704007066327, 0.3997401225652686, 0.3946916881107272, 0.3321086903701219, 0.17433639000156165, 0.34057707605230425, 0.3185375665222645, 0.44875467299607996, 0.22345913743219759, 0.47817446858601365, 0.4614805127441417, 0.4102169989000195, 0.44686108002553415, 0.43915453207298905, 0.4440057175463302, 0.44242477992667906, 0.45027983433914365, 0.45654985092748845, 0.5447193995815659, 0.587850359461022, 0.5479286276366925, 0.5932712354594567, 0.5281597245465506, 0.576369408068012, 0.5895215243182369, 0.6533175907468016, 0.5580757098786728, 0.1820234248487943, 0.10042102185966051, 0.1094458063176349, 0.18975380863799762, 0.2616899769940645, 0.2704787827836086, 0.14806365752002526, 0.16644564002240947, 0.15630378745456364, 0.3522612834402613, 0.34558762409589794, 0.30832940654158036, 0.3548320422232081, 0.36776095379850093, 0.36386973613151785, 0.32759195569500954, 0.36128975575133904, 0.3295039643056106, 0.7251247130914591, 0.7421906635710509, 0.7496270213295275, 0.7230575132501221, 0.7251778593971584, 0.755831239590211, 0.7223247260970481, 0.7243412267015438, 0.7346211765929873, 0.09425026936346892, 0.10579369271440497, 0.09773862024513658, 0.09069026109797595, 0.09873614125013352, 0.11727414971731487, 0.11161073672894872, 0.1053016798615024, 0.10926195124569171, 0.1668445090052374, 0.13100362643348562, 0.14861021678460906, 0.1597184884703442, 0.1703972777954268, 0.1536571464041484, 0.21274717756607497, 0.1577126553447179, 0.17778289692217875, 0.41067801371860546, 0.43734698273738726, 0.46862066207838815, 0.39221448766203615, 0.41783463202763027, 0.4328395179856588, 0.4438323548298344, 0.4822833501481897, 0.4826278681932962, 0.3433992730587172, 0.3441615990342961, 0.33987749587443383, 0.3503815404539863, 0.32444776412018095, 0.3406782878289202, 0.35588497881207926, 0.35848157334592856, 0.32881957612434887, 0.20687612780704456, 0.21476317805421452, 0.19118188338739683, 0.20720838202013414, 0.22689532950204405, 0.19706522310943897, 0.2048548004556734, 0.2102999473590339, 0.2048058029438542, 0.19922743430889167, 0.2137604528357705, 0.1964308170507908, 0.18742924286984874, 0.25777128882776845, 0.18928562755462075, 0.2023242721488182, 0.21173853655341168, 0.24001795766827494, 0.6726255830604337, 0.19796955755725243, 0.19251605048532705, 0.6089964619245598, 0.7234653051791861, 0.1786098411700403, 0.565304270779537, 0.17117816801315844, 0.18106701919554602, 0.6868763099660992, 0.31772736525156975, 0.710391785663764, 0.1979188806567178, 0.2012540407726643, 0.70839429766416, 0.6418310694978038, 0.15061184268873962, 0.2104471192807641, 0.1938161867954813, 0.1886171753911593, 0.21371843256686773, 0.18694601503491992, 0.2054013654456397, 0.18033810841782072, 0.1958685708189951, 0.20650369436260085, 0.1886939359094303, 0.07497160228750599, 0.08931752520059522, 0.08148000773387032, 0.07270439939139905, 0.08257615351081926, 0.08619801121010329, 0.08427141040888397, 0.07555033649169784, 0.08109924643008071]}, "mutation_prompt": null}
{"id": "d0d32094-b322-4911-8ce9-7d352141a8f4", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)  # Dynamic population size adaptation\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Introducing a dynamic population size adaptation mechanism to adjust the population size based on the optimization progress.", "configspace": "", "generation": 8, "fitness": 0.39118302020709517, "feedback": "The algorithm AdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.26.", "error": "", "parent_id": "913ebd1f-b479-480a-b914-53d04ab30f02", "metadata": {"aucs": [0.8141148160920322, 0.8218754966753754, 0.8213857448210282, 0.8346046228768105, 0.8274309966402753, 0.8234816227279895, 0.8259069008293203, 0.8139656748807428, 0.8110882493758053, 0.6706528448106711, 0.6845971566234526, 0.6540611483678862, 0.6729123660322808, 0.6577471902316199, 0.6850711347742628, 0.6917898988588508, 0.6702930865772843, 0.6861763895751063, 0.11545961245493441, 0.12842011219560334, 0.12237736389713427, 0.12693264639935964, 0.12939960608118783, 0.11395991767890068, 0.11653981054920937, 0.11964708413995473, 0.11588578838101582, 0.09410587989207919, 0.1141563052594392, 0.10558916788145212, 0.109080796035952, 0.12105965086757975, 0.0992363450535908, 0.10652841905167898, 0.11013038029970046, 0.10901478532002185, 0.7755064778702929, 0.9793399571779804, 0.8945605718975168, 0.8872965031043824, 0.8983651655451508, 0.7865359493218984, 0.9307099998103933, 0.9138461611765357, 0.9006258860847812, 0.5401967733276575, 0.5701610158856139, 0.5023987652824188, 0.4742358537025455, 0.48946236042750446, 0.5174596457946746, 0.5338644523767772, 0.5303632649267815, 0.5356413617338835, 0.7784548974961027, 0.7812616520941557, 0.7571453008151445, 0.8098430504767917, 0.8001429379764442, 0.7959469023365603, 0.7847803611988267, 0.7703389825143474, 0.8004564912106287, 0.3227381462384644, 0.44110787670867824, 0.3528599346174929, 0.2153018448612708, 0.3011733337014064, 0.1241225663843325, 0.31097331755913593, 0.24312661565196714, 0.19105284748737217, 0.26060648513990115, 0.3215829309356283, 0.2482276192534505, 0.32501191344524694, 0.42773969776501575, 0.2696129671159715, 0.34656358967045275, 0.17013555945814718, 0.3369612903462116, 0.4501222190354387, 0.4776328689226309, 0.4412818816805377, 0.4333543289302474, 0.4274689315149057, 0.46398488204956134, 0.5033015363672151, 0.4734344167650112, 0.4963959195567623, 0.5749465513700259, 0.5997880471356056, 0.6182407435826653, 0.5550541660930833, 0.5715771535007548, 0.5802711378346094, 0.5750406102483097, 0.6159400614962274, 0.5915195071179176, 0.20604279382371737, 0.11714252070137832, 0.08805521100697622, 0.28576019758055216, 0.21123569989527835, 0.19755786635424544, 0.1482451259141111, 0.10573561426422018, 0.14426311227011812, 0.3546103258009977, 0.3449470645473801, 0.34304696050986627, 0.39065193593449377, 0.3677178659265049, 0.3698832692653916, 0.3408024178183723, 0.3471483379175746, 0.34075310887201393, 0.7163367310305222, 0.7199823883587672, 0.7561446107514123, 0.7290179307314687, 0.7490744175060065, 0.7126436680146209, 0.7399714379030318, 0.7089437668087727, 0.7339757735908461, 0.09741568543540657, 0.1129493836162353, 0.09831142868686804, 0.10004953640928249, 0.10065759118264728, 0.11818957230208849, 0.10876558579621776, 0.10291513062957713, 0.1073209109935418, 0.1630089384255723, 0.15057190743510307, 0.1444515460727409, 0.142772152658312, 0.14814107052993952, 0.16865081938291382, 0.14737934114945095, 0.16243040877165227, 0.17624495575860022, 0.4275641868562041, 0.44278356641390737, 0.45981073471675016, 0.45505765998190983, 0.41407510132518477, 0.42340699215383804, 0.45955453227509724, 0.4532943518632785, 0.4311184491597996, 0.3415066112583304, 0.34075094019780583, 0.3463418987263348, 0.31751155847197765, 0.33528112766061513, 0.36966920177140905, 0.3777455096998814, 0.37147667105235693, 0.3739988895120404, 0.18423247737109194, 0.18696332448519015, 0.18659202596712654, 0.182220085667681, 0.20865247505122686, 0.19475917421130273, 0.21142073629299252, 0.19658391799101516, 0.20358323726102012, 0.18891302077521221, 0.19831112244729243, 0.19378146417374442, 0.19835532221636076, 0.19129745398558262, 0.2019968734572335, 0.19026390611232813, 0.2097789884558957, 0.30632993430119126, 0.7732499929531067, 0.741760937758999, 0.18166151149636145, 0.7745320707030265, 0.6999293405510598, 0.7156386675101232, 0.15902768976989134, 0.7146729019122886, 0.17920777802825383, 0.7074498041640569, 0.20656187263095271, 0.19603664875854998, 0.1967703883563796, 0.2013484846552518, 0.6154005959663285, 0.19939256847499276, 0.2048014349133913, 0.20514556535448625, 0.1895315187107337, 0.19417415580464736, 0.1948737720127678, 0.192885575576903, 0.18097143782583114, 0.20703873370536507, 0.19435585570226088, 0.20098681033949095, 0.18665799378664127, 0.08727203270123296, 0.08032435708904717, 0.09216486464359386, 0.08825897078160283, 0.08249559026947317, 0.09192096536462724, 0.08209375105963479, 0.08678606881710182, 0.07337876161206769]}, "mutation_prompt": null}
{"id": "437a716a-f9ff-405f-af80-e00d592f25fc", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)  # Dynamic population size adaptation\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Introducing a dynamic population size adaptation mechanism to adjust the population size based on the optimization progress.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "d0d32094-b322-4911-8ce9-7d352141a8f4", "metadata": {"aucs": [0.8141148160920322, 0.8218754966753754, 0.8213857448210282, 0.8346046228768105, 0.8274309966402753, 0.8234816227279895, 0.8259069008293203, 0.8139656748807428, 0.8110882493758053, 0.6706528448106711, 0.6845971566234526, 0.6540611483678862, 0.6729123660322808, 0.6577471902316199, 0.6850711347742628, 0.6917898988588508, 0.6702930865772843, 0.6861763895751063, 0.11545961245493441, 0.12842011219560334, 0.12237736389713427, 0.12693264639935964, 0.12939960608118783, 0.11395991767890068, 0.11653981054920937, 0.11964708413995473, 0.11588578838101582, 0.09410587989207919, 0.1141563052594392, 0.10558916788145212, 0.109080796035952, 0.12105965086757975, 0.0992363450535908, 0.10652841905167898, 0.11013038029970046, 0.10901478532002185, 0.7755064778702929, 0.9793399571779804, 0.8945605718975168, 0.8872965031043824, 0.8983651655451508, 0.7865359493218984, 0.9307099998103933, 0.9138461611765357, 0.9006258860847812, 0.5401967733276575, 0.5701610158856139, 0.5023987652824188, 0.4742358537025455, 0.48946236042750446, 0.5174596457946746, 0.5338644523767772, 0.5303632649267815, 0.5356413617338835, 0.7784548974961027, 0.7812616520941557, 0.7571453008151445, 0.8098430504767917, 0.8001429379764442, 0.7959469023365603, 0.7847803611988267, 0.7703389825143474, 0.8004564912106287, 0.3227381462384644, 0.44110787670867824, 0.3528599346174929, 0.2153018448612708, 0.3011733337014064, 0.1241225663843325, 0.31097331755913593, 0.24312661565196714, 0.19105284748737217, 0.26060648513990115, 0.3215829309356283, 0.2482276192534505, 0.32501191344524694, 0.42773969776501575, 0.2696129671159715, 0.34656358967045275, 0.17013555945814718, 0.3369612903462116, 0.4501222190354387, 0.4776328689226309, 0.4412818816805377, 0.4333543289302474, 0.4274689315149057, 0.46398488204956134, 0.5033015363672151, 0.4734344167650112, 0.4963959195567623, 0.5749465513700259, 0.5997880471356056, 0.6182407435826653, 0.5550541660930833, 0.5715771535007548, 0.5802711378346094, 0.5750406102483097, 0.6159400614962274, 0.5915195071179176, 0.20604279382371737, 0.11714252070137832, 0.08805521100697622, 0.28576019758055216, 0.21123569989527835, 0.19755786635424544, 0.1482451259141111, 0.10573561426422018, 0.14426311227011812, 0.3546103258009977, 0.3449470645473801, 0.34304696050986627, 0.39065193593449377, 0.3677178659265049, 0.3698832692653916, 0.3408024178183723, 0.3471483379175746, 0.34075310887201393, 0.7163367310305222, 0.7199823883587672, 0.7561446107514123, 0.7290179307314687, 0.7490744175060065, 0.7126436680146209, 0.7399714379030318, 0.7089437668087727, 0.7339757735908461, 0.09741568543540657, 0.1129493836162353, 0.09831142868686804, 0.10004953640928249, 0.10065759118264728, 0.11818957230208849, 0.10876558579621776, 0.10291513062957713, 0.1073209109935418, 0.1630089384255723, 0.15057190743510307, 0.1444515460727409, 0.142772152658312, 0.14814107052993952, 0.16865081938291382, 0.14737934114945095, 0.16243040877165227, 0.17624495575860022, 0.4275641868562041, 0.44278356641390737, 0.45981073471675016, 0.45505765998190983, 0.41407510132518477, 0.42340699215383804, 0.45955453227509724, 0.4532943518632785, 0.4311184491597996, 0.3415066112583304, 0.34075094019780583, 0.3463418987263348, 0.31751155847197765, 0.33528112766061513, 0.36966920177140905, 0.3777455096998814, 0.37147667105235693, 0.3739988895120404, 0.18423247737109194, 0.18696332448519015, 0.18659202596712654, 0.182220085667681, 0.20865247505122686, 0.19475917421130273, 0.21142073629299252, 0.19658391799101516, 0.20358323726102012, 0.18891302077521221, 0.19831112244729243, 0.19378146417374442, 0.19835532221636076, 0.19129745398558262, 0.2019968734572335, 0.19026390611232813, 0.2097789884558957, 0.30632993430119126, 0.7732499929531067, 0.741760937758999, 0.18166151149636145, 0.7745320707030265, 0.6999293405510598, 0.7156386675101232, 0.15902768976989134, 0.7146729019122886, 0.17920777802825383, 0.7074498041640569, 0.20656187263095271, 0.19603664875854998, 0.1967703883563796, 0.2013484846552518, 0.6154005959663285, 0.19939256847499276, 0.2048014349133913, 0.20514556535448625, 0.1895315187107337, 0.19417415580464736, 0.1948737720127678, 0.192885575576903, 0.18097143782583114, 0.20703873370536507, 0.19435585570226088, 0.20098681033949095, 0.18665799378664127, 0.08727203270123296, 0.08032435708904717, 0.09216486464359386, 0.08825897078160283, 0.08249559026947317, 0.09192096536462724, 0.08209375105963479, 0.08678606881710182, 0.07337876161206769]}, "mutation_prompt": null}
{"id": "5c487e6d-54bd-42e0-bba9-95c5faa33bfd", "solution": "import numpy as np\n\nclass ImprovedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.F = 0.5\n        self.CR = 0.9\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            self.F = np.clip(np.random.normal(self.F, 0.1), 0, 2)  # Self-adaptive mutation factor\n            self.CR = np.clip(np.random.normal(self.CR, 0.1), 0, 1)  # Self-adaptive crossover rate\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "ImprovedAdaptiveDE", "description": "Implementing a self-adaptive mechanism to dynamically adjust the mutation and crossover rates during optimization.", "configspace": "", "generation": 10, "fitness": 0.20763971427312122, "feedback": "The algorithm ImprovedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.19.", "error": "", "parent_id": "d0d32094-b322-4911-8ce9-7d352141a8f4", "metadata": {"aucs": [0.5888062951654596, 0.5315890262204886, 0.37780688979293087, 0.7829962249708874, 0.5919998146329684, 0.17259051771649647, 0.74888735895616, 0.5863773747714199, 0.14748106531934424, 0.6092199753168197, 0.2981434483301, 0.010031672017822735, 0.35188089201789097, 0.2547027860037727, 0.0043985417201116705, 0.3304753171470458, 0.2944163949445071, 0.006693067256083096, 0.3789099256749692, 0.13899905869504436, 0.0645565398442075, 0.276632159795949, 0.13742138699853257, 0.10145934366847109, 0.3728696021828085, 0.12619173951518492, 0.11040850568602345, 0.1486698390458725, 0.11219955814934202, 0.0943804201969699, 0.14915347175783011, 0.12430489486612462, 0.06395161706473496, 0.14790639396798855, 0.12407032029448983, 0.02942788048956191, 0.9634603228638613, 0.9004553542197197, 0.07102694694851253, 0.9511340966061529, 0.9365530627767068, 0.2293135182033761, 0.9511355760759064, 0.8929450301772722, 0.08329541227053883, 0.26109301916977445, 0.25060474228196916, 0.09803315339685559, 0.2016799890514488, 0.19489529442197706, 0.028230939429721547, 0.2538401438849699, 0.21808513294234166, 0.14755863143793047, 0.33875937492032604, 0.25606378967113086, 0.13125958179405717, 0.32962556657716846, 0.29752542327492215, 0.08990809939477318, 0.7480201000682937, 0.28143308507074005, 0.15238949768937304, 0.12757912178801256, 0.15089039621947886, 9.999999999998899e-05, 0.13961194792716147, 0.14316772688665003, 0.002905234383683286, 0.27232011439588444, 0.14359468234119654, 9.999999999998899e-05, 0.21863670787447864, 0.17242252611374165, 0.004817001877071236, 0.17207227931838665, 0.15056219775214397, 0.046592308052427533, 0.1663393003885696, 0.15101539549457155, 0.07649667091879819, 0.028925129668937788, 9.999999999998899e-05, 9.999999999998899e-05, 0.15073432105650497, 9.999999999998899e-05, 9.999999999998899e-05, 0.09946203931037723, 9.999999999998899e-05, 0.027311319414423774, 0.22598469684654443, 0.11072211192969594, 0.0886303117336682, 0.08718003291942644, 0.11162060697126941, 0.10387894557183974, 0.2583801207494928, 0.14375725873222778, 0.05066228598652911, 0.18651859512214009, 9.999999999998899e-05, 9.999999999998899e-05, 0.17940404988110004, 9.999999999998899e-05, 9.999999999998899e-05, 0.19512747788253515, 9.999999999998899e-05, 9.999999999998899e-05, 0.20775395505031158, 0.08491445239978146, 0.011849887708107465, 0.18973548850307898, 0.09685016504230659, 0.022055807642091363, 0.24461959812686496, 0.06842561967803229, 0.004790557867069056, 0.432629329383872, 0.40839394426811415, 0.226769091066648, 0.4984845282840562, 0.40192141680729987, 0.2621384472635586, 0.5312036451022253, 0.413243169804799, 0.23384163836943972, 0.10359889708124226, 0.09200352882101981, 0.10300212486312232, 0.1422413480967556, 0.10311513870586841, 0.09530354030850285, 0.12711048340030318, 0.08722819383142633, 0.06334472877859187, 0.18627427768769345, 0.1389413282012103, 0.15960129088114094, 0.188891303932051, 0.1981956779699453, 0.15892099286011108, 0.1389062405180741, 0.1733220296940544, 0.18794078358833988, 0.2976826205911809, 0.2658221096976561, 0.20118522303529784, 0.33035045271970753, 0.2540200397502662, 0.2236106646251418, 0.3685430439351035, 0.27438059136364945, 0.2312589461575557, 0.20682271347894765, 0.17599240079772338, 0.17895746842382554, 0.27860930005821993, 0.16107286845354052, 0.1026391746129588, 0.35824923721735713, 0.18795262649011368, 0.14506387278106447, 0.18555625595594105, 0.1812032790891065, 0.19059099213347286, 0.19856544774588547, 0.22293707220747638, 0.18446444944219842, 0.1997166895732867, 0.17692817670216077, 0.1766429991337134, 0.2261813106976861, 0.18971517312708397, 0.165798476215832, 0.2206767134124057, 0.1994977766390622, 0.16367195299067572, 0.22750826360074727, 0.20290236554789587, 0.17984539961711632, 0.18769771537677393, 0.299078892027292, 0.18701775497992212, 0.16954183621884533, 0.2839125426008766, 0.18379988419251736, 0.695266614678857, 0.16581115322459883, 0.21404558296865206, 0.193346049732669, 0.19156022241041848, 0.16321282020599392, 0.19466589257626166, 0.22033588997102183, 0.15090646793657492, 0.20010782193159415, 0.1991892622041287, 0.14372659322260517, 0.20455727326054207, 0.18895442074825752, 0.1940091355570257, 0.17701877419752055, 0.19126027409855217, 0.1945975439866524, 0.19554005294964005, 0.18669097597301842, 0.1927828377794405, 0.07897629523747618, 0.07510622393072774, 0.07614403278704518, 0.08755439922225194, 0.07047529902060179, 0.0842767136832756, 0.08897970825684609, 0.07418819724421932, 0.08670720867012172]}, "mutation_prompt": null}
{"id": "36a95dc8-6dda-48eb-8979-849f556a1d51", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)  # Dynamic population size adaptation\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Introducing a dynamic population size adaptation mechanism to adjust the population size based on the optimization progress.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0d32094-b322-4911-8ce9-7d352141a8f4", "metadata": {"aucs": [0.8141148160920322, 0.8218754966753754, 0.8213857448210282, 0.8346046228768105, 0.8274309966402753, 0.8234816227279895, 0.8259069008293203, 0.8139656748807428, 0.8110882493758053, 0.6706528448106711, 0.6845971566234526, 0.6540611483678862, 0.6729123660322808, 0.6577471902316199, 0.6850711347742628, 0.6917898988588508, 0.6702930865772843, 0.6861763895751063, 0.11545961245493441, 0.12842011219560334, 0.12237736389713427, 0.12693264639935964, 0.12939960608118783, 0.11395991767890068, 0.11653981054920937, 0.11964708413995473, 0.11588578838101582, 0.09410587989207919, 0.1141563052594392, 0.10558916788145212, 0.109080796035952, 0.12105965086757975, 0.0992363450535908, 0.10652841905167898, 0.11013038029970046, 0.10901478532002185, 0.7755064778702929, 0.9793399571779804, 0.8945605718975168, 0.8872965031043824, 0.8983651655451508, 0.7865359493218984, 0.9307099998103933, 0.9138461611765357, 0.9006258860847812, 0.5401967733276575, 0.5701610158856139, 0.5023987652824188, 0.4742358537025455, 0.48946236042750446, 0.5174596457946746, 0.5338644523767772, 0.5303632649267815, 0.5356413617338835, 0.7784548974961027, 0.7812616520941557, 0.7571453008151445, 0.8098430504767917, 0.8001429379764442, 0.7959469023365603, 0.7847803611988267, 0.7703389825143474, 0.8004564912106287, 0.3227381462384644, 0.44110787670867824, 0.3528599346174929, 0.2153018448612708, 0.3011733337014064, 0.1241225663843325, 0.31097331755913593, 0.24312661565196714, 0.19105284748737217, 0.26060648513990115, 0.3215829309356283, 0.2482276192534505, 0.32501191344524694, 0.42773969776501575, 0.2696129671159715, 0.34656358967045275, 0.17013555945814718, 0.3369612903462116, 0.4501222190354387, 0.4776328689226309, 0.4412818816805377, 0.4333543289302474, 0.4274689315149057, 0.46398488204956134, 0.5033015363672151, 0.4734344167650112, 0.4963959195567623, 0.5749465513700259, 0.5997880471356056, 0.6182407435826653, 0.5550541660930833, 0.5715771535007548, 0.5802711378346094, 0.5750406102483097, 0.6159400614962274, 0.5915195071179176, 0.20604279382371737, 0.11714252070137832, 0.08805521100697622, 0.28576019758055216, 0.21123569989527835, 0.19755786635424544, 0.1482451259141111, 0.10573561426422018, 0.14426311227011812, 0.3546103258009977, 0.3449470645473801, 0.34304696050986627, 0.39065193593449377, 0.3677178659265049, 0.3698832692653916, 0.3408024178183723, 0.3471483379175746, 0.34075310887201393, 0.7163367310305222, 0.7199823883587672, 0.7561446107514123, 0.7290179307314687, 0.7490744175060065, 0.7126436680146209, 0.7399714379030318, 0.7089437668087727, 0.7339757735908461, 0.09741568543540657, 0.1129493836162353, 0.09831142868686804, 0.10004953640928249, 0.10065759118264728, 0.11818957230208849, 0.10876558579621776, 0.10291513062957713, 0.1073209109935418, 0.1630089384255723, 0.15057190743510307, 0.1444515460727409, 0.142772152658312, 0.14814107052993952, 0.16865081938291382, 0.14737934114945095, 0.16243040877165227, 0.17624495575860022, 0.4275641868562041, 0.44278356641390737, 0.45981073471675016, 0.45505765998190983, 0.41407510132518477, 0.42340699215383804, 0.45955453227509724, 0.4532943518632785, 0.4311184491597996, 0.3415066112583304, 0.34075094019780583, 0.3463418987263348, 0.31751155847197765, 0.33528112766061513, 0.36966920177140905, 0.3777455096998814, 0.37147667105235693, 0.3739988895120404, 0.18423247737109194, 0.18696332448519015, 0.18659202596712654, 0.182220085667681, 0.20865247505122686, 0.19475917421130273, 0.21142073629299252, 0.19658391799101516, 0.20358323726102012, 0.18891302077521221, 0.19831112244729243, 0.19378146417374442, 0.19835532221636076, 0.19129745398558262, 0.2019968734572335, 0.19026390611232813, 0.2097789884558957, 0.30632993430119126, 0.7732499929531067, 0.741760937758999, 0.18166151149636145, 0.7745320707030265, 0.6999293405510598, 0.7156386675101232, 0.15902768976989134, 0.7146729019122886, 0.17920777802825383, 0.7074498041640569, 0.20656187263095271, 0.19603664875854998, 0.1967703883563796, 0.2013484846552518, 0.6154005959663285, 0.19939256847499276, 0.2048014349133913, 0.20514556535448625, 0.1895315187107337, 0.19417415580464736, 0.1948737720127678, 0.192885575576903, 0.18097143782583114, 0.20703873370536507, 0.19435585570226088, 0.20098681033949095, 0.18665799378664127, 0.08727203270123296, 0.08032435708904717, 0.09216486464359386, 0.08825897078160283, 0.08249559026947317, 0.09192096536462724, 0.08209375105963479, 0.08678606881710182, 0.07337876161206769]}, "mutation_prompt": null}
{"id": "a2b35a77-497f-4e41-bc11-c1b14df17fb1", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)  # Dynamic population size adaptation\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Introducing a dynamic population size adaptation mechanism to adjust the population size based on the optimization progress.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0d32094-b322-4911-8ce9-7d352141a8f4", "metadata": {"aucs": [0.8141148160920322, 0.8218754966753754, 0.8213857448210282, 0.8346046228768105, 0.8274309966402753, 0.8234816227279895, 0.8259069008293203, 0.8139656748807428, 0.8110882493758053, 0.6706528448106711, 0.6845971566234526, 0.6540611483678862, 0.6729123660322808, 0.6577471902316199, 0.6850711347742628, 0.6917898988588508, 0.6702930865772843, 0.6861763895751063, 0.11545961245493441, 0.12842011219560334, 0.12237736389713427, 0.12693264639935964, 0.12939960608118783, 0.11395991767890068, 0.11653981054920937, 0.11964708413995473, 0.11588578838101582, 0.09410587989207919, 0.1141563052594392, 0.10558916788145212, 0.109080796035952, 0.12105965086757975, 0.0992363450535908, 0.10652841905167898, 0.11013038029970046, 0.10901478532002185, 0.7755064778702929, 0.9793399571779804, 0.8945605718975168, 0.8872965031043824, 0.8983651655451508, 0.7865359493218984, 0.9307099998103933, 0.9138461611765357, 0.9006258860847812, 0.5401967733276575, 0.5701610158856139, 0.5023987652824188, 0.4742358537025455, 0.48946236042750446, 0.5174596457946746, 0.5338644523767772, 0.5303632649267815, 0.5356413617338835, 0.7784548974961027, 0.7812616520941557, 0.7571453008151445, 0.8098430504767917, 0.8001429379764442, 0.7959469023365603, 0.7847803611988267, 0.7703389825143474, 0.8004564912106287, 0.3227381462384644, 0.44110787670867824, 0.3528599346174929, 0.2153018448612708, 0.3011733337014064, 0.1241225663843325, 0.31097331755913593, 0.24312661565196714, 0.19105284748737217, 0.26060648513990115, 0.3215829309356283, 0.2482276192534505, 0.32501191344524694, 0.42773969776501575, 0.2696129671159715, 0.34656358967045275, 0.17013555945814718, 0.3369612903462116, 0.4501222190354387, 0.4776328689226309, 0.4412818816805377, 0.4333543289302474, 0.4274689315149057, 0.46398488204956134, 0.5033015363672151, 0.4734344167650112, 0.4963959195567623, 0.5749465513700259, 0.5997880471356056, 0.6182407435826653, 0.5550541660930833, 0.5715771535007548, 0.5802711378346094, 0.5750406102483097, 0.6159400614962274, 0.5915195071179176, 0.20604279382371737, 0.11714252070137832, 0.08805521100697622, 0.28576019758055216, 0.21123569989527835, 0.19755786635424544, 0.1482451259141111, 0.10573561426422018, 0.14426311227011812, 0.3546103258009977, 0.3449470645473801, 0.34304696050986627, 0.39065193593449377, 0.3677178659265049, 0.3698832692653916, 0.3408024178183723, 0.3471483379175746, 0.34075310887201393, 0.7163367310305222, 0.7199823883587672, 0.7561446107514123, 0.7290179307314687, 0.7490744175060065, 0.7126436680146209, 0.7399714379030318, 0.7089437668087727, 0.7339757735908461, 0.09741568543540657, 0.1129493836162353, 0.09831142868686804, 0.10004953640928249, 0.10065759118264728, 0.11818957230208849, 0.10876558579621776, 0.10291513062957713, 0.1073209109935418, 0.1630089384255723, 0.15057190743510307, 0.1444515460727409, 0.142772152658312, 0.14814107052993952, 0.16865081938291382, 0.14737934114945095, 0.16243040877165227, 0.17624495575860022, 0.4275641868562041, 0.44278356641390737, 0.45981073471675016, 0.45505765998190983, 0.41407510132518477, 0.42340699215383804, 0.45955453227509724, 0.4532943518632785, 0.4311184491597996, 0.3415066112583304, 0.34075094019780583, 0.3463418987263348, 0.31751155847197765, 0.33528112766061513, 0.36966920177140905, 0.3777455096998814, 0.37147667105235693, 0.3739988895120404, 0.18423247737109194, 0.18696332448519015, 0.18659202596712654, 0.182220085667681, 0.20865247505122686, 0.19475917421130273, 0.21142073629299252, 0.19658391799101516, 0.20358323726102012, 0.18891302077521221, 0.19831112244729243, 0.19378146417374442, 0.19835532221636076, 0.19129745398558262, 0.2019968734572335, 0.19026390611232813, 0.2097789884558957, 0.30632993430119126, 0.7732499929531067, 0.741760937758999, 0.18166151149636145, 0.7745320707030265, 0.6999293405510598, 0.7156386675101232, 0.15902768976989134, 0.7146729019122886, 0.17920777802825383, 0.7074498041640569, 0.20656187263095271, 0.19603664875854998, 0.1967703883563796, 0.2013484846552518, 0.6154005959663285, 0.19939256847499276, 0.2048014349133913, 0.20514556535448625, 0.1895315187107337, 0.19417415580464736, 0.1948737720127678, 0.192885575576903, 0.18097143782583114, 0.20703873370536507, 0.19435585570226088, 0.20098681033949095, 0.18665799378664127, 0.08727203270123296, 0.08032435708904717, 0.09216486464359386, 0.08825897078160283, 0.08249559026947317, 0.09192096536462724, 0.08209375105963479, 0.08678606881710182, 0.07337876161206769]}, "mutation_prompt": null}
{"id": "269ab85e-caaf-4b51-9bba-487d2db57495", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)  # Dynamic population size adaptation\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Introducing a dynamic population size adaptation mechanism to adjust the population size based on the optimization progress.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0d32094-b322-4911-8ce9-7d352141a8f4", "metadata": {"aucs": [0.8141148160920322, 0.8218754966753754, 0.8213857448210282, 0.8346046228768105, 0.8274309966402753, 0.8234816227279895, 0.8259069008293203, 0.8139656748807428, 0.8110882493758053, 0.6706528448106711, 0.6845971566234526, 0.6540611483678862, 0.6729123660322808, 0.6577471902316199, 0.6850711347742628, 0.6917898988588508, 0.6702930865772843, 0.6861763895751063, 0.11545961245493441, 0.12842011219560334, 0.12237736389713427, 0.12693264639935964, 0.12939960608118783, 0.11395991767890068, 0.11653981054920937, 0.11964708413995473, 0.11588578838101582, 0.09410587989207919, 0.1141563052594392, 0.10558916788145212, 0.109080796035952, 0.12105965086757975, 0.0992363450535908, 0.10652841905167898, 0.11013038029970046, 0.10901478532002185, 0.7755064778702929, 0.9793399571779804, 0.8945605718975168, 0.8872965031043824, 0.8983651655451508, 0.7865359493218984, 0.9307099998103933, 0.9138461611765357, 0.9006258860847812, 0.5401967733276575, 0.5701610158856139, 0.5023987652824188, 0.4742358537025455, 0.48946236042750446, 0.5174596457946746, 0.5338644523767772, 0.5303632649267815, 0.5356413617338835, 0.7784548974961027, 0.7812616520941557, 0.7571453008151445, 0.8098430504767917, 0.8001429379764442, 0.7959469023365603, 0.7847803611988267, 0.7703389825143474, 0.8004564912106287, 0.3227381462384644, 0.44110787670867824, 0.3528599346174929, 0.2153018448612708, 0.3011733337014064, 0.1241225663843325, 0.31097331755913593, 0.24312661565196714, 0.19105284748737217, 0.26060648513990115, 0.3215829309356283, 0.2482276192534505, 0.32501191344524694, 0.42773969776501575, 0.2696129671159715, 0.34656358967045275, 0.17013555945814718, 0.3369612903462116, 0.4501222190354387, 0.4776328689226309, 0.4412818816805377, 0.4333543289302474, 0.4274689315149057, 0.46398488204956134, 0.5033015363672151, 0.4734344167650112, 0.4963959195567623, 0.5749465513700259, 0.5997880471356056, 0.6182407435826653, 0.5550541660930833, 0.5715771535007548, 0.5802711378346094, 0.5750406102483097, 0.6159400614962274, 0.5915195071179176, 0.20604279382371737, 0.11714252070137832, 0.08805521100697622, 0.28576019758055216, 0.21123569989527835, 0.19755786635424544, 0.1482451259141111, 0.10573561426422018, 0.14426311227011812, 0.3546103258009977, 0.3449470645473801, 0.34304696050986627, 0.39065193593449377, 0.3677178659265049, 0.3698832692653916, 0.3408024178183723, 0.3471483379175746, 0.34075310887201393, 0.7163367310305222, 0.7199823883587672, 0.7561446107514123, 0.7290179307314687, 0.7490744175060065, 0.7126436680146209, 0.7399714379030318, 0.7089437668087727, 0.7339757735908461, 0.09741568543540657, 0.1129493836162353, 0.09831142868686804, 0.10004953640928249, 0.10065759118264728, 0.11818957230208849, 0.10876558579621776, 0.10291513062957713, 0.1073209109935418, 0.1630089384255723, 0.15057190743510307, 0.1444515460727409, 0.142772152658312, 0.14814107052993952, 0.16865081938291382, 0.14737934114945095, 0.16243040877165227, 0.17624495575860022, 0.4275641868562041, 0.44278356641390737, 0.45981073471675016, 0.45505765998190983, 0.41407510132518477, 0.42340699215383804, 0.45955453227509724, 0.4532943518632785, 0.4311184491597996, 0.3415066112583304, 0.34075094019780583, 0.3463418987263348, 0.31751155847197765, 0.33528112766061513, 0.36966920177140905, 0.3777455096998814, 0.37147667105235693, 0.3739988895120404, 0.18423247737109194, 0.18696332448519015, 0.18659202596712654, 0.182220085667681, 0.20865247505122686, 0.19475917421130273, 0.21142073629299252, 0.19658391799101516, 0.20358323726102012, 0.18891302077521221, 0.19831112244729243, 0.19378146417374442, 0.19835532221636076, 0.19129745398558262, 0.2019968734572335, 0.19026390611232813, 0.2097789884558957, 0.30632993430119126, 0.7732499929531067, 0.741760937758999, 0.18166151149636145, 0.7745320707030265, 0.6999293405510598, 0.7156386675101232, 0.15902768976989134, 0.7146729019122886, 0.17920777802825383, 0.7074498041640569, 0.20656187263095271, 0.19603664875854998, 0.1967703883563796, 0.2013484846552518, 0.6154005959663285, 0.19939256847499276, 0.2048014349133913, 0.20514556535448625, 0.1895315187107337, 0.19417415580464736, 0.1948737720127678, 0.192885575576903, 0.18097143782583114, 0.20703873370536507, 0.19435585570226088, 0.20098681033949095, 0.18665799378664127, 0.08727203270123296, 0.08032435708904717, 0.09216486464359386, 0.08825897078160283, 0.08249559026947317, 0.09192096536462724, 0.08209375105963479, 0.08678606881710182, 0.07337876161206769]}, "mutation_prompt": null}
{"id": "eca3aef2-c2cc-4560-b9e7-bb84478998fa", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)  # Dynamic population size adaptation\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Introducing a dynamic population size adaptation mechanism to adjust the population size based on the optimization progress.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0d32094-b322-4911-8ce9-7d352141a8f4", "metadata": {"aucs": [0.8141148160920322, 0.8218754966753754, 0.8213857448210282, 0.8346046228768105, 0.8274309966402753, 0.8234816227279895, 0.8259069008293203, 0.8139656748807428, 0.8110882493758053, 0.6706528448106711, 0.6845971566234526, 0.6540611483678862, 0.6729123660322808, 0.6577471902316199, 0.6850711347742628, 0.6917898988588508, 0.6702930865772843, 0.6861763895751063, 0.11545961245493441, 0.12842011219560334, 0.12237736389713427, 0.12693264639935964, 0.12939960608118783, 0.11395991767890068, 0.11653981054920937, 0.11964708413995473, 0.11588578838101582, 0.09410587989207919, 0.1141563052594392, 0.10558916788145212, 0.109080796035952, 0.12105965086757975, 0.0992363450535908, 0.10652841905167898, 0.11013038029970046, 0.10901478532002185, 0.7755064778702929, 0.9793399571779804, 0.8945605718975168, 0.8872965031043824, 0.8983651655451508, 0.7865359493218984, 0.9307099998103933, 0.9138461611765357, 0.9006258860847812, 0.5401967733276575, 0.5701610158856139, 0.5023987652824188, 0.4742358537025455, 0.48946236042750446, 0.5174596457946746, 0.5338644523767772, 0.5303632649267815, 0.5356413617338835, 0.7784548974961027, 0.7812616520941557, 0.7571453008151445, 0.8098430504767917, 0.8001429379764442, 0.7959469023365603, 0.7847803611988267, 0.7703389825143474, 0.8004564912106287, 0.3227381462384644, 0.44110787670867824, 0.3528599346174929, 0.2153018448612708, 0.3011733337014064, 0.1241225663843325, 0.31097331755913593, 0.24312661565196714, 0.19105284748737217, 0.26060648513990115, 0.3215829309356283, 0.2482276192534505, 0.32501191344524694, 0.42773969776501575, 0.2696129671159715, 0.34656358967045275, 0.17013555945814718, 0.3369612903462116, 0.4501222190354387, 0.4776328689226309, 0.4412818816805377, 0.4333543289302474, 0.4274689315149057, 0.46398488204956134, 0.5033015363672151, 0.4734344167650112, 0.4963959195567623, 0.5749465513700259, 0.5997880471356056, 0.6182407435826653, 0.5550541660930833, 0.5715771535007548, 0.5802711378346094, 0.5750406102483097, 0.6159400614962274, 0.5915195071179176, 0.20604279382371737, 0.11714252070137832, 0.08805521100697622, 0.28576019758055216, 0.21123569989527835, 0.19755786635424544, 0.1482451259141111, 0.10573561426422018, 0.14426311227011812, 0.3546103258009977, 0.3449470645473801, 0.34304696050986627, 0.39065193593449377, 0.3677178659265049, 0.3698832692653916, 0.3408024178183723, 0.3471483379175746, 0.34075310887201393, 0.7163367310305222, 0.7199823883587672, 0.7561446107514123, 0.7290179307314687, 0.7490744175060065, 0.7126436680146209, 0.7399714379030318, 0.7089437668087727, 0.7339757735908461, 0.09741568543540657, 0.1129493836162353, 0.09831142868686804, 0.10004953640928249, 0.10065759118264728, 0.11818957230208849, 0.10876558579621776, 0.10291513062957713, 0.1073209109935418, 0.1630089384255723, 0.15057190743510307, 0.1444515460727409, 0.142772152658312, 0.14814107052993952, 0.16865081938291382, 0.14737934114945095, 0.16243040877165227, 0.17624495575860022, 0.4275641868562041, 0.44278356641390737, 0.45981073471675016, 0.45505765998190983, 0.41407510132518477, 0.42340699215383804, 0.45955453227509724, 0.4532943518632785, 0.4311184491597996, 0.3415066112583304, 0.34075094019780583, 0.3463418987263348, 0.31751155847197765, 0.33528112766061513, 0.36966920177140905, 0.3777455096998814, 0.37147667105235693, 0.3739988895120404, 0.18423247737109194, 0.18696332448519015, 0.18659202596712654, 0.182220085667681, 0.20865247505122686, 0.19475917421130273, 0.21142073629299252, 0.19658391799101516, 0.20358323726102012, 0.18891302077521221, 0.19831112244729243, 0.19378146417374442, 0.19835532221636076, 0.19129745398558262, 0.2019968734572335, 0.19026390611232813, 0.2097789884558957, 0.30632993430119126, 0.7732499929531067, 0.741760937758999, 0.18166151149636145, 0.7745320707030265, 0.6999293405510598, 0.7156386675101232, 0.15902768976989134, 0.7146729019122886, 0.17920777802825383, 0.7074498041640569, 0.20656187263095271, 0.19603664875854998, 0.1967703883563796, 0.2013484846552518, 0.6154005959663285, 0.19939256847499276, 0.2048014349133913, 0.20514556535448625, 0.1895315187107337, 0.19417415580464736, 0.1948737720127678, 0.192885575576903, 0.18097143782583114, 0.20703873370536507, 0.19435585570226088, 0.20098681033949095, 0.18665799378664127, 0.08727203270123296, 0.08032435708904717, 0.09216486464359386, 0.08825897078160283, 0.08249559026947317, 0.09192096536462724, 0.08209375105963479, 0.08678606881710182, 0.07337876161206769]}, "mutation_prompt": null}
{"id": "c7f63a91-9ca0-4b13-acc8-0b8337d9f508", "solution": "import numpy as np\n\nclass HybridADELS:\n    def __init__(self, budget, dim, F=0.5, CR=0.9, ls_iters=10):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n        self.ls_iters = ls_iters\n\n    def local_search(self, func, ind):\n        current_fitness = func(ind)\n        for _ in range(self.ls_iters):\n            perturbed = np.clip(ind + 0.1 * np.random.randn(self.dim), -5.0, 5.0)\n            perturbed_fitness = func(perturbed)\n            if perturbed_fitness < current_fitness:\n                ind = perturbed\n                current_fitness = perturbed_fitness\n        return ind\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                trial = self.local_search(func, trial)\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "HybridADELS", "description": "Implementing a hybrid approach of Adaptive Differential Evolution with Local Search for enhanced exploitation capabilities.", "configspace": "", "generation": 15, "fitness": 0.14336495469317095, "feedback": "The algorithm HybridADELS got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.14 with standard deviation 0.11.", "error": "", "parent_id": "d0d32094-b322-4911-8ce9-7d352141a8f4", "metadata": {"aucs": [0.3465325896399588, 0.3410840651835554, 0.3249120945936034, 0.3022759092923931, 0.31399213377833746, 0.33288847527930143, 0.34793119904771397, 0.3440712652817046, 0.28446764844080386, 0.02872618642228575, 0.018013057372966212, 0.043813712854480436, 0.02330603755533922, 0.0261269412898264, 0.017352036151801586, 0.01726589575087001, 0.04214069245472163, 0.02980754453365242, 0.07458883885556511, 0.0858884755614514, 0.07361902154482758, 0.0716893149956146, 0.07511065626515079, 0.06809480479078389, 0.07781866678814409, 0.08508910846993711, 0.08647736225977165, 0.06464823694514166, 0.0739759276526889, 0.06518516427369325, 0.07931730252002567, 0.055233022496492645, 0.0575509025648262, 0.06873645907362336, 0.060924983472325, 0.04368810443102589, 0.6749005198693226, 0.6210670062665378, 0.5401133665715748, 0.3518491770746417, 0.6379779771338803, 0.47319472566897436, 0.45284762963257985, 0.4432140922801552, 0.38125759730617526, 0.14660497356416557, 0.1459363157374639, 0.1428272243230866, 0.11947757919409652, 0.12550333704425065, 0.09655098123291117, 0.14134863832078903, 0.11277412932566133, 0.13209387306790354, 0.18715765353439673, 0.16877729981649248, 0.14914975269002229, 0.18200862584669952, 0.20603063882820527, 0.17758182613392748, 0.17601269673802622, 0.15422770304390176, 0.18007234260322547, 0.06322424162965945, 0.0851334468608016, 0.08290135717380342, 0.07963847443034533, 0.06852847666995454, 0.07328491416618632, 0.10268846310498725, 0.10181757998563101, 0.10165506545629066, 0.1004598809835181, 0.08326641507736621, 0.0622008663982937, 0.10110730638527499, 0.08729909619770138, 0.10343549774340521, 0.09279662938376454, 0.0871680392968689, 0.09767574011002089, 0.003294239609972993, 0.0007053808409356321, 9.999999999998899e-05, 0.007355034693174223, 0.007363844502133343, 0.0007450667785436904, 0.0038605360860000104, 0.0020356111639322494, 0.00012599584425021515, 0.11081558499351862, 0.11133051084447032, 0.09055157088164978, 0.07514148122892961, 0.0831932223050792, 0.08909929654140492, 0.1303028668708892, 0.11932974284796605, 0.10855143419735447, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05028600015176776, 0.056625822928830116, 0.05550207615280556, 0.059486948922587546, 0.06592946774462993, 0.060651961423772494, 0.05351153436959177, 0.062066483852421306, 0.0613921663264988, 0.3030735094935664, 0.3142083041362478, 0.2922544384354837, 0.2831043944059801, 0.2941617731781436, 0.31968429278261556, 0.3004044608943416, 0.29234250581601695, 0.29992836110618126, 0.07339325752693626, 0.07038771783419595, 0.08477319235370429, 0.07522304630257093, 0.0771004530455679, 0.06874952771052778, 0.07736104918641307, 0.07082915900375142, 0.0707830236932877, 0.12346244052740663, 0.158441260412032, 0.1441823521818245, 0.13700613489248192, 0.19084454321049293, 0.13918087210530705, 0.16760636855004063, 0.12084012285797285, 0.16502273860746441, 0.19149935624703407, 0.1716031252082173, 0.1924489150253046, 0.19721863370136838, 0.19710267603934073, 0.1902589755794849, 0.1751709387884972, 0.21846081881438417, 0.19120051117511572, 0.13412575095497814, 0.13097896910928264, 0.1296401786319613, 0.13115662132538963, 0.1225748793827941, 0.1275994244792128, 0.13807536410860555, 0.16291817304216671, 0.14248602798954202, 0.18815963982780237, 0.1630761765063693, 0.1968178640423418, 0.1921444944904258, 0.17029474895019192, 0.1810733025162935, 0.18414283289487487, 0.1615970149338577, 0.21509000261374522, 0.15653355086975207, 0.15132453204329555, 0.17043019605217646, 0.15770372249794895, 0.17662870791767815, 0.16596468138814324, 0.17121425267503942, 0.15535261081471652, 0.1490909042832934, 0.1363590272808609, 0.14244257767597446, 0.15395774490586678, 0.18693037204194718, 0.1671129275700679, 0.2086782486681955, 0.14835431858885617, 0.1596868003138463, 0.1355850485812371, 0.1712807235069186, 0.24227365522894984, 0.20739871936606513, 0.1699075130154677, 0.2126311683112213, 0.1719298206594021, 0.13863388100352914, 0.19591513965670082, 0.17073160975960966, 0.18601114741353053, 0.18760061745572398, 0.18928671066380764, 0.1819698302062409, 0.18479349202508222, 0.18389718353715512, 0.190834370287973, 0.18042906690171645, 0.18602149296934523, 0.06103791412228077, 0.06959175035945586, 0.06620965412563418, 0.07096392882761116, 0.06836667570296706, 0.06050479211370363, 0.06963323792400133, 0.06727877749868005, 0.059645506393664394]}, "mutation_prompt": null}
{"id": "a04f16a5-aaef-49d8-b5b1-91cf299963e1", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)  # Dynamic population size adaptation\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Introducing a dynamic population size adaptation mechanism to adjust the population size based on the optimization progress.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0d32094-b322-4911-8ce9-7d352141a8f4", "metadata": {"aucs": [0.8141148160920322, 0.8218754966753754, 0.8213857448210282, 0.8346046228768105, 0.8274309966402753, 0.8234816227279895, 0.8259069008293203, 0.8139656748807428, 0.8110882493758053, 0.6706528448106711, 0.6845971566234526, 0.6540611483678862, 0.6729123660322808, 0.6577471902316199, 0.6850711347742628, 0.6917898988588508, 0.6702930865772843, 0.6861763895751063, 0.11545961245493441, 0.12842011219560334, 0.12237736389713427, 0.12693264639935964, 0.12939960608118783, 0.11395991767890068, 0.11653981054920937, 0.11964708413995473, 0.11588578838101582, 0.09410587989207919, 0.1141563052594392, 0.10558916788145212, 0.109080796035952, 0.12105965086757975, 0.0992363450535908, 0.10652841905167898, 0.11013038029970046, 0.10901478532002185, 0.7755064778702929, 0.9793399571779804, 0.8945605718975168, 0.8872965031043824, 0.8983651655451508, 0.7865359493218984, 0.9307099998103933, 0.9138461611765357, 0.9006258860847812, 0.5401967733276575, 0.5701610158856139, 0.5023987652824188, 0.4742358537025455, 0.48946236042750446, 0.5174596457946746, 0.5338644523767772, 0.5303632649267815, 0.5356413617338835, 0.7784548974961027, 0.7812616520941557, 0.7571453008151445, 0.8098430504767917, 0.8001429379764442, 0.7959469023365603, 0.7847803611988267, 0.7703389825143474, 0.8004564912106287, 0.3227381462384644, 0.44110787670867824, 0.3528599346174929, 0.2153018448612708, 0.3011733337014064, 0.1241225663843325, 0.31097331755913593, 0.24312661565196714, 0.19105284748737217, 0.26060648513990115, 0.3215829309356283, 0.2482276192534505, 0.32501191344524694, 0.42773969776501575, 0.2696129671159715, 0.34656358967045275, 0.17013555945814718, 0.3369612903462116, 0.4501222190354387, 0.4776328689226309, 0.4412818816805377, 0.4333543289302474, 0.4274689315149057, 0.46398488204956134, 0.5033015363672151, 0.4734344167650112, 0.4963959195567623, 0.5749465513700259, 0.5997880471356056, 0.6182407435826653, 0.5550541660930833, 0.5715771535007548, 0.5802711378346094, 0.5750406102483097, 0.6159400614962274, 0.5915195071179176, 0.20604279382371737, 0.11714252070137832, 0.08805521100697622, 0.28576019758055216, 0.21123569989527835, 0.19755786635424544, 0.1482451259141111, 0.10573561426422018, 0.14426311227011812, 0.3546103258009977, 0.3449470645473801, 0.34304696050986627, 0.39065193593449377, 0.3677178659265049, 0.3698832692653916, 0.3408024178183723, 0.3471483379175746, 0.34075310887201393, 0.7163367310305222, 0.7199823883587672, 0.7561446107514123, 0.7290179307314687, 0.7490744175060065, 0.7126436680146209, 0.7399714379030318, 0.7089437668087727, 0.7339757735908461, 0.09741568543540657, 0.1129493836162353, 0.09831142868686804, 0.10004953640928249, 0.10065759118264728, 0.11818957230208849, 0.10876558579621776, 0.10291513062957713, 0.1073209109935418, 0.1630089384255723, 0.15057190743510307, 0.1444515460727409, 0.142772152658312, 0.14814107052993952, 0.16865081938291382, 0.14737934114945095, 0.16243040877165227, 0.17624495575860022, 0.4275641868562041, 0.44278356641390737, 0.45981073471675016, 0.45505765998190983, 0.41407510132518477, 0.42340699215383804, 0.45955453227509724, 0.4532943518632785, 0.4311184491597996, 0.3415066112583304, 0.34075094019780583, 0.3463418987263348, 0.31751155847197765, 0.33528112766061513, 0.36966920177140905, 0.3777455096998814, 0.37147667105235693, 0.3739988895120404, 0.18423247737109194, 0.18696332448519015, 0.18659202596712654, 0.182220085667681, 0.20865247505122686, 0.19475917421130273, 0.21142073629299252, 0.19658391799101516, 0.20358323726102012, 0.18891302077521221, 0.19831112244729243, 0.19378146417374442, 0.19835532221636076, 0.19129745398558262, 0.2019968734572335, 0.19026390611232813, 0.2097789884558957, 0.30632993430119126, 0.7732499929531067, 0.741760937758999, 0.18166151149636145, 0.7745320707030265, 0.6999293405510598, 0.7156386675101232, 0.15902768976989134, 0.7146729019122886, 0.17920777802825383, 0.7074498041640569, 0.20656187263095271, 0.19603664875854998, 0.1967703883563796, 0.2013484846552518, 0.6154005959663285, 0.19939256847499276, 0.2048014349133913, 0.20514556535448625, 0.1895315187107337, 0.19417415580464736, 0.1948737720127678, 0.192885575576903, 0.18097143782583114, 0.20703873370536507, 0.19435585570226088, 0.20098681033949095, 0.18665799378664127, 0.08727203270123296, 0.08032435708904717, 0.09216486464359386, 0.08825897078160283, 0.08249559026947317, 0.09192096536462724, 0.08209375105963479, 0.08678606881710182, 0.07337876161206769]}, "mutation_prompt": null}
{"id": "121e1bb0-65b0-4cbb-90f5-ac779aefe074", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)  # Dynamic population size adaptation\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Introducing a dynamic population size adaptation mechanism to adjust the population size based on the optimization progress.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0d32094-b322-4911-8ce9-7d352141a8f4", "metadata": {"aucs": [0.8141148160920322, 0.8218754966753754, 0.8213857448210282, 0.8346046228768105, 0.8274309966402753, 0.8234816227279895, 0.8259069008293203, 0.8139656748807428, 0.8110882493758053, 0.6706528448106711, 0.6845971566234526, 0.6540611483678862, 0.6729123660322808, 0.6577471902316199, 0.6850711347742628, 0.6917898988588508, 0.6702930865772843, 0.6861763895751063, 0.11545961245493441, 0.12842011219560334, 0.12237736389713427, 0.12693264639935964, 0.12939960608118783, 0.11395991767890068, 0.11653981054920937, 0.11964708413995473, 0.11588578838101582, 0.09410587989207919, 0.1141563052594392, 0.10558916788145212, 0.109080796035952, 0.12105965086757975, 0.0992363450535908, 0.10652841905167898, 0.11013038029970046, 0.10901478532002185, 0.7755064778702929, 0.9793399571779804, 0.8945605718975168, 0.8872965031043824, 0.8983651655451508, 0.7865359493218984, 0.9307099998103933, 0.9138461611765357, 0.9006258860847812, 0.5401967733276575, 0.5701610158856139, 0.5023987652824188, 0.4742358537025455, 0.48946236042750446, 0.5174596457946746, 0.5338644523767772, 0.5303632649267815, 0.5356413617338835, 0.7784548974961027, 0.7812616520941557, 0.7571453008151445, 0.8098430504767917, 0.8001429379764442, 0.7959469023365603, 0.7847803611988267, 0.7703389825143474, 0.8004564912106287, 0.3227381462384644, 0.44110787670867824, 0.3528599346174929, 0.2153018448612708, 0.3011733337014064, 0.1241225663843325, 0.31097331755913593, 0.24312661565196714, 0.19105284748737217, 0.26060648513990115, 0.3215829309356283, 0.2482276192534505, 0.32501191344524694, 0.42773969776501575, 0.2696129671159715, 0.34656358967045275, 0.17013555945814718, 0.3369612903462116, 0.4501222190354387, 0.4776328689226309, 0.4412818816805377, 0.4333543289302474, 0.4274689315149057, 0.46398488204956134, 0.5033015363672151, 0.4734344167650112, 0.4963959195567623, 0.5749465513700259, 0.5997880471356056, 0.6182407435826653, 0.5550541660930833, 0.5715771535007548, 0.5802711378346094, 0.5750406102483097, 0.6159400614962274, 0.5915195071179176, 0.20604279382371737, 0.11714252070137832, 0.08805521100697622, 0.28576019758055216, 0.21123569989527835, 0.19755786635424544, 0.1482451259141111, 0.10573561426422018, 0.14426311227011812, 0.3546103258009977, 0.3449470645473801, 0.34304696050986627, 0.39065193593449377, 0.3677178659265049, 0.3698832692653916, 0.3408024178183723, 0.3471483379175746, 0.34075310887201393, 0.7163367310305222, 0.7199823883587672, 0.7561446107514123, 0.7290179307314687, 0.7490744175060065, 0.7126436680146209, 0.7399714379030318, 0.7089437668087727, 0.7339757735908461, 0.09741568543540657, 0.1129493836162353, 0.09831142868686804, 0.10004953640928249, 0.10065759118264728, 0.11818957230208849, 0.10876558579621776, 0.10291513062957713, 0.1073209109935418, 0.1630089384255723, 0.15057190743510307, 0.1444515460727409, 0.142772152658312, 0.14814107052993952, 0.16865081938291382, 0.14737934114945095, 0.16243040877165227, 0.17624495575860022, 0.4275641868562041, 0.44278356641390737, 0.45981073471675016, 0.45505765998190983, 0.41407510132518477, 0.42340699215383804, 0.45955453227509724, 0.4532943518632785, 0.4311184491597996, 0.3415066112583304, 0.34075094019780583, 0.3463418987263348, 0.31751155847197765, 0.33528112766061513, 0.36966920177140905, 0.3777455096998814, 0.37147667105235693, 0.3739988895120404, 0.18423247737109194, 0.18696332448519015, 0.18659202596712654, 0.182220085667681, 0.20865247505122686, 0.19475917421130273, 0.21142073629299252, 0.19658391799101516, 0.20358323726102012, 0.18891302077521221, 0.19831112244729243, 0.19378146417374442, 0.19835532221636076, 0.19129745398558262, 0.2019968734572335, 0.19026390611232813, 0.2097789884558957, 0.30632993430119126, 0.7732499929531067, 0.741760937758999, 0.18166151149636145, 0.7745320707030265, 0.6999293405510598, 0.7156386675101232, 0.15902768976989134, 0.7146729019122886, 0.17920777802825383, 0.7074498041640569, 0.20656187263095271, 0.19603664875854998, 0.1967703883563796, 0.2013484846552518, 0.6154005959663285, 0.19939256847499276, 0.2048014349133913, 0.20514556535448625, 0.1895315187107337, 0.19417415580464736, 0.1948737720127678, 0.192885575576903, 0.18097143782583114, 0.20703873370536507, 0.19435585570226088, 0.20098681033949095, 0.18665799378664127, 0.08727203270123296, 0.08032435708904717, 0.09216486464359386, 0.08825897078160283, 0.08249559026947317, 0.09192096536462724, 0.08209375105963479, 0.08678606881710182, 0.07337876161206769]}, "mutation_prompt": null}
{"id": "f1f02ab9-0ec5-4053-8f33-78449c86ef26", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, F=0.5, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.F = F\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)  # Dynamic population size adaptation\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.F * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Introducing a dynamic population size adaptation mechanism to adjust the population size based on the optimization progress.", "configspace": "", "generation": 9, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d0d32094-b322-4911-8ce9-7d352141a8f4", "metadata": {"aucs": [0.8141148160920322, 0.8218754966753754, 0.8213857448210282, 0.8346046228768105, 0.8274309966402753, 0.8234816227279895, 0.8259069008293203, 0.8139656748807428, 0.8110882493758053, 0.6706528448106711, 0.6845971566234526, 0.6540611483678862, 0.6729123660322808, 0.6577471902316199, 0.6850711347742628, 0.6917898988588508, 0.6702930865772843, 0.6861763895751063, 0.11545961245493441, 0.12842011219560334, 0.12237736389713427, 0.12693264639935964, 0.12939960608118783, 0.11395991767890068, 0.11653981054920937, 0.11964708413995473, 0.11588578838101582, 0.09410587989207919, 0.1141563052594392, 0.10558916788145212, 0.109080796035952, 0.12105965086757975, 0.0992363450535908, 0.10652841905167898, 0.11013038029970046, 0.10901478532002185, 0.7755064778702929, 0.9793399571779804, 0.8945605718975168, 0.8872965031043824, 0.8983651655451508, 0.7865359493218984, 0.9307099998103933, 0.9138461611765357, 0.9006258860847812, 0.5401967733276575, 0.5701610158856139, 0.5023987652824188, 0.4742358537025455, 0.48946236042750446, 0.5174596457946746, 0.5338644523767772, 0.5303632649267815, 0.5356413617338835, 0.7784548974961027, 0.7812616520941557, 0.7571453008151445, 0.8098430504767917, 0.8001429379764442, 0.7959469023365603, 0.7847803611988267, 0.7703389825143474, 0.8004564912106287, 0.3227381462384644, 0.44110787670867824, 0.3528599346174929, 0.2153018448612708, 0.3011733337014064, 0.1241225663843325, 0.31097331755913593, 0.24312661565196714, 0.19105284748737217, 0.26060648513990115, 0.3215829309356283, 0.2482276192534505, 0.32501191344524694, 0.42773969776501575, 0.2696129671159715, 0.34656358967045275, 0.17013555945814718, 0.3369612903462116, 0.4501222190354387, 0.4776328689226309, 0.4412818816805377, 0.4333543289302474, 0.4274689315149057, 0.46398488204956134, 0.5033015363672151, 0.4734344167650112, 0.4963959195567623, 0.5749465513700259, 0.5997880471356056, 0.6182407435826653, 0.5550541660930833, 0.5715771535007548, 0.5802711378346094, 0.5750406102483097, 0.6159400614962274, 0.5915195071179176, 0.20604279382371737, 0.11714252070137832, 0.08805521100697622, 0.28576019758055216, 0.21123569989527835, 0.19755786635424544, 0.1482451259141111, 0.10573561426422018, 0.14426311227011812, 0.3546103258009977, 0.3449470645473801, 0.34304696050986627, 0.39065193593449377, 0.3677178659265049, 0.3698832692653916, 0.3408024178183723, 0.3471483379175746, 0.34075310887201393, 0.7163367310305222, 0.7199823883587672, 0.7561446107514123, 0.7290179307314687, 0.7490744175060065, 0.7126436680146209, 0.7399714379030318, 0.7089437668087727, 0.7339757735908461, 0.09741568543540657, 0.1129493836162353, 0.09831142868686804, 0.10004953640928249, 0.10065759118264728, 0.11818957230208849, 0.10876558579621776, 0.10291513062957713, 0.1073209109935418, 0.1630089384255723, 0.15057190743510307, 0.1444515460727409, 0.142772152658312, 0.14814107052993952, 0.16865081938291382, 0.14737934114945095, 0.16243040877165227, 0.17624495575860022, 0.4275641868562041, 0.44278356641390737, 0.45981073471675016, 0.45505765998190983, 0.41407510132518477, 0.42340699215383804, 0.45955453227509724, 0.4532943518632785, 0.4311184491597996, 0.3415066112583304, 0.34075094019780583, 0.3463418987263348, 0.31751155847197765, 0.33528112766061513, 0.36966920177140905, 0.3777455096998814, 0.37147667105235693, 0.3739988895120404, 0.18423247737109194, 0.18696332448519015, 0.18659202596712654, 0.182220085667681, 0.20865247505122686, 0.19475917421130273, 0.21142073629299252, 0.19658391799101516, 0.20358323726102012, 0.18891302077521221, 0.19831112244729243, 0.19378146417374442, 0.19835532221636076, 0.19129745398558262, 0.2019968734572335, 0.19026390611232813, 0.2097789884558957, 0.30632993430119126, 0.7732499929531067, 0.741760937758999, 0.18166151149636145, 0.7745320707030265, 0.6999293405510598, 0.7156386675101232, 0.15902768976989134, 0.7146729019122886, 0.17920777802825383, 0.7074498041640569, 0.20656187263095271, 0.19603664875854998, 0.1967703883563796, 0.2013484846552518, 0.6154005959663285, 0.19939256847499276, 0.2048014349133913, 0.20514556535448625, 0.1895315187107337, 0.19417415580464736, 0.1948737720127678, 0.192885575576903, 0.18097143782583114, 0.20703873370536507, 0.19435585570226088, 0.20098681033949095, 0.18665799378664127, 0.08727203270123296, 0.08032435708904717, 0.09216486464359386, 0.08825897078160283, 0.08249559026947317, 0.09192096536462724, 0.08209375105963479, 0.08678606881710182, 0.07337876161206769]}, "mutation_prompt": null}
{"id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 19, "fitness": 0.41291168798988714, "feedback": "The algorithm AdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.26.", "error": "", "parent_id": "d0d32094-b322-4911-8ce9-7d352141a8f4", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "062c478d-8004-4fe2-b7b0-d016593bce8e", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "8ed2442f-3dd8-4cef-9e40-5bc4fc5c04dd", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "7acd7231-bfa2-4a9d-b433-1b05f0af601e", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "701e7935-1234-4641-b4f8-a6d5ec2e7f30", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "6fd81b7f-bc86-42a3-903c-abaa99c6e6da", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "024024ac-794c-4047-8439-a53df4631f88", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "fd774488-a414-48fa-8a78-61c56af75f5d", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "1a606627-bdac-4520-a815-9fd3f23ebeeb", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "99841deb-8d84-4215-afb2-539daad3ee72", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n            if _ % 10 == 0:  # Dynamic adjustment of population size\n                mean_fitness = np.mean(fitness)\n                std_fitness = np.std(fitness)\n                if std_fitness < 1e-6:\n                    break\n                pop_size = int(10 * (1 - _ / self.budget) * self.dim) if mean_fitness < best_fitness else int(10 * (1 - _ / self.budget) * self.dim * 1.1)\n                best_fitness = mean_fitness\n\n        return best", "name": "AdaptiveDE", "description": "Introduce a dynamic population size adjustment based on the optimization progress to enhance exploration and exploitation balance.", "configspace": "", "generation": 28, "fitness": -Infinity, "feedback": "An exception occurred: UnboundLocalError(\"local variable 'best_fitness' referenced before assignment\").", "error": "UnboundLocalError(\"local variable 'best_fitness' referenced before assignment\")", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {}, "mutation_prompt": null}
{"id": "b23cf156-7ea5-45e7-9df1-5e7f8a6a5dc7", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "d6828385-5541-49c2-bc29-8d5d42dc772a", "solution": "import numpy as np\n\nclass DynamicPopDE(AdaptiveDE):\n    def __init__(self, budget, dim, CR=0.9):\n        super().__init__(budget, dim, CR)\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            curvature = np.mean(np.abs(np.gradient(fitness)))  # Measure curvature of landscape\n            pop_size = int(10 * (1 - curvature) * self.dim)  # Adjust population size based on landscape curvature\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "DynamicPopDE", "description": "Implement a dynamic population scaling mechanism based on the function landscape curvature to adapt population size during optimization.", "configspace": "", "generation": 30, "fitness": 0.043562655324996646, "feedback": "The algorithm DynamicPopDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.04 with standard deviation 0.05.", "error": "", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.11860917256239101, 0.08099573939876048, 0.0916041897440597, 0.0942217514195951, 0.107410762746187, 0.11033114211644313, 0.09975734614470255, 0.07422043020494906, 0.06854154161076553, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.014572254733962287, 0.005275638633511659, 0.010544468052148481, 0.006493004426635474, 0.0065706204863034134, 0.018150078853237606, 0.007693168839173481, 0.010575797721399605, 0.0, 0.0, 0.0, 0.019501673109847073, 0.00039528563299850994, 0.0, 0.014664865741570776, 0.0, 0.0, 0.045084250649534585, 0.04529032155668278, 0.04278205048616679, 0.05324558914821231, 0.04678013722708951, 0.037332462972905156, 0.06379241875032005, 0.048891644393723954, 0.03910579656890878, 0.06265423285317917, 0.0, 0.0, 0.0, 0.00021551809509001707, 0.0, 0.0, 0.01119445381188322, 0.0, 0.10018685869141841, 0.08215483554020608, 0.05973037536276371, 0.06661749824786911, 0.07275849405212154, 0.0, 0.026181922062049168, 0.05921649636366433, 0.009809447265860194, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1087911925039956, 0.15748132322755004, 0.14829537673711224, 0.10270171191051303, 0.10265315387628593, 0.09571399605654973, 0.16104568613219816, 0.09707379230406299, 0.12096781838999726, 0.0, 0.0, 0.021886321886607996, 0.0325721299095072, 0.0, 0.01750168379108641, 0.0, 0.0, 0.02666833626569931, 0.08484849337016565, 0.08600231476351294, 0.11833361437130152, 0.09846289938816166, 0.10844057434014054, 0.10789794917811235, 0.08799080449358865, 0.08090029113184083, 0.07717165476235766, 0.09597227240618145, 0.09616018134012416, 0.16130937881362284, 0.13792052181401182, 0.11371875507615947, 0.10435826762181499, 0.12019368026040667, 0.17369512487615557, 0.11374251144952907, 0.059761631126171944, 0.033911540361439396, 0.08389423256590178, 0.05686290050998832, 0.06397588396999365, 0.06333484497577446, 0.08364015581209883, 0.09968109929816105, 0.06403167692626888, 0.11934558904189418, 0.09379139630447497, 0.13336421106438578, 0.11026790024335642, 0.08771080209608828, 0.10887980745480186, 0.12237199858757541, 0.07863718186214741, 0.12610897469223914, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05559179745858711, 0.07457348599177183, 0.08157840845421893, 0.07318573935631267, 0.1207035396655618, 0.06652066617622099, 0.10692837481480566, 0.10502535409825264, 0.0692681884498908, 0.1103137036995071, 0.10258192672273381, 0.06922728298844572, 0.0505908534635271, 0.03728632333816162, 0.05893840155281016, 0.04680845216491614, 0.04009445607431428, 0.04133833534605058, 0.13471522306136396, 0.12828496744990658, 0.1475449842687161, 0.11590646924167103, 0.12243484664342741, 0.13224602528921636, 0.14961211855402434, 0.12496478658923194, 0.14680476350940774, 0.01351929609764324, 0.015817976510868692, 0.03129662407793532, 0.02691798931623457, 0.03415436066354682, 0.019947514614564676, 0.01612999899170031, 0.03793735337628057, 0.01754558650804161]}, "mutation_prompt": null}
{"id": "d3c18660-52c5-45e6-81b8-9dc59f393089", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "70e1f741-ff81-4d4b-a9c6-751b44a53ab2", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "87c8e3fa-11ba-4597-8df2-0894c7139af7", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "ffbde457-d38a-4fe8-850d-1a9dedd82a31", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "cca0ed65-00b8-417a-ba29-6a5c66f84154", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "af4ebb22-c50f-4d5a-ae8c-842708638194", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "b74562c7-d9de-4cad-b5e6-67cb38ccc150", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "c3cc87ac-8b7d-4322-8ad6-053d5d6b8eae", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "35b1927a-eb99-4d67-a7c7-61626056598c", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "9ce89b18-44da-4238-a8f2-b939e0d7cc38", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "e31f2718-7871-414b-9c42-a34fb7c7ddae", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "5c959c35-489b-468b-aed8-4a9469a2a5ef", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "8cd74fbb-48bc-46e7-8304-116279672af0", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "7b45e316-a775-4250-9710-a2d0d12482e2", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "5b2169b0-d7fa-44e4-acce-5733c3a645b0", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "b43d6e93-a232-4bf5-adbd-1d11857e136b", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "d0019a36-5630-4f66-91b0-89c469c59179", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "648ba876-3583-47d7-b65f-88c7b9217888", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "0675a4b2-dc72-4361-827c-7eb82479685c", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "ea982703-7a00-482e-876e-310da67897d6", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "311fec29-e676-46fa-bb82-4b42016cf8d2", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "405087e2-d287-4fb4-97f5-7ad0c82db7f3", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "16c5164e-884e-4d45-90b6-33255a392505", "solution": "import numpy as np\n\nclass ImprovedAdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                progress = 1.0 - (fitness[i] - np.min(fitness)) / (np.max(fitness) - np.min(fitness) + 1e-8)\n                F_i = np.clip(F[i] + 0.1 * progress * np.random.randn(), 0.1, 0.9)  # Dynamic scaling factor for mutation\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "ImprovedAdaptiveDE", "description": "Improved AdaptiveDE algorithm by introducing a dynamic scaling factor for mutation based on fitness progress.", "configspace": "", "generation": 53, "fitness": 0.4097853442577281, "feedback": "The algorithm ImprovedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.26.", "error": "", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8275431014513565, 0.8285544776388757, 0.8365636088790143, 0.8393907200956473, 0.84452703569038, 0.8331586634779988, 0.8434195080022086, 0.8398494214349024, 0.8255428582656399, 0.6891667850054073, 0.7104670641731325, 0.7081136555041582, 0.6765351163944464, 0.6982315491802304, 0.6830507745570131, 0.7002287751240579, 0.740684720613475, 0.6926106116096845, 0.12906390815226187, 0.1444107407304298, 0.25982317650422226, 0.1448708662306113, 0.12399368852850545, 0.1242450044011435, 0.2253107767265231, 0.24749251130667593, 0.18259261026771845, 0.20839351225987424, 0.1211755255847069, 0.1222044424546388, 0.12516960493686424, 0.30751024764015555, 0.12618782605064793, 0.1352433535971782, 0.1390348913604581, 0.12677040048903931, 0.9176069764284144, 0.908701706964188, 0.9299105153990296, 0.9202743509086962, 0.7922638511648078, 0.9320337287066396, 0.8876623746130369, 0.8777414340742546, 0.9388708201034458, 0.5191935952050597, 0.5188928413766303, 0.49454716130741794, 0.5238776269311753, 0.3056969603944607, 0.4605226587357124, 0.4900310957503581, 0.576719725598867, 0.5878523111226553, 0.8226833481154547, 0.8399992162497145, 0.8017303522342499, 0.820399688181844, 0.8155187013748278, 0.7952725843561068, 0.8260257587781995, 0.8079550709814902, 0.8014976539728539, 0.16566817664650313, 0.593756709120555, 0.1241890569199321, 0.19650895837625026, 0.19406697223287384, 0.21859405256543663, 0.18268795838860274, 0.15212156547695665, 0.18839160625062867, 0.17710884903682067, 0.15132429142184278, 0.23941181055796446, 0.23403062458920765, 0.18689470610480863, 0.21909848388131503, 0.14376562053283415, 0.34579851466911327, 0.17150251139224715, 0.46067239233910773, 0.5333922263806103, 0.3649970625305127, 0.4042241480648554, 0.5438418328440755, 0.510028452456563, 0.48552479689622086, 0.44290022451760946, 0.4978271401230624, 0.6134035981029644, 0.5250230295855983, 0.658761944556469, 0.6214471581102862, 0.5772858906482818, 0.6114884970216194, 0.5665092524681066, 0.6150688255316092, 0.644429367558592, 0.07430317384244223, 0.09634471831901681, 0.31861609825324644, 0.20376334061003343, 0.33235476591751023, 0.2601142918007966, 0.13029026819532497, 0.1372338138141206, 0.18721079414038833, 0.24421597888606794, 0.4168961812651423, 0.4068490253625845, 0.3708984624141385, 0.3552831823202165, 0.4412434297254193, 0.3161830237114246, 0.34401657217017556, 0.4083277514393161, 0.747778247802129, 0.6675887173807857, 0.6750943399809319, 0.7697273911160467, 0.7455909081957852, 0.7454368683271337, 0.6616489489156256, 0.7527002123318032, 0.7411623926140749, 0.1001716543557637, 0.11402069989454977, 0.11804252214820377, 0.1463737282421509, 0.13043604277095278, 0.10551430842323384, 0.2839641038181291, 0.1184788591808279, 0.1126505814036245, 0.21749888011483387, 0.15174094619949752, 0.18924785542919698, 0.12642916211829847, 0.1439810971404215, 0.14390341249299055, 0.13693666233020663, 0.15420026452870206, 0.16448295409297098, 0.5443655029828567, 0.48041701809840676, 0.47257582331380976, 0.5207962526877385, 0.4522953496131342, 0.46750915775300406, 0.5391322060144645, 0.6371171796613617, 0.5537758798976744, 0.3567458028135455, 0.34761060956642376, 0.38441928753413745, 0.3614850629901709, 0.3747832890173518, 0.369192233177968, 0.38951960390926144, 0.45688878083265705, 0.3977600908701847, 0.1943922674701718, 0.2018051289744187, 0.2129096879894099, 0.19590787046157698, 0.20104544454687268, 0.19448407934515022, 0.19274120652755278, 0.21002340051532442, 0.19478621838604993, 0.2130103362648048, 0.22748083204984781, 0.4882558130370135, 0.22471667989484578, 0.22664113136501274, 0.5278623839438563, 0.43607961577073795, 0.6035619870298099, 0.4277860852226332, 0.8094292673383165, 0.7853371958700723, 0.8231475803855484, 0.7937325815561338, 0.18385588392684005, 0.19289357309141075, 0.18012386769884303, 0.6999450959323601, 0.1776916429547155, 0.7828666293525568, 0.2090432356192775, 0.20401610725561814, 0.7090255941916159, 0.200746797761861, 0.7137390281758857, 0.2084297981899712, 0.2064397763817778, 0.3901653041796119, 0.17224945716690143, 0.17846829396117558, 0.19137465284649968, 0.20193607675844938, 0.1918615646544839, 0.1875774135152335, 0.19984252549492332, 0.221963096104404, 0.18580456207208562, 0.08899820414133286, 0.08412768586390063, 0.07190613223527431, 0.07693510977830553, 0.0831809310342182, 0.08092364141452002, 0.09054605732413934, 0.07801188223561872, 0.08211222889099301]}, "mutation_prompt": null}
{"id": "c78c1244-90f1-4a5c-a123-76b5d8157b8a", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "be80923d-cd08-429b-a80e-066a7326835b", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "19f6c846-7054-4045-a8d1-5ebe35f44c0c", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "c9501c82-d621-42cf-b2c6-338a88327e2e", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "4cdf475a-1e47-4ebd-9f8c-eecb294d0f0a", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "23bb24e4-1e72-4cd0-9492-be3d91783cad", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "9a42c91a-ded6-44a1-adce-2508b28052a7", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "68f925d9-7969-49de-9227-8529c50557a6", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "25b7736b-92fb-484a-8515-b41345faf581", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "92571e23-52e7-43ed-afaf-96a135d61bcc", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "0bb85575-ceac-4286-bc3a-bb1084320fdc", "solution": "import numpy as np\n\nclass ImprovedAdaptiveDE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n        CR = 0.9\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                CR_i = np.clip(CR + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive crossover rate CR\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < CR_i\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    CR = CR_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "ImprovedAdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting both the mutation factor F and the crossover rate CR during the optimization process.", "configspace": "", "generation": 64, "fitness": 0.34101680248025834, "feedback": "The algorithm ImprovedAdaptiveDE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.34 with standard deviation 0.23.", "error": "", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8044584247932189, 0.808544215962918, 0.7934127532019085, 0.7725628139344565, 0.8053912141551787, 0.7913036295668616, 0.8041025724612693, 0.8010903771173353, 0.7846147784469386, 0.6238716765662637, 0.6356803586515396, 0.6004049224505148, 0.6285090150657736, 0.6260437961796077, 0.6249168765700754, 0.589167787391975, 0.6281630347937261, 0.6329409024430298, 0.5361892158667959, 0.5133155340606316, 0.4890512924238487, 0.5472960959966287, 0.46878125930766024, 0.46709071352273424, 0.5140905962894742, 0.5082781955519697, 0.5110937335703669, 0.3702300262070727, 0.379876855848036, 0.46757451077607604, 0.5152745668436504, 0.39989167221897426, 0.4687831870730208, 0.4545946854391184, 0.3898575320222367, 0.41592106367278714, 0.9416044714903602, 0.9187391527000078, 0.927202553548073, 0.9217748743785429, 0.9732759785660304, 0.9273592766430551, 0.9572600652981018, 0.9503869202902626, 0.9178664665785096, 0.334262376956298, 0.316812821284309, 0.3633443790600067, 0.34854307851581634, 0.351637706763003, 0.3621278106966268, 0.276407654566849, 0.28149170125671585, 0.33282617004823833, 0.5432226992576068, 0.5326098113414037, 0.546059709571939, 0.6597370520961188, 0.5710212207410814, 0.5314468570331685, 0.7007258631772373, 0.3994879864811578, 0.6163439675610892, 0.17069206555084948, 0.20642154650377043, 0.158310669149061, 0.18907333668008774, 0.1584420298277397, 0.20403479570979155, 0.23966196929405947, 0.24943837964972526, 0.1741143610267314, 0.17389965599271784, 0.15613413985605007, 0.16324670342850878, 0.16363779062505068, 0.18133468482732962, 0.16351869722236656, 0.17409353613732292, 0.17614052043050032, 0.19418990374082645, 0.18028737305684095, 0.18854112164899994, 0.1469111836195841, 0.20207166487821016, 0.06461572914316183, 0.1275123887325793, 0.19794685291180625, 0.04182981654209894, 0.1972580901615426, 0.2996526453867058, 0.377811697011865, 0.2611382333933995, 0.35515916741054987, 0.3255483624325606, 0.3468619084316269, 0.5458829133264407, 0.4589093277771744, 0.2051681423395848, 0.0866591333457507, 0.1024638704925881, 0.07477923280283072, 0.062391741452544225, 0.12948772179647405, 0.10545723096268356, 0.10002413033945445, 0.07502767381279118, 0.11752193642381703, 0.1771679164237563, 0.17999139257104269, 0.16747583504886243, 0.2058564334266717, 0.2634818432361118, 0.19086864810034443, 0.1311453425720951, 0.2289627155291568, 0.17959110909105125, 0.558475601678885, 0.5483225655494186, 0.6146003583750241, 0.5752046190021667, 0.5475633320389659, 0.5454418169941309, 0.560489796199602, 0.619823683100103, 0.6166417674338349, 0.10155655730004853, 0.10260331134505796, 0.11291234423848495, 0.1053283252689029, 0.10598770040094163, 0.1024022759960137, 0.1113782068955681, 0.11893275230630918, 0.11004851426249063, 0.16936090644264, 0.13421457134874126, 0.14884965684366347, 0.17511152575795264, 0.13662103037883644, 0.12361137581400217, 0.13905196962277255, 0.13769597093359243, 0.13019141259983935, 0.31978234390947646, 0.33157395790677635, 0.37230584080947304, 0.36968027745465193, 0.34259266467768534, 0.3162014754223078, 0.3754146262873487, 0.3801762677578503, 0.39780572151770255, 0.2642913606035834, 0.2249413317046064, 0.2809609219088639, 0.27480087934165265, 0.24356501612460435, 0.2513757754328534, 0.19948902345288366, 0.24831668082640557, 0.23126534257538556, 0.2288921871640648, 0.193295801968131, 0.19013346851080803, 0.18669628896805512, 0.20313697858245183, 0.19681775367529686, 0.20222729101674852, 0.20185050899029733, 0.18168165148342852, 0.2633952928444687, 0.25505295481369716, 0.22738420353564603, 0.2426522248524513, 0.2582290463709572, 0.2805935687225699, 0.23261984570176497, 0.27384622518330237, 0.24811703665724294, 0.45279994708872795, 0.3547735773647295, 0.18841200738323216, 0.6071122158947975, 0.4731550922202987, 0.17051852025863334, 0.5022757263235004, 0.4761566326610328, 0.29062835059808756, 0.5885647391248332, 0.19021727732166893, 0.2598872604176925, 0.2467673275954566, 0.19601336877297448, 0.19307632224914928, 0.3263965547864047, 0.4990434125750769, 0.20170697922570013, 0.19106131421362416, 0.17858887587107564, 0.18310029471477962, 0.21603046382192126, 0.18348954812070783, 0.19536837779755245, 0.18997369898860061, 0.18589182234107315, 0.19770245574530987, 0.07902393073315883, 0.07597812824898542, 0.08148597586857609, 0.07862905276769638, 0.07435563527082778, 0.0795577229825356, 0.07973513927531672, 0.07532662519199529, 0.07944735340605424]}, "mutation_prompt": null}
{"id": "5dcca619-debf-4073-b92c-c8a30745ac3d", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "0e03252c-4db3-442f-930b-78053fc4b720", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "6957b8ca-e362-4ef4-8c8d-33a7923eaa79", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "fef2f98d-8ed2-4ad2-b7d3-e827ad818088", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "9a588a73-85ba-4ef9-85f6-2d2116440a46", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "8ffa423b-3f63-4a89-83d1-5009dcca58e6", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "396ea5a8-6095-4f49-b356-b776fe77cde1", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "c3617d2e-be36-4b93-8a3b-425f89b2f3a1", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "da8ac5e7-9394-4b08-aa72-915998de868d", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "dd4a9fcd-3d96-4162-bc02-0da6010a50d4", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "1acd8aa5-d156-4573-8a8c-f5ea11a6130e", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "1eb72e39-e20b-4cf6-b5f4-9ca91f3b7e01", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "18939c70-9242-47df-9756-278d1709a928", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "1a7b9dba-c5e4-48c7-9641-29b971e4228c", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "febcfc50-dadd-49c3-8f81-3404992ea02b", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "4cd03887-2d54-4aca-8ac4-a5fea41447f1", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "7954a18c-a5c1-48ee-a221-d1d1f8a8fa0c", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "3257d3fe-0768-432d-b326-130b5041e9d2", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "67bfa829-5609-4ea8-9a38-9ed00f33804d", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "1879e371-0c27-41dc-b982-7b49f4c4ae7c", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('list index out of range').", "error": "IndexError('list index out of range')", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "2261d607-9d06-4bb1-91b3-4e7252b938fb", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "109c6c55-3d92-4004-bbf0-29d2a6a64b51", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "dbd4c897-d88b-4f91-8703-455d488d2b9c", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "0396e80f-68f9-4f1d-aab1-3f88f98bd37d", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "454e9173-de3f-442e-aa38-a9a250efff8a", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "d6c4c18b-c680-47fc-acc6-26dd1e729228", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "feb482bc-0143-48ad-bb39-fdfd0691d730", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "a566a5d9-5da6-4701-a51c-082956784e06", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "308184ab-d6a7-4d86-a621-c4d6b6d2c35e", "solution": "import numpy as np\n\nclass AdaptiveDE_LocalSearch:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n            # Local Search\n            rand_idx = np.random.randint(pop_size)\n            local_search_point = pop[rand_idx] + 0.1 * np.random.randn(self.dim)\n            local_search_point = np.clip(local_search_point, -5.0, 5.0)\n            f_local = func(local_search_point)\n            if f_local < fitness[rand_idx]:\n                fitness[rand_idx] = f_local\n                pop[rand_idx] = local_search_point\n                if f_local < fitness[best_idx]:\n                    best_idx = rand_idx\n                    best = local_search_point\n\n        return best", "name": "AdaptiveDE_LocalSearch", "description": "Integrate a local search mechanism to exploit promising regions found during the evolution process.", "configspace": "", "generation": 93, "fitness": 0.3904702938359614, "feedback": "The algorithm AdaptiveDE_LocalSearch got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.39 with standard deviation 0.25.", "error": "", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8273693864717993, 0.8083372815535472, 0.8248657561752243, 0.8107591566497674, 0.8064345466515843, 0.8402996132955487, 0.8278348009750206, 0.8384130565045422, 0.8323377314786694, 0.6856756897790187, 0.6739826048498115, 0.707212118903823, 0.7123211256411124, 0.7166972251454702, 0.697981217824487, 0.7067207637339821, 0.7217148689146622, 0.7028247240000363, 0.15952157560626368, 0.32231878183506346, 0.3874290702682872, 0.24906617087388194, 0.13767199094045013, 0.161648308699329, 0.47636855650882026, 0.22746381737285037, 0.37806395645322555, 0.15069417005434083, 0.1431765303599274, 0.15974876823110296, 0.22628972982948525, 0.1440711835945906, 0.14086236685774278, 0.2119133232160617, 0.1912372085506916, 0.12257447597123972, 0.8769944980463993, 0.9328953145155612, 0.8302282525055613, 0.8885282197471828, 0.9206107978793766, 0.9400872217584978, 0.9153979831330735, 0.8796312128866595, 0.916914973306524, 0.5171111526582705, 0.45523134087586437, 0.5251393901286331, 0.381444119169317, 0.513066649235949, 0.43706111051354823, 0.4985882946696586, 0.4082749534447123, 0.36486630592332236, 0.36532193731005, 0.8120530419126228, 0.8003158476193182, 0.8450107344618307, 0.7990103059291565, 0.8351320654139037, 0.812922406024328, 0.776332566150352, 0.7987133456040667, 0.20400542657688925, 0.18574721757242374, 0.16275497955228546, 0.3166915615120697, 0.1527013431831118, 0.19539966503869277, 0.1435204274066988, 0.24918971612875984, 0.28561448099531384, 0.16810868558716752, 0.14284302998354836, 0.3298717971552838, 0.23659737757432842, 0.19544901250574542, 0.2507189633915481, 0.1956994748626748, 0.18495587512374556, 0.16036505516172705, 0.38780638275588597, 0.1261886688683298, 0.35711890637527177, 0.49932809153476543, 0.4622879075574492, 0.3842285850717949, 0.478860367613101, 0.307298282551111, 0.4862102646362486, 0.6322855150761758, 0.5858317668524163, 0.586029907617662, 0.16798949625734694, 0.5838377843823812, 0.5120879011045083, 0.4627449404731959, 0.6037463707848744, 0.6417645361135069, 0.20093912284912852, 0.08284255568120513, 0.14214102964734243, 0.28834904870798805, 0.12347073980973222, 0.3366602598171121, 0.1243603530558599, 0.17109743426220192, 0.21542072028175385, 0.2736646657179037, 0.3180054979954341, 0.30318273897200343, 0.3518618970053693, 0.36728369066240985, 0.3976498709376567, 0.3817012645997504, 0.3275610281077397, 0.2640855328784565, 0.6672831724029529, 0.7579789657814163, 0.7865371754563399, 0.7386580557115634, 0.6159756618565466, 0.6679044841232881, 0.7455523346158001, 0.7196957823975433, 0.6771687967060789, 0.119362894338088, 0.1103837668848835, 0.18922939336173528, 0.10832064967912847, 0.12658811463014719, 0.12766056733273745, 0.13025587827246887, 0.11258712764755796, 0.11634225300529066, 0.1428267867424442, 0.28621444127322526, 0.1461877385442909, 0.1839316896652502, 0.18652268860527532, 0.13971569987162913, 0.1647088203997744, 0.15059112448364664, 0.18269827546457995, 0.47248744803689147, 0.43242542517911575, 0.49113585004909666, 0.45766985138182037, 0.43257250023812965, 0.43640784403287125, 0.6005256701026467, 0.47497966018425564, 0.5421793972833873, 0.41393282974421064, 0.3636096920180344, 0.3992772030491255, 0.37316156588722715, 0.31409405239555255, 0.33788043704736015, 0.3919367668957954, 0.43286189174432843, 0.4142957780442733, 0.19611233945630313, 0.2014796814070693, 0.18882814383705404, 0.19369812327111613, 0.20808537937823224, 0.21052528784617786, 0.20624672432133062, 0.2018278767620223, 0.1976170131517263, 0.5757357138527552, 0.32635406902005404, 0.5095658379402863, 0.21386240253004485, 0.20996490507168641, 0.5552430633284495, 0.2120107550685807, 0.20658742056415802, 0.2167456654681199, 0.7464815574851491, 0.20588631742615893, 0.6986401216981205, 0.18852762276310953, 0.20348788180485256, 0.19473766448835605, 0.7260131486050962, 0.7747291210233705, 0.7404599920394683, 0.2121866537497188, 0.2088609082553946, 0.6302028866998455, 0.2022725078529628, 0.19929887459121431, 0.20696292678694184, 0.20583551344372952, 0.1499323034572393, 0.20889232713333072, 0.1944717015951184, 0.1864656416213264, 0.18297012860404516, 0.18282650011408075, 0.19258736298545642, 0.20885919037431233, 0.19235398149464267, 0.17756927080261542, 0.20852756504578907, 0.07670358527029197, 0.08027102791040375, 0.08226374625268495, 0.09210704619714394, 0.08260272522763867, 0.08059275956892198, 0.07645448189006565, 0.07657442177376428, 0.07622448717004537]}, "mutation_prompt": null}
{"id": "c5aea752-b614-4c8a-8137-a0e59d10a824", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "36c9a36b-f445-4fdc-b4f1-52d70610940b", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "891ed573-a3bd-466a-aced-a218af78b19c", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "d81d6def-35c8-434c-b246-5ce879de576f", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "5c152f87-fdc9-434c-ba08-824b75c4dcfa", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
{"id": "26fb45ed-7c72-4cdd-a489-611691c84055", "solution": "import numpy as np\n\nclass AdaptiveDE:\n    def __init__(self, budget, dim, CR=0.9):\n        self.budget = budget\n        self.dim = dim\n        self.CR = CR\n\n    def __call__(self, func):\n        pop_size = 10 * self.dim\n        pop = np.random.uniform(-5.0, 5.0, (pop_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        F = np.full(pop_size, 0.5)\n\n        for _ in range(self.budget - pop_size):\n            pop_size = int(10 * (1 - _ / self.budget) * self.dim)\n            for i in range(pop_size):\n                idxs = [idx for idx in range(pop_size) if idx != i]\n                a, b, c = pop[np.random.choice(idxs, 3, replace=False)]\n                F_i = np.clip(F[i] + 0.1 * np.random.randn(), 0.1, 0.9)  # Self-adaptive mutation factor F\n                mutant = np.clip(a + F_i * (b - c), -5.0, 5.0)\n                cross_points = np.random.rand(self.dim) < self.CR\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, pop[i])\n                f = func(trial)\n                if f < fitness[i]:\n                    fitness[i] = f\n                    pop[i] = trial\n                    F[i] = F_i\n                    if f < fitness[best_idx]:\n                        best_idx = i\n                        best = trial\n\n        return best", "name": "AdaptiveDE", "description": "Implement a self-adaptive mechanism for adjusting the mutation factor F during the optimization process.", "configspace": "", "generation": 20, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "fa291e2e-b5c3-4213-94b2-3f2dfe142316", "metadata": {"aucs": [0.8392978971754693, 0.8157849176478202, 0.8315116099220528, 0.8272214630809068, 0.8244353016556569, 0.8341403741760304, 0.8176249663379502, 0.8361481258859318, 0.8184075678552003, 0.6993385451411694, 0.6564278011770479, 0.6851551244966539, 0.6898655899004944, 0.7033824882450239, 0.6977417728414721, 0.6897226152864155, 0.7303655165755719, 0.700184962167762, 0.3464304719217337, 0.15740949471859422, 0.3321090235570704, 0.1414735207221114, 0.32707452769015166, 0.3246075670911648, 0.23446107315306008, 0.282264301186936, 0.13264883984957776, 0.11085106535016043, 0.15752626371025324, 0.13153906118064063, 0.14507876534348707, 0.15985837624451837, 0.20354286698978163, 0.2440324691189386, 0.16123200988120912, 0.1412699393191741, 0.9024840057195074, 0.8200136680739812, 0.9539556325467384, 0.9206992399089677, 0.9607934619558083, 0.9206247887040269, 0.8872017300031287, 0.9378587889395243, 0.9210267941793294, 0.4991692333569606, 0.5083345459707429, 0.49611785224285143, 0.3495657416810317, 0.5188322339855511, 0.5267022781617114, 0.5440909592047865, 0.3953644477638414, 0.5316486013172061, 0.7788208269115169, 0.815976280680352, 0.7872842268435041, 0.8276155464563864, 0.8334032156024448, 0.8140220413715978, 0.8297082068600128, 0.7574843308342525, 0.8238170209173311, 0.16442208150248716, 0.2118545151440946, 0.18432075753276622, 0.1576372953691516, 0.2334815324567583, 0.19089839493461191, 0.25888577445234306, 0.15407574395434132, 0.19305548557792718, 0.17277032433960882, 0.16746909967708357, 0.2848515999563641, 0.19315506947854855, 0.17110646603363855, 0.279312706358786, 0.13130141798937134, 0.24064494101954403, 0.17907855214705193, 0.5350552107772114, 0.516515536492157, 0.2307294252149632, 0.4609603818317529, 0.437166928043188, 0.3250421728342122, 0.1110249586112344, 0.5222006506170037, 0.41572897586391144, 0.5744781072630502, 0.5335424201267487, 0.5012768129785766, 0.5128407520084839, 0.5355414277387637, 0.5661917943929284, 0.7067301192222734, 0.6700170448094049, 0.3417940083299924, 0.11671508157345256, 0.20646284696120631, 0.15535509230893152, 0.3408232428548267, 0.3461714403425755, 0.23213772001333643, 0.0925986872157637, 0.29926025920070765, 0.2640776546713268, 0.3881505617945762, 0.37079295585864935, 0.2660117506553086, 0.3686381797678744, 0.4098573809648759, 0.309163928281215, 0.3422928917477438, 0.3806015413547954, 0.2286775791104042, 0.737555415391647, 0.757628327081756, 0.7740589466666403, 0.737525996527953, 0.6931735928922929, 0.6631615108718852, 0.7495348835290185, 0.7093566018179794, 0.725802087932908, 0.12277186814316488, 0.14125380747238325, 0.13700927313773248, 0.12490648290913853, 0.1290696679248453, 0.11966999532987443, 0.12538857773156253, 0.13834203089531205, 0.32877713328880986, 0.19595831256222396, 0.16519795850536634, 0.19052621676263204, 0.15215209618401115, 0.22103472963200743, 0.1386485386522529, 0.24062555566477717, 0.25378606600907017, 0.14286960176669494, 0.4746908986656243, 0.5025000062750491, 0.4683687726260265, 0.4346277792491464, 0.4832461328115214, 0.5174573468202279, 0.49934856685306417, 0.5343898987843142, 0.44799734623533094, 0.39200834457623046, 0.3621855394261432, 0.3106719768487607, 0.33044055642575865, 0.4005495904936526, 0.41111999849508285, 0.4133411368472448, 0.33753436133705006, 0.41847816137429694, 0.20919229429867325, 0.18835290258445092, 0.21247743693073295, 0.20715622318864102, 0.2009618803640103, 0.19850936679308084, 0.18755518147381522, 0.19364886402248116, 0.2095940983445913, 0.22184981505232582, 0.2129105092711, 0.5539949008510741, 0.23233151774850835, 0.5123566111614537, 0.21794225898330788, 0.4440923215113012, 0.4458465836346204, 0.2005210505504782, 0.8301864601616035, 0.14503001667071336, 0.8060525565427523, 0.7617146594756478, 0.802435327292873, 0.8007483229700896, 0.20130564086700709, 0.6619095410452434, 0.8190357003231497, 0.7560880264906236, 0.16758816268948717, 0.19351591366269327, 0.8315140237810663, 0.1977518203895986, 0.669060120414614, 0.20802962118775137, 0.5058013273010675, 0.6883875052809139, 0.19359682996979266, 0.19916055508563513, 0.19000402106884973, 0.18450058467392672, 0.1879734094768276, 0.1858642009777305, 0.17713044718297277, 0.17588348347626837, 0.1908612209118432, 0.08932981426724096, 0.08287184772185652, 0.07618254811819392, 0.08422071842980727, 0.08976505551048775, 0.08292653433595043, 0.09424083482216594, 0.09887869824941065, 0.07961429224847216]}, "mutation_prompt": null}
