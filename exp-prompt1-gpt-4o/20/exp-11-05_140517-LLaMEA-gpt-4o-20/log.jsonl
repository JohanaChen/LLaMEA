{"id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.24421061248893172, "feedback": "The algorithm HybridPSOwithADM got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.22.", "error": "", "parent_id": null, "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "99feef3a-6777-483c-8744-aa72c027dd50", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "e26c7659-0fd7-42ce-8d8c-e4e372628c35", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "82ba6963-637d-4fdd-8c8e-21cc6ebcfded", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "9abb4e28-5e06-4c35-8fd0-5d5182bf8cac", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "f072e693-67b9-4809-8e0f-bcda6f6e0cac", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "bb9356cf-730c-4adb-97db-53bd6425db18", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "a4488ed9-b2a7-4cbb-a6a9-4514dca1789b", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "a1cf6747-d568-49fb-895f-4362b6c3530c", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "a6098802-bcc4-4464-b53b-a48724f06280", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "cea4c622-ce36-40e6-8d97-7d2192cf95e5", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "774b79b5-42a8-47ce-aaaa-84f2c7385cee", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "ebac9765-63a8-4fd1-a713-29d2ec8bb201", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "3bda2ad7-01d0-4446-8a67-e444e87ceca0", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "0d13f73b-b9ee-48d7-b131-d46b08ae0f17", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "79539493-949d-40f9-9442-61e819ac1cb7", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "2a4397d5-10e1-45a2-82b2-9aa4e9bf9150", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "4c3a0e0b-03c0-476a-8de1-e621f728b177", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "368403da-5a99-4b70-b63c-0a4ce55de16e", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "cbe865c9-9576-4d49-8275-9a2112e23b22", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "80971e91-d0a1-4d16-9de6-51d5074fd899", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "ffd77dc1-36c0-4c17-a3fb-e95d685fd9e4", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "ccacefc5-77b0-4cf5-a12a-de2edf897516", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "fbb53b79-6daa-4780-91a0-e5e9a0503b43", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "eee92fca-ca3e-46f7-a385-ad1e9b6b0008", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "8e18813f-22bd-4a92-8c1e-fa69896fd8b9", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "264cfc5a-06be-495f-aa1b-b8a7682e621d", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "5fc2dfca-cfc1-435d-84f8-25cdeb4a1ab6", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "fd9f4177-988f-4e3b-9923-d7b741b61875", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "b244b875-8e3f-451e-bf3b-e832b7ccbc96", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "d6b30fea-8597-4c40-aa80-6a93df6dd451", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "3fcbbb42-1088-4f08-b086-85901265cff4", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "f72af18c-6d98-4487-95c6-033d22e59209", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "9fca824f-4089-49e6-9ce6-c4ca425abae1", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "84b11c6c-df58-4b51-b688-f6bcd012564b", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "3d443c69-f9a2-405a-8e03-4cf87cc902d2", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "37f37b75-f859-47a5-8183-a28e061cd750", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "73ed5c28-1f50-4515-97fa-6b426e489ffb", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "11269b0b-007c-4bcd-8ebf-2589ea7c8ada", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "87300219-f5f4-4040-abeb-0f679a74e5a2", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "da2d7ebc-e7e6-40f1-b21c-ec4e1d93899b", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "8e4dc281-7f26-4af0-a72c-49f1612a1418", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "395b09ba-5307-471b-869f-42bead973e39", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "617b6570-692d-4d80-adce-4afb847f8e4c", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "1e3f6b42-ed01-4923-81ea-c0d61b417b56", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "76b7c6fe-8a2b-405d-95ee-7c2c7f61083e", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "7d56059b-8eab-4733-9218-0d9d5475f803", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "678d2266-0f95-4c6f-aa60-018f9cbe7175", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "acafe164-d986-4166-a8b9-9ba5b6d9ca83", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "b781b419-4dab-42eb-b7a2-1281b27a40a1", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "00d96153-89b0-4b0e-aa34-19d97a035a2a", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "545f6e7e-3493-4934-88d5-02567a6f92bd", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "f38b9e26-ac4d-4dc4-aaff-8b9f2795c6eb", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "40ff8a1c-70f9-4167-a6a0-25040943e388", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "43e5f976-ef4d-48b8-827c-3cd6a378b009", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "2fc3b8de-eb74-418d-956a-4e219135dc99", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "4367b436-fabc-4edb-9e9d-ee53ff7dd1ed", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "7b28b86b-fc28-4a99-812f-6469d26ad0c7", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "b5db2840-155d-42d6-a290-4d401fb4b156", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "a1ac4d52-64c6-4a0b-b800-62590010e8c0", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "f02fd60c-5c59-43b9-bbf9-781014cdcf81", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "594b52d6-931d-40b4-ae3e-8729a88c1ce8", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "9443d91a-06c3-4541-a9f7-775e69946bf9", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "c81be021-11dc-418f-acbf-ff262d6e3c68", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "679d6c90-3572-4e2d-b5f7-9da8dc76fc5a", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "574727f7-2c85-46f0-b7e2-702b257712be", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "563662e6-b0a3-44e0-88da-4d58dfcdeeb1", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "3c018ee7-4fdf-4140-9576-7defc587df4b", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "2fb99a8b-6542-4269-9028-641fbc9181f4", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "3caa0bf4-5821-47ab-a5a2-cca5c9429c18", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "59d8194f-f4b9-4ca2-bcbf-e62a07ad71bc", "solution": "import numpy as np\n\nclass HybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOwithADM", "description": "Hybrid Particle Swarm Optimization with Adaptive Differential Mutation for enhanced exploration and exploitation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6151716426833078, 0.6151716426833078, 0.6151716426833078, 0.6360950591404841, 0.6360950591404841, 0.6360950591404841, 0.6690730864373107, 0.6690730864373107, 0.6690730864373107, 0.06164153303599729, 0.06164153303599729, 0.06164153303599729, 0.19800807099697637, 0.19800807099697637, 0.19800807099697637, 0.2120395193053789, 0.2120395193053789, 0.2120395193053789, 0.10991224782284603, 0.10991224782284603, 0.10991224782284603, 0.10704507712873623, 0.10704507712873623, 0.10704507712873623, 0.10176626385879428, 0.10176626385879428, 0.10176626385879428, 0.10133074286046762, 0.10133074286046762, 0.10133074286046762, 0.1295884768941502, 0.1295884768941502, 0.1295884768941502, 0.11965995770201021, 0.11965995770201021, 0.11965995770201021, 0.9846663285032108, 0.9846663285032108, 0.9846663285032108, 0.9689851752500434, 0.9689851752500434, 0.9689851752500434, 0.9784138474129895, 0.9784138474129895, 0.9784138474129895, 0.31600003217350114, 0.31600003217350114, 0.31600003217350114, 0.3637608791147795, 0.3637608791147795, 0.3637608791147795, 0.11695185553491028, 0.11695185553491028, 0.11695185553491028, 0.17081632127980262, 0.17081632127980262, 0.17081632127980262, 0.20224882116212828, 0.20224882116212828, 0.20224882116212828, 0.5684412466364137, 0.5684412466364137, 0.5684412466364137, 0.16614078876605454, 0.16614078876605454, 0.16614078876605454, 0.09591131048072243, 0.09591131048072243, 0.09591131048072243, 0.14851959221946798, 0.14851959221946798, 0.14851959221946798, 0.18031156263455284, 0.18031156263455284, 0.18031156263455284, 0.1811815584829466, 0.1811815584829466, 0.1811815584829466, 0.2019096076523692, 0.2019096076523692, 0.2019096076523692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.017529402507851954, 0.017529402507851954, 0.017529402507851954, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04788805283283304, 0.04788805283283304, 0.04788805283283304, 0.07625676970944151, 0.07625676970944151, 0.07625676970944151, 0.07904352883180166, 0.07904352883180166, 0.07904352883180166, 0.061206456501508355, 0.061206456501508355, 0.061206456501508355, 0.1574382344644344, 0.1574382344644344, 0.1574382344644344, 0.06199838050152373, 0.06199838050152373, 0.06199838050152373, 0.08260041917502325, 0.08260041917502325, 0.08260041917502325, 0.1263232318610641, 0.1263232318610641, 0.1263232318610641, 0.07159232199589172, 0.07159232199589172, 0.07159232199589172, 0.4533005984617845, 0.4533005984617845, 0.4533005984617845, 0.4356730994838829, 0.4356730994838829, 0.4356730994838829, 0.4561310160114219, 0.4561310160114219, 0.4561310160114219, 0.1102901767881389, 0.1102901767881389, 0.1102901767881389, 0.10868314369941212, 0.10868314369941212, 0.10868314369941212, 0.08762037834275993, 0.08762037834275993, 0.08762037834275993, 0.16173643055129194, 0.16173643055129194, 0.16173643055129194, 0.230301776330882, 0.230301776330882, 0.230301776330882, 0.27879040047412196, 0.27879040047412196, 0.27879040047412196, 0.3291227259676387, 0.3291227259676387, 0.3291227259676387, 0.2282482704825498, 0.2282482704825498, 0.2282482704825498, 0.34592795585265756, 0.34592795585265756, 0.34592795585265756, 0.24868379937021, 0.24868379937021, 0.24868379937021, 0.1769141516639895, 0.1769141516639895, 0.1769141516639895, 0.24997251103230378, 0.24997251103230378, 0.24997251103230378, 0.21743881737768966, 0.21743881737768966, 0.21743881737768966, 0.20851143817842344, 0.20851143817842344, 0.20851143817842344, 0.1950522114188442, 0.1950522114188442, 0.1950522114188442, 0.19456373687502992, 0.19456373687502992, 0.19456373687502992, 0.2141041658761057, 0.2141041658761057, 0.2141041658761057, 0.20915278648170033, 0.20915278648170033, 0.20915278648170033, 0.16435033943474697, 0.16435033943474697, 0.16435033943474697, 0.7310454638652444, 0.7310454638652444, 0.7310454638652444, 0.14063857246623246, 0.14063857246623246, 0.14063857246623246, 0.5558589977547024, 0.5558589977547024, 0.5558589977547024, 0.3802357307302888, 0.3802357307302888, 0.3802357307302888, 0.18625205686789303, 0.18625205686789303, 0.18625205686789303, 0.18972508315945502, 0.18972508315945502, 0.18972508315945502, 0.17779021940189887, 0.17779021940189887, 0.17779021940189887, 0.1843497248385012, 0.1843497248385012, 0.1843497248385012, 0.08343241796438305, 0.08343241796438305, 0.08343241796438305, 0.06782356391311473, 0.06782356391311473, 0.06782356391311473, 0.09377493453405972, 0.09377493453405972, 0.09377493453405972]}, "mutation_prompt": null}
{"id": "0e3b97a9-ca02-4506-9f5f-c4df05eb6e8a", "solution": "import numpy as np\n\nclass EnhancedHybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.diversity_threshold = 0.5  # New parameter for diversity control\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        # Helper function to calculate diversity using entropy\n        def calculate_entropy(population):\n            hist, _ = np.histogramdd(population, bins=10, range=[self.bounds]*self.dim)\n            prob = hist / np.sum(hist)\n            prob = prob[prob > 0]\n            return -np.sum(prob * np.log2(prob))\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Calculate diversity and adjust inertia weight\n            entropy = calculate_entropy(position)\n            if entropy < self.diversity_threshold:\n                self.inertia_weight = 0.9  # Increase exploration\n            else:\n                self.inertia_weight = 0.5  # Increase exploitation\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "EnhancedHybridPSOwithADM", "description": "Enhanced Hybrid PSO with Adaptive Differential Mutation employing entropy-based diversity control for balanced exploration and exploitation.", "configspace": "", "generation": 71, "fitness": 0.2874286017327253, "feedback": "The algorithm EnhancedHybridPSOwithADM got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.24.", "error": "", "parent_id": "2a27ad5c-ce09-4bd2-a6b1-808705c43033", "metadata": {"aucs": [0.6880409813966182, 0.6880409813966182, 0.6880409813966182, 0.7296039819281639, 0.7296039819281639, 0.7296039819281639, 0.7311801224738436, 0.7311801224738436, 0.7311801224738436, 0.45303361795800723, 0.45303361795800723, 0.45303361795800723, 0.42408074227534676, 0.42408074227534676, 0.42408074227534676, 0.4213118193105433, 0.4213118193105433, 0.4213118193105433, 0.1457889816396335, 0.1457889816396335, 0.1457889816396335, 0.14896797542583806, 0.14896797542583806, 0.14896797542583806, 0.1442499373991386, 0.1442499373991386, 0.1442499373991386, 0.2350236193357942, 0.2350236193357942, 0.2350236193357942, 0.1346031972324392, 0.1346031972324392, 0.1346031972324392, 0.12876591977657914, 0.12876591977657914, 0.12876591977657914, 0.9772250927856639, 0.9772250927856639, 0.9772250927856639, 0.9691668102461399, 0.9691668102461399, 0.9691668102461399, 0.978103888520503, 0.978103888520503, 0.978103888520503, 0.40285923459368933, 0.40285923459368933, 0.40285923459368933, 0.4820720966785548, 0.4820720966785548, 0.4820720966785548, 0.11686287227377812, 0.11686287227377812, 0.11686287227377812, 0.17143984219925879, 0.17143984219925879, 0.17143984219925879, 0.2064960520839738, 0.2064960520839738, 0.2064960520839738, 0.23188716594811243, 0.23188716594811243, 0.23188716594811243, 0.12071499011569964, 0.12071499011569964, 0.12071499011569964, 0.09704625189711369, 0.09704625189711369, 0.09704625189711369, 0.10910122243462173, 0.10910122243462173, 0.10910122243462173, 0.21886285945445505, 0.21886285945445505, 0.21886285945445505, 0.12889505386781253, 0.12889505386781253, 0.12889505386781253, 0.23941139245107912, 0.23941139245107912, 0.23941139245107912, 0.0017966368181528969, 0.0017966368181528969, 0.0017966368181528969, 0.031239255775808883, 0.031239255775808883, 0.031239255775808883, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07577759605248668, 0.07577759605248668, 0.07577759605248668, 0.060073616227250715, 0.060073616227250715, 0.060073616227250715, 0.048788683294605284, 0.048788683294605284, 0.048788683294605284, 0.16020752542177996, 0.16020752542177996, 0.16020752542177996, 0.06462842856932416, 0.06462842856932416, 0.06462842856932416, 0.08552647288980919, 0.08552647288980919, 0.08552647288980919, 0.07869954743425622, 0.07869954743425622, 0.07869954743425622, 0.07161467329900728, 0.07161467329900728, 0.07161467329900728, 0.07851664711049411, 0.07851664711049411, 0.07851664711049411, 0.4850803381802665, 0.4850803381802665, 0.4850803381802665, 0.5384798448691746, 0.5384798448691746, 0.5384798448691746, 0.5388225251719228, 0.5388225251719228, 0.5388225251719228, 0.12404003699491262, 0.12404003699491262, 0.12404003699491262, 0.13647902822134605, 0.13647902822134605, 0.13647902822134605, 0.1441055262970622, 0.1441055262970622, 0.1441055262970622, 0.40809062620176806, 0.40809062620176806, 0.40809062620176806, 0.2641956039550789, 0.2641956039550789, 0.2641956039550789, 0.2710843023707633, 0.2710843023707633, 0.2710843023707633, 0.3030864642886386, 0.3030864642886386, 0.3030864642886386, 0.3829670225072688, 0.3829670225072688, 0.3829670225072688, 0.4208138977634439, 0.4208138977634439, 0.4208138977634439, 0.2137451287479144, 0.2137451287479144, 0.2137451287479144, 0.20167973208858203, 0.20167973208858203, 0.20167973208858203, 0.3449527434778301, 0.3449527434778301, 0.3449527434778301, 0.2259316670972551, 0.2259316670972551, 0.2259316670972551, 0.2304304304283521, 0.2304304304283521, 0.2304304304283521, 0.19693369026054708, 0.19693369026054708, 0.19693369026054708, 0.1807893969977331, 0.1807893969977331, 0.1807893969977331, 0.21350324847562718, 0.21350324847562718, 0.21350324847562718, 0.22067002521572565, 0.22067002521572565, 0.22067002521572565, 0.80766526860633, 0.80766526860633, 0.80766526860633, 0.8562888357476963, 0.8562888357476963, 0.8562888357476963, 0.14192282511161047, 0.14192282511161047, 0.14192282511161047, 0.6593199420429179, 0.6593199420429179, 0.6593199420429179, 0.539556886463646, 0.539556886463646, 0.539556886463646, 0.20895974833280329, 0.20895974833280329, 0.20895974833280329, 0.20178681877112936, 0.20178681877112936, 0.20178681877112936, 0.17993839354660013, 0.17993839354660013, 0.17993839354660013, 0.19228587854709867, 0.19228587854709867, 0.19228587854709867, 0.08976587179515605, 0.08976587179515605, 0.08976587179515605, 0.08420956473279473, 0.08420956473279473, 0.08420956473279473, 0.09551320685184694, 0.09551320685184694, 0.09551320685184694]}, "mutation_prompt": null}
{"id": "772b043b-def2-479d-9856-97034cf8bfa8", "solution": "import numpy as np\n\nclass EnhancedHybridPSOwithAdaptiveCoefficients:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.diversity_threshold = 0.5\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        def calculate_entropy(population):\n            hist, _ = np.histogramdd(population, bins=10, range=[self.bounds]*self.dim)\n            prob = hist / np.sum(hist)\n            prob = prob[prob > 0]\n            return -np.sum(prob * np.log2(prob))\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            entropy = calculate_entropy(position)\n            if entropy < self.diversity_threshold:\n                self.cognitive_coeff = 1.8  # Adjust for diversity\n                self.social_coeff = 1.2\n            else:\n                self.cognitive_coeff = 1.2\n                self.social_coeff = 1.8\n\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "EnhancedHybridPSOwithAdaptiveCoefficients", "description": "Enhanced Hybrid PSO with Adaptive Differential Mutation incorporating adaptive learning coefficients based on population diversity for intensified exploitation and exploration.", "configspace": "", "generation": 72, "fitness": 0.23041867575441025, "feedback": "The algorithm EnhancedHybridPSOwithAdaptiveCoefficients got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.22.", "error": "", "parent_id": "0e3b97a9-ca02-4506-9f5f-c4df05eb6e8a", "metadata": {"aucs": [0.6264165381853619, 0.6264165381853619, 0.6264165381853619, 0.593110768462008, 0.593110768462008, 0.593110768462008, 0.5907007354458182, 0.5907007354458182, 0.5907007354458182, 0.1869902931326467, 0.1869902931326467, 0.1869902931326467, 0.13316744841337802, 0.13316744841337802, 0.13316744841337802, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06859062381735515, 0.06859062381735515, 0.06859062381735515, 0.1134904784086429, 0.1134904784086429, 0.1134904784086429, 0.10789794762098814, 0.10789794762098814, 0.10789794762098814, 0.09282542789577819, 0.09282542789577819, 0.09282542789577819, 0.1039743595091559, 0.1039743595091559, 0.1039743595091559, 0.13401124722512214, 0.13401124722512214, 0.13401124722512214, 0.9847641735180914, 0.9847641735180914, 0.9847641735180914, 0.9689303234404724, 0.9689303234404724, 0.9689303234404724, 0.9862445632775553, 0.9862445632775553, 0.9862445632775553, 0.32388201442090836, 0.32388201442090836, 0.32388201442090836, 0.14450334728782943, 0.14450334728782943, 0.14450334728782943, 0.08154782705444774, 0.08154782705444774, 0.08154782705444774, 0.1709003916383417, 0.1709003916383417, 0.1709003916383417, 0.19954048250437462, 0.19954048250437462, 0.19954048250437462, 0.5290641455463504, 0.5290641455463504, 0.5290641455463504, 0.19494497600391336, 0.19494497600391336, 0.19494497600391336, 0.08900169154087767, 0.08900169154087767, 0.08900169154087767, 0.1584766981568786, 0.1584766981568786, 0.1584766981568786, 0.20659888043924257, 0.20659888043924257, 0.20659888043924257, 0.1726934224113209, 0.1726934224113209, 0.1726934224113209, 0.11936619758182154, 0.11936619758182154, 0.11936619758182154, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.016985251525939882, 0.016985251525939882, 0.016985251525939882, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08460934709937318, 0.08460934709937318, 0.08460934709937318, 0.04462974615771831, 0.04462974615771831, 0.04462974615771831, 0.03907146767335723, 0.03907146767335723, 0.03907146767335723, 0.02758484701242747, 0.02758484701242747, 0.02758484701242747, 0.06576632854230136, 0.06576632854230136, 0.06576632854230136, 0.06520711825924352, 0.06520711825924352, 0.06520711825924352, 0.0374678511103228, 0.0374678511103228, 0.0374678511103228, 0.07319272959998813, 0.07319272959998813, 0.07319272959998813, 0.07088304437277115, 0.07088304437277115, 0.07088304437277115, 0.4657675911975889, 0.4657675911975889, 0.4657675911975889, 0.4231710461697993, 0.4231710461697993, 0.4231710461697993, 0.4520555549273304, 0.4520555549273304, 0.4520555549273304, 0.07376776036982224, 0.07376776036982224, 0.07376776036982224, 0.1501633197929918, 0.1501633197929918, 0.1501633197929918, 0.09810082165510081, 0.09810082165510081, 0.09810082165510081, 0.16940981823244805, 0.16940981823244805, 0.16940981823244805, 0.22990216845160893, 0.22990216845160893, 0.22990216845160893, 0.311125332167836, 0.311125332167836, 0.311125332167836, 0.22469551799924503, 0.22469551799924503, 0.22469551799924503, 0.16798649046362713, 0.16798649046362713, 0.16798649046362713, 0.27015792654208803, 0.27015792654208803, 0.27015792654208803, 0.2183827982241674, 0.2183827982241674, 0.2183827982241674, 0.16489589175067487, 0.16489589175067487, 0.16489589175067487, 0.205591705422287, 0.205591705422287, 0.205591705422287, 0.2186558989545212, 0.2186558989545212, 0.2186558989545212, 0.19776238703101778, 0.19776238703101778, 0.19776238703101778, 0.19250349918656717, 0.19250349918656717, 0.19250349918656717, 0.20053876008967353, 0.20053876008967353, 0.20053876008967353, 0.18375642501788692, 0.18375642501788692, 0.18375642501788692, 0.22023380634486556, 0.22023380634486556, 0.22023380634486556, 0.735622071331002, 0.735622071331002, 0.735622071331002, 0.48591321378242003, 0.48591321378242003, 0.48591321378242003, 0.13966828791432784, 0.13966828791432784, 0.13966828791432784, 0.51261465757291, 0.51261465757291, 0.51261465757291, 0.20587727343885331, 0.20587727343885331, 0.20587727343885331, 0.19643285038854552, 0.19643285038854552, 0.19643285038854552, 0.18690102617813076, 0.18690102617813076, 0.18690102617813076, 0.18227165735928363, 0.18227165735928363, 0.18227165735928363, 0.2294259305816907, 0.2294259305816907, 0.2294259305816907, 0.07817827410341016, 0.07817827410341016, 0.07817827410341016, 0.07796821844016855, 0.07796821844016855, 0.07796821844016855, 0.11331393894352548, 0.11331393894352548, 0.11331393894352548]}, "mutation_prompt": null}
{"id": "76b74273-a4e8-4918-844a-21ac9ee4567a", "solution": "import numpy as np\n\nclass EnhancedHybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.diversity_threshold = 0.5\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        # Helper function to calculate diversity using entropy\n        def calculate_entropy(population):\n            hist, _ = np.histogramdd(population, bins=10, range=[self.bounds]*self.dim)\n            prob = hist / np.sum(hist)\n            prob = prob[prob > 0]\n            return -np.sum(prob * np.log2(prob))\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Calculate diversity and adjust inertia weight\n            entropy = calculate_entropy(position)\n            if entropy < self.diversity_threshold:\n                self.inertia_weight = 0.9\n                # Strategic reinitialization\n                if eval_count / self.budget < 0.5:\n                    position[np.random.randint(0, self.population_size)] = np.random.uniform(self.bounds[0], self.bounds[1], self.dim)\n            else:\n                self.inertia_weight = 0.5\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "EnhancedHybridPSOwithADM", "description": "Enhanced PSO with Adaptive Mutation and Strategic Particle Reinitialization for improved diversity and convergence.", "configspace": "", "generation": 73, "fitness": 0.287069304861593, "feedback": "The algorithm EnhancedHybridPSOwithADM got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.24.", "error": "", "parent_id": "0e3b97a9-ca02-4506-9f5f-c4df05eb6e8a", "metadata": {"aucs": [0.7751688983502438, 0.7751688983502438, 0.7751688983502438, 0.7568200342631357, 0.7568200342631357, 0.7568200342631357, 0.5451238031339436, 0.5451238031339436, 0.5451238031339436, 0.45684579596286046, 0.45684579596286046, 0.45684579596286046, 0.421504633630402, 0.421504633630402, 0.421504633630402, 0.39396281206500405, 0.39396281206500405, 0.39396281206500405, 0.15013105941983873, 0.15013105941983873, 0.15013105941983873, 0.1489729521507579, 0.1489729521507579, 0.1489729521507579, 0.1442499373991386, 0.1442499373991386, 0.1442499373991386, 0.17817817024589366, 0.17817817024589366, 0.17817817024589366, 0.13460287105939694, 0.13460287105939694, 0.13460287105939694, 0.13545829778482343, 0.13545829778482343, 0.13545829778482343, 0.9772250927856639, 0.9772250927856639, 0.9772250927856639, 0.9691668102461399, 0.9691668102461399, 0.9691668102461399, 0.978103888520503, 0.978103888520503, 0.978103888520503, 0.46312996972988496, 0.46312996972988496, 0.46312996972988496, 0.510317097205699, 0.510317097205699, 0.510317097205699, 0.11680631840829081, 0.11680631840829081, 0.11680631840829081, 0.17143984219925879, 0.17143984219925879, 0.17143984219925879, 0.2073773125555156, 0.2073773125555156, 0.2073773125555156, 0.23188716594811243, 0.23188716594811243, 0.23188716594811243, 0.12097968726554154, 0.12097968726554154, 0.12097968726554154, 0.09671439260796888, 0.09671439260796888, 0.09671439260796888, 0.10676861894882972, 0.10676861894882972, 0.10676861894882972, 0.22562050892627505, 0.22562050892627505, 0.22562050892627505, 0.1290474409846003, 0.1290474409846003, 0.1290474409846003, 0.23941139245107912, 0.23941139245107912, 0.23941139245107912, 0.0017966368181528969, 0.0017966368181528969, 0.0017966368181528969, 0.036596185349474064, 0.036596185349474064, 0.036596185349474064, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07577759605248668, 0.07577759605248668, 0.07577759605248668, 0.060073616227250715, 0.060073616227250715, 0.060073616227250715, 0.048788683294605284, 0.048788683294605284, 0.048788683294605284, 0.1602610301683124, 0.1602610301683124, 0.1602610301683124, 0.06706886737560658, 0.06706886737560658, 0.06706886737560658, 0.08563593343502529, 0.08563593343502529, 0.08563593343502529, 0.07701254309109373, 0.07701254309109373, 0.07701254309109373, 0.07171453218121548, 0.07171453218121548, 0.07171453218121548, 0.0785612024864466, 0.0785612024864466, 0.0785612024864466, 0.4958996936018305, 0.4958996936018305, 0.4958996936018305, 0.5363751517205144, 0.5363751517205144, 0.5363751517205144, 0.5446051133554026, 0.5446051133554026, 0.5446051133554026, 0.12404003699491262, 0.12404003699491262, 0.12404003699491262, 0.13647902822134605, 0.13647902822134605, 0.13647902822134605, 0.1441055262970622, 0.1441055262970622, 0.1441055262970622, 0.40809062620176806, 0.40809062620176806, 0.40809062620176806, 0.26413774133519086, 0.26413774133519086, 0.26413774133519086, 0.2710843023707633, 0.2710843023707633, 0.2710843023707633, 0.3050729144518972, 0.3050729144518972, 0.3050729144518972, 0.3874813054850095, 0.3874813054850095, 0.3874813054850095, 0.4067059598575318, 0.4067059598575318, 0.4067059598575318, 0.2143468711727914, 0.2143468711727914, 0.2143468711727914, 0.202934541004833, 0.202934541004833, 0.202934541004833, 0.3513730335654943, 0.3513730335654943, 0.3513730335654943, 0.2259316670972551, 0.2259316670972551, 0.2259316670972551, 0.2304304304283521, 0.2304304304283521, 0.2304304304283521, 0.19693369026054708, 0.19693369026054708, 0.19693369026054708, 0.1807893969977331, 0.1807893969977331, 0.1807893969977331, 0.21350324847562718, 0.21350324847562718, 0.21350324847562718, 0.22067894418704692, 0.22067894418704692, 0.22067894418704692, 0.8100241558757356, 0.8100241558757356, 0.8100241558757356, 0.8562888357476963, 0.8562888357476963, 0.8562888357476963, 0.14192337608720806, 0.14192337608720806, 0.14192337608720806, 0.6593199420429179, 0.6593199420429179, 0.6593199420429179, 0.539556886463646, 0.539556886463646, 0.539556886463646, 0.2089761657614848, 0.2089761657614848, 0.2089761657614848, 0.20178681877112936, 0.20178681877112936, 0.20178681877112936, 0.17993839354660013, 0.17993839354660013, 0.17993839354660013, 0.19228587854709867, 0.19228587854709867, 0.19228587854709867, 0.08976587179515605, 0.08976587179515605, 0.08976587179515605, 0.08420956473279473, 0.08420956473279473, 0.08420956473279473, 0.09551320685184694, 0.09551320685184694, 0.09551320685184694]}, "mutation_prompt": null}
{"id": "23cfe137-0df6-4867-81f5-b912c2e6f0dc", "solution": "import numpy as np\n\nclass EnhancedHybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.diversity_threshold = 0.5  # New parameter for diversity control\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        # Helper function to calculate diversity using entropy\n        def calculate_entropy(population):\n            hist, _ = np.histogramdd(population, bins=10, range=[self.bounds]*self.dim)\n            prob = hist / np.sum(hist)\n            prob = prob[prob > 0]\n            return -np.sum(prob * np.log2(prob))\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Calculate diversity and adjust inertia weight\n            entropy = calculate_entropy(position)\n            if entropy < self.diversity_threshold:\n                self.inertia_weight = 0.9  # Increase exploration\n            else:\n                self.inertia_weight = 0.5  # Increase exploitation\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "EnhancedHybridPSOwithADM", "description": "Enhanced Hybrid PSO with Adaptive Differential Mutation employing entropy-based diversity control for balanced exploration and exploitation.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0e3b97a9-ca02-4506-9f5f-c4df05eb6e8a", "metadata": {"aucs": [0.6880409813966182, 0.6880409813966182, 0.6880409813966182, 0.7296039819281639, 0.7296039819281639, 0.7296039819281639, 0.7311801224738436, 0.7311801224738436, 0.7311801224738436, 0.45303361795800723, 0.45303361795800723, 0.45303361795800723, 0.42408074227534676, 0.42408074227534676, 0.42408074227534676, 0.4213118193105433, 0.4213118193105433, 0.4213118193105433, 0.1457889816396335, 0.1457889816396335, 0.1457889816396335, 0.14896797542583806, 0.14896797542583806, 0.14896797542583806, 0.1442499373991386, 0.1442499373991386, 0.1442499373991386, 0.2350236193357942, 0.2350236193357942, 0.2350236193357942, 0.1346031972324392, 0.1346031972324392, 0.1346031972324392, 0.12876591977657914, 0.12876591977657914, 0.12876591977657914, 0.9772250927856639, 0.9772250927856639, 0.9772250927856639, 0.9691668102461399, 0.9691668102461399, 0.9691668102461399, 0.978103888520503, 0.978103888520503, 0.978103888520503, 0.40285923459368933, 0.40285923459368933, 0.40285923459368933, 0.4820720966785548, 0.4820720966785548, 0.4820720966785548, 0.11686287227377812, 0.11686287227377812, 0.11686287227377812, 0.17143984219925879, 0.17143984219925879, 0.17143984219925879, 0.2064960520839738, 0.2064960520839738, 0.2064960520839738, 0.23188716594811243, 0.23188716594811243, 0.23188716594811243, 0.12071499011569964, 0.12071499011569964, 0.12071499011569964, 0.09704625189711369, 0.09704625189711369, 0.09704625189711369, 0.10910122243462173, 0.10910122243462173, 0.10910122243462173, 0.21886285945445505, 0.21886285945445505, 0.21886285945445505, 0.12889505386781253, 0.12889505386781253, 0.12889505386781253, 0.23941139245107912, 0.23941139245107912, 0.23941139245107912, 0.0017966368181528969, 0.0017966368181528969, 0.0017966368181528969, 0.031239255775808883, 0.031239255775808883, 0.031239255775808883, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07577759605248668, 0.07577759605248668, 0.07577759605248668, 0.060073616227250715, 0.060073616227250715, 0.060073616227250715, 0.048788683294605284, 0.048788683294605284, 0.048788683294605284, 0.16020752542177996, 0.16020752542177996, 0.16020752542177996, 0.06462842856932416, 0.06462842856932416, 0.06462842856932416, 0.08552647288980919, 0.08552647288980919, 0.08552647288980919, 0.07869954743425622, 0.07869954743425622, 0.07869954743425622, 0.07161467329900728, 0.07161467329900728, 0.07161467329900728, 0.07851664711049411, 0.07851664711049411, 0.07851664711049411, 0.4850803381802665, 0.4850803381802665, 0.4850803381802665, 0.5384798448691746, 0.5384798448691746, 0.5384798448691746, 0.5388225251719228, 0.5388225251719228, 0.5388225251719228, 0.12404003699491262, 0.12404003699491262, 0.12404003699491262, 0.13647902822134605, 0.13647902822134605, 0.13647902822134605, 0.1441055262970622, 0.1441055262970622, 0.1441055262970622, 0.40809062620176806, 0.40809062620176806, 0.40809062620176806, 0.2641956039550789, 0.2641956039550789, 0.2641956039550789, 0.2710843023707633, 0.2710843023707633, 0.2710843023707633, 0.3030864642886386, 0.3030864642886386, 0.3030864642886386, 0.3829670225072688, 0.3829670225072688, 0.3829670225072688, 0.4208138977634439, 0.4208138977634439, 0.4208138977634439, 0.2137451287479144, 0.2137451287479144, 0.2137451287479144, 0.20167973208858203, 0.20167973208858203, 0.20167973208858203, 0.3449527434778301, 0.3449527434778301, 0.3449527434778301, 0.2259316670972551, 0.2259316670972551, 0.2259316670972551, 0.2304304304283521, 0.2304304304283521, 0.2304304304283521, 0.19693369026054708, 0.19693369026054708, 0.19693369026054708, 0.1807893969977331, 0.1807893969977331, 0.1807893969977331, 0.21350324847562718, 0.21350324847562718, 0.21350324847562718, 0.22067002521572565, 0.22067002521572565, 0.22067002521572565, 0.80766526860633, 0.80766526860633, 0.80766526860633, 0.8562888357476963, 0.8562888357476963, 0.8562888357476963, 0.14192282511161047, 0.14192282511161047, 0.14192282511161047, 0.6593199420429179, 0.6593199420429179, 0.6593199420429179, 0.539556886463646, 0.539556886463646, 0.539556886463646, 0.20895974833280329, 0.20895974833280329, 0.20895974833280329, 0.20178681877112936, 0.20178681877112936, 0.20178681877112936, 0.17993839354660013, 0.17993839354660013, 0.17993839354660013, 0.19228587854709867, 0.19228587854709867, 0.19228587854709867, 0.08976587179515605, 0.08976587179515605, 0.08976587179515605, 0.08420956473279473, 0.08420956473279473, 0.08420956473279473, 0.09551320685184694, 0.09551320685184694, 0.09551320685184694]}, "mutation_prompt": null}
{"id": "2405094a-494b-475e-94ac-962482ee23e4", "solution": "import numpy as np\n\nclass EnhancedHybridPSOwithADM:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.diversity_threshold = 0.5  # New parameter for diversity control\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        # Initialize particles\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        # Helper function to limit search space\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        # Helper function to calculate diversity using entropy\n        def calculate_entropy(population):\n            hist, _ = np.histogramdd(population, bins=10, range=[self.bounds]*self.dim)\n            prob = hist / np.sum(hist)\n            prob = prob[prob > 0]\n            return -np.sum(prob * np.log2(prob))\n\n        while eval_count < self.budget:\n            # Evaluate particles\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            # Calculate diversity and adjust inertia weight\n            entropy = calculate_entropy(position)\n            if entropy < self.diversity_threshold:\n                self.inertia_weight = 0.9  # Increase exploration\n            else:\n                self.inertia_weight = 0.5  # Increase exploitation\n\n            # Update velocities and positions using PSO\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Apply Adaptive Differential Mutation\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n                \n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n                \n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "EnhancedHybridPSOwithADM", "description": "Enhanced Hybrid PSO with Adaptive Differential Mutation employing entropy-based diversity control for balanced exploration and exploitation.", "configspace": "", "generation": 72, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "0e3b97a9-ca02-4506-9f5f-c4df05eb6e8a", "metadata": {"aucs": [0.6880409813966182, 0.6880409813966182, 0.6880409813966182, 0.7296039819281639, 0.7296039819281639, 0.7296039819281639, 0.7311801224738436, 0.7311801224738436, 0.7311801224738436, 0.45303361795800723, 0.45303361795800723, 0.45303361795800723, 0.42408074227534676, 0.42408074227534676, 0.42408074227534676, 0.4213118193105433, 0.4213118193105433, 0.4213118193105433, 0.1457889816396335, 0.1457889816396335, 0.1457889816396335, 0.14896797542583806, 0.14896797542583806, 0.14896797542583806, 0.1442499373991386, 0.1442499373991386, 0.1442499373991386, 0.2350236193357942, 0.2350236193357942, 0.2350236193357942, 0.1346031972324392, 0.1346031972324392, 0.1346031972324392, 0.12876591977657914, 0.12876591977657914, 0.12876591977657914, 0.9772250927856639, 0.9772250927856639, 0.9772250927856639, 0.9691668102461399, 0.9691668102461399, 0.9691668102461399, 0.978103888520503, 0.978103888520503, 0.978103888520503, 0.40285923459368933, 0.40285923459368933, 0.40285923459368933, 0.4820720966785548, 0.4820720966785548, 0.4820720966785548, 0.11686287227377812, 0.11686287227377812, 0.11686287227377812, 0.17143984219925879, 0.17143984219925879, 0.17143984219925879, 0.2064960520839738, 0.2064960520839738, 0.2064960520839738, 0.23188716594811243, 0.23188716594811243, 0.23188716594811243, 0.12071499011569964, 0.12071499011569964, 0.12071499011569964, 0.09704625189711369, 0.09704625189711369, 0.09704625189711369, 0.10910122243462173, 0.10910122243462173, 0.10910122243462173, 0.21886285945445505, 0.21886285945445505, 0.21886285945445505, 0.12889505386781253, 0.12889505386781253, 0.12889505386781253, 0.23941139245107912, 0.23941139245107912, 0.23941139245107912, 0.0017966368181528969, 0.0017966368181528969, 0.0017966368181528969, 0.031239255775808883, 0.031239255775808883, 0.031239255775808883, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07577759605248668, 0.07577759605248668, 0.07577759605248668, 0.060073616227250715, 0.060073616227250715, 0.060073616227250715, 0.048788683294605284, 0.048788683294605284, 0.048788683294605284, 0.16020752542177996, 0.16020752542177996, 0.16020752542177996, 0.06462842856932416, 0.06462842856932416, 0.06462842856932416, 0.08552647288980919, 0.08552647288980919, 0.08552647288980919, 0.07869954743425622, 0.07869954743425622, 0.07869954743425622, 0.07161467329900728, 0.07161467329900728, 0.07161467329900728, 0.07851664711049411, 0.07851664711049411, 0.07851664711049411, 0.4850803381802665, 0.4850803381802665, 0.4850803381802665, 0.5384798448691746, 0.5384798448691746, 0.5384798448691746, 0.5388225251719228, 0.5388225251719228, 0.5388225251719228, 0.12404003699491262, 0.12404003699491262, 0.12404003699491262, 0.13647902822134605, 0.13647902822134605, 0.13647902822134605, 0.1441055262970622, 0.1441055262970622, 0.1441055262970622, 0.40809062620176806, 0.40809062620176806, 0.40809062620176806, 0.2641956039550789, 0.2641956039550789, 0.2641956039550789, 0.2710843023707633, 0.2710843023707633, 0.2710843023707633, 0.3030864642886386, 0.3030864642886386, 0.3030864642886386, 0.3829670225072688, 0.3829670225072688, 0.3829670225072688, 0.4208138977634439, 0.4208138977634439, 0.4208138977634439, 0.2137451287479144, 0.2137451287479144, 0.2137451287479144, 0.20167973208858203, 0.20167973208858203, 0.20167973208858203, 0.3449527434778301, 0.3449527434778301, 0.3449527434778301, 0.2259316670972551, 0.2259316670972551, 0.2259316670972551, 0.2304304304283521, 0.2304304304283521, 0.2304304304283521, 0.19693369026054708, 0.19693369026054708, 0.19693369026054708, 0.1807893969977331, 0.1807893969977331, 0.1807893969977331, 0.21350324847562718, 0.21350324847562718, 0.21350324847562718, 0.22067002521572565, 0.22067002521572565, 0.22067002521572565, 0.80766526860633, 0.80766526860633, 0.80766526860633, 0.8562888357476963, 0.8562888357476963, 0.8562888357476963, 0.14192282511161047, 0.14192282511161047, 0.14192282511161047, 0.6593199420429179, 0.6593199420429179, 0.6593199420429179, 0.539556886463646, 0.539556886463646, 0.539556886463646, 0.20895974833280329, 0.20895974833280329, 0.20895974833280329, 0.20178681877112936, 0.20178681877112936, 0.20178681877112936, 0.17993839354660013, 0.17993839354660013, 0.17993839354660013, 0.19228587854709867, 0.19228587854709867, 0.19228587854709867, 0.08976587179515605, 0.08976587179515605, 0.08976587179515605, 0.08420956473279473, 0.08420956473279473, 0.08420956473279473, 0.09551320685184694, 0.09551320685184694, 0.09551320685184694]}, "mutation_prompt": null}
{"id": "c8d1d3d3-e2cc-4437-812e-8baf29fde249", "solution": "import numpy as np\n\nclass OptimizedEntropyGuidedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.diversity_threshold = 0.5\n        self.global_learning_rate = 0.1  # New parameter for direct global learning\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        def calculate_entropy(population):\n            hist, _ = np.histogramdd(population, bins=10, range=[self.bounds]*self.dim)\n            prob = hist / np.sum(hist)\n            prob = prob[prob > 0]\n            return -np.sum(prob * np.log2(prob))\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            entropy = calculate_entropy(position)\n            self.inertia_weight = 0.9 if entropy < self.diversity_threshold else 0.5\n\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n\n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n\n                # Direct global learning step to diversify search\n                position[i] = position[i] + self.global_learning_rate * (global_best_position - position[i])\n                position[i] = clip_to_bounds(position[i])\n\n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "OptimizedEntropyGuidedPSO", "description": "Optimized Entropy-Guided PSO with Adaptive Mutation and Enhanced Global Learning for improved convergence efficiency.", "configspace": "", "generation": 76, "fitness": 0.2886436333112292, "feedback": "The algorithm OptimizedEntropyGuidedPSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.25.", "error": "", "parent_id": "0e3b97a9-ca02-4506-9f5f-c4df05eb6e8a", "metadata": {"aucs": [0.7712057075444108, 0.7712057075444108, 0.7712057075444108, 0.7825078419690499, 0.7825078419690499, 0.7825078419690499, 0.7397775500797703, 0.7397775500797703, 0.7397775500797703, 0.45173332311630954, 0.45173332311630954, 0.45173332311630954, 0.47148379540446916, 0.47148379540446916, 0.47148379540446916, 0.48711153322072265, 0.48711153322072265, 0.48711153322072265, 0.11767800852198984, 0.11767800852198984, 0.11767800852198984, 0.16739192456947516, 0.16739192456947516, 0.16739192456947516, 0.11746493585124262, 0.11746493585124262, 0.11746493585124262, 0.13274776495461516, 0.13274776495461516, 0.13274776495461516, 0.13811936470128916, 0.13811936470128916, 0.13811936470128916, 0.12698859603412815, 0.12698859603412815, 0.12698859603412815, 0.9770089849461173, 0.9770089849461173, 0.9770089849461173, 0.9755652967253036, 0.9755652967253036, 0.9755652967253036, 0.9780619493665681, 0.9780619493665681, 0.9780619493665681, 0.46928016457087596, 0.46928016457087596, 0.46928016457087596, 0.42827192935630454, 0.42827192935630454, 0.42827192935630454, 0.12195323309221207, 0.12195323309221207, 0.12195323309221207, 0.20793824382550652, 0.20793824382550652, 0.20793824382550652, 0.21397593421445416, 0.21397593421445416, 0.21397593421445416, 0.2336714680592804, 0.2336714680592804, 0.2336714680592804, 0.128509017001593, 0.128509017001593, 0.128509017001593, 0.10171614788176975, 0.10171614788176975, 0.10171614788176975, 0.20115231687772506, 0.20115231687772506, 0.20115231687772506, 0.23401686718285042, 0.23401686718285042, 0.23401686718285042, 0.1982716770363533, 0.1982716770363533, 0.1982716770363533, 0.2365456739364502, 0.2365456739364502, 0.2365456739364502, 0.0020234154790769177, 0.0020234154790769177, 0.0020234154790769177, 0.02998466147304024, 0.02998466147304024, 0.02998466147304024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10824862694829951, 0.10824862694829951, 0.10824862694829951, 0.07978843534126168, 0.07978843534126168, 0.07978843534126168, 0.05191535400080616, 0.05191535400080616, 0.05191535400080616, 0.04040066307692247, 0.04040066307692247, 0.04040066307692247, 0.13224256041652882, 0.13224256041652882, 0.13224256041652882, 0.13974955375173537, 0.13974955375173537, 0.13974955375173537, 0.06543773755020521, 0.06543773755020521, 0.06543773755020521, 0.1138952082729282, 0.1138952082729282, 0.1138952082729282, 0.07932593302876811, 0.07932593302876811, 0.07932593302876811, 0.5241890507147893, 0.5241890507147893, 0.5241890507147893, 0.5184584023571028, 0.5184584023571028, 0.5184584023571028, 0.5359412316658929, 0.5359412316658929, 0.5359412316658929, 0.0977272714742774, 0.0977272714742774, 0.0977272714742774, 0.1414335414050344, 0.1414335414050344, 0.1414335414050344, 0.11199446686938497, 0.11199446686938497, 0.11199446686938497, 0.19406980541596097, 0.19406980541596097, 0.19406980541596097, 0.4041090523833357, 0.4041090523833357, 0.4041090523833357, 0.1957629970449719, 0.1957629970449719, 0.1957629970449719, 0.3610425055589135, 0.3610425055589135, 0.3610425055589135, 0.38616164742566916, 0.38616164742566916, 0.38616164742566916, 0.4595183308180957, 0.4595183308180957, 0.4595183308180957, 0.26148353287971327, 0.26148353287971327, 0.26148353287971327, 0.19550145793223328, 0.19550145793223328, 0.19550145793223328, 0.22076665612963864, 0.22076665612963864, 0.22076665612963864, 0.2232270527492738, 0.2232270527492738, 0.2232270527492738, 0.2349765614248448, 0.2349765614248448, 0.2349765614248448, 0.22373409266563082, 0.22373409266563082, 0.22373409266563082, 0.24306101131840674, 0.24306101131840674, 0.24306101131840674, 0.2202355724672358, 0.2202355724672358, 0.2202355724672358, 0.20400191617781316, 0.20400191617781316, 0.20400191617781316, 0.8851415328735894, 0.8851415328735894, 0.8851415328735894, 0.886010339109647, 0.886010339109647, 0.886010339109647, 0.14196708102538547, 0.14196708102538547, 0.14196708102538547, 0.6530363697661574, 0.6530363697661574, 0.6530363697661574, 0.2806290125472779, 0.2806290125472779, 0.2806290125472779, 0.104381270167199, 0.104381270167199, 0.104381270167199, 0.18740031535217871, 0.18740031535217871, 0.18740031535217871, 0.17078170859939523, 0.17078170859939523, 0.17078170859939523, 0.175373728264949, 0.175373728264949, 0.175373728264949, 0.1041622422441908, 0.1041622422441908, 0.1041622422441908, 0.09960321644928549, 0.09960321644928549, 0.09960321644928549, 0.08319722575062061, 0.08319722575062061, 0.08319722575062061]}, "mutation_prompt": null}
{"id": "6d73bbb3-c2a5-40a0-b766-75ecf287fe3b", "solution": "import numpy as np\n\nclass OptimizedEntropyGuidedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.diversity_threshold = 0.5\n        self.global_learning_rate = 0.1  # New parameter for direct global learning\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        def calculate_entropy(population):\n            hist, _ = np.histogramdd(population, bins=10, range=[self.bounds]*self.dim)\n            prob = hist / np.sum(hist)\n            prob = prob[prob > 0]\n            return -np.sum(prob * np.log2(prob))\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            entropy = calculate_entropy(position)\n            self.inertia_weight = 0.9 if entropy < self.diversity_threshold else 0.5\n\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n\n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n\n                # Direct global learning step to diversify search\n                position[i] = position[i] + self.global_learning_rate * (global_best_position - position[i])\n                position[i] = clip_to_bounds(position[i])\n\n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "OptimizedEntropyGuidedPSO", "description": "Optimized Entropy-Guided PSO with Adaptive Mutation and Enhanced Global Learning for improved convergence efficiency.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c8d1d3d3-e2cc-4437-812e-8baf29fde249", "metadata": {"aucs": [0.7712057075444108, 0.7712057075444108, 0.7712057075444108, 0.7825078419690499, 0.7825078419690499, 0.7825078419690499, 0.7397775500797703, 0.7397775500797703, 0.7397775500797703, 0.45173332311630954, 0.45173332311630954, 0.45173332311630954, 0.47148379540446916, 0.47148379540446916, 0.47148379540446916, 0.48711153322072265, 0.48711153322072265, 0.48711153322072265, 0.11767800852198984, 0.11767800852198984, 0.11767800852198984, 0.16739192456947516, 0.16739192456947516, 0.16739192456947516, 0.11746493585124262, 0.11746493585124262, 0.11746493585124262, 0.13274776495461516, 0.13274776495461516, 0.13274776495461516, 0.13811936470128916, 0.13811936470128916, 0.13811936470128916, 0.12698859603412815, 0.12698859603412815, 0.12698859603412815, 0.9770089849461173, 0.9770089849461173, 0.9770089849461173, 0.9755652967253036, 0.9755652967253036, 0.9755652967253036, 0.9780619493665681, 0.9780619493665681, 0.9780619493665681, 0.46928016457087596, 0.46928016457087596, 0.46928016457087596, 0.42827192935630454, 0.42827192935630454, 0.42827192935630454, 0.12195323309221207, 0.12195323309221207, 0.12195323309221207, 0.20793824382550652, 0.20793824382550652, 0.20793824382550652, 0.21397593421445416, 0.21397593421445416, 0.21397593421445416, 0.2336714680592804, 0.2336714680592804, 0.2336714680592804, 0.128509017001593, 0.128509017001593, 0.128509017001593, 0.10171614788176975, 0.10171614788176975, 0.10171614788176975, 0.20115231687772506, 0.20115231687772506, 0.20115231687772506, 0.23401686718285042, 0.23401686718285042, 0.23401686718285042, 0.1982716770363533, 0.1982716770363533, 0.1982716770363533, 0.2365456739364502, 0.2365456739364502, 0.2365456739364502, 0.0020234154790769177, 0.0020234154790769177, 0.0020234154790769177, 0.02998466147304024, 0.02998466147304024, 0.02998466147304024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10824862694829951, 0.10824862694829951, 0.10824862694829951, 0.07978843534126168, 0.07978843534126168, 0.07978843534126168, 0.05191535400080616, 0.05191535400080616, 0.05191535400080616, 0.04040066307692247, 0.04040066307692247, 0.04040066307692247, 0.13224256041652882, 0.13224256041652882, 0.13224256041652882, 0.13974955375173537, 0.13974955375173537, 0.13974955375173537, 0.06543773755020521, 0.06543773755020521, 0.06543773755020521, 0.1138952082729282, 0.1138952082729282, 0.1138952082729282, 0.07932593302876811, 0.07932593302876811, 0.07932593302876811, 0.5241890507147893, 0.5241890507147893, 0.5241890507147893, 0.5184584023571028, 0.5184584023571028, 0.5184584023571028, 0.5359412316658929, 0.5359412316658929, 0.5359412316658929, 0.0977272714742774, 0.0977272714742774, 0.0977272714742774, 0.1414335414050344, 0.1414335414050344, 0.1414335414050344, 0.11199446686938497, 0.11199446686938497, 0.11199446686938497, 0.19406980541596097, 0.19406980541596097, 0.19406980541596097, 0.4041090523833357, 0.4041090523833357, 0.4041090523833357, 0.1957629970449719, 0.1957629970449719, 0.1957629970449719, 0.3610425055589135, 0.3610425055589135, 0.3610425055589135, 0.38616164742566916, 0.38616164742566916, 0.38616164742566916, 0.4595183308180957, 0.4595183308180957, 0.4595183308180957, 0.26148353287971327, 0.26148353287971327, 0.26148353287971327, 0.19550145793223328, 0.19550145793223328, 0.19550145793223328, 0.22076665612963864, 0.22076665612963864, 0.22076665612963864, 0.2232270527492738, 0.2232270527492738, 0.2232270527492738, 0.2349765614248448, 0.2349765614248448, 0.2349765614248448, 0.22373409266563082, 0.22373409266563082, 0.22373409266563082, 0.24306101131840674, 0.24306101131840674, 0.24306101131840674, 0.2202355724672358, 0.2202355724672358, 0.2202355724672358, 0.20400191617781316, 0.20400191617781316, 0.20400191617781316, 0.8851415328735894, 0.8851415328735894, 0.8851415328735894, 0.886010339109647, 0.886010339109647, 0.886010339109647, 0.14196708102538547, 0.14196708102538547, 0.14196708102538547, 0.6530363697661574, 0.6530363697661574, 0.6530363697661574, 0.2806290125472779, 0.2806290125472779, 0.2806290125472779, 0.104381270167199, 0.104381270167199, 0.104381270167199, 0.18740031535217871, 0.18740031535217871, 0.18740031535217871, 0.17078170859939523, 0.17078170859939523, 0.17078170859939523, 0.175373728264949, 0.175373728264949, 0.175373728264949, 0.1041622422441908, 0.1041622422441908, 0.1041622422441908, 0.09960321644928549, 0.09960321644928549, 0.09960321644928549, 0.08319722575062061, 0.08319722575062061, 0.08319722575062061]}, "mutation_prompt": null}
{"id": "b51caf1f-b1d9-41e3-83dc-5dbaebb97b8e", "solution": "import numpy as np\n\nclass OptimizedEntropyGuidedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.diversity_threshold = 0.5\n        self.global_learning_rate = 0.1  # New parameter for direct global learning\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        def calculate_entropy(population):\n            hist, _ = np.histogramdd(population, bins=10, range=[self.bounds]*self.dim)\n            prob = hist / np.sum(hist)\n            prob = prob[prob > 0]\n            return -np.sum(prob * np.log2(prob))\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            entropy = calculate_entropy(position)\n            self.inertia_weight = 0.9 if entropy < self.diversity_threshold else 0.5\n\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n\n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n\n                # Direct global learning step to diversify search\n                position[i] = position[i] + self.global_learning_rate * (global_best_position - position[i])\n                position[i] = clip_to_bounds(position[i])\n\n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "OptimizedEntropyGuidedPSO", "description": "Optimized Entropy-Guided PSO with Adaptive Mutation and Enhanced Global Learning for improved convergence efficiency.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c8d1d3d3-e2cc-4437-812e-8baf29fde249", "metadata": {"aucs": [0.7712057075444108, 0.7712057075444108, 0.7712057075444108, 0.7825078419690499, 0.7825078419690499, 0.7825078419690499, 0.7397775500797703, 0.7397775500797703, 0.7397775500797703, 0.45173332311630954, 0.45173332311630954, 0.45173332311630954, 0.47148379540446916, 0.47148379540446916, 0.47148379540446916, 0.48711153322072265, 0.48711153322072265, 0.48711153322072265, 0.11767800852198984, 0.11767800852198984, 0.11767800852198984, 0.16739192456947516, 0.16739192456947516, 0.16739192456947516, 0.11746493585124262, 0.11746493585124262, 0.11746493585124262, 0.13274776495461516, 0.13274776495461516, 0.13274776495461516, 0.13811936470128916, 0.13811936470128916, 0.13811936470128916, 0.12698859603412815, 0.12698859603412815, 0.12698859603412815, 0.9770089849461173, 0.9770089849461173, 0.9770089849461173, 0.9755652967253036, 0.9755652967253036, 0.9755652967253036, 0.9780619493665681, 0.9780619493665681, 0.9780619493665681, 0.46928016457087596, 0.46928016457087596, 0.46928016457087596, 0.42827192935630454, 0.42827192935630454, 0.42827192935630454, 0.12195323309221207, 0.12195323309221207, 0.12195323309221207, 0.20793824382550652, 0.20793824382550652, 0.20793824382550652, 0.21397593421445416, 0.21397593421445416, 0.21397593421445416, 0.2336714680592804, 0.2336714680592804, 0.2336714680592804, 0.128509017001593, 0.128509017001593, 0.128509017001593, 0.10171614788176975, 0.10171614788176975, 0.10171614788176975, 0.20115231687772506, 0.20115231687772506, 0.20115231687772506, 0.23401686718285042, 0.23401686718285042, 0.23401686718285042, 0.1982716770363533, 0.1982716770363533, 0.1982716770363533, 0.2365456739364502, 0.2365456739364502, 0.2365456739364502, 0.0020234154790769177, 0.0020234154790769177, 0.0020234154790769177, 0.02998466147304024, 0.02998466147304024, 0.02998466147304024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10824862694829951, 0.10824862694829951, 0.10824862694829951, 0.07978843534126168, 0.07978843534126168, 0.07978843534126168, 0.05191535400080616, 0.05191535400080616, 0.05191535400080616, 0.04040066307692247, 0.04040066307692247, 0.04040066307692247, 0.13224256041652882, 0.13224256041652882, 0.13224256041652882, 0.13974955375173537, 0.13974955375173537, 0.13974955375173537, 0.06543773755020521, 0.06543773755020521, 0.06543773755020521, 0.1138952082729282, 0.1138952082729282, 0.1138952082729282, 0.07932593302876811, 0.07932593302876811, 0.07932593302876811, 0.5241890507147893, 0.5241890507147893, 0.5241890507147893, 0.5184584023571028, 0.5184584023571028, 0.5184584023571028, 0.5359412316658929, 0.5359412316658929, 0.5359412316658929, 0.0977272714742774, 0.0977272714742774, 0.0977272714742774, 0.1414335414050344, 0.1414335414050344, 0.1414335414050344, 0.11199446686938497, 0.11199446686938497, 0.11199446686938497, 0.19406980541596097, 0.19406980541596097, 0.19406980541596097, 0.4041090523833357, 0.4041090523833357, 0.4041090523833357, 0.1957629970449719, 0.1957629970449719, 0.1957629970449719, 0.3610425055589135, 0.3610425055589135, 0.3610425055589135, 0.38616164742566916, 0.38616164742566916, 0.38616164742566916, 0.4595183308180957, 0.4595183308180957, 0.4595183308180957, 0.26148353287971327, 0.26148353287971327, 0.26148353287971327, 0.19550145793223328, 0.19550145793223328, 0.19550145793223328, 0.22076665612963864, 0.22076665612963864, 0.22076665612963864, 0.2232270527492738, 0.2232270527492738, 0.2232270527492738, 0.2349765614248448, 0.2349765614248448, 0.2349765614248448, 0.22373409266563082, 0.22373409266563082, 0.22373409266563082, 0.24306101131840674, 0.24306101131840674, 0.24306101131840674, 0.2202355724672358, 0.2202355724672358, 0.2202355724672358, 0.20400191617781316, 0.20400191617781316, 0.20400191617781316, 0.8851415328735894, 0.8851415328735894, 0.8851415328735894, 0.886010339109647, 0.886010339109647, 0.886010339109647, 0.14196708102538547, 0.14196708102538547, 0.14196708102538547, 0.6530363697661574, 0.6530363697661574, 0.6530363697661574, 0.2806290125472779, 0.2806290125472779, 0.2806290125472779, 0.104381270167199, 0.104381270167199, 0.104381270167199, 0.18740031535217871, 0.18740031535217871, 0.18740031535217871, 0.17078170859939523, 0.17078170859939523, 0.17078170859939523, 0.175373728264949, 0.175373728264949, 0.175373728264949, 0.1041622422441908, 0.1041622422441908, 0.1041622422441908, 0.09960321644928549, 0.09960321644928549, 0.09960321644928549, 0.08319722575062061, 0.08319722575062061, 0.08319722575062061]}, "mutation_prompt": null}
{"id": "05cb8bb3-330f-4564-82b8-c581dbb0d849", "solution": "import numpy as np\n\nclass OptimizedEntropyGuidedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.diversity_threshold = 0.5\n        self.global_learning_rate = 0.1  # New parameter for direct global learning\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        def calculate_entropy(population):\n            hist, _ = np.histogramdd(population, bins=10, range=[self.bounds]*self.dim)\n            prob = hist / np.sum(hist)\n            prob = prob[prob > 0]\n            return -np.sum(prob * np.log2(prob))\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            entropy = calculate_entropy(position)\n            self.inertia_weight = 0.9 if entropy < self.diversity_threshold else 0.5\n\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n\n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n\n                # Direct global learning step to diversify search\n                position[i] = position[i] + self.global_learning_rate * (global_best_position - position[i])\n                position[i] = clip_to_bounds(position[i])\n\n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "OptimizedEntropyGuidedPSO", "description": "Optimized Entropy-Guided PSO with Adaptive Mutation and Enhanced Global Learning for improved convergence efficiency.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c8d1d3d3-e2cc-4437-812e-8baf29fde249", "metadata": {"aucs": [0.7712057075444108, 0.7712057075444108, 0.7712057075444108, 0.7825078419690499, 0.7825078419690499, 0.7825078419690499, 0.7397775500797703, 0.7397775500797703, 0.7397775500797703, 0.45173332311630954, 0.45173332311630954, 0.45173332311630954, 0.47148379540446916, 0.47148379540446916, 0.47148379540446916, 0.48711153322072265, 0.48711153322072265, 0.48711153322072265, 0.11767800852198984, 0.11767800852198984, 0.11767800852198984, 0.16739192456947516, 0.16739192456947516, 0.16739192456947516, 0.11746493585124262, 0.11746493585124262, 0.11746493585124262, 0.13274776495461516, 0.13274776495461516, 0.13274776495461516, 0.13811936470128916, 0.13811936470128916, 0.13811936470128916, 0.12698859603412815, 0.12698859603412815, 0.12698859603412815, 0.9770089849461173, 0.9770089849461173, 0.9770089849461173, 0.9755652967253036, 0.9755652967253036, 0.9755652967253036, 0.9780619493665681, 0.9780619493665681, 0.9780619493665681, 0.46928016457087596, 0.46928016457087596, 0.46928016457087596, 0.42827192935630454, 0.42827192935630454, 0.42827192935630454, 0.12195323309221207, 0.12195323309221207, 0.12195323309221207, 0.20793824382550652, 0.20793824382550652, 0.20793824382550652, 0.21397593421445416, 0.21397593421445416, 0.21397593421445416, 0.2336714680592804, 0.2336714680592804, 0.2336714680592804, 0.128509017001593, 0.128509017001593, 0.128509017001593, 0.10171614788176975, 0.10171614788176975, 0.10171614788176975, 0.20115231687772506, 0.20115231687772506, 0.20115231687772506, 0.23401686718285042, 0.23401686718285042, 0.23401686718285042, 0.1982716770363533, 0.1982716770363533, 0.1982716770363533, 0.2365456739364502, 0.2365456739364502, 0.2365456739364502, 0.0020234154790769177, 0.0020234154790769177, 0.0020234154790769177, 0.02998466147304024, 0.02998466147304024, 0.02998466147304024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10824862694829951, 0.10824862694829951, 0.10824862694829951, 0.07978843534126168, 0.07978843534126168, 0.07978843534126168, 0.05191535400080616, 0.05191535400080616, 0.05191535400080616, 0.04040066307692247, 0.04040066307692247, 0.04040066307692247, 0.13224256041652882, 0.13224256041652882, 0.13224256041652882, 0.13974955375173537, 0.13974955375173537, 0.13974955375173537, 0.06543773755020521, 0.06543773755020521, 0.06543773755020521, 0.1138952082729282, 0.1138952082729282, 0.1138952082729282, 0.07932593302876811, 0.07932593302876811, 0.07932593302876811, 0.5241890507147893, 0.5241890507147893, 0.5241890507147893, 0.5184584023571028, 0.5184584023571028, 0.5184584023571028, 0.5359412316658929, 0.5359412316658929, 0.5359412316658929, 0.0977272714742774, 0.0977272714742774, 0.0977272714742774, 0.1414335414050344, 0.1414335414050344, 0.1414335414050344, 0.11199446686938497, 0.11199446686938497, 0.11199446686938497, 0.19406980541596097, 0.19406980541596097, 0.19406980541596097, 0.4041090523833357, 0.4041090523833357, 0.4041090523833357, 0.1957629970449719, 0.1957629970449719, 0.1957629970449719, 0.3610425055589135, 0.3610425055589135, 0.3610425055589135, 0.38616164742566916, 0.38616164742566916, 0.38616164742566916, 0.4595183308180957, 0.4595183308180957, 0.4595183308180957, 0.26148353287971327, 0.26148353287971327, 0.26148353287971327, 0.19550145793223328, 0.19550145793223328, 0.19550145793223328, 0.22076665612963864, 0.22076665612963864, 0.22076665612963864, 0.2232270527492738, 0.2232270527492738, 0.2232270527492738, 0.2349765614248448, 0.2349765614248448, 0.2349765614248448, 0.22373409266563082, 0.22373409266563082, 0.22373409266563082, 0.24306101131840674, 0.24306101131840674, 0.24306101131840674, 0.2202355724672358, 0.2202355724672358, 0.2202355724672358, 0.20400191617781316, 0.20400191617781316, 0.20400191617781316, 0.8851415328735894, 0.8851415328735894, 0.8851415328735894, 0.886010339109647, 0.886010339109647, 0.886010339109647, 0.14196708102538547, 0.14196708102538547, 0.14196708102538547, 0.6530363697661574, 0.6530363697661574, 0.6530363697661574, 0.2806290125472779, 0.2806290125472779, 0.2806290125472779, 0.104381270167199, 0.104381270167199, 0.104381270167199, 0.18740031535217871, 0.18740031535217871, 0.18740031535217871, 0.17078170859939523, 0.17078170859939523, 0.17078170859939523, 0.175373728264949, 0.175373728264949, 0.175373728264949, 0.1041622422441908, 0.1041622422441908, 0.1041622422441908, 0.09960321644928549, 0.09960321644928549, 0.09960321644928549, 0.08319722575062061, 0.08319722575062061, 0.08319722575062061]}, "mutation_prompt": null}
{"id": "be3c709a-4e51-421d-903a-a52b8fe00bc4", "solution": "import numpy as np\n\nclass OptimizedEntropyGuidedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.diversity_threshold = 0.5\n        self.global_learning_rate = 0.1  # New parameter for direct global learning\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        def calculate_entropy(population):\n            hist, _ = np.histogramdd(population, bins=10, range=[self.bounds]*self.dim)\n            prob = hist / np.sum(hist)\n            prob = prob[prob > 0]\n            return -np.sum(prob * np.log2(prob))\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            entropy = calculate_entropy(position)\n            self.inertia_weight = 0.9 if entropy < self.diversity_threshold else 0.5\n\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n\n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n\n                # Direct global learning step to diversify search\n                position[i] = position[i] + self.global_learning_rate * (global_best_position - position[i])\n                position[i] = clip_to_bounds(position[i])\n\n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "OptimizedEntropyGuidedPSO", "description": "Optimized Entropy-Guided PSO with Adaptive Mutation and Enhanced Global Learning for improved convergence efficiency.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c8d1d3d3-e2cc-4437-812e-8baf29fde249", "metadata": {"aucs": [0.7712057075444108, 0.7712057075444108, 0.7712057075444108, 0.7825078419690499, 0.7825078419690499, 0.7825078419690499, 0.7397775500797703, 0.7397775500797703, 0.7397775500797703, 0.45173332311630954, 0.45173332311630954, 0.45173332311630954, 0.47148379540446916, 0.47148379540446916, 0.47148379540446916, 0.48711153322072265, 0.48711153322072265, 0.48711153322072265, 0.11767800852198984, 0.11767800852198984, 0.11767800852198984, 0.16739192456947516, 0.16739192456947516, 0.16739192456947516, 0.11746493585124262, 0.11746493585124262, 0.11746493585124262, 0.13274776495461516, 0.13274776495461516, 0.13274776495461516, 0.13811936470128916, 0.13811936470128916, 0.13811936470128916, 0.12698859603412815, 0.12698859603412815, 0.12698859603412815, 0.9770089849461173, 0.9770089849461173, 0.9770089849461173, 0.9755652967253036, 0.9755652967253036, 0.9755652967253036, 0.9780619493665681, 0.9780619493665681, 0.9780619493665681, 0.46928016457087596, 0.46928016457087596, 0.46928016457087596, 0.42827192935630454, 0.42827192935630454, 0.42827192935630454, 0.12195323309221207, 0.12195323309221207, 0.12195323309221207, 0.20793824382550652, 0.20793824382550652, 0.20793824382550652, 0.21397593421445416, 0.21397593421445416, 0.21397593421445416, 0.2336714680592804, 0.2336714680592804, 0.2336714680592804, 0.128509017001593, 0.128509017001593, 0.128509017001593, 0.10171614788176975, 0.10171614788176975, 0.10171614788176975, 0.20115231687772506, 0.20115231687772506, 0.20115231687772506, 0.23401686718285042, 0.23401686718285042, 0.23401686718285042, 0.1982716770363533, 0.1982716770363533, 0.1982716770363533, 0.2365456739364502, 0.2365456739364502, 0.2365456739364502, 0.0020234154790769177, 0.0020234154790769177, 0.0020234154790769177, 0.02998466147304024, 0.02998466147304024, 0.02998466147304024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10824862694829951, 0.10824862694829951, 0.10824862694829951, 0.07978843534126168, 0.07978843534126168, 0.07978843534126168, 0.05191535400080616, 0.05191535400080616, 0.05191535400080616, 0.04040066307692247, 0.04040066307692247, 0.04040066307692247, 0.13224256041652882, 0.13224256041652882, 0.13224256041652882, 0.13974955375173537, 0.13974955375173537, 0.13974955375173537, 0.06543773755020521, 0.06543773755020521, 0.06543773755020521, 0.1138952082729282, 0.1138952082729282, 0.1138952082729282, 0.07932593302876811, 0.07932593302876811, 0.07932593302876811, 0.5241890507147893, 0.5241890507147893, 0.5241890507147893, 0.5184584023571028, 0.5184584023571028, 0.5184584023571028, 0.5359412316658929, 0.5359412316658929, 0.5359412316658929, 0.0977272714742774, 0.0977272714742774, 0.0977272714742774, 0.1414335414050344, 0.1414335414050344, 0.1414335414050344, 0.11199446686938497, 0.11199446686938497, 0.11199446686938497, 0.19406980541596097, 0.19406980541596097, 0.19406980541596097, 0.4041090523833357, 0.4041090523833357, 0.4041090523833357, 0.1957629970449719, 0.1957629970449719, 0.1957629970449719, 0.3610425055589135, 0.3610425055589135, 0.3610425055589135, 0.38616164742566916, 0.38616164742566916, 0.38616164742566916, 0.4595183308180957, 0.4595183308180957, 0.4595183308180957, 0.26148353287971327, 0.26148353287971327, 0.26148353287971327, 0.19550145793223328, 0.19550145793223328, 0.19550145793223328, 0.22076665612963864, 0.22076665612963864, 0.22076665612963864, 0.2232270527492738, 0.2232270527492738, 0.2232270527492738, 0.2349765614248448, 0.2349765614248448, 0.2349765614248448, 0.22373409266563082, 0.22373409266563082, 0.22373409266563082, 0.24306101131840674, 0.24306101131840674, 0.24306101131840674, 0.2202355724672358, 0.2202355724672358, 0.2202355724672358, 0.20400191617781316, 0.20400191617781316, 0.20400191617781316, 0.8851415328735894, 0.8851415328735894, 0.8851415328735894, 0.886010339109647, 0.886010339109647, 0.886010339109647, 0.14196708102538547, 0.14196708102538547, 0.14196708102538547, 0.6530363697661574, 0.6530363697661574, 0.6530363697661574, 0.2806290125472779, 0.2806290125472779, 0.2806290125472779, 0.104381270167199, 0.104381270167199, 0.104381270167199, 0.18740031535217871, 0.18740031535217871, 0.18740031535217871, 0.17078170859939523, 0.17078170859939523, 0.17078170859939523, 0.175373728264949, 0.175373728264949, 0.175373728264949, 0.1041622422441908, 0.1041622422441908, 0.1041622422441908, 0.09960321644928549, 0.09960321644928549, 0.09960321644928549, 0.08319722575062061, 0.08319722575062061, 0.08319722575062061]}, "mutation_prompt": null}
{"id": "81f2372b-7468-41e2-9aff-10b64c7370cf", "solution": "import numpy as np\n\nclass OptimizedEntropyGuidedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.diversity_threshold = 0.5\n        self.global_learning_rate = 0.1  # New parameter for direct global learning\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        def calculate_entropy(population):\n            hist, _ = np.histogramdd(population, bins=10, range=[self.bounds]*self.dim)\n            prob = hist / np.sum(hist)\n            prob = prob[prob > 0]\n            return -np.sum(prob * np.log2(prob))\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            entropy = calculate_entropy(position)\n            self.inertia_weight = 0.9 if entropy < self.diversity_threshold else 0.5\n\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n\n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n\n                # Direct global learning step to diversify search\n                position[i] = position[i] + self.global_learning_rate * (global_best_position - position[i])\n                position[i] = clip_to_bounds(position[i])\n\n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "OptimizedEntropyGuidedPSO", "description": "Optimized Entropy-Guided PSO with Adaptive Mutation and Enhanced Global Learning for improved convergence efficiency.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c8d1d3d3-e2cc-4437-812e-8baf29fde249", "metadata": {"aucs": [0.7712057075444108, 0.7712057075444108, 0.7712057075444108, 0.7825078419690499, 0.7825078419690499, 0.7825078419690499, 0.7397775500797703, 0.7397775500797703, 0.7397775500797703, 0.45173332311630954, 0.45173332311630954, 0.45173332311630954, 0.47148379540446916, 0.47148379540446916, 0.47148379540446916, 0.48711153322072265, 0.48711153322072265, 0.48711153322072265, 0.11767800852198984, 0.11767800852198984, 0.11767800852198984, 0.16739192456947516, 0.16739192456947516, 0.16739192456947516, 0.11746493585124262, 0.11746493585124262, 0.11746493585124262, 0.13274776495461516, 0.13274776495461516, 0.13274776495461516, 0.13811936470128916, 0.13811936470128916, 0.13811936470128916, 0.12698859603412815, 0.12698859603412815, 0.12698859603412815, 0.9770089849461173, 0.9770089849461173, 0.9770089849461173, 0.9755652967253036, 0.9755652967253036, 0.9755652967253036, 0.9780619493665681, 0.9780619493665681, 0.9780619493665681, 0.46928016457087596, 0.46928016457087596, 0.46928016457087596, 0.42827192935630454, 0.42827192935630454, 0.42827192935630454, 0.12195323309221207, 0.12195323309221207, 0.12195323309221207, 0.20793824382550652, 0.20793824382550652, 0.20793824382550652, 0.21397593421445416, 0.21397593421445416, 0.21397593421445416, 0.2336714680592804, 0.2336714680592804, 0.2336714680592804, 0.128509017001593, 0.128509017001593, 0.128509017001593, 0.10171614788176975, 0.10171614788176975, 0.10171614788176975, 0.20115231687772506, 0.20115231687772506, 0.20115231687772506, 0.23401686718285042, 0.23401686718285042, 0.23401686718285042, 0.1982716770363533, 0.1982716770363533, 0.1982716770363533, 0.2365456739364502, 0.2365456739364502, 0.2365456739364502, 0.0020234154790769177, 0.0020234154790769177, 0.0020234154790769177, 0.02998466147304024, 0.02998466147304024, 0.02998466147304024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10824862694829951, 0.10824862694829951, 0.10824862694829951, 0.07978843534126168, 0.07978843534126168, 0.07978843534126168, 0.05191535400080616, 0.05191535400080616, 0.05191535400080616, 0.04040066307692247, 0.04040066307692247, 0.04040066307692247, 0.13224256041652882, 0.13224256041652882, 0.13224256041652882, 0.13974955375173537, 0.13974955375173537, 0.13974955375173537, 0.06543773755020521, 0.06543773755020521, 0.06543773755020521, 0.1138952082729282, 0.1138952082729282, 0.1138952082729282, 0.07932593302876811, 0.07932593302876811, 0.07932593302876811, 0.5241890507147893, 0.5241890507147893, 0.5241890507147893, 0.5184584023571028, 0.5184584023571028, 0.5184584023571028, 0.5359412316658929, 0.5359412316658929, 0.5359412316658929, 0.0977272714742774, 0.0977272714742774, 0.0977272714742774, 0.1414335414050344, 0.1414335414050344, 0.1414335414050344, 0.11199446686938497, 0.11199446686938497, 0.11199446686938497, 0.19406980541596097, 0.19406980541596097, 0.19406980541596097, 0.4041090523833357, 0.4041090523833357, 0.4041090523833357, 0.1957629970449719, 0.1957629970449719, 0.1957629970449719, 0.3610425055589135, 0.3610425055589135, 0.3610425055589135, 0.38616164742566916, 0.38616164742566916, 0.38616164742566916, 0.4595183308180957, 0.4595183308180957, 0.4595183308180957, 0.26148353287971327, 0.26148353287971327, 0.26148353287971327, 0.19550145793223328, 0.19550145793223328, 0.19550145793223328, 0.22076665612963864, 0.22076665612963864, 0.22076665612963864, 0.2232270527492738, 0.2232270527492738, 0.2232270527492738, 0.2349765614248448, 0.2349765614248448, 0.2349765614248448, 0.22373409266563082, 0.22373409266563082, 0.22373409266563082, 0.24306101131840674, 0.24306101131840674, 0.24306101131840674, 0.2202355724672358, 0.2202355724672358, 0.2202355724672358, 0.20400191617781316, 0.20400191617781316, 0.20400191617781316, 0.8851415328735894, 0.8851415328735894, 0.8851415328735894, 0.886010339109647, 0.886010339109647, 0.886010339109647, 0.14196708102538547, 0.14196708102538547, 0.14196708102538547, 0.6530363697661574, 0.6530363697661574, 0.6530363697661574, 0.2806290125472779, 0.2806290125472779, 0.2806290125472779, 0.104381270167199, 0.104381270167199, 0.104381270167199, 0.18740031535217871, 0.18740031535217871, 0.18740031535217871, 0.17078170859939523, 0.17078170859939523, 0.17078170859939523, 0.175373728264949, 0.175373728264949, 0.175373728264949, 0.1041622422441908, 0.1041622422441908, 0.1041622422441908, 0.09960321644928549, 0.09960321644928549, 0.09960321644928549, 0.08319722575062061, 0.08319722575062061, 0.08319722575062061]}, "mutation_prompt": null}
{"id": "a215605c-62d3-4157-a9b5-d87dd4063261", "solution": "import numpy as np\n\nclass OptimizedEntropyGuidedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.diversity_threshold = 0.5\n        self.global_learning_rate = 0.1  # New parameter for direct global learning\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        def calculate_entropy(population):\n            hist, _ = np.histogramdd(population, bins=10, range=[self.bounds]*self.dim)\n            prob = hist / np.sum(hist)\n            prob = prob[prob > 0]\n            return -np.sum(prob * np.log2(prob))\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            entropy = calculate_entropy(position)\n            self.inertia_weight = 0.9 if entropy < self.diversity_threshold else 0.5\n\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n\n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n\n                # Direct global learning step to diversify search\n                position[i] = position[i] + self.global_learning_rate * (global_best_position - position[i])\n                position[i] = clip_to_bounds(position[i])\n\n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "OptimizedEntropyGuidedPSO", "description": "Optimized Entropy-Guided PSO with Adaptive Mutation and Enhanced Global Learning for improved convergence efficiency.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c8d1d3d3-e2cc-4437-812e-8baf29fde249", "metadata": {"aucs": [0.7712057075444108, 0.7712057075444108, 0.7712057075444108, 0.7825078419690499, 0.7825078419690499, 0.7825078419690499, 0.7397775500797703, 0.7397775500797703, 0.7397775500797703, 0.45173332311630954, 0.45173332311630954, 0.45173332311630954, 0.47148379540446916, 0.47148379540446916, 0.47148379540446916, 0.48711153322072265, 0.48711153322072265, 0.48711153322072265, 0.11767800852198984, 0.11767800852198984, 0.11767800852198984, 0.16739192456947516, 0.16739192456947516, 0.16739192456947516, 0.11746493585124262, 0.11746493585124262, 0.11746493585124262, 0.13274776495461516, 0.13274776495461516, 0.13274776495461516, 0.13811936470128916, 0.13811936470128916, 0.13811936470128916, 0.12698859603412815, 0.12698859603412815, 0.12698859603412815, 0.9770089849461173, 0.9770089849461173, 0.9770089849461173, 0.9755652967253036, 0.9755652967253036, 0.9755652967253036, 0.9780619493665681, 0.9780619493665681, 0.9780619493665681, 0.46928016457087596, 0.46928016457087596, 0.46928016457087596, 0.42827192935630454, 0.42827192935630454, 0.42827192935630454, 0.12195323309221207, 0.12195323309221207, 0.12195323309221207, 0.20793824382550652, 0.20793824382550652, 0.20793824382550652, 0.21397593421445416, 0.21397593421445416, 0.21397593421445416, 0.2336714680592804, 0.2336714680592804, 0.2336714680592804, 0.128509017001593, 0.128509017001593, 0.128509017001593, 0.10171614788176975, 0.10171614788176975, 0.10171614788176975, 0.20115231687772506, 0.20115231687772506, 0.20115231687772506, 0.23401686718285042, 0.23401686718285042, 0.23401686718285042, 0.1982716770363533, 0.1982716770363533, 0.1982716770363533, 0.2365456739364502, 0.2365456739364502, 0.2365456739364502, 0.0020234154790769177, 0.0020234154790769177, 0.0020234154790769177, 0.02998466147304024, 0.02998466147304024, 0.02998466147304024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10824862694829951, 0.10824862694829951, 0.10824862694829951, 0.07978843534126168, 0.07978843534126168, 0.07978843534126168, 0.05191535400080616, 0.05191535400080616, 0.05191535400080616, 0.04040066307692247, 0.04040066307692247, 0.04040066307692247, 0.13224256041652882, 0.13224256041652882, 0.13224256041652882, 0.13974955375173537, 0.13974955375173537, 0.13974955375173537, 0.06543773755020521, 0.06543773755020521, 0.06543773755020521, 0.1138952082729282, 0.1138952082729282, 0.1138952082729282, 0.07932593302876811, 0.07932593302876811, 0.07932593302876811, 0.5241890507147893, 0.5241890507147893, 0.5241890507147893, 0.5184584023571028, 0.5184584023571028, 0.5184584023571028, 0.5359412316658929, 0.5359412316658929, 0.5359412316658929, 0.0977272714742774, 0.0977272714742774, 0.0977272714742774, 0.1414335414050344, 0.1414335414050344, 0.1414335414050344, 0.11199446686938497, 0.11199446686938497, 0.11199446686938497, 0.19406980541596097, 0.19406980541596097, 0.19406980541596097, 0.4041090523833357, 0.4041090523833357, 0.4041090523833357, 0.1957629970449719, 0.1957629970449719, 0.1957629970449719, 0.3610425055589135, 0.3610425055589135, 0.3610425055589135, 0.38616164742566916, 0.38616164742566916, 0.38616164742566916, 0.4595183308180957, 0.4595183308180957, 0.4595183308180957, 0.26148353287971327, 0.26148353287971327, 0.26148353287971327, 0.19550145793223328, 0.19550145793223328, 0.19550145793223328, 0.22076665612963864, 0.22076665612963864, 0.22076665612963864, 0.2232270527492738, 0.2232270527492738, 0.2232270527492738, 0.2349765614248448, 0.2349765614248448, 0.2349765614248448, 0.22373409266563082, 0.22373409266563082, 0.22373409266563082, 0.24306101131840674, 0.24306101131840674, 0.24306101131840674, 0.2202355724672358, 0.2202355724672358, 0.2202355724672358, 0.20400191617781316, 0.20400191617781316, 0.20400191617781316, 0.8851415328735894, 0.8851415328735894, 0.8851415328735894, 0.886010339109647, 0.886010339109647, 0.886010339109647, 0.14196708102538547, 0.14196708102538547, 0.14196708102538547, 0.6530363697661574, 0.6530363697661574, 0.6530363697661574, 0.2806290125472779, 0.2806290125472779, 0.2806290125472779, 0.104381270167199, 0.104381270167199, 0.104381270167199, 0.18740031535217871, 0.18740031535217871, 0.18740031535217871, 0.17078170859939523, 0.17078170859939523, 0.17078170859939523, 0.175373728264949, 0.175373728264949, 0.175373728264949, 0.1041622422441908, 0.1041622422441908, 0.1041622422441908, 0.09960321644928549, 0.09960321644928549, 0.09960321644928549, 0.08319722575062061, 0.08319722575062061, 0.08319722575062061]}, "mutation_prompt": null}
{"id": "3d51221c-b253-47d3-a314-6a423c25a1a9", "solution": "import numpy as np\n\nclass OptimizedEntropyGuidedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.diversity_threshold = 0.5\n        self.global_learning_rate = 0.1  # New parameter for direct global learning\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        def calculate_entropy(population):\n            hist, _ = np.histogramdd(population, bins=10, range=[self.bounds]*self.dim)\n            prob = hist / np.sum(hist)\n            prob = prob[prob > 0]\n            return -np.sum(prob * np.log2(prob))\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            entropy = calculate_entropy(position)\n            self.inertia_weight = 0.9 if entropy < self.diversity_threshold else 0.5\n\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n\n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n\n                # Direct global learning step to diversify search\n                position[i] = position[i] + self.global_learning_rate * (global_best_position - position[i])\n                position[i] = clip_to_bounds(position[i])\n\n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "OptimizedEntropyGuidedPSO", "description": "Optimized Entropy-Guided PSO with Adaptive Mutation and Enhanced Global Learning for improved convergence efficiency.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c8d1d3d3-e2cc-4437-812e-8baf29fde249", "metadata": {"aucs": [0.7712057075444108, 0.7712057075444108, 0.7712057075444108, 0.7825078419690499, 0.7825078419690499, 0.7825078419690499, 0.7397775500797703, 0.7397775500797703, 0.7397775500797703, 0.45173332311630954, 0.45173332311630954, 0.45173332311630954, 0.47148379540446916, 0.47148379540446916, 0.47148379540446916, 0.48711153322072265, 0.48711153322072265, 0.48711153322072265, 0.11767800852198984, 0.11767800852198984, 0.11767800852198984, 0.16739192456947516, 0.16739192456947516, 0.16739192456947516, 0.11746493585124262, 0.11746493585124262, 0.11746493585124262, 0.13274776495461516, 0.13274776495461516, 0.13274776495461516, 0.13811936470128916, 0.13811936470128916, 0.13811936470128916, 0.12698859603412815, 0.12698859603412815, 0.12698859603412815, 0.9770089849461173, 0.9770089849461173, 0.9770089849461173, 0.9755652967253036, 0.9755652967253036, 0.9755652967253036, 0.9780619493665681, 0.9780619493665681, 0.9780619493665681, 0.46928016457087596, 0.46928016457087596, 0.46928016457087596, 0.42827192935630454, 0.42827192935630454, 0.42827192935630454, 0.12195323309221207, 0.12195323309221207, 0.12195323309221207, 0.20793824382550652, 0.20793824382550652, 0.20793824382550652, 0.21397593421445416, 0.21397593421445416, 0.21397593421445416, 0.2336714680592804, 0.2336714680592804, 0.2336714680592804, 0.128509017001593, 0.128509017001593, 0.128509017001593, 0.10171614788176975, 0.10171614788176975, 0.10171614788176975, 0.20115231687772506, 0.20115231687772506, 0.20115231687772506, 0.23401686718285042, 0.23401686718285042, 0.23401686718285042, 0.1982716770363533, 0.1982716770363533, 0.1982716770363533, 0.2365456739364502, 0.2365456739364502, 0.2365456739364502, 0.0020234154790769177, 0.0020234154790769177, 0.0020234154790769177, 0.02998466147304024, 0.02998466147304024, 0.02998466147304024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10824862694829951, 0.10824862694829951, 0.10824862694829951, 0.07978843534126168, 0.07978843534126168, 0.07978843534126168, 0.05191535400080616, 0.05191535400080616, 0.05191535400080616, 0.04040066307692247, 0.04040066307692247, 0.04040066307692247, 0.13224256041652882, 0.13224256041652882, 0.13224256041652882, 0.13974955375173537, 0.13974955375173537, 0.13974955375173537, 0.06543773755020521, 0.06543773755020521, 0.06543773755020521, 0.1138952082729282, 0.1138952082729282, 0.1138952082729282, 0.07932593302876811, 0.07932593302876811, 0.07932593302876811, 0.5241890507147893, 0.5241890507147893, 0.5241890507147893, 0.5184584023571028, 0.5184584023571028, 0.5184584023571028, 0.5359412316658929, 0.5359412316658929, 0.5359412316658929, 0.0977272714742774, 0.0977272714742774, 0.0977272714742774, 0.1414335414050344, 0.1414335414050344, 0.1414335414050344, 0.11199446686938497, 0.11199446686938497, 0.11199446686938497, 0.19406980541596097, 0.19406980541596097, 0.19406980541596097, 0.4041090523833357, 0.4041090523833357, 0.4041090523833357, 0.1957629970449719, 0.1957629970449719, 0.1957629970449719, 0.3610425055589135, 0.3610425055589135, 0.3610425055589135, 0.38616164742566916, 0.38616164742566916, 0.38616164742566916, 0.4595183308180957, 0.4595183308180957, 0.4595183308180957, 0.26148353287971327, 0.26148353287971327, 0.26148353287971327, 0.19550145793223328, 0.19550145793223328, 0.19550145793223328, 0.22076665612963864, 0.22076665612963864, 0.22076665612963864, 0.2232270527492738, 0.2232270527492738, 0.2232270527492738, 0.2349765614248448, 0.2349765614248448, 0.2349765614248448, 0.22373409266563082, 0.22373409266563082, 0.22373409266563082, 0.24306101131840674, 0.24306101131840674, 0.24306101131840674, 0.2202355724672358, 0.2202355724672358, 0.2202355724672358, 0.20400191617781316, 0.20400191617781316, 0.20400191617781316, 0.8851415328735894, 0.8851415328735894, 0.8851415328735894, 0.886010339109647, 0.886010339109647, 0.886010339109647, 0.14196708102538547, 0.14196708102538547, 0.14196708102538547, 0.6530363697661574, 0.6530363697661574, 0.6530363697661574, 0.2806290125472779, 0.2806290125472779, 0.2806290125472779, 0.104381270167199, 0.104381270167199, 0.104381270167199, 0.18740031535217871, 0.18740031535217871, 0.18740031535217871, 0.17078170859939523, 0.17078170859939523, 0.17078170859939523, 0.175373728264949, 0.175373728264949, 0.175373728264949, 0.1041622422441908, 0.1041622422441908, 0.1041622422441908, 0.09960321644928549, 0.09960321644928549, 0.09960321644928549, 0.08319722575062061, 0.08319722575062061, 0.08319722575062061]}, "mutation_prompt": null}
{"id": "2fc31d31-d842-4892-8862-7c35db8d709e", "solution": "import numpy as np\n\nclass OptimizedEntropyGuidedPSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.diversity_threshold = 0.5\n        self.global_learning_rate = 0.1  # New parameter for direct global learning\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        def calculate_entropy(population):\n            hist, _ = np.histogramdd(population, bins=10, range=[self.bounds]*self.dim)\n            prob = hist / np.sum(hist)\n            prob = prob[prob > 0]\n            return -np.sum(prob * np.log2(prob))\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            entropy = calculate_entropy(position)\n            self.inertia_weight = 0.9 if entropy < self.diversity_threshold else 0.5\n\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            for i in range(self.population_size):\n                a, b, c = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = position[a] + self.mutation_factor * (position[b] - position[c])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n\n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n\n                # Direct global learning step to diversify search\n                position[i] = position[i] + self.global_learning_rate * (global_best_position - position[i])\n                position[i] = clip_to_bounds(position[i])\n\n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "OptimizedEntropyGuidedPSO", "description": "Optimized Entropy-Guided PSO with Adaptive Mutation and Enhanced Global Learning for improved convergence efficiency.", "configspace": "", "generation": 77, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c8d1d3d3-e2cc-4437-812e-8baf29fde249", "metadata": {"aucs": [0.7712057075444108, 0.7712057075444108, 0.7712057075444108, 0.7825078419690499, 0.7825078419690499, 0.7825078419690499, 0.7397775500797703, 0.7397775500797703, 0.7397775500797703, 0.45173332311630954, 0.45173332311630954, 0.45173332311630954, 0.47148379540446916, 0.47148379540446916, 0.47148379540446916, 0.48711153322072265, 0.48711153322072265, 0.48711153322072265, 0.11767800852198984, 0.11767800852198984, 0.11767800852198984, 0.16739192456947516, 0.16739192456947516, 0.16739192456947516, 0.11746493585124262, 0.11746493585124262, 0.11746493585124262, 0.13274776495461516, 0.13274776495461516, 0.13274776495461516, 0.13811936470128916, 0.13811936470128916, 0.13811936470128916, 0.12698859603412815, 0.12698859603412815, 0.12698859603412815, 0.9770089849461173, 0.9770089849461173, 0.9770089849461173, 0.9755652967253036, 0.9755652967253036, 0.9755652967253036, 0.9780619493665681, 0.9780619493665681, 0.9780619493665681, 0.46928016457087596, 0.46928016457087596, 0.46928016457087596, 0.42827192935630454, 0.42827192935630454, 0.42827192935630454, 0.12195323309221207, 0.12195323309221207, 0.12195323309221207, 0.20793824382550652, 0.20793824382550652, 0.20793824382550652, 0.21397593421445416, 0.21397593421445416, 0.21397593421445416, 0.2336714680592804, 0.2336714680592804, 0.2336714680592804, 0.128509017001593, 0.128509017001593, 0.128509017001593, 0.10171614788176975, 0.10171614788176975, 0.10171614788176975, 0.20115231687772506, 0.20115231687772506, 0.20115231687772506, 0.23401686718285042, 0.23401686718285042, 0.23401686718285042, 0.1982716770363533, 0.1982716770363533, 0.1982716770363533, 0.2365456739364502, 0.2365456739364502, 0.2365456739364502, 0.0020234154790769177, 0.0020234154790769177, 0.0020234154790769177, 0.02998466147304024, 0.02998466147304024, 0.02998466147304024, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10824862694829951, 0.10824862694829951, 0.10824862694829951, 0.07978843534126168, 0.07978843534126168, 0.07978843534126168, 0.05191535400080616, 0.05191535400080616, 0.05191535400080616, 0.04040066307692247, 0.04040066307692247, 0.04040066307692247, 0.13224256041652882, 0.13224256041652882, 0.13224256041652882, 0.13974955375173537, 0.13974955375173537, 0.13974955375173537, 0.06543773755020521, 0.06543773755020521, 0.06543773755020521, 0.1138952082729282, 0.1138952082729282, 0.1138952082729282, 0.07932593302876811, 0.07932593302876811, 0.07932593302876811, 0.5241890507147893, 0.5241890507147893, 0.5241890507147893, 0.5184584023571028, 0.5184584023571028, 0.5184584023571028, 0.5359412316658929, 0.5359412316658929, 0.5359412316658929, 0.0977272714742774, 0.0977272714742774, 0.0977272714742774, 0.1414335414050344, 0.1414335414050344, 0.1414335414050344, 0.11199446686938497, 0.11199446686938497, 0.11199446686938497, 0.19406980541596097, 0.19406980541596097, 0.19406980541596097, 0.4041090523833357, 0.4041090523833357, 0.4041090523833357, 0.1957629970449719, 0.1957629970449719, 0.1957629970449719, 0.3610425055589135, 0.3610425055589135, 0.3610425055589135, 0.38616164742566916, 0.38616164742566916, 0.38616164742566916, 0.4595183308180957, 0.4595183308180957, 0.4595183308180957, 0.26148353287971327, 0.26148353287971327, 0.26148353287971327, 0.19550145793223328, 0.19550145793223328, 0.19550145793223328, 0.22076665612963864, 0.22076665612963864, 0.22076665612963864, 0.2232270527492738, 0.2232270527492738, 0.2232270527492738, 0.2349765614248448, 0.2349765614248448, 0.2349765614248448, 0.22373409266563082, 0.22373409266563082, 0.22373409266563082, 0.24306101131840674, 0.24306101131840674, 0.24306101131840674, 0.2202355724672358, 0.2202355724672358, 0.2202355724672358, 0.20400191617781316, 0.20400191617781316, 0.20400191617781316, 0.8851415328735894, 0.8851415328735894, 0.8851415328735894, 0.886010339109647, 0.886010339109647, 0.886010339109647, 0.14196708102538547, 0.14196708102538547, 0.14196708102538547, 0.6530363697661574, 0.6530363697661574, 0.6530363697661574, 0.2806290125472779, 0.2806290125472779, 0.2806290125472779, 0.104381270167199, 0.104381270167199, 0.104381270167199, 0.18740031535217871, 0.18740031535217871, 0.18740031535217871, 0.17078170859939523, 0.17078170859939523, 0.17078170859939523, 0.175373728264949, 0.175373728264949, 0.175373728264949, 0.1041622422441908, 0.1041622422441908, 0.1041622422441908, 0.09960321644928549, 0.09960321644928549, 0.09960321644928549, 0.08319722575062061, 0.08319722575062061, 0.08319722575062061]}, "mutation_prompt": null}
{"id": "e7def86d-4247-44d2-b083-41fbfc2c2f40", "solution": "import numpy as np\n\nclass EnhancedPSOWithAdaptiveNeighborhood:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.diversity_threshold = 0.5\n        self.global_learning_rate = 0.1\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        def calculate_entropy(population):\n            hist, _ = np.histogramdd(population, bins=10, range=[self.bounds]*self.dim)\n            prob = hist / np.sum(hist)\n            prob = prob[prob > 0]\n            return -np.sum(prob * np.log2(prob))\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            entropy = calculate_entropy(position)\n            self.inertia_weight = 0.9 if entropy < self.diversity_threshold else 0.6\n\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Introduce adaptive neighborhood mutation\n            for i in range(self.population_size):\n                neighbors = np.random.choice(self.population_size, 5, replace=False)\n                best_in_neighborhood = min(neighbors, key=lambda x: personal_best_value[x])\n                mutant_vector = position[i] + self.mutation_factor * (position[best_in_neighborhood] - position[i])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n\n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n\n                position[i] = position[i] + self.global_learning_rate * (global_best_position - position[i])\n                position[i] = clip_to_bounds(position[i])\n\n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "EnhancedPSOWithAdaptiveNeighborhood", "description": "Enhanced PSO with Adaptive Neighborhood Mutation and Variable Inertia for improved global exploration and convergence.", "configspace": "", "generation": 85, "fitness": 0.29663702112736623, "feedback": "The algorithm EnhancedPSOWithAdaptiveNeighborhood got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.26.", "error": "", "parent_id": "c8d1d3d3-e2cc-4437-812e-8baf29fde249", "metadata": {"aucs": [0.68566730301758, 0.68566730301758, 0.68566730301758, 0.6683849121689771, 0.6683849121689771, 0.6683849121689771, 0.7184852199946317, 0.7184852199946317, 0.7184852199946317, 0.42016249096978275, 0.42016249096978275, 0.42016249096978275, 0.3789949280978385, 0.3789949280978385, 0.3789949280978385, 0.31063862507293316, 0.31063862507293316, 0.31063862507293316, 0.11793426626360592, 0.11793426626360592, 0.11793426626360592, 0.13626837265791492, 0.13626837265791492, 0.13626837265791492, 0.09015677269328148, 0.09015677269328148, 0.09015677269328148, 0.09766719128125101, 0.09766719128125101, 0.09766719128125101, 0.12224835552744029, 0.12224835552744029, 0.12224835552744029, 0.11917196754318626, 0.11917196754318626, 0.11917196754318626, 0.9777826227175841, 0.9777826227175841, 0.9777826227175841, 0.9589776288602316, 0.9589776288602316, 0.9589776288602316, 0.9692142423924607, 0.9692142423924607, 0.9692142423924607, 0.5075166511695275, 0.5075166511695275, 0.5075166511695275, 0.15002939104435353, 0.15002939104435353, 0.15002939104435353, 0.12438408178690186, 0.12438408178690186, 0.12438408178690186, 0.22714083724122636, 0.22714083724122636, 0.22714083724122636, 0.1940552305185521, 0.1940552305185521, 0.1940552305185521, 0.8333061597562582, 0.8333061597562582, 0.8333061597562582, 0.22155441664744646, 0.22155441664744646, 0.22155441664744646, 0.10459600708607852, 0.10459600708607852, 0.10459600708607852, 0.23810749205460946, 0.23810749205460946, 0.23810749205460946, 0.22467052604386395, 0.22467052604386395, 0.22467052604386395, 0.23887518966472143, 0.23887518966472143, 0.23887518966472143, 0.2686200255881551, 0.2686200255881551, 0.2686200255881551, 0.002061941921216559, 0.002061941921216559, 0.002061941921216559, 0.040136608317347444, 0.040136608317347444, 0.040136608317347444, 0.010221537205343467, 0.010221537205343467, 0.010221537205343467, 0.1014516655093275, 0.1014516655093275, 0.1014516655093275, 0.0843305261775047, 0.0843305261775047, 0.0843305261775047, 0.022699015503935493, 0.022699015503935493, 0.022699015503935493, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06952445544094266, 0.06952445544094266, 0.06952445544094266, 0.11366050800637384, 0.11366050800637384, 0.11366050800637384, 0.11747136402862457, 0.11747136402862457, 0.11747136402862457, 0.13707282434889023, 0.13707282434889023, 0.13707282434889023, 0.06252066377423837, 0.06252066377423837, 0.06252066377423837, 0.5016289666358137, 0.5016289666358137, 0.5016289666358137, 0.5412011237631182, 0.5412011237631182, 0.5412011237631182, 0.5312180192048153, 0.5312180192048153, 0.5312180192048153, 0.12694573746218962, 0.12694573746218962, 0.12694573746218962, 0.15031329792289638, 0.15031329792289638, 0.15031329792289638, 0.18255324258494832, 0.18255324258494832, 0.18255324258494832, 0.18741063752086284, 0.18741063752086284, 0.18741063752086284, 0.22268497828334355, 0.22268497828334355, 0.22268497828334355, 0.410322548010299, 0.410322548010299, 0.410322548010299, 0.31160370035305474, 0.31160370035305474, 0.31160370035305474, 0.32387676794780706, 0.32387676794780706, 0.32387676794780706, 0.46994661064588106, 0.46994661064588106, 0.46994661064588106, 0.2712879784069877, 0.2712879784069877, 0.2712879784069877, 0.2766992718980147, 0.2766992718980147, 0.2766992718980147, 0.30573937656297656, 0.30573937656297656, 0.30573937656297656, 0.23832582837160432, 0.23832582837160432, 0.23832582837160432, 0.21318138086599947, 0.21318138086599947, 0.21318138086599947, 0.23300427018168823, 0.23300427018168823, 0.23300427018168823, 0.19284293287691767, 0.19284293287691767, 0.19284293287691767, 0.24723251805601842, 0.24723251805601842, 0.24723251805601842, 0.2224570034194, 0.2224570034194, 0.2224570034194, 0.8766533011024538, 0.8766533011024538, 0.8766533011024538, 0.8720695286995156, 0.8720695286995156, 0.8720695286995156, 0.11917139052420267, 0.11917139052420267, 0.11917139052420267, 0.8465422151946049, 0.8465422151946049, 0.8465422151946049, 0.6463458083153177, 0.6463458083153177, 0.6463458083153177, 0.10357477243183622, 0.10357477243183622, 0.10357477243183622, 0.2088659358275543, 0.2088659358275543, 0.2088659358275543, 0.18668862282201226, 0.18668862282201226, 0.18668862282201226, 0.19361150685855122, 0.19361150685855122, 0.19361150685855122, 0.09922575575528603, 0.09922575575528603, 0.09922575575528603, 0.10043022823335601, 0.10043022823335601, 0.10043022823335601, 0.07834824633690152, 0.07834824633690152, 0.07834824633690152]}, "mutation_prompt": null}
{"id": "80c03c38-e64b-40f6-a30b-3256f6e3df57", "solution": "import numpy as np\n\nclass EnhancedPSOWithAdaptiveNeighborhood:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.diversity_threshold = 0.5\n        self.global_learning_rate = 0.1\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        def calculate_entropy(population):\n            hist, _ = np.histogramdd(population, bins=10, range=[self.bounds]*self.dim)\n            prob = hist / np.sum(hist)\n            prob = prob[prob > 0]\n            return -np.sum(prob * np.log2(prob))\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            entropy = calculate_entropy(position)\n            self.inertia_weight = 0.9 if entropy < self.diversity_threshold else 0.6\n\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Introduce adaptive neighborhood mutation\n            for i in range(self.population_size):\n                neighbors = np.random.choice(self.population_size, 5, replace=False)\n                best_in_neighborhood = min(neighbors, key=lambda x: personal_best_value[x])\n                mutant_vector = position[i] + self.mutation_factor * (position[best_in_neighborhood] - position[i])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n\n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n\n                position[i] = position[i] + self.global_learning_rate * (global_best_position - position[i])\n                position[i] = clip_to_bounds(position[i])\n\n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "EnhancedPSOWithAdaptiveNeighborhood", "description": "Enhanced PSO with Adaptive Neighborhood Mutation and Variable Inertia for improved global exploration and convergence.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e7def86d-4247-44d2-b083-41fbfc2c2f40", "metadata": {"aucs": [0.68566730301758, 0.68566730301758, 0.68566730301758, 0.6683849121689771, 0.6683849121689771, 0.6683849121689771, 0.7184852199946317, 0.7184852199946317, 0.7184852199946317, 0.42016249096978275, 0.42016249096978275, 0.42016249096978275, 0.3789949280978385, 0.3789949280978385, 0.3789949280978385, 0.31063862507293316, 0.31063862507293316, 0.31063862507293316, 0.11793426626360592, 0.11793426626360592, 0.11793426626360592, 0.13626837265791492, 0.13626837265791492, 0.13626837265791492, 0.09015677269328148, 0.09015677269328148, 0.09015677269328148, 0.09766719128125101, 0.09766719128125101, 0.09766719128125101, 0.12224835552744029, 0.12224835552744029, 0.12224835552744029, 0.11917196754318626, 0.11917196754318626, 0.11917196754318626, 0.9777826227175841, 0.9777826227175841, 0.9777826227175841, 0.9589776288602316, 0.9589776288602316, 0.9589776288602316, 0.9692142423924607, 0.9692142423924607, 0.9692142423924607, 0.5075166511695275, 0.5075166511695275, 0.5075166511695275, 0.15002939104435353, 0.15002939104435353, 0.15002939104435353, 0.12438408178690186, 0.12438408178690186, 0.12438408178690186, 0.22714083724122636, 0.22714083724122636, 0.22714083724122636, 0.1940552305185521, 0.1940552305185521, 0.1940552305185521, 0.8333061597562582, 0.8333061597562582, 0.8333061597562582, 0.22155441664744646, 0.22155441664744646, 0.22155441664744646, 0.10459600708607852, 0.10459600708607852, 0.10459600708607852, 0.23810749205460946, 0.23810749205460946, 0.23810749205460946, 0.22467052604386395, 0.22467052604386395, 0.22467052604386395, 0.23887518966472143, 0.23887518966472143, 0.23887518966472143, 0.2686200255881551, 0.2686200255881551, 0.2686200255881551, 0.002061941921216559, 0.002061941921216559, 0.002061941921216559, 0.040136608317347444, 0.040136608317347444, 0.040136608317347444, 0.010221537205343467, 0.010221537205343467, 0.010221537205343467, 0.1014516655093275, 0.1014516655093275, 0.1014516655093275, 0.0843305261775047, 0.0843305261775047, 0.0843305261775047, 0.022699015503935493, 0.022699015503935493, 0.022699015503935493, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06952445544094266, 0.06952445544094266, 0.06952445544094266, 0.11366050800637384, 0.11366050800637384, 0.11366050800637384, 0.11747136402862457, 0.11747136402862457, 0.11747136402862457, 0.13707282434889023, 0.13707282434889023, 0.13707282434889023, 0.06252066377423837, 0.06252066377423837, 0.06252066377423837, 0.5016289666358137, 0.5016289666358137, 0.5016289666358137, 0.5412011237631182, 0.5412011237631182, 0.5412011237631182, 0.5312180192048153, 0.5312180192048153, 0.5312180192048153, 0.12694573746218962, 0.12694573746218962, 0.12694573746218962, 0.15031329792289638, 0.15031329792289638, 0.15031329792289638, 0.18255324258494832, 0.18255324258494832, 0.18255324258494832, 0.18741063752086284, 0.18741063752086284, 0.18741063752086284, 0.22268497828334355, 0.22268497828334355, 0.22268497828334355, 0.410322548010299, 0.410322548010299, 0.410322548010299, 0.31160370035305474, 0.31160370035305474, 0.31160370035305474, 0.32387676794780706, 0.32387676794780706, 0.32387676794780706, 0.46994661064588106, 0.46994661064588106, 0.46994661064588106, 0.2712879784069877, 0.2712879784069877, 0.2712879784069877, 0.2766992718980147, 0.2766992718980147, 0.2766992718980147, 0.30573937656297656, 0.30573937656297656, 0.30573937656297656, 0.23832582837160432, 0.23832582837160432, 0.23832582837160432, 0.21318138086599947, 0.21318138086599947, 0.21318138086599947, 0.23300427018168823, 0.23300427018168823, 0.23300427018168823, 0.19284293287691767, 0.19284293287691767, 0.19284293287691767, 0.24723251805601842, 0.24723251805601842, 0.24723251805601842, 0.2224570034194, 0.2224570034194, 0.2224570034194, 0.8766533011024538, 0.8766533011024538, 0.8766533011024538, 0.8720695286995156, 0.8720695286995156, 0.8720695286995156, 0.11917139052420267, 0.11917139052420267, 0.11917139052420267, 0.8465422151946049, 0.8465422151946049, 0.8465422151946049, 0.6463458083153177, 0.6463458083153177, 0.6463458083153177, 0.10357477243183622, 0.10357477243183622, 0.10357477243183622, 0.2088659358275543, 0.2088659358275543, 0.2088659358275543, 0.18668862282201226, 0.18668862282201226, 0.18668862282201226, 0.19361150685855122, 0.19361150685855122, 0.19361150685855122, 0.09922575575528603, 0.09922575575528603, 0.09922575575528603, 0.10043022823335601, 0.10043022823335601, 0.10043022823335601, 0.07834824633690152, 0.07834824633690152, 0.07834824633690152]}, "mutation_prompt": null}
{"id": "861a442d-ac92-445f-847d-c08c4694283e", "solution": "import numpy as np\n\nclass EnhancedPSOWithDiversityPreservation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.diversity_threshold = 0.5\n        self.global_learning_rate = 0.1\n        self.adaptive_step_size = 0.5\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        def calculate_diversity(population):\n            dists = np.linalg.norm(population - np.mean(population, axis=0), axis=1)\n            return np.std(dists)\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            diversity = calculate_diversity(position)\n            self.inertia_weight = 0.9 if diversity < self.diversity_threshold else 0.6\n\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Adaptive step-size mutation\n            for i in range(self.population_size):\n                step_size = self.adaptive_step_size * (personal_best_position[i] - position[i])\n                position[i] += np.random.uniform(-step_size, step_size, self.dim)\n                position[i] = clip_to_bounds(position[i])\n\n                trial_value = func(position[i])\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = position[i]\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = position[i]\n\n                position[i] = position[i] + self.global_learning_rate * (global_best_position - position[i])\n                position[i] = clip_to_bounds(position[i])\n\n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "EnhancedPSOWithDiversityPreservation", "description": "Enhanced PSO with Diversity-Preserving Mechanism and Adaptive Step-size for better exploration and convergence.", "configspace": "", "generation": 87, "fitness": 0.2614333418439512, "feedback": "The algorithm EnhancedPSOWithDiversityPreservation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.23.", "error": "", "parent_id": "e7def86d-4247-44d2-b083-41fbfc2c2f40", "metadata": {"aucs": [0.6271025795839231, 0.6271025795839231, 0.6271025795839231, 0.618881320594055, 0.618881320594055, 0.618881320594055, 0.604086995259987, 0.604086995259987, 0.604086995259987, 0.3182701985946542, 0.3182701985946542, 0.3182701985946542, 0.4338930574367913, 0.4338930574367913, 0.4338930574367913, 0.30702136848772765, 0.30702136848772765, 0.30702136848772765, 0.15626488635019398, 0.15626488635019398, 0.15626488635019398, 0.15503971099922087, 0.15503971099922087, 0.15503971099922087, 0.22097712704196304, 0.22097712704196304, 0.22097712704196304, 0.12668878424677554, 0.12668878424677554, 0.12668878424677554, 0.1102838709814381, 0.1102838709814381, 0.1102838709814381, 0.19508904634045543, 0.19508904634045543, 0.19508904634045543, 0.9707309995329283, 0.9707309995329283, 0.9707309995329283, 0.9599096560355952, 0.9599096560355952, 0.9599096560355952, 0.9707649475297602, 0.9707649475297602, 0.9707649475297602, 0.4000045308285023, 0.4000045308285023, 0.4000045308285023, 0.2556666607887128, 0.2556666607887128, 0.2556666607887128, 0.12470045682074193, 0.12470045682074193, 0.12470045682074193, 0.22861846021521315, 0.22861846021521315, 0.22861846021521315, 0.20579515756611422, 0.20579515756611422, 0.20579515756611422, 0.14714448708271188, 0.14714448708271188, 0.14714448708271188, 0.18052700368519958, 0.18052700368519958, 0.18052700368519958, 0.12504928072676735, 0.12504928072676735, 0.12504928072676735, 0.12512306428983777, 0.12512306428983777, 0.12512306428983777, 0.1954610164217574, 0.1954610164217574, 0.1954610164217574, 0.15250714511927432, 0.15250714511927432, 0.15250714511927432, 0.17880853211166536, 0.17880853211166536, 0.17880853211166536, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009330647632831646, 0.009330647632831646, 0.009330647632831646, 0.05706338418798407, 0.05706338418798407, 0.05706338418798407, 0.062463303300012596, 0.062463303300012596, 0.062463303300012596, 0.047555948473581355, 0.047555948473581355, 0.047555948473581355, 0.0216808197474726, 0.0216808197474726, 0.0216808197474726, 0.08664605724609487, 0.08664605724609487, 0.08664605724609487, 0.10267849394091133, 0.10267849394091133, 0.10267849394091133, 0.16889271784033189, 0.16889271784033189, 0.16889271784033189, 0.036452059098089684, 0.036452059098089684, 0.036452059098089684, 0.09957240345665319, 0.09957240345665319, 0.09957240345665319, 0.46414782741600225, 0.46414782741600225, 0.46414782741600225, 0.5014885244475871, 0.5014885244475871, 0.5014885244475871, 0.49809151199317625, 0.49809151199317625, 0.49809151199317625, 0.08600033637722171, 0.08600033637722171, 0.08600033637722171, 0.11615935106514985, 0.11615935106514985, 0.11615935106514985, 0.11975419972736834, 0.11975419972736834, 0.11975419972736834, 0.15806658456765876, 0.15806658456765876, 0.15806658456765876, 0.15762841862015153, 0.15762841862015153, 0.15762841862015153, 0.2923917997894657, 0.2923917997894657, 0.2923917997894657, 0.26145169147238256, 0.26145169147238256, 0.26145169147238256, 0.35706219114691207, 0.35706219114691207, 0.35706219114691207, 0.35601043013296696, 0.35601043013296696, 0.35601043013296696, 0.18837982363234806, 0.18837982363234806, 0.18837982363234806, 0.16173165195108796, 0.16173165195108796, 0.16173165195108796, 0.23469441162948446, 0.23469441162948446, 0.23469441162948446, 0.24906211845479442, 0.24906211845479442, 0.24906211845479442, 0.2613221338493309, 0.2613221338493309, 0.2613221338493309, 0.23129730611098576, 0.23129730611098576, 0.23129730611098576, 0.22168586530280576, 0.22168586530280576, 0.22168586530280576, 0.21986036852298763, 0.21986036852298763, 0.21986036852298763, 0.2036668293717082, 0.2036668293717082, 0.2036668293717082, 0.7904216032039467, 0.7904216032039467, 0.7904216032039467, 0.8518385500150951, 0.8518385500150951, 0.8518385500150951, 0.1410563585063097, 0.1410563585063097, 0.1410563585063097, 0.708614903325643, 0.708614903325643, 0.708614903325643, 0.20518679744921375, 0.20518679744921375, 0.20518679744921375, 0.1046232600449657, 0.1046232600449657, 0.1046232600449657, 0.19807995267123346, 0.19807995267123346, 0.19807995267123346, 0.17833758131686195, 0.17833758131686195, 0.17833758131686195, 0.18396964842935326, 0.18396964842935326, 0.18396964842935326, 0.10107321506874978, 0.10107321506874978, 0.10107321506874978, 0.09354165940829262, 0.09354165940829262, 0.09354165940829262, 0.13955752814731281, 0.13955752814731281, 0.13955752814731281]}, "mutation_prompt": null}
{"id": "15ebae22-b625-4cf8-a633-e06f2d71f990", "solution": "import numpy as np\n\nclass EnhancedPSOWithAdaptiveNeighborhood:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.diversity_threshold = 0.5\n        self.global_learning_rate = 0.1\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        def calculate_entropy(population):\n            hist, _ = np.histogramdd(population, bins=10, range=[self.bounds]*self.dim)\n            prob = hist / np.sum(hist)\n            prob = prob[prob > 0]\n            return -np.sum(prob * np.log2(prob))\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            entropy = calculate_entropy(position)\n            self.inertia_weight = 0.9 if entropy < self.diversity_threshold else 0.6\n\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Introduce adaptive neighborhood mutation\n            for i in range(self.population_size):\n                neighbors = np.random.choice(self.population_size, 5, replace=False)\n                best_in_neighborhood = min(neighbors, key=lambda x: personal_best_value[x])\n                mutant_vector = position[i] + self.mutation_factor * (position[best_in_neighborhood] - position[i])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n\n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n\n                position[i] = position[i] + self.global_learning_rate * (global_best_position - position[i])\n                position[i] = clip_to_bounds(position[i])\n\n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "EnhancedPSOWithAdaptiveNeighborhood", "description": "Enhanced PSO with Adaptive Neighborhood Mutation and Variable Inertia for improved global exploration and convergence.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e7def86d-4247-44d2-b083-41fbfc2c2f40", "metadata": {"aucs": [0.68566730301758, 0.68566730301758, 0.68566730301758, 0.6683849121689771, 0.6683849121689771, 0.6683849121689771, 0.7184852199946317, 0.7184852199946317, 0.7184852199946317, 0.42016249096978275, 0.42016249096978275, 0.42016249096978275, 0.3789949280978385, 0.3789949280978385, 0.3789949280978385, 0.31063862507293316, 0.31063862507293316, 0.31063862507293316, 0.11793426626360592, 0.11793426626360592, 0.11793426626360592, 0.13626837265791492, 0.13626837265791492, 0.13626837265791492, 0.09015677269328148, 0.09015677269328148, 0.09015677269328148, 0.09766719128125101, 0.09766719128125101, 0.09766719128125101, 0.12224835552744029, 0.12224835552744029, 0.12224835552744029, 0.11917196754318626, 0.11917196754318626, 0.11917196754318626, 0.9777826227175841, 0.9777826227175841, 0.9777826227175841, 0.9589776288602316, 0.9589776288602316, 0.9589776288602316, 0.9692142423924607, 0.9692142423924607, 0.9692142423924607, 0.5075166511695275, 0.5075166511695275, 0.5075166511695275, 0.15002939104435353, 0.15002939104435353, 0.15002939104435353, 0.12438408178690186, 0.12438408178690186, 0.12438408178690186, 0.22714083724122636, 0.22714083724122636, 0.22714083724122636, 0.1940552305185521, 0.1940552305185521, 0.1940552305185521, 0.8333061597562582, 0.8333061597562582, 0.8333061597562582, 0.22155441664744646, 0.22155441664744646, 0.22155441664744646, 0.10459600708607852, 0.10459600708607852, 0.10459600708607852, 0.23810749205460946, 0.23810749205460946, 0.23810749205460946, 0.22467052604386395, 0.22467052604386395, 0.22467052604386395, 0.23887518966472143, 0.23887518966472143, 0.23887518966472143, 0.2686200255881551, 0.2686200255881551, 0.2686200255881551, 0.002061941921216559, 0.002061941921216559, 0.002061941921216559, 0.040136608317347444, 0.040136608317347444, 0.040136608317347444, 0.010221537205343467, 0.010221537205343467, 0.010221537205343467, 0.1014516655093275, 0.1014516655093275, 0.1014516655093275, 0.0843305261775047, 0.0843305261775047, 0.0843305261775047, 0.022699015503935493, 0.022699015503935493, 0.022699015503935493, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06952445544094266, 0.06952445544094266, 0.06952445544094266, 0.11366050800637384, 0.11366050800637384, 0.11366050800637384, 0.11747136402862457, 0.11747136402862457, 0.11747136402862457, 0.13707282434889023, 0.13707282434889023, 0.13707282434889023, 0.06252066377423837, 0.06252066377423837, 0.06252066377423837, 0.5016289666358137, 0.5016289666358137, 0.5016289666358137, 0.5412011237631182, 0.5412011237631182, 0.5412011237631182, 0.5312180192048153, 0.5312180192048153, 0.5312180192048153, 0.12694573746218962, 0.12694573746218962, 0.12694573746218962, 0.15031329792289638, 0.15031329792289638, 0.15031329792289638, 0.18255324258494832, 0.18255324258494832, 0.18255324258494832, 0.18741063752086284, 0.18741063752086284, 0.18741063752086284, 0.22268497828334355, 0.22268497828334355, 0.22268497828334355, 0.410322548010299, 0.410322548010299, 0.410322548010299, 0.31160370035305474, 0.31160370035305474, 0.31160370035305474, 0.32387676794780706, 0.32387676794780706, 0.32387676794780706, 0.46994661064588106, 0.46994661064588106, 0.46994661064588106, 0.2712879784069877, 0.2712879784069877, 0.2712879784069877, 0.2766992718980147, 0.2766992718980147, 0.2766992718980147, 0.30573937656297656, 0.30573937656297656, 0.30573937656297656, 0.23832582837160432, 0.23832582837160432, 0.23832582837160432, 0.21318138086599947, 0.21318138086599947, 0.21318138086599947, 0.23300427018168823, 0.23300427018168823, 0.23300427018168823, 0.19284293287691767, 0.19284293287691767, 0.19284293287691767, 0.24723251805601842, 0.24723251805601842, 0.24723251805601842, 0.2224570034194, 0.2224570034194, 0.2224570034194, 0.8766533011024538, 0.8766533011024538, 0.8766533011024538, 0.8720695286995156, 0.8720695286995156, 0.8720695286995156, 0.11917139052420267, 0.11917139052420267, 0.11917139052420267, 0.8465422151946049, 0.8465422151946049, 0.8465422151946049, 0.6463458083153177, 0.6463458083153177, 0.6463458083153177, 0.10357477243183622, 0.10357477243183622, 0.10357477243183622, 0.2088659358275543, 0.2088659358275543, 0.2088659358275543, 0.18668862282201226, 0.18668862282201226, 0.18668862282201226, 0.19361150685855122, 0.19361150685855122, 0.19361150685855122, 0.09922575575528603, 0.09922575575528603, 0.09922575575528603, 0.10043022823335601, 0.10043022823335601, 0.10043022823335601, 0.07834824633690152, 0.07834824633690152, 0.07834824633690152]}, "mutation_prompt": null}
{"id": "7d1160db-1a24-4c38-a24d-4d405281d1f9", "solution": "import numpy as np\n\nclass EnhancedPSOWithAdaptiveNeighborhood:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.diversity_threshold = 0.5\n        self.global_learning_rate = 0.1\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        def calculate_entropy(population):\n            hist, _ = np.histogramdd(population, bins=10, range=[self.bounds]*self.dim)\n            prob = hist / np.sum(hist)\n            prob = prob[prob > 0]\n            return -np.sum(prob * np.log2(prob))\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            entropy = calculate_entropy(position)\n            self.inertia_weight = 0.9 if entropy < self.diversity_threshold else 0.6\n\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Introduce adaptive neighborhood mutation\n            for i in range(self.population_size):\n                neighbors = np.random.choice(self.population_size, 5, replace=False)\n                best_in_neighborhood = min(neighbors, key=lambda x: personal_best_value[x])\n                mutant_vector = position[i] + self.mutation_factor * (position[best_in_neighborhood] - position[i])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n\n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n\n                position[i] = position[i] + self.global_learning_rate * (global_best_position - position[i])\n                position[i] = clip_to_bounds(position[i])\n\n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "EnhancedPSOWithAdaptiveNeighborhood", "description": "Enhanced PSO with Adaptive Neighborhood Mutation and Variable Inertia for improved global exploration and convergence.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e7def86d-4247-44d2-b083-41fbfc2c2f40", "metadata": {"aucs": [0.68566730301758, 0.68566730301758, 0.68566730301758, 0.6683849121689771, 0.6683849121689771, 0.6683849121689771, 0.7184852199946317, 0.7184852199946317, 0.7184852199946317, 0.42016249096978275, 0.42016249096978275, 0.42016249096978275, 0.3789949280978385, 0.3789949280978385, 0.3789949280978385, 0.31063862507293316, 0.31063862507293316, 0.31063862507293316, 0.11793426626360592, 0.11793426626360592, 0.11793426626360592, 0.13626837265791492, 0.13626837265791492, 0.13626837265791492, 0.09015677269328148, 0.09015677269328148, 0.09015677269328148, 0.09766719128125101, 0.09766719128125101, 0.09766719128125101, 0.12224835552744029, 0.12224835552744029, 0.12224835552744029, 0.11917196754318626, 0.11917196754318626, 0.11917196754318626, 0.9777826227175841, 0.9777826227175841, 0.9777826227175841, 0.9589776288602316, 0.9589776288602316, 0.9589776288602316, 0.9692142423924607, 0.9692142423924607, 0.9692142423924607, 0.5075166511695275, 0.5075166511695275, 0.5075166511695275, 0.15002939104435353, 0.15002939104435353, 0.15002939104435353, 0.12438408178690186, 0.12438408178690186, 0.12438408178690186, 0.22714083724122636, 0.22714083724122636, 0.22714083724122636, 0.1940552305185521, 0.1940552305185521, 0.1940552305185521, 0.8333061597562582, 0.8333061597562582, 0.8333061597562582, 0.22155441664744646, 0.22155441664744646, 0.22155441664744646, 0.10459600708607852, 0.10459600708607852, 0.10459600708607852, 0.23810749205460946, 0.23810749205460946, 0.23810749205460946, 0.22467052604386395, 0.22467052604386395, 0.22467052604386395, 0.23887518966472143, 0.23887518966472143, 0.23887518966472143, 0.2686200255881551, 0.2686200255881551, 0.2686200255881551, 0.002061941921216559, 0.002061941921216559, 0.002061941921216559, 0.040136608317347444, 0.040136608317347444, 0.040136608317347444, 0.010221537205343467, 0.010221537205343467, 0.010221537205343467, 0.1014516655093275, 0.1014516655093275, 0.1014516655093275, 0.0843305261775047, 0.0843305261775047, 0.0843305261775047, 0.022699015503935493, 0.022699015503935493, 0.022699015503935493, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06952445544094266, 0.06952445544094266, 0.06952445544094266, 0.11366050800637384, 0.11366050800637384, 0.11366050800637384, 0.11747136402862457, 0.11747136402862457, 0.11747136402862457, 0.13707282434889023, 0.13707282434889023, 0.13707282434889023, 0.06252066377423837, 0.06252066377423837, 0.06252066377423837, 0.5016289666358137, 0.5016289666358137, 0.5016289666358137, 0.5412011237631182, 0.5412011237631182, 0.5412011237631182, 0.5312180192048153, 0.5312180192048153, 0.5312180192048153, 0.12694573746218962, 0.12694573746218962, 0.12694573746218962, 0.15031329792289638, 0.15031329792289638, 0.15031329792289638, 0.18255324258494832, 0.18255324258494832, 0.18255324258494832, 0.18741063752086284, 0.18741063752086284, 0.18741063752086284, 0.22268497828334355, 0.22268497828334355, 0.22268497828334355, 0.410322548010299, 0.410322548010299, 0.410322548010299, 0.31160370035305474, 0.31160370035305474, 0.31160370035305474, 0.32387676794780706, 0.32387676794780706, 0.32387676794780706, 0.46994661064588106, 0.46994661064588106, 0.46994661064588106, 0.2712879784069877, 0.2712879784069877, 0.2712879784069877, 0.2766992718980147, 0.2766992718980147, 0.2766992718980147, 0.30573937656297656, 0.30573937656297656, 0.30573937656297656, 0.23832582837160432, 0.23832582837160432, 0.23832582837160432, 0.21318138086599947, 0.21318138086599947, 0.21318138086599947, 0.23300427018168823, 0.23300427018168823, 0.23300427018168823, 0.19284293287691767, 0.19284293287691767, 0.19284293287691767, 0.24723251805601842, 0.24723251805601842, 0.24723251805601842, 0.2224570034194, 0.2224570034194, 0.2224570034194, 0.8766533011024538, 0.8766533011024538, 0.8766533011024538, 0.8720695286995156, 0.8720695286995156, 0.8720695286995156, 0.11917139052420267, 0.11917139052420267, 0.11917139052420267, 0.8465422151946049, 0.8465422151946049, 0.8465422151946049, 0.6463458083153177, 0.6463458083153177, 0.6463458083153177, 0.10357477243183622, 0.10357477243183622, 0.10357477243183622, 0.2088659358275543, 0.2088659358275543, 0.2088659358275543, 0.18668862282201226, 0.18668862282201226, 0.18668862282201226, 0.19361150685855122, 0.19361150685855122, 0.19361150685855122, 0.09922575575528603, 0.09922575575528603, 0.09922575575528603, 0.10043022823335601, 0.10043022823335601, 0.10043022823335601, 0.07834824633690152, 0.07834824633690152, 0.07834824633690152]}, "mutation_prompt": null}
{"id": "6d7d9250-e916-443a-b482-e2d7507f4de6", "solution": "import numpy as np\n\nclass EnhancedPSOWithAdaptiveNeighborhood:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.diversity_threshold = 0.5\n        self.global_learning_rate = 0.1\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        def calculate_entropy(population):\n            hist, _ = np.histogramdd(population, bins=10, range=[self.bounds]*self.dim)\n            prob = hist / np.sum(hist)\n            prob = prob[prob > 0]\n            return -np.sum(prob * np.log2(prob))\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            entropy = calculate_entropy(position)\n            self.inertia_weight = 0.9 if entropy < self.diversity_threshold else 0.6\n\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Introduce adaptive neighborhood mutation\n            for i in range(self.population_size):\n                neighbors = np.random.choice(self.population_size, 5, replace=False)\n                best_in_neighborhood = min(neighbors, key=lambda x: personal_best_value[x])\n                mutant_vector = position[i] + self.mutation_factor * (position[best_in_neighborhood] - position[i])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n\n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n\n                position[i] = position[i] + self.global_learning_rate * (global_best_position - position[i])\n                position[i] = clip_to_bounds(position[i])\n\n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "EnhancedPSOWithAdaptiveNeighborhood", "description": "Enhanced PSO with Adaptive Neighborhood Mutation and Variable Inertia for improved global exploration and convergence.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e7def86d-4247-44d2-b083-41fbfc2c2f40", "metadata": {"aucs": [0.68566730301758, 0.68566730301758, 0.68566730301758, 0.6683849121689771, 0.6683849121689771, 0.6683849121689771, 0.7184852199946317, 0.7184852199946317, 0.7184852199946317, 0.42016249096978275, 0.42016249096978275, 0.42016249096978275, 0.3789949280978385, 0.3789949280978385, 0.3789949280978385, 0.31063862507293316, 0.31063862507293316, 0.31063862507293316, 0.11793426626360592, 0.11793426626360592, 0.11793426626360592, 0.13626837265791492, 0.13626837265791492, 0.13626837265791492, 0.09015677269328148, 0.09015677269328148, 0.09015677269328148, 0.09766719128125101, 0.09766719128125101, 0.09766719128125101, 0.12224835552744029, 0.12224835552744029, 0.12224835552744029, 0.11917196754318626, 0.11917196754318626, 0.11917196754318626, 0.9777826227175841, 0.9777826227175841, 0.9777826227175841, 0.9589776288602316, 0.9589776288602316, 0.9589776288602316, 0.9692142423924607, 0.9692142423924607, 0.9692142423924607, 0.5075166511695275, 0.5075166511695275, 0.5075166511695275, 0.15002939104435353, 0.15002939104435353, 0.15002939104435353, 0.12438408178690186, 0.12438408178690186, 0.12438408178690186, 0.22714083724122636, 0.22714083724122636, 0.22714083724122636, 0.1940552305185521, 0.1940552305185521, 0.1940552305185521, 0.8333061597562582, 0.8333061597562582, 0.8333061597562582, 0.22155441664744646, 0.22155441664744646, 0.22155441664744646, 0.10459600708607852, 0.10459600708607852, 0.10459600708607852, 0.23810749205460946, 0.23810749205460946, 0.23810749205460946, 0.22467052604386395, 0.22467052604386395, 0.22467052604386395, 0.23887518966472143, 0.23887518966472143, 0.23887518966472143, 0.2686200255881551, 0.2686200255881551, 0.2686200255881551, 0.002061941921216559, 0.002061941921216559, 0.002061941921216559, 0.040136608317347444, 0.040136608317347444, 0.040136608317347444, 0.010221537205343467, 0.010221537205343467, 0.010221537205343467, 0.1014516655093275, 0.1014516655093275, 0.1014516655093275, 0.0843305261775047, 0.0843305261775047, 0.0843305261775047, 0.022699015503935493, 0.022699015503935493, 0.022699015503935493, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06952445544094266, 0.06952445544094266, 0.06952445544094266, 0.11366050800637384, 0.11366050800637384, 0.11366050800637384, 0.11747136402862457, 0.11747136402862457, 0.11747136402862457, 0.13707282434889023, 0.13707282434889023, 0.13707282434889023, 0.06252066377423837, 0.06252066377423837, 0.06252066377423837, 0.5016289666358137, 0.5016289666358137, 0.5016289666358137, 0.5412011237631182, 0.5412011237631182, 0.5412011237631182, 0.5312180192048153, 0.5312180192048153, 0.5312180192048153, 0.12694573746218962, 0.12694573746218962, 0.12694573746218962, 0.15031329792289638, 0.15031329792289638, 0.15031329792289638, 0.18255324258494832, 0.18255324258494832, 0.18255324258494832, 0.18741063752086284, 0.18741063752086284, 0.18741063752086284, 0.22268497828334355, 0.22268497828334355, 0.22268497828334355, 0.410322548010299, 0.410322548010299, 0.410322548010299, 0.31160370035305474, 0.31160370035305474, 0.31160370035305474, 0.32387676794780706, 0.32387676794780706, 0.32387676794780706, 0.46994661064588106, 0.46994661064588106, 0.46994661064588106, 0.2712879784069877, 0.2712879784069877, 0.2712879784069877, 0.2766992718980147, 0.2766992718980147, 0.2766992718980147, 0.30573937656297656, 0.30573937656297656, 0.30573937656297656, 0.23832582837160432, 0.23832582837160432, 0.23832582837160432, 0.21318138086599947, 0.21318138086599947, 0.21318138086599947, 0.23300427018168823, 0.23300427018168823, 0.23300427018168823, 0.19284293287691767, 0.19284293287691767, 0.19284293287691767, 0.24723251805601842, 0.24723251805601842, 0.24723251805601842, 0.2224570034194, 0.2224570034194, 0.2224570034194, 0.8766533011024538, 0.8766533011024538, 0.8766533011024538, 0.8720695286995156, 0.8720695286995156, 0.8720695286995156, 0.11917139052420267, 0.11917139052420267, 0.11917139052420267, 0.8465422151946049, 0.8465422151946049, 0.8465422151946049, 0.6463458083153177, 0.6463458083153177, 0.6463458083153177, 0.10357477243183622, 0.10357477243183622, 0.10357477243183622, 0.2088659358275543, 0.2088659358275543, 0.2088659358275543, 0.18668862282201226, 0.18668862282201226, 0.18668862282201226, 0.19361150685855122, 0.19361150685855122, 0.19361150685855122, 0.09922575575528603, 0.09922575575528603, 0.09922575575528603, 0.10043022823335601, 0.10043022823335601, 0.10043022823335601, 0.07834824633690152, 0.07834824633690152, 0.07834824633690152]}, "mutation_prompt": null}
{"id": "f10644bb-e644-49b1-823b-3625a79c7d46", "solution": "import numpy as np\n\nclass EnhancedPSOWithAdaptiveNeighborhood:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.diversity_threshold = 0.5\n        self.global_learning_rate = 0.1\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        def calculate_entropy(population):\n            hist, _ = np.histogramdd(population, bins=10, range=[self.bounds]*self.dim)\n            prob = hist / np.sum(hist)\n            prob = prob[prob > 0]\n            return -np.sum(prob * np.log2(prob))\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            entropy = calculate_entropy(position)\n            self.inertia_weight = 0.9 if entropy < self.diversity_threshold else 0.6\n\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Introduce adaptive neighborhood mutation\n            for i in range(self.population_size):\n                neighbors = np.random.choice(self.population_size, 5, replace=False)\n                best_in_neighborhood = min(neighbors, key=lambda x: personal_best_value[x])\n                mutant_vector = position[i] + self.mutation_factor * (position[best_in_neighborhood] - position[i])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n\n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n\n                position[i] = position[i] + self.global_learning_rate * (global_best_position - position[i])\n                position[i] = clip_to_bounds(position[i])\n\n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "EnhancedPSOWithAdaptiveNeighborhood", "description": "Enhanced PSO with Adaptive Neighborhood Mutation and Variable Inertia for improved global exploration and convergence.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e7def86d-4247-44d2-b083-41fbfc2c2f40", "metadata": {"aucs": [0.68566730301758, 0.68566730301758, 0.68566730301758, 0.6683849121689771, 0.6683849121689771, 0.6683849121689771, 0.7184852199946317, 0.7184852199946317, 0.7184852199946317, 0.42016249096978275, 0.42016249096978275, 0.42016249096978275, 0.3789949280978385, 0.3789949280978385, 0.3789949280978385, 0.31063862507293316, 0.31063862507293316, 0.31063862507293316, 0.11793426626360592, 0.11793426626360592, 0.11793426626360592, 0.13626837265791492, 0.13626837265791492, 0.13626837265791492, 0.09015677269328148, 0.09015677269328148, 0.09015677269328148, 0.09766719128125101, 0.09766719128125101, 0.09766719128125101, 0.12224835552744029, 0.12224835552744029, 0.12224835552744029, 0.11917196754318626, 0.11917196754318626, 0.11917196754318626, 0.9777826227175841, 0.9777826227175841, 0.9777826227175841, 0.9589776288602316, 0.9589776288602316, 0.9589776288602316, 0.9692142423924607, 0.9692142423924607, 0.9692142423924607, 0.5075166511695275, 0.5075166511695275, 0.5075166511695275, 0.15002939104435353, 0.15002939104435353, 0.15002939104435353, 0.12438408178690186, 0.12438408178690186, 0.12438408178690186, 0.22714083724122636, 0.22714083724122636, 0.22714083724122636, 0.1940552305185521, 0.1940552305185521, 0.1940552305185521, 0.8333061597562582, 0.8333061597562582, 0.8333061597562582, 0.22155441664744646, 0.22155441664744646, 0.22155441664744646, 0.10459600708607852, 0.10459600708607852, 0.10459600708607852, 0.23810749205460946, 0.23810749205460946, 0.23810749205460946, 0.22467052604386395, 0.22467052604386395, 0.22467052604386395, 0.23887518966472143, 0.23887518966472143, 0.23887518966472143, 0.2686200255881551, 0.2686200255881551, 0.2686200255881551, 0.002061941921216559, 0.002061941921216559, 0.002061941921216559, 0.040136608317347444, 0.040136608317347444, 0.040136608317347444, 0.010221537205343467, 0.010221537205343467, 0.010221537205343467, 0.1014516655093275, 0.1014516655093275, 0.1014516655093275, 0.0843305261775047, 0.0843305261775047, 0.0843305261775047, 0.022699015503935493, 0.022699015503935493, 0.022699015503935493, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06952445544094266, 0.06952445544094266, 0.06952445544094266, 0.11366050800637384, 0.11366050800637384, 0.11366050800637384, 0.11747136402862457, 0.11747136402862457, 0.11747136402862457, 0.13707282434889023, 0.13707282434889023, 0.13707282434889023, 0.06252066377423837, 0.06252066377423837, 0.06252066377423837, 0.5016289666358137, 0.5016289666358137, 0.5016289666358137, 0.5412011237631182, 0.5412011237631182, 0.5412011237631182, 0.5312180192048153, 0.5312180192048153, 0.5312180192048153, 0.12694573746218962, 0.12694573746218962, 0.12694573746218962, 0.15031329792289638, 0.15031329792289638, 0.15031329792289638, 0.18255324258494832, 0.18255324258494832, 0.18255324258494832, 0.18741063752086284, 0.18741063752086284, 0.18741063752086284, 0.22268497828334355, 0.22268497828334355, 0.22268497828334355, 0.410322548010299, 0.410322548010299, 0.410322548010299, 0.31160370035305474, 0.31160370035305474, 0.31160370035305474, 0.32387676794780706, 0.32387676794780706, 0.32387676794780706, 0.46994661064588106, 0.46994661064588106, 0.46994661064588106, 0.2712879784069877, 0.2712879784069877, 0.2712879784069877, 0.2766992718980147, 0.2766992718980147, 0.2766992718980147, 0.30573937656297656, 0.30573937656297656, 0.30573937656297656, 0.23832582837160432, 0.23832582837160432, 0.23832582837160432, 0.21318138086599947, 0.21318138086599947, 0.21318138086599947, 0.23300427018168823, 0.23300427018168823, 0.23300427018168823, 0.19284293287691767, 0.19284293287691767, 0.19284293287691767, 0.24723251805601842, 0.24723251805601842, 0.24723251805601842, 0.2224570034194, 0.2224570034194, 0.2224570034194, 0.8766533011024538, 0.8766533011024538, 0.8766533011024538, 0.8720695286995156, 0.8720695286995156, 0.8720695286995156, 0.11917139052420267, 0.11917139052420267, 0.11917139052420267, 0.8465422151946049, 0.8465422151946049, 0.8465422151946049, 0.6463458083153177, 0.6463458083153177, 0.6463458083153177, 0.10357477243183622, 0.10357477243183622, 0.10357477243183622, 0.2088659358275543, 0.2088659358275543, 0.2088659358275543, 0.18668862282201226, 0.18668862282201226, 0.18668862282201226, 0.19361150685855122, 0.19361150685855122, 0.19361150685855122, 0.09922575575528603, 0.09922575575528603, 0.09922575575528603, 0.10043022823335601, 0.10043022823335601, 0.10043022823335601, 0.07834824633690152, 0.07834824633690152, 0.07834824633690152]}, "mutation_prompt": null}
{"id": "bcc948d6-ebcb-4959-9a86-30549fa1ff62", "solution": "import numpy as np\n\nclass EnhancedPSOWithAdaptiveNeighborhood:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.diversity_threshold = 0.5\n        self.global_learning_rate = 0.1\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        def calculate_entropy(population):\n            hist, _ = np.histogramdd(population, bins=10, range=[self.bounds]*self.dim)\n            prob = hist / np.sum(hist)\n            prob = prob[prob > 0]\n            return -np.sum(prob * np.log2(prob))\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            entropy = calculate_entropy(position)\n            self.inertia_weight = 0.9 if entropy < self.diversity_threshold else 0.6\n\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Introduce adaptive neighborhood mutation\n            for i in range(self.population_size):\n                neighbors = np.random.choice(self.population_size, 5, replace=False)\n                best_in_neighborhood = min(neighbors, key=lambda x: personal_best_value[x])\n                mutant_vector = position[i] + self.mutation_factor * (position[best_in_neighborhood] - position[i])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n\n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n\n                position[i] = position[i] + self.global_learning_rate * (global_best_position - position[i])\n                position[i] = clip_to_bounds(position[i])\n\n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "EnhancedPSOWithAdaptiveNeighborhood", "description": "Enhanced PSO with Adaptive Neighborhood Mutation and Variable Inertia for improved global exploration and convergence.", "configspace": "", "generation": 86, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "e7def86d-4247-44d2-b083-41fbfc2c2f40", "metadata": {"aucs": [0.68566730301758, 0.68566730301758, 0.68566730301758, 0.6683849121689771, 0.6683849121689771, 0.6683849121689771, 0.7184852199946317, 0.7184852199946317, 0.7184852199946317, 0.42016249096978275, 0.42016249096978275, 0.42016249096978275, 0.3789949280978385, 0.3789949280978385, 0.3789949280978385, 0.31063862507293316, 0.31063862507293316, 0.31063862507293316, 0.11793426626360592, 0.11793426626360592, 0.11793426626360592, 0.13626837265791492, 0.13626837265791492, 0.13626837265791492, 0.09015677269328148, 0.09015677269328148, 0.09015677269328148, 0.09766719128125101, 0.09766719128125101, 0.09766719128125101, 0.12224835552744029, 0.12224835552744029, 0.12224835552744029, 0.11917196754318626, 0.11917196754318626, 0.11917196754318626, 0.9777826227175841, 0.9777826227175841, 0.9777826227175841, 0.9589776288602316, 0.9589776288602316, 0.9589776288602316, 0.9692142423924607, 0.9692142423924607, 0.9692142423924607, 0.5075166511695275, 0.5075166511695275, 0.5075166511695275, 0.15002939104435353, 0.15002939104435353, 0.15002939104435353, 0.12438408178690186, 0.12438408178690186, 0.12438408178690186, 0.22714083724122636, 0.22714083724122636, 0.22714083724122636, 0.1940552305185521, 0.1940552305185521, 0.1940552305185521, 0.8333061597562582, 0.8333061597562582, 0.8333061597562582, 0.22155441664744646, 0.22155441664744646, 0.22155441664744646, 0.10459600708607852, 0.10459600708607852, 0.10459600708607852, 0.23810749205460946, 0.23810749205460946, 0.23810749205460946, 0.22467052604386395, 0.22467052604386395, 0.22467052604386395, 0.23887518966472143, 0.23887518966472143, 0.23887518966472143, 0.2686200255881551, 0.2686200255881551, 0.2686200255881551, 0.002061941921216559, 0.002061941921216559, 0.002061941921216559, 0.040136608317347444, 0.040136608317347444, 0.040136608317347444, 0.010221537205343467, 0.010221537205343467, 0.010221537205343467, 0.1014516655093275, 0.1014516655093275, 0.1014516655093275, 0.0843305261775047, 0.0843305261775047, 0.0843305261775047, 0.022699015503935493, 0.022699015503935493, 0.022699015503935493, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06952445544094266, 0.06952445544094266, 0.06952445544094266, 0.11366050800637384, 0.11366050800637384, 0.11366050800637384, 0.11747136402862457, 0.11747136402862457, 0.11747136402862457, 0.13707282434889023, 0.13707282434889023, 0.13707282434889023, 0.06252066377423837, 0.06252066377423837, 0.06252066377423837, 0.5016289666358137, 0.5016289666358137, 0.5016289666358137, 0.5412011237631182, 0.5412011237631182, 0.5412011237631182, 0.5312180192048153, 0.5312180192048153, 0.5312180192048153, 0.12694573746218962, 0.12694573746218962, 0.12694573746218962, 0.15031329792289638, 0.15031329792289638, 0.15031329792289638, 0.18255324258494832, 0.18255324258494832, 0.18255324258494832, 0.18741063752086284, 0.18741063752086284, 0.18741063752086284, 0.22268497828334355, 0.22268497828334355, 0.22268497828334355, 0.410322548010299, 0.410322548010299, 0.410322548010299, 0.31160370035305474, 0.31160370035305474, 0.31160370035305474, 0.32387676794780706, 0.32387676794780706, 0.32387676794780706, 0.46994661064588106, 0.46994661064588106, 0.46994661064588106, 0.2712879784069877, 0.2712879784069877, 0.2712879784069877, 0.2766992718980147, 0.2766992718980147, 0.2766992718980147, 0.30573937656297656, 0.30573937656297656, 0.30573937656297656, 0.23832582837160432, 0.23832582837160432, 0.23832582837160432, 0.21318138086599947, 0.21318138086599947, 0.21318138086599947, 0.23300427018168823, 0.23300427018168823, 0.23300427018168823, 0.19284293287691767, 0.19284293287691767, 0.19284293287691767, 0.24723251805601842, 0.24723251805601842, 0.24723251805601842, 0.2224570034194, 0.2224570034194, 0.2224570034194, 0.8766533011024538, 0.8766533011024538, 0.8766533011024538, 0.8720695286995156, 0.8720695286995156, 0.8720695286995156, 0.11917139052420267, 0.11917139052420267, 0.11917139052420267, 0.8465422151946049, 0.8465422151946049, 0.8465422151946049, 0.6463458083153177, 0.6463458083153177, 0.6463458083153177, 0.10357477243183622, 0.10357477243183622, 0.10357477243183622, 0.2088659358275543, 0.2088659358275543, 0.2088659358275543, 0.18668862282201226, 0.18668862282201226, 0.18668862282201226, 0.19361150685855122, 0.19361150685855122, 0.19361150685855122, 0.09922575575528603, 0.09922575575528603, 0.09922575575528603, 0.10043022823335601, 0.10043022823335601, 0.10043022823335601, 0.07834824633690152, 0.07834824633690152, 0.07834824633690152]}, "mutation_prompt": null}
{"id": "7b8538e0-06ce-4bcf-96c1-d7d1ea183435", "solution": "import numpy as np\n\nclass HybridPSOWithLevyFlight:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.diversity_threshold = 0.5\n        self.global_learning_rate = 0.1\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        def calculate_entropy(population):\n            hist, _ = np.histogramdd(population, bins=10, range=[self.bounds]*self.dim)\n            prob = hist / np.sum(hist)\n            prob = prob[prob > 0]\n            return -np.sum(prob * np.log2(prob))\n\n        def levy_flight(Lambda=1.5):\n            sigma = (np.math.gamma(1 + Lambda) * np.sin(np.pi * Lambda / 2) /\n                     (np.math.gamma((1 + Lambda) / 2) * Lambda * 2**((Lambda - 1) / 2)))**(1 / Lambda)\n            u = np.random.normal(0, sigma, self.dim)\n            v = np.random.normal(0, 1, self.dim)\n            step = u / abs(v)**(1 / Lambda)\n            return step\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            entropy = calculate_entropy(position)\n            self.inertia_weight = 0.9 if entropy < self.diversity_threshold else 0.6\n\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Introduce Lévy flight for exploration\n            for i in range(self.population_size):\n                if np.random.rand() < 0.3:\n                    position[i] += levy_flight()\n                position[i] = clip_to_bounds(position[i])\n\n            # Adaptive neighborhood mutation\n            for i in range(self.population_size):\n                neighbors = np.random.choice(self.population_size, 5, replace=False)\n                best_in_neighborhood = min(neighbors, key=lambda x: personal_best_value[x])\n                mutant_vector = position[i] + self.mutation_factor * (position[best_in_neighborhood] - position[i])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n\n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n\n                position[i] = position[i] + self.global_learning_rate * (global_best_position - position[i])\n                position[i] = clip_to_bounds(position[i])\n\n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "HybridPSOWithLevyFlight", "description": "Hybrid Particle Swarm Optimization with Lévy Flight Strategy and Adaptive Inertia for enhanced exploration and exploitation.", "configspace": "", "generation": 93, "fitness": 0.2151846797052782, "feedback": "The algorithm HybridPSOWithLevyFlight got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.21.", "error": "", "parent_id": "e7def86d-4247-44d2-b083-41fbfc2c2f40", "metadata": {"aucs": [0.4506763843243822, 0.4506763843243822, 0.4506763843243822, 0.4538625545922419, 0.4538625545922419, 0.4538625545922419, 0.43555201700029567, 0.43555201700029567, 0.43555201700029567, 0.006900907540590695, 0.006900907540590695, 0.006900907540590695, 0.013359347803296284, 0.013359347803296284, 0.013359347803296284, 0.006490818003342613, 0.006490818003342613, 0.006490818003342613, 0.09617502210696238, 0.09617502210696238, 0.09617502210696238, 0.1044043751582463, 0.1044043751582463, 0.1044043751582463, 0.10723561162354656, 0.10723561162354656, 0.10723561162354656, 0.09853167500161453, 0.09853167500161453, 0.09853167500161453, 0.10604516122835994, 0.10604516122835994, 0.10604516122835994, 0.10134178301857133, 0.10134178301857133, 0.10134178301857133, 0.9696168242785305, 0.9696168242785305, 0.9696168242785305, 0.941933692253167, 0.941933692253167, 0.941933692253167, 0.9695383725310897, 0.9695383725310897, 0.9695383725310897, 0.2548293413616999, 0.2548293413616999, 0.2548293413616999, 0.24815995145321268, 0.24815995145321268, 0.24815995145321268, 0.23370338947009361, 0.23370338947009361, 0.23370338947009361, 0.284608855228645, 0.284608855228645, 0.284608855228645, 0.19728116924100392, 0.19728116924100392, 0.19728116924100392, 0.3192759816740881, 0.3192759816740881, 0.3192759816740881, 0.18029066596705612, 0.18029066596705612, 0.18029066596705612, 0.0923262570855482, 0.0923262570855482, 0.0923262570855482, 0.18489094683520202, 0.18489094683520202, 0.18489094683520202, 0.11899853305349717, 0.11899853305349717, 0.11899853305349717, 0.13533877088053325, 0.13533877088053325, 0.13533877088053325, 0.09943254925834777, 0.09943254925834777, 0.09943254925834777, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08466786299217488, 0.08466786299217488, 0.08466786299217488, 0.11261968812581036, 0.11261968812581036, 0.11261968812581036, 0.04541893662183061, 0.04541893662183061, 0.04541893662183061, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0057689970932711665, 0.0057689970932711665, 0.0057689970932711665, 0.10883435187848156, 0.10883435187848156, 0.10883435187848156, 0.11579020829744768, 0.11579020829744768, 0.11579020829744768, 0.06239711931995118, 0.06239711931995118, 0.06239711931995118, 0.3706397940616556, 0.3706397940616556, 0.3706397940616556, 0.38510030377343285, 0.38510030377343285, 0.38510030377343285, 0.35911054892929173, 0.35911054892929173, 0.35911054892929173, 0.07716584513018077, 0.07716584513018077, 0.07716584513018077, 0.11026634312079409, 0.11026634312079409, 0.11026634312079409, 0.0937794411878593, 0.0937794411878593, 0.0937794411878593, 0.1522899850202608, 0.1522899850202608, 0.1522899850202608, 0.23181106347482128, 0.23181106347482128, 0.23181106347482128, 0.25810573235085277, 0.25810573235085277, 0.25810573235085277, 0.26042068930849294, 0.26042068930849294, 0.26042068930849294, 0.23995906006959022, 0.23995906006959022, 0.23995906006959022, 0.2762798827290782, 0.2762798827290782, 0.2762798827290782, 0.21714224659117642, 0.21714224659117642, 0.21714224659117642, 0.133027511690756, 0.133027511690756, 0.133027511690756, 0.20411974624812412, 0.20411974624812412, 0.20411974624812412, 0.20573768276933302, 0.20573768276933302, 0.20573768276933302, 0.20883379387971768, 0.20883379387971768, 0.20883379387971768, 0.20463472052263487, 0.20463472052263487, 0.20463472052263487, 0.18731696375127782, 0.18731696375127782, 0.18731696375127782, 0.180692079608198, 0.180692079608198, 0.180692079608198, 0.18201515629879872, 0.18201515629879872, 0.18201515629879872, 0.6566284542580367, 0.6566284542580367, 0.6566284542580367, 0.586797871646324, 0.586797871646324, 0.586797871646324, 0.1414425842692424, 0.1414425842692424, 0.1414425842692424, 0.37942571607050246, 0.37942571607050246, 0.37942571607050246, 0.28084575047826643, 0.28084575047826643, 0.28084575047826643, 0.3462078896106957, 0.3462078896106957, 0.3462078896106957, 0.18637948283108297, 0.18637948283108297, 0.18637948283108297, 0.1913466451573982, 0.1913466451573982, 0.1913466451573982, 0.19150744073129833, 0.19150744073129833, 0.19150744073129833, 0.0806442471528781, 0.0806442471528781, 0.0806442471528781, 0.07813197055627175, 0.07813197055627175, 0.07813197055627175, 0.08869217319957279, 0.08869217319957279, 0.08869217319957279]}, "mutation_prompt": null}
{"id": "d65fc84b-5b82-4adc-9149-5c75079cf42c", "solution": "import numpy as np\n\nclass EnhancedPSOWithDynamicGrouping:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = 50\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.dynamic_group_size = 10\n        self.local_search_prob = 0.3\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(self.population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        while eval_count < self.budget:\n            for i in range(self.population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            r1, r2 = np.random.rand(self.population_size, self.dim), np.random.rand(self.population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Dynamic Grouping and Adaptive Mutation\n            grouped_indices = np.random.choice(self.population_size, self.dynamic_group_size, replace=False)\n            best_in_group = min(grouped_indices, key=lambda x: personal_best_value[x])\n            for i in range(self.population_size):\n                if np.random.rand() < self.local_search_prob:\n                    mutant_vector = position[i] + self.mutation_factor * (position[best_in_group] - position[i])\n                    trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                    trial_vector = clip_to_bounds(trial_vector)\n\n                    trial_value = func(trial_vector)\n                    eval_count += 1\n                    if trial_value < personal_best_value[i]:\n                        personal_best_value[i] = trial_value\n                        personal_best_position[i] = trial_vector\n                    if trial_value < global_best_value:\n                        global_best_value = trial_value\n                        global_best_position = trial_vector\n\n                position[i] = position[i] + self.inertia_weight * (global_best_position - position[i])\n                position[i] = clip_to_bounds(position[i])\n\n                if eval_count >= self.budget:\n                    break\n\n        return global_best_position, global_best_value", "name": "EnhancedPSOWithDynamicGrouping", "description": "Enhanced PSO with Dynamic Grouping and Adaptive Mutation for increased exploration and convergence efficiency.", "configspace": "", "generation": 94, "fitness": 0.17569689649331957, "feedback": "The algorithm EnhancedPSOWithDynamicGrouping got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.18.", "error": "", "parent_id": "e7def86d-4247-44d2-b083-41fbfc2c2f40", "metadata": {"aucs": [0.5707023351313214, 0.5707023351313214, 0.5707023351313214, 0.3836580164704826, 0.3836580164704826, 0.3836580164704826, 0.19107201086982972, 0.19107201086982972, 0.19107201086982972, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.050273477846557, 0.050273477846557, 0.050273477846557, 0.05449080729152811, 0.05449080729152811, 0.05449080729152811, 0.0490259290357149, 0.0490259290357149, 0.0490259290357149, 0.11279242250081478, 0.11279242250081478, 0.11279242250081478, 0.06413825937421735, 0.06413825937421735, 0.06413825937421735, 0.03416783268117107, 0.03416783268117107, 0.03416783268117107, 0.9776625519718921, 0.9776625519718921, 0.9776625519718921, 0.1024595437256759, 0.1024595437256759, 0.1024595437256759, 0.9493669048354124, 0.9493669048354124, 0.9493669048354124, 0.24831910951590142, 0.24831910951590142, 0.24831910951590142, 0.15713406217074222, 0.15713406217074222, 0.15713406217074222, 0.08017939550392017, 0.08017939550392017, 0.08017939550392017, 0.1677412949820346, 0.1677412949820346, 0.1677412949820346, 0.39149983697528445, 0.39149983697528445, 0.39149983697528445, 0.10350606976355192, 0.10350606976355192, 0.10350606976355192, 0.29733170233936923, 0.29733170233936923, 0.29733170233936923, 0.01608953735260088, 0.01608953735260088, 0.01608953735260088, 0.1307560301688927, 0.1307560301688927, 0.1307560301688927, 0.13388123808072272, 0.13388123808072272, 0.13388123808072272, 0.2465341986323477, 0.2465341986323477, 0.2465341986323477, 0.12300951421726491, 0.12300951421726491, 0.12300951421726491, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.055048112252552905, 0.055048112252552905, 0.055048112252552905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06932009576500908, 0.06932009576500908, 0.06932009576500908, 0.05437330035113097, 0.05437330035113097, 0.05437330035113097, 0.04655371823508725, 0.04655371823508725, 0.04655371823508725, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.10491822948631813, 0.10491822948631813, 0.10491822948631813, 0.003962637191789686, 0.003962637191789686, 0.003962637191789686, 0.05789516948981166, 0.05789516948981166, 0.05789516948981166, 0.3908457595298809, 0.3908457595298809, 0.3908457595298809, 0.43873601959588104, 0.43873601959588104, 0.43873601959588104, 0.4440012386202896, 0.4440012386202896, 0.4440012386202896, 0.0906436366700889, 0.0906436366700889, 0.0906436366700889, 0.08153544916548394, 0.08153544916548394, 0.08153544916548394, 0.043663971937144885, 0.043663971937144885, 0.043663971937144885, 0.21449824116890126, 0.21449824116890126, 0.21449824116890126, 0.3171021400569054, 0.3171021400569054, 0.3171021400569054, 0.3304462520422299, 0.3304462520422299, 0.3304462520422299, 0.14246165281039225, 0.14246165281039225, 0.14246165281039225, 0.19487058377431465, 0.19487058377431465, 0.19487058377431465, 0.2843723629592463, 0.2843723629592463, 0.2843723629592463, 0.18732604618501714, 0.18732604618501714, 0.18732604618501714, 0.18024981799291107, 0.18024981799291107, 0.18024981799291107, 0.22529593634537137, 0.22529593634537137, 0.22529593634537137, 0.19872557031341698, 0.19872557031341698, 0.19872557031341698, 0.2498040114133, 0.2498040114133, 0.2498040114133, 0.20930745654761507, 0.20930745654761507, 0.20930745654761507, 0.1707335717766355, 0.1707335717766355, 0.1707335717766355, 0.2146494600256884, 0.2146494600256884, 0.2146494600256884, 0.183486048796083, 0.183486048796083, 0.183486048796083, 0.10513021490243568, 0.10513021490243568, 0.10513021490243568, 0.1712991176354942, 0.1712991176354942, 0.1712991176354942, 0.13900901646400998, 0.13900901646400998, 0.13900901646400998, 0.37257969289249626, 0.37257969289249626, 0.37257969289249626, 0.10507638393310459, 0.10507638393310459, 0.10507638393310459, 0.10422933306088977, 0.10422933306088977, 0.10422933306088977, 0.2229589582120226, 0.2229589582120226, 0.2229589582120226, 0.20741616593559375, 0.20741616593559375, 0.20741616593559375, 0.21715077650636982, 0.21715077650636982, 0.21715077650636982, 0.07711300719868364, 0.07711300719868364, 0.07711300719868364, 0.04814893939391007, 0.04814893939391007, 0.04814893939391007, 0.05864636944825086, 0.05864636944825086, 0.05864636944825086]}, "mutation_prompt": null}
{"id": "d6555243-5c01-4bcb-9e99-ccdb7ce6eceb", "solution": "import numpy as np\n\nclass EnhancedPSOWithDynamicPopulation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 50\n        self.max_population_size = 100\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.diversity_threshold = 0.5\n        self.global_learning_rate = 0.1\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        population_size = self.initial_population_size\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        def calculate_entropy(population):\n            hist, _ = np.histogramdd(population, bins=10, range=[self.bounds]*self.dim)\n            prob = hist / np.sum(hist)\n            prob = prob[prob > 0]\n            return -np.sum(prob * np.log2(prob))\n\n        while eval_count < self.budget:\n            for i in range(population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            entropy = calculate_entropy(position)\n            self.inertia_weight = 0.9 if entropy < self.diversity_threshold else 0.6\n\n            r1, r2 = np.random.rand(population_size, self.dim), np.random.rand(population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Introduce adaptive neighborhood mutation\n            for i in range(population_size):\n                neighbors = np.random.choice(population_size, 5, replace=False)\n                best_in_neighborhood = min(neighbors, key=lambda x: personal_best_value[x])\n                mutant_vector = position[i] + self.mutation_factor * (position[best_in_neighborhood] - position[i])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n\n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n\n                position[i] = position[i] + self.global_learning_rate * (global_best_position - position[i])\n                position[i] = clip_to_bounds(position[i])\n\n                if eval_count >= self.budget:\n                    break\n\n            # Dynamic population adjustment\n            if entropy < self.diversity_threshold and population_size < self.max_population_size:\n                population_size = min(self.max_population_size, population_size + 5)\n                new_positions = np.random.uniform(self.bounds[0], self.bounds[1], (5, self.dim))\n                new_velocities = np.random.uniform(-1, 1, (5, self.dim))\n                position = np.vstack((position, new_positions))\n                velocity = np.vstack((velocity, new_velocities))\n                personal_best_position = np.vstack((personal_best_position, new_positions))\n                personal_best_value = np.append(personal_best_value, np.full(5, np.inf))\n\n        return global_best_position, global_best_value", "name": "EnhancedPSOWithDynamicPopulation", "description": "Enhanced PSO with Adaptive Neighborhood and Dynamic Population for more effective exploration and exploitation balance.", "configspace": "", "generation": 95, "fitness": 0.3098148041289614, "feedback": "The algorithm EnhancedPSOWithDynamicPopulation got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.27.", "error": "", "parent_id": "e7def86d-4247-44d2-b083-41fbfc2c2f40", "metadata": {"aucs": [0.7987562052314363, 0.7987562052314363, 0.7987562052314363, 0.756233061802426, 0.756233061802426, 0.756233061802426, 0.772837254352771, 0.772837254352771, 0.772837254352771, 0.44411015305601276, 0.44411015305601276, 0.44411015305601276, 0.4400000087580771, 0.4400000087580771, 0.4400000087580771, 0.3395825553260313, 0.3395825553260313, 0.3395825553260313, 0.11940577247578477, 0.11940577247578477, 0.11940577247578477, 0.13627114730187917, 0.13627114730187917, 0.13627114730187917, 0.13002265087545706, 0.13002265087545706, 0.13002265087545706, 0.09766739471789665, 0.09766739471789665, 0.09766739471789665, 0.12224918666856843, 0.12224918666856843, 0.12224918666856843, 0.11917712689627247, 0.11917712689627247, 0.11917712689627247, 0.9777826227175841, 0.9777826227175841, 0.9777826227175841, 0.9589776288602316, 0.9589776288602316, 0.9589776288602316, 0.9692142423924607, 0.9692142423924607, 0.9692142423924607, 0.5792840083700053, 0.5792840083700053, 0.5792840083700053, 0.1500347551146598, 0.1500347551146598, 0.1500347551146598, 0.25924617655731796, 0.25924617655731796, 0.25924617655731796, 0.22714083724122636, 0.22714083724122636, 0.22714083724122636, 0.1940552305185521, 0.1940552305185521, 0.1940552305185521, 0.8333061597562582, 0.8333061597562582, 0.8333061597562582, 0.22108573900327189, 0.22108573900327189, 0.22108573900327189, 0.10455433479059861, 0.10455433479059861, 0.10455433479059861, 0.28532611653264284, 0.28532611653264284, 0.28532611653264284, 0.2260927194499116, 0.2260927194499116, 0.2260927194499116, 0.2572426454643808, 0.2572426454643808, 0.2572426454643808, 0.265273306559916, 0.265273306559916, 0.265273306559916, 0.000576547810279826, 0.000576547810279826, 0.000576547810279826, 0.035215949557054094, 0.035215949557054094, 0.035215949557054094, 0.0006569244090929294, 0.0006569244090929294, 0.0006569244090929294, 0.10070669089061302, 0.10070669089061302, 0.10070669089061302, 0.08438500997681697, 0.08438500997681697, 0.08438500997681697, 0.022699015503935493, 0.022699015503935493, 0.022699015503935493, 0.005091617285679195, 0.005091617285679195, 0.005091617285679195, 0.0690382338719272, 0.0690382338719272, 0.0690382338719272, 0.1193925664852139, 0.1193925664852139, 0.1193925664852139, 0.11667241479043455, 0.11667241479043455, 0.11667241479043455, 0.13347723683793322, 0.13347723683793322, 0.13347723683793322, 0.06252000341676778, 0.06252000341676778, 0.06252000341676778, 0.5259400706134534, 0.5259400706134534, 0.5259400706134534, 0.5707445185625026, 0.5707445185625026, 0.5707445185625026, 0.5596117650758302, 0.5596117650758302, 0.5596117650758302, 0.12694622679399403, 0.12694622679399403, 0.12694622679399403, 0.15056402582799966, 0.15056402582799966, 0.15056402582799966, 0.18258695424314653, 0.18258695424314653, 0.18258695424314653, 0.19152689959768054, 0.19152689959768054, 0.19152689959768054, 0.22400800534495058, 0.22400800534495058, 0.22400800534495058, 0.41024297638877616, 0.41024297638877616, 0.41024297638877616, 0.3202878698914957, 0.3202878698914957, 0.3202878698914957, 0.33425702162020376, 0.33425702162020376, 0.33425702162020376, 0.5262583112067198, 0.5262583112067198, 0.5262583112067198, 0.2637738603344355, 0.2637738603344355, 0.2637738603344355, 0.27757161676469344, 0.27757161676469344, 0.27757161676469344, 0.33085847579083427, 0.33085847579083427, 0.33085847579083427, 0.23832582837160432, 0.23832582837160432, 0.23832582837160432, 0.21318197772582537, 0.21318197772582537, 0.21318197772582537, 0.23299419852322423, 0.23299419852322423, 0.23299419852322423, 0.19284359813735175, 0.19284359813735175, 0.19284359813735175, 0.24723828580495177, 0.24723828580495177, 0.24723828580495177, 0.22248121707474056, 0.22248121707474056, 0.22248121707474056, 0.8811444501229528, 0.8811444501229528, 0.8811444501229528, 0.8720695286995156, 0.8720695286995156, 0.8720695286995156, 0.13371917830859203, 0.13371917830859203, 0.13371917830859203, 0.8661710166216381, 0.8661710166216381, 0.8661710166216381, 0.7048351413074404, 0.7048351413074404, 0.7048351413074404, 0.10395336851464887, 0.10395336851464887, 0.10395336851464887, 0.2088659358275543, 0.2088659358275543, 0.2088659358275543, 0.18668862282201226, 0.18668862282201226, 0.18668862282201226, 0.19361150685855122, 0.19361150685855122, 0.19361150685855122, 0.09922575575528603, 0.09922575575528603, 0.09922575575528603, 0.10042826902773194, 0.10042826902773194, 0.10042826902773194, 0.07834816809750555, 0.07834816809750555, 0.07834816809750555]}, "mutation_prompt": null}
{"id": "3c9bfbce-94e0-4628-9514-3ec5ff50dec8", "solution": "import numpy as np\n\nclass EnhancedPSOWithDynamicPopulation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 50\n        self.max_population_size = 100\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.diversity_threshold = 0.5\n        self.global_learning_rate = 0.1\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        population_size = self.initial_population_size\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        def calculate_entropy(population):\n            hist, _ = np.histogramdd(population, bins=10, range=[self.bounds]*self.dim)\n            prob = hist / np.sum(hist)\n            prob = prob[prob > 0]\n            return -np.sum(prob * np.log2(prob))\n\n        while eval_count < self.budget:\n            for i in range(population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            entropy = calculate_entropy(position)\n            self.inertia_weight = 0.9 if entropy < self.diversity_threshold else 0.6\n\n            r1, r2 = np.random.rand(population_size, self.dim), np.random.rand(population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Introduce adaptive neighborhood mutation\n            for i in range(population_size):\n                neighbors = np.random.choice(population_size, 5, replace=False)\n                best_in_neighborhood = min(neighbors, key=lambda x: personal_best_value[x])\n                mutant_vector = position[i] + self.mutation_factor * (position[best_in_neighborhood] - position[i])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n\n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n\n                position[i] = position[i] + self.global_learning_rate * (global_best_position - position[i])\n                position[i] = clip_to_bounds(position[i])\n\n                if eval_count >= self.budget:\n                    break\n\n            # Dynamic population adjustment\n            if entropy < self.diversity_threshold and population_size < self.max_population_size:\n                population_size = min(self.max_population_size, population_size + 5)\n                new_positions = np.random.uniform(self.bounds[0], self.bounds[1], (5, self.dim))\n                new_velocities = np.random.uniform(-1, 1, (5, self.dim))\n                position = np.vstack((position, new_positions))\n                velocity = np.vstack((velocity, new_velocities))\n                personal_best_position = np.vstack((personal_best_position, new_positions))\n                personal_best_value = np.append(personal_best_value, np.full(5, np.inf))\n\n        return global_best_position, global_best_value", "name": "EnhancedPSOWithDynamicPopulation", "description": "Enhanced PSO with Adaptive Neighborhood and Dynamic Population for more effective exploration and exploitation balance.", "configspace": "", "generation": 96, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d6555243-5c01-4bcb-9e99-ccdb7ce6eceb", "metadata": {"aucs": [0.7987562052314363, 0.7987562052314363, 0.7987562052314363, 0.756233061802426, 0.756233061802426, 0.756233061802426, 0.772837254352771, 0.772837254352771, 0.772837254352771, 0.44411015305601276, 0.44411015305601276, 0.44411015305601276, 0.4400000087580771, 0.4400000087580771, 0.4400000087580771, 0.3395825553260313, 0.3395825553260313, 0.3395825553260313, 0.11940577247578477, 0.11940577247578477, 0.11940577247578477, 0.13627114730187917, 0.13627114730187917, 0.13627114730187917, 0.13002265087545706, 0.13002265087545706, 0.13002265087545706, 0.09766739471789665, 0.09766739471789665, 0.09766739471789665, 0.12224918666856843, 0.12224918666856843, 0.12224918666856843, 0.11917712689627247, 0.11917712689627247, 0.11917712689627247, 0.9777826227175841, 0.9777826227175841, 0.9777826227175841, 0.9589776288602316, 0.9589776288602316, 0.9589776288602316, 0.9692142423924607, 0.9692142423924607, 0.9692142423924607, 0.5792840083700053, 0.5792840083700053, 0.5792840083700053, 0.1500347551146598, 0.1500347551146598, 0.1500347551146598, 0.25924617655731796, 0.25924617655731796, 0.25924617655731796, 0.22714083724122636, 0.22714083724122636, 0.22714083724122636, 0.1940552305185521, 0.1940552305185521, 0.1940552305185521, 0.8333061597562582, 0.8333061597562582, 0.8333061597562582, 0.22108573900327189, 0.22108573900327189, 0.22108573900327189, 0.10455433479059861, 0.10455433479059861, 0.10455433479059861, 0.28532611653264284, 0.28532611653264284, 0.28532611653264284, 0.2260927194499116, 0.2260927194499116, 0.2260927194499116, 0.2572426454643808, 0.2572426454643808, 0.2572426454643808, 0.265273306559916, 0.265273306559916, 0.265273306559916, 0.000576547810279826, 0.000576547810279826, 0.000576547810279826, 0.035215949557054094, 0.035215949557054094, 0.035215949557054094, 0.0006569244090929294, 0.0006569244090929294, 0.0006569244090929294, 0.10070669089061302, 0.10070669089061302, 0.10070669089061302, 0.08438500997681697, 0.08438500997681697, 0.08438500997681697, 0.022699015503935493, 0.022699015503935493, 0.022699015503935493, 0.005091617285679195, 0.005091617285679195, 0.005091617285679195, 0.0690382338719272, 0.0690382338719272, 0.0690382338719272, 0.1193925664852139, 0.1193925664852139, 0.1193925664852139, 0.11667241479043455, 0.11667241479043455, 0.11667241479043455, 0.13347723683793322, 0.13347723683793322, 0.13347723683793322, 0.06252000341676778, 0.06252000341676778, 0.06252000341676778, 0.5259400706134534, 0.5259400706134534, 0.5259400706134534, 0.5707445185625026, 0.5707445185625026, 0.5707445185625026, 0.5596117650758302, 0.5596117650758302, 0.5596117650758302, 0.12694622679399403, 0.12694622679399403, 0.12694622679399403, 0.15056402582799966, 0.15056402582799966, 0.15056402582799966, 0.18258695424314653, 0.18258695424314653, 0.18258695424314653, 0.19152689959768054, 0.19152689959768054, 0.19152689959768054, 0.22400800534495058, 0.22400800534495058, 0.22400800534495058, 0.41024297638877616, 0.41024297638877616, 0.41024297638877616, 0.3202878698914957, 0.3202878698914957, 0.3202878698914957, 0.33425702162020376, 0.33425702162020376, 0.33425702162020376, 0.5262583112067198, 0.5262583112067198, 0.5262583112067198, 0.2637738603344355, 0.2637738603344355, 0.2637738603344355, 0.27757161676469344, 0.27757161676469344, 0.27757161676469344, 0.33085847579083427, 0.33085847579083427, 0.33085847579083427, 0.23832582837160432, 0.23832582837160432, 0.23832582837160432, 0.21318197772582537, 0.21318197772582537, 0.21318197772582537, 0.23299419852322423, 0.23299419852322423, 0.23299419852322423, 0.19284359813735175, 0.19284359813735175, 0.19284359813735175, 0.24723828580495177, 0.24723828580495177, 0.24723828580495177, 0.22248121707474056, 0.22248121707474056, 0.22248121707474056, 0.8811444501229528, 0.8811444501229528, 0.8811444501229528, 0.8720695286995156, 0.8720695286995156, 0.8720695286995156, 0.13371917830859203, 0.13371917830859203, 0.13371917830859203, 0.8661710166216381, 0.8661710166216381, 0.8661710166216381, 0.7048351413074404, 0.7048351413074404, 0.7048351413074404, 0.10395336851464887, 0.10395336851464887, 0.10395336851464887, 0.2088659358275543, 0.2088659358275543, 0.2088659358275543, 0.18668862282201226, 0.18668862282201226, 0.18668862282201226, 0.19361150685855122, 0.19361150685855122, 0.19361150685855122, 0.09922575575528603, 0.09922575575528603, 0.09922575575528603, 0.10042826902773194, 0.10042826902773194, 0.10042826902773194, 0.07834816809750555, 0.07834816809750555, 0.07834816809750555]}, "mutation_prompt": null}
{"id": "4bc6dee6-ca04-4741-989a-638f35f00c49", "solution": "import numpy as np\n\nclass EnhancedPSOWithDynamicPopulation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 50\n        self.max_population_size = 100\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.diversity_threshold = 0.5\n        self.global_learning_rate = 0.1\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        population_size = self.initial_population_size\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        def calculate_entropy(population):\n            hist, _ = np.histogramdd(population, bins=10, range=[self.bounds]*self.dim)\n            prob = hist / np.sum(hist)\n            prob = prob[prob > 0]\n            return -np.sum(prob * np.log2(prob))\n\n        while eval_count < self.budget:\n            for i in range(population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            entropy = calculate_entropy(position)\n            self.inertia_weight = 0.9 if entropy < self.diversity_threshold else 0.6\n\n            r1, r2 = np.random.rand(population_size, self.dim), np.random.rand(population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Introduce adaptive neighborhood mutation\n            for i in range(population_size):\n                neighbors = np.random.choice(population_size, 5, replace=False)\n                best_in_neighborhood = min(neighbors, key=lambda x: personal_best_value[x])\n                mutant_vector = position[i] + self.mutation_factor * (position[best_in_neighborhood] - position[i])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n\n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n\n                position[i] = position[i] + self.global_learning_rate * (global_best_position - position[i])\n                position[i] = clip_to_bounds(position[i])\n\n                if eval_count >= self.budget:\n                    break\n\n            # Dynamic population adjustment\n            if entropy < self.diversity_threshold and population_size < self.max_population_size:\n                population_size = min(self.max_population_size, population_size + 5)\n                new_positions = np.random.uniform(self.bounds[0], self.bounds[1], (5, self.dim))\n                new_velocities = np.random.uniform(-1, 1, (5, self.dim))\n                position = np.vstack((position, new_positions))\n                velocity = np.vstack((velocity, new_velocities))\n                personal_best_position = np.vstack((personal_best_position, new_positions))\n                personal_best_value = np.append(personal_best_value, np.full(5, np.inf))\n\n        return global_best_position, global_best_value", "name": "EnhancedPSOWithDynamicPopulation", "description": "Enhanced PSO with Adaptive Neighborhood and Dynamic Population for more effective exploration and exploitation balance.", "configspace": "", "generation": 96, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d6555243-5c01-4bcb-9e99-ccdb7ce6eceb", "metadata": {"aucs": [0.7987562052314363, 0.7987562052314363, 0.7987562052314363, 0.756233061802426, 0.756233061802426, 0.756233061802426, 0.772837254352771, 0.772837254352771, 0.772837254352771, 0.44411015305601276, 0.44411015305601276, 0.44411015305601276, 0.4400000087580771, 0.4400000087580771, 0.4400000087580771, 0.3395825553260313, 0.3395825553260313, 0.3395825553260313, 0.11940577247578477, 0.11940577247578477, 0.11940577247578477, 0.13627114730187917, 0.13627114730187917, 0.13627114730187917, 0.13002265087545706, 0.13002265087545706, 0.13002265087545706, 0.09766739471789665, 0.09766739471789665, 0.09766739471789665, 0.12224918666856843, 0.12224918666856843, 0.12224918666856843, 0.11917712689627247, 0.11917712689627247, 0.11917712689627247, 0.9777826227175841, 0.9777826227175841, 0.9777826227175841, 0.9589776288602316, 0.9589776288602316, 0.9589776288602316, 0.9692142423924607, 0.9692142423924607, 0.9692142423924607, 0.5792840083700053, 0.5792840083700053, 0.5792840083700053, 0.1500347551146598, 0.1500347551146598, 0.1500347551146598, 0.25924617655731796, 0.25924617655731796, 0.25924617655731796, 0.22714083724122636, 0.22714083724122636, 0.22714083724122636, 0.1940552305185521, 0.1940552305185521, 0.1940552305185521, 0.8333061597562582, 0.8333061597562582, 0.8333061597562582, 0.22108573900327189, 0.22108573900327189, 0.22108573900327189, 0.10455433479059861, 0.10455433479059861, 0.10455433479059861, 0.28532611653264284, 0.28532611653264284, 0.28532611653264284, 0.2260927194499116, 0.2260927194499116, 0.2260927194499116, 0.2572426454643808, 0.2572426454643808, 0.2572426454643808, 0.265273306559916, 0.265273306559916, 0.265273306559916, 0.000576547810279826, 0.000576547810279826, 0.000576547810279826, 0.035215949557054094, 0.035215949557054094, 0.035215949557054094, 0.0006569244090929294, 0.0006569244090929294, 0.0006569244090929294, 0.10070669089061302, 0.10070669089061302, 0.10070669089061302, 0.08438500997681697, 0.08438500997681697, 0.08438500997681697, 0.022699015503935493, 0.022699015503935493, 0.022699015503935493, 0.005091617285679195, 0.005091617285679195, 0.005091617285679195, 0.0690382338719272, 0.0690382338719272, 0.0690382338719272, 0.1193925664852139, 0.1193925664852139, 0.1193925664852139, 0.11667241479043455, 0.11667241479043455, 0.11667241479043455, 0.13347723683793322, 0.13347723683793322, 0.13347723683793322, 0.06252000341676778, 0.06252000341676778, 0.06252000341676778, 0.5259400706134534, 0.5259400706134534, 0.5259400706134534, 0.5707445185625026, 0.5707445185625026, 0.5707445185625026, 0.5596117650758302, 0.5596117650758302, 0.5596117650758302, 0.12694622679399403, 0.12694622679399403, 0.12694622679399403, 0.15056402582799966, 0.15056402582799966, 0.15056402582799966, 0.18258695424314653, 0.18258695424314653, 0.18258695424314653, 0.19152689959768054, 0.19152689959768054, 0.19152689959768054, 0.22400800534495058, 0.22400800534495058, 0.22400800534495058, 0.41024297638877616, 0.41024297638877616, 0.41024297638877616, 0.3202878698914957, 0.3202878698914957, 0.3202878698914957, 0.33425702162020376, 0.33425702162020376, 0.33425702162020376, 0.5262583112067198, 0.5262583112067198, 0.5262583112067198, 0.2637738603344355, 0.2637738603344355, 0.2637738603344355, 0.27757161676469344, 0.27757161676469344, 0.27757161676469344, 0.33085847579083427, 0.33085847579083427, 0.33085847579083427, 0.23832582837160432, 0.23832582837160432, 0.23832582837160432, 0.21318197772582537, 0.21318197772582537, 0.21318197772582537, 0.23299419852322423, 0.23299419852322423, 0.23299419852322423, 0.19284359813735175, 0.19284359813735175, 0.19284359813735175, 0.24723828580495177, 0.24723828580495177, 0.24723828580495177, 0.22248121707474056, 0.22248121707474056, 0.22248121707474056, 0.8811444501229528, 0.8811444501229528, 0.8811444501229528, 0.8720695286995156, 0.8720695286995156, 0.8720695286995156, 0.13371917830859203, 0.13371917830859203, 0.13371917830859203, 0.8661710166216381, 0.8661710166216381, 0.8661710166216381, 0.7048351413074404, 0.7048351413074404, 0.7048351413074404, 0.10395336851464887, 0.10395336851464887, 0.10395336851464887, 0.2088659358275543, 0.2088659358275543, 0.2088659358275543, 0.18668862282201226, 0.18668862282201226, 0.18668862282201226, 0.19361150685855122, 0.19361150685855122, 0.19361150685855122, 0.09922575575528603, 0.09922575575528603, 0.09922575575528603, 0.10042826902773194, 0.10042826902773194, 0.10042826902773194, 0.07834816809750555, 0.07834816809750555, 0.07834816809750555]}, "mutation_prompt": null}
{"id": "e20a95e8-643d-4589-b286-b4ebbf6c483d", "solution": "import numpy as np\n\nclass EnhancedPSOWithDynamicPopulation:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 50\n        self.max_population_size = 100\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.diversity_threshold = 0.5\n        self.global_learning_rate = 0.1\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        population_size = self.initial_population_size\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        def calculate_entropy(population):\n            hist, _ = np.histogramdd(population, bins=10, range=[self.bounds]*self.dim)\n            prob = hist / np.sum(hist)\n            prob = prob[prob > 0]\n            return -np.sum(prob * np.log2(prob))\n\n        while eval_count < self.budget:\n            for i in range(population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            entropy = calculate_entropy(position)\n            self.inertia_weight = 0.9 if entropy < self.diversity_threshold else 0.6\n\n            r1, r2 = np.random.rand(population_size, self.dim), np.random.rand(population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position))\n            position = clip_to_bounds(position + velocity)\n\n            # Introduce adaptive neighborhood mutation\n            for i in range(population_size):\n                neighbors = np.random.choice(population_size, 5, replace=False)\n                best_in_neighborhood = min(neighbors, key=lambda x: personal_best_value[x])\n                mutant_vector = position[i] + self.mutation_factor * (position[best_in_neighborhood] - position[i])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n\n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n\n                position[i] = position[i] + self.global_learning_rate * (global_best_position - position[i])\n                position[i] = clip_to_bounds(position[i])\n\n                if eval_count >= self.budget:\n                    break\n\n            # Dynamic population adjustment\n            if entropy < self.diversity_threshold and population_size < self.max_population_size:\n                population_size = min(self.max_population_size, population_size + 5)\n                new_positions = np.random.uniform(self.bounds[0], self.bounds[1], (5, self.dim))\n                new_velocities = np.random.uniform(-1, 1, (5, self.dim))\n                position = np.vstack((position, new_positions))\n                velocity = np.vstack((velocity, new_velocities))\n                personal_best_position = np.vstack((personal_best_position, new_positions))\n                personal_best_value = np.append(personal_best_value, np.full(5, np.inf))\n\n        return global_best_position, global_best_value", "name": "EnhancedPSOWithDynamicPopulation", "description": "Enhanced PSO with Adaptive Neighborhood and Dynamic Population for more effective exploration and exploitation balance.", "configspace": "", "generation": 96, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "d6555243-5c01-4bcb-9e99-ccdb7ce6eceb", "metadata": {"aucs": [0.7987562052314363, 0.7987562052314363, 0.7987562052314363, 0.756233061802426, 0.756233061802426, 0.756233061802426, 0.772837254352771, 0.772837254352771, 0.772837254352771, 0.44411015305601276, 0.44411015305601276, 0.44411015305601276, 0.4400000087580771, 0.4400000087580771, 0.4400000087580771, 0.3395825553260313, 0.3395825553260313, 0.3395825553260313, 0.11940577247578477, 0.11940577247578477, 0.11940577247578477, 0.13627114730187917, 0.13627114730187917, 0.13627114730187917, 0.13002265087545706, 0.13002265087545706, 0.13002265087545706, 0.09766739471789665, 0.09766739471789665, 0.09766739471789665, 0.12224918666856843, 0.12224918666856843, 0.12224918666856843, 0.11917712689627247, 0.11917712689627247, 0.11917712689627247, 0.9777826227175841, 0.9777826227175841, 0.9777826227175841, 0.9589776288602316, 0.9589776288602316, 0.9589776288602316, 0.9692142423924607, 0.9692142423924607, 0.9692142423924607, 0.5792840083700053, 0.5792840083700053, 0.5792840083700053, 0.1500347551146598, 0.1500347551146598, 0.1500347551146598, 0.25924617655731796, 0.25924617655731796, 0.25924617655731796, 0.22714083724122636, 0.22714083724122636, 0.22714083724122636, 0.1940552305185521, 0.1940552305185521, 0.1940552305185521, 0.8333061597562582, 0.8333061597562582, 0.8333061597562582, 0.22108573900327189, 0.22108573900327189, 0.22108573900327189, 0.10455433479059861, 0.10455433479059861, 0.10455433479059861, 0.28532611653264284, 0.28532611653264284, 0.28532611653264284, 0.2260927194499116, 0.2260927194499116, 0.2260927194499116, 0.2572426454643808, 0.2572426454643808, 0.2572426454643808, 0.265273306559916, 0.265273306559916, 0.265273306559916, 0.000576547810279826, 0.000576547810279826, 0.000576547810279826, 0.035215949557054094, 0.035215949557054094, 0.035215949557054094, 0.0006569244090929294, 0.0006569244090929294, 0.0006569244090929294, 0.10070669089061302, 0.10070669089061302, 0.10070669089061302, 0.08438500997681697, 0.08438500997681697, 0.08438500997681697, 0.022699015503935493, 0.022699015503935493, 0.022699015503935493, 0.005091617285679195, 0.005091617285679195, 0.005091617285679195, 0.0690382338719272, 0.0690382338719272, 0.0690382338719272, 0.1193925664852139, 0.1193925664852139, 0.1193925664852139, 0.11667241479043455, 0.11667241479043455, 0.11667241479043455, 0.13347723683793322, 0.13347723683793322, 0.13347723683793322, 0.06252000341676778, 0.06252000341676778, 0.06252000341676778, 0.5259400706134534, 0.5259400706134534, 0.5259400706134534, 0.5707445185625026, 0.5707445185625026, 0.5707445185625026, 0.5596117650758302, 0.5596117650758302, 0.5596117650758302, 0.12694622679399403, 0.12694622679399403, 0.12694622679399403, 0.15056402582799966, 0.15056402582799966, 0.15056402582799966, 0.18258695424314653, 0.18258695424314653, 0.18258695424314653, 0.19152689959768054, 0.19152689959768054, 0.19152689959768054, 0.22400800534495058, 0.22400800534495058, 0.22400800534495058, 0.41024297638877616, 0.41024297638877616, 0.41024297638877616, 0.3202878698914957, 0.3202878698914957, 0.3202878698914957, 0.33425702162020376, 0.33425702162020376, 0.33425702162020376, 0.5262583112067198, 0.5262583112067198, 0.5262583112067198, 0.2637738603344355, 0.2637738603344355, 0.2637738603344355, 0.27757161676469344, 0.27757161676469344, 0.27757161676469344, 0.33085847579083427, 0.33085847579083427, 0.33085847579083427, 0.23832582837160432, 0.23832582837160432, 0.23832582837160432, 0.21318197772582537, 0.21318197772582537, 0.21318197772582537, 0.23299419852322423, 0.23299419852322423, 0.23299419852322423, 0.19284359813735175, 0.19284359813735175, 0.19284359813735175, 0.24723828580495177, 0.24723828580495177, 0.24723828580495177, 0.22248121707474056, 0.22248121707474056, 0.22248121707474056, 0.8811444501229528, 0.8811444501229528, 0.8811444501229528, 0.8720695286995156, 0.8720695286995156, 0.8720695286995156, 0.13371917830859203, 0.13371917830859203, 0.13371917830859203, 0.8661710166216381, 0.8661710166216381, 0.8661710166216381, 0.7048351413074404, 0.7048351413074404, 0.7048351413074404, 0.10395336851464887, 0.10395336851464887, 0.10395336851464887, 0.2088659358275543, 0.2088659358275543, 0.2088659358275543, 0.18668862282201226, 0.18668862282201226, 0.18668862282201226, 0.19361150685855122, 0.19361150685855122, 0.19361150685855122, 0.09922575575528603, 0.09922575575528603, 0.09922575575528603, 0.10042826902773194, 0.10042826902773194, 0.10042826902773194, 0.07834816809750555, 0.07834816809750555, 0.07834816809750555]}, "mutation_prompt": null}
{"id": "51dc296e-8824-4760-8ebf-0e8b0583f826", "solution": "import numpy as np\n\nclass AugmentedPSOWithAdaptiveMomentum:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.initial_population_size = 50\n        self.max_population_size = 100\n        self.inertia_weight = 0.7\n        self.cognitive_coeff = 1.5\n        self.social_coeff = 1.5\n        self.mutation_factor = 0.8\n        self.crossover_rate = 0.9\n        self.diversity_threshold = 0.5\n        self.global_learning_rate = 0.1\n        self.momentum_scale = 0.5\n\n    def __call__(self, func):\n        np.random.seed(0)\n\n        population_size = self.initial_population_size\n        position = np.random.uniform(self.bounds[0], self.bounds[1], (population_size, self.dim))\n        velocity = np.random.uniform(-1, 1, (population_size, self.dim))\n        personal_best_position = np.copy(position)\n        personal_best_value = np.full(population_size, np.inf)\n\n        global_best_value = np.inf\n        global_best_position = np.zeros(self.dim)\n\n        eval_count = 0\n\n        def clip_to_bounds(particles):\n            return np.clip(particles, self.bounds[0], self.bounds[1])\n\n        def calculate_entropy(population):\n            hist, _ = np.histogramdd(population, bins=10, range=[self.bounds]*self.dim)\n            prob = hist / np.sum(hist)\n            prob = prob[prob > 0]\n            return -np.sum(prob * np.log2(prob))\n\n        while eval_count < self.budget:\n            for i in range(population_size):\n                current_value = func(position[i])\n                eval_count += 1\n                if current_value < personal_best_value[i]:\n                    personal_best_value[i] = current_value\n                    personal_best_position[i] = position[i]\n                if current_value < global_best_value:\n                    global_best_value = current_value\n                    global_best_position = position[i]\n\n            entropy = calculate_entropy(position)\n            momentum = self.momentum_scale * (1 - entropy / np.log2(self.dim))\n            self.inertia_weight = 0.9 if entropy < self.diversity_threshold else 0.6\n\n            r1, r2 = np.random.rand(population_size, self.dim), np.random.rand(population_size, self.dim)\n            velocity = (self.inertia_weight * velocity +\n                        self.cognitive_coeff * r1 * (personal_best_position - position) +\n                        self.social_coeff * r2 * (global_best_position - position) +\n                        momentum * velocity)\n            position = clip_to_bounds(position + velocity)\n\n            # Introduce adaptive neighborhood mutation\n            for i in range(population_size):\n                neighbors = np.random.choice(population_size, 5, replace=False)\n                best_in_neighborhood = min(neighbors, key=lambda x: personal_best_value[x])\n                mutant_vector = position[i] + self.mutation_factor * (position[best_in_neighborhood] - position[i])\n                trial_vector = np.where(np.random.rand(self.dim) < self.crossover_rate, mutant_vector, position[i])\n                trial_vector = clip_to_bounds(trial_vector)\n\n                trial_value = func(trial_vector)\n                eval_count += 1\n                if trial_value < personal_best_value[i]:\n                    personal_best_value[i] = trial_value\n                    personal_best_position[i] = trial_vector\n                if trial_value < global_best_value:\n                    global_best_value = trial_value\n                    global_best_position = trial_vector\n\n                position[i] = clip_to_bounds(position[i] + self.global_learning_rate * (global_best_position - position[i]))\n\n                if eval_count >= self.budget:\n                    break\n\n            # Dynamic population adjustment\n            if entropy < self.diversity_threshold and population_size < self.max_population_size:\n                population_size = min(self.max_population_size, population_size + 5)\n                new_positions = np.random.uniform(self.bounds[0], self.bounds[1], (5, self.dim))\n                new_velocities = np.random.uniform(-1, 1, (5, self.dim))\n                position = np.vstack((position, new_positions))\n                velocity = np.vstack((velocity, new_velocities))\n                personal_best_position = np.vstack((personal_best_position, new_positions))\n                personal_best_value = np.append(personal_best_value, np.full(5, np.inf))\n\n        return global_best_position, global_best_value", "name": "AugmentedPSOWithAdaptiveMomentum", "description": "Augmented PSO with Adaptive Momentum and Dynamic Population for improved convergence using entropy-based velocity scaling.", "configspace": "", "generation": 99, "fitness": 0.31141266288234665, "feedback": "The algorithm AugmentedPSOWithAdaptiveMomentum got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.24.", "error": "", "parent_id": "d6555243-5c01-4bcb-9e99-ccdb7ce6eceb", "metadata": {"aucs": [0.69216372532194, 0.69216372532194, 0.69216372532194, 0.68806060076736, 0.68806060076736, 0.68806060076736, 0.6813120357306973, 0.6813120357306973, 0.6813120357306973, 0.37510203050743407, 0.37510203050743407, 0.37510203050743407, 0.3747776150716149, 0.3747776150716149, 0.3747776150716149, 0.4192179563047641, 0.4192179563047641, 0.4192179563047641, 0.24690576505072526, 0.24690576505072526, 0.24690576505072526, 0.1365728232498825, 0.1365728232498825, 0.1365728232498825, 0.09223285882940968, 0.09223285882940968, 0.09223285882940968, 0.12203226832199743, 0.12203226832199743, 0.12203226832199743, 0.14397504446808107, 0.14397504446808107, 0.14397504446808107, 0.13385233759553972, 0.13385233759553972, 0.13385233759553972, 0.9554663904080385, 0.9554663904080385, 0.9554663904080385, 0.9305163083045992, 0.9305163083045992, 0.9305163083045992, 0.9413044631448018, 0.9413044631448018, 0.9413044631448018, 0.4133809719096121, 0.4133809719096121, 0.4133809719096121, 0.4124562886290919, 0.4124562886290919, 0.4124562886290919, 0.4314376088316164, 0.4314376088316164, 0.4314376088316164, 0.21406774534223483, 0.21406774534223483, 0.21406774534223483, 0.38238972472734334, 0.38238972472734334, 0.38238972472734334, 0.2358820569648048, 0.2358820569648048, 0.2358820569648048, 0.21768487893801125, 0.21768487893801125, 0.21768487893801125, 0.16310127867479407, 0.16310127867479407, 0.16310127867479407, 0.32290789867322833, 0.32290789867322833, 0.32290789867322833, 0.31158389339075543, 0.31158389339075543, 0.31158389339075543, 0.22423907116631125, 0.22423907116631125, 0.22423907116631125, 0.26681833032609736, 0.26681833032609736, 0.26681833032609736, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.049396832637792376, 0.049396832637792376, 0.049396832637792376, 0.05184463764330849, 0.05184463764330849, 0.05184463764330849, 0.1065439602392938, 0.1065439602392938, 0.1065439602392938, 0.07351209885099452, 0.07351209885099452, 0.07351209885099452, 0.04437037182957371, 0.04437037182957371, 0.04437037182957371, 0.22731089849190922, 0.22731089849190922, 0.22731089849190922, 0.06060825453380114, 0.06060825453380114, 0.06060825453380114, 0.12992295294588707, 0.12992295294588707, 0.12992295294588707, 0.227077077526888, 0.227077077526888, 0.227077077526888, 0.21112224993001882, 0.21112224993001882, 0.21112224993001882, 0.1322616878586541, 0.1322616878586541, 0.1322616878586541, 0.5058628071704732, 0.5058628071704732, 0.5058628071704732, 0.5143755738015157, 0.5143755738015157, 0.5143755738015157, 0.53263973160701, 0.53263973160701, 0.53263973160701, 0.13147679129979029, 0.13147679129979029, 0.13147679129979029, 0.11148724551499223, 0.11148724551499223, 0.11148724551499223, 0.11063966132098979, 0.11063966132098979, 0.11063966132098979, 0.2010420475945197, 0.2010420475945197, 0.2010420475945197, 0.45392078590684704, 0.45392078590684704, 0.45392078590684704, 0.26775189842840086, 0.26775189842840086, 0.26775189842840086, 0.3752434018936296, 0.3752434018936296, 0.3752434018936296, 0.3977009662221641, 0.3977009662221641, 0.3977009662221641, 0.40137445343087497, 0.40137445343087497, 0.40137445343087497, 0.18815174786893407, 0.18815174786893407, 0.18815174786893407, 0.2399425662023571, 0.2399425662023571, 0.2399425662023571, 0.20538764461442938, 0.20538764461442938, 0.20538764461442938, 0.23725043354222142, 0.23725043354222142, 0.23725043354222142, 0.2513904924249152, 0.2513904924249152, 0.2513904924249152, 0.2355472780184371, 0.2355472780184371, 0.2355472780184371, 0.2013959383844287, 0.2013959383844287, 0.2013959383844287, 0.2533430668029759, 0.2533430668029759, 0.2533430668029759, 0.19633606941864523, 0.19633606941864523, 0.19633606941864523, 0.887405062397939, 0.887405062397939, 0.887405062397939, 0.9335742078967112, 0.9335742078967112, 0.9335742078967112, 0.14294759086083741, 0.14294759086083741, 0.14294759086083741, 0.7742228922018234, 0.7742228922018234, 0.7742228922018234, 0.7072495729598722, 0.7072495729598722, 0.7072495729598722, 0.10485249497567584, 0.10485249497567584, 0.10485249497567584, 0.2003166496673895, 0.2003166496673895, 0.2003166496673895, 0.22722299487990305, 0.22722299487990305, 0.22722299487990305, 0.24660116765475126, 0.24660116765475126, 0.24660116765475126, 0.11021669266292411, 0.11021669266292411, 0.11021669266292411, 0.0939514030725428, 0.0939514030725428, 0.0939514030725428, 0.13737740369112839, 0.13737740369112839, 0.13737740369112839]}, "mutation_prompt": null}
