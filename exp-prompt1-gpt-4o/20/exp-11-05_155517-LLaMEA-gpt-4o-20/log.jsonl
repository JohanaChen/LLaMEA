{"id": "df53f594-e2e8-4b28-93ec-bebd60243860", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim  # Typically set larger than the dimension\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.strategy = 'rand/1/bin'\n        \n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n                cross_points = np.random.rand(self.dim) < self.crossover_probability\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]\n\n# Example of usage:\n# optimizer = AdaptiveDifferentialEvolution(budget=1000, dim=10)\n# best_solution = optimizer(func)", "name": "AdaptiveDifferentialEvolution", "description": "An adaptive differential evolution algorithm with a self-tuning mechanism for balancing exploration and exploitation.", "configspace": "", "generation": 0, "fitness": 0.269405465378688, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.21.", "error": "", "parent_id": null, "metadata": {"aucs": [0.6347639873287658, 0.6347639873287658, 0.6347639873287658, 0.639099738634568, 0.639099738634568, 0.639099738634568, 0.668923418451544, 0.668923418451544, 0.668923418451544, 0.39091271839757624, 0.39091271839757624, 0.39091271839757624, 0.3682890090720019, 0.3682890090720019, 0.3682890090720019, 0.3872529216576597, 0.3872529216576597, 0.3872529216576597, 0.09021450933561659, 0.09021450933561659, 0.09021450933561659, 0.08628525152095623, 0.08628525152095623, 0.08628525152095623, 0.1131900677875296, 0.1131900677875296, 0.1131900677875296, 0.07992030719644261, 0.07992030719644261, 0.07992030719644261, 0.08486227308497996, 0.08486227308497996, 0.08486227308497996, 0.09033069144159822, 0.09033069144159822, 0.09033069144159822, 0.950763368849249, 0.950763368849249, 0.950763368849249, 0.968801452262915, 0.968801452262915, 0.968801452262915, 0.8763643711409187, 0.8763643711409187, 0.8763643711409187, 0.2747290998845626, 0.2747290998845626, 0.2747290998845626, 0.29784418893886333, 0.29784418893886333, 0.29784418893886333, 0.2948339327855436, 0.2948339327855436, 0.2948339327855436, 0.3669731601367011, 0.3669731601367011, 0.3669731601367011, 0.5447875626279879, 0.5447875626279879, 0.5447875626279879, 0.5186719852110835, 0.5186719852110835, 0.5186719852110835, 0.20703332925821916, 0.20703332925821916, 0.20703332925821916, 0.18961181441052966, 0.18961181441052966, 0.18961181441052966, 0.2115845126497672, 0.2115845126497672, 0.2115845126497672, 0.18388579294472907, 0.18388579294472907, 0.18388579294472907, 0.2002003052112621, 0.2002003052112621, 0.2002003052112621, 0.1818124934119636, 0.1818124934119636, 0.1818124934119636, 0.11195149610249189, 0.11195149610249189, 0.11195149610249189, 0.1200982526051122, 0.1200982526051122, 0.1200982526051122, 0.15025563692232868, 0.15025563692232868, 0.15025563692232868, 0.2951226005320192, 0.2951226005320192, 0.2951226005320192, 0.23817510016319188, 0.23817510016319188, 0.23817510016319188, 0.3353444167245111, 0.3353444167245111, 0.3353444167245111, 0.01466478891165135, 0.01466478891165135, 0.01466478891165135, 0.05783736924097049, 0.05783736924097049, 0.05783736924097049, 0.01563355708337799, 0.01563355708337799, 0.01563355708337799, 0.16909783190021266, 0.16909783190021266, 0.16909783190021266, 0.14228281226070172, 0.14228281226070172, 0.14228281226070172, 0.16028903611333645, 0.16028903611333645, 0.16028903611333645, 0.4849483461136376, 0.4849483461136376, 0.4849483461136376, 0.490034582663205, 0.490034582663205, 0.490034582663205, 0.479861673253985, 0.479861673253985, 0.479861673253985, 0.08894869601694178, 0.08894869601694178, 0.08894869601694178, 0.07398485647133257, 0.07398485647133257, 0.07398485647133257, 0.08127889950828227, 0.08127889950828227, 0.08127889950828227, 0.14126999479826696, 0.14126999479826696, 0.14126999479826696, 0.14278740181755734, 0.14278740181755734, 0.14278740181755734, 0.14845885400513925, 0.14845885400513925, 0.14845885400513925, 0.2592032602388563, 0.2592032602388563, 0.2592032602388563, 0.25634619429211125, 0.25634619429211125, 0.25634619429211125, 0.2905928407459555, 0.2905928407459555, 0.2905928407459555, 0.20187911150426963, 0.20187911150426963, 0.20187911150426963, 0.17838232767433115, 0.17838232767433115, 0.17838232767433115, 0.22086002999408416, 0.22086002999408416, 0.22086002999408416, 0.1984017355745059, 0.1984017355745059, 0.1984017355745059, 0.19392852450829923, 0.19392852450829923, 0.19392852450829923, 0.19676566643898663, 0.19676566643898663, 0.19676566643898663, 0.17276715936510811, 0.17276715936510811, 0.17276715936510811, 0.16695189782075137, 0.16695189782075137, 0.16695189782075137, 0.18136013867062295, 0.18136013867062295, 0.18136013867062295, 0.587689471837209, 0.587689471837209, 0.587689471837209, 0.49448416597999945, 0.49448416597999945, 0.49448416597999945, 0.16230351916771812, 0.16230351916771812, 0.16230351916771812, 0.19740091972140394, 0.19740091972140394, 0.19740091972140394, 0.15248810260188017, 0.15248810260188017, 0.15248810260188017, 0.6700227292819723, 0.6700227292819723, 0.6700227292819723, 0.18059373860312922, 0.18059373860312922, 0.18059373860312922, 0.19886437414221214, 0.19886437414221214, 0.19886437414221214, 0.18295672753864567, 0.18295672753864567, 0.18295672753864567, 0.07409019744188006, 0.07409019744188006, 0.07409019744188006, 0.06501128680045876, 0.06501128680045876, 0.06501128680045876, 0.06958092047935693, 0.06958092047935693, 0.06958092047935693]}, "mutation_prompt": null}
{"id": "bf46ae4a-b5e5-4812-aa83-958466f9135c", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.strategy = 'rand/1/bin'\n        \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability based on individual success rates\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]  # Decay success rate gradually\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Utilize an adaptive crossover mechanism based on individual success rates for enhanced convergence in differential evolution.", "configspace": "", "generation": 1, "fitness": 0.27797443456657517, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.21.", "error": "", "parent_id": "df53f594-e2e8-4b28-93ec-bebd60243860", "metadata": {"aucs": [0.6322724484417832, 0.6322724484417832, 0.6322724484417832, 0.6674533938810334, 0.6674533938810334, 0.6674533938810334, 0.5984909833916332, 0.5984909833916332, 0.5984909833916332, 0.3777435967165469, 0.3777435967165469, 0.3777435967165469, 0.3948069591212676, 0.3948069591212676, 0.3948069591212676, 0.3737112998463642, 0.3737112998463642, 0.3737112998463642, 0.09251359563862038, 0.09251359563862038, 0.09251359563862038, 0.08964310202513082, 0.08964310202513082, 0.08964310202513082, 0.11769714836337863, 0.11769714836337863, 0.11769714836337863, 0.09743082277133763, 0.09743082277133763, 0.09743082277133763, 0.09456440158673163, 0.09456440158673163, 0.09456440158673163, 0.10295252486710926, 0.10295252486710926, 0.10295252486710926, 0.9521284489714096, 0.9521284489714096, 0.9521284489714096, 0.9194044159838752, 0.9194044159838752, 0.9194044159838752, 0.9440649688334671, 0.9440649688334671, 0.9440649688334671, 0.2741842262905233, 0.2741842262905233, 0.2741842262905233, 0.2806800656797305, 0.2806800656797305, 0.2806800656797305, 0.31272853743531026, 0.31272853743531026, 0.31272853743531026, 0.5679506732517643, 0.5679506732517643, 0.5679506732517643, 0.5670026393585235, 0.5670026393585235, 0.5670026393585235, 0.613478442823455, 0.613478442823455, 0.613478442823455, 0.24155254627498957, 0.24155254627498957, 0.24155254627498957, 0.19466054938351252, 0.19466054938351252, 0.19466054938351252, 0.21215100977311263, 0.21215100977311263, 0.21215100977311263, 0.18917631174148275, 0.18917631174148275, 0.18917631174148275, 0.20794955021640982, 0.20794955021640982, 0.20794955021640982, 0.23516741197349234, 0.23516741197349234, 0.23516741197349234, 0.1800102454968151, 0.1800102454968151, 0.1800102454968151, 0.18671696282631667, 0.18671696282631667, 0.18671696282631667, 0.17990081564732097, 0.17990081564732097, 0.17990081564732097, 0.29733061978334074, 0.29733061978334074, 0.29733061978334074, 0.31913503287867817, 0.31913503287867817, 0.31913503287867817, 0.3413948871750506, 0.3413948871750506, 0.3413948871750506, 0.07753701426346082, 0.07753701426346082, 0.07753701426346082, 0.09851853039177316, 0.09851853039177316, 0.09851853039177316, 0.03646571544161581, 0.03646571544161581, 0.03646571544161581, 0.17972318749795646, 0.17972318749795646, 0.17972318749795646, 0.1667245457525507, 0.1667245457525507, 0.1667245457525507, 0.18050060695495884, 0.18050060695495884, 0.18050060695495884, 0.525970424594967, 0.525970424594967, 0.525970424594967, 0.509047557322313, 0.509047557322313, 0.509047557322313, 0.465328563344404, 0.465328563344404, 0.465328563344404, 0.0867782522599495, 0.0867782522599495, 0.0867782522599495, 0.07644941840888131, 0.07644941840888131, 0.07644941840888131, 0.09870765783727675, 0.09870765783727675, 0.09870765783727675, 0.1509530318282445, 0.1509530318282445, 0.1509530318282445, 0.13019200483689797, 0.13019200483689797, 0.13019200483689797, 0.1467242452598415, 0.1467242452598415, 0.1467242452598415, 0.2877216586256339, 0.2877216586256339, 0.2877216586256339, 0.2737744075640647, 0.2737744075640647, 0.2737744075640647, 0.29398420780669277, 0.29398420780669277, 0.29398420780669277, 0.21534826242644078, 0.21534826242644078, 0.21534826242644078, 0.18896567170691325, 0.18896567170691325, 0.18896567170691325, 0.2247280331935987, 0.2247280331935987, 0.2247280331935987, 0.19295255415883839, 0.19295255415883839, 0.19295255415883839, 0.17297697323966787, 0.17297697323966787, 0.17297697323966787, 0.1851848280830154, 0.1851848280830154, 0.1851848280830154, 0.18602629315650743, 0.18602629315650743, 0.18602629315650743, 0.1686392980961645, 0.1686392980961645, 0.1686392980961645, 0.18594165311853827, 0.18594165311853827, 0.18594165311853827, 0.7080446623321696, 0.7080446623321696, 0.7080446623321696, 0.17844805433414934, 0.17844805433414934, 0.17844805433414934, 0.47816930939300517, 0.47816930939300517, 0.47816930939300517, 0.20145180102140814, 0.20145180102140814, 0.20145180102140814, 0.18593737846148528, 0.18593737846148528, 0.18593737846148528, 0.1507870855150808, 0.1507870855150808, 0.1507870855150808, 0.17246005274811904, 0.17246005274811904, 0.17246005274811904, 0.1856663863592216, 0.1856663863592216, 0.1856663863592216, 0.17784006927871487, 0.17784006927871487, 0.17784006927871487, 0.07224792315430806, 0.07224792315430806, 0.07224792315430806, 0.06852588420194206, 0.06852588420194206, 0.06852588420194206, 0.07266744637312039, 0.07266744637312039, 0.07266744637312039]}, "mutation_prompt": null}
{"id": "0a6acdaa-1007-457e-94f5-88fa3d28b72d", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.strategy = 'rand/1/bin'\n        \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability based on individual success rates\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]  # Decay success rate gradually\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Utilize an adaptive crossover mechanism based on individual success rates for enhanced convergence in differential evolution.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bf46ae4a-b5e5-4812-aa83-958466f9135c", "metadata": {"aucs": [0.6322724484417832, 0.6322724484417832, 0.6322724484417832, 0.6674533938810334, 0.6674533938810334, 0.6674533938810334, 0.5984909833916332, 0.5984909833916332, 0.5984909833916332, 0.3777435967165469, 0.3777435967165469, 0.3777435967165469, 0.3948069591212676, 0.3948069591212676, 0.3948069591212676, 0.3737112998463642, 0.3737112998463642, 0.3737112998463642, 0.09251359563862038, 0.09251359563862038, 0.09251359563862038, 0.08964310202513082, 0.08964310202513082, 0.08964310202513082, 0.11769714836337863, 0.11769714836337863, 0.11769714836337863, 0.09743082277133763, 0.09743082277133763, 0.09743082277133763, 0.09456440158673163, 0.09456440158673163, 0.09456440158673163, 0.10295252486710926, 0.10295252486710926, 0.10295252486710926, 0.9521284489714096, 0.9521284489714096, 0.9521284489714096, 0.9194044159838752, 0.9194044159838752, 0.9194044159838752, 0.9440649688334671, 0.9440649688334671, 0.9440649688334671, 0.2741842262905233, 0.2741842262905233, 0.2741842262905233, 0.2806800656797305, 0.2806800656797305, 0.2806800656797305, 0.31272853743531026, 0.31272853743531026, 0.31272853743531026, 0.5679506732517643, 0.5679506732517643, 0.5679506732517643, 0.5670026393585235, 0.5670026393585235, 0.5670026393585235, 0.613478442823455, 0.613478442823455, 0.613478442823455, 0.24155254627498957, 0.24155254627498957, 0.24155254627498957, 0.19466054938351252, 0.19466054938351252, 0.19466054938351252, 0.21215100977311263, 0.21215100977311263, 0.21215100977311263, 0.18917631174148275, 0.18917631174148275, 0.18917631174148275, 0.20794955021640982, 0.20794955021640982, 0.20794955021640982, 0.23516741197349234, 0.23516741197349234, 0.23516741197349234, 0.1800102454968151, 0.1800102454968151, 0.1800102454968151, 0.18671696282631667, 0.18671696282631667, 0.18671696282631667, 0.17990081564732097, 0.17990081564732097, 0.17990081564732097, 0.29733061978334074, 0.29733061978334074, 0.29733061978334074, 0.31913503287867817, 0.31913503287867817, 0.31913503287867817, 0.3413948871750506, 0.3413948871750506, 0.3413948871750506, 0.07753701426346082, 0.07753701426346082, 0.07753701426346082, 0.09851853039177316, 0.09851853039177316, 0.09851853039177316, 0.03646571544161581, 0.03646571544161581, 0.03646571544161581, 0.17972318749795646, 0.17972318749795646, 0.17972318749795646, 0.1667245457525507, 0.1667245457525507, 0.1667245457525507, 0.18050060695495884, 0.18050060695495884, 0.18050060695495884, 0.525970424594967, 0.525970424594967, 0.525970424594967, 0.509047557322313, 0.509047557322313, 0.509047557322313, 0.465328563344404, 0.465328563344404, 0.465328563344404, 0.0867782522599495, 0.0867782522599495, 0.0867782522599495, 0.07644941840888131, 0.07644941840888131, 0.07644941840888131, 0.09870765783727675, 0.09870765783727675, 0.09870765783727675, 0.1509530318282445, 0.1509530318282445, 0.1509530318282445, 0.13019200483689797, 0.13019200483689797, 0.13019200483689797, 0.1467242452598415, 0.1467242452598415, 0.1467242452598415, 0.2877216586256339, 0.2877216586256339, 0.2877216586256339, 0.2737744075640647, 0.2737744075640647, 0.2737744075640647, 0.29398420780669277, 0.29398420780669277, 0.29398420780669277, 0.21534826242644078, 0.21534826242644078, 0.21534826242644078, 0.18896567170691325, 0.18896567170691325, 0.18896567170691325, 0.2247280331935987, 0.2247280331935987, 0.2247280331935987, 0.19295255415883839, 0.19295255415883839, 0.19295255415883839, 0.17297697323966787, 0.17297697323966787, 0.17297697323966787, 0.1851848280830154, 0.1851848280830154, 0.1851848280830154, 0.18602629315650743, 0.18602629315650743, 0.18602629315650743, 0.1686392980961645, 0.1686392980961645, 0.1686392980961645, 0.18594165311853827, 0.18594165311853827, 0.18594165311853827, 0.7080446623321696, 0.7080446623321696, 0.7080446623321696, 0.17844805433414934, 0.17844805433414934, 0.17844805433414934, 0.47816930939300517, 0.47816930939300517, 0.47816930939300517, 0.20145180102140814, 0.20145180102140814, 0.20145180102140814, 0.18593737846148528, 0.18593737846148528, 0.18593737846148528, 0.1507870855150808, 0.1507870855150808, 0.1507870855150808, 0.17246005274811904, 0.17246005274811904, 0.17246005274811904, 0.1856663863592216, 0.1856663863592216, 0.1856663863592216, 0.17784006927871487, 0.17784006927871487, 0.17784006927871487, 0.07224792315430806, 0.07224792315430806, 0.07224792315430806, 0.06852588420194206, 0.06852588420194206, 0.06852588420194206, 0.07266744637312039, 0.07266744637312039, 0.07266744637312039]}, "mutation_prompt": null}
{"id": "09423006-7c6a-43d3-bd9c-6a8e74296b97", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.strategy = 'rand/1/bin'\n        \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability based on individual success rates\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]  # Decay success rate gradually\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Utilize an adaptive crossover mechanism based on individual success rates for enhanced convergence in differential evolution.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bf46ae4a-b5e5-4812-aa83-958466f9135c", "metadata": {"aucs": [0.6322724484417832, 0.6322724484417832, 0.6322724484417832, 0.6674533938810334, 0.6674533938810334, 0.6674533938810334, 0.5984909833916332, 0.5984909833916332, 0.5984909833916332, 0.3777435967165469, 0.3777435967165469, 0.3777435967165469, 0.3948069591212676, 0.3948069591212676, 0.3948069591212676, 0.3737112998463642, 0.3737112998463642, 0.3737112998463642, 0.09251359563862038, 0.09251359563862038, 0.09251359563862038, 0.08964310202513082, 0.08964310202513082, 0.08964310202513082, 0.11769714836337863, 0.11769714836337863, 0.11769714836337863, 0.09743082277133763, 0.09743082277133763, 0.09743082277133763, 0.09456440158673163, 0.09456440158673163, 0.09456440158673163, 0.10295252486710926, 0.10295252486710926, 0.10295252486710926, 0.9521284489714096, 0.9521284489714096, 0.9521284489714096, 0.9194044159838752, 0.9194044159838752, 0.9194044159838752, 0.9440649688334671, 0.9440649688334671, 0.9440649688334671, 0.2741842262905233, 0.2741842262905233, 0.2741842262905233, 0.2806800656797305, 0.2806800656797305, 0.2806800656797305, 0.31272853743531026, 0.31272853743531026, 0.31272853743531026, 0.5679506732517643, 0.5679506732517643, 0.5679506732517643, 0.5670026393585235, 0.5670026393585235, 0.5670026393585235, 0.613478442823455, 0.613478442823455, 0.613478442823455, 0.24155254627498957, 0.24155254627498957, 0.24155254627498957, 0.19466054938351252, 0.19466054938351252, 0.19466054938351252, 0.21215100977311263, 0.21215100977311263, 0.21215100977311263, 0.18917631174148275, 0.18917631174148275, 0.18917631174148275, 0.20794955021640982, 0.20794955021640982, 0.20794955021640982, 0.23516741197349234, 0.23516741197349234, 0.23516741197349234, 0.1800102454968151, 0.1800102454968151, 0.1800102454968151, 0.18671696282631667, 0.18671696282631667, 0.18671696282631667, 0.17990081564732097, 0.17990081564732097, 0.17990081564732097, 0.29733061978334074, 0.29733061978334074, 0.29733061978334074, 0.31913503287867817, 0.31913503287867817, 0.31913503287867817, 0.3413948871750506, 0.3413948871750506, 0.3413948871750506, 0.07753701426346082, 0.07753701426346082, 0.07753701426346082, 0.09851853039177316, 0.09851853039177316, 0.09851853039177316, 0.03646571544161581, 0.03646571544161581, 0.03646571544161581, 0.17972318749795646, 0.17972318749795646, 0.17972318749795646, 0.1667245457525507, 0.1667245457525507, 0.1667245457525507, 0.18050060695495884, 0.18050060695495884, 0.18050060695495884, 0.525970424594967, 0.525970424594967, 0.525970424594967, 0.509047557322313, 0.509047557322313, 0.509047557322313, 0.465328563344404, 0.465328563344404, 0.465328563344404, 0.0867782522599495, 0.0867782522599495, 0.0867782522599495, 0.07644941840888131, 0.07644941840888131, 0.07644941840888131, 0.09870765783727675, 0.09870765783727675, 0.09870765783727675, 0.1509530318282445, 0.1509530318282445, 0.1509530318282445, 0.13019200483689797, 0.13019200483689797, 0.13019200483689797, 0.1467242452598415, 0.1467242452598415, 0.1467242452598415, 0.2877216586256339, 0.2877216586256339, 0.2877216586256339, 0.2737744075640647, 0.2737744075640647, 0.2737744075640647, 0.29398420780669277, 0.29398420780669277, 0.29398420780669277, 0.21534826242644078, 0.21534826242644078, 0.21534826242644078, 0.18896567170691325, 0.18896567170691325, 0.18896567170691325, 0.2247280331935987, 0.2247280331935987, 0.2247280331935987, 0.19295255415883839, 0.19295255415883839, 0.19295255415883839, 0.17297697323966787, 0.17297697323966787, 0.17297697323966787, 0.1851848280830154, 0.1851848280830154, 0.1851848280830154, 0.18602629315650743, 0.18602629315650743, 0.18602629315650743, 0.1686392980961645, 0.1686392980961645, 0.1686392980961645, 0.18594165311853827, 0.18594165311853827, 0.18594165311853827, 0.7080446623321696, 0.7080446623321696, 0.7080446623321696, 0.17844805433414934, 0.17844805433414934, 0.17844805433414934, 0.47816930939300517, 0.47816930939300517, 0.47816930939300517, 0.20145180102140814, 0.20145180102140814, 0.20145180102140814, 0.18593737846148528, 0.18593737846148528, 0.18593737846148528, 0.1507870855150808, 0.1507870855150808, 0.1507870855150808, 0.17246005274811904, 0.17246005274811904, 0.17246005274811904, 0.1856663863592216, 0.1856663863592216, 0.1856663863592216, 0.17784006927871487, 0.17784006927871487, 0.17784006927871487, 0.07224792315430806, 0.07224792315430806, 0.07224792315430806, 0.06852588420194206, 0.06852588420194206, 0.06852588420194206, 0.07266744637312039, 0.07266744637312039, 0.07266744637312039]}, "mutation_prompt": null}
{"id": "d8f85fcb-aa9a-45c2-b755-7880e659238d", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.strategy = 'rand/1/bin'\n        \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability based on individual success rates\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]  # Decay success rate gradually\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Utilize an adaptive crossover mechanism based on individual success rates for enhanced convergence in differential evolution.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bf46ae4a-b5e5-4812-aa83-958466f9135c", "metadata": {"aucs": [0.6322724484417832, 0.6322724484417832, 0.6322724484417832, 0.6674533938810334, 0.6674533938810334, 0.6674533938810334, 0.5984909833916332, 0.5984909833916332, 0.5984909833916332, 0.3777435967165469, 0.3777435967165469, 0.3777435967165469, 0.3948069591212676, 0.3948069591212676, 0.3948069591212676, 0.3737112998463642, 0.3737112998463642, 0.3737112998463642, 0.09251359563862038, 0.09251359563862038, 0.09251359563862038, 0.08964310202513082, 0.08964310202513082, 0.08964310202513082, 0.11769714836337863, 0.11769714836337863, 0.11769714836337863, 0.09743082277133763, 0.09743082277133763, 0.09743082277133763, 0.09456440158673163, 0.09456440158673163, 0.09456440158673163, 0.10295252486710926, 0.10295252486710926, 0.10295252486710926, 0.9521284489714096, 0.9521284489714096, 0.9521284489714096, 0.9194044159838752, 0.9194044159838752, 0.9194044159838752, 0.9440649688334671, 0.9440649688334671, 0.9440649688334671, 0.2741842262905233, 0.2741842262905233, 0.2741842262905233, 0.2806800656797305, 0.2806800656797305, 0.2806800656797305, 0.31272853743531026, 0.31272853743531026, 0.31272853743531026, 0.5679506732517643, 0.5679506732517643, 0.5679506732517643, 0.5670026393585235, 0.5670026393585235, 0.5670026393585235, 0.613478442823455, 0.613478442823455, 0.613478442823455, 0.24155254627498957, 0.24155254627498957, 0.24155254627498957, 0.19466054938351252, 0.19466054938351252, 0.19466054938351252, 0.21215100977311263, 0.21215100977311263, 0.21215100977311263, 0.18917631174148275, 0.18917631174148275, 0.18917631174148275, 0.20794955021640982, 0.20794955021640982, 0.20794955021640982, 0.23516741197349234, 0.23516741197349234, 0.23516741197349234, 0.1800102454968151, 0.1800102454968151, 0.1800102454968151, 0.18671696282631667, 0.18671696282631667, 0.18671696282631667, 0.17990081564732097, 0.17990081564732097, 0.17990081564732097, 0.29733061978334074, 0.29733061978334074, 0.29733061978334074, 0.31913503287867817, 0.31913503287867817, 0.31913503287867817, 0.3413948871750506, 0.3413948871750506, 0.3413948871750506, 0.07753701426346082, 0.07753701426346082, 0.07753701426346082, 0.09851853039177316, 0.09851853039177316, 0.09851853039177316, 0.03646571544161581, 0.03646571544161581, 0.03646571544161581, 0.17972318749795646, 0.17972318749795646, 0.17972318749795646, 0.1667245457525507, 0.1667245457525507, 0.1667245457525507, 0.18050060695495884, 0.18050060695495884, 0.18050060695495884, 0.525970424594967, 0.525970424594967, 0.525970424594967, 0.509047557322313, 0.509047557322313, 0.509047557322313, 0.465328563344404, 0.465328563344404, 0.465328563344404, 0.0867782522599495, 0.0867782522599495, 0.0867782522599495, 0.07644941840888131, 0.07644941840888131, 0.07644941840888131, 0.09870765783727675, 0.09870765783727675, 0.09870765783727675, 0.1509530318282445, 0.1509530318282445, 0.1509530318282445, 0.13019200483689797, 0.13019200483689797, 0.13019200483689797, 0.1467242452598415, 0.1467242452598415, 0.1467242452598415, 0.2877216586256339, 0.2877216586256339, 0.2877216586256339, 0.2737744075640647, 0.2737744075640647, 0.2737744075640647, 0.29398420780669277, 0.29398420780669277, 0.29398420780669277, 0.21534826242644078, 0.21534826242644078, 0.21534826242644078, 0.18896567170691325, 0.18896567170691325, 0.18896567170691325, 0.2247280331935987, 0.2247280331935987, 0.2247280331935987, 0.19295255415883839, 0.19295255415883839, 0.19295255415883839, 0.17297697323966787, 0.17297697323966787, 0.17297697323966787, 0.1851848280830154, 0.1851848280830154, 0.1851848280830154, 0.18602629315650743, 0.18602629315650743, 0.18602629315650743, 0.1686392980961645, 0.1686392980961645, 0.1686392980961645, 0.18594165311853827, 0.18594165311853827, 0.18594165311853827, 0.7080446623321696, 0.7080446623321696, 0.7080446623321696, 0.17844805433414934, 0.17844805433414934, 0.17844805433414934, 0.47816930939300517, 0.47816930939300517, 0.47816930939300517, 0.20145180102140814, 0.20145180102140814, 0.20145180102140814, 0.18593737846148528, 0.18593737846148528, 0.18593737846148528, 0.1507870855150808, 0.1507870855150808, 0.1507870855150808, 0.17246005274811904, 0.17246005274811904, 0.17246005274811904, 0.1856663863592216, 0.1856663863592216, 0.1856663863592216, 0.17784006927871487, 0.17784006927871487, 0.17784006927871487, 0.07224792315430806, 0.07224792315430806, 0.07224792315430806, 0.06852588420194206, 0.06852588420194206, 0.06852588420194206, 0.07266744637312039, 0.07266744637312039, 0.07266744637312039]}, "mutation_prompt": null}
{"id": "fbb2d527-04b4-46f0-931a-cfa46c6730d9", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n        self.strategy = 'rand/1/bin'\n        \n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover probability based on individual success rates\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]  # Decay success rate gradually\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Utilize an adaptive crossover mechanism based on individual success rates for enhanced convergence in differential evolution.", "configspace": "", "generation": 2, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "bf46ae4a-b5e5-4812-aa83-958466f9135c", "metadata": {"aucs": [0.6322724484417832, 0.6322724484417832, 0.6322724484417832, 0.6674533938810334, 0.6674533938810334, 0.6674533938810334, 0.5984909833916332, 0.5984909833916332, 0.5984909833916332, 0.3777435967165469, 0.3777435967165469, 0.3777435967165469, 0.3948069591212676, 0.3948069591212676, 0.3948069591212676, 0.3737112998463642, 0.3737112998463642, 0.3737112998463642, 0.09251359563862038, 0.09251359563862038, 0.09251359563862038, 0.08964310202513082, 0.08964310202513082, 0.08964310202513082, 0.11769714836337863, 0.11769714836337863, 0.11769714836337863, 0.09743082277133763, 0.09743082277133763, 0.09743082277133763, 0.09456440158673163, 0.09456440158673163, 0.09456440158673163, 0.10295252486710926, 0.10295252486710926, 0.10295252486710926, 0.9521284489714096, 0.9521284489714096, 0.9521284489714096, 0.9194044159838752, 0.9194044159838752, 0.9194044159838752, 0.9440649688334671, 0.9440649688334671, 0.9440649688334671, 0.2741842262905233, 0.2741842262905233, 0.2741842262905233, 0.2806800656797305, 0.2806800656797305, 0.2806800656797305, 0.31272853743531026, 0.31272853743531026, 0.31272853743531026, 0.5679506732517643, 0.5679506732517643, 0.5679506732517643, 0.5670026393585235, 0.5670026393585235, 0.5670026393585235, 0.613478442823455, 0.613478442823455, 0.613478442823455, 0.24155254627498957, 0.24155254627498957, 0.24155254627498957, 0.19466054938351252, 0.19466054938351252, 0.19466054938351252, 0.21215100977311263, 0.21215100977311263, 0.21215100977311263, 0.18917631174148275, 0.18917631174148275, 0.18917631174148275, 0.20794955021640982, 0.20794955021640982, 0.20794955021640982, 0.23516741197349234, 0.23516741197349234, 0.23516741197349234, 0.1800102454968151, 0.1800102454968151, 0.1800102454968151, 0.18671696282631667, 0.18671696282631667, 0.18671696282631667, 0.17990081564732097, 0.17990081564732097, 0.17990081564732097, 0.29733061978334074, 0.29733061978334074, 0.29733061978334074, 0.31913503287867817, 0.31913503287867817, 0.31913503287867817, 0.3413948871750506, 0.3413948871750506, 0.3413948871750506, 0.07753701426346082, 0.07753701426346082, 0.07753701426346082, 0.09851853039177316, 0.09851853039177316, 0.09851853039177316, 0.03646571544161581, 0.03646571544161581, 0.03646571544161581, 0.17972318749795646, 0.17972318749795646, 0.17972318749795646, 0.1667245457525507, 0.1667245457525507, 0.1667245457525507, 0.18050060695495884, 0.18050060695495884, 0.18050060695495884, 0.525970424594967, 0.525970424594967, 0.525970424594967, 0.509047557322313, 0.509047557322313, 0.509047557322313, 0.465328563344404, 0.465328563344404, 0.465328563344404, 0.0867782522599495, 0.0867782522599495, 0.0867782522599495, 0.07644941840888131, 0.07644941840888131, 0.07644941840888131, 0.09870765783727675, 0.09870765783727675, 0.09870765783727675, 0.1509530318282445, 0.1509530318282445, 0.1509530318282445, 0.13019200483689797, 0.13019200483689797, 0.13019200483689797, 0.1467242452598415, 0.1467242452598415, 0.1467242452598415, 0.2877216586256339, 0.2877216586256339, 0.2877216586256339, 0.2737744075640647, 0.2737744075640647, 0.2737744075640647, 0.29398420780669277, 0.29398420780669277, 0.29398420780669277, 0.21534826242644078, 0.21534826242644078, 0.21534826242644078, 0.18896567170691325, 0.18896567170691325, 0.18896567170691325, 0.2247280331935987, 0.2247280331935987, 0.2247280331935987, 0.19295255415883839, 0.19295255415883839, 0.19295255415883839, 0.17297697323966787, 0.17297697323966787, 0.17297697323966787, 0.1851848280830154, 0.1851848280830154, 0.1851848280830154, 0.18602629315650743, 0.18602629315650743, 0.18602629315650743, 0.1686392980961645, 0.1686392980961645, 0.1686392980961645, 0.18594165311853827, 0.18594165311853827, 0.18594165311853827, 0.7080446623321696, 0.7080446623321696, 0.7080446623321696, 0.17844805433414934, 0.17844805433414934, 0.17844805433414934, 0.47816930939300517, 0.47816930939300517, 0.47816930939300517, 0.20145180102140814, 0.20145180102140814, 0.20145180102140814, 0.18593737846148528, 0.18593737846148528, 0.18593737846148528, 0.1507870855150808, 0.1507870855150808, 0.1507870855150808, 0.17246005274811904, 0.17246005274811904, 0.17246005274811904, 0.1856663863592216, 0.1856663863592216, 0.1856663863592216, 0.17784006927871487, 0.17784006927871487, 0.17784006927871487, 0.07224792315430806, 0.07224792315430806, 0.07224792315430806, 0.06852588420194206, 0.06852588420194206, 0.06852588420194206, 0.07266744637312039, 0.07266744637312039, 0.07266744637312039]}, "mutation_prompt": null}
{"id": "58934210-33f7-4841-84ae-ad78559e8403", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Incorporate a crowding distance measure to maintain diversity in differential evolution by replacing the least crowded individuals.", "configspace": "", "generation": 6, "fitness": 0.40330400818023127, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.25.", "error": "", "parent_id": "bf46ae4a-b5e5-4812-aa83-958466f9135c", "metadata": {"aucs": [0.7837757778391528, 0.7837757778391528, 0.7837757778391528, 0.7453369718635701, 0.7453369718635701, 0.7453369718635701, 0.7404636802231199, 0.7404636802231199, 0.7404636802231199, 0.6483574801923675, 0.6483574801923675, 0.6483574801923675, 0.5949367247369121, 0.5949367247369121, 0.5949367247369121, 0.6627973873616666, 0.6627973873616666, 0.6627973873616666, 0.1519604925242647, 0.1519604925242647, 0.1519604925242647, 0.16671388657289332, 0.16671388657289332, 0.16671388657289332, 0.3263291268478976, 0.3263291268478976, 0.3263291268478976, 0.11708074122896828, 0.11708074122896828, 0.11708074122896828, 0.10557020118940907, 0.10557020118940907, 0.10557020118940907, 0.10088132035645503, 0.10088132035645503, 0.10088132035645503, 0.9656644215881924, 0.9656644215881924, 0.9656644215881924, 0.9609041941706031, 0.9609041941706031, 0.9609041941706031, 0.9896826342047549, 0.9896826342047549, 0.9896826342047549, 0.42952171985588816, 0.42952171985588816, 0.42952171985588816, 0.4227384043820993, 0.4227384043820993, 0.4227384043820993, 0.47765868708044223, 0.47765868708044223, 0.47765868708044223, 0.778160018100165, 0.778160018100165, 0.778160018100165, 0.8294978363635572, 0.8294978363635572, 0.8294978363635572, 0.7607410327803226, 0.7607410327803226, 0.7607410327803226, 0.4465710827770246, 0.4465710827770246, 0.4465710827770246, 0.49884069798805897, 0.49884069798805897, 0.49884069798805897, 0.49307363883393485, 0.49307363883393485, 0.49307363883393485, 0.456953619205113, 0.456953619205113, 0.456953619205113, 0.47468745500298004, 0.47468745500298004, 0.47468745500298004, 0.5267801435698962, 0.5267801435698962, 0.5267801435698962, 0.3887964139741502, 0.3887964139741502, 0.3887964139741502, 0.4263776505245287, 0.4263776505245287, 0.4263776505245287, 0.493188690768518, 0.493188690768518, 0.493188690768518, 0.5575026430570984, 0.5575026430570984, 0.5575026430570984, 0.5303547818335366, 0.5303547818335366, 0.5303547818335366, 0.5309163979727746, 0.5309163979727746, 0.5309163979727746, 0.24280075249932043, 0.24280075249932043, 0.24280075249932043, 0.2506921975925368, 0.2506921975925368, 0.2506921975925368, 0.13171636089412442, 0.13171636089412442, 0.13171636089412442, 0.3224087316578259, 0.3224087316578259, 0.3224087316578259, 0.2733339793839077, 0.2733339793839077, 0.2733339793839077, 0.2950673800691287, 0.2950673800691287, 0.2950673800691287, 0.6666463545337231, 0.6666463545337231, 0.6666463545337231, 0.6510547619763523, 0.6510547619763523, 0.6510547619763523, 0.675251100675879, 0.675251100675879, 0.675251100675879, 0.1105684705647425, 0.1105684705647425, 0.1105684705647425, 0.11982401903991036, 0.11982401903991036, 0.11982401903991036, 0.10252515887763491, 0.10252515887763491, 0.10252515887763491, 0.15754114518223528, 0.15754114518223528, 0.15754114518223528, 0.27766200365629534, 0.27766200365629534, 0.27766200365629534, 0.13556842084448306, 0.13556842084448306, 0.13556842084448306, 0.39040485731415797, 0.39040485731415797, 0.39040485731415797, 0.45994752399339955, 0.45994752399339955, 0.45994752399339955, 0.418457004296673, 0.418457004296673, 0.418457004296673, 0.29191933123249947, 0.29191933123249947, 0.29191933123249947, 0.3566845885181521, 0.3566845885181521, 0.3566845885181521, 0.3120118797082917, 0.3120118797082917, 0.3120118797082917, 0.19014947645324132, 0.19014947645324132, 0.19014947645324132, 0.1766138273771778, 0.1766138273771778, 0.1766138273771778, 0.17501303490884945, 0.17501303490884945, 0.17501303490884945, 0.22543353589923387, 0.22543353589923387, 0.22543353589923387, 0.18835052874773328, 0.18835052874773328, 0.18835052874773328, 0.41633178535675675, 0.41633178535675675, 0.41633178535675675, 0.7652630497082267, 0.7652630497082267, 0.7652630497082267, 0.7265397933818036, 0.7265397933818036, 0.7265397933818036, 0.7025358810649258, 0.7025358810649258, 0.7025358810649258, 0.2039914301924466, 0.2039914301924466, 0.2039914301924466, 0.1645108173496801, 0.1645108173496801, 0.1645108173496801, 0.15269831256185518, 0.15269831256185518, 0.15269831256185518, 0.1703132170086159, 0.1703132170086159, 0.1703132170086159, 0.17582234666199725, 0.17582234666199725, 0.17582234666199725, 0.1807801054027517, 0.1807801054027517, 0.1807801054027517, 0.05823369721675231, 0.05823369721675231, 0.05823369721675231, 0.06848208329988559, 0.06848208329988559, 0.06848208329988559, 0.07192368890312684, 0.07192368890312684, 0.07192368890312684]}, "mutation_prompt": null}
{"id": "a4378a46-905f-4289-84f3-a0784dd19eec", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Incorporate a crowding distance measure to maintain diversity in differential evolution by replacing the least crowded individuals.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "58934210-33f7-4841-84ae-ad78559e8403", "metadata": {"aucs": [0.7837757778391528, 0.7837757778391528, 0.7837757778391528, 0.7453369718635701, 0.7453369718635701, 0.7453369718635701, 0.7404636802231199, 0.7404636802231199, 0.7404636802231199, 0.6483574801923675, 0.6483574801923675, 0.6483574801923675, 0.5949367247369121, 0.5949367247369121, 0.5949367247369121, 0.6627973873616666, 0.6627973873616666, 0.6627973873616666, 0.1519604925242647, 0.1519604925242647, 0.1519604925242647, 0.16671388657289332, 0.16671388657289332, 0.16671388657289332, 0.3263291268478976, 0.3263291268478976, 0.3263291268478976, 0.11708074122896828, 0.11708074122896828, 0.11708074122896828, 0.10557020118940907, 0.10557020118940907, 0.10557020118940907, 0.10088132035645503, 0.10088132035645503, 0.10088132035645503, 0.9656644215881924, 0.9656644215881924, 0.9656644215881924, 0.9609041941706031, 0.9609041941706031, 0.9609041941706031, 0.9896826342047549, 0.9896826342047549, 0.9896826342047549, 0.42952171985588816, 0.42952171985588816, 0.42952171985588816, 0.4227384043820993, 0.4227384043820993, 0.4227384043820993, 0.47765868708044223, 0.47765868708044223, 0.47765868708044223, 0.778160018100165, 0.778160018100165, 0.778160018100165, 0.8294978363635572, 0.8294978363635572, 0.8294978363635572, 0.7607410327803226, 0.7607410327803226, 0.7607410327803226, 0.4465710827770246, 0.4465710827770246, 0.4465710827770246, 0.49884069798805897, 0.49884069798805897, 0.49884069798805897, 0.49307363883393485, 0.49307363883393485, 0.49307363883393485, 0.456953619205113, 0.456953619205113, 0.456953619205113, 0.47468745500298004, 0.47468745500298004, 0.47468745500298004, 0.5267801435698962, 0.5267801435698962, 0.5267801435698962, 0.3887964139741502, 0.3887964139741502, 0.3887964139741502, 0.4263776505245287, 0.4263776505245287, 0.4263776505245287, 0.493188690768518, 0.493188690768518, 0.493188690768518, 0.5575026430570984, 0.5575026430570984, 0.5575026430570984, 0.5303547818335366, 0.5303547818335366, 0.5303547818335366, 0.5309163979727746, 0.5309163979727746, 0.5309163979727746, 0.24280075249932043, 0.24280075249932043, 0.24280075249932043, 0.2506921975925368, 0.2506921975925368, 0.2506921975925368, 0.13171636089412442, 0.13171636089412442, 0.13171636089412442, 0.3224087316578259, 0.3224087316578259, 0.3224087316578259, 0.2733339793839077, 0.2733339793839077, 0.2733339793839077, 0.2950673800691287, 0.2950673800691287, 0.2950673800691287, 0.6666463545337231, 0.6666463545337231, 0.6666463545337231, 0.6510547619763523, 0.6510547619763523, 0.6510547619763523, 0.675251100675879, 0.675251100675879, 0.675251100675879, 0.1105684705647425, 0.1105684705647425, 0.1105684705647425, 0.11982401903991036, 0.11982401903991036, 0.11982401903991036, 0.10252515887763491, 0.10252515887763491, 0.10252515887763491, 0.15754114518223528, 0.15754114518223528, 0.15754114518223528, 0.27766200365629534, 0.27766200365629534, 0.27766200365629534, 0.13556842084448306, 0.13556842084448306, 0.13556842084448306, 0.39040485731415797, 0.39040485731415797, 0.39040485731415797, 0.45994752399339955, 0.45994752399339955, 0.45994752399339955, 0.418457004296673, 0.418457004296673, 0.418457004296673, 0.29191933123249947, 0.29191933123249947, 0.29191933123249947, 0.3566845885181521, 0.3566845885181521, 0.3566845885181521, 0.3120118797082917, 0.3120118797082917, 0.3120118797082917, 0.19014947645324132, 0.19014947645324132, 0.19014947645324132, 0.1766138273771778, 0.1766138273771778, 0.1766138273771778, 0.17501303490884945, 0.17501303490884945, 0.17501303490884945, 0.22543353589923387, 0.22543353589923387, 0.22543353589923387, 0.18835052874773328, 0.18835052874773328, 0.18835052874773328, 0.41633178535675675, 0.41633178535675675, 0.41633178535675675, 0.7652630497082267, 0.7652630497082267, 0.7652630497082267, 0.7265397933818036, 0.7265397933818036, 0.7265397933818036, 0.7025358810649258, 0.7025358810649258, 0.7025358810649258, 0.2039914301924466, 0.2039914301924466, 0.2039914301924466, 0.1645108173496801, 0.1645108173496801, 0.1645108173496801, 0.15269831256185518, 0.15269831256185518, 0.15269831256185518, 0.1703132170086159, 0.1703132170086159, 0.1703132170086159, 0.17582234666199725, 0.17582234666199725, 0.17582234666199725, 0.1807801054027517, 0.1807801054027517, 0.1807801054027517, 0.05823369721675231, 0.05823369721675231, 0.05823369721675231, 0.06848208329988559, 0.06848208329988559, 0.06848208329988559, 0.07192368890312684, 0.07192368890312684, 0.07192368890312684]}, "mutation_prompt": null}
{"id": "cf042f78-42fd-4aa0-b86d-47621ea33ce9", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Incorporate a crowding distance measure to maintain diversity in differential evolution by replacing the least crowded individuals.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "58934210-33f7-4841-84ae-ad78559e8403", "metadata": {"aucs": [0.7837757778391528, 0.7837757778391528, 0.7837757778391528, 0.7453369718635701, 0.7453369718635701, 0.7453369718635701, 0.7404636802231199, 0.7404636802231199, 0.7404636802231199, 0.6483574801923675, 0.6483574801923675, 0.6483574801923675, 0.5949367247369121, 0.5949367247369121, 0.5949367247369121, 0.6627973873616666, 0.6627973873616666, 0.6627973873616666, 0.1519604925242647, 0.1519604925242647, 0.1519604925242647, 0.16671388657289332, 0.16671388657289332, 0.16671388657289332, 0.3263291268478976, 0.3263291268478976, 0.3263291268478976, 0.11708074122896828, 0.11708074122896828, 0.11708074122896828, 0.10557020118940907, 0.10557020118940907, 0.10557020118940907, 0.10088132035645503, 0.10088132035645503, 0.10088132035645503, 0.9656644215881924, 0.9656644215881924, 0.9656644215881924, 0.9609041941706031, 0.9609041941706031, 0.9609041941706031, 0.9896826342047549, 0.9896826342047549, 0.9896826342047549, 0.42952171985588816, 0.42952171985588816, 0.42952171985588816, 0.4227384043820993, 0.4227384043820993, 0.4227384043820993, 0.47765868708044223, 0.47765868708044223, 0.47765868708044223, 0.778160018100165, 0.778160018100165, 0.778160018100165, 0.8294978363635572, 0.8294978363635572, 0.8294978363635572, 0.7607410327803226, 0.7607410327803226, 0.7607410327803226, 0.4465710827770246, 0.4465710827770246, 0.4465710827770246, 0.49884069798805897, 0.49884069798805897, 0.49884069798805897, 0.49307363883393485, 0.49307363883393485, 0.49307363883393485, 0.456953619205113, 0.456953619205113, 0.456953619205113, 0.47468745500298004, 0.47468745500298004, 0.47468745500298004, 0.5267801435698962, 0.5267801435698962, 0.5267801435698962, 0.3887964139741502, 0.3887964139741502, 0.3887964139741502, 0.4263776505245287, 0.4263776505245287, 0.4263776505245287, 0.493188690768518, 0.493188690768518, 0.493188690768518, 0.5575026430570984, 0.5575026430570984, 0.5575026430570984, 0.5303547818335366, 0.5303547818335366, 0.5303547818335366, 0.5309163979727746, 0.5309163979727746, 0.5309163979727746, 0.24280075249932043, 0.24280075249932043, 0.24280075249932043, 0.2506921975925368, 0.2506921975925368, 0.2506921975925368, 0.13171636089412442, 0.13171636089412442, 0.13171636089412442, 0.3224087316578259, 0.3224087316578259, 0.3224087316578259, 0.2733339793839077, 0.2733339793839077, 0.2733339793839077, 0.2950673800691287, 0.2950673800691287, 0.2950673800691287, 0.6666463545337231, 0.6666463545337231, 0.6666463545337231, 0.6510547619763523, 0.6510547619763523, 0.6510547619763523, 0.675251100675879, 0.675251100675879, 0.675251100675879, 0.1105684705647425, 0.1105684705647425, 0.1105684705647425, 0.11982401903991036, 0.11982401903991036, 0.11982401903991036, 0.10252515887763491, 0.10252515887763491, 0.10252515887763491, 0.15754114518223528, 0.15754114518223528, 0.15754114518223528, 0.27766200365629534, 0.27766200365629534, 0.27766200365629534, 0.13556842084448306, 0.13556842084448306, 0.13556842084448306, 0.39040485731415797, 0.39040485731415797, 0.39040485731415797, 0.45994752399339955, 0.45994752399339955, 0.45994752399339955, 0.418457004296673, 0.418457004296673, 0.418457004296673, 0.29191933123249947, 0.29191933123249947, 0.29191933123249947, 0.3566845885181521, 0.3566845885181521, 0.3566845885181521, 0.3120118797082917, 0.3120118797082917, 0.3120118797082917, 0.19014947645324132, 0.19014947645324132, 0.19014947645324132, 0.1766138273771778, 0.1766138273771778, 0.1766138273771778, 0.17501303490884945, 0.17501303490884945, 0.17501303490884945, 0.22543353589923387, 0.22543353589923387, 0.22543353589923387, 0.18835052874773328, 0.18835052874773328, 0.18835052874773328, 0.41633178535675675, 0.41633178535675675, 0.41633178535675675, 0.7652630497082267, 0.7652630497082267, 0.7652630497082267, 0.7265397933818036, 0.7265397933818036, 0.7265397933818036, 0.7025358810649258, 0.7025358810649258, 0.7025358810649258, 0.2039914301924466, 0.2039914301924466, 0.2039914301924466, 0.1645108173496801, 0.1645108173496801, 0.1645108173496801, 0.15269831256185518, 0.15269831256185518, 0.15269831256185518, 0.1703132170086159, 0.1703132170086159, 0.1703132170086159, 0.17582234666199725, 0.17582234666199725, 0.17582234666199725, 0.1807801054027517, 0.1807801054027517, 0.1807801054027517, 0.05823369721675231, 0.05823369721675231, 0.05823369721675231, 0.06848208329988559, 0.06848208329988559, 0.06848208329988559, 0.07192368890312684, 0.07192368890312684, 0.07192368890312684]}, "mutation_prompt": null}
{"id": "474e86ed-856c-4868-ac98-60c232174041", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Incorporate a crowding distance measure to maintain diversity in differential evolution by replacing the least crowded individuals.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "58934210-33f7-4841-84ae-ad78559e8403", "metadata": {"aucs": [0.7837757778391528, 0.7837757778391528, 0.7837757778391528, 0.7453369718635701, 0.7453369718635701, 0.7453369718635701, 0.7404636802231199, 0.7404636802231199, 0.7404636802231199, 0.6483574801923675, 0.6483574801923675, 0.6483574801923675, 0.5949367247369121, 0.5949367247369121, 0.5949367247369121, 0.6627973873616666, 0.6627973873616666, 0.6627973873616666, 0.1519604925242647, 0.1519604925242647, 0.1519604925242647, 0.16671388657289332, 0.16671388657289332, 0.16671388657289332, 0.3263291268478976, 0.3263291268478976, 0.3263291268478976, 0.11708074122896828, 0.11708074122896828, 0.11708074122896828, 0.10557020118940907, 0.10557020118940907, 0.10557020118940907, 0.10088132035645503, 0.10088132035645503, 0.10088132035645503, 0.9656644215881924, 0.9656644215881924, 0.9656644215881924, 0.9609041941706031, 0.9609041941706031, 0.9609041941706031, 0.9896826342047549, 0.9896826342047549, 0.9896826342047549, 0.42952171985588816, 0.42952171985588816, 0.42952171985588816, 0.4227384043820993, 0.4227384043820993, 0.4227384043820993, 0.47765868708044223, 0.47765868708044223, 0.47765868708044223, 0.778160018100165, 0.778160018100165, 0.778160018100165, 0.8294978363635572, 0.8294978363635572, 0.8294978363635572, 0.7607410327803226, 0.7607410327803226, 0.7607410327803226, 0.4465710827770246, 0.4465710827770246, 0.4465710827770246, 0.49884069798805897, 0.49884069798805897, 0.49884069798805897, 0.49307363883393485, 0.49307363883393485, 0.49307363883393485, 0.456953619205113, 0.456953619205113, 0.456953619205113, 0.47468745500298004, 0.47468745500298004, 0.47468745500298004, 0.5267801435698962, 0.5267801435698962, 0.5267801435698962, 0.3887964139741502, 0.3887964139741502, 0.3887964139741502, 0.4263776505245287, 0.4263776505245287, 0.4263776505245287, 0.493188690768518, 0.493188690768518, 0.493188690768518, 0.5575026430570984, 0.5575026430570984, 0.5575026430570984, 0.5303547818335366, 0.5303547818335366, 0.5303547818335366, 0.5309163979727746, 0.5309163979727746, 0.5309163979727746, 0.24280075249932043, 0.24280075249932043, 0.24280075249932043, 0.2506921975925368, 0.2506921975925368, 0.2506921975925368, 0.13171636089412442, 0.13171636089412442, 0.13171636089412442, 0.3224087316578259, 0.3224087316578259, 0.3224087316578259, 0.2733339793839077, 0.2733339793839077, 0.2733339793839077, 0.2950673800691287, 0.2950673800691287, 0.2950673800691287, 0.6666463545337231, 0.6666463545337231, 0.6666463545337231, 0.6510547619763523, 0.6510547619763523, 0.6510547619763523, 0.675251100675879, 0.675251100675879, 0.675251100675879, 0.1105684705647425, 0.1105684705647425, 0.1105684705647425, 0.11982401903991036, 0.11982401903991036, 0.11982401903991036, 0.10252515887763491, 0.10252515887763491, 0.10252515887763491, 0.15754114518223528, 0.15754114518223528, 0.15754114518223528, 0.27766200365629534, 0.27766200365629534, 0.27766200365629534, 0.13556842084448306, 0.13556842084448306, 0.13556842084448306, 0.39040485731415797, 0.39040485731415797, 0.39040485731415797, 0.45994752399339955, 0.45994752399339955, 0.45994752399339955, 0.418457004296673, 0.418457004296673, 0.418457004296673, 0.29191933123249947, 0.29191933123249947, 0.29191933123249947, 0.3566845885181521, 0.3566845885181521, 0.3566845885181521, 0.3120118797082917, 0.3120118797082917, 0.3120118797082917, 0.19014947645324132, 0.19014947645324132, 0.19014947645324132, 0.1766138273771778, 0.1766138273771778, 0.1766138273771778, 0.17501303490884945, 0.17501303490884945, 0.17501303490884945, 0.22543353589923387, 0.22543353589923387, 0.22543353589923387, 0.18835052874773328, 0.18835052874773328, 0.18835052874773328, 0.41633178535675675, 0.41633178535675675, 0.41633178535675675, 0.7652630497082267, 0.7652630497082267, 0.7652630497082267, 0.7265397933818036, 0.7265397933818036, 0.7265397933818036, 0.7025358810649258, 0.7025358810649258, 0.7025358810649258, 0.2039914301924466, 0.2039914301924466, 0.2039914301924466, 0.1645108173496801, 0.1645108173496801, 0.1645108173496801, 0.15269831256185518, 0.15269831256185518, 0.15269831256185518, 0.1703132170086159, 0.1703132170086159, 0.1703132170086159, 0.17582234666199725, 0.17582234666199725, 0.17582234666199725, 0.1807801054027517, 0.1807801054027517, 0.1807801054027517, 0.05823369721675231, 0.05823369721675231, 0.05823369721675231, 0.06848208329988559, 0.06848208329988559, 0.06848208329988559, 0.07192368890312684, 0.07192368890312684, 0.07192368890312684]}, "mutation_prompt": null}
{"id": "4cc509bc-016f-4ca6-b444-c9529b46038b", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.8\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                mutant = np.clip(a + self.mutation_factor * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Incorporate a crowding distance measure to maintain diversity in differential evolution by replacing the least crowded individuals.", "configspace": "", "generation": 7, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "58934210-33f7-4841-84ae-ad78559e8403", "metadata": {"aucs": [0.7837757778391528, 0.7837757778391528, 0.7837757778391528, 0.7453369718635701, 0.7453369718635701, 0.7453369718635701, 0.7404636802231199, 0.7404636802231199, 0.7404636802231199, 0.6483574801923675, 0.6483574801923675, 0.6483574801923675, 0.5949367247369121, 0.5949367247369121, 0.5949367247369121, 0.6627973873616666, 0.6627973873616666, 0.6627973873616666, 0.1519604925242647, 0.1519604925242647, 0.1519604925242647, 0.16671388657289332, 0.16671388657289332, 0.16671388657289332, 0.3263291268478976, 0.3263291268478976, 0.3263291268478976, 0.11708074122896828, 0.11708074122896828, 0.11708074122896828, 0.10557020118940907, 0.10557020118940907, 0.10557020118940907, 0.10088132035645503, 0.10088132035645503, 0.10088132035645503, 0.9656644215881924, 0.9656644215881924, 0.9656644215881924, 0.9609041941706031, 0.9609041941706031, 0.9609041941706031, 0.9896826342047549, 0.9896826342047549, 0.9896826342047549, 0.42952171985588816, 0.42952171985588816, 0.42952171985588816, 0.4227384043820993, 0.4227384043820993, 0.4227384043820993, 0.47765868708044223, 0.47765868708044223, 0.47765868708044223, 0.778160018100165, 0.778160018100165, 0.778160018100165, 0.8294978363635572, 0.8294978363635572, 0.8294978363635572, 0.7607410327803226, 0.7607410327803226, 0.7607410327803226, 0.4465710827770246, 0.4465710827770246, 0.4465710827770246, 0.49884069798805897, 0.49884069798805897, 0.49884069798805897, 0.49307363883393485, 0.49307363883393485, 0.49307363883393485, 0.456953619205113, 0.456953619205113, 0.456953619205113, 0.47468745500298004, 0.47468745500298004, 0.47468745500298004, 0.5267801435698962, 0.5267801435698962, 0.5267801435698962, 0.3887964139741502, 0.3887964139741502, 0.3887964139741502, 0.4263776505245287, 0.4263776505245287, 0.4263776505245287, 0.493188690768518, 0.493188690768518, 0.493188690768518, 0.5575026430570984, 0.5575026430570984, 0.5575026430570984, 0.5303547818335366, 0.5303547818335366, 0.5303547818335366, 0.5309163979727746, 0.5309163979727746, 0.5309163979727746, 0.24280075249932043, 0.24280075249932043, 0.24280075249932043, 0.2506921975925368, 0.2506921975925368, 0.2506921975925368, 0.13171636089412442, 0.13171636089412442, 0.13171636089412442, 0.3224087316578259, 0.3224087316578259, 0.3224087316578259, 0.2733339793839077, 0.2733339793839077, 0.2733339793839077, 0.2950673800691287, 0.2950673800691287, 0.2950673800691287, 0.6666463545337231, 0.6666463545337231, 0.6666463545337231, 0.6510547619763523, 0.6510547619763523, 0.6510547619763523, 0.675251100675879, 0.675251100675879, 0.675251100675879, 0.1105684705647425, 0.1105684705647425, 0.1105684705647425, 0.11982401903991036, 0.11982401903991036, 0.11982401903991036, 0.10252515887763491, 0.10252515887763491, 0.10252515887763491, 0.15754114518223528, 0.15754114518223528, 0.15754114518223528, 0.27766200365629534, 0.27766200365629534, 0.27766200365629534, 0.13556842084448306, 0.13556842084448306, 0.13556842084448306, 0.39040485731415797, 0.39040485731415797, 0.39040485731415797, 0.45994752399339955, 0.45994752399339955, 0.45994752399339955, 0.418457004296673, 0.418457004296673, 0.418457004296673, 0.29191933123249947, 0.29191933123249947, 0.29191933123249947, 0.3566845885181521, 0.3566845885181521, 0.3566845885181521, 0.3120118797082917, 0.3120118797082917, 0.3120118797082917, 0.19014947645324132, 0.19014947645324132, 0.19014947645324132, 0.1766138273771778, 0.1766138273771778, 0.1766138273771778, 0.17501303490884945, 0.17501303490884945, 0.17501303490884945, 0.22543353589923387, 0.22543353589923387, 0.22543353589923387, 0.18835052874773328, 0.18835052874773328, 0.18835052874773328, 0.41633178535675675, 0.41633178535675675, 0.41633178535675675, 0.7652630497082267, 0.7652630497082267, 0.7652630497082267, 0.7265397933818036, 0.7265397933818036, 0.7265397933818036, 0.7025358810649258, 0.7025358810649258, 0.7025358810649258, 0.2039914301924466, 0.2039914301924466, 0.2039914301924466, 0.1645108173496801, 0.1645108173496801, 0.1645108173496801, 0.15269831256185518, 0.15269831256185518, 0.15269831256185518, 0.1703132170086159, 0.1703132170086159, 0.1703132170086159, 0.17582234666199725, 0.17582234666199725, 0.17582234666199725, 0.1807801054027517, 0.1807801054027517, 0.1807801054027517, 0.05823369721675231, 0.05823369721675231, 0.05823369721675231, 0.06848208329988559, 0.06848208329988559, 0.06848208329988559, 0.07192368890312684, 0.07192368890312684, 0.07192368890312684]}, "mutation_prompt": null}
{"id": "2a7fd760-e76a-4211-9b95-3feba0496046", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 11, "fitness": 0.46770368970769305, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.47 with standard deviation 0.29.", "error": "", "parent_id": "58934210-33f7-4841-84ae-ad78559e8403", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "2016eb74-a2b3-4856-9f92-c45b9b794bbb", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "0c12b263-5c37-46fc-af5e-b2d767c82556", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "d4bfaa1f-95b2-459d-85c9-54a8c430a01a", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "64c7519f-863b-43b0-b3d2-b61716cd22b1", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "a2062907-4413-4951-80d7-1699b2f0a904", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "64a13743-672a-4c52-8de5-7013cb2781f0", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "2659bf2d-8abf-4b47-afcb-25cbe1aec5f5", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.initial_population_size) * 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population_size = self.initial_population_size\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = population_size\n        success_rate = np.zeros(population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Adjust population size dynamically based on progress\n                if evaluations % (self.budget // 10) == 0:\n                    population_size = max(4, int(population_size * 0.9))\n                    population = population[:population_size]\n                    fitness = fitness[:population_size]\n                    success_rate = success_rate[:population_size]\n\n                idxs = [idx for idx in range(population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(population_size)]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < (adaptive_crossover * np.random.rand())\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                tournament_size = 3\n                tournament_idxs = np.random.choice(population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Introduce an adaptive population size mechanism and enhance crossover strategy to improve convergence and diversity.", "configspace": "", "generation": 18, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 45 is out of bounds for axis 0 with size 45').", "error": "IndexError('index 45 is out of bounds for axis 0 with size 45')", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {}, "mutation_prompt": null}
{"id": "06770219-938f-4d08-88f8-cfd2ee79f4c9", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "268465a1-da3d-4416-9fe8-4d117766fa33", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "c27a6a61-bb0e-4c83-bee8-f24243f5b716", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "9965e15c-9bed-47ef-82d2-d0165ee73fe1", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "073c1324-630d-471c-96b0-17c742c8ff33", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "76b3ff52-1fad-43a2-8efc-a0008992fda0", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "037bf35e-25f2-46e4-90f1-9cc2089a2820", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "c6d1f875-64bc-4f92-9fda-290685adf9d6", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "610e156b-6951-445d-b452-3f2cf457bda5", "solution": "import numpy as np\n\nclass ImprovedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = np.full(self.population_size, 0.5) + np.random.rand(self.population_size) * 0.3  # Narrower dynamic range for mutation\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[i]  # Use self-adaptive mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.05 * (1 - success_rate[i]))  # Smaller tuning increment\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] *= 0.9  # Maintain success rate decay\n\n                # Use crowding distance to maintain diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                most_crowded_idx = np.argmin(crowd_distances)\n                if fitness[most_crowded_idx] > f_trial:\n                    population[most_crowded_idx] = trial\n                    fitness[most_crowded_idx] = f_trial\n\n                # Tournament selection for diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ImprovedDifferentialEvolution", "description": "Improve diversity and convergence by integrating self-adaptive mutation and tournament selection with crowding distance-based population regulation.", "configspace": "", "generation": 27, "fitness": 0.416710322844117, "feedback": "The algorithm ImprovedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.42 with standard deviation 0.29.", "error": "", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8677724095682234, 0.862994691203475, 0.872119213643324, 0.8742426570429298, 0.8747895191562445, 0.8621972725497722, 0.8841019017924842, 0.8786060039564751, 0.8652689354751418, 0.7401462377864378, 0.7366793137543628, 0.7580605711672262, 0.7352343973436937, 0.7422730332299704, 0.7360354659781179, 0.7535942729666208, 0.7618820233473446, 0.744878556496622, 0.12243645381376045, 0.1484334443352282, 0.13776036645523904, 0.1270821879896643, 0.16164095230251774, 0.15685894371505915, 0.4456636876236556, 0.11030193603134797, 0.1197284884129396, 0.11346119425575507, 0.11941901157277279, 0.13163976759786822, 0.16241469907338602, 0.16734651635732845, 0.4067612785657059, 0.13410768445441168, 0.1152991730261701, 0.11206929814900446, 0.9760648257344752, 0.9693673945522817, 0.9799744146320148, 0.924711851303678, 0.9413559542048656, 0.9700817074156006, 0.9455262621554865, 0.9689711579294765, 0.9577031009326389, 0.6659853838197382, 0.7022748350344812, 0.7067605465189283, 0.7182126314394928, 0.7096216183601771, 0.7166269874919506, 0.08836307032288682, 0.6710927448969554, 0.651025205792133, 0.34239595678696766, 0.16993291493185225, 0.37562825679721357, 0.16131242826653436, 0.8275548413904243, 0.8475928160822107, 0.8500610874441396, 0.8218721303084375, 0.8761459368061553, 0.21711988235734103, 0.4637233032552489, 0.503206426616333, 0.46817936672606775, 0.45516008418917975, 0.13210052417204843, 0.42338451207966177, 0.5227550442571975, 0.49339494038743237, 0.35487633491118864, 0.05254480626386937, 0.22844387291733637, 0.2085097379180042, 0.22283058283813684, 0.12589488881408584, 0.6443000806709076, 0.7520714351522302, 0.26551339661651396, 0.5049677102673522, 0.5930735805052121, 0.6160826697721729, 0.562058003210812, 0.6411461858699073, 0.5913578780982007, 0.05308845141550422, 0.6622856716138925, 0.6041845111556634, 0.6832330411179419, 0.6809554874417417, 0.6812048029829233, 0.6957941397581657, 0.7158814850902091, 0.6890315317368017, 0.697302127265083, 0.7135534638914638, 0.7154673008247303, 0.09481762783409575, 0.06549515186833121, 0.06334677743152328, 0.23338417188610672, 0.15349779018780518, 0.1434248160836743, 0.2854469619309582, 0.31139360917180614, 0.11093602192398444, 0.3668192338950673, 0.4040059374616283, 0.49796782366659176, 0.4999989375711873, 0.458400838262893, 0.4719069129157172, 0.3876601700427246, 0.47299288053500854, 0.5601029329837636, 0.7969840447234963, 0.7825837323968906, 0.8087715156726845, 0.8142008736517821, 0.7635856037762516, 0.7931762885493875, 0.7674104171237106, 0.7875641198455754, 0.7966303057980898, 0.16779236168270617, 0.12784324182943618, 0.083288960691702, 0.13240631464266917, 0.12520092333735122, 0.12591412628652632, 0.11791319288680002, 0.07333585884863625, 0.12910028466280787, 0.2707524240653293, 0.15810722789169263, 0.2045693098160828, 0.15983044171051075, 0.1835280478787985, 0.1694877869201188, 0.14374638119567318, 0.17471603039052375, 0.1291517174132183, 0.5841790898016758, 0.48331160701336384, 0.45343482539879987, 0.47426434270370155, 0.2161987202063821, 0.5168781050886383, 0.5945744538265929, 0.5004475524458452, 0.5341915334251397, 0.40940572596038705, 0.26177947472829743, 0.4231975850161195, 0.2150632906530906, 0.40774215868553765, 0.22098192837117125, 0.27510246516273107, 0.2847735326785561, 0.37099658412534564, 0.23458561819378654, 0.2211345529114025, 0.18665369971755286, 0.18778182571040658, 0.18740962348016887, 0.21658159245300723, 0.21062440955220996, 0.1838179990190807, 0.18341690269034583, 0.7270840186864742, 0.24512673047035483, 0.24259035887807245, 0.21473770546747084, 0.6377595502356364, 0.217967934655804, 0.7531915127305615, 0.23797962524200877, 0.24239366262009643, 0.16476350915256477, 0.1965534750286113, 0.8513746146815383, 0.19423192620240315, 0.16450236693916942, 0.18062889831159123, 0.1818492672280969, 0.16624721306346346, 0.1792476745652417, 0.6898963085721288, 0.20497963755078252, 0.16676802902493548, 0.20865412991315557, 0.8575602136036042, 0.20450880430889173, 0.12743871044158916, 0.15505651858402036, 0.12751833376757205, 0.17646388990476958, 0.1902687049936952, 0.17512363316135793, 0.20029982094639076, 0.1707127438457423, 0.1812456057701768, 0.1558324278961274, 0.18648088542221664, 0.23064674122404372, 0.06919544320539717, 0.07800289958044027, 0.08597373139290743, 0.06406775234888051, 0.06826887322296793, 0.06946867063529394, 0.0674738174060685, 0.10341583327722581, 0.07396331810702672]}, "mutation_prompt": null}
{"id": "aeb709d8-0d24-4ac5-8ed9-1e8dfa35cbca", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "a4da7ecf-2d5a-491f-81ed-c94af53620f4", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "17852746-0326-4c73-a392-f179112688c7", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        # Self-adaptive mutation factor\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  \n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        # Chaotic initialization for population\n        population = self.lower_bound + np.random.rand(self.population_size, self.dim) * (self.upper_bound - self.lower_bound)\n        \n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                # Self-adaptive mutation factor update\n                F = self.mutation_factor[i]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance diversity and convergence further by using a self-adaptive mutation factor and chaotic initialization for the population.", "configspace": "", "generation": 30, "fitness": 0.464161564456283, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.46 with standard deviation 0.28.", "error": "", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8563130119753046, 0.8543519460517816, 0.8712384600122134, 0.8453816492877443, 0.8640800877748951, 0.8438624714194513, 0.8559738783238541, 0.8622778725569707, 0.8568898850999301, 0.7233445865074735, 0.7695140257755573, 0.7309466843604888, 0.7346529287207338, 0.7829303257329119, 0.759399808638769, 0.7502468213766369, 0.7453653078638338, 0.7501502754599282, 0.17194406195031475, 0.15248084040560583, 0.17295344743465269, 0.14057820739876192, 0.1689237710484358, 0.1340508994480153, 0.135900753690539, 0.14266276443424775, 0.13537517658111686, 0.12180144852600838, 0.1408622440704732, 0.15057997752747143, 0.12564463959577554, 0.12426024753153198, 0.10867396051691613, 0.13779517952946063, 0.15919535026754816, 0.10133384373395293, 0.9781512013202207, 0.9687647285594336, 0.9771707115663497, 0.9803475930712755, 0.9785235358196909, 0.9663521600140775, 0.9801398866218721, 0.9627823060710182, 0.9785377221330747, 0.629309779662414, 0.6617042690018848, 0.6361453442372851, 0.6123861026188042, 0.645903935633996, 0.6321022072208897, 0.6388863859276155, 0.6901395195057896, 0.6817826454427282, 0.30724466561902253, 0.39047504552069856, 0.36824984979709086, 0.860660482112525, 0.8581588839193446, 0.9339997956588756, 0.8596442299493596, 0.8607970857177296, 0.850486516132934, 0.23224937317939787, 0.3463360528207039, 0.23708091196692582, 0.28778462964171025, 0.23598870319994336, 0.20143552032905288, 0.6720049361949746, 0.30487735438031016, 0.3059869496406763, 0.5767407598488365, 0.6803368583674165, 0.5887190841849034, 0.5217507196954358, 0.5220894694815674, 0.6923129500628361, 0.6815990346146463, 0.5827270632307637, 0.6052437677329482, 0.6402910456198672, 0.6861145972151353, 0.6016740753611344, 0.6271005058849438, 0.6737923924787053, 0.5945714465431597, 0.6509398369510746, 0.6697641195056476, 0.6065743465847833, 0.7422912367903991, 0.7118236427754117, 0.7510607434520551, 0.6825538990246535, 0.6625004695032854, 0.6626012365507153, 0.6997708500920197, 0.7493323696880387, 0.715652842427156, 0.35219615746153954, 0.466382677101971, 0.3356263238092517, 0.5187776277765184, 0.4790791307005906, 0.47803783350114426, 0.1998699963307149, 0.27575563376842605, 0.20409731358622807, 0.4434532018610974, 0.524514025876826, 0.49768558133462426, 0.4703412853464981, 0.47716024731252915, 0.5416590396126071, 0.38351892283143896, 0.47461203796429074, 0.4990964453020347, 0.7644007309716011, 0.8253954174533102, 0.7950504076842767, 0.7780406035297052, 0.7272074445554622, 0.7924450056165993, 0.7661720998993456, 0.7951403016858786, 0.7776778999597634, 0.12249143837708021, 0.14840088899474924, 0.14284844012756637, 0.1127688785904486, 0.07405870029947359, 0.10179808787954514, 0.11921078121287587, 0.18140223283713952, 0.12107013437696312, 0.18059653464957914, 0.2153443152435417, 0.15511575957074442, 0.16502662075317642, 0.27302231683249223, 0.1384703468589552, 0.1689668421656908, 0.6423792505164878, 0.10998174929236026, 0.47898822370323024, 0.5844613895719836, 0.48818757966293547, 0.46876492098616274, 0.5207808816319777, 0.5493497319893414, 0.5600188950010049, 0.5735393937171985, 0.4249261439708716, 0.4260077245900393, 0.42119935451877777, 0.3105857407188404, 0.37995624324210975, 0.520175669142663, 0.44902878262114865, 0.44949346192629047, 0.3561912521146301, 0.4728296589029458, 0.18620060943633876, 0.2005522788155294, 0.21872658508361342, 0.18645652620690034, 0.1848760038777244, 0.18324250313564905, 0.21057601915775226, 0.17778211560868873, 0.17479924946146097, 0.21581433974529907, 0.563925114355043, 0.18868195116753117, 0.21405955338697435, 0.21952732386811702, 0.18859847452600043, 0.2107791010692308, 0.21593014753954654, 0.205369266835717, 0.8571177545162508, 0.8050151740483417, 0.8700662536642981, 0.8647397540104771, 0.17023130931106367, 0.19456005483361782, 0.1874875708107887, 0.8523752161268108, 0.8831108248806872, 0.855515838752398, 0.8395093094795795, 0.20801775485823548, 0.20672379589159284, 0.20532525630423026, 0.2064389121823913, 0.854192781585889, 0.153259252287114, 0.2076428149608177, 0.19645983980820447, 0.15867336306698376, 0.17730587991629687, 0.18152407098196, 0.21162239359907953, 0.17591613942473816, 0.18144335629676633, 0.17494514928199756, 0.18097722266440064, 0.07895427462519167, 0.09630735674091428, 0.07872477184429683, 0.07578845438681125, 0.08896127482975313, 0.07826011629529606, 0.06803826180936234, 0.08227556090432131, 0.08020466036722351]}, "mutation_prompt": null}
{"id": "79896a74-b61c-46bb-9a12-e234d3343dbd", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "b612739d-2b22-448f-8c1a-8239abd7080c", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        adaptive_population_change_interval = self.budget // 10\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n                \n                if evaluations % adaptive_population_change_interval == 0 and evaluations > 0:\n                    self.population_size = max(self.population_size // 2, self.dim)\n                    population = population[:self.population_size]\n                    fitness = fitness[:self.population_size]\n                    success_rate = success_rate[:self.population_size]\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Introduce adaptive population resizing and differential mutations to enhance exploration and exploitation balance.", "configspace": "", "generation": 32, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 25 is out of bounds for axis 0 with size 25').", "error": "IndexError('index 25 is out of bounds for axis 0 with size 25')", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {}, "mutation_prompt": null}
{"id": "5df0e0ae-adba-4915-9deb-a431efa5604d", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "f8734146-3f19-4b8f-a31d-e149915df4f1", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "7e583a6a-5836-4085-9bc7-f93457c1d203", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "d3eb7af6-507c-4c2e-b278-688593e0a7b4", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.choice(idxs)]  # Random mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Adaptive resizing of the population\n                if evaluations % (self.population_size * 2) == 0:\n                    population = np.vstack((population, np.random.uniform(self.lower_bound, self.upper_bound, (self.dim,))))\n                    fitness = np.append(fitness, func(population[-1]))\n                    success_rate = np.append(success_rate, 0)\n                    evaluations += 1\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Introduce adaptive population resizing and enhanced mutation control to improve exploration and convergence.", "configspace": "", "generation": 36, "fitness": 0.4044441725647456, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.40 with standard deviation 0.25.", "error": "", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.7677862799659024, 0.7886717800009823, 0.7675067774516032, 0.7960929953914571, 0.7931789955120752, 0.7709211597672962, 0.786189657347668, 0.804741530019003, 0.7864349410837581, 0.6116417009986131, 0.6487375550679284, 0.6299746652242886, 0.6010512431881965, 0.6398128266946248, 0.6443084657332789, 0.6307478377312439, 0.6443088588589583, 0.6633341391655074, 0.14759001310386544, 0.1392568872036436, 0.14328771569071486, 0.13597816120136885, 0.14898908671583688, 0.1249315668808908, 0.2665675202692779, 0.2766685019783066, 0.17207426356947453, 0.11583046840574063, 0.12174920020631308, 0.12282979748043943, 0.1064127502356983, 0.11916728251385666, 0.1322162506983151, 0.13091781085107634, 0.12024494322508161, 0.11076570622217408, 0.9839499079503841, 0.9812442166709585, 0.9852123745221778, 0.9566910665736501, 0.9754477371264628, 0.9525380721534338, 0.9605999515066808, 0.9751340835613401, 0.9497035271150618, 0.46038239750994303, 0.5355248200884053, 0.5016682634424441, 0.490691390032151, 0.534187580491756, 0.5122996546763947, 0.5161181535009416, 0.5176066337337746, 0.5272069000003833, 0.7531841884250086, 0.7529229639884035, 0.7373846624203368, 0.7494036357628984, 0.8315307501303031, 0.8438953624213423, 0.7062520698132271, 0.7702897404570029, 0.7816612871385976, 0.5057164965098067, 0.42445522941135605, 0.4263694875591445, 0.41937751555590175, 0.4924196064686168, 0.3921342167926054, 0.40228624062826024, 0.4744257868767757, 0.4894954479230579, 0.32364334330795597, 0.3456082012462436, 0.5338249452130823, 0.41041457587200414, 0.4718123395387045, 0.4455703310513952, 0.35026951595013367, 0.43804831630396635, 0.44554651903036646, 0.4018775120576251, 0.523464547417962, 0.4135098579197374, 0.4401668797991162, 0.5007054874499783, 0.4234661984416662, 0.427915708227097, 0.508529474224362, 0.4363386618481653, 0.6087388493671163, 0.6001024686438806, 0.5438308716442928, 0.5473873798307751, 0.590836895571309, 0.5553104702543447, 0.5720278869110058, 0.6192450144521566, 0.5952072507708684, 0.15643989759089239, 0.12499707347689071, 0.09863411052543447, 0.20570716420251833, 0.29177800145664035, 0.211429442471607, 0.24897827486163526, 0.19569145703657165, 0.1290200220654586, 0.29882906925268693, 0.34195075635004046, 0.3747751840009478, 0.32872420314642403, 0.3694247279953946, 0.3463451134213674, 0.30606882474436015, 0.38439918345524615, 0.3493768730646005, 0.673712652854846, 0.7211122534822332, 0.6975655385550787, 0.6648520338111394, 0.7048785106375874, 0.6915779345135438, 0.6668216569703617, 0.7079184847455603, 0.6879627901107299, 0.09419882084661402, 0.10070946536552927, 0.12344375907937433, 0.10857637807024845, 0.15107471944692785, 0.13395972458380034, 0.14986091292419168, 0.15886308666936877, 0.11940407742494386, 0.13755783740926586, 0.3955449771953712, 0.12879502018362887, 0.14312768267420106, 0.13938973388639297, 0.20391566502094904, 0.19590678940824668, 0.17813641049306883, 0.1268485617469165, 0.37582105208729866, 0.4351768202571402, 0.3897653176400665, 0.3580322424033323, 0.3784529277133589, 0.40647767999139195, 0.3921382555579813, 0.4174950405599154, 0.4268103868327824, 0.34899468932456756, 0.3698800389997733, 0.31685108704857834, 0.27141072681478706, 0.3041831736204885, 0.3383527269522628, 0.2882763429434183, 0.35681669329311616, 0.31796786374541375, 0.2045963329299435, 0.17248418092021423, 0.1916325290540647, 0.16769380431604763, 0.17884596799099994, 0.1813135686084305, 0.18725226712317633, 0.1850562618087852, 0.1935556936081343, 0.2091336631544931, 0.27136547853742743, 0.4531372502971759, 0.411264003130975, 0.18219024352379165, 0.3355351935641244, 0.21165767851603023, 0.2038092549024877, 0.2129856710253757, 0.7997929514163711, 0.8235629114262053, 0.7843242345937413, 0.6766242743739118, 0.8258336304941623, 0.1812448444266357, 0.1667645863584164, 0.19795238304019835, 0.7432341412792278, 0.16607921177252916, 0.8066073152332347, 0.16547244187542842, 0.15955193289031155, 0.5423009226785911, 0.20297625107306017, 0.1993094608918594, 0.15244577272417847, 0.20794356318146345, 0.18923199103197397, 0.17835603775578057, 0.18743710302957461, 0.17093618967040458, 0.16219437362888833, 0.17486124549677518, 0.1721188694067678, 0.2204850285024258, 0.18488173976386635, 0.0738853354366723, 0.08916778131746028, 0.0900554314421168, 0.09382980560136489, 0.07315475284780915, 0.07899649964699507, 0.06995489644241226, 0.10205774943276957, 0.0778883908365211]}, "mutation_prompt": null}
{"id": "e87cd044-b0ef-4010-8952-2e0ed7e031df", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "69d37887-ed98-4323-aa88-32801a74a24b", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "59704d1f-d1c8-4aa2-b6a5-ebe40799deaf", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "a08e9361-69f3-462e-a3aa-69ac259555fc", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "6431e612-a965-4aa2-8611-ea7705738fbb", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "8caab685-1c10-488a-af8a-1451c4adb8ce", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "c4609187-8f45-41cd-b0bf-930bd64118f1", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "32d363ca-192b-41a2-bfa4-26d58f9707ba", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "49d2ba6c-4b12-4f3a-8bc9-a948eb48f4ba", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "a1225da0-c6c3-4880-ab36-4efd01ba5327", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "5e362539-93a2-46ff-bf13-da1234905090", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "a77d281c-cea4-438f-99d7-2cbec64708c8", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "84ed0777-f20c-4b6c-aacc-71d1d2b8c85a", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "2febd429-6640-43e1-9e51-cba6ec8507d6", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "4c16fc39-e8ba-4c0e-b7ca-046fea60f43b", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "232f4528-b106-41f8-b7f5-972ab6e90d66", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "0c8fd235-6635-409e-8383-8fc8f886b19d", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "426c700f-8a62-490c-b43c-e08d5714cbf9", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "9d78c885-f454-429b-9aa4-94e47095c93c", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "2d2b2d57-70c1-4f91-ab10-10f01f0ab022", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        def opposition_based_learning(ind, lower_bound, upper_bound):\n            return lower_bound + upper_bound - ind\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate opposition-based learning for enhanced exploration\n                opposite = opposition_based_learning(trial, self.lower_bound, self.upper_bound)\n                f_opposite = func(opposite)\n                evaluations += 1\n                if f_opposite < f_trial:\n                    population[i] = opposite\n                    fitness[i] = f_opposite\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Introduce opposition-based learning to enhance exploration and convergence in adaptive differential evolution.", "configspace": "", "generation": 56, "fitness": 0.29669187289807053, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.22.", "error": "", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.7019899694238079, 0.7086401494564274, 0.6801173199018439, 0.6983377208281504, 0.7110164281799614, 0.6768022177682071, 0.7103188336568502, 0.6965610374263058, 0.6960648694950042, 0.40340391523460706, 0.5748079725604485, 0.4724399626989486, 0.5153804023594983, 0.5242880622871557, 0.5103791632899046, 0.47277489400573236, 0.5155986498564313, 0.506098761982479, 0.37332424989508695, 0.10737989996395658, 0.11761477238175211, 0.14056438294043416, 0.13113781257506885, 0.3593842622129003, 0.12986123221148904, 0.13754514087796488, 0.11662351642318824, 0.04513959879833562, 0.08449939436372222, 0.06854648846637623, 0.08598121244764456, 0.09183717860457896, 0.09759982397919009, 0.08981998584522732, 0.1085397386477005, 0.09466195435132208, 0.9698433275913003, 0.9681294567739661, 0.8890142767629986, 0.9749105254582716, 0.9161859693588056, 0.9557358501323829, 0.9724755833523192, 0.9885947087833725, 0.9633185714506902, 0.3480821130225005, 0.3328046358479959, 0.38405892499882477, 0.32573602411445035, 0.34185443742500343, 0.36114197961357053, 0.42291337458403655, 0.4322989877390889, 0.40721861535673687, 0.2013111000267942, 0.2099892907489751, 0.4700842815169012, 0.7136277339981966, 0.8090788694955512, 0.7747953083419403, 0.3497654368167973, 0.7002122362723098, 0.673490362344215, 0.2175682853116374, 0.2467713287947053, 0.16841576929921953, 0.154002076990006, 0.19094303073977203, 0.21517518043449457, 0.19710325755462377, 0.19637602887108618, 0.23972601813054106, 0.21829788812913453, 0.22412025732847696, 0.27877786722995035, 0.1597989604625849, 0.25429144420569916, 0.26530621091413586, 0.15735915923147603, 0.20467072625673843, 0.26591235872244257, 0.29979040795663947, 0.36381254288696685, 0.254906815997463, 0.17607127108501175, 0.21422488537383422, 0.31393300578765504, 9.999999999998899e-05, 9.999999999998899e-05, 0.17832712148567975, 0.3625393895097664, 0.38963003090411275, 0.35037468312536346, 0.23449924685250634, 0.32636665202259896, 0.14928158831300897, 0.4691141144600519, 0.4079576996362486, 0.4603483548675571, 0.19735112102102126, 0.21142281777832916, 0.1941409762278148, 0.22949531262930212, 0.18563342017926, 0.1968472755801034, 0.10644659455507521, 0.11464994171724852, 0.13052909202653173, 0.23145573894216087, 0.23935910207431166, 0.19445689354876683, 0.22248894757249105, 0.24642417794008897, 0.24026925932442766, 0.22424397374505434, 0.20573473826475308, 0.2868328423691652, 0.575742495791894, 0.6077103029968547, 0.5341819722944834, 0.6131723253033416, 0.6017274990711436, 0.5404720163578389, 0.5894217477693868, 0.6243531545433013, 0.6515939435706856, 0.12847170631692462, 0.11585994198333505, 0.12044720214420634, 0.11148281030126839, 0.10176642636314459, 0.11308155473088533, 0.15379926242172937, 0.12087297315918166, 0.07325374939408102, 0.14937279813687765, 0.135351292829739, 0.12199924171464749, 0.16256816032198929, 0.13087477019634697, 0.13468918663695695, 0.13671463385984384, 0.12505036545971304, 0.15854761402906115, 0.33487204065433596, 0.4039585799541934, 0.35712277428317707, 0.3041347896774479, 0.3509835319666109, 0.30559560288115406, 0.3463268778895039, 0.34097613758571854, 0.34436792635206803, 0.25623369050132516, 0.26866605563075596, 0.28486634674385014, 0.13615828227005822, 0.21240777428926338, 0.26429490057181515, 0.267934791903934, 0.28917127037778334, 0.25289759885453, 0.16648050145964843, 0.19480039442097397, 0.1787329882526223, 0.18067888963105583, 0.17591382569973302, 0.1692586329039979, 0.17058062527037088, 0.17924132705683338, 0.17095705843611153, 0.21452131191126644, 0.19249054707591917, 0.1744633724307474, 0.1894255754895393, 0.1817558647326385, 0.2407998414872009, 0.16792522075177263, 0.31405567220002273, 0.18190327358259184, 0.13786530753453352, 0.16991048108115991, 0.1595659900988896, 0.13793031829158808, 0.14720840502456323, 0.14970199297222575, 0.14403848156593213, 0.1581059670273891, 0.15499723302560087, 0.15032150549578183, 0.1872512766848181, 0.1750298659207885, 0.21055059933726172, 0.16471057502241582, 0.16664435906652708, 0.18261759214719642, 0.1958157856478554, 0.1795661750234422, 0.18652230296359062, 0.18834908338777934, 0.17785198210648634, 0.18330112221245531, 0.1802386772036374, 0.18910431833560248, 0.21315181554995866, 0.18477718538122612, 0.19292517262978637, 0.05556735179782424, 0.05964176773333896, 0.06524773693000008, 0.06068192233244685, 0.05875792732368523, 0.0625365402666348, 0.058950960938232266, 0.05882369045571545, 0.06412119289464047]}, "mutation_prompt": null}
{"id": "8b786762-d91e-4a14-9478-39234e207bc7", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "f0ea4410-82c1-440a-b953-5440463c02f7", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "1f0a56b1-d45f-4c7c-a0b4-e72c0c1e9983", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "268165b7-cc64-4eae-a3c9-110244ca41ad", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        def local_search(individual):\n            step_size = 0.1\n            candidate = individual + np.random.uniform(-step_size, step_size, self.dim)\n            return np.clip(candidate, self.lower_bound, self.upper_bound)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                # Local search refinement\n                trial = local_search(trial)\n\n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n            # Adjust population size adaptively\n            self.population_size = max(4, int(self.population_size * 0.99))\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Improve differential evolution by incorporating local search refinement and adaptive population size.", "configspace": "", "generation": 60, "fitness": 0.2769658660779326, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.23.", "error": "", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.507202732320883, 0.4793440538762086, 0.5545985659622114, 0.4654609584280981, 0.4706362610032597, 0.49702641215470833, 0.5364757028951364, 0.5068465592675725, 0.5118599346734511, 0.09074898177412538, 0.11103346005718873, 0.120036111901199, 0.04489530709528644, 0.07992314342442819, 0.06781311329565365, 0.12831090635930198, 0.07625588312623244, 0.0729551421346809, 0.1456725536026936, 0.1366598192869709, 0.11962101896126187, 0.12679781917230337, 0.11638819238797027, 0.13216141640532608, 0.1089807634594595, 0.12832581555925804, 0.14159221104350672, 0.09385329601137926, 0.09527578373579093, 0.10712769091385033, 0.11612778181844274, 0.10802577893041476, 0.07879522776149694, 0.09632351702057473, 0.08410348353230035, 0.11734416194378117, 0.929362619724899, 0.9376324341080383, 0.9646591243925687, 0.9166022670888708, 0.9445443687224178, 0.938699920391577, 0.9259633181667803, 0.9525699093818776, 0.9217115456938167, 0.3435719149625537, 0.3470928021256823, 0.36012927255306926, 0.36939609914198035, 0.36986221175186085, 0.35212770051448883, 0.3401217738444402, 0.35227361172593397, 0.35664896534092116, 0.7296803087789668, 0.8328636687209104, 0.2269986667633569, 0.8835307094331815, 0.7907989013457613, 0.5973067612099322, 0.8640588903571855, 0.23300254131427933, 0.8640919973522856, 0.252716908603676, 0.129921037586626, 0.2643155613275845, 0.1971402739325444, 0.2373353409485922, 0.23394898709258893, 0.2504583751793348, 0.25759606804415847, 0.22918546309599264, 0.2558211269779518, 0.20934482322092152, 0.25349154063618506, 0.2421518403860463, 0.25101701980299707, 0.21360862065636443, 0.21418012786530216, 0.22155292799029913, 0.21595188476855487, 0.1336660684237133, 0.07966964345116267, 0.13825538888934374, 0.06385831622950322, 0.10554322925626636, 0.11528763064226044, 0.00010175961670555456, 0.08385845071962938, 0.09608645845757657, 0.10736563784370046, 0.12251844004879364, 0.11733368830807644, 0.16374972079266048, 0.1244000941468596, 0.16029685738758448, 0.13271841045342003, 0.1853634496240385, 0.10177902584246434, 0.012312954290651934, 0.02191474588759834, 9.999999999998899e-05, 9.999999999998899e-05, 0.006513935390826564, 9.999999999998899e-05, 9.999999999998899e-05, 0.0011397256222221985, 0.0028742253698242903, 0.13179571239237486, 0.12785380953536873, 0.12090945173748202, 0.1434011642028663, 0.13836264484458427, 0.14317616107816333, 0.13744928588790917, 0.13690305690662663, 0.13473481679810306, 0.44670656443185863, 0.4549331342355446, 0.4513004172355912, 0.44991568490639366, 0.4457018716330108, 0.46136595384071366, 0.42165918511919653, 0.455501043943932, 0.4482679176950294, 0.15012660490440066, 0.10326183302644354, 0.13814912918398004, 0.11724683608955766, 0.10483048703004805, 0.1186790481480513, 0.14904874923324896, 0.11153868676989764, 0.11026222184810941, 0.2931971602804567, 0.2486099281328733, 0.3243979231551972, 0.27259365454542017, 0.25537525492295965, 0.19395583318037057, 0.17240163701996059, 0.3189996458429809, 0.27155627573067376, 0.3249800413819445, 0.31826318586244384, 0.32396192545452474, 0.31791346527013487, 0.32821695744696033, 0.31510162140292874, 0.31468792469704043, 0.3170219441240347, 0.31419315306368467, 0.2601475702042575, 0.2707298537146303, 0.2640384378863704, 0.25133150774640045, 0.26484932184222665, 0.2795629969640492, 0.2645961922681763, 0.2981620338771769, 0.25707702781394626, 0.21904908930741063, 0.22862983115194457, 0.2193640165360483, 0.19081974902903365, 0.20588162804120713, 0.21720117851269172, 0.22349453133513553, 0.21618836385776907, 0.19971367891671854, 0.20916452014485765, 0.1754948505081163, 0.20070145642551795, 0.19605733054453756, 0.18971196594299233, 0.17765427597196026, 0.1875156260499823, 0.23859621275761422, 0.2076726574789155, 0.7290710243022323, 0.8062593051334824, 0.7506961317790815, 0.7617420505513922, 0.19806573700187768, 0.16470811781281158, 0.20502980665832882, 0.7520100101181639, 0.16587236607149536, 0.16738600633846368, 0.7922555540243805, 0.7485314012345929, 0.2091599901381178, 0.6851619271879448, 0.7270244568762868, 0.12687110058568374, 0.20967546452682517, 0.20908432106846508, 0.17535559923184862, 0.1935799782594344, 0.17720651501481022, 0.18361573598379088, 0.18424389321736223, 0.17725659949466321, 0.2035793903539609, 0.19647497613870568, 0.18480162598382444, 0.084756263632224, 0.08812789340116356, 0.10108896417092872, 0.10813188818615294, 0.08207504227523532, 0.09281817053175889, 0.07348034791557201, 0.0887032355634696, 0.10216362205150276]}, "mutation_prompt": null}
{"id": "73aa0889-280e-4c95-96ca-227ce830b6a4", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "c9094d70-316a-4102-a3ce-254a637c6e06", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "03813475-d87a-4668-a6f5-ae1637695ff5", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "0fbc66f8-0bd0-423d-add5-1695c6ca60e1", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "5cab5765-3f6e-4a0e-b550-f5af929cd433", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "6cb8c525-ab40-471c-aa63-a7fe8b8f7483", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "2668507c-d5f8-4db2-b987-8e0d84543457", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "765cf811-adb4-4f6f-80e0-1de627d16433", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "4b9da1db-31c8-4020-a1b5-c0ec0d9d0a6f", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "f71f6175-d7e2-4025-9325-8296cf3e126f", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "1de6a7df-f4cc-4064-b948-941a25b8911b", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "7ef12e14-7c3f-4feb-a3cb-bb602a3d50f1", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "56fdd521-079a-4d88-9028-24a480ee8268", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "723ddb16-8a97-489e-8d0e-6da943c94db6", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "6f37461f-de92-4ea9-8c83-2d16425a60bd", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "f674a7f1-3eee-41fb-845f-a0b8bdeff857", "solution": "import numpy as np\n\nclass EnhancedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor + np.random.rand() * 0.5  # Adaptive mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] *= 0.9\n\n                # Elitism: Preserve the best solution found\n                best_idx = np.argmin(fitness)\n                best_solution = population[best_idx]\n                best_fitness = fitness[best_idx]\n\n                if fitness[i] > best_fitness:\n                    population[i] = best_solution\n                    fitness[i] = best_fitness\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "EnhancedDifferentialEvolution", "description": "Enhance diversity and convergence of differential evolution by implementing adaptive mutation factor and elitism.", "configspace": "", "generation": 76, "fitness": 0.0948995114886842, "feedback": "The algorithm EnhancedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.20.", "error": "", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.12508240404756343, 0.12508240404756343, 0.12508240404756343, 0.15825484265015854, 0.15825484265015854, 0.15825484265015854, 0.14647115849748082, 0.14647115849748082, 0.14647115849748082, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.021109511458604957, 0.021109511458604957, 0.021109511458604957, 0.00032660291008757003, 0.00032660291008757003, 0.00032660291008757003, 0.012036276089079312, 0.012036276089079312, 0.012036276089079312, 0.01676376578351302, 0.01676376578351302, 0.01676376578351302, 0.013086862441298974, 0.013086862441298974, 0.013086862441298974, 0.05101168899622588, 0.05101168899622588, 0.05101168899622588, 0.993192326455472, 0.993192326455472, 0.993192326455472, 0.9916022241260335, 0.9916022241260335, 0.9916022241260335, 0.9878914200565039, 0.9878914200565039, 0.9878914200565039, 0.022157838853799183, 0.022157838853799183, 0.022157838853799183, 0.03472362533593931, 0.03472362533593931, 0.03472362533593931, 0.051485473513365965, 0.051485473513365965, 0.051485473513365965, 0.08964696067201217, 0.08964696067201217, 0.08964696067201217, 0.0759855248987158, 0.0759855248987158, 0.0759855248987158, 0.036808424699604436, 0.036808424699604436, 0.036808424699604436, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1738992314838229, 0.1738992314838229, 0.1738992314838229, 0.20026427645461642, 0.20026427645461642, 0.20026427645461642, 0.16491868661484255, 0.16491868661484255, 0.16491868661484255, 0.044110722872043207, 0.044110722872043207, 0.044110722872043207, 0.039986880378807155, 0.039986880378807155, 0.039986880378807155, 0.010187287242853227, 0.010187287242853227, 0.010187287242853227, 0.07536823062274434, 0.07536823062274434, 0.07536823062274434, 0.09518306245998642, 0.09518306245998642, 0.09518306245998642, 0.09383671930788462, 0.09383671930788462, 0.09383671930788462, 0.1237439565995665, 0.1237439565995665, 0.1237439565995665, 0.14437229387099781, 0.14437229387099781, 0.14437229387099781, 0.1543431983210578, 0.1543431983210578, 0.1543431983210578, 0.06951524531921693, 0.06951524531921693, 0.06951524531921693, 0.07145734665100723, 0.07145734665100723, 0.07145734665100723, 0.07624108805157481, 0.07624108805157481, 0.07624108805157481, 0.108094487024055, 0.108094487024055, 0.108094487024055, 0.09498789147213194, 0.09498789147213194, 0.09498789147213194, 0.10197249352498039, 0.10197249352498039, 0.10197249352498039, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1303692316653443, 0.1303692316653443, 0.1303692316653443, 0.07740645346560127, 0.07740645346560127, 0.07740645346560127, 0.07537885948552103, 0.07537885948552103, 0.07537885948552103, 0.15199604743856143, 0.15199604743856143, 0.15199604743856143, 0.09889102934352745, 0.09889102934352745, 0.09889102934352745, 0.09831187430003174, 0.09831187430003174, 0.09831187430003174, 0.13473654523496625, 0.13473654523496625, 0.13473654523496625, 0.1488523572020678, 0.1488523572020678, 0.1488523572020678, 0.14962421951639548, 0.14962421951639548, 0.14962421951639548, 0.03681995327163823, 0.03681995327163823, 0.03681995327163823, 0.02604055330433075, 0.02604055330433075, 0.02604055330433075, 0.03181767319962803, 0.03181767319962803, 0.03181767319962803]}, "mutation_prompt": null}
{"id": "a9a699da-67b5-4f88-8a47-d0d87417291d", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "d9be410f-d6d5-42f8-b78f-513a5ed154ea", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "ab6fabac-dd36-4d17-bbb2-20b29ea4b95d", "solution": "import numpy as np\n\nclass ImprovedDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor_base = 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                \n                # Diversity-based mutation scaling\n                diversity = np.std(population, axis=0).mean()\n                F = self.mutation_factor_base + 0.5 * (1 - diversity / 5.0)\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] *= 0.9\n\n                # Tournament selection for additional diversity enhancement\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "ImprovedDifferentialEvolution", "description": "Improve convergence and diversity by introducing a diversity-based mutation strategy and adaptive mutation scaling.", "configspace": "", "generation": 79, "fitness": 0.3054155328527088, "feedback": "The algorithm ImprovedDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.22.", "error": "", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.6289986566462107, 0.6289986566462107, 0.6289986566462107, 0.6002921053725858, 0.6002921053725858, 0.6002921053725858, 0.6575897225092009, 0.6575897225092009, 0.6575897225092009, 0.45885581011946575, 0.45885581011946575, 0.45885581011946575, 0.4306547735638464, 0.4306547735638464, 0.4306547735638464, 0.420515623644784, 0.420515623644784, 0.420515623644784, 0.1357409313252449, 0.1357409313252449, 0.1357409313252449, 0.13548156855086524, 0.13548156855086524, 0.13548156855086524, 0.20359866153395356, 0.20359866153395356, 0.20359866153395356, 0.1401983424368165, 0.1401983424368165, 0.1401983424368165, 0.1427712802321761, 0.1427712802321761, 0.1427712802321761, 0.12574451605314607, 0.12574451605314607, 0.12574451605314607, 0.9655952923140356, 0.9655952923140356, 0.9655952923140356, 0.9732887913315685, 0.9732887913315685, 0.9732887913315685, 0.9732969203946447, 0.9732969203946447, 0.9732969203946447, 0.30623047532926173, 0.30623047532926173, 0.30623047532926173, 0.3439033679581118, 0.3439033679581118, 0.3439033679581118, 0.32873845175951066, 0.32873845175951066, 0.32873845175951066, 0.5522737382141454, 0.5522737382141454, 0.5522737382141454, 0.6933127145804789, 0.6933127145804789, 0.6933127145804789, 0.5718279000712727, 0.5718279000712727, 0.5718279000712727, 0.25676131183889417, 0.25676131183889417, 0.25676131183889417, 0.20089917949776692, 0.20089917949776692, 0.20089917949776692, 0.23111382872804886, 0.23111382872804886, 0.23111382872804886, 0.016162222917493807, 0.016162222917493807, 0.016162222917493807, 0.18968549472371066, 0.18968549472371066, 0.18968549472371066, 0.2998210868431368, 0.2998210868431368, 0.2998210868431368, 0.21393979212346248, 0.21393979212346248, 0.21393979212346248, 0.24393688777219702, 0.24393688777219702, 0.24393688777219702, 0.23615682260286563, 0.23615682260286563, 0.23615682260286563, 0.38605925578479705, 0.38605925578479705, 0.38605925578479705, 0.3832746324521027, 0.3832746324521027, 0.3832746324521027, 0.42740482428794646, 0.42740482428794646, 0.42740482428794646, 0.0830891745236344, 0.0830891745236344, 0.0830891745236344, 0.10595020609598449, 0.10595020609598449, 0.10595020609598449, 0.06278422883973833, 0.06278422883973833, 0.06278422883973833, 0.1778697845100352, 0.1778697845100352, 0.1778697845100352, 0.17505191205726534, 0.17505191205726534, 0.17505191205726534, 0.17246413528836513, 0.17246413528836513, 0.17246413528836513, 0.5057536444606463, 0.5057536444606463, 0.5057536444606463, 0.46293070312630435, 0.46293070312630435, 0.46293070312630435, 0.542034249671597, 0.542034249671597, 0.542034249671597, 0.1187642979071295, 0.1187642979071295, 0.1187642979071295, 0.09011713750099826, 0.09011713750099826, 0.09011713750099826, 0.11392653862706648, 0.11392653862706648, 0.11392653862706648, 0.20584463124348706, 0.20584463124348706, 0.20584463124348706, 0.28336160188532267, 0.28336160188532267, 0.28336160188532267, 0.14667885444447293, 0.14667885444447293, 0.14667885444447293, 0.3118041629151921, 0.3118041629151921, 0.3118041629151921, 0.2831721280302608, 0.2831721280302608, 0.2831721280302608, 0.3020507974633323, 0.3020507974633323, 0.3020507974633323, 0.2506113388904673, 0.2506113388904673, 0.2506113388904673, 0.24691526472532854, 0.24691526472532854, 0.24691526472532854, 0.23690984918396085, 0.23690984918396085, 0.23690984918396085, 0.20189690803413374, 0.20189690803413374, 0.20189690803413374, 0.18409312977190606, 0.18409312977190606, 0.18409312977190606, 0.19747077141428548, 0.19747077141428548, 0.19747077141428548, 0.1966607029201225, 0.1966607029201225, 0.1966607029201225, 0.2048443247082843, 0.2048443247082843, 0.2048443247082843, 0.39939383984900245, 0.39939383984900245, 0.39939383984900245, 0.7363964001527328, 0.7363964001527328, 0.7363964001527328, 0.6925849176783054, 0.6925849176783054, 0.6925849176783054, 0.18937661632435043, 0.18937661632435043, 0.18937661632435043, 0.1659388830577072, 0.1659388830577072, 0.1659388830577072, 0.1652229282260681, 0.1652229282260681, 0.1652229282260681, 0.1260588751833156, 0.1260588751833156, 0.1260588751833156, 0.20041791579265655, 0.20041791579265655, 0.20041791579265655, 0.183328430689219, 0.183328430689219, 0.183328430689219, 0.1796308724713659, 0.1796308724713659, 0.1796308724713659, 0.06946408230545786, 0.06946408230545786, 0.06946408230545786, 0.0720504129559999, 0.0720504129559999, 0.0720504129559999, 0.07287872895577985, 0.07287872895577985, 0.07287872895577985]}, "mutation_prompt": null}
{"id": "f826bd76-5879-417f-bba0-6dd631402cd3", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            adaptive_pop_size = int(self.population_size * (1.0 - 0.5 * (evaluations / self.budget)))\n            ranked_indices = np.argsort(fitness)\n            elite_size = max(1, int(0.1 * self.population_size))\n            elite_indices = ranked_indices[:elite_size]\n\n            new_population = []\n            for i in range(adaptive_pop_size):\n                if evaluations >= self.budget:\n                    break\n                \n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    new_population.append((trial, f_trial))\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n            if new_population:\n                j = 0\n                for idx, fit in sorted(new_population, key=lambda x: x[1]):\n                    population[ranked_indices[j]] = idx\n                    fitness[ranked_indices[j]] = fit\n                    j += 1\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Introduce adaptive population scaling and enhanced elitism to improve global convergence and exploration balance.", "configspace": "", "generation": 80, "fitness": 0.08846190005198354, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.09 with standard deviation 0.12.", "error": "", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.13909209414892798, 0.15955563136113937, 0.1742086348897749, 0.13746951983326594, 0.11061293118227844, 0.2008869501901328, 0.14677423770611875, 0.14647115849748082, 0.14647115849748082, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.032546047628122854, 0.036218213139886934, 0.026423223728067713, 0.03525404054235226, 0.037619782802365775, 0.01658498693439392, 0.02533462939444875, 0.02559139298623847, 0.03423897546235144, 0.028316296749955505, 0.019284958166725263, 0.0045384311736516025, 0.024154346200202736, 0.017620300072290207, 0.020587293894820835, 0.016551471221190384, 0.002947700344127391, 0.029055663614652283, 0.19186747391050485, 0.9950445067520778, 0.20905393525343596, 0.15554504629799482, 0.15522962225392933, 0.7595741236160691, 0.9451531230301007, 0.13806214506667203, 0.12023929794019605, 0.061787895461349995, 0.07224544570348712, 0.05962570848712312, 0.050321552569269845, 0.03472362533593931, 0.08220446122791358, 0.051485473513365965, 0.056906857423403956, 0.051485473513365965, 0.09338997670098892, 0.08696047608908086, 0.12033186121520034, 0.09691495317499754, 0.0759855248987158, 0.08496461195335536, 0.07533581815191559, 0.08554546789601047, 0.1052800396205481, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.024139761582357644, 0.009211887089413562, 0.014189039118883917, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.059273466369135, 0.013725588924206056, 0.017389369313914216, 0.03901919848237778, 0.021110961300732534, 0.033535333519876476, 9.999999999998899e-05, 0.016716046229140025, 0.0009017642031765583, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.18133325919365306, 0.1738992314838229, 0.1738992314838229, 0.1574345191429467, 0.14051979663307756, 0.20716442522805745, 0.1778732357985645, 0.15945084599384685, 0.1562595257765883, 0.050748958658410226, 0.02511082818822885, 0.03254382048050297, 0.018645778707606087, 0.023006192749169152, 0.0197410886119902, 0.029223790451932463, 0.02359287428103196, 0.0269984024754365, 0.15384333584055954, 0.14080274169604512, 0.11984258172506523, 0.15177737172063588, 0.13384027960668188, 0.14763840475466827, 0.16410314313109042, 0.18458209742530673, 0.17179026540135345, 0.14995566942670668, 0.1450736667346011, 0.15748109394049004, 0.14042166512658316, 0.1700653817406924, 0.13366116572135855, 0.1471000916914712, 0.14788474378692296, 0.1528681662557334, 0.0772592214706832, 0.10028019773897212, 0.07414508259589858, 0.08255950511043153, 0.08290039244916292, 0.09988030370298695, 0.09952508530532544, 0.08771378354285442, 0.08966971852936134, 0.1275819482060231, 0.1592594848424822, 0.15017590091062516, 0.14052130326505108, 0.14636135052803834, 0.1616647501157037, 0.18152513199705078, 0.12797093303194984, 0.1487423964021869, 0.10665208752161193, 0.1303447274876568, 0.12020820919353137, 0.09611060860545162, 9.999999999998899e-05, 0.10446866383521614, 9.999999999998899e-05, 0.05244799056165794, 0.12241615570927533, 0.1594338134290827, 0.17495993591301773, 0.1768273172435303, 0.10889088032027627, 0.11864626279056045, 0.1623227165668717, 0.22446667841674028, 0.14997070563033343, 0.123629147167576, 0.11042168965794774, 0.11011299794547014, 0.10943758804783743, 0.19017733841775986, 0.20851249624431578, 0.1791215292146615, 0.13666144683326342, 0.09850600630721906, 0.10467072509192421, 0.20389862198776498, 0.18200903820031666, 0.1927746684232633, 0.17949671478812212, 0.18448400396134879, 0.2015099734342145, 0.17501624566834129, 0.18976510315733297, 0.18442724138378375, 0.03681995327163823, 0.0391754037914116, 0.03681995327163823, 0.04683830540338274, 0.036330577599230085, 0.04012612088848422, 0.03257259939212909, 0.03181767319962803, 0.04226935089151118]}, "mutation_prompt": null}
{"id": "b469b990-0d14-4763-ab47-92f9875cd450", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "085ead0d-5f45-4a11-b3b9-cdec0010ebdf", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "c1394632-1512-4b05-8b0c-0bda9d33d46e", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "50c40f77-2994-4b68-a7d0-c19f314ebdba", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "2e60ead8-25a8-415e-9226-c542128964fe", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "4edea7fd-2780-402e-826f-806ab1b4da7e", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "ad57e81f-03dd-430c-afb2-6b6b2f80e4fc", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                # Introduce self-adaptive mutation factor\n                F = self.mutation_factor[i] = 0.9 * self.mutation_factor[i] + 0.1 * np.random.rand()  \n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Elitism with niche preservation\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                most_diverse_idx = np.argmax(crowd_distances)\n                if fitness[most_diverse_idx] > f_trial:\n                    population[most_diverse_idx] = trial\n                    fitness[most_diverse_idx] = f_trial\n\n                # Tournament selection for enhanced diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Strengthen the diversity of differential evolution by introducing a self-adaptive mutation factor and leveraging elitism with niche preservation.", "configspace": "", "generation": 87, "fitness": 0.41444306999887104, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.41 with standard deviation 0.30.", "error": "", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8908790863794316, 0.9068442797667063, 0.894203293024583, 0.8880687746152733, 0.8825366526248652, 0.8809903282786418, 0.8930243503985252, 0.893509828045599, 0.9044765878269919, 0.8333412617483766, 0.846132733777722, 0.7339097687151226, 0.8363023055031871, 0.8265231036394323, 0.7816917215092873, 0.8156115193711947, 0.7694925654284765, 0.7275478613703009, 0.14401196346283418, 0.13554884305062587, 0.17258848851402675, 0.14910603633238773, 0.15126105714732452, 0.16288710505299098, 0.13819855317698382, 0.15012706005778642, 0.17157189541155438, 0.1414848316485583, 0.12925330576552263, 0.11581764620162904, 0.12015669727669032, 0.13033596498587596, 0.10637343994744874, 0.12767419948639958, 0.10939110685437448, 0.12510557762819174, 0.9793466785296896, 0.9648052808211554, 0.9669752284840218, 0.9690130721632934, 0.9873500648545169, 0.9745666081883203, 0.9797396645333822, 0.978360416996307, 0.9831015438511234, 0.696844069641184, 0.764970384148897, 0.7654808105394844, 0.7496193863302725, 0.7184097941719909, 0.7218904552580256, 0.7380923167305401, 0.7698878707771304, 0.744885571974975, 0.3844214762168141, 0.8831672883106055, 0.22567687914537038, 0.9018509300817887, 0.9027513979705227, 0.9109960857578144, 0.8942671601394829, 0.39638175787704233, 0.23511159785911595, 0.22602615908388557, 0.22725536227649656, 0.3855092648742422, 0.13001161394989336, 0.1861674089662757, 0.24312649899104344, 0.24426438914513604, 0.2287761352688844, 0.4850679739916163, 0.2605191547153034, 0.1316632476581472, 0.16273005855704592, 0.1772358780389881, 0.1851648919740585, 0.1730140589832868, 0.28833455177734246, 0.2518183641119107, 0.35261565139891926, 0.15130247191192525, 0.34679380621030054, 0.10121668783087212, 0.030712486881449563, 0.31318294533224666, 0.181789935347774, 0.3401235579805256, 0.5241305569031791, 0.2775930506883061, 0.5015373525646287, 0.39548867322240844, 0.493903141497953, 0.22093554392821557, 0.538983629293385, 0.7403663180377473, 0.6712865938034733, 0.4486197053358667, 0.7579610431482505, 0.3563872767241054, 0.49695076108113967, 0.4120421058801902, 0.2886147915871161, 0.220400028464943, 0.236398543447365, 0.21316317209976732, 0.16093551153530772, 0.2337582093428714, 0.40184464175313883, 0.1778497375558603, 0.43605620241441445, 0.2814474338156061, 0.47926980841911027, 0.34313151697311683, 0.3339617877271005, 0.2532941242578828, 0.23609167634190642, 0.7290560732585967, 0.7609136140097948, 0.8197429194075815, 0.6793101405489399, 0.6003120962767461, 0.6981266926000681, 0.7860258203932409, 0.726658179691461, 0.777148867574078, 0.09576788688724214, 0.14888655313783306, 0.13299602642413844, 0.14188015577494129, 0.13090951966975828, 0.13306929907060638, 0.17609078413117862, 0.12022905108046489, 0.17160680636132475, 0.14700548144866876, 0.13488437937890718, 0.18798013297054417, 0.22616129607699176, 0.11951708721028698, 0.1409304808979066, 0.11885822711267957, 0.1144095716176724, 0.12143475640416623, 0.40332304002230435, 0.3807695849347432, 0.6999287129558445, 0.5686510767996433, 0.5309097927121637, 0.7353962708474067, 0.5272027778397017, 0.4916709322509092, 0.672461846305223, 0.2856540473220721, 0.32184912004214894, 0.5073005392683481, 0.30575056854260496, 0.597478830037354, 0.3381102433366625, 0.48040412505386787, 0.2546220537297297, 0.4762812917041478, 0.19613139627102105, 0.1977154692865588, 0.2238015363820023, 0.19024032896131315, 0.2095029455044879, 0.17842968282504967, 0.19497533197594463, 0.22111181184235496, 0.1915266117697655, 0.18030930981541282, 0.1954097231200067, 0.23652465665198696, 0.20761518927224654, 0.20385835756780601, 0.18962607405568999, 0.18685129176583148, 0.20258897460982006, 0.21906114854529135, 0.8322738255090214, 0.1970825178678448, 0.8142839951564759, 0.15985212492964784, 0.9059790442510006, 0.16601150318000113, 0.9065374091663165, 0.8981909302906743, 0.8626368777368979, 0.8138768555477442, 0.7181731226411803, 0.11561425943491521, 0.8429916614571155, 0.1655435767365374, 0.16475376270228825, 0.38052133429538304, 0.1519983491497856, 0.8650229139459102, 0.17259781031039934, 0.17790184103171525, 0.1746931068633788, 0.1822252085566215, 0.16851051833698294, 0.1691604016208379, 0.20271125503373655, 0.19691259826897267, 0.18560241140160083, 0.08106386694386625, 0.09309110059923553, 0.08391623718153784, 0.1299498176020628, 0.07255826199001736, 0.07872601407945856, 0.07640374481468482, 0.08542404199561282, 0.07318514730368586]}, "mutation_prompt": null}
{"id": "98aab4a0-aee9-48f4-9a66-248aaa30170b", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "6fba58ed-b2e3-449f-9686-6e29da403848", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "69f37df1-b6a8-4e51-81cf-e90ef48566f1", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "48bf246a-4f43-4a2e-9018-14310f6a96be", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "e7228369-b3d9-4961-9f85-a445d051b8d6", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n        best_idx = np.argmin(fitness)\n        best_solution = population[best_idx].copy()\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n\n                # Adaptive mutation factor based on fitness diversity\n                fitness_range = np.ptp(fitness)\n                F = self.mutation_factor[np.random.randint(self.population_size)] * max(0.1, fitness_range / (np.max(fitness) + 1e-9))\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                    if f_trial < fitness[best_idx]:\n                        best_idx = i\n                        best_solution = trial.copy()\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Introduce adaptive mutation scaling based on fitness diversity and employ elitism to preserve the best solutions.", "configspace": "", "generation": 92, "fitness": 0.1717853664044227, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.12.", "error": "", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.1916749318343186, 0.1902277896599619, 0.1698924437844913, 0.15685416706692135, 0.1718110604280233, 0.28443753219798407, 0.22161432447552964, 0.19156470084553556, 0.18763980962395665, 0.06273549193171579, 0.15879348152620443, 0.1613366843915055, 0.1266897316634631, 0.11359992291637555, 0.18318433895228692, 0.13942446660640473, 0.31860277541120496, 0.15691141810672438, 0.15172196097401724, 0.11959683392692333, 0.15139136422994304, 0.10290096234722423, 0.11175660969693113, 0.09903154593978891, 0.1450479159156075, 0.1316547477200991, 0.13401894983447782, 0.03960317604539265, 0.08723577615089939, 0.06556099630862067, 0.08841730169226614, 0.08652121290409454, 0.1311835961616875, 0.10418027207012326, 0.09007318491069893, 0.10228094207557348, 0.9718981458195214, 0.9659534349798227, 0.9716033043725018, 0.0878414900214971, 0.08811895352705446, 0.08116848194853121, 0.11801288953954614, 0.2167658495275271, 0.1848672222868729, 0.08715926883433589, 0.1157420005362958, 0.08656428293795837, 0.20159699186006974, 0.1775755160357907, 0.13559964557995519, 0.08886418820995345, 0.09498536541459546, 0.13857596553470652, 0.140270366821015, 0.10466062032786028, 0.24142534648834724, 0.19806337641744698, 0.19269938788234076, 0.2548416247609244, 0.35301924752553604, 0.23791796208251526, 0.3474031673797584, 0.12834053085559116, 0.11946194855967462, 0.12772383264818532, 0.08916493702787176, 0.07732992619664347, 0.05826259850861848, 0.14501381032436944, 0.2047988356515712, 0.1268576721654383, 0.17547339493247982, 0.1675808675528737, 0.13394730083204398, 0.18268079257808112, 0.14267236630849944, 0.15527836347097668, 0.1798731332632748, 0.13161033779564446, 0.14521152585302954, 0.14326388481349517, 0.1397950881216582, 0.2590007913466127, 0.19030252436542772, 0.11399989774385644, 0.11201328460573601, 0.11185226612397514, 0.07515056535811815, 0.07972965289316525, 0.11160512352976826, 0.2131670800104858, 0.07659103483530394, 0.19544403495881313, 0.16387433949704022, 0.14457304237096236, 0.3832231088977084, 0.2036668953809614, 0.18754439783636567, 0.1444542986047056, 0.027801316297097922, 0.1327587230277053, 0.1151836755422031, 0.12209738482770194, 0.11394256042979245, 0.13613772126746426, 0.14504317734839955, 0.19109876837900952, 0.17048114901134592, 0.16079701327538154, 0.129910354265509, 0.07471696208272005, 0.15734165951252654, 0.15556708247012196, 0.018975113419215317, 0.0723675639377217, 0.0181424061751031, 0.22860368264973696, 0.25982253545075173, 0.40255302255847847, 0.13120688896230692, 0.1427923583529409, 0.12627196132212104, 0.2202893357519069, 0.3180804428623272, 0.21109819188628554, 0.11575730096056047, 0.08611069203559274, 0.08726115765919162, 0.1036592108622224, 0.10727564589415584, 0.13450305554564235, 0.07903745669859441, 0.07853912839480004, 0.07820068606661768, 0.142075618917343, 0.2245139198451781, 0.15090525974253155, 0.21980304614368884, 0.12366873473365125, 0.11916298845918027, 0.1746290965138826, 0.2094892102826631, 0.1765604932086069, 0.17265212626190773, 0.16083663140422377, 0.19934950632326853, 0.21220428776375488, 0.18784377066755698, 0.18195313588624318, 0.16649240783900354, 0.17069918537725703, 0.1965213073200972, 0.13994858895108486, 0.1653340810012902, 0.18799539937282828, 0.23533332818422126, 0.23198936241605284, 0.23339979438302394, 0.17777812501044954, 0.14420619576213578, 0.12948105236463303, 0.2142788077884975, 0.19325114885266015, 0.2016968521543988, 0.2245411333108357, 0.21879310781219174, 0.23171179160804545, 0.18059696464464248, 0.18470628058051353, 0.2266044251026006, 0.17844226091595516, 0.16768625080614985, 0.17832990282131655, 0.17589703156507208, 0.1722798804293012, 0.20327148675688833, 0.18228133385624945, 0.17767206368245703, 0.1787392562077159, 0.4231836317133747, 0.3152719335254577, 0.31028697963584195, 0.16619738419782282, 0.5391740096976605, 0.3818054823390453, 0.162713338845209, 0.16799310885857688, 0.1656484456491094, 0.07943947843526744, 0.08193240184492157, 0.09428932531301215, 0.10394430290430356, 0.1199334194671634, 0.10887614959324654, 0.18039050620921482, 0.2602913178495444, 0.16869635624289658, 0.1806895996488127, 0.20357192304296612, 0.17795913149335352, 0.18307626711989744, 0.16660577650538055, 0.18895722537872017, 0.21602704540422535, 0.1826075988319481, 0.17426530417803265, 0.08988107793795697, 0.09480466708631174, 0.1516578656845159, 0.12723478229698992, 0.07825161702172811, 0.08141261989317494, 0.08524460550529434, 0.0838074417369975, 0.07758500125454759]}, "mutation_prompt": null}
{"id": "d3b75db2-7ac3-4a03-9e49-075e15811792", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "21910ae0-e4f5-4ad8-aa29-59b65b473654", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "4e1a09f3-21f7-4087-88f3-e8806d7ac14f", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "de150f2f-3632-4766-80c7-1bbcfe1e1259", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n        \n        best_solution = population[np.argmin(fitness)]\n        best_fitness = np.min(fitness)\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[i]  # Use individual-specific mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                    self.mutation_factor[i] = min(1.0, self.mutation_factor[i] + 0.1)  # Increase F upon success\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n                    self.mutation_factor[i] = max(0.5, self.mutation_factor[i] - 0.1)  # Decrease F upon failure\n\n                if f_trial < best_fitness:\n                    best_solution = trial\n                    best_fitness = f_trial\n\n            # Elitism: ensure best solution is retained\n            population[np.argmax(fitness)] = best_solution\n            fitness[np.argmax(fitness)] = best_fitness\n\n        return best_solution", "name": "AdaptiveDifferentialEvolution", "description": "Introduce a success-based mutation factor adjustment and elitism to improve convergence and robustness.", "configspace": "", "generation": 96, "fitness": 0.43996852276112114, "feedback": "The algorithm AdaptiveDifferentialEvolution got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.44 with standard deviation 0.28.", "error": "", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8437723641617463, 0.8280412905597513, 0.8208740901056122, 0.8111564921522858, 0.8326965518695196, 0.8117260807789692, 0.8225974722598534, 0.8251416722672907, 0.8348647763504533, 0.6998727963991642, 0.7304654909853934, 0.7282925260360291, 0.692861280437733, 0.694809844660285, 0.6906669701439057, 0.6974664315287393, 0.7177641751432859, 0.6995000947888599, 0.11088289542817842, 0.1487975032198121, 0.1410235064783667, 0.12128686350608753, 0.10644806773003579, 0.17370206088375506, 0.1388792024760953, 0.17052337982020216, 0.10996399293110304, 0.12088161202405423, 0.11086610692113552, 0.1156395273302292, 0.13012386592693714, 0.13598951555718997, 0.1438566202158187, 0.14628114982096996, 0.11275073212569298, 0.09980306268697403, 0.9782010632325447, 0.9663700396881012, 0.9288357417712818, 0.9647806284567042, 0.9396169823774168, 0.9772892505922711, 0.9708125291968508, 0.9607613169801649, 0.9526690169296543, 0.6137858200810627, 0.609168028762143, 0.6678609329419413, 0.6101312626623572, 0.6300642525523545, 0.6398872161280267, 0.6102019850623028, 0.671416511981562, 0.6037329477074177, 0.832214527495662, 0.8404203431012591, 0.8398843482266691, 0.8267818646253844, 0.8516452171912459, 0.8578029851608456, 0.8487037980586531, 0.8400886971859175, 0.8703001130716594, 0.5574490833778054, 0.2783568909623001, 0.3402113474456032, 0.12832531884615217, 0.5873576733771031, 0.358969618730397, 0.31508840646278946, 0.24123703378518013, 0.3339573147694014, 0.29698027656808157, 0.12664234873755154, 0.45624563009676045, 0.37574470554704165, 0.4009263869415308, 0.4300604198702792, 0.4020891929085323, 0.3465136728420457, 0.37723290273384746, 0.6171463811609784, 0.6294378902075577, 0.6598308601092193, 0.6387547796305919, 0.5692816103770044, 0.6041608227705383, 0.44063050111281377, 0.5582461678915831, 0.6550197447672397, 0.7322859805686414, 0.7284853627975807, 0.7205387086159905, 0.7375830982864822, 0.6890477396497727, 0.6961038078013764, 0.6860758064458143, 0.679590797507483, 0.6920972690166904, 0.19694817729427883, 0.2743738926256353, 0.21312114319454978, 0.1779369694540155, 0.3585900599189775, 0.5434578404037326, 0.1875062691065229, 0.15760515745693393, 0.3117422415190575, 0.4944797721296348, 0.4955281759873821, 0.4767922433107773, 0.5181935573310159, 0.4886518932623285, 0.4995670245298056, 0.5245788099520783, 0.42866141857716833, 0.4762900273940921, 0.7825942993519912, 0.8163952863711826, 0.7729063784004867, 0.7698851058216655, 0.7901499865729997, 0.8021176725859367, 0.7717989187916431, 0.7907517231032486, 0.7798146454323092, 0.08371170619368296, 0.10386549316717597, 0.09868868083499438, 0.10041625675149246, 0.1350662117002014, 0.11299382840885996, 0.17133826277956743, 0.08276169475793249, 0.10378084235890528, 0.19004732970297222, 0.1846145805317183, 0.18306551990165287, 0.11604322029452974, 0.13176601631540474, 0.11409613357311787, 0.12324209396605146, 0.17320190930411006, 0.1400771146620562, 0.51400131474836, 0.5531156096719694, 0.5691349468326141, 0.44677686106608916, 0.4881606033104905, 0.6095156827966705, 0.5871569092175755, 0.5347674415830779, 0.5210106945272319, 0.4571511924488303, 0.45179664731089897, 0.34195735431377694, 0.27200238236088914, 0.4532724611311373, 0.3551778430290188, 0.32611939760405695, 0.47944724461831667, 0.47948524099288226, 0.18551406495058964, 0.18642121806263645, 0.17712837167203177, 0.19358080385756105, 0.21538504974708983, 0.16744256687232606, 0.17843453507089257, 0.17792339298435023, 0.1774142651987921, 0.20158624416058568, 0.20381636469931896, 0.18949515813533058, 0.19007100788465758, 0.2136448438708659, 0.21258568812101752, 0.21139435019072506, 0.2140793190856769, 0.19793757119933808, 0.8864833427901065, 0.8817664536721672, 0.8687136254169407, 0.1811306112150497, 0.8359844112026261, 0.1843349911618467, 0.16489733165805065, 0.2084475136423376, 0.8317521569185614, 0.2069629386416154, 0.15491259836035276, 0.16593546464137365, 0.7830078341144213, 0.8309694804044258, 0.20548093996945782, 0.7596920649586187, 0.20808861139397106, 0.1528648282686832, 0.18399695957808948, 0.1729732149274643, 0.17549516690221645, 0.1685685835648537, 0.19827347771297177, 0.18146868326444554, 0.16154166222278454, 0.17389146257388188, 0.17421572275341735, 0.07670278528948771, 0.075403047398371, 0.06993817472478803, 0.07042063324178616, 0.07574720195937457, 0.060217628306578064, 0.06286027703221297, 0.06532691077776775, 0.08021085767680491]}, "mutation_prompt": null}
{"id": "aad707ea-ddec-4bcf-a4d5-4418950bcfc7", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "44e0980d-cf83-46bb-a959-ac4f020eed8f", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
{"id": "ebcd9d2e-2ef6-478b-b9e2-9fcb455fca75", "solution": "import numpy as np\n\nclass AdaptiveDifferentialEvolution:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 10 * dim\n        self.mutation_factor = 0.5 + np.random.rand(self.population_size) * 0.5  # Dynamic mutation factor\n        self.crossover_probability = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n        population = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        fitness = np.asarray([func(ind) for ind in population])\n        evaluations = self.population_size\n        success_rate = np.zeros(self.population_size)\n\n        def crowding_distance(individual):\n            return np.sum(np.square(individual))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                if evaluations >= self.budget:\n                    break\n\n                idxs = [idx for idx in range(self.population_size) if idx != i]\n                a, b, c = population[np.random.choice(idxs, 3, replace=False)]\n                F = self.mutation_factor[np.random.randint(self.population_size)]  # Randomly select a mutation factor\n                mutant = np.clip(a + F * (b - c), self.lower_bound, self.upper_bound)\n\n                adaptive_crossover = min(1.0, self.crossover_probability + 0.1 * (1 - success_rate[i]))\n                cross_points = np.random.rand(self.dim) < adaptive_crossover\n\n                if not np.any(cross_points):\n                    cross_points[np.random.randint(0, self.dim)] = True\n                trial = np.where(cross_points, mutant, population[i])\n                \n                f_trial = func(trial)\n                evaluations += 1\n\n                if f_trial < fitness[i]:\n                    population[i] = trial\n                    fitness[i] = f_trial\n                    success_rate[i] = 1\n                else:\n                    success_rate[i] = 0.9 * success_rate[i]\n\n                # Incorporate crowding distance for diversity\n                crowd_distances = np.asarray([crowding_distance(ind) for ind in population])\n                least_crowded_idx = np.argmax(crowd_distances)\n                if fitness[least_crowded_idx] > f_trial:\n                    population[least_crowded_idx] = trial\n                    fitness[least_crowded_idx] = f_trial\n\n                # Tournament selection to enhance diversity\n                tournament_size = 3\n                tournament_idxs = np.random.choice(self.population_size, tournament_size, replace=False)\n                best_t_idx = tournament_idxs[np.argmin(fitness[tournament_idxs])]\n                if fitness[best_t_idx] > f_trial:\n                    population[best_t_idx] = trial\n                    fitness[best_t_idx] = f_trial\n\n        best_idx = np.argmin(fitness)\n        return population[best_idx]", "name": "AdaptiveDifferentialEvolution", "description": "Enhance the diversity and convergence of differential evolution by dynamically adjusting mutation factor and integrating tournament selection.", "configspace": "", "generation": 12, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "2a7fd760-e76a-4211-9b95-3feba0496046", "metadata": {"aucs": [0.8392562433011845, 0.856232167570451, 0.8440529436769773, 0.869544361441371, 0.8525776932803604, 0.8761664145729453, 0.8421786935754467, 0.8723067736063125, 0.8474261786491261, 0.732866417603417, 0.7302538575466919, 0.7494401052521613, 0.7511621257992935, 0.7784354645189603, 0.7584635483842858, 0.7514352716434685, 0.7306110347468093, 0.7774762804563022, 0.13335607356370405, 0.14136960054213943, 0.15560552302010655, 0.148132292737854, 0.5798946238197711, 0.14991264894156653, 0.1661300408572659, 0.174778699427814, 0.1754801384757937, 0.13953679919822592, 0.1324039950172139, 0.11311880179289491, 0.12682819075500829, 0.12499136441796976, 0.1253150069965795, 0.11694771154932748, 0.10478113627695906, 0.1161486379399641, 0.9917839547043047, 0.9839395821043411, 0.9806633608033047, 0.9821839284791576, 0.945615942627338, 0.9686252129691025, 0.9774260861239837, 0.9781803717678489, 0.9744034492421765, 0.6047402293461972, 0.6193414086484819, 0.6493590234944264, 0.6035082748771655, 0.6468467352322447, 0.6172641575895543, 0.7200142607973398, 0.7079384194300421, 0.7149825212539389, 0.2262228870522598, 0.8972154786996321, 0.8603132488841809, 0.8400541624478535, 0.8594619271312824, 0.877985241590305, 0.8629211506304858, 0.8912432400667835, 0.871289264767926, 0.2620131116351747, 0.24817026948217458, 0.25459017496062775, 0.24616048723498363, 0.27320681993219675, 0.24284540936471033, 0.6041411050252704, 0.7273767518861838, 0.23436142159860252, 0.628898042292084, 0.5795287000322762, 0.6006269202248276, 0.5847949412633111, 0.6024615019751658, 0.6293761800543239, 0.5633632725443289, 0.6110135786870654, 0.5384519107746619, 0.6516643570565721, 0.6612161243257102, 0.6731301418733349, 0.6011005483073952, 0.5665227212701007, 0.6085148761169679, 0.5758191721065122, 0.6144951721590384, 0.5958886188349943, 0.7018454887327958, 0.7426556891962885, 0.6894122254674813, 0.43225635172697097, 0.6731588955053216, 0.6827841326798766, 0.7284856377703008, 0.7355398049952154, 0.731990587990497, 0.3245434797254544, 0.3545396522958325, 0.34949831165473466, 0.49516767605584877, 0.5165651822505308, 0.2473306091440316, 0.2902925189365786, 0.19912432523986645, 0.3741519083684468, 0.4726360639445759, 0.5116475567234747, 0.5204200230166273, 0.4710675075573082, 0.46551875652522445, 0.438872877398077, 0.4666455691169288, 0.4562604549958077, 0.4736828660279465, 0.7536051765701567, 0.7979600929628765, 0.7874695998756355, 0.7785979060966177, 0.7680941925985771, 0.8064305513513786, 0.8106397689242841, 0.7936997311404316, 0.7587030607109364, 0.13740155912814422, 0.10623958713263526, 0.1342939822953504, 0.14994833561162246, 0.1440612837602001, 0.6550558782275842, 0.16039119616669628, 0.1467770107984112, 0.10101219150171892, 0.10452354350447035, 0.12119520421543062, 0.12688948821169488, 0.17290322462459495, 0.18267466111035024, 0.28351358676666905, 0.23058486046980864, 0.12575174853557003, 0.12174519301084596, 0.4354721942778761, 0.4636175968333818, 0.48282147616915805, 0.4492390773427998, 0.6824632607847684, 0.5406157767925512, 0.5351706480066626, 0.5813065168902913, 0.559895054684517, 0.3221289712258162, 0.3104802338137346, 0.4104192937820027, 0.45950920592086697, 0.4994541132404805, 0.42136652389997176, 0.25296630960195143, 0.41426119237958714, 0.4336868096336256, 0.2517664268479347, 0.16516330097777632, 0.22979201731292587, 0.16598531881515388, 0.18592192910384664, 0.1654863847683642, 0.15332937192868235, 0.19581535593175092, 0.19039615822761347, 0.178435383230652, 0.192368376834531, 0.22466210756340843, 0.20664833310486097, 0.5698585202603061, 0.19804310786208812, 0.19382294303311232, 0.6732556270557554, 0.1904631377609156, 0.17308638656770525, 0.830137343212901, 0.7628383034609065, 0.18166190907104862, 0.8395995876751248, 0.8292806184492164, 0.8559505523729921, 0.8875491782788973, 0.8619454950302514, 0.15323381933174385, 0.15370324512670341, 0.2059848336379071, 0.7725395664772364, 0.7802772598889323, 0.16756242696121915, 0.21028979248262192, 0.20712386539150762, 0.20241938464503606, 0.1753925031187027, 0.18488181439796303, 0.1786077826201814, 0.16812103022158298, 0.17132742717858074, 0.18418486547543034, 0.18275198086390587, 0.18254597584063637, 0.1891676882303316, 0.10913320734610188, 0.0769432645791237, 0.07771211000521183, 0.08411210858570228, 0.09538610668491532, 0.0827367732679346, 0.06592330418114578, 0.072007852540376, 0.0576600766814831]}, "mutation_prompt": null}
