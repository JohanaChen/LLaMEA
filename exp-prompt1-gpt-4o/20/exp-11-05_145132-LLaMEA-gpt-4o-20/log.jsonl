{"id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 0, "fitness": 0.3220802510023428, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.30.", "error": "", "parent_id": null, "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "08b20ec1-2e75-4109-96ea-2c18a965e6fe", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "95021833-ce65-40c8-8233-e8c4956a54aa", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "71333449-7930-4136-aec3-8dd2f3630857", "solution": "import numpy as np\n\nclass AdaptiveHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.initial_population_size = 20\n        self.final_population_size = 5  # Reduced final population to focus search\n        self.w = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def _adaptive_population_size(self, evaluations):\n        # Dynamically adjust population size\n        return int(self.initial_population_size - \n                   (self.initial_population_size - self.final_population_size) * evaluations / self.budget)\n\n    def __call__(self, func):\n        np.random.seed(42)\n\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.initial_population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.initial_population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.initial_population_size\n        \n        while evaluations < self.budget:\n            population_size = self._adaptive_population_size(evaluations)\n            r1 = np.random.rand(population_size, self.dim)\n            r2 = np.random.rand(population_size, self.dim)\n            velocities = (self.w * velocities[:population_size] + self.c1 * r1 * \n                          (personal_best_positions[:population_size] - positions[:population_size]) + \n                          self.c2 * r2 * (global_best_position - positions[:population_size]))\n            positions[:population_size] = np.clip(positions[:population_size] + velocities, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in positions[:population_size]])\n            evaluations += population_size\n\n            for i in range(population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            for i in range(population_size):\n                indices = np.random.choice(population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "AdaptiveHybridPSODE", "description": "An Adaptive Hybrid PSODE with Dynamic Population Size to enhance convergence speed and robustness by varying swarm size based on budget progress.", "configspace": "", "generation": 3, "fitness": 0.3043999836585231, "feedback": "The algorithm AdaptiveHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.29.", "error": "", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.9083823367496983, 0.9083823367496983, 0.9083823367496983, 0.9136452466917503, 0.9136452466917503, 0.9136452466917503, 0.9111108224481108, 0.9111108224481108, 0.9111108224481108, 0.7564875427757443, 0.7564875427757443, 0.7564875427757443, 0.8051413079524883, 0.8051413079524883, 0.8051413079524883, 0.017968083088844677, 0.017968083088844677, 0.017968083088844677, 0.10537027432981505, 0.10537027432981505, 0.10537027432981505, 0.14119071672148342, 0.14119071672148342, 0.14119071672148342, 0.12640027299747814, 0.12640027299747814, 0.12640027299747814, 0.13808681759311436, 0.13808681759311436, 0.13808681759311436, 0.1272603052424185, 0.1272603052424185, 0.1272603052424185, 0.1370177922877348, 0.1370177922877348, 0.1370177922877348, 0.9876385939528298, 0.9876385939528298, 0.9876385939528298, 0.9910246273868368, 0.9910246273868368, 0.9910246273868368, 0.9873352801245554, 0.9873352801245554, 0.9873352801245554, 0.5795692316259691, 0.5795692316259691, 0.5795692316259691, 0.15059336417238378, 0.15059336417238378, 0.15059336417238378, 0.5652446249407699, 0.5652446249407699, 0.5652446249407699, 0.22016869792883964, 0.22016869792883964, 0.22016869792883964, 0.8082713059830863, 0.8082713059830863, 0.8082713059830863, 0.23077521744616902, 0.23077521744616902, 0.23077521744616902, 0.250328808387255, 0.250328808387255, 0.250328808387255, 0.1765698864541826, 0.1765698864541826, 0.1765698864541826, 0.21651610255633835, 0.21651610255633835, 0.21651610255633835, 0.23862257012451027, 0.23862257012451027, 0.23862257012451027, 0.13445687823368624, 0.13445687823368624, 0.13445687823368624, 0.278596229663311, 0.278596229663311, 0.278596229663311, 0.005090095405455242, 0.005090095405455242, 0.005090095405455242, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09785913767119359, 0.09785913767119359, 0.09785913767119359, 0.0637256509325067, 0.0637256509325067, 0.0637256509325067, 0.008561048240293023, 0.008561048240293023, 0.008561048240293023, 0.055780165029472806, 0.055780165029472806, 0.055780165029472806, 0.06279988902387357, 0.06279988902387357, 0.06279988902387357, 0.20541598065583333, 0.20541598065583333, 0.20541598065583333, 0.24571080392282552, 0.24571080392282552, 0.24571080392282552, 0.06074708442136523, 0.06074708442136523, 0.06074708442136523, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08402865789710956, 0.08402865789710956, 0.08402865789710956, 0.6031123446994429, 0.6031123446994429, 0.6031123446994429, 0.5818848352320836, 0.5818848352320836, 0.5818848352320836, 0.5971110216173898, 0.5971110216173898, 0.5971110216173898, 0.1073697224272655, 0.1073697224272655, 0.1073697224272655, 0.09547665370951286, 0.09547665370951286, 0.09547665370951286, 0.09761253912215873, 0.09761253912215873, 0.09761253912215873, 0.18663102010368515, 0.18663102010368515, 0.18663102010368515, 0.26521556614008646, 0.26521556614008646, 0.26521556614008646, 0.16041621348468071, 0.16041621348468071, 0.16041621348468071, 0.25425287058801294, 0.25425287058801294, 0.25425287058801294, 0.40975739040607584, 0.40975739040607584, 0.40975739040607584, 0.4710932009660128, 0.4710932009660128, 0.4710932009660128, 0.28291376067327556, 0.28291376067327556, 0.28291376067327556, 0.24717148098591002, 0.24717148098591002, 0.24717148098591002, 0.13786996614992952, 0.13786996614992952, 0.13786996614992952, 0.20523255543024665, 0.20523255543024665, 0.20523255543024665, 0.19590387155037947, 0.19590387155037947, 0.19590387155037947, 0.22056373344692703, 0.22056373344692703, 0.22056373344692703, 0.24695050163627164, 0.24695050163627164, 0.24695050163627164, 0.18313117067487628, 0.18313117067487628, 0.18313117067487628, 0.20846474128057624, 0.20846474128057624, 0.20846474128057624, 0.9324440565521945, 0.9324440565521945, 0.9324440565521945, 0.9145166392062963, 0.9145166392062963, 0.9145166392062963, 0.15714265246027626, 0.15714265246027626, 0.15714265246027626, 0.16746135396102124, 0.16746135396102124, 0.16746135396102124, 0.21166865871184826, 0.21166865871184826, 0.21166865871184826, 0.1570532722838549, 0.1570532722838549, 0.1570532722838549, 0.20845901275375223, 0.20845901275375223, 0.20845901275375223, 0.20386504042688325, 0.20386504042688325, 0.20386504042688325, 0.1786809618534082, 0.1786809618534082, 0.1786809618534082, 0.07136966974814807, 0.07136966974814807, 0.07136966974814807, 0.07516099461531156, 0.07516099461531156, 0.07516099461531156, 0.08714989945653528, 0.08714989945653528, 0.08714989945653528]}, "mutation_prompt": null}
{"id": "bec90387-defb-498b-a7d7-cdc6c78b239c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "c6ea58dd-fa54-4bca-aeda-561a9825d0b3", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "b17e6416-abd6-43dc-a679-76692e0379ab", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "5407effd-d935-44c1-8e3b-a30932e02629", "solution": "import numpy as np\n\nclass DynamicHybridMetaheuristic:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.9  # Start with a higher inertia weight\n        self.w_min = 0.4  # Minimum inertia weight\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F_base = 0.5  # Base scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # Dynamically adjust inertia weight\n            self.w = max(self.w_min, self.w - (0.5 * evaluations / self.budget))\n\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover with variable scaling\n            F_current = self.F_base + (0.3 * evaluations / self.budget)  # Increase F over time\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + F_current * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "DynamicHybridMetaheuristic", "description": "Dynamic Hybrid Metaheuristic combines adaptive weight strategy in PSO with variable scaling in DE for improved convergence and exploitation.", "configspace": "", "generation": 7, "fitness": 0.29601111315631345, "feedback": "The algorithm DynamicHybridMetaheuristic got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.29.", "error": "", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.8953426608115224, 0.8953426608115224, 0.8953426608115224, 0.8955128134221331, 0.8955128134221331, 0.8955128134221331, 0.8967481049050149, 0.8967481049050149, 0.8967481049050149, 0.8120689595697377, 0.8120689595697377, 0.8120689595697377, 0.8298700258475885, 0.8298700258475885, 0.8298700258475885, 0.004832874769228557, 0.004832874769228557, 0.004832874769228557, 0.15598935383594403, 0.15598935383594403, 0.15598935383594403, 0.10025264540291068, 0.10025264540291068, 0.10025264540291068, 0.14523447366220665, 0.14523447366220665, 0.14523447366220665, 0.09164331491170852, 0.09164331491170852, 0.09164331491170852, 0.12738706295015323, 0.12738706295015323, 0.12738706295015323, 0.0935402717271645, 0.0935402717271645, 0.0935402717271645, 0.9862081671922587, 0.9862081671922587, 0.9862081671922587, 0.990472033344777, 0.990472033344777, 0.990472033344777, 0.9900410222014864, 0.9900410222014864, 0.9900410222014864, 0.721956225374131, 0.721956225374131, 0.721956225374131, 0.7543768418911218, 0.7543768418911218, 0.7543768418911218, 0.6866774027133724, 0.6866774027133724, 0.6866774027133724, 0.22953522860348452, 0.22953522860348452, 0.22953522860348452, 0.215851681789211, 0.215851681789211, 0.215851681789211, 0.6636307830328594, 0.6636307830328594, 0.6636307830328594, 0.18201945937575081, 0.18201945937575081, 0.18201945937575081, 0.10314748169246013, 0.10314748169246013, 0.10314748169246013, 0.1471471382927786, 0.1471471382927786, 0.1471471382927786, 0.2070072427061117, 0.2070072427061117, 0.2070072427061117, 0.1618506192443505, 0.1618506192443505, 0.1618506192443505, 0.21919951269226212, 0.21919951269226212, 0.21919951269226212, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014677239330709524, 0.014677239330709524, 0.014677239330709524, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0995541949321328, 0.0995541949321328, 0.0995541949321328, 0.08001769414829596, 0.08001769414829596, 0.08001769414829596, 0.08799153460956077, 0.08799153460956077, 0.08799153460956077, 0.03590700833935012, 0.03590700833935012, 0.03590700833935012, 0.09701947782858211, 0.09701947782858211, 0.09701947782858211, 0.17433404602655733, 0.17433404602655733, 0.17433404602655733, 0.045469473790341164, 0.045469473790341164, 0.045469473790341164, 0.22787751397296518, 0.22787751397296518, 0.22787751397296518, 0.04847102305183182, 0.04847102305183182, 0.04847102305183182, 0.4795761799626954, 0.4795761799626954, 0.4795761799626954, 0.20822649057905407, 0.20822649057905407, 0.20822649057905407, 0.6119866473437204, 0.6119866473437204, 0.6119866473437204, 0.09250607138831801, 0.09250607138831801, 0.09250607138831801, 0.12115152810911989, 0.12115152810911989, 0.12115152810911989, 0.09509504622575882, 0.09509504622575882, 0.09509504622575882, 0.1685623775608439, 0.1685623775608439, 0.1685623775608439, 0.17337923759140195, 0.17337923759140195, 0.17337923759140195, 0.20265323439184768, 0.20265323439184768, 0.20265323439184768, 0.5301856049595504, 0.5301856049595504, 0.5301856049595504, 0.5513800878825554, 0.5513800878825554, 0.5513800878825554, 0.3955146639402439, 0.3955146639402439, 0.3955146639402439, 0.24608649986903963, 0.24608649986903963, 0.24608649986903963, 0.3178384659697765, 0.3178384659697765, 0.3178384659697765, 0.22089311721272142, 0.22089311721272142, 0.22089311721272142, 0.1755529004014701, 0.1755529004014701, 0.1755529004014701, 0.19285979163153855, 0.19285979163153855, 0.19285979163153855, 0.191989260483305, 0.191989260483305, 0.191989260483305, 0.168064378008839, 0.168064378008839, 0.168064378008839, 0.1974400758895687, 0.1974400758895687, 0.1974400758895687, 0.1806449749337431, 0.1806449749337431, 0.1806449749337431, 0.9094772135394483, 0.9094772135394483, 0.9094772135394483, 0.16407150856128006, 0.16407150856128006, 0.16407150856128006, 0.14730161111721896, 0.14730161111721896, 0.14730161111721896, 0.16921535281332, 0.16921535281332, 0.16921535281332, 0.20714825492232625, 0.20714825492232625, 0.20714825492232625, 0.1562751229543865, 0.1562751229543865, 0.1562751229543865, 0.1934572628094886, 0.1934572628094886, 0.1934572628094886, 0.19023530227863905, 0.19023530227863905, 0.19023530227863905, 0.19554517667615612, 0.19554517667615612, 0.19554517667615612, 0.07464960236389362, 0.07464960236389362, 0.07464960236389362, 0.09210280244322366, 0.09210280244322366, 0.09210280244322366, 0.07267169444802235, 0.07267169444802235, 0.07267169444802235]}, "mutation_prompt": null}
{"id": "e6aba995-b04b-46f4-84d7-85f0e5cce6fc", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "8fec86a7-b843-41a0-9e1c-5714321db1e5", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.initial_w = 0.9  # Initial inertia weight for PSO\n        self.final_w = 0.4  # Final inertia weight for PSO\n        self.c1 = 2.0  # Increased cognitive component\n        self.c2 = 2.0  # Increased social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # Linear decrease of inertia weight\n            w = self.final_w + (self.initial_w - self.final_w) * (self.budget - evaluations) / self.budget\n\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Hybrid PSO with DE and Adaptive Parameters for Improved Global and Local Search Balance.", "configspace": "", "generation": 9, "fitness": 0.16585143349127038, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.17 with standard deviation 0.21.", "error": "", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.48699524234813096, 0.48699524234813096, 0.48699524234813096, 0.5421901115183247, 0.5421901115183247, 0.5421901115183247, 0.4982563559879505, 0.4982563559879505, 0.4982563559879505, 0.023175330221903878, 0.023175330221903878, 0.023175330221903878, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03144530782213728, 0.03144530782213728, 0.03144530782213728, 0.08806434313022471, 0.08806434313022471, 0.08806434313022471, 0.05813211467683099, 0.05813211467683099, 0.05813211467683099, 0.0759063405112631, 0.0759063405112631, 0.0759063405112631, 0.06368423790806177, 0.06368423790806177, 0.06368423790806177, 0.059444255823504544, 0.059444255823504544, 0.059444255823504544, 0.05975107873594698, 0.05975107873594698, 0.05975107873594698, 0.9910253283344297, 0.9910253283344297, 0.9910253283344297, 0.9916002477503856, 0.9916002477503856, 0.9916002477503856, 0.9906500784390647, 0.9906500784390647, 0.9906500784390647, 0.10203519753951173, 0.10203519753951173, 0.10203519753951173, 0.11304808583817427, 0.11304808583817427, 0.11304808583817427, 0.07898775271841973, 0.07898775271841973, 0.07898775271841973, 0.1174676892132187, 0.1174676892132187, 0.1174676892132187, 0.1772006510182087, 0.1772006510182087, 0.1772006510182087, 0.20455449454203778, 0.20455449454203778, 0.20455449454203778, 0.08213580449308833, 0.08213580449308833, 0.08213580449308833, 0.05652405509745517, 0.05652405509745517, 0.05652405509745517, 0.12260941474664011, 0.12260941474664011, 0.12260941474664011, 0.07031859982714905, 0.07031859982714905, 0.07031859982714905, 0.09624858711320616, 0.09624858711320616, 0.09624858711320616, 0.06911735968387367, 0.06911735968387367, 0.06911735968387367, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0537044093888277, 0.0537044093888277, 0.0537044093888277, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023626011024081905, 0.023626011024081905, 0.023626011024081905, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0379101600766617, 0.0379101600766617, 0.0379101600766617, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05472495471890837, 0.05472495471890837, 0.05472495471890837, 0.34482312179576513, 0.34482312179576513, 0.34482312179576513, 0.17778474900445307, 0.17778474900445307, 0.17778474900445307, 0.3336869844088195, 0.3336869844088195, 0.3336869844088195, 0.047559888804027506, 0.047559888804027506, 0.047559888804027506, 0.08941197215220598, 0.08941197215220598, 0.08941197215220598, 0.047410938948462156, 0.047410938948462156, 0.047410938948462156, 0.15295200009457444, 0.15295200009457444, 0.15295200009457444, 0.13371894711761556, 0.13371894711761556, 0.13371894711761556, 0.13130558897979716, 0.13130558897979716, 0.13130558897979716, 0.1858541588162167, 0.1858541588162167, 0.1858541588162167, 0.2057184890596041, 0.2057184890596041, 0.2057184890596041, 0.16942568308290862, 0.16942568308290862, 0.16942568308290862, 0.14833582600381523, 0.14833582600381523, 0.14833582600381523, 0.16180822516264393, 0.16180822516264393, 0.16180822516264393, 0.1978034526593242, 0.1978034526593242, 0.1978034526593242, 0.16119946521942297, 0.16119946521942297, 0.16119946521942297, 0.14953707948310535, 0.14953707948310535, 0.14953707948310535, 0.16779797994859713, 0.16779797994859713, 0.16779797994859713, 0.1677602732252721, 0.1677602732252721, 0.1677602732252721, 0.17140944433253813, 0.17140944433253813, 0.17140944433253813, 0.17592873724873748, 0.17592873724873748, 0.17592873724873748, 0.42628720296691436, 0.42628720296691436, 0.42628720296691436, 0.1375017755725958, 0.1375017755725958, 0.1375017755725958, 0.16112448976867, 0.16112448976867, 0.16112448976867, 0.1870641367893252, 0.1870641367893252, 0.1870641367893252, 0.17697344606543142, 0.17697344606543142, 0.17697344606543142, 0.1518883918899594, 0.1518883918899594, 0.1518883918899594, 0.1879799236136347, 0.1879799236136347, 0.1879799236136347, 0.18562531330745946, 0.18562531330745946, 0.18562531330745946, 0.20763375954623264, 0.20763375954623264, 0.20763375954623264, 0.06282342290979215, 0.06282342290979215, 0.06282342290979215, 0.06609671753356083, 0.06609671753356083, 0.06609671753356083, 0.04763802561236263, 0.04763802561236263, 0.04763802561236263]}, "mutation_prompt": null}
{"id": "dbf0a601-3155-4c88-8351-839f14843219", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "af6f945b-f475-4d8d-a70b-90878e1805fd", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "b7fbe587-c066-4e14-9ad4-47e24ea52b24", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "f25a7b41-1a29-4475-b00b-0a63b2ecc28c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "fd0a6efb-8f70-424c-8e04-edcdf6b4c7e8", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "b24b743e-8c62-4462-8c0b-a3f36253ebad", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "6a6a4808-d6aa-4da2-b1bf-0d94cc73c5d3", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "ac21124e-16c2-4fe1-a811-a45bf031d3e3", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w_max = 0.9  # Maximum inertia weight for PSO\n        self.w_min = 0.4  # Minimum inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # Adaptive inertia weight\n            w = self.w_max - (self.w_max - self.w_min) * (evaluations / self.budget)\n\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A modified PSO-DE hybrid with adaptive inertia weight in PSO for enhanced convergence under constrained budgets.", "configspace": "", "generation": 17, "fitness": 0.21327913865805903, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.23.", "error": "", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.7191605536220455, 0.7191605536220455, 0.7191605536220455, 0.7207409438364527, 0.7207409438364527, 0.7207409438364527, 0.7216213799735514, 0.7216213799735514, 0.7216213799735514, 0.03330593660588932, 0.03330593660588932, 0.03330593660588932, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003902158152575441, 0.003902158152575441, 0.003902158152575441, 0.09721555146773864, 0.09721555146773864, 0.09721555146773864, 0.06765882061207062, 0.06765882061207062, 0.06765882061207062, 0.10563944060740049, 0.10563944060740049, 0.10563944060740049, 0.12170472202081506, 0.12170472202081506, 0.12170472202081506, 0.10530430516608891, 0.10530430516608891, 0.10530430516608891, 0.10747814213577567, 0.10747814213577567, 0.10747814213577567, 0.9872025054153013, 0.9872025054153013, 0.9872025054153013, 0.9907029974237184, 0.9907029974237184, 0.9907029974237184, 0.9898902669020287, 0.9898902669020287, 0.9898902669020287, 0.24079554998699104, 0.24079554998699104, 0.24079554998699104, 0.24931012491091908, 0.24931012491091908, 0.24931012491091908, 0.26937820920908484, 0.26937820920908484, 0.26937820920908484, 0.1642664205627874, 0.1642664205627874, 0.1642664205627874, 0.180873937890911, 0.180873937890911, 0.180873937890911, 0.19100826964667772, 0.19100826964667772, 0.19100826964667772, 0.1772248722237746, 0.1772248722237746, 0.1772248722237746, 0.08577512299312207, 0.08577512299312207, 0.08577512299312207, 0.16300161222584286, 0.16300161222584286, 0.16300161222584286, 0.18053152093232006, 0.18053152093232006, 0.18053152093232006, 0.16755264439047313, 0.16755264439047313, 0.16755264439047313, 0.16997402306909226, 0.16997402306909226, 0.16997402306909226, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034008879772385314, 0.034008879772385314, 0.034008879772385314, 0.057995028406268134, 0.057995028406268134, 0.057995028406268134, 0.02284082670550558, 0.02284082670550558, 0.02284082670550558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07205702759662724, 0.07205702759662724, 0.07205702759662724, 0.035782661267585336, 0.035782661267585336, 0.035782661267585336, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08581719200086702, 0.08581719200086702, 0.08581719200086702, 0.45817943152589746, 0.45817943152589746, 0.45817943152589746, 0.20710690647177565, 0.20710690647177565, 0.20710690647177565, 0.4811558008513779, 0.4811558008513779, 0.4811558008513779, 0.08928108375573118, 0.08928108375573118, 0.08928108375573118, 0.08658420898178087, 0.08658420898178087, 0.08658420898178087, 0.08319552126517371, 0.08319552126517371, 0.08319552126517371, 0.1532908304529832, 0.1532908304529832, 0.1532908304529832, 0.21320087480726224, 0.21320087480726224, 0.21320087480726224, 0.1810547766280598, 0.1810547766280598, 0.1810547766280598, 0.25159212762862393, 0.25159212762862393, 0.25159212762862393, 0.33783489430885594, 0.33783489430885594, 0.33783489430885594, 0.4024443849701539, 0.4024443849701539, 0.4024443849701539, 0.21306936312401248, 0.21306936312401248, 0.21306936312401248, 0.1835632449149679, 0.1835632449149679, 0.1835632449149679, 0.16788584637566617, 0.16788584637566617, 0.16788584637566617, 0.19711743431597784, 0.19711743431597784, 0.19711743431597784, 0.1811693815285781, 0.1811693815285781, 0.1811693815285781, 0.17522023614014137, 0.17522023614014137, 0.17522023614014137, 0.17037459699267343, 0.17037459699267343, 0.17037459699267343, 0.1927008271074252, 0.1927008271074252, 0.1927008271074252, 0.19191073126573077, 0.19191073126573077, 0.19191073126573077, 0.6574433127313053, 0.6574433127313053, 0.6574433127313053, 0.1813766018811518, 0.1813766018811518, 0.1813766018811518, 0.16519520086989736, 0.16519520086989736, 0.16519520086989736, 0.1621158683962287, 0.1621158683962287, 0.1621158683962287, 0.32133179374606424, 0.32133179374606424, 0.32133179374606424, 0.1563215591383077, 0.1563215591383077, 0.1563215591383077, 0.18476133183481258, 0.18476133183481258, 0.18476133183481258, 0.19036832714711094, 0.19036832714711094, 0.19036832714711094, 0.1905801849159684, 0.1905801849159684, 0.1905801849159684, 0.06823932980890002, 0.06823932980890002, 0.06823932980890002, 0.07599270409718573, 0.07599270409718573, 0.07599270409718573, 0.06401761766778125, 0.06401761766778125, 0.06401761766778125]}, "mutation_prompt": null}
{"id": "a0b3e43d-4ea2-4212-95c6-dadafc3d6113", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "fcda39d8-e473-4d70-a174-a991ee6d7c8a", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "23af0550-12a2-4407-9310-13311fa7fafb", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "5ab0569a-abe6-4419-add8-cee31344997b", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "a6fb549e-895c-4288-a22e-efc99c1d75a7", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.num_swarms = 2  # Added multiswarm capability\n        self.w = 0.5\n        self.c1 = 1.5\n        self.c2 = 1.5\n        self.F = 0.8\n        self.CR = 0.9\n\n    def __call__(self, func):\n        np.random.seed(42)\n\n        # Initialize swarms\n        swarms = [np.random.uniform(self.lower_bound, self.upper_bound, \n                                    (self.population_size // self.num_swarms, self.dim)) \n                  for _ in range(self.num_swarms)]\n        velocities = [np.random.uniform(-1, 1, s.shape) for s in swarms]\n        personal_best_positions = [np.copy(s) for s in swarms]\n        personal_best_scores = [np.array([func(p) for p in s]) for s in personal_best_positions]\n        \n        global_best_position = min([pb[np.argmin(pbs)] for pb, pbs in zip(personal_best_positions, personal_best_scores)], \n                                   key=lambda p: func(p))\n        global_best_score = func(global_best_position)\n\n        evaluations = sum(len(pb) for pb in personal_best_scores)\n        \n        while evaluations < self.budget:\n            for swarm_index, (positions, velocity, personal_best_position, personal_best_score) in enumerate(zip(swarms, velocities, personal_best_positions, personal_best_scores)):\n                r1, r2 = np.random.rand(2, *positions.shape)\n                velocity = (self.w * velocity + self.c1 * r1 * (personal_best_position - positions) +\n                            self.c2 * r2 * (global_best_position - positions))\n                positions = np.clip(positions + velocity, self.lower_bound, self.upper_bound)\n\n                # Evaluate new positions\n                scores = np.array([func(p) for p in positions])\n                evaluations += len(positions)\n\n                # Update personal and global bests\n                for i in range(len(positions)):\n                    if scores[i] < personal_best_score[i]:\n                        personal_best_score[i] = scores[i]\n                        personal_best_position[i] = positions[i]\n                    if scores[i] < global_best_score:\n                        global_best_score = scores[i]\n                        global_best_position = positions[i]\n\n                if evaluations >= self.budget:\n                    break\n\n                # DE Mutation and Crossover with adaptive F and CR\n                self.F = 0.5 + np.random.rand() * 0.5  # Adaptive F\n                self.CR = 0.8 + np.random.rand() * 0.2  # Adaptive CR\n                for i in range(len(positions)):\n                    indices = np.random.choice(len(positions), 3, replace=False)\n                    x1, x2, x3 = positions[indices]\n                    mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                    crossover_mask = np.random.rand(self.dim) < self.CR\n                    trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                    trial_score = func(trial_vector)\n                    evaluations += 1\n\n                    if trial_score < scores[i]:\n                        positions[i] = trial_vector\n                        scores[i] = trial_score\n\n                        if trial_score < personal_best_score[i]:\n                            personal_best_score[i] = trial_score\n                            personal_best_position[i] = trial_vector\n                        if trial_score < global_best_score:\n                            global_best_score = trial_score\n                            global_best_position = trial_vector\n\n                    if evaluations >= self.budget:\n                        break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A multi-swarm cooperative PSO with adaptive DE parameters for improved global search and convergence.", "configspace": "", "generation": 22, "fitness": 0.14550980881681108, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.15 with standard deviation 0.19.", "error": "", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.24767916429421954, 0.24767916429421954, 0.24767916429421954, 0.2181355675352371, 0.2181355675352371, 0.2181355675352371, 0.22492778597643792, 0.22492778597643792, 0.22492778597643792, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05793156549470346, 0.05793156549470346, 0.05793156549470346, 0.07792675658458392, 0.07792675658458392, 0.07792675658458392, 0.05306461394213624, 0.05306461394213624, 0.05306461394213624, 0.05582879559821563, 0.05582879559821563, 0.05582879559821563, 0.05892279419748725, 0.05892279419748725, 0.05892279419748725, 0.05239677464777781, 0.05239677464777781, 0.05239677464777781, 0.9868485615633747, 0.9868485615633747, 0.9868485615633747, 0.9871479250562244, 0.9871479250562244, 0.9871479250562244, 0.990392966253398, 0.990392966253398, 0.990392966253398, 0.1476702732475953, 0.1476702732475953, 0.1476702732475953, 0.12892662889148054, 0.12892662889148054, 0.12892662889148054, 0.12918157526736684, 0.12918157526736684, 0.12918157526736684, 0.14837169240060943, 0.14837169240060943, 0.14837169240060943, 0.14327157746521102, 0.14327157746521102, 0.14327157746521102, 0.1411972894573017, 0.1411972894573017, 0.1411972894573017, 0.055675651465663445, 0.055675651465663445, 0.055675651465663445, 0.061096980125389, 0.061096980125389, 0.061096980125389, 0.08227545488183674, 0.08227545488183674, 0.08227545488183674, 0.026016014367594154, 0.026016014367594154, 0.026016014367594154, 0.02355183898364832, 0.02355183898364832, 0.02355183898364832, 0.04080563295206718, 0.04080563295206718, 0.04080563295206718, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05503280029705093, 0.05503280029705093, 0.05503280029705093, 0.09355611364031813, 0.09355611364031813, 0.09355611364031813, 0.05013275321727306, 0.05013275321727306, 0.05013275321727306, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.011873906194983297, 0.011873906194983297, 0.011873906194983297, 0.010327544871667538, 0.010327544871667538, 0.010327544871667538, 0.020044342743654076, 0.020044342743654076, 0.020044342743654076, 0.2591260902860614, 0.2591260902860614, 0.2591260902860614, 0.21940018052620702, 0.21940018052620702, 0.21940018052620702, 0.2188749839231544, 0.2188749839231544, 0.2188749839231544, 0.05888213091936756, 0.05888213091936756, 0.05888213091936756, 0.10248195252811143, 0.10248195252811143, 0.10248195252811143, 0.06724646845443494, 0.06724646845443494, 0.06724646845443494, 0.14837333167963285, 0.14837333167963285, 0.14837333167963285, 0.1411008073291301, 0.1411008073291301, 0.1411008073291301, 0.15687144757879545, 0.15687144757879545, 0.15687144757879545, 0.1814696684833118, 0.1814696684833118, 0.1814696684833118, 0.1754334333187917, 0.1754334333187917, 0.1754334333187917, 0.1672355653471359, 0.1672355653471359, 0.1672355653471359, 0.13483950234853692, 0.13483950234853692, 0.13483950234853692, 0.12103816504463882, 0.12103816504463882, 0.12103816504463882, 0.13058204928445827, 0.13058204928445827, 0.13058204928445827, 0.17815086540024427, 0.17815086540024427, 0.17815086540024427, 0.18709304891009437, 0.18709304891009437, 0.18709304891009437, 0.16920030424495713, 0.16920030424495713, 0.16920030424495713, 0.15787920931562294, 0.15787920931562294, 0.15787920931562294, 0.155590104061756, 0.155590104061756, 0.155590104061756, 0.1683155090982975, 0.1683155090982975, 0.1683155090982975, 0.24014052260734253, 0.24014052260734253, 0.24014052260734253, 0.15869891868193642, 0.15869891868193642, 0.15869891868193642, 0.1757270035733811, 0.1757270035733811, 0.1757270035733811, 0.16398090685139266, 0.16398090685139266, 0.16398090685139266, 0.17303110985189318, 0.17303110985189318, 0.17303110985189318, 0.13197485618173976, 0.13197485618173976, 0.13197485618173976, 0.18997314056112002, 0.18997314056112002, 0.18997314056112002, 0.19658957942204958, 0.19658957942204958, 0.19658957942204958, 0.18059615058686618, 0.18059615058686618, 0.18059615058686618, 0.061989807265781516, 0.061989807265781516, 0.061989807265781516, 0.06195547002702728, 0.06195547002702728, 0.06195547002702728, 0.06175260950262074, 0.06175260950262074, 0.06175260950262074]}, "mutation_prompt": null}
{"id": "e8881806-f954-466e-88f0-3d7d356121d6", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w_min = 0.3  # Minimum inertia weight\n        self.w_max = 0.9  # Maximum inertia weight\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # Adaptive inertia weight\n            w = self.w_max - (self.w_max - self.w_min) * (evaluations / self.budget)\n\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "EnhancedHybridPSODE", "description": "Enhanced HybridPSODE with adaptive inertia weight tuning for dynamic exploration-exploitation balance.", "configspace": "", "generation": 23, "fitness": 0.22523979518567078, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.23.", "error": "", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.7221502051168531, 0.7221502051168531, 0.7221502051168531, 0.7088717681013009, 0.7088717681013009, 0.7088717681013009, 0.7411674466336406, 0.7411674466336406, 0.7411674466336406, 0.4931955067032634, 0.4931955067032634, 0.4931955067032634, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04549769856886321, 0.04549769856886321, 0.04549769856886321, 0.09485585170336164, 0.09485585170336164, 0.09485585170336164, 0.06811282669469798, 0.06811282669469798, 0.06811282669469798, 0.11980408257522845, 0.11980408257522845, 0.11980408257522845, 0.1092903853877295, 0.1092903853877295, 0.1092903853877295, 0.10406607620178387, 0.10406607620178387, 0.10406607620178387, 0.09954873413215848, 0.09954873413215848, 0.09954873413215848, 0.987202314848111, 0.987202314848111, 0.987202314848111, 0.9907029658705045, 0.9907029658705045, 0.9907029658705045, 0.9898902729251948, 0.9898902729251948, 0.9898902729251948, 0.370520629407465, 0.370520629407465, 0.370520629407465, 0.13111029894861892, 0.13111029894861892, 0.13111029894861892, 0.343705893722524, 0.343705893722524, 0.343705893722524, 0.5284214270874463, 0.5284214270874463, 0.5284214270874463, 0.1984003806895447, 0.1984003806895447, 0.1984003806895447, 0.2113465513171604, 0.2113465513171604, 0.2113465513171604, 0.18751992893104885, 0.18751992893104885, 0.18751992893104885, 0.08998511727266634, 0.08998511727266634, 0.08998511727266634, 0.1768915682237563, 0.1768915682237563, 0.1768915682237563, 0.1769052343121037, 0.1769052343121037, 0.1769052343121037, 0.18067203671850363, 0.18067203671850363, 0.18067203671850363, 0.19260571300339857, 0.19260571300339857, 0.19260571300339857, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06125595214687274, 0.06125595214687274, 0.06125595214687274, 0.01602525860625792, 0.01602525860625792, 0.01602525860625792, 0.03912857993637753, 0.03912857993637753, 0.03912857993637753, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09235036083104498, 0.09235036083104498, 0.09235036083104498, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05815559618170041, 0.05815559618170041, 0.05815559618170041, 0.472473078824291, 0.472473078824291, 0.472473078824291, 0.20722811579432832, 0.20722811579432832, 0.20722811579432832, 0.45230448692871383, 0.45230448692871383, 0.45230448692871383, 0.07899601416320567, 0.07899601416320567, 0.07899601416320567, 0.07103644755948446, 0.07103644755948446, 0.07103644755948446, 0.09274459145271263, 0.09274459145271263, 0.09274459145271263, 0.16178192090542398, 0.16178192090542398, 0.16178192090542398, 0.21480213694618755, 0.21480213694618755, 0.21480213694618755, 0.24186424910153503, 0.24186424910153503, 0.24186424910153503, 0.23989789868799483, 0.23989789868799483, 0.23989789868799483, 0.2508153137156729, 0.2508153137156729, 0.2508153137156729, 0.265956612350583, 0.265956612350583, 0.265956612350583, 0.27108505582788556, 0.27108505582788556, 0.27108505582788556, 0.17548331275046603, 0.17548331275046603, 0.17548331275046603, 0.1726459055549069, 0.1726459055549069, 0.1726459055549069, 0.16277212882721703, 0.16277212882721703, 0.16277212882721703, 0.17130312891949595, 0.17130312891949595, 0.17130312891949595, 0.20172455266910572, 0.20172455266910572, 0.20172455266910572, 0.1807723564550885, 0.1807723564550885, 0.1807723564550885, 0.18720218978380732, 0.18720218978380732, 0.18720218978380732, 0.1843468407985449, 0.1843468407985449, 0.1843468407985449, 0.6437509602511822, 0.6437509602511822, 0.6437509602511822, 0.14936855141224537, 0.14936855141224537, 0.14936855141224537, 0.17613455201557826, 0.17613455201557826, 0.17613455201557826, 0.16141562469497972, 0.16141562469497972, 0.16141562469497972, 0.3652394482623499, 0.3652394482623499, 0.3652394482623499, 0.15653361806381183, 0.15653361806381183, 0.15653361806381183, 0.19774805284054886, 0.19774805284054886, 0.19774805284054886, 0.17676960573196265, 0.17676960573196265, 0.17676960573196265, 0.19007181577217103, 0.19007181577217103, 0.19007181577217103, 0.07641282018628004, 0.07641282018628004, 0.07641282018628004, 0.06854382256871872, 0.06854382256871872, 0.06854382256871872, 0.067883380752634, 0.067883380752634, 0.067883380752634]}, "mutation_prompt": null}
{"id": "aa64afd5-fed7-4398-ba2c-e4f59196b8de", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "c0af3a4b-f9e8-4a39-833b-dde0e379d1f2", "solution": "import numpy as np\n\nclass AdaptiveHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Initial inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        improvement_threshold = 0.01  # Improvement threshold for adaptive behavior\n        no_improvement_count = 0\n        \n        while evaluations < self.budget:\n            # Adaptive parameter tuning based on progress\n            if no_improvement_count > 5:\n                self.w = np.random.uniform(0.4, 0.9)\n                self.F = np.random.uniform(0.6, 0.9)\n                no_improvement_count = 0\n            \n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n                    no_improvement_count = 0\n                else:\n                    no_improvement_count += 1\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "AdaptiveHybridPSODE", "description": "An adaptive Hybrid PSODE with dynamic parameter tuning for improved convergence across varying problem landscapes.", "configspace": "", "generation": 25, "fitness": 0.2996372157652899, "feedback": "The algorithm AdaptiveHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.27.", "error": "", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.8624061895157175, 0.8624061895157175, 0.8624061895157175, 0.8730164919500327, 0.8730164919500327, 0.8730164919500327, 0.8786815433314079, 0.8786815433314079, 0.8786815433314079, 0.6629576817988039, 0.6629576817988039, 0.6629576817988039, 0.7455569245524731, 0.7455569245524731, 0.7455569245524731, 0.7523577384320949, 0.7523577384320949, 0.7523577384320949, 0.12132197847944626, 0.12132197847944626, 0.12132197847944626, 0.14925506256176524, 0.14925506256176524, 0.14925506256176524, 0.12335735473011977, 0.12335735473011977, 0.12335735473011977, 0.1787815589770546, 0.1787815589770546, 0.1787815589770546, 0.12566571469481747, 0.12566571469481747, 0.12566571469481747, 0.10527888682066278, 0.10527888682066278, 0.10527888682066278, 0.9871107725472448, 0.9871107725472448, 0.9871107725472448, 0.9906487325915602, 0.9906487325915602, 0.9906487325915602, 0.9872412541952778, 0.9872412541952778, 0.9872412541952778, 0.4028822683283414, 0.4028822683283414, 0.4028822683283414, 0.41253119342633426, 0.41253119342633426, 0.41253119342633426, 0.32014354754734864, 0.32014354754734864, 0.32014354754734864, 0.16889308451223095, 0.16889308451223095, 0.16889308451223095, 0.16159882868522124, 0.16159882868522124, 0.16159882868522124, 0.575812649680803, 0.575812649680803, 0.575812649680803, 0.21781248709628942, 0.21781248709628942, 0.21781248709628942, 0.10633810115683684, 0.10633810115683684, 0.10633810115683684, 0.2194675246993738, 0.2194675246993738, 0.2194675246993738, 0.1956351204412824, 0.1956351204412824, 0.1956351204412824, 0.22826540196291367, 0.22826540196291367, 0.22826540196291367, 0.2680472775224645, 0.2680472775224645, 0.2680472775224645, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08400570450933975, 0.08400570450933975, 0.08400570450933975, 0.038017409580171635, 0.038017409580171635, 0.038017409580171635, 0.07013619427957452, 0.07013619427957452, 0.07013619427957452, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.3302249098723773, 0.3302249098723773, 0.3302249098723773, 0.2229589154298035, 0.2229589154298035, 0.2229589154298035, 0.10530476506569553, 0.10530476506569553, 0.10530476506569553, 0.17490989256110911, 0.17490989256110911, 0.17490989256110911, 0.08235286990738566, 0.08235286990738566, 0.08235286990738566, 0.5577377420406804, 0.5577377420406804, 0.5577377420406804, 0.5158652882813921, 0.5158652882813921, 0.5158652882813921, 0.5544474499934158, 0.5544474499934158, 0.5544474499934158, 0.09454665684260566, 0.09454665684260566, 0.09454665684260566, 0.10626819324623937, 0.10626819324623937, 0.10626819324623937, 0.134207585215246, 0.134207585215246, 0.134207585215246, 0.13346121520221566, 0.13346121520221566, 0.13346121520221566, 0.15639375725666682, 0.15639375725666682, 0.15639375725666682, 0.19612286176402483, 0.19612286176402483, 0.19612286176402483, 0.25644907339036316, 0.25644907339036316, 0.25644907339036316, 0.19372800237399646, 0.19372800237399646, 0.19372800237399646, 0.2734221701080839, 0.2734221701080839, 0.2734221701080839, 0.24568181037055603, 0.24568181037055603, 0.24568181037055603, 0.2285582391668387, 0.2285582391668387, 0.2285582391668387, 0.3675709641148601, 0.3675709641148601, 0.3675709641148601, 0.18708014158948694, 0.18708014158948694, 0.18708014158948694, 0.22981963482083378, 0.22981963482083378, 0.22981963482083378, 0.2084374463641634, 0.2084374463641634, 0.2084374463641634, 0.5762455489936211, 0.5762455489936211, 0.5762455489936211, 0.19578630451484047, 0.19578630451484047, 0.19578630451484047, 0.7162727315013051, 0.7162727315013051, 0.7162727315013051, 0.9058928820375981, 0.9058928820375981, 0.9058928820375981, 0.15974778459679362, 0.15974778459679362, 0.15974778459679362, 0.15184696453038016, 0.15184696453038016, 0.15184696453038016, 0.16895052627272833, 0.16895052627272833, 0.16895052627272833, 0.21284770068698722, 0.21284770068698722, 0.21284770068698722, 0.15705392885118674, 0.15705392885118674, 0.15705392885118674, 0.1855219904116706, 0.1855219904116706, 0.1855219904116706, 0.18983531766696593, 0.18983531766696593, 0.18983531766696593, 0.18344619192656075, 0.18344619192656075, 0.18344619192656075, 0.06065479853430389, 0.06065479853430389, 0.06065479853430389, 0.06520739055570635, 0.06520739055570635, 0.06520739055570635, 0.07539521043518072, 0.07539521043518072, 0.07539521043518072]}, "mutation_prompt": null}
{"id": "d99ec412-2f30-40eb-9f1a-822994f23071", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "813b7e07-c792-438d-a319-bbfae3035f1f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "34c96da4-ccf9-4c59-9dc3-80cf01f27ce7", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "2344309e-8c21-49d0-8c46-245b9ca85528", "solution": "import numpy as np\n\nclass AdaptiveHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.initial_w = 0.7  # Initial inertia weight for PSO\n        self.final_w = 0.3  # Final inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 2.0  # Increased social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # Adaptive PSO Update\n            w = self.initial_w - (self.initial_w - self.final_w) * (evaluations / self.budget)\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "AdaptiveHybridPSODE", "description": "An adaptive hybrid PSO-DE algorithm that dynamically adjusts parameters for improved exploration and exploitation.", "configspace": "", "generation": 29, "fitness": 0.2317082072094317, "feedback": "The algorithm AdaptiveHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.24.", "error": "", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.8030679419863544, 0.8030679419863544, 0.8030679419863544, 0.8083129147967177, 0.8083129147967177, 0.8083129147967177, 0.8147182805062763, 0.8147182805062763, 0.8147182805062763, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06256096800998057, 0.06256096800998057, 0.06256096800998057, 0.004526610388389196, 0.004526610388389196, 0.004526610388389196, 0.11270970508651101, 0.11270970508651101, 0.11270970508651101, 0.07247933499447357, 0.07247933499447357, 0.07247933499447357, 0.11876191444825179, 0.11876191444825179, 0.11876191444825179, 0.09874337562177227, 0.09874337562177227, 0.09874337562177227, 0.13540282898275835, 0.13540282898275835, 0.13540282898275835, 0.12312120878955468, 0.12312120878955468, 0.12312120878955468, 0.9909767400684987, 0.9909767400684987, 0.9909767400684987, 0.9909747056116965, 0.9909747056116965, 0.9909747056116965, 0.990375328838922, 0.990375328838922, 0.990375328838922, 0.35954669171277576, 0.35954669171277576, 0.35954669171277576, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.26658178289261947, 0.26658178289261947, 0.26658178289261947, 0.3014007963922518, 0.3014007963922518, 0.3014007963922518, 0.1620302917595372, 0.1620302917595372, 0.1620302917595372, 0.17080664042956872, 0.17080664042956872, 0.17080664042956872, 0.11458435285742019, 0.11458435285742019, 0.11458435285742019, 0.11927586092857112, 0.11927586092857112, 0.11927586092857112, 0.1721111224136388, 0.1721111224136388, 0.1721111224136388, 0.21569542677671005, 0.21569542677671005, 0.21569542677671005, 0.22727925899875878, 0.22727925899875878, 0.22727925899875878, 0.23028361431027045, 0.23028361431027045, 0.23028361431027045, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00028895441689513746, 0.00028895441689513746, 0.00028895441689513746, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.023877560677632803, 0.023877560677632803, 0.023877560677632803, 0.06291365967984386, 0.06291365967984386, 0.06291365967984386, 0.01237125455218735, 0.01237125455218735, 0.01237125455218735, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16188557205300025, 0.16188557205300025, 0.16188557205300025, 0.08533087077635815, 0.08533087077635815, 0.08533087077635815, 0.04205635946591724, 0.04205635946591724, 0.04205635946591724, 0.23687161009370095, 0.23687161009370095, 0.23687161009370095, 0.07966074427172076, 0.07966074427172076, 0.07966074427172076, 0.5282387436422059, 0.5282387436422059, 0.5282387436422059, 0.20884507418893206, 0.20884507418893206, 0.20884507418893206, 0.5142295396812417, 0.5142295396812417, 0.5142295396812417, 0.0694496084177827, 0.0694496084177827, 0.0694496084177827, 0.10401024399827652, 0.10401024399827652, 0.10401024399827652, 0.10745759723153314, 0.10745759723153314, 0.10745759723153314, 0.16851641953401542, 0.16851641953401542, 0.16851641953401542, 0.14382735983553052, 0.14382735983553052, 0.14382735983553052, 0.19266987643140798, 0.19266987643140798, 0.19266987643140798, 0.24508358377771688, 0.24508358377771688, 0.24508358377771688, 0.45559532341882936, 0.45559532341882936, 0.45559532341882936, 0.17535086420280133, 0.17535086420280133, 0.17535086420280133, 0.19994081158777044, 0.19994081158777044, 0.19994081158777044, 0.19014653724252073, 0.19014653724252073, 0.19014653724252073, 0.13261035036685276, 0.13261035036685276, 0.13261035036685276, 0.2258212987737096, 0.2258212987737096, 0.2258212987737096, 0.17911398732567707, 0.17911398732567707, 0.17911398732567707, 0.17164699965518937, 0.17164699965518937, 0.17164699965518937, 0.2023744254513602, 0.2023744254513602, 0.2023744254513602, 0.19426895855924542, 0.19426895855924542, 0.19426895855924542, 0.1792130046374656, 0.1792130046374656, 0.1792130046374656, 0.7637098564595362, 0.7637098564595362, 0.7637098564595362, 0.46503536041721805, 0.46503536041721805, 0.46503536041721805, 0.16824026529913194, 0.16824026529913194, 0.16824026529913194, 0.2090113463651928, 0.2090113463651928, 0.2090113463651928, 0.3699098737742833, 0.3699098737742833, 0.3699098737742833, 0.15577827618941553, 0.15577827618941553, 0.15577827618941553, 0.18167044990664805, 0.18167044990664805, 0.18167044990664805, 0.1871828807760738, 0.1871828807760738, 0.1871828807760738, 0.18882341393940683, 0.18882341393940683, 0.18882341393940683, 0.07091885946842413, 0.07091885946842413, 0.07091885946842413, 0.07989936207842296, 0.07989936207842296, 0.07989936207842296, 0.08231608285572634, 0.08231608285572634, 0.08231608285572634]}, "mutation_prompt": null}
{"id": "5d3cf3ac-7230-4cbf-a1a2-d89ae16a163e", "solution": "import numpy as np\n\nclass BalancedPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w_max = 0.9  # Maximum inertia weight for PSO\n        self.w_min = 0.4  # Minimum inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # Adaptive inertia weight\n            inertia_weight = self.w_max - (self.w_max - self.w_min) * (evaluations / self.budget)\n\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (inertia_weight * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                if i == indices[0]:\n                    x1 = positions[i]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "BalancedPSODE", "description": "BalancedPSODE: An enhanced strategy with adaptive inertia and selection for better balance between exploration and exploitation in PSO and DE.", "configspace": "", "generation": 30, "fitness": 0.2023433178932187, "feedback": "The algorithm BalancedPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.22.", "error": "", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.71980419035654, 0.71980419035654, 0.71980419035654, 0.18000925702550963, 0.18000925702550963, 0.18000925702550963, 0.7171724332010897, 0.7171724332010897, 0.7171724332010897, 0.034540574969787796, 0.034540574969787796, 0.034540574969787796, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0038452379792651703, 0.0038452379792651703, 0.0038452379792651703, 0.11254803961427973, 0.11254803961427973, 0.11254803961427973, 0.06612991956387182, 0.06612991956387182, 0.06612991956387182, 0.13479432299793848, 0.13479432299793848, 0.13479432299793848, 0.0892275966493642, 0.0892275966493642, 0.0892275966493642, 0.0948997761369299, 0.0948997761369299, 0.0948997761369299, 0.08193843264562095, 0.08193843264562095, 0.08193843264562095, 0.9872918957759024, 0.9872918957759024, 0.9872918957759024, 0.9926288886345125, 0.9926288886345125, 0.9926288886345125, 0.9923014972462655, 0.9923014972462655, 0.9923014972462655, 0.30591529646525306, 0.30591529646525306, 0.30591529646525306, 0.1452294970241399, 0.1452294970241399, 0.1452294970241399, 0.08709186790350154, 0.08709186790350154, 0.08709186790350154, 0.17772166076436258, 0.17772166076436258, 0.17772166076436258, 0.19648354407215407, 0.19648354407215407, 0.19648354407215407, 0.12957152750977385, 0.12957152750977385, 0.12957152750977385, 0.17017723444848343, 0.17017723444848343, 0.17017723444848343, 0.10136605423109446, 0.10136605423109446, 0.10136605423109446, 0.11471835449915813, 0.11471835449915813, 0.11471835449915813, 0.1543986440957913, 0.1543986440957913, 0.1543986440957913, 0.18003904881609356, 0.18003904881609356, 0.18003904881609356, 0.19986265084243804, 0.19986265084243804, 0.19986265084243804, 0.0011855421580903025, 0.0011855421580903025, 0.0011855421580903025, 0.00017370425450424776, 0.00017370425450424776, 0.00017370425450424776, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.041376127434336385, 0.041376127434336385, 0.041376127434336385, 0.04454610322677932, 0.04454610322677932, 0.04454610322677932, 0.028954992831767057, 0.028954992831767057, 0.028954992831767057, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07014177087875428, 0.07014177087875428, 0.07014177087875428, 0.05279015105977691, 0.05279015105977691, 0.05279015105977691, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.046001020415431415, 0.046001020415431415, 0.046001020415431415, 0.44142495759911304, 0.44142495759911304, 0.44142495759911304, 0.2077737767456873, 0.2077737767456873, 0.2077737767456873, 0.44235203230689135, 0.44235203230689135, 0.44235203230689135, 0.06494635000301152, 0.06494635000301152, 0.06494635000301152, 0.0918060905789827, 0.0918060905789827, 0.0918060905789827, 0.11216755902999742, 0.11216755902999742, 0.11216755902999742, 0.21686517635556823, 0.21686517635556823, 0.21686517635556823, 0.15004044741169476, 0.15004044741169476, 0.15004044741169476, 0.17582594647290772, 0.17582594647290772, 0.17582594647290772, 0.23772310380373562, 0.23772310380373562, 0.23772310380373562, 0.22883751547431708, 0.22883751547431708, 0.22883751547431708, 0.3152104519801008, 0.3152104519801008, 0.3152104519801008, 0.20285747976613233, 0.20285747976613233, 0.20285747976613233, 0.23721965916044552, 0.23721965916044552, 0.23721965916044552, 0.24268119571758684, 0.24268119571758684, 0.24268119571758684, 0.1798132109448134, 0.1798132109448134, 0.1798132109448134, 0.18884860219200028, 0.18884860219200028, 0.18884860219200028, 0.19918986502852287, 0.19918986502852287, 0.19918986502852287, 0.22402905738231083, 0.22402905738231083, 0.22402905738231083, 0.3830579708600249, 0.3830579708600249, 0.3830579708600249, 0.19572411208732188, 0.19572411208732188, 0.19572411208732188, 0.7506157566698025, 0.7506157566698025, 0.7506157566698025, 0.18516751448481394, 0.18516751448481394, 0.18516751448481394, 0.14586084567420843, 0.14586084567420843, 0.14586084567420843, 0.16174884489423025, 0.16174884489423025, 0.16174884489423025, 0.19608203853602535, 0.19608203853602535, 0.19608203853602535, 0.15378866066583396, 0.15378866066583396, 0.15378866066583396, 0.18024131283307432, 0.18024131283307432, 0.18024131283307432, 0.20369082515311898, 0.20369082515311898, 0.20369082515311898, 0.18618450195190306, 0.18618450195190306, 0.18618450195190306, 0.06846861969540063, 0.06846861969540063, 0.06846861969540063, 0.06887026134935736, 0.06887026134935736, 0.06887026134935736, 0.07422828977425, 0.07422828977425, 0.07422828977425]}, "mutation_prompt": null}
{"id": "6b604263-cfae-4456-ad60-4d5ea32b36be", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "f6694d00-d996-4c97-a9a7-628e53af216d", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "ba6d773b-b566-41f0-8d20-0b647daf652f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "d00a2a76-b356-4803-b500-5ea051d6adf0", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "f20bd2e2-0a1d-4728-b316-1ba80409a964", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "059edd5b-710d-4671-a17c-e4dedb115cb7", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "8368fe31-d037-462c-94a5-c649018a804b", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "f0ff22b6-acc5-4969-9ff9-9c3bd0c8d821", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "6154ce0e-894e-41f3-9176-a0b775e479cb", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "d0106def-126f-4c10-b494-45d4f7b4e11c", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w_max = 0.9  # Adaptive inertia weight max\n        self.w_min = 0.4  # Adaptive inertia weight min\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # Adaptive Inertia Weight\n            w = self.w_max - ((self.w_max - self.w_min) * (evaluations / self.budget))\n\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover with Tournament Selection\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "EnhancedHybridPSODE", "description": "Enhanced Hybrid PSO-DE using adaptive inertia and tournament selection for improved convergence.", "configspace": "", "generation": 40, "fitness": 0.21143674857765943, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.23.", "error": "", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.7187174484138219, 0.7187174484138219, 0.7187174484138219, 0.7011259927254634, 0.7011259927254634, 0.7011259927254634, 0.713440577176309, 0.713440577176309, 0.713440577176309, 0.036898195629005204, 0.036898195629005204, 0.036898195629005204, 0.04933374567705873, 0.04933374567705873, 0.04933374567705873, 0.01347297553767568, 0.01347297553767568, 0.01347297553767568, 0.10384172550038695, 0.10384172550038695, 0.10384172550038695, 0.0904608799695954, 0.0904608799695954, 0.0904608799695954, 0.16413237150000437, 0.16413237150000437, 0.16413237150000437, 0.13208437412514817, 0.13208437412514817, 0.13208437412514817, 0.09931928985616956, 0.09931928985616956, 0.09931928985616956, 0.08740830520539022, 0.08740830520539022, 0.08740830520539022, 0.9872434887469101, 0.9872434887469101, 0.9872434887469101, 0.9906945487849663, 0.9906945487849663, 0.9906945487849663, 0.9871194236157708, 0.9871194236157708, 0.9871194236157708, 0.30716421813457784, 0.30716421813457784, 0.30716421813457784, 0.13373809368725253, 0.13373809368725253, 0.13373809368725253, 0.10424233776910985, 0.10424233776910985, 0.10424233776910985, 0.2698591449531945, 0.2698591449531945, 0.2698591449531945, 0.15978434549808118, 0.15978434549808118, 0.15978434549808118, 0.2615024412834528, 0.2615024412834528, 0.2615024412834528, 0.18435989124557584, 0.18435989124557584, 0.18435989124557584, 0.09590958352122692, 0.09590958352122692, 0.09590958352122692, 0.15254737370114235, 0.15254737370114235, 0.15254737370114235, 0.16539994684376436, 0.16539994684376436, 0.16539994684376436, 0.1562625726111735, 0.1562625726111735, 0.1562625726111735, 0.09464205003066672, 0.09464205003066672, 0.09464205003066672, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019139064879322487, 0.019139064879322487, 0.019139064879322487, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019629534583022412, 0.019629534583022412, 0.019629534583022412, 0.029791290861001518, 0.029791290861001518, 0.029791290861001518, 0.043114058557899626, 0.043114058557899626, 0.043114058557899626, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07302362775861437, 0.07302362775861437, 0.07302362775861437, 0.03588228391866377, 0.03588228391866377, 0.03588228391866377, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12622303615290453, 0.12622303615290453, 0.12622303615290453, 0.48735768068648233, 0.48735768068648233, 0.48735768068648233, 0.47330688466963544, 0.47330688466963544, 0.47330688466963544, 0.45803390992902004, 0.45803390992902004, 0.45803390992902004, 0.06407354235928053, 0.06407354235928053, 0.06407354235928053, 0.0923291039931502, 0.0923291039931502, 0.0923291039931502, 0.11569258001808191, 0.11569258001808191, 0.11569258001808191, 0.16225765474915077, 0.16225765474915077, 0.16225765474915077, 0.1455124460428875, 0.1455124460428875, 0.1455124460428875, 0.13306485016339886, 0.13306485016339886, 0.13306485016339886, 0.22293239120224706, 0.22293239120224706, 0.22293239120224706, 0.3388774310337531, 0.3388774310337531, 0.3388774310337531, 0.30610975694124476, 0.30610975694124476, 0.30610975694124476, 0.17414838813650424, 0.17414838813650424, 0.17414838813650424, 0.17374807708786955, 0.17374807708786955, 0.17374807708786955, 0.18766202897032414, 0.18766202897032414, 0.18766202897032414, 0.1625864238097121, 0.1625864238097121, 0.1625864238097121, 0.17807628338282844, 0.17807628338282844, 0.17807628338282844, 0.17014310867836102, 0.17014310867836102, 0.17014310867836102, 0.171641007088155, 0.171641007088155, 0.171641007088155, 0.17593477387314338, 0.17593477387314338, 0.17593477387314338, 0.19322012003513456, 0.19322012003513456, 0.19322012003513456, 0.6831491297377954, 0.6831491297377954, 0.6831491297377954, 0.20430992515829194, 0.20430992515829194, 0.20430992515829194, 0.16064641423159776, 0.16064641423159776, 0.16064641423159776, 0.16213732303426676, 0.16213732303426676, 0.16213732303426676, 0.20030528536321413, 0.20030528536321413, 0.20030528536321413, 0.15558086497850765, 0.15558086497850765, 0.15558086497850765, 0.18360771344499094, 0.18360771344499094, 0.18360771344499094, 0.18014680158621554, 0.18014680158621554, 0.18014680158621554, 0.20649213785389564, 0.20649213785389564, 0.20649213785389564, 0.06391208481654342, 0.06391208481654342, 0.06391208481654342, 0.06501961422467484, 0.06501961422467484, 0.06501961422467484, 0.06342192185679996, 0.06342192185679996, 0.06342192185679996]}, "mutation_prompt": null}
{"id": "c534ef48-dcef-41d4-9865-8fa46b8a0354", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "9bbf3562-3591-4095-82a7-729c5780d27a", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "e90b90c0-aa10-4594-a0d2-a31a54768063", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "bc36a30e-703b-48fa-b218-373f8566dad8", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "8b29a62b-e03a-4655-a2dd-7ddd627eaf3d", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "0669076a-2420-4020-ab59-65e9ffe6fd82", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "31999d81-1e94-4bca-a6f3-4803684fc3d9", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.base_CR = 0.8  # Base crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover with dynamic CR\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                # Dynamic crossover probability\n                CR = self.base_CR + 0.1 * (evaluations / self.budget)\n                crossover_mask = np.random.rand(self.dim) < CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "EnhancedHybridPSODE", "description": "An enhanced hybrid optimization algorithm that dynamically adjusts crossover probability and combines covariance matrix adaptation for improved exploration-exploitation balance.", "configspace": "", "generation": 47, "fitness": 0.27373626674558754, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.27.", "error": "", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.916710835595576, 0.916710835595576, 0.916710835595576, 0.18345439568499655, 0.18345439568499655, 0.18345439568499655, 0.9154508586442511, 0.9154508586442511, 0.9154508586442511, 0.6832673253990116, 0.6832673253990116, 0.6832673253990116, 0.8079606712072442, 0.8079606712072442, 0.8079606712072442, 0.01843642208836549, 0.01843642208836549, 0.01843642208836549, 0.11904319467368074, 0.11904319467368074, 0.11904319467368074, 0.16607255105997176, 0.16607255105997176, 0.16607255105997176, 0.12247894015430538, 0.12247894015430538, 0.12247894015430538, 0.09655129167163357, 0.09655129167163357, 0.09655129167163357, 0.1104566452293273, 0.1104566452293273, 0.1104566452293273, 0.12408099274871598, 0.12408099274871598, 0.12408099274871598, 0.986290586666186, 0.986290586666186, 0.986290586666186, 0.9909566233045639, 0.9909566233045639, 0.9909566233045639, 0.990819693114331, 0.990819693114331, 0.990819693114331, 0.7205295815552182, 0.7205295815552182, 0.7205295815552182, 0.6825330634457605, 0.6825330634457605, 0.6825330634457605, 0.6113134103982495, 0.6113134103982495, 0.6113134103982495, 0.21443270268832337, 0.21443270268832337, 0.21443270268832337, 0.16131891755095074, 0.16131891755095074, 0.16131891755095074, 0.22664591372217258, 0.22664591372217258, 0.22664591372217258, 0.27210416964710415, 0.27210416964710415, 0.27210416964710415, 0.10190718629254114, 0.10190718629254114, 0.10190718629254114, 0.12691006157068696, 0.12691006157068696, 0.12691006157068696, 0.24223067777892415, 0.24223067777892415, 0.24223067777892415, 0.21248456454372155, 0.21248456454372155, 0.21248456454372155, 0.15860924282819067, 0.15860924282819067, 0.15860924282819067, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0618038399199049, 0.0618038399199049, 0.0618038399199049, 0.022647433621187707, 0.022647433621187707, 0.022647433621187707, 0.1047996652471147, 0.1047996652471147, 0.1047996652471147, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09913397479974262, 0.09913397479974262, 0.09913397479974262, 0.07611956602727765, 0.07611956602727765, 0.07611956602727765, 0.04891233117642535, 0.04891233117642535, 0.04891233117642535, 0.17313821878810054, 0.17313821878810054, 0.17313821878810054, 0.11728353876686104, 0.11728353876686104, 0.11728353876686104, 0.6295328687645295, 0.6295328687645295, 0.6295328687645295, 0.20926203624164064, 0.20926203624164064, 0.20926203624164064, 0.6048704006284036, 0.6048704006284036, 0.6048704006284036, 0.09290056051989837, 0.09290056051989837, 0.09290056051989837, 0.13494479329076037, 0.13494479329076037, 0.13494479329076037, 0.12322428175565547, 0.12322428175565547, 0.12322428175565547, 0.13618196626921963, 0.13618196626921963, 0.13618196626921963, 0.20141673619554024, 0.20141673619554024, 0.20141673619554024, 0.23358959360083598, 0.23358959360083598, 0.23358959360083598, 0.3280718502363712, 0.3280718502363712, 0.3280718502363712, 0.22715154912228408, 0.22715154912228408, 0.22715154912228408, 0.44388206909112626, 0.44388206909112626, 0.44388206909112626, 0.2031406486274827, 0.2031406486274827, 0.2031406486274827, 0.24663139436208226, 0.24663139436208226, 0.24663139436208226, 0.3288067840846769, 0.3288067840846769, 0.3288067840846769, 0.2402913546760036, 0.2402913546760036, 0.2402913546760036, 0.20936771839185786, 0.20936771839185786, 0.20936771839185786, 0.19848734767570753, 0.19848734767570753, 0.19848734767570753, 0.20989609848372004, 0.20989609848372004, 0.20989609848372004, 0.21084274995031582, 0.21084274995031582, 0.21084274995031582, 0.20846898527596303, 0.20846898527596303, 0.20846898527596303, 0.9244609446785409, 0.9244609446785409, 0.9244609446785409, 0.15959804371194264, 0.15959804371194264, 0.15959804371194264, 0.16152815332447412, 0.16152815332447412, 0.16152815332447412, 0.21104160290683427, 0.21104160290683427, 0.21104160290683427, 0.21338725009417892, 0.21338725009417892, 0.21338725009417892, 0.1556291233274103, 0.1556291233274103, 0.1556291233274103, 0.1905124991355075, 0.1905124991355075, 0.1905124991355075, 0.18470126143306365, 0.18470126143306365, 0.18470126143306365, 0.1764097864882751, 0.1764097864882751, 0.1764097864882751, 0.08130450918975052, 0.08130450918975052, 0.08130450918975052, 0.08439676843839339, 0.08439676843839339, 0.08439676843839339, 0.07779038809923844, 0.07779038809923844, 0.07779038809923844]}, "mutation_prompt": null}
{"id": "6ac131ba-0f23-4a5f-8483-a55288f9c110", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "f3667070-aa0e-4846-9f7a-6b930f538549", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "061f403e-2870-4f73-9238-c9b12ea865ae", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "5f130c65-df95-4668-a2b6-db63dfbc0374", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "52d7701b-749d-496e-91ec-a41e3be048de", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "aee17620-30c0-41d8-a3f4-34a85805a8a6", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "e876496b-3860-4cd0-bcdd-e603c3a14e49", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "7981c2d6-83fa-4f0a-a9bc-8ac4d883e9d6", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "a3cfbe57-2cf9-4109-ad9e-8b7a1a347988", "solution": "import numpy as np\n\nclass AdaptiveHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        adapt_cr = 0.1  # Adaptive crossover rate increment\n        adapt_f = 0.001  # Adaptive scaling factor increment\n\n        while evaluations < self.budget:\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                while i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < (self.CR + adapt_cr)\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n                    adapt_cr = min(self.CR, adapt_cr + 0.05)  # Increase adaptation rate\n                    self.F = min(1.0, self.F + adapt_f)  # Adjust scaling factor\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "AdaptiveHybridPSODE", "description": "An adaptive hybrid PSO-DE algorithm with dynamic parameter tuning and mutation strategies to improve convergence efficiency.", "configspace": "", "generation": 56, "fitness": 0.2917011695937682, "feedback": "The algorithm AdaptiveHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.28.", "error": "", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.9080859452354776, 0.9080859452354776, 0.9080859452354776, 0.8860627960863245, 0.8860627960863245, 0.8860627960863245, 0.9249484066273526, 0.9249484066273526, 0.9249484066273526, 0.821398590884645, 0.821398590884645, 0.821398590884645, 0.823031041001943, 0.823031041001943, 0.823031041001943, 0.049957570435789966, 0.049957570435789966, 0.049957570435789966, 0.11476593704428883, 0.11476593704428883, 0.11476593704428883, 0.07482518203004618, 0.07482518203004618, 0.07482518203004618, 0.14584651004587834, 0.14584651004587834, 0.14584651004587834, 0.09748821397494101, 0.09748821397494101, 0.09748821397494101, 0.09608856747147732, 0.09608856747147732, 0.09608856747147732, 0.10625791178326216, 0.10625791178326216, 0.10625791178326216, 0.9838788375224731, 0.9838788375224731, 0.9838788375224731, 0.9906416286715335, 0.9906416286715335, 0.9906416286715335, 0.9867359236546765, 0.9867359236546765, 0.9867359236546765, 0.11603610788562035, 0.11603610788562035, 0.11603610788562035, 0.6818891458019702, 0.6818891458019702, 0.6818891458019702, 0.662681399412855, 0.662681399412855, 0.662681399412855, 0.8221480773527998, 0.8221480773527998, 0.8221480773527998, 0.19413208852968056, 0.19413208852968056, 0.19413208852968056, 0.2292564459070663, 0.2292564459070663, 0.2292564459070663, 0.26982207193274976, 0.26982207193274976, 0.26982207193274976, 0.12729725332294362, 0.12729725332294362, 0.12729725332294362, 0.32837626211173876, 0.32837626211173876, 0.32837626211173876, 0.2516576681124256, 0.2516576681124256, 0.2516576681124256, 0.28306824508565287, 0.28306824508565287, 0.28306824508565287, 0.2746326395551789, 0.2746326395551789, 0.2746326395551789, 0.05095415749330201, 0.05095415749330201, 0.05095415749330201, 0.0005486695820842158, 0.0005486695820842158, 0.0005486695820842158, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07929369279050791, 0.07929369279050791, 0.07929369279050791, 0.02134262587030189, 0.02134262587030189, 0.02134262587030189, 0.0697650037693851, 0.0697650037693851, 0.0697650037693851, 0.07003255935447072, 0.07003255935447072, 0.07003255935447072, 0.09949479311120557, 0.09949479311120557, 0.09949479311120557, 0.16360011448188194, 0.16360011448188194, 0.16360011448188194, 0.07723008567050405, 0.07723008567050405, 0.07723008567050405, 0.10464381800296363, 0.10464381800296363, 0.10464381800296363, 0.11601303442025857, 0.11601303442025857, 0.11601303442025857, 0.5749337760505802, 0.5749337760505802, 0.5749337760505802, 0.5630855567563343, 0.5630855567563343, 0.5630855567563343, 0.6383342108074723, 0.6383342108074723, 0.6383342108074723, 0.10883801804956916, 0.10883801804956916, 0.10883801804956916, 0.07927487988415216, 0.07927487988415216, 0.07927487988415216, 0.12967129091561036, 0.12967129091561036, 0.12967129091561036, 0.1783154108429027, 0.1783154108429027, 0.1783154108429027, 0.1799343857415563, 0.1799343857415563, 0.1799343857415563, 0.20057625855658545, 0.20057625855658545, 0.20057625855658545, 0.303690159589564, 0.303690159589564, 0.303690159589564, 0.33350912065272365, 0.33350912065272365, 0.33350912065272365, 0.1685786824889488, 0.1685786824889488, 0.1685786824889488, 0.2186160309967391, 0.2186160309967391, 0.2186160309967391, 0.2213137181955782, 0.2213137181955782, 0.2213137181955782, 0.18781289667608048, 0.18781289667608048, 0.18781289667608048, 0.17973352663888686, 0.17973352663888686, 0.17973352663888686, 0.2163544768883009, 0.2163544768883009, 0.2163544768883009, 0.18119250011622, 0.18119250011622, 0.18119250011622, 0.19839783575175918, 0.19839783575175918, 0.19839783575175918, 0.2135046765109917, 0.2135046765109917, 0.2135046765109917, 0.22484250710395293, 0.22484250710395293, 0.22484250710395293, 0.9393053702168914, 0.9393053702168914, 0.9393053702168914, 0.15988105645509698, 0.15988105645509698, 0.15988105645509698, 0.15897415212073485, 0.15897415212073485, 0.15897415212073485, 0.1627240720889238, 0.1627240720889238, 0.1627240720889238, 0.2115015008496718, 0.2115015008496718, 0.2115015008496718, 0.15706074288621985, 0.15706074288621985, 0.15706074288621985, 0.18563903499846246, 0.18563903499846246, 0.18563903499846246, 0.1800322697890604, 0.1800322697890604, 0.1800322697890604, 0.1900783653318494, 0.1900783653318494, 0.1900783653318494, 0.0703428296985088, 0.0703428296985088, 0.0703428296985088, 0.09375688158508477, 0.09375688158508477, 0.09375688158508477, 0.0886489934886382, 0.0886489934886382, 0.0886489934886382]}, "mutation_prompt": null}
{"id": "1f1c10a2-c23b-40e5-912d-d23d9f93c81f", "solution": "import numpy as np\n\nclass ELSPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w_init = 0.9  # Initial inertia weight\n        self.w_min = 0.4  # Minimum inertia weight\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # Adaptive inertia weight\n            w = self.w_min + (self.w_init - self.w_min) * (1 - evaluations / self.budget)\n\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            # Local Search Phase\n            if evaluations < self.budget:\n                for i in range(self.population_size):\n                    local_mutation = np.random.uniform(-0.1, 0.1, self.dim)\n                    local_vector = np.clip(personal_best_positions[i] + local_mutation, self.lower_bound, self.upper_bound)\n                    local_score = func(local_vector)\n                    evaluations += 1\n                    if local_score < personal_best_scores[i]:\n                        personal_best_scores[i] = local_score\n                        personal_best_positions[i] = local_vector\n                        if local_score < global_best_score:\n                            global_best_score = local_score\n                            global_best_position = local_vector\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "ELSPSODE", "description": "Enhanced Local Search PSODE (ELS-PSODE) introduces adaptive inertia weight and local search phase to balance exploration and exploitation more effectively.", "configspace": "", "generation": 57, "fitness": 0.23805515310496847, "feedback": "The algorithm ELSPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.22.", "error": "", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.6286390486653259, 0.6286390486653259, 0.6286390486653259, 0.6780768711222693, 0.6780768711222693, 0.6780768711222693, 0.628978773256758, 0.628978773256758, 0.628978773256758, 0.38895345264379444, 0.38895345264379444, 0.38895345264379444, 0.40633562967537296, 0.40633562967537296, 0.40633562967537296, 0.38311058694727484, 0.38311058694727484, 0.38311058694727484, 0.10480747494426756, 0.10480747494426756, 0.10480747494426756, 0.10775160245749615, 0.10775160245749615, 0.10775160245749615, 0.126142189324434, 0.126142189324434, 0.126142189324434, 0.09921677195461454, 0.09921677195461454, 0.09921677195461454, 0.09807456250241797, 0.09807456250241797, 0.09807456250241797, 0.0770669131767252, 0.0770669131767252, 0.0770669131767252, 0.9875003973443516, 0.9875003973443516, 0.9875003973443516, 0.987077440755452, 0.987077440755452, 0.987077440755452, 0.9864943407272665, 0.9864943407272665, 0.9864943407272665, 0.27658865652239406, 0.27658865652239406, 0.27658865652239406, 0.24028743642822914, 0.24028743642822914, 0.24028743642822914, 0.24557041107605515, 0.24557041107605515, 0.24557041107605515, 0.3728402307954872, 0.3728402307954872, 0.3728402307954872, 0.17273436892885397, 0.17273436892885397, 0.17273436892885397, 0.15689066225977255, 0.15689066225977255, 0.15689066225977255, 0.16702836243587393, 0.16702836243587393, 0.16702836243587393, 0.11864193110085786, 0.11864193110085786, 0.11864193110085786, 0.18319432086927578, 0.18319432086927578, 0.18319432086927578, 0.16311410654835434, 0.16311410654835434, 0.16311410654835434, 0.17181321254981108, 0.17181321254981108, 0.17181321254981108, 0.1300713223609904, 0.1300713223609904, 0.1300713223609904, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.009985547135036521, 0.009985547135036521, 0.009985547135036521, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08437650997307433, 0.08437650997307433, 0.08437650997307433, 0.06727199373694259, 0.06727199373694259, 0.06727199373694259, 0.06890804379753623, 0.06890804379753623, 0.06890804379753623, 0.0190886355490405, 0.0190886355490405, 0.0190886355490405, 0.04572556442225906, 0.04572556442225906, 0.04572556442225906, 0.10978381983572272, 0.10978381983572272, 0.10978381983572272, 0.0636853692925965, 0.0636853692925965, 0.0636853692925965, 0.19125114339490867, 0.19125114339490867, 0.19125114339490867, 0.07413713157785062, 0.07413713157785062, 0.07413713157785062, 0.42745511792852475, 0.42745511792852475, 0.42745511792852475, 0.43258656927993844, 0.43258656927993844, 0.43258656927993844, 0.4322728289022185, 0.4322728289022185, 0.4322728289022185, 0.12793279863293117, 0.12793279863293117, 0.12793279863293117, 0.09616346558000333, 0.09616346558000333, 0.09616346558000333, 0.12095613237324432, 0.12095613237324432, 0.12095613237324432, 0.1658717844085137, 0.1658717844085137, 0.1658717844085137, 0.2055196045405735, 0.2055196045405735, 0.2055196045405735, 0.22027379065643649, 0.22027379065643649, 0.22027379065643649, 0.31690784636655, 0.31690784636655, 0.31690784636655, 0.23595567415339314, 0.23595567415339314, 0.23595567415339314, 0.3236058312139576, 0.3236058312139576, 0.3236058312139576, 0.1818973171683026, 0.1818973171683026, 0.1818973171683026, 0.17059816274785566, 0.17059816274785566, 0.17059816274785566, 0.15655952613793012, 0.15655952613793012, 0.15655952613793012, 0.2020101239123051, 0.2020101239123051, 0.2020101239123051, 0.1866119786824535, 0.1866119786824535, 0.1866119786824535, 0.2070641854448192, 0.2070641854448192, 0.2070641854448192, 0.19475385699898518, 0.19475385699898518, 0.19475385699898518, 0.22040195335078472, 0.22040195335078472, 0.22040195335078472, 0.20903882856148015, 0.20903882856148015, 0.20903882856148015, 0.7828787732673211, 0.7828787732673211, 0.7828787732673211, 0.20344514598567365, 0.20344514598567365, 0.20344514598567365, 0.163152459338337, 0.163152459338337, 0.163152459338337, 0.16971460943577643, 0.16971460943577643, 0.16971460943577643, 0.19529237008410594, 0.19529237008410594, 0.19529237008410594, 0.18877285225494733, 0.18877285225494733, 0.18877285225494733, 0.1772681458749421, 0.1772681458749421, 0.1772681458749421, 0.18112866846612208, 0.18112866846612208, 0.18112866846612208, 0.20175223101167117, 0.20175223101167117, 0.20175223101167117, 0.06581661540198835, 0.06581661540198835, 0.06581661540198835, 0.07392650387475075, 0.07392650387475075, 0.07392650387475075, 0.08097043543215077, 0.08097043543215077, 0.08097043543215077]}, "mutation_prompt": null}
{"id": "1f2c131a-131a-4b0e-94b0-dfdf755418be", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "bdd5d499-eadf-4cef-a166-f22d9a4eef0c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "de86dcb3-61d4-42e8-9dc7-2d8913c956ab", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "df16d84e-d72e-4954-bdaf-ca8787301071", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "3ac28e4e-7ffb-459e-aecb-141038e64eea", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.initial_w = 0.9  # Start inertia weight for PSO\n        self.final_w = 0.4  # End inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # Adaptive inertia weight\n            w = self.initial_w - (self.initial_w - self.final_w) * (evaluations / self.budget)\n\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # Introduce dynamic population size adjustment\n            if evaluations % (self.budget // 10) == 0:\n                self.population_size = max(5, self.population_size - 1)  # Reduce size gradually but not below 5\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A refined hybrid PSO-DE with adaptive inertia weight and dynamic population size for enhanced convergence in varied landscapes.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('operands could not be broadcast together with shapes (19,5) (20,5) ').", "error": "ValueError('operands could not be broadcast together with shapes (19,5) (20,5) ')", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {}, "mutation_prompt": null}
{"id": "027a31ca-4adc-4364-a663-1d501328f3fe", "solution": "import numpy as np\n\nclass AdaptivePSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n        self.learning_rate = 0.05  # Learning rate for adaptive parameters\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # Adaptive PSO parameters\n            self.w = 0.9 - 0.5 * (evaluations / self.budget)\n            self.c1 = 1.5 + 0.5 * (evaluations / self.budget)\n            self.c2 = 1.5 - 0.5 * (evaluations / self.budget)\n            \n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n            # Chaotic local search\n            for i in range(self.population_size):\n                chaotic_factor = 4.0 * scores[i] * (1.0 - scores[i])  # Logistic map\n                local_search = positions[i] + self.learning_rate * chaotic_factor * (global_best_position - positions[i])\n                local_search = np.clip(local_search, self.lower_bound, self.upper_bound)\n\n                local_score = func(local_search)\n                evaluations += 1\n\n                if local_score < scores[i]:\n                    positions[i] = local_search\n                    scores[i] = local_score\n\n                    if local_score < personal_best_scores[i]:\n                        personal_best_scores[i] = local_score\n                        personal_best_positions[i] = local_search\n                    if local_score < global_best_score:\n                        global_best_score = local_score\n                        global_best_position = local_search\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "AdaptivePSODE", "description": "An enhanced PSO-DE hybrid incorporating adaptive parameters and a chaotic local search to improve convergence and exploration.", "configspace": "", "generation": 63, "fitness": 0.19734784375508016, "feedback": "The algorithm AdaptivePSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.21.", "error": "", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.629434020014725, 0.629434020014725, 0.629434020014725, 0.18977048884209546, 0.18977048884209546, 0.18977048884209546, 0.6665332015775003, 0.6665332015775003, 0.6665332015775003, 0.41951012656199504, 0.41951012656199504, 0.41951012656199504, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003872657143162761, 0.003872657143162761, 0.003872657143162761, 0.10214476169964182, 0.10214476169964182, 0.10214476169964182, 0.1066339561554922, 0.1066339561554922, 0.1066339561554922, 0.08388069035718249, 0.08388069035718249, 0.08388069035718249, 0.10527120223390507, 0.10527120223390507, 0.10527120223390507, 0.09609484715143013, 0.09609484715143013, 0.09609484715143013, 0.10812989179096599, 0.10812989179096599, 0.10812989179096599, 0.9819647076131751, 0.9819647076131751, 0.9819647076131751, 0.9871695649180038, 0.9871695649180038, 0.9871695649180038, 0.9862868155924127, 0.9862868155924127, 0.9862868155924127, 0.14171210743897844, 0.14171210743897844, 0.14171210743897844, 0.23789402851944774, 0.23789402851944774, 0.23789402851944774, 0.18293031277387128, 0.18293031277387128, 0.18293031277387128, 0.23235017687426185, 0.23235017687426185, 0.23235017687426185, 0.1563480068427796, 0.1563480068427796, 0.1563480068427796, 0.23897611875347002, 0.23897611875347002, 0.23897611875347002, 0.1527997015180459, 0.1527997015180459, 0.1527997015180459, 0.09557199576990627, 0.09557199576990627, 0.09557199576990627, 0.1557054239126635, 0.1557054239126635, 0.1557054239126635, 0.10467995826663101, 0.10467995826663101, 0.10467995826663101, 0.14622032118650408, 0.14622032118650408, 0.14622032118650408, 0.14194186759983551, 0.14194186759983551, 0.14194186759983551, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.019398132009960656, 0.019398132009960656, 0.019398132009960656, 0.05850378090209085, 0.05850378090209085, 0.05850378090209085, 0.034908819132027924, 0.034908819132027924, 0.034908819132027924, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04688099120968947, 0.04688099120968947, 0.04688099120968947, 0.041862716653309096, 0.041862716653309096, 0.041862716653309096, 0.033563043782636304, 0.033563043782636304, 0.033563043782636304, 0.027435426946915142, 0.027435426946915142, 0.027435426946915142, 0.04385202847947345, 0.04385202847947345, 0.04385202847947345, 0.3923814478293851, 0.3923814478293851, 0.3923814478293851, 0.20676461171370797, 0.20676461171370797, 0.20676461171370797, 0.4330964056604819, 0.4330964056604819, 0.4330964056604819, 0.07220632859874077, 0.07220632859874077, 0.07220632859874077, 0.08938607259485265, 0.08938607259485265, 0.08938607259485265, 0.07524066316742828, 0.07524066316742828, 0.07524066316742828, 0.14526553213831372, 0.14526553213831372, 0.14526553213831372, 0.19063285470263047, 0.19063285470263047, 0.19063285470263047, 0.13985302259220733, 0.13985302259220733, 0.13985302259220733, 0.26235383886513797, 0.26235383886513797, 0.26235383886513797, 0.2656169208478302, 0.2656169208478302, 0.2656169208478302, 0.32277152567219813, 0.32277152567219813, 0.32277152567219813, 0.1959564840950011, 0.1959564840950011, 0.1959564840950011, 0.16972432386368363, 0.16972432386368363, 0.16972432386368363, 0.17753442318870838, 0.17753442318870838, 0.17753442318870838, 0.1808261234919034, 0.1808261234919034, 0.1808261234919034, 0.19198756457122423, 0.19198756457122423, 0.19198756457122423, 0.1899952826078667, 0.1899952826078667, 0.1899952826078667, 0.18347477457249017, 0.18347477457249017, 0.18347477457249017, 0.19291608076087163, 0.19291608076087163, 0.19291608076087163, 0.18184758847305327, 0.18184758847305327, 0.18184758847305327, 0.5729201085458173, 0.5729201085458173, 0.5729201085458173, 0.15199941298747832, 0.15199941298747832, 0.15199941298747832, 0.15169899234213513, 0.15169899234213513, 0.15169899234213513, 0.16059009782185507, 0.16059009782185507, 0.16059009782185507, 0.2767347005979631, 0.2767347005979631, 0.2767347005979631, 0.15485592445576168, 0.15485592445576168, 0.15485592445576168, 0.17805292756113011, 0.17805292756113011, 0.17805292756113011, 0.16737485733921553, 0.16737485733921553, 0.16737485733921553, 0.17069598564345667, 0.17069598564345667, 0.17069598564345667, 0.06011932594403535, 0.06011932594403535, 0.06011932594403535, 0.06745530604343153, 0.06745530604343153, 0.06745530604343153, 0.07598335085159014, 0.07598335085159014, 0.07598335085159014]}, "mutation_prompt": null}
{"id": "872cddb5-0436-4169-9a66-4808769b3357", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "c3a24536-bfb4-4aae-a871-3749cf5075a3", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "5445b447-0d90-4252-9b02-69d8abb90de2", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "d2858a70-07ce-4777-8454-14fce7e87f90", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "73aaea2e-6eb0-4a7f-8168-ca5e24d0b021", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "efb5ee64-5040-4b8b-9a0d-ad6746e49a57", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "7cb4026f-ee5d-4dba-8b4c-582d962d5899", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "05a5e6ce-66ef-4ef7-a6cb-3cdae602353a", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "c3d89d4d-6da6-49e0-81b1-99271f76906e", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "3a9f0d0d-26a4-4ab3-8d8f-39fe452a6a15", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "2b955317-d55a-476a-a604-7456b8a8316d", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "d1901f02-734b-4b33-8dd3-d08bfd41de1e", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "499b13ee-d9e2-4c9b-86b1-ecc53bbabfb2", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "86f955de-f635-406f-9e0c-464e079a552e", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "32e33082-e947-4354-8007-a00f2ad39e70", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "3cb1625c-e0dc-4edc-ad4f-313701724709", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "85c1b48a-e76c-47a8-93b8-7381ad7a3435", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w_max = 0.9  # Maximum inertia weight for PSO\n        self.w_min = 0.4  # Minimum inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n\n        while evaluations < self.budget:\n            # Adaptive inertia weight\n            w = self.w_max - (self.w_max - self.w_min) * (evaluations / self.budget)\n\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n            # Stochastic reseeding if stagnation occurs\n            if evaluations < self.budget and np.std(personal_best_scores) < 1e-5:\n                reseed_indices = np.random.choice(self.population_size, 5, replace=False)\n                for idx in reseed_indices:\n                    positions[idx] = np.random.uniform(self.lower_bound, self.upper_bound, self.dim)\n                    personal_best_positions[idx] = np.copy(positions[idx])\n                    personal_best_scores[idx] = func(positions[idx])\n                    evaluations += 1\n                    if personal_best_scores[idx] < global_best_score:\n                        global_best_score = personal_best_scores[idx]\n                        global_best_position = personal_best_positions[idx]\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A novel balance of exploration and exploitation using adaptive inertia in PSO and stochastic reseeding for improved robustness in HybridPSODE.", "configspace": "", "generation": 80, "fitness": 0.215680262698727, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.22 with standard deviation 0.23.", "error": "", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.7182428079258221, 0.7182428079258221, 0.7182428079258221, 0.6793033442714721, 0.6793033442714721, 0.6793033442714721, 0.7179550849559013, 0.7179550849559013, 0.7179550849559013, 0.033305935897576244, 0.033305935897576244, 0.033305935897576244, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003902157980518517, 0.003902157980518517, 0.003902157980518517, 0.09721555138746585, 0.09721555138746585, 0.09721555138746585, 0.06765882061213979, 0.06765882061213979, 0.06765882061213979, 0.10563944060694086, 0.10563944060694086, 0.10563944060694086, 0.12170472201398985, 0.12170472201398985, 0.12170472201398985, 0.10530430426074233, 0.10530430426074233, 0.10530430426074233, 0.10747814213442508, 0.10747814213442508, 0.10747814213442508, 0.9872025054153013, 0.9872025054153013, 0.9872025054153013, 0.9907029974237184, 0.9907029974237184, 0.9907029974237184, 0.9898902669020287, 0.9898902669020287, 0.9898902669020287, 0.24079554998699104, 0.24079554998699104, 0.24079554998699104, 0.24931012491091908, 0.24931012491091908, 0.24931012491091908, 0.26937820920908484, 0.26937820920908484, 0.26937820920908484, 0.18573263705229026, 0.18573263705229026, 0.18573263705229026, 0.1854598313031801, 0.1854598313031801, 0.1854598313031801, 0.19100826964667772, 0.19100826964667772, 0.19100826964667772, 0.1772248722237746, 0.1772248722237746, 0.1772248722237746, 0.0858822996633215, 0.0858822996633215, 0.0858822996633215, 0.16300161222584286, 0.16300161222584286, 0.16300161222584286, 0.18053152093232006, 0.18053152093232006, 0.18053152093232006, 0.16755264439047313, 0.16755264439047313, 0.16755264439047313, 0.16997402306909226, 0.16997402306909226, 0.16997402306909226, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034008879772385314, 0.034008879772385314, 0.034008879772385314, 0.057995028406268134, 0.057995028406268134, 0.057995028406268134, 0.02284082670550558, 0.02284082670550558, 0.02284082670550558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07205702757413435, 0.07205702757413435, 0.07205702757413435, 0.03578265999263508, 0.03578265999263508, 0.03578265999263508, 0.04646172704637086, 0.04646172704637086, 0.04646172704637086, 0.08581719197737003, 0.08581719197737003, 0.08581719197737003, 0.45817943152589746, 0.45817943152589746, 0.45817943152589746, 0.3505465867520412, 0.3505465867520412, 0.3505465867520412, 0.4811558008513779, 0.4811558008513779, 0.4811558008513779, 0.08928108375573118, 0.08928108375573118, 0.08928108375573118, 0.08658420898178087, 0.08658420898178087, 0.08658420898178087, 0.08319552126517371, 0.08319552126517371, 0.08319552126517371, 0.1532908304529832, 0.1532908304529832, 0.1532908304529832, 0.21320087525554954, 0.21320087525554954, 0.21320087525554954, 0.1810547766280598, 0.1810547766280598, 0.1810547766280598, 0.25159212762862393, 0.25159212762862393, 0.25159212762862393, 0.33783489430885594, 0.33783489430885594, 0.33783489430885594, 0.3983355326933895, 0.3983355326933895, 0.3983355326933895, 0.21306936312401248, 0.21306936312401248, 0.21306936312401248, 0.1835632449149679, 0.1835632449149679, 0.1835632449149679, 0.16788584637566617, 0.16788584637566617, 0.16788584637566617, 0.19711743431597784, 0.19711743431597784, 0.19711743431597784, 0.1811693815285781, 0.1811693815285781, 0.1811693815285781, 0.17522023614014137, 0.17522023614014137, 0.17522023614014137, 0.17037459889849815, 0.17037459889849815, 0.17037459889849815, 0.19270082599046223, 0.19270082599046223, 0.19270082599046223, 0.19758428259582028, 0.19758428259582028, 0.19758428259582028, 0.6574404044974105, 0.6574404044974105, 0.6574404044974105, 0.18137660200053207, 0.18137660200053207, 0.18137660200053207, 0.1651952000154946, 0.1651952000154946, 0.1651952000154946, 0.16305680458429161, 0.16305680458429161, 0.16305680458429161, 0.32121777528853823, 0.32121777528853823, 0.32121777528853823, 0.1563215588758079, 0.1563215588758079, 0.1563215588758079, 0.18531450354905687, 0.18531450354905687, 0.18531450354905687, 0.19036832714711094, 0.19036832714711094, 0.19036832714711094, 0.1905801849159684, 0.1905801849159684, 0.1905801849159684, 0.06823932980890002, 0.06823932980890002, 0.06823932980890002, 0.07599270409718573, 0.07599270409718573, 0.07599270409718573, 0.06401761766778125, 0.06401761766778125, 0.06401761766778125]}, "mutation_prompt": null}
{"id": "a76180e5-a5d6-4a55-a24a-6e85b002bb2a", "solution": "import numpy as np\n\nclass HybridPSOADE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Initial scaling factor for ADE\n        self.CR = 0.9  # Initial crossover probability for ADE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # Adaptive DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                self.F = 0.5 + np.random.rand() * 0.5  # Adaptive scaling factor\n                self.CR = 0.8 + np.random.rand() * 0.2  # Adaptive crossover probability\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSOADE", "description": "A hybrid Particle Swarm Optimization (PSO) with Adaptive Differential Evolution (ADE) for dynamic parameter adjustment to improve convergence speed and accuracy.", "configspace": "", "generation": 81, "fitness": 0.2905946004520801, "feedback": "The algorithm HybridPSOADE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.27.", "error": "", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.9254412020772707, 0.9254412020772707, 0.9254412020772707, 0.9150363323711708, 0.9150363323711708, 0.9150363323711708, 0.1758605411244738, 0.1758605411244738, 0.1758605411244738, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.7564132826226844, 0.7564132826226844, 0.7564132826226844, 0.8302369417770932, 0.8302369417770932, 0.8302369417770932, 0.11208170459488231, 0.11208170459488231, 0.11208170459488231, 0.10418451295152276, 0.10418451295152276, 0.10418451295152276, 0.10282346128706943, 0.10282346128706943, 0.10282346128706943, 0.11368537042248994, 0.11368537042248994, 0.11368537042248994, 0.13710359629291702, 0.13710359629291702, 0.13710359629291702, 0.14055700308598007, 0.14055700308598007, 0.14055700308598007, 0.9588841437236837, 0.9588841437236837, 0.9588841437236837, 0.9834717682756682, 0.9834717682756682, 0.9834717682756682, 0.9873220920545461, 0.9873220920545461, 0.9873220920545461, 0.6994892859248554, 0.6994892859248554, 0.6994892859248554, 0.623048911956033, 0.623048911956033, 0.623048911956033, 0.6581333495844942, 0.6581333495844942, 0.6581333495844942, 0.22881387681008347, 0.22881387681008347, 0.22881387681008347, 0.25926900717369816, 0.25926900717369816, 0.25926900717369816, 0.17897908029026255, 0.17897908029026255, 0.17897908029026255, 0.19522828049393437, 0.19522828049393437, 0.19522828049393437, 0.10660220804324594, 0.10660220804324594, 0.10660220804324594, 0.49186996716993725, 0.49186996716993725, 0.49186996716993725, 0.25267103746128694, 0.25267103746128694, 0.25267103746128694, 0.20603075525463133, 0.20603075525463133, 0.20603075525463133, 0.2493392688585574, 0.2493392688585574, 0.2493392688585574, 0.004185228003431241, 0.004185228003431241, 0.004185228003431241, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08018182900192927, 0.08018182900192927, 0.08018182900192927, 0.04925044321566674, 0.04925044321566674, 0.04925044321566674, 0.10880524983054785, 0.10880524983054785, 0.10880524983054785, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09894075818052284, 0.09894075818052284, 0.09894075818052284, 0.10487019296799371, 0.10487019296799371, 0.10487019296799371, 0.06106952301082036, 0.06106952301082036, 0.06106952301082036, 0.03900419484822848, 0.03900419484822848, 0.03900419484822848, 0.33753224185416486, 0.33753224185416486, 0.33753224185416486, 0.5814000294788602, 0.5814000294788602, 0.5814000294788602, 0.5481617808587841, 0.5481617808587841, 0.5481617808587841, 0.5998591117253704, 0.5998591117253704, 0.5998591117253704, 0.1607136588921394, 0.1607136588921394, 0.1607136588921394, 0.14545878412541202, 0.14545878412541202, 0.14545878412541202, 0.10867425680361598, 0.10867425680361598, 0.10867425680361598, 0.17642836428628783, 0.17642836428628783, 0.17642836428628783, 0.358078057429571, 0.358078057429571, 0.358078057429571, 0.15954606853409592, 0.15954606853409592, 0.15954606853409592, 0.35685349461263927, 0.35685349461263927, 0.35685349461263927, 0.64023438566898, 0.64023438566898, 0.64023438566898, 0.3114065046671103, 0.3114065046671103, 0.3114065046671103, 0.23833676188288122, 0.23833676188288122, 0.23833676188288122, 0.2196917590557418, 0.2196917590557418, 0.2196917590557418, 0.17245620975865972, 0.17245620975865972, 0.17245620975865972, 0.184159184818534, 0.184159184818534, 0.184159184818534, 0.19381727794755488, 0.19381727794755488, 0.19381727794755488, 0.20019107940144976, 0.20019107940144976, 0.20019107940144976, 0.1999433431226343, 0.1999433431226343, 0.1999433431226343, 0.25091816209676765, 0.25091816209676765, 0.25091816209676765, 0.2155802222138049, 0.2155802222138049, 0.2155802222138049, 0.9401967344251021, 0.9401967344251021, 0.9401967344251021, 0.15974645422653544, 0.15974645422653544, 0.15974645422653544, 0.16814098673973987, 0.16814098673973987, 0.16814098673973987, 0.170003294978892, 0.170003294978892, 0.170003294978892, 0.21142699190609893, 0.21142699190609893, 0.21142699190609893, 0.157362147161626, 0.157362147161626, 0.157362147161626, 0.18099952382899387, 0.18099952382899387, 0.18099952382899387, 0.18759678758944331, 0.18759678758944331, 0.18759678758944331, 0.19026719513832946, 0.19026719513832946, 0.19026719513832946, 0.09147911388213958, 0.09147911388213958, 0.09147911388213958, 0.07846527683853055, 0.07846527683853055, 0.07846527683853055, 0.08840158585766345, 0.08840158585766345, 0.08840158585766345]}, "mutation_prompt": null}
{"id": "b5e4d801-5449-4e59-bd6f-ae1e0f376b3a", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "d41b787d-7c08-4a67-823a-353abfd8ff29", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "7dc4ab3f-19e7-4351-97c1-89a8b57f1d85", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "55c6cd76-b4c3-46bc-84de-0241764b7754", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "a9337e7e-0e06-4ceb-afee-d4beb12873d1", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "971c90e0-42bf-4da1-ba6e-93db9d14e18c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "6b581ae6-cd7e-4872-a78b-48e69b8b5f78", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "b761dc75-b920-4246-8bdb-22cf0d9d34f0", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w_max = 0.9  # Max inertia weight for PSO\n        self.w_min = 0.4  # Min inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # Linearly decreasing inertia weight\n            w = self.w_max - ((self.w_max - self.w_min) * (evaluations / self.budget))\n            \n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "Enhanced HybridPSODE with adaptive parameters for better convergence under constrained budgets.", "configspace": "", "generation": 89, "fitness": 0.21327913865805903, "feedback": "The algorithm HybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.23.", "error": "", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.7191605536220455, 0.7191605536220455, 0.7191605536220455, 0.7207409438364527, 0.7207409438364527, 0.7207409438364527, 0.7216213799735514, 0.7216213799735514, 0.7216213799735514, 0.03330593660588932, 0.03330593660588932, 0.03330593660588932, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003902158152575441, 0.003902158152575441, 0.003902158152575441, 0.09721555146773864, 0.09721555146773864, 0.09721555146773864, 0.06765882061207062, 0.06765882061207062, 0.06765882061207062, 0.10563944060740049, 0.10563944060740049, 0.10563944060740049, 0.12170472202081506, 0.12170472202081506, 0.12170472202081506, 0.10530430516608891, 0.10530430516608891, 0.10530430516608891, 0.10747814213577567, 0.10747814213577567, 0.10747814213577567, 0.9872025054153013, 0.9872025054153013, 0.9872025054153013, 0.9907029974237184, 0.9907029974237184, 0.9907029974237184, 0.9898902669020287, 0.9898902669020287, 0.9898902669020287, 0.24079554998699104, 0.24079554998699104, 0.24079554998699104, 0.24931012491091908, 0.24931012491091908, 0.24931012491091908, 0.26937820920908484, 0.26937820920908484, 0.26937820920908484, 0.1642664205627874, 0.1642664205627874, 0.1642664205627874, 0.180873937890911, 0.180873937890911, 0.180873937890911, 0.19100826964667772, 0.19100826964667772, 0.19100826964667772, 0.1772248722237746, 0.1772248722237746, 0.1772248722237746, 0.08577512299312207, 0.08577512299312207, 0.08577512299312207, 0.16300161222584286, 0.16300161222584286, 0.16300161222584286, 0.18053152093232006, 0.18053152093232006, 0.18053152093232006, 0.16755264439047313, 0.16755264439047313, 0.16755264439047313, 0.16997402306909226, 0.16997402306909226, 0.16997402306909226, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.034008879772385314, 0.034008879772385314, 0.034008879772385314, 0.057995028406268134, 0.057995028406268134, 0.057995028406268134, 0.02284082670550558, 0.02284082670550558, 0.02284082670550558, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07205702759662724, 0.07205702759662724, 0.07205702759662724, 0.035782661267585336, 0.035782661267585336, 0.035782661267585336, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08581719200086702, 0.08581719200086702, 0.08581719200086702, 0.45817943152589746, 0.45817943152589746, 0.45817943152589746, 0.20710690647177565, 0.20710690647177565, 0.20710690647177565, 0.4811558008513779, 0.4811558008513779, 0.4811558008513779, 0.08928108375573118, 0.08928108375573118, 0.08928108375573118, 0.08658420898178087, 0.08658420898178087, 0.08658420898178087, 0.08319552126517371, 0.08319552126517371, 0.08319552126517371, 0.1532908304529832, 0.1532908304529832, 0.1532908304529832, 0.21320087480726224, 0.21320087480726224, 0.21320087480726224, 0.1810547766280598, 0.1810547766280598, 0.1810547766280598, 0.25159212762862393, 0.25159212762862393, 0.25159212762862393, 0.33783489430885594, 0.33783489430885594, 0.33783489430885594, 0.4024443849701539, 0.4024443849701539, 0.4024443849701539, 0.21306936312401248, 0.21306936312401248, 0.21306936312401248, 0.1835632449149679, 0.1835632449149679, 0.1835632449149679, 0.16788584637566617, 0.16788584637566617, 0.16788584637566617, 0.19711743431597784, 0.19711743431597784, 0.19711743431597784, 0.1811693815285781, 0.1811693815285781, 0.1811693815285781, 0.17522023614014137, 0.17522023614014137, 0.17522023614014137, 0.17037459699267343, 0.17037459699267343, 0.17037459699267343, 0.1927008271074252, 0.1927008271074252, 0.1927008271074252, 0.19191073126573077, 0.19191073126573077, 0.19191073126573077, 0.6574433127313053, 0.6574433127313053, 0.6574433127313053, 0.1813766018811518, 0.1813766018811518, 0.1813766018811518, 0.16519520086989736, 0.16519520086989736, 0.16519520086989736, 0.1621158683962287, 0.1621158683962287, 0.1621158683962287, 0.32133179374606424, 0.32133179374606424, 0.32133179374606424, 0.1563215591383077, 0.1563215591383077, 0.1563215591383077, 0.18476133183481258, 0.18476133183481258, 0.18476133183481258, 0.19036832714711094, 0.19036832714711094, 0.19036832714711094, 0.1905801849159684, 0.1905801849159684, 0.1905801849159684, 0.06823932980890002, 0.06823932980890002, 0.06823932980890002, 0.07599270409718573, 0.07599270409718573, 0.07599270409718573, 0.06401761766778125, 0.06401761766778125, 0.06401761766778125]}, "mutation_prompt": null}
{"id": "10d918a8-32a3-4679-ac13-284e33ab643c", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "34de4826-99f1-4e68-9232-00fd4a1b3362", "solution": "import numpy as np\n\nclass EnhancedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # Adaptive parameters\n            self.w = 0.4 + 0.5 * (1 - evaluations / self.budget)\n            self.c1 = 1.5 + 0.5 * (evaluations / self.budget)\n            self.c2 = 1.5 + 0.5 * (1 - evaluations / self.budget)\n\n            # PSO Update with Opposition-based Learning\n            opposition_positions = self.lower_bound + self.upper_bound - positions\n            opposition_scores = np.array([func(p) for p in opposition_positions])\n            for i in range(self.population_size):\n                if opposition_scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = opposition_scores[i]\n                    personal_best_positions[i] = opposition_positions[i]\n\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "EnhancedHybridPSODE", "description": "Enhanced Hybrid PSODE with adaptive parameters and opposition-based learning for improved convergence under constrained budgets.", "configspace": "", "generation": 91, "fitness": 0.15864852359388174, "feedback": "The algorithm EnhancedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.20.", "error": "", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.40775823507621733, 0.40775823507621733, 0.40775823507621733, 0.4359896852472809, 0.4359896852472809, 0.4359896852472809, 0.4212318954673514, 0.4212318954673514, 0.4212318954673514, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03461148441385997, 0.03461148441385997, 0.03461148441385997, 0.0029933670759882958, 0.0029933670759882958, 0.0029933670759882958, 0.06771752078817628, 0.06771752078817628, 0.06771752078817628, 0.054111149251091284, 0.054111149251091284, 0.054111149251091284, 0.10600166979443237, 0.10600166979443237, 0.10600166979443237, 0.07782216975693335, 0.07782216975693335, 0.07782216975693335, 0.04435757522600814, 0.04435757522600814, 0.04435757522600814, 0.05779744891665084, 0.05779744891665084, 0.05779744891665084, 0.9834282792549462, 0.9834282792549462, 0.9834282792549462, 0.9854470856926241, 0.9854470856926241, 0.9854470856926241, 0.9879300079075534, 0.9879300079075534, 0.9879300079075534, 0.07905554508772039, 0.07905554508772039, 0.07905554508772039, 0.011695332950322324, 0.011695332950322324, 0.011695332950322324, 0.13314984296319032, 0.13314984296319032, 0.13314984296319032, 0.14744190561661963, 0.14744190561661963, 0.14744190561661963, 0.15269561417494093, 0.15269561417494093, 0.15269561417494093, 0.19148556123739058, 0.19148556123739058, 0.19148556123739058, 0.1226824424656896, 0.1226824424656896, 0.1226824424656896, 0.06140692239036638, 0.06140692239036638, 0.06140692239036638, 0.09533854603962466, 0.09533854603962466, 0.09533854603962466, 0.009813085857190873, 0.009813085857190873, 0.009813085857190873, 0.09446591810932337, 0.09446591810932337, 0.09446591810932337, 0.09729753214803116, 0.09729753214803116, 0.09729753214803116, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00985908426988702, 0.00985908426988702, 0.00985908426988702, 0.006515354930345385, 0.006515354930345385, 0.006515354930345385, 0.016624740453204834, 0.016624740453204834, 0.016624740453204834, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.020721642411586028, 0.020721642411586028, 0.020721642411586028, 0.034804920837161246, 0.034804920837161246, 0.034804920837161246, 0.027690334231896707, 0.027690334231896707, 0.027690334231896707, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.037983311345791804, 0.037983311345791804, 0.037983311345791804, 0.31728004265097354, 0.31728004265097354, 0.31728004265097354, 0.32299272180305816, 0.32299272180305816, 0.32299272180305816, 0.3162622215530623, 0.3162622215530623, 0.3162622215530623, 0.06000951459635673, 0.06000951459635673, 0.06000951459635673, 0.06354314415861939, 0.06354314415861939, 0.06354314415861939, 0.06603982003661113, 0.06603982003661113, 0.06603982003661113, 0.14327505128711837, 0.14327505128711837, 0.14327505128711837, 0.15589558629860967, 0.15589558629860967, 0.15589558629860967, 0.1451537615219216, 0.1451537615219216, 0.1451537615219216, 0.20161090739484167, 0.20161090739484167, 0.20161090739484167, 0.1607856997195306, 0.1607856997195306, 0.1607856997195306, 0.24071766258744975, 0.24071766258744975, 0.24071766258744975, 0.14659318075502503, 0.14659318075502503, 0.14659318075502503, 0.1517532381233535, 0.1517532381233535, 0.1517532381233535, 0.1380769873568637, 0.1380769873568637, 0.1380769873568637, 0.16774473690543512, 0.16774473690543512, 0.16774473690543512, 0.16672688150116266, 0.16672688150116266, 0.16672688150116266, 0.15816020262055042, 0.15816020262055042, 0.15816020262055042, 0.1646583161195515, 0.1646583161195515, 0.1646583161195515, 0.16100179870133213, 0.16100179870133213, 0.16100179870133213, 0.1596539786291281, 0.1596539786291281, 0.1596539786291281, 0.22613248669759267, 0.22613248669759267, 0.22613248669759267, 0.1550332118732456, 0.1550332118732456, 0.1550332118732456, 0.1659054212873292, 0.1659054212873292, 0.1659054212873292, 0.11042485374430921, 0.11042485374430921, 0.11042485374430921, 0.1877719947017521, 0.1877719947017521, 0.1877719947017521, 0.1890295831958203, 0.1890295831958203, 0.1890295831958203, 0.2075986165089596, 0.2075986165089596, 0.2075986165089596, 0.1855327845541337, 0.1855327845541337, 0.1855327845541337, 0.20598147004275147, 0.20598147004275147, 0.20598147004275147, 0.05442611938479891, 0.05442611938479891, 0.05442611938479891, 0.05325996695138724, 0.05325996695138724, 0.05325996695138724, 0.05513652410745473, 0.05513652410745473, 0.05513652410745473]}, "mutation_prompt": null}
{"id": "e4b14a68-ecc7-4cf5-b63b-ca03daedd877", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "3e94c205-59c0-4547-b144-0c00ac4425b2", "solution": "import numpy as np\n\nclass ImprovedHybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # Adaptive PSO parameters\n            self.w *= 0.99\n            self.c1 *= 1.01\n            self.c2 *= 1.01\n\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n            # Local search phase\n            if evaluations < self.budget:\n                local_search_position = global_best_position + np.random.uniform(-0.1, 0.1, self.dim)\n                local_search_position = np.clip(local_search_position, self.lower_bound, self.upper_bound)\n                local_search_score = func(local_search_position)\n                evaluations += 1\n                if local_search_score < global_best_score:\n                    global_best_score = local_search_score\n                    global_best_position = local_search_position\n\n        return global_best_position, global_best_score", "name": "ImprovedHybridPSODE", "description": "Introducing adaptive parameters and a local search phase to enhance the Hybrid PSO-DE algorithm's convergence and robustness.", "configspace": "", "generation": 93, "fitness": 0.24321413203282652, "feedback": "The algorithm ImprovedHybridPSODE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.24 with standard deviation 0.24.", "error": "", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.758139144923538, 0.758139144923538, 0.758139144923538, 0.9180777599689365, 0.9180777599689365, 0.9180777599689365, 0.7929665395291914, 0.7929665395291914, 0.7929665395291914, 0.04292993417078417, 0.04292993417078417, 0.04292993417078417, 0.31149936117888, 0.31149936117888, 0.31149936117888, 0.055047288836408415, 0.055047288836408415, 0.055047288836408415, 0.12054280550422702, 0.12054280550422702, 0.12054280550422702, 0.11072801220712258, 0.11072801220712258, 0.11072801220712258, 0.1257342848018561, 0.1257342848018561, 0.1257342848018561, 0.11117121607697122, 0.11117121607697122, 0.11117121607697122, 0.12826750410757937, 0.12826750410757937, 0.12826750410757937, 0.09506582224365634, 0.09506582224365634, 0.09506582224365634, 0.9836413561355921, 0.9836413561355921, 0.9836413561355921, 0.9889052383830826, 0.9889052383830826, 0.9889052383830826, 0.9890167184002456, 0.9890167184002456, 0.9890167184002456, 0.30438093810998823, 0.30438093810998823, 0.30438093810998823, 0.2828797746169748, 0.2828797746169748, 0.2828797746169748, 0.27756211304991174, 0.27756211304991174, 0.27756211304991174, 0.18474476572498955, 0.18474476572498955, 0.18474476572498955, 0.16173463885260386, 0.16173463885260386, 0.16173463885260386, 0.17316265596666713, 0.17316265596666713, 0.17316265596666713, 0.1632352715973, 0.1632352715973, 0.1632352715973, 0.13543382140746418, 0.13543382140746418, 0.13543382140746418, 0.18410189069389649, 0.18410189069389649, 0.18410189069389649, 0.21516696765842402, 0.21516696765842402, 0.21516696765842402, 0.1327036921213105, 0.1327036921213105, 0.1327036921213105, 0.11825310372337572, 0.11825310372337572, 0.11825310372337572, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.07280128730127289, 0.07280128730127289, 0.07280128730127289, 0.06442551434129384, 0.06442551434129384, 0.06442551434129384, 0.04006593920942536, 0.04006593920942536, 0.04006593920942536, 0.04059733503244822, 0.04059733503244822, 0.04059733503244822, 0.15081443267216, 0.15081443267216, 0.15081443267216, 0.07686511919135086, 0.07686511919135086, 0.07686511919135086, 0.043761757547897795, 0.043761757547897795, 0.043761757547897795, 0.18558380243679917, 0.18558380243679917, 0.18558380243679917, 0.2348305131566194, 0.2348305131566194, 0.2348305131566194, 0.4606430124297406, 0.4606430124297406, 0.4606430124297406, 0.4559249603878125, 0.4559249603878125, 0.4559249603878125, 0.5474175960108825, 0.5474175960108825, 0.5474175960108825, 0.10328683167903963, 0.10328683167903963, 0.10328683167903963, 0.1127292031090632, 0.1127292031090632, 0.1127292031090632, 0.09473011623992822, 0.09473011623992822, 0.09473011623992822, 0.18967289832378487, 0.18967289832378487, 0.18967289832378487, 0.1620602784375893, 0.1620602784375893, 0.1620602784375893, 0.1504747440991947, 0.1504747440991947, 0.1504747440991947, 0.3727818458042351, 0.3727818458042351, 0.3727818458042351, 0.3768517271511479, 0.3768517271511479, 0.3768517271511479, 0.287392098748952, 0.287392098748952, 0.287392098748952, 0.2763707972905448, 0.2763707972905448, 0.2763707972905448, 0.20502919498121464, 0.20502919498121464, 0.20502919498121464, 0.12143738447563013, 0.12143738447563013, 0.12143738447563013, 0.16788884097794454, 0.16788884097794454, 0.16788884097794454, 0.18653770265511116, 0.18653770265511116, 0.18653770265511116, 0.15502182501227868, 0.15502182501227868, 0.15502182501227868, 0.2262131999100928, 0.2262131999100928, 0.2262131999100928, 0.25986763701549753, 0.25986763701549753, 0.25986763701549753, 0.22081469505045204, 0.22081469505045204, 0.22081469505045204, 0.8640166377417332, 0.8640166377417332, 0.8640166377417332, 0.15960704140769755, 0.15960704140769755, 0.15960704140769755, 0.18291783977211473, 0.18291783977211473, 0.18291783977211473, 0.17011234320543955, 0.17011234320543955, 0.17011234320543955, 0.2131490404049704, 0.2131490404049704, 0.2131490404049704, 0.2379042553072439, 0.2379042553072439, 0.2379042553072439, 0.182642360178638, 0.182642360178638, 0.182642360178638, 0.18204540438443162, 0.18204540438443162, 0.18204540438443162, 0.17668865791670973, 0.17668865791670973, 0.17668865791670973, 0.08316490364862694, 0.08316490364862694, 0.08316490364862694, 0.06842033849148044, 0.06842033849148044, 0.06842033849148044, 0.08246377323404397, 0.08246377323404397, 0.08246377323404397]}, "mutation_prompt": null}
{"id": "07f3dd6a-7ece-48ba-8f2b-229fe1f92570", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "392274b9-068d-4346-ad77-d640ae039738", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "0702360f-1684-4d74-8e0b-4c87dbf2f26f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "4fb21cc0-3ac9-4e51-b329-debf9b18dc8f", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "41d4b8de-533a-4646-be4d-813adf0bb717", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
{"id": "7c6d5f03-6627-4a82-b8ab-fb47f9f549d5", "solution": "import numpy as np\n\nclass HybridPSODE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n        self.population_size = 20\n        self.w = 0.5  # Inertia weight for PSO\n        self.c1 = 1.5  # Cognitive component\n        self.c2 = 1.5  # Social component\n        self.F = 0.8  # Scaling factor for DE\n        self.CR = 0.9  # Crossover probability for DE\n\n    def __call__(self, func):\n        np.random.seed(42)  # For reproducibility\n\n        # Initialize particle positions and velocities for PSO\n        positions = np.random.uniform(self.lower_bound, self.upper_bound, (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(positions)\n        personal_best_scores = np.array([func(p) for p in personal_best_positions])\n        global_best_position = personal_best_positions[np.argmin(personal_best_scores)]\n        global_best_score = np.min(personal_best_scores)\n\n        evaluations = self.population_size\n        \n        while evaluations < self.budget:\n            # PSO Update\n            r1 = np.random.rand(self.population_size, self.dim)\n            r2 = np.random.rand(self.population_size, self.dim)\n            velocities = (self.w * velocities + self.c1 * r1 * (personal_best_positions - positions) +\n                          self.c2 * r2 * (global_best_position - positions))\n            positions = np.clip(positions + velocities, self.lower_bound, self.upper_bound)\n\n            # Evaluate new positions\n            scores = np.array([func(p) for p in positions])\n            evaluations += self.population_size\n\n            # Update personal and global bests\n            for i in range(self.population_size):\n                if scores[i] < personal_best_scores[i]:\n                    personal_best_scores[i] = scores[i]\n                    personal_best_positions[i] = positions[i]\n                if scores[i] < global_best_score:\n                    global_best_score = scores[i]\n                    global_best_position = positions[i]\n\n            if evaluations >= self.budget:\n                break\n\n            # DE Mutation and Crossover\n            for i in range(self.population_size):\n                indices = np.random.choice(self.population_size, 3, replace=False)\n                if i in indices:\n                    indices = np.random.choice(self.population_size, 3, replace=False)\n                x1, x2, x3 = positions[indices]\n                mutant_vector = np.clip(x1 + self.F * (x2 - x3), self.lower_bound, self.upper_bound)\n\n                crossover_mask = np.random.rand(self.dim) < self.CR\n                trial_vector = np.where(crossover_mask, mutant_vector, positions[i])\n\n                trial_score = func(trial_vector)\n                evaluations += 1\n\n                if trial_score < scores[i]:\n                    positions[i] = trial_vector\n                    scores[i] = trial_score\n\n                    if trial_score < personal_best_scores[i]:\n                        personal_best_scores[i] = trial_score\n                        personal_best_positions[i] = trial_vector\n                    if trial_score < global_best_score:\n                        global_best_score = trial_score\n                        global_best_position = trial_vector\n\n                if evaluations >= self.budget:\n                    break\n\n        return global_best_position, global_best_score", "name": "HybridPSODE", "description": "A hybrid Particle Swarm Optimization (PSO) with Differential Evolution (DE) for enhanced exploration and exploitation under constrained budgets.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "cb5cf429-303e-4d11-be8f-874a6f6f0e67", "metadata": {"aucs": [0.913783104830158, 0.913783104830158, 0.913783104830158, 0.9016274077686289, 0.9016274077686289, 0.9016274077686289, 0.9203717691402125, 0.9203717691402125, 0.9203717691402125, 0.8244362049563279, 0.8244362049563279, 0.8244362049563279, 0.8268792826183198, 0.8268792826183198, 0.8268792826183198, 0.4060453310289587, 0.4060453310289587, 0.4060453310289587, 0.13334433284156222, 0.13334433284156222, 0.13334433284156222, 0.10246266718514885, 0.10246266718514885, 0.10246266718514885, 0.6430434522644366, 0.6430434522644366, 0.6430434522644366, 0.1139399845847191, 0.1139399845847191, 0.1139399845847191, 0.10564255021138091, 0.10564255021138091, 0.10564255021138091, 0.15194896545493142, 0.15194896545493142, 0.15194896545493142, 0.986314033642143, 0.986314033642143, 0.986314033642143, 0.989383744269933, 0.989383744269933, 0.989383744269933, 0.9874373999699473, 0.9874373999699473, 0.9874373999699473, 0.6612315546073751, 0.6612315546073751, 0.6612315546073751, 0.652662192410953, 0.652662192410953, 0.652662192410953, 0.694248084838506, 0.694248084838506, 0.694248084838506, 0.8096742034171454, 0.8096742034171454, 0.8096742034171454, 0.1620407937573074, 0.1620407937573074, 0.1620407937573074, 0.7864924724610387, 0.7864924724610387, 0.7864924724610387, 0.19373734425403544, 0.19373734425403544, 0.19373734425403544, 0.10794467980771827, 0.10794467980771827, 0.10794467980771827, 0.2913161876392082, 0.2913161876392082, 0.2913161876392082, 0.13499672607333235, 0.13499672607333235, 0.13499672607333235, 0.13479333425257067, 0.13479333425257067, 0.13479333425257067, 0.2501354312741141, 0.2501354312741141, 0.2501354312741141, 0.024509361823458087, 0.024509361823458087, 0.024509361823458087, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.08008728392268494, 0.08008728392268494, 0.08008728392268494, 0.09298794543193067, 0.09298794543193067, 0.09298794543193067, 0.10051175091072106, 0.10051175091072106, 0.10051175091072106, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.099305540579397, 0.099305540579397, 0.099305540579397, 0.10375822257123668, 0.10375822257123668, 0.10375822257123668, 0.07581355214840224, 0.07581355214840224, 0.07581355214840224, 0.19566767117061112, 0.19566767117061112, 0.19566767117061112, 0.2873333493726452, 0.2873333493726452, 0.2873333493726452, 0.5906866872576073, 0.5906866872576073, 0.5906866872576073, 0.20949527679925073, 0.20949527679925073, 0.20949527679925073, 0.5915631107477927, 0.5915631107477927, 0.5915631107477927, 0.09302584787453361, 0.09302584787453361, 0.09302584787453361, 0.13751846069316165, 0.13751846069316165, 0.13751846069316165, 0.10151726543937989, 0.10151726543937989, 0.10151726543937989, 0.1454544999174523, 0.1454544999174523, 0.1454544999174523, 0.24806599005500574, 0.24806599005500574, 0.24806599005500574, 0.15950255488768417, 0.15950255488768417, 0.15950255488768417, 0.2876648155930688, 0.2876648155930688, 0.2876648155930688, 0.30037318694034176, 0.30037318694034176, 0.30037318694034176, 0.2697753617338695, 0.2697753617338695, 0.2697753617338695, 0.25216463935361055, 0.25216463935361055, 0.25216463935361055, 0.2417629292567134, 0.2417629292567134, 0.2417629292567134, 0.21713928638047353, 0.21713928638047353, 0.21713928638047353, 0.1996199350472988, 0.1996199350472988, 0.1996199350472988, 0.1874397272593613, 0.1874397272593613, 0.1874397272593613, 0.212539086407888, 0.212539086407888, 0.212539086407888, 0.23891972769738146, 0.23891972769738146, 0.23891972769738146, 0.22577750543947173, 0.22577750543947173, 0.22577750543947173, 0.1901506668257733, 0.1901506668257733, 0.1901506668257733, 0.9140098164572446, 0.9140098164572446, 0.9140098164572446, 0.15958948996637734, 0.15958948996637734, 0.15958948996637734, 0.166322956712604, 0.166322956712604, 0.166322956712604, 0.1698407344444811, 0.1698407344444811, 0.1698407344444811, 0.7896279214179273, 0.7896279214179273, 0.7896279214179273, 0.13062686254195943, 0.13062686254195943, 0.13062686254195943, 0.20201864075233844, 0.20201864075233844, 0.20201864075233844, 0.1775711688706113, 0.1775711688706113, 0.1775711688706113, 0.18262853630134745, 0.18262853630134745, 0.18262853630134745, 0.07960223503423736, 0.07960223503423736, 0.07960223503423736, 0.087736914990593, 0.087736914990593, 0.087736914990593, 0.08383831958063803, 0.08383831958063803, 0.08383831958063803]}, "mutation_prompt": null}
