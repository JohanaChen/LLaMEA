{"id": "79cc1f52-0fd0-48a4-82ef-adb9e87fd695", "solution": "import numpy as np\n\nclass ADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        \n        evaluations = self.population_size\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters\n                w = 0.5 + 0.5 * np.random.rand()  # Inertia weight\n                c1 = 1.5 + np.random.rand()  # Cognitive (local) coefficient\n                c2 = 1.5 + np.random.rand()  # Social (global) coefficient\n\n                # Update velocities and positions\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_value", "name": "ADSO", "description": "Adaptive Dynamic Swarm Optimization (ADSO) using an adaptive swarm strategy with dynamic local exploitation and global exploration.", "configspace": "", "generation": 0, "fitness": 0.18372226206433273, "feedback": "The algorithm ADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.20.", "error": "", "parent_id": null, "metadata": {"aucs": [0.6594565641618879, 0.5585809039779229, 0.7396528129314988, 0.14130015460874001, 0.161239787529469, 0.15694656914410932, 0.1495658608390098, 0.18280542280075007, 0.18325486864771134, 0.2593478967660189, 0.041246625702633044, 9.999999999998899e-05, 0.04723926931128375, 0.32891771728430763, 0.05496979466705232, 0.0057853939430875245, 0.3590412342843713, 0.004176908029004167, 0.12081329321886847, 0.1329735936330224, 0.1258639361148094, 0.04301560056090781, 0.10266104655560393, 0.09523173464779155, 0.057458299585834705, 0.05600984039455437, 0.04603978255190666, 0.09151391224431249, 0.08874355369932296, 0.14226168933139738, 0.11638719866062952, 0.1146638584736811, 0.12773270789724978, 0.06862048801762177, 0.016296303700053416, 0.10765887847983335, 0.9971146896948477, 0.9949315315869507, 0.9978176931252873, 0.9980244325521848, 0.09999991576597389, 0.9968854064558058, 0.9972320987819742, 0.9976656757502812, 0.9924181718152312, 0.059752289889595356, 0.055667560537888905, 0.05568014248621944, 0.1806268192711541, 0.14561163288437162, 0.15056744849784076, 0.08920167848673932, 0.08900620589633212, 9.999999999998899e-05, 0.17297337089869957, 0.31198135452467424, 0.291863608998539, 0.19807922840980885, 0.24261845227972123, 0.3387808671862387, 0.11885264330559875, 0.12431576648806508, 0.14666736459208174, 0.14384805260796474, 0.14618415577813226, 0.1733186696508464, 0.16470326099633714, 9.999999999998899e-05, 0.1294933195091027, 0.14803676900837504, 0.1472744157198893, 0.15730883173641286, 0.1531772772166079, 0.016883451237602265, 0.05060660628406133, 0.14662716417760513, 0.13843099220348454, 0.14573296797615964, 0.1853610690331502, 0.031486031128971304, 0.13935451914013197, 9.999999999998899e-05, 0.007123037535430532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01827910283164058, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04441582842143743, 0.025982830095157672, 0.06936715590125964, 0.16688222609668502, 9.999999999998899e-05, 0.031847279447143606, 0.12009486460733665, 0.028500677227373816, 0.020062150348567953, 0.09131828653620055, 0.023877632400643778, 0.021859451574296473, 0.1206039063304597, 0.06468587452543684, 0.046062786829776825, 9.999999999998899e-05, 9.999999999998899e-05, 0.047483962034128524, 0.12135216608155186, 0.06098990186555531, 0.0414304331428883, 0.036942873319209646, 0.0057066241241719995, 0.00529010754728898, 0.07349407711587885, 9.999999999998899e-05, 0.07615899842452578, 0.4146704937968485, 0.43821339242662605, 0.43295531292079503, 0.1816880469887796, 0.4305113821878159, 0.20897245973750944, 0.4121730042416124, 0.4399706127441998, 0.40851808456242766, 0.06029305652297079, 0.07904887629363999, 0.023559086131001772, 0.08044108020970053, 0.10081686815649915, 0.073268936800021, 0.06864104345063604, 0.09198365483804705, 0.14205625242399633, 0.2849161700806532, 0.2015540551224264, 0.26017535780678014, 0.23247392621478635, 0.14113832311675778, 0.16415844934613255, 0.1898528032181338, 0.18698586529233685, 0.2770829245153167, 0.2862510778961701, 0.2866760079214774, 0.2239447783508628, 0.18940377893259008, 0.19644026708986762, 0.25918219920522856, 0.2752825594133028, 0.3152527392202835, 0.23168234766054507, 0.16202423196849214, 0.15899141130588013, 0.17256292097272907, 0.19127562069129045, 0.07961761588594019, 0.15490354629750946, 0.25325745423796475, 0.19738502743859587, 0.09405438071379046, 0.20628879791621957, 0.18286776016236506, 0.23642034042517612, 0.18973421279767744, 0.16422176497782692, 0.17584904614923502, 0.22834288534262515, 0.1709982500025743, 0.19290197336152404, 0.20982677219386237, 0.187911484113654, 0.1806138738944748, 0.20840090731216598, 0.2073039287557219, 0.2304570751287719, 0.2367380663354154, 0.18013124109150136, 0.1749935974218988, 0.7551512838091496, 0.15587664146714109, 0.16423156559048946, 0.12994850263362545, 0.1657343216562407, 0.1293238783841847, 0.18113235655409177, 0.1283882998243887, 0.6028550326976516, 0.07925224479464288, 0.1097479004712193, 0.34914887453945076, 0.08289967966648126, 0.20792780609178896, 0.16115572323573502, 0.15076880233543166, 0.11272824498403533, 0.1086591468971132, 0.1958427077704803, 0.19556946888124527, 0.22296409448414078, 0.1937702208700648, 0.16186895084720743, 0.20492365433845883, 0.21636422109524533, 0.18771269517603606, 0.2055664452630015, 0.08604075452426274, 0.04894760704540224, 0.08160057621466554, 0.08602663325854154, 0.05805475259528525, 0.07585242918657664, 0.10141265123715171, 0.07305405241247886, 0.07434758300385547]}, "mutation_prompt": null}
{"id": "70fad0c9-99d4-4a1d-8d67-a87a69b74799", "solution": "import numpy as np\n\nclass EADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        \n        evaluations = self.population_size\n\n        # Main loop\n        while evaluations < self.budget:\n            # Dynamic inertia weight\n            w = 0.4 + 0.5 * (1 - evaluations / self.budget)\n            for i in range(self.population_size):\n                # Adaptive Parameters\n                c1 = 1.5 + np.random.rand()  # Cognitive (local) coefficient\n                c2 = 1.5 + np.random.rand()  # Social (global) coefficient\n\n                # Update velocities and positions\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n\n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n            # Adaptive population resizing\n            if evaluations < self.budget and evaluations % 50 == 0:\n                self.population_size = max(5, int(self.population_size * 0.9))\n                population = population[:self.population_size]\n                velocities = velocities[:self.population_size]\n                personal_best_positions = personal_best_positions[:self.population_size]\n                personal_best_values = personal_best_values[:self.population_size]\n\n        return self.global_best_position, self.global_best_value", "name": "EADSO", "description": "Enhanced Adaptive Dynamic Swarm Optimization (EADSO) with dynamic inertia weight adjustment and adaptive population resizing.", "configspace": "", "generation": 1, "fitness": 0.17950417636177377, "feedback": "The algorithm EADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.18 with standard deviation 0.21.", "error": "", "parent_id": "79cc1f52-0fd0-48a4-82ef-adb9e87fd695", "metadata": {"aucs": [0.7004918332442042, 0.6729405035073359, 0.6819497355897615, 0.14089613384369315, 0.1799014132672544, 0.11479066106549851, 0.17384286762072754, 0.1268841726190182, 0.7118483245849926, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.014152029075531258, 0.0452779694749188, 0.005915879284794534, 0.41636262471395136, 0.10463024497546647, 0.13118512916269298, 0.13578791181353156, 0.11591586461852277, 0.06575432152936322, 0.055279542850149466, 0.031684230754695286, 0.0457005802813385, 0.10422762205306213, 0.1116599633378017, 0.1410882317888903, 0.11957274270881058, 0.11078930313137536, 0.13265427793760953, 0.14262924656950549, 0.09965844796834933, 0.026636487291435862, 0.9965756927385615, 0.9961149303397124, 0.9969986598413927, 0.9963974039205263, 0.9963753494103367, 0.9975456405846935, 0.9969503220639367, 0.9964022018022273, 0.9964892336553473, 0.054660366340122724, 0.055063963058432086, 0.028172764610488454, 0.13975532099784327, 0.137582489934034, 0.39292381342752203, 0.0827200508749284, 0.08717073029807265, 0.0513397184256682, 0.1668866760359602, 0.19400871853163393, 0.13497517888907062, 0.19610001712140257, 0.1134626462180538, 0.17456083949530987, 0.13417305907887656, 0.08334880212354745, 0.15861452765509299, 0.09742460858582236, 0.1462425757350012, 9.999999999998899e-05, 0.17166145313259162, 0.06621481929494188, 0.10683949771604917, 9.999999999998899e-05, 0.23118386113680234, 0.20011379857141387, 0.1853381537982991, 0.010149645686178488, 0.15594572931278095, 0.14615865501113168, 0.13774177689905098, 0.14544216547777433, 0.1469966227920606, 0.031096166062934527, 0.1716732285749013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.045140016731546884, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03252022921881981, 0.027813874841185915, 0.0460797742694129, 0.023984796403959452, 9.999999999998899e-05, 9.999999999998899e-05, 0.015737459514782892, 0.03548371456512722, 0.017236231563779958, 9.999999999998899e-05, 0.031190974108231018, 0.11396090091003097, 9.999999999998899e-05, 0.05566834990621883, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04649902667178374, 9.999999999998899e-05, 0.030611010643475822, 0.09176022455480781, 9.999999999998899e-05, 9.999999999998899e-05, 0.0879715879689289, 0.06966564489530169, 9.999999999998899e-05, 9.999999999998899e-05, 0.402916353850728, 0.4235844557937497, 0.4943104560694891, 0.2060772982017115, 0.2057932592113142, 0.16762564580876804, 0.45887706707586484, 0.4368735316414528, 0.4738611217164501, 0.06443536551296569, 0.04966910464624574, 0.09293665299820009, 0.08880312793997869, 0.06733555645791589, 0.12043304396505317, 0.09059143606695341, 0.09846881586643319, 0.10627837941055207, 0.19204162505532862, 0.23737480569564484, 0.17701533191570729, 0.25802999230830936, 0.14476396620955034, 0.15203496570630382, 0.13086858879133412, 0.1809317834620966, 0.19131240221529577, 0.16995734623844783, 0.18046266352535967, 0.2122670278596568, 0.23130949827852465, 0.19146125840649086, 0.24934919821236246, 0.30123129585422304, 0.2701125599716112, 0.1597482002880204, 0.11548573146937557, 0.18266230689935437, 0.1551517437202401, 0.3163995550404275, 0.11657205740089116, 0.29003227118221653, 0.14010483166563403, 0.13626084524918336, 0.08801000717988117, 0.15641657532576414, 0.16587198119151658, 0.17882778359481633, 0.1691302336533188, 0.1738265843937815, 0.24016307687926985, 0.21197088888914017, 0.18000490052198292, 0.20654632344331025, 0.3591754933738037, 0.19367547793645756, 0.22957454602134608, 0.23704229045809833, 0.21273152534421336, 0.20686387209331392, 0.1914012385000613, 0.20579187672447186, 0.19586608675254946, 0.1550112928140106, 0.1814430458645524, 0.16054695885564418, 0.1998259498371644, 0.19790643298100064, 0.1604509352395227, 0.186002998020265, 0.1810577265635005, 0.18644917616510892, 0.07877577965113469, 0.10883242900997991, 0.15004240536853342, 0.4062672950507653, 0.20000012921701427, 0.4735670005096767, 0.10828505672214483, 0.20370279067587926, 0.19565718401728016, 0.1925395212499864, 0.19698938348091566, 0.20652011093094447, 0.20626519753587913, 0.18876653785990616, 0.18018830543141684, 0.19955015333547899, 0.1864057447853762, 0.1908309417331875, 0.06799736919162547, 0.06559854680182675, 0.07326109726994923, 0.06304421431354335, 0.08506839143221623, 0.07233110700235634, 0.0656465674250799, 0.07729664007866033, 0.04625040189689045]}, "mutation_prompt": null}
{"id": "d00f2780-4ed4-41b7-9c81-36532526c356", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        \n        evaluations = self.population_size\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters\n                w = 0.5 + 0.5 * np.random.rand()  # Inertia weight\n                c1 = 1.5 + np.random.rand()  # Cognitive (local) coefficient\n                c2 = 1.5 + np.random.rand()  # Social (global) coefficient\n\n                # Update velocities and positions\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                \n                # Apply non-uniform mutation\n                mutation = (np.random.rand(self.dim) - 0.5) * (self.bounds[1] - self.bounds[0]) * (1 - evaluations / self.budget)\n                population[i] = np.clip(population[i] + velocities[i] + mutation, self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSO", "description": "Enhanced Adaptive Dynamic Swarm Optimization (EADSO) using non-uniform mutation to increase diversity and escape local optima.", "configspace": "", "generation": 2, "fitness": 0.1214804123812651, "feedback": "The algorithm EnhancedADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.12 with standard deviation 0.19.", "error": "", "parent_id": "79cc1f52-0fd0-48a4-82ef-adb9e87fd695", "metadata": {"aucs": [0.1612368753247192, 0.16460343747791517, 0.17681416151498996, 0.18325491412244632, 0.18823777427835509, 0.18761699442609248, 0.18248194116706018, 0.1723542831703162, 0.20864776820588204, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.031298616383972355, 0.031778888346691736, 0.04042855781165178, 0.04759222195456658, 0.047958748299048004, 0.04088588951446637, 0.046526097488454266, 0.04309543533580895, 0.0459234006154946, 0.031082380253695363, 0.026801293953713556, 0.02697377802156664, 0.02832070829598321, 0.019598383066207314, 0.02367771795120044, 0.03666612575029815, 0.017826512803028716, 0.029676079692622315, 0.9976591914486135, 0.9970000748221897, 0.9977232159449068, 0.9974607186196557, 0.9957678240130914, 0.9965120995461048, 0.9980323477523181, 0.9969824665380992, 0.9953945416819422, 0.08191096819854571, 0.08404017460899904, 0.07814509684141269, 0.07883359201100826, 0.06989212708234172, 0.07231025746254638, 0.09150332339159994, 0.08597180096698098, 0.08949363998263338, 0.14421891554244415, 0.11269024086822987, 0.12353447800329576, 0.13504083766888764, 0.14919899840073525, 0.1334257276900016, 0.1309667715574684, 0.11629226393491188, 0.1176613448617434, 0.0022463982363420953, 0.0002996905255194804, 0.0038812243529969814, 0.00045101037267669675, 0.011721098948759945, 0.013517983488206875, 0.00620900131610902, 0.003353358757131386, 0.014202416064049816, 0.013570205384884737, 0.017712833900858982, 0.02064630030395931, 0.0012665631489012785, 0.009088386433589002, 0.010938534618026075, 0.0030596177807583613, 0.00015283189460768565, 0.0009236809181456529, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0322299684552152, 0.04575276354664348, 0.022275932067892024, 0.07922670774445284, 0.03481108511347997, 0.0017532388096762608, 0.025329716374116518, 0.01724456080089587, 0.023924998377868545, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0018359744487023155, 9.999999999998899e-05, 0.001565921524314895, 0.0032246022991399004, 0.002651907001097409, 0.005782671703284503, 0.00384013280119766, 0.02731999922624051, 0.0043805361785623775, 0.1742511658132344, 0.1889428080782819, 0.17098185202755134, 0.1947285824285645, 0.19694980615422297, 0.18783184846648704, 0.17438809336033878, 0.1785773770349608, 0.17937152425106784, 0.06458825311967631, 0.05092232219266113, 0.05486395950526424, 0.041911840988797855, 0.04315204558759067, 0.04174181963688284, 0.03420813632578379, 0.04224256351496258, 0.03919941382117886, 0.13486698796020247, 0.13797650553297025, 0.13815519296898748, 0.16171718175389282, 0.14730194980653177, 0.18802908575627963, 0.15496763091932675, 0.13525289255755346, 0.1393929401662326, 0.16062736551570378, 0.16524261768219983, 0.1506465119115179, 0.14059472700000186, 0.14475560007875266, 0.14689806027059493, 0.15909205319944253, 0.16897339558157998, 0.15699946595487213, 0.09966614008042018, 0.12354919388490049, 0.09935252092361879, 0.11268835893738993, 0.10581101619574307, 0.12008938899846255, 0.10728394238595373, 0.0907465390954898, 0.1093737370721668, 0.15256823461887126, 0.12175576140073607, 0.13946260387299858, 0.14423224543940327, 0.13595632362109733, 0.14796395677103846, 0.15261478210897317, 0.13549504017290692, 0.1809955266959672, 0.10632120924601818, 0.15116483619446097, 0.0913048887557466, 0.10070966647774693, 0.10126107729946487, 0.07208677927399243, 0.11488304965563989, 0.09004916188643564, 0.06406657033112129, 0.12031077848254823, 0.14284957539928766, 0.1439063767298987, 0.1495065345580321, 0.1483780057155456, 0.15146704390789423, 0.14072581968343134, 0.12248116107448115, 0.16468946895703906, 0.12879496431091886, 0.15052835151292732, 0.14308713968754616, 0.10535931858865732, 0.14294425619018436, 0.14886103406496876, 0.1686118830743164, 0.17571246582177735, 0.1877114939504413, 0.1806392194910581, 0.18698902725479316, 0.17877150310348644, 0.189171611651048, 0.1720900879684263, 0.1719487147763883, 0.20354162144001864, 0.17922182818047672, 0.2075327324869145, 0.051583974487452, 0.046067103798365316, 0.04149387742126143, 0.03380480470416847, 0.037423400631004355, 0.054178353840968696, 0.05372565544099217, 0.03493080728103337, 0.04071907277933673]}, "mutation_prompt": null}
{"id": "0b765158-9ef8-4334-8d51-42bd1ab6fa8a", "solution": "import numpy as np\n\nclass ADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        \n        evaluations = self.population_size\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters\n                w = 0.5 + 0.5 * np.random.rand()  # Inertia weight\n                c1 = 1.5 + np.random.rand()  # Cognitive (local) coefficient\n                c2 = 1.5 + np.random.rand()  # Social (global) coefficient\n\n                # Update velocities and positions\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_value", "name": "ADSO", "description": "Adaptive Dynamic Swarm Optimization (ADSO) using an adaptive swarm strategy with dynamic local exploitation and global exploration.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79cc1f52-0fd0-48a4-82ef-adb9e87fd695", "metadata": {"aucs": [0.6594565641618879, 0.5585809039779229, 0.7396528129314988, 0.14130015460874001, 0.161239787529469, 0.15694656914410932, 0.1495658608390098, 0.18280542280075007, 0.18325486864771134, 0.2593478967660189, 0.041246625702633044, 9.999999999998899e-05, 0.04723926931128375, 0.32891771728430763, 0.05496979466705232, 0.0057853939430875245, 0.3590412342843713, 0.004176908029004167, 0.12081329321886847, 0.1329735936330224, 0.1258639361148094, 0.04301560056090781, 0.10266104655560393, 0.09523173464779155, 0.057458299585834705, 0.05600984039455437, 0.04603978255190666, 0.09151391224431249, 0.08874355369932296, 0.14226168933139738, 0.11638719866062952, 0.1146638584736811, 0.12773270789724978, 0.06862048801762177, 0.016296303700053416, 0.10765887847983335, 0.9971146896948477, 0.9949315315869507, 0.9978176931252873, 0.9980244325521848, 0.09999991576597389, 0.9968854064558058, 0.9972320987819742, 0.9976656757502812, 0.9924181718152312, 0.059752289889595356, 0.055667560537888905, 0.05568014248621944, 0.1806268192711541, 0.14561163288437162, 0.15056744849784076, 0.08920167848673932, 0.08900620589633212, 9.999999999998899e-05, 0.17297337089869957, 0.31198135452467424, 0.291863608998539, 0.19807922840980885, 0.24261845227972123, 0.3387808671862387, 0.11885264330559875, 0.12431576648806508, 0.14666736459208174, 0.14384805260796474, 0.14618415577813226, 0.1733186696508464, 0.16470326099633714, 9.999999999998899e-05, 0.1294933195091027, 0.14803676900837504, 0.1472744157198893, 0.15730883173641286, 0.1531772772166079, 0.016883451237602265, 0.05060660628406133, 0.14662716417760513, 0.13843099220348454, 0.14573296797615964, 0.1853610690331502, 0.031486031128971304, 0.13935451914013197, 9.999999999998899e-05, 0.007123037535430532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01827910283164058, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04441582842143743, 0.025982830095157672, 0.06936715590125964, 0.16688222609668502, 9.999999999998899e-05, 0.031847279447143606, 0.12009486460733665, 0.028500677227373816, 0.020062150348567953, 0.09131828653620055, 0.023877632400643778, 0.021859451574296473, 0.1206039063304597, 0.06468587452543684, 0.046062786829776825, 9.999999999998899e-05, 9.999999999998899e-05, 0.047483962034128524, 0.12135216608155186, 0.06098990186555531, 0.0414304331428883, 0.036942873319209646, 0.0057066241241719995, 0.00529010754728898, 0.07349407711587885, 9.999999999998899e-05, 0.07615899842452578, 0.4146704937968485, 0.43821339242662605, 0.43295531292079503, 0.1816880469887796, 0.4305113821878159, 0.20897245973750944, 0.4121730042416124, 0.4399706127441998, 0.40851808456242766, 0.06029305652297079, 0.07904887629363999, 0.023559086131001772, 0.08044108020970053, 0.10081686815649915, 0.073268936800021, 0.06864104345063604, 0.09198365483804705, 0.14205625242399633, 0.2849161700806532, 0.2015540551224264, 0.26017535780678014, 0.23247392621478635, 0.14113832311675778, 0.16415844934613255, 0.1898528032181338, 0.18698586529233685, 0.2770829245153167, 0.2862510778961701, 0.2866760079214774, 0.2239447783508628, 0.18940377893259008, 0.19644026708986762, 0.25918219920522856, 0.2752825594133028, 0.3152527392202835, 0.23168234766054507, 0.16202423196849214, 0.15899141130588013, 0.17256292097272907, 0.19127562069129045, 0.07961761588594019, 0.15490354629750946, 0.25325745423796475, 0.19738502743859587, 0.09405438071379046, 0.20628879791621957, 0.18286776016236506, 0.23642034042517612, 0.18973421279767744, 0.16422176497782692, 0.17584904614923502, 0.22834288534262515, 0.1709982500025743, 0.19290197336152404, 0.20982677219386237, 0.187911484113654, 0.1806138738944748, 0.20840090731216598, 0.2073039287557219, 0.2304570751287719, 0.2367380663354154, 0.18013124109150136, 0.1749935974218988, 0.7551512838091496, 0.15587664146714109, 0.16423156559048946, 0.12994850263362545, 0.1657343216562407, 0.1293238783841847, 0.18113235655409177, 0.1283882998243887, 0.6028550326976516, 0.07925224479464288, 0.1097479004712193, 0.34914887453945076, 0.08289967966648126, 0.20792780609178896, 0.16115572323573502, 0.15076880233543166, 0.11272824498403533, 0.1086591468971132, 0.1958427077704803, 0.19556946888124527, 0.22296409448414078, 0.1937702208700648, 0.16186895084720743, 0.20492365433845883, 0.21636422109524533, 0.18771269517603606, 0.2055664452630015, 0.08604075452426274, 0.04894760704540224, 0.08160057621466554, 0.08602663325854154, 0.05805475259528525, 0.07585242918657664, 0.10141265123715171, 0.07305405241247886, 0.07434758300385547]}, "mutation_prompt": null}
{"id": "b067a7af-124c-46e7-b4f2-bb8caa985b68", "solution": "import numpy as np\n\nclass ADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        \n        evaluations = self.population_size\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters\n                w = 0.5 + 0.5 * np.random.rand()  # Inertia weight\n                c1 = 1.5 + np.random.rand()  # Cognitive (local) coefficient\n                c2 = 1.5 + np.random.rand()  # Social (global) coefficient\n\n                # Update velocities and positions\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_value", "name": "ADSO", "description": "Adaptive Dynamic Swarm Optimization (ADSO) using an adaptive swarm strategy with dynamic local exploitation and global exploration.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79cc1f52-0fd0-48a4-82ef-adb9e87fd695", "metadata": {"aucs": [0.6594565641618879, 0.5585809039779229, 0.7396528129314988, 0.14130015460874001, 0.161239787529469, 0.15694656914410932, 0.1495658608390098, 0.18280542280075007, 0.18325486864771134, 0.2593478967660189, 0.041246625702633044, 9.999999999998899e-05, 0.04723926931128375, 0.32891771728430763, 0.05496979466705232, 0.0057853939430875245, 0.3590412342843713, 0.004176908029004167, 0.12081329321886847, 0.1329735936330224, 0.1258639361148094, 0.04301560056090781, 0.10266104655560393, 0.09523173464779155, 0.057458299585834705, 0.05600984039455437, 0.04603978255190666, 0.09151391224431249, 0.08874355369932296, 0.14226168933139738, 0.11638719866062952, 0.1146638584736811, 0.12773270789724978, 0.06862048801762177, 0.016296303700053416, 0.10765887847983335, 0.9971146896948477, 0.9949315315869507, 0.9978176931252873, 0.9980244325521848, 0.09999991576597389, 0.9968854064558058, 0.9972320987819742, 0.9976656757502812, 0.9924181718152312, 0.059752289889595356, 0.055667560537888905, 0.05568014248621944, 0.1806268192711541, 0.14561163288437162, 0.15056744849784076, 0.08920167848673932, 0.08900620589633212, 9.999999999998899e-05, 0.17297337089869957, 0.31198135452467424, 0.291863608998539, 0.19807922840980885, 0.24261845227972123, 0.3387808671862387, 0.11885264330559875, 0.12431576648806508, 0.14666736459208174, 0.14384805260796474, 0.14618415577813226, 0.1733186696508464, 0.16470326099633714, 9.999999999998899e-05, 0.1294933195091027, 0.14803676900837504, 0.1472744157198893, 0.15730883173641286, 0.1531772772166079, 0.016883451237602265, 0.05060660628406133, 0.14662716417760513, 0.13843099220348454, 0.14573296797615964, 0.1853610690331502, 0.031486031128971304, 0.13935451914013197, 9.999999999998899e-05, 0.007123037535430532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01827910283164058, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04441582842143743, 0.025982830095157672, 0.06936715590125964, 0.16688222609668502, 9.999999999998899e-05, 0.031847279447143606, 0.12009486460733665, 0.028500677227373816, 0.020062150348567953, 0.09131828653620055, 0.023877632400643778, 0.021859451574296473, 0.1206039063304597, 0.06468587452543684, 0.046062786829776825, 9.999999999998899e-05, 9.999999999998899e-05, 0.047483962034128524, 0.12135216608155186, 0.06098990186555531, 0.0414304331428883, 0.036942873319209646, 0.0057066241241719995, 0.00529010754728898, 0.07349407711587885, 9.999999999998899e-05, 0.07615899842452578, 0.4146704937968485, 0.43821339242662605, 0.43295531292079503, 0.1816880469887796, 0.4305113821878159, 0.20897245973750944, 0.4121730042416124, 0.4399706127441998, 0.40851808456242766, 0.06029305652297079, 0.07904887629363999, 0.023559086131001772, 0.08044108020970053, 0.10081686815649915, 0.073268936800021, 0.06864104345063604, 0.09198365483804705, 0.14205625242399633, 0.2849161700806532, 0.2015540551224264, 0.26017535780678014, 0.23247392621478635, 0.14113832311675778, 0.16415844934613255, 0.1898528032181338, 0.18698586529233685, 0.2770829245153167, 0.2862510778961701, 0.2866760079214774, 0.2239447783508628, 0.18940377893259008, 0.19644026708986762, 0.25918219920522856, 0.2752825594133028, 0.3152527392202835, 0.23168234766054507, 0.16202423196849214, 0.15899141130588013, 0.17256292097272907, 0.19127562069129045, 0.07961761588594019, 0.15490354629750946, 0.25325745423796475, 0.19738502743859587, 0.09405438071379046, 0.20628879791621957, 0.18286776016236506, 0.23642034042517612, 0.18973421279767744, 0.16422176497782692, 0.17584904614923502, 0.22834288534262515, 0.1709982500025743, 0.19290197336152404, 0.20982677219386237, 0.187911484113654, 0.1806138738944748, 0.20840090731216598, 0.2073039287557219, 0.2304570751287719, 0.2367380663354154, 0.18013124109150136, 0.1749935974218988, 0.7551512838091496, 0.15587664146714109, 0.16423156559048946, 0.12994850263362545, 0.1657343216562407, 0.1293238783841847, 0.18113235655409177, 0.1283882998243887, 0.6028550326976516, 0.07925224479464288, 0.1097479004712193, 0.34914887453945076, 0.08289967966648126, 0.20792780609178896, 0.16115572323573502, 0.15076880233543166, 0.11272824498403533, 0.1086591468971132, 0.1958427077704803, 0.19556946888124527, 0.22296409448414078, 0.1937702208700648, 0.16186895084720743, 0.20492365433845883, 0.21636422109524533, 0.18771269517603606, 0.2055664452630015, 0.08604075452426274, 0.04894760704540224, 0.08160057621466554, 0.08602663325854154, 0.05805475259528525, 0.07585242918657664, 0.10141265123715171, 0.07305405241247886, 0.07434758300385547]}, "mutation_prompt": null}
{"id": "364d10aa-fa08-4143-b7e6-835a13990613", "solution": "import numpy as np\n\nclass ADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        \n        evaluations = self.population_size\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters\n                w = 0.5 + 0.5 * np.random.rand()  # Inertia weight\n                c1 = 1.5 + np.random.rand()  # Cognitive (local) coefficient\n                c2 = 1.5 + np.random.rand()  # Social (global) coefficient\n\n                # Update velocities and positions\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_value", "name": "ADSO", "description": "Adaptive Dynamic Swarm Optimization (ADSO) using an adaptive swarm strategy with dynamic local exploitation and global exploration.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79cc1f52-0fd0-48a4-82ef-adb9e87fd695", "metadata": {"aucs": [0.6594565641618879, 0.5585809039779229, 0.7396528129314988, 0.14130015460874001, 0.161239787529469, 0.15694656914410932, 0.1495658608390098, 0.18280542280075007, 0.18325486864771134, 0.2593478967660189, 0.041246625702633044, 9.999999999998899e-05, 0.04723926931128375, 0.32891771728430763, 0.05496979466705232, 0.0057853939430875245, 0.3590412342843713, 0.004176908029004167, 0.12081329321886847, 0.1329735936330224, 0.1258639361148094, 0.04301560056090781, 0.10266104655560393, 0.09523173464779155, 0.057458299585834705, 0.05600984039455437, 0.04603978255190666, 0.09151391224431249, 0.08874355369932296, 0.14226168933139738, 0.11638719866062952, 0.1146638584736811, 0.12773270789724978, 0.06862048801762177, 0.016296303700053416, 0.10765887847983335, 0.9971146896948477, 0.9949315315869507, 0.9978176931252873, 0.9980244325521848, 0.09999991576597389, 0.9968854064558058, 0.9972320987819742, 0.9976656757502812, 0.9924181718152312, 0.059752289889595356, 0.055667560537888905, 0.05568014248621944, 0.1806268192711541, 0.14561163288437162, 0.15056744849784076, 0.08920167848673932, 0.08900620589633212, 9.999999999998899e-05, 0.17297337089869957, 0.31198135452467424, 0.291863608998539, 0.19807922840980885, 0.24261845227972123, 0.3387808671862387, 0.11885264330559875, 0.12431576648806508, 0.14666736459208174, 0.14384805260796474, 0.14618415577813226, 0.1733186696508464, 0.16470326099633714, 9.999999999998899e-05, 0.1294933195091027, 0.14803676900837504, 0.1472744157198893, 0.15730883173641286, 0.1531772772166079, 0.016883451237602265, 0.05060660628406133, 0.14662716417760513, 0.13843099220348454, 0.14573296797615964, 0.1853610690331502, 0.031486031128971304, 0.13935451914013197, 9.999999999998899e-05, 0.007123037535430532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01827910283164058, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04441582842143743, 0.025982830095157672, 0.06936715590125964, 0.16688222609668502, 9.999999999998899e-05, 0.031847279447143606, 0.12009486460733665, 0.028500677227373816, 0.020062150348567953, 0.09131828653620055, 0.023877632400643778, 0.021859451574296473, 0.1206039063304597, 0.06468587452543684, 0.046062786829776825, 9.999999999998899e-05, 9.999999999998899e-05, 0.047483962034128524, 0.12135216608155186, 0.06098990186555531, 0.0414304331428883, 0.036942873319209646, 0.0057066241241719995, 0.00529010754728898, 0.07349407711587885, 9.999999999998899e-05, 0.07615899842452578, 0.4146704937968485, 0.43821339242662605, 0.43295531292079503, 0.1816880469887796, 0.4305113821878159, 0.20897245973750944, 0.4121730042416124, 0.4399706127441998, 0.40851808456242766, 0.06029305652297079, 0.07904887629363999, 0.023559086131001772, 0.08044108020970053, 0.10081686815649915, 0.073268936800021, 0.06864104345063604, 0.09198365483804705, 0.14205625242399633, 0.2849161700806532, 0.2015540551224264, 0.26017535780678014, 0.23247392621478635, 0.14113832311675778, 0.16415844934613255, 0.1898528032181338, 0.18698586529233685, 0.2770829245153167, 0.2862510778961701, 0.2866760079214774, 0.2239447783508628, 0.18940377893259008, 0.19644026708986762, 0.25918219920522856, 0.2752825594133028, 0.3152527392202835, 0.23168234766054507, 0.16202423196849214, 0.15899141130588013, 0.17256292097272907, 0.19127562069129045, 0.07961761588594019, 0.15490354629750946, 0.25325745423796475, 0.19738502743859587, 0.09405438071379046, 0.20628879791621957, 0.18286776016236506, 0.23642034042517612, 0.18973421279767744, 0.16422176497782692, 0.17584904614923502, 0.22834288534262515, 0.1709982500025743, 0.19290197336152404, 0.20982677219386237, 0.187911484113654, 0.1806138738944748, 0.20840090731216598, 0.2073039287557219, 0.2304570751287719, 0.2367380663354154, 0.18013124109150136, 0.1749935974218988, 0.7551512838091496, 0.15587664146714109, 0.16423156559048946, 0.12994850263362545, 0.1657343216562407, 0.1293238783841847, 0.18113235655409177, 0.1283882998243887, 0.6028550326976516, 0.07925224479464288, 0.1097479004712193, 0.34914887453945076, 0.08289967966648126, 0.20792780609178896, 0.16115572323573502, 0.15076880233543166, 0.11272824498403533, 0.1086591468971132, 0.1958427077704803, 0.19556946888124527, 0.22296409448414078, 0.1937702208700648, 0.16186895084720743, 0.20492365433845883, 0.21636422109524533, 0.18771269517603606, 0.2055664452630015, 0.08604075452426274, 0.04894760704540224, 0.08160057621466554, 0.08602663325854154, 0.05805475259528525, 0.07585242918657664, 0.10141265123715171, 0.07305405241247886, 0.07434758300385547]}, "mutation_prompt": null}
{"id": "6c72e12f-2dfd-47e9-ae8e-dae329906288", "solution": "import numpy as np\n\nclass ADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        \n        evaluations = self.population_size\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters\n                w = 0.5 + 0.5 * np.random.rand()  # Inertia weight\n                c1 = 1.5 + np.random.rand()  # Cognitive (local) coefficient\n                c2 = 1.5 + np.random.rand()  # Social (global) coefficient\n\n                # Update velocities and positions\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_value", "name": "ADSO", "description": "Adaptive Dynamic Swarm Optimization (ADSO) using an adaptive swarm strategy with dynamic local exploitation and global exploration.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79cc1f52-0fd0-48a4-82ef-adb9e87fd695", "metadata": {"aucs": [0.6594565641618879, 0.5585809039779229, 0.7396528129314988, 0.14130015460874001, 0.161239787529469, 0.15694656914410932, 0.1495658608390098, 0.18280542280075007, 0.18325486864771134, 0.2593478967660189, 0.041246625702633044, 9.999999999998899e-05, 0.04723926931128375, 0.32891771728430763, 0.05496979466705232, 0.0057853939430875245, 0.3590412342843713, 0.004176908029004167, 0.12081329321886847, 0.1329735936330224, 0.1258639361148094, 0.04301560056090781, 0.10266104655560393, 0.09523173464779155, 0.057458299585834705, 0.05600984039455437, 0.04603978255190666, 0.09151391224431249, 0.08874355369932296, 0.14226168933139738, 0.11638719866062952, 0.1146638584736811, 0.12773270789724978, 0.06862048801762177, 0.016296303700053416, 0.10765887847983335, 0.9971146896948477, 0.9949315315869507, 0.9978176931252873, 0.9980244325521848, 0.09999991576597389, 0.9968854064558058, 0.9972320987819742, 0.9976656757502812, 0.9924181718152312, 0.059752289889595356, 0.055667560537888905, 0.05568014248621944, 0.1806268192711541, 0.14561163288437162, 0.15056744849784076, 0.08920167848673932, 0.08900620589633212, 9.999999999998899e-05, 0.17297337089869957, 0.31198135452467424, 0.291863608998539, 0.19807922840980885, 0.24261845227972123, 0.3387808671862387, 0.11885264330559875, 0.12431576648806508, 0.14666736459208174, 0.14384805260796474, 0.14618415577813226, 0.1733186696508464, 0.16470326099633714, 9.999999999998899e-05, 0.1294933195091027, 0.14803676900837504, 0.1472744157198893, 0.15730883173641286, 0.1531772772166079, 0.016883451237602265, 0.05060660628406133, 0.14662716417760513, 0.13843099220348454, 0.14573296797615964, 0.1853610690331502, 0.031486031128971304, 0.13935451914013197, 9.999999999998899e-05, 0.007123037535430532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01827910283164058, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04441582842143743, 0.025982830095157672, 0.06936715590125964, 0.16688222609668502, 9.999999999998899e-05, 0.031847279447143606, 0.12009486460733665, 0.028500677227373816, 0.020062150348567953, 0.09131828653620055, 0.023877632400643778, 0.021859451574296473, 0.1206039063304597, 0.06468587452543684, 0.046062786829776825, 9.999999999998899e-05, 9.999999999998899e-05, 0.047483962034128524, 0.12135216608155186, 0.06098990186555531, 0.0414304331428883, 0.036942873319209646, 0.0057066241241719995, 0.00529010754728898, 0.07349407711587885, 9.999999999998899e-05, 0.07615899842452578, 0.4146704937968485, 0.43821339242662605, 0.43295531292079503, 0.1816880469887796, 0.4305113821878159, 0.20897245973750944, 0.4121730042416124, 0.4399706127441998, 0.40851808456242766, 0.06029305652297079, 0.07904887629363999, 0.023559086131001772, 0.08044108020970053, 0.10081686815649915, 0.073268936800021, 0.06864104345063604, 0.09198365483804705, 0.14205625242399633, 0.2849161700806532, 0.2015540551224264, 0.26017535780678014, 0.23247392621478635, 0.14113832311675778, 0.16415844934613255, 0.1898528032181338, 0.18698586529233685, 0.2770829245153167, 0.2862510778961701, 0.2866760079214774, 0.2239447783508628, 0.18940377893259008, 0.19644026708986762, 0.25918219920522856, 0.2752825594133028, 0.3152527392202835, 0.23168234766054507, 0.16202423196849214, 0.15899141130588013, 0.17256292097272907, 0.19127562069129045, 0.07961761588594019, 0.15490354629750946, 0.25325745423796475, 0.19738502743859587, 0.09405438071379046, 0.20628879791621957, 0.18286776016236506, 0.23642034042517612, 0.18973421279767744, 0.16422176497782692, 0.17584904614923502, 0.22834288534262515, 0.1709982500025743, 0.19290197336152404, 0.20982677219386237, 0.187911484113654, 0.1806138738944748, 0.20840090731216598, 0.2073039287557219, 0.2304570751287719, 0.2367380663354154, 0.18013124109150136, 0.1749935974218988, 0.7551512838091496, 0.15587664146714109, 0.16423156559048946, 0.12994850263362545, 0.1657343216562407, 0.1293238783841847, 0.18113235655409177, 0.1283882998243887, 0.6028550326976516, 0.07925224479464288, 0.1097479004712193, 0.34914887453945076, 0.08289967966648126, 0.20792780609178896, 0.16115572323573502, 0.15076880233543166, 0.11272824498403533, 0.1086591468971132, 0.1958427077704803, 0.19556946888124527, 0.22296409448414078, 0.1937702208700648, 0.16186895084720743, 0.20492365433845883, 0.21636422109524533, 0.18771269517603606, 0.2055664452630015, 0.08604075452426274, 0.04894760704540224, 0.08160057621466554, 0.08602663325854154, 0.05805475259528525, 0.07585242918657664, 0.10141265123715171, 0.07305405241247886, 0.07434758300385547]}, "mutation_prompt": null}
{"id": "149fc79a-05b1-4814-b09c-f5c0a80d898c", "solution": "import numpy as np\n\nclass ADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        \n        evaluations = self.population_size\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters\n                w = 0.5 + 0.5 * np.random.rand()  # Inertia weight\n                c1 = 1.5 + np.random.rand()  # Cognitive (local) coefficient\n                c2 = 1.5 + np.random.rand()  # Social (global) coefficient\n\n                # Update velocities and positions\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_value", "name": "ADSO", "description": "Adaptive Dynamic Swarm Optimization (ADSO) using an adaptive swarm strategy with dynamic local exploitation and global exploration.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79cc1f52-0fd0-48a4-82ef-adb9e87fd695", "metadata": {"aucs": [0.6594565641618879, 0.5585809039779229, 0.7396528129314988, 0.14130015460874001, 0.161239787529469, 0.15694656914410932, 0.1495658608390098, 0.18280542280075007, 0.18325486864771134, 0.2593478967660189, 0.041246625702633044, 9.999999999998899e-05, 0.04723926931128375, 0.32891771728430763, 0.05496979466705232, 0.0057853939430875245, 0.3590412342843713, 0.004176908029004167, 0.12081329321886847, 0.1329735936330224, 0.1258639361148094, 0.04301560056090781, 0.10266104655560393, 0.09523173464779155, 0.057458299585834705, 0.05600984039455437, 0.04603978255190666, 0.09151391224431249, 0.08874355369932296, 0.14226168933139738, 0.11638719866062952, 0.1146638584736811, 0.12773270789724978, 0.06862048801762177, 0.016296303700053416, 0.10765887847983335, 0.9971146896948477, 0.9949315315869507, 0.9978176931252873, 0.9980244325521848, 0.09999991576597389, 0.9968854064558058, 0.9972320987819742, 0.9976656757502812, 0.9924181718152312, 0.059752289889595356, 0.055667560537888905, 0.05568014248621944, 0.1806268192711541, 0.14561163288437162, 0.15056744849784076, 0.08920167848673932, 0.08900620589633212, 9.999999999998899e-05, 0.17297337089869957, 0.31198135452467424, 0.291863608998539, 0.19807922840980885, 0.24261845227972123, 0.3387808671862387, 0.11885264330559875, 0.12431576648806508, 0.14666736459208174, 0.14384805260796474, 0.14618415577813226, 0.1733186696508464, 0.16470326099633714, 9.999999999998899e-05, 0.1294933195091027, 0.14803676900837504, 0.1472744157198893, 0.15730883173641286, 0.1531772772166079, 0.016883451237602265, 0.05060660628406133, 0.14662716417760513, 0.13843099220348454, 0.14573296797615964, 0.1853610690331502, 0.031486031128971304, 0.13935451914013197, 9.999999999998899e-05, 0.007123037535430532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01827910283164058, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04441582842143743, 0.025982830095157672, 0.06936715590125964, 0.16688222609668502, 9.999999999998899e-05, 0.031847279447143606, 0.12009486460733665, 0.028500677227373816, 0.020062150348567953, 0.09131828653620055, 0.023877632400643778, 0.021859451574296473, 0.1206039063304597, 0.06468587452543684, 0.046062786829776825, 9.999999999998899e-05, 9.999999999998899e-05, 0.047483962034128524, 0.12135216608155186, 0.06098990186555531, 0.0414304331428883, 0.036942873319209646, 0.0057066241241719995, 0.00529010754728898, 0.07349407711587885, 9.999999999998899e-05, 0.07615899842452578, 0.4146704937968485, 0.43821339242662605, 0.43295531292079503, 0.1816880469887796, 0.4305113821878159, 0.20897245973750944, 0.4121730042416124, 0.4399706127441998, 0.40851808456242766, 0.06029305652297079, 0.07904887629363999, 0.023559086131001772, 0.08044108020970053, 0.10081686815649915, 0.073268936800021, 0.06864104345063604, 0.09198365483804705, 0.14205625242399633, 0.2849161700806532, 0.2015540551224264, 0.26017535780678014, 0.23247392621478635, 0.14113832311675778, 0.16415844934613255, 0.1898528032181338, 0.18698586529233685, 0.2770829245153167, 0.2862510778961701, 0.2866760079214774, 0.2239447783508628, 0.18940377893259008, 0.19644026708986762, 0.25918219920522856, 0.2752825594133028, 0.3152527392202835, 0.23168234766054507, 0.16202423196849214, 0.15899141130588013, 0.17256292097272907, 0.19127562069129045, 0.07961761588594019, 0.15490354629750946, 0.25325745423796475, 0.19738502743859587, 0.09405438071379046, 0.20628879791621957, 0.18286776016236506, 0.23642034042517612, 0.18973421279767744, 0.16422176497782692, 0.17584904614923502, 0.22834288534262515, 0.1709982500025743, 0.19290197336152404, 0.20982677219386237, 0.187911484113654, 0.1806138738944748, 0.20840090731216598, 0.2073039287557219, 0.2304570751287719, 0.2367380663354154, 0.18013124109150136, 0.1749935974218988, 0.7551512838091496, 0.15587664146714109, 0.16423156559048946, 0.12994850263362545, 0.1657343216562407, 0.1293238783841847, 0.18113235655409177, 0.1283882998243887, 0.6028550326976516, 0.07925224479464288, 0.1097479004712193, 0.34914887453945076, 0.08289967966648126, 0.20792780609178896, 0.16115572323573502, 0.15076880233543166, 0.11272824498403533, 0.1086591468971132, 0.1958427077704803, 0.19556946888124527, 0.22296409448414078, 0.1937702208700648, 0.16186895084720743, 0.20492365433845883, 0.21636422109524533, 0.18771269517603606, 0.2055664452630015, 0.08604075452426274, 0.04894760704540224, 0.08160057621466554, 0.08602663325854154, 0.05805475259528525, 0.07585242918657664, 0.10141265123715171, 0.07305405241247886, 0.07434758300385547]}, "mutation_prompt": null}
{"id": "97ce27df-22d9-48e2-9399-4e11e3277917", "solution": "import numpy as np\n\nclass ADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        \n        evaluations = self.population_size\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters\n                w = 0.5 + 0.5 * np.random.rand()  # Inertia weight\n                c1 = 1.5 + np.random.rand()  # Cognitive (local) coefficient\n                c2 = 1.5 + np.random.rand()  # Social (global) coefficient\n\n                # Update velocities and positions\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_value", "name": "ADSO", "description": "Adaptive Dynamic Swarm Optimization (ADSO) using an adaptive swarm strategy with dynamic local exploitation and global exploration.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79cc1f52-0fd0-48a4-82ef-adb9e87fd695", "metadata": {"aucs": [0.6594565641618879, 0.5585809039779229, 0.7396528129314988, 0.14130015460874001, 0.161239787529469, 0.15694656914410932, 0.1495658608390098, 0.18280542280075007, 0.18325486864771134, 0.2593478967660189, 0.041246625702633044, 9.999999999998899e-05, 0.04723926931128375, 0.32891771728430763, 0.05496979466705232, 0.0057853939430875245, 0.3590412342843713, 0.004176908029004167, 0.12081329321886847, 0.1329735936330224, 0.1258639361148094, 0.04301560056090781, 0.10266104655560393, 0.09523173464779155, 0.057458299585834705, 0.05600984039455437, 0.04603978255190666, 0.09151391224431249, 0.08874355369932296, 0.14226168933139738, 0.11638719866062952, 0.1146638584736811, 0.12773270789724978, 0.06862048801762177, 0.016296303700053416, 0.10765887847983335, 0.9971146896948477, 0.9949315315869507, 0.9978176931252873, 0.9980244325521848, 0.09999991576597389, 0.9968854064558058, 0.9972320987819742, 0.9976656757502812, 0.9924181718152312, 0.059752289889595356, 0.055667560537888905, 0.05568014248621944, 0.1806268192711541, 0.14561163288437162, 0.15056744849784076, 0.08920167848673932, 0.08900620589633212, 9.999999999998899e-05, 0.17297337089869957, 0.31198135452467424, 0.291863608998539, 0.19807922840980885, 0.24261845227972123, 0.3387808671862387, 0.11885264330559875, 0.12431576648806508, 0.14666736459208174, 0.14384805260796474, 0.14618415577813226, 0.1733186696508464, 0.16470326099633714, 9.999999999998899e-05, 0.1294933195091027, 0.14803676900837504, 0.1472744157198893, 0.15730883173641286, 0.1531772772166079, 0.016883451237602265, 0.05060660628406133, 0.14662716417760513, 0.13843099220348454, 0.14573296797615964, 0.1853610690331502, 0.031486031128971304, 0.13935451914013197, 9.999999999998899e-05, 0.007123037535430532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01827910283164058, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04441582842143743, 0.025982830095157672, 0.06936715590125964, 0.16688222609668502, 9.999999999998899e-05, 0.031847279447143606, 0.12009486460733665, 0.028500677227373816, 0.020062150348567953, 0.09131828653620055, 0.023877632400643778, 0.021859451574296473, 0.1206039063304597, 0.06468587452543684, 0.046062786829776825, 9.999999999998899e-05, 9.999999999998899e-05, 0.047483962034128524, 0.12135216608155186, 0.06098990186555531, 0.0414304331428883, 0.036942873319209646, 0.0057066241241719995, 0.00529010754728898, 0.07349407711587885, 9.999999999998899e-05, 0.07615899842452578, 0.4146704937968485, 0.43821339242662605, 0.43295531292079503, 0.1816880469887796, 0.4305113821878159, 0.20897245973750944, 0.4121730042416124, 0.4399706127441998, 0.40851808456242766, 0.06029305652297079, 0.07904887629363999, 0.023559086131001772, 0.08044108020970053, 0.10081686815649915, 0.073268936800021, 0.06864104345063604, 0.09198365483804705, 0.14205625242399633, 0.2849161700806532, 0.2015540551224264, 0.26017535780678014, 0.23247392621478635, 0.14113832311675778, 0.16415844934613255, 0.1898528032181338, 0.18698586529233685, 0.2770829245153167, 0.2862510778961701, 0.2866760079214774, 0.2239447783508628, 0.18940377893259008, 0.19644026708986762, 0.25918219920522856, 0.2752825594133028, 0.3152527392202835, 0.23168234766054507, 0.16202423196849214, 0.15899141130588013, 0.17256292097272907, 0.19127562069129045, 0.07961761588594019, 0.15490354629750946, 0.25325745423796475, 0.19738502743859587, 0.09405438071379046, 0.20628879791621957, 0.18286776016236506, 0.23642034042517612, 0.18973421279767744, 0.16422176497782692, 0.17584904614923502, 0.22834288534262515, 0.1709982500025743, 0.19290197336152404, 0.20982677219386237, 0.187911484113654, 0.1806138738944748, 0.20840090731216598, 0.2073039287557219, 0.2304570751287719, 0.2367380663354154, 0.18013124109150136, 0.1749935974218988, 0.7551512838091496, 0.15587664146714109, 0.16423156559048946, 0.12994850263362545, 0.1657343216562407, 0.1293238783841847, 0.18113235655409177, 0.1283882998243887, 0.6028550326976516, 0.07925224479464288, 0.1097479004712193, 0.34914887453945076, 0.08289967966648126, 0.20792780609178896, 0.16115572323573502, 0.15076880233543166, 0.11272824498403533, 0.1086591468971132, 0.1958427077704803, 0.19556946888124527, 0.22296409448414078, 0.1937702208700648, 0.16186895084720743, 0.20492365433845883, 0.21636422109524533, 0.18771269517603606, 0.2055664452630015, 0.08604075452426274, 0.04894760704540224, 0.08160057621466554, 0.08602663325854154, 0.05805475259528525, 0.07585242918657664, 0.10141265123715171, 0.07305405241247886, 0.07434758300385547]}, "mutation_prompt": null}
{"id": "55ca9671-740a-4268-be10-63ebf3d2f1b4", "solution": "import numpy as np\n\nclass ADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        \n        evaluations = self.population_size\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters\n                w = 0.5 + 0.5 * np.random.rand()  # Inertia weight\n                c1 = 1.5 + np.random.rand()  # Cognitive (local) coefficient\n                c2 = 1.5 + np.random.rand()  # Social (global) coefficient\n\n                # Update velocities and positions\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_value", "name": "ADSO", "description": "Adaptive Dynamic Swarm Optimization (ADSO) using an adaptive swarm strategy with dynamic local exploitation and global exploration.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79cc1f52-0fd0-48a4-82ef-adb9e87fd695", "metadata": {"aucs": [0.6594565641618879, 0.5585809039779229, 0.7396528129314988, 0.14130015460874001, 0.161239787529469, 0.15694656914410932, 0.1495658608390098, 0.18280542280075007, 0.18325486864771134, 0.2593478967660189, 0.041246625702633044, 9.999999999998899e-05, 0.04723926931128375, 0.32891771728430763, 0.05496979466705232, 0.0057853939430875245, 0.3590412342843713, 0.004176908029004167, 0.12081329321886847, 0.1329735936330224, 0.1258639361148094, 0.04301560056090781, 0.10266104655560393, 0.09523173464779155, 0.057458299585834705, 0.05600984039455437, 0.04603978255190666, 0.09151391224431249, 0.08874355369932296, 0.14226168933139738, 0.11638719866062952, 0.1146638584736811, 0.12773270789724978, 0.06862048801762177, 0.016296303700053416, 0.10765887847983335, 0.9971146896948477, 0.9949315315869507, 0.9978176931252873, 0.9980244325521848, 0.09999991576597389, 0.9968854064558058, 0.9972320987819742, 0.9976656757502812, 0.9924181718152312, 0.059752289889595356, 0.055667560537888905, 0.05568014248621944, 0.1806268192711541, 0.14561163288437162, 0.15056744849784076, 0.08920167848673932, 0.08900620589633212, 9.999999999998899e-05, 0.17297337089869957, 0.31198135452467424, 0.291863608998539, 0.19807922840980885, 0.24261845227972123, 0.3387808671862387, 0.11885264330559875, 0.12431576648806508, 0.14666736459208174, 0.14384805260796474, 0.14618415577813226, 0.1733186696508464, 0.16470326099633714, 9.999999999998899e-05, 0.1294933195091027, 0.14803676900837504, 0.1472744157198893, 0.15730883173641286, 0.1531772772166079, 0.016883451237602265, 0.05060660628406133, 0.14662716417760513, 0.13843099220348454, 0.14573296797615964, 0.1853610690331502, 0.031486031128971304, 0.13935451914013197, 9.999999999998899e-05, 0.007123037535430532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01827910283164058, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04441582842143743, 0.025982830095157672, 0.06936715590125964, 0.16688222609668502, 9.999999999998899e-05, 0.031847279447143606, 0.12009486460733665, 0.028500677227373816, 0.020062150348567953, 0.09131828653620055, 0.023877632400643778, 0.021859451574296473, 0.1206039063304597, 0.06468587452543684, 0.046062786829776825, 9.999999999998899e-05, 9.999999999998899e-05, 0.047483962034128524, 0.12135216608155186, 0.06098990186555531, 0.0414304331428883, 0.036942873319209646, 0.0057066241241719995, 0.00529010754728898, 0.07349407711587885, 9.999999999998899e-05, 0.07615899842452578, 0.4146704937968485, 0.43821339242662605, 0.43295531292079503, 0.1816880469887796, 0.4305113821878159, 0.20897245973750944, 0.4121730042416124, 0.4399706127441998, 0.40851808456242766, 0.06029305652297079, 0.07904887629363999, 0.023559086131001772, 0.08044108020970053, 0.10081686815649915, 0.073268936800021, 0.06864104345063604, 0.09198365483804705, 0.14205625242399633, 0.2849161700806532, 0.2015540551224264, 0.26017535780678014, 0.23247392621478635, 0.14113832311675778, 0.16415844934613255, 0.1898528032181338, 0.18698586529233685, 0.2770829245153167, 0.2862510778961701, 0.2866760079214774, 0.2239447783508628, 0.18940377893259008, 0.19644026708986762, 0.25918219920522856, 0.2752825594133028, 0.3152527392202835, 0.23168234766054507, 0.16202423196849214, 0.15899141130588013, 0.17256292097272907, 0.19127562069129045, 0.07961761588594019, 0.15490354629750946, 0.25325745423796475, 0.19738502743859587, 0.09405438071379046, 0.20628879791621957, 0.18286776016236506, 0.23642034042517612, 0.18973421279767744, 0.16422176497782692, 0.17584904614923502, 0.22834288534262515, 0.1709982500025743, 0.19290197336152404, 0.20982677219386237, 0.187911484113654, 0.1806138738944748, 0.20840090731216598, 0.2073039287557219, 0.2304570751287719, 0.2367380663354154, 0.18013124109150136, 0.1749935974218988, 0.7551512838091496, 0.15587664146714109, 0.16423156559048946, 0.12994850263362545, 0.1657343216562407, 0.1293238783841847, 0.18113235655409177, 0.1283882998243887, 0.6028550326976516, 0.07925224479464288, 0.1097479004712193, 0.34914887453945076, 0.08289967966648126, 0.20792780609178896, 0.16115572323573502, 0.15076880233543166, 0.11272824498403533, 0.1086591468971132, 0.1958427077704803, 0.19556946888124527, 0.22296409448414078, 0.1937702208700648, 0.16186895084720743, 0.20492365433845883, 0.21636422109524533, 0.18771269517603606, 0.2055664452630015, 0.08604075452426274, 0.04894760704540224, 0.08160057621466554, 0.08602663325854154, 0.05805475259528525, 0.07585242918657664, 0.10141265123715171, 0.07305405241247886, 0.07434758300385547]}, "mutation_prompt": null}
{"id": "f1582d1b-44ef-4c0f-bf97-9526b501995a", "solution": "import numpy as np\n\nclass EADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.success_history = np.zeros(self.population_size)\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        \n        evaluations = self.population_size\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters\n                w = 0.5 + 0.5 * np.random.rand()  # Inertia weight\n                c1 = 1.5 + np.random.rand()  # Cognitive coefficient\n                c2 = 1.5 + np.random.rand()  # Social coefficient\n                learning_factor = 1 + self.success_history[i] / (self.iteration + 1)\n\n                # Update velocities and positions\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]) * learning_factor)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n                    self.success_history[i] += 1\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EADSO", "description": "Enhanced Adaptive Dynamic Swarm Optimization (EADSO) improves local search by introducing a learning factor based on success history.", "configspace": "", "generation": 10, "fitness": 0.16470034909136938, "feedback": "The algorithm EADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.16 with standard deviation 0.19.", "error": "", "parent_id": "79cc1f52-0fd0-48a4-82ef-adb9e87fd695", "metadata": {"aucs": [0.5164019590650417, 0.4921047907961609, 0.4289375206623822, 0.16093596398891563, 0.16119285631838154, 0.19088950740221122, 0.11683978279906093, 0.516309706421634, 0.14962647079998082, 0.22042167033742976, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.1540270028620504, 0.06629460505575624, 9.999999999998899e-05, 0.051452376209482065, 0.056167949885411295, 0.10526294683379289, 0.11095655777792379, 0.1087018391835689, 0.07202523775485914, 0.06584336216492503, 0.07532382087944534, 0.09263106763440865, 0.025832324854650368, 0.02623335591813991, 0.04765766014133621, 0.09950793210803399, 0.1136679145723345, 0.10544299389374467, 0.04231504357455762, 0.10163690083526467, 0.10005555483954998, 0.013955413474264766, 0.029530074309490395, 0.9971030084058777, 0.9969682591538415, 0.9977396445371893, 0.9981019623948603, 0.10000206902771847, 0.9968894136887736, 0.9979136965168252, 0.998066178773749, 0.9968747050784563, 0.028354572632647845, 0.05941216336244581, 0.05576679628605763, 0.14862272209883465, 0.13690593813851082, 0.1469570356155716, 0.0837841315142075, 0.05133538625160727, 9.999999999998899e-05, 0.17174076586783926, 0.22510493386778319, 0.20498599635518056, 0.28015978418882637, 0.3138179190706901, 0.18993953875224834, 0.06923886928899248, 0.16960034715066064, 0.22207922005529146, 0.08860807411435434, 0.15554676602777795, 0.1454768839814765, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.15623346996068666, 0.13566690406301551, 0.17550427593862095, 0.13754515225511532, 0.010121756291134099, 0.05133577455381455, 0.12716068542113568, 0.12257054288274793, 0.12151779534082652, 0.13967891039944247, 0.028770779303236127, 0.1379164428150289, 9.999999999998899e-05, 0.02592885508952747, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04675211694446957, 0.05277324869106359, 0.08630215880697378, 0.006596985166620661, 0.02015379702426523, 0.056788722327073105, 0.042615256861423756, 0.028391179869274086, 9.999999999998899e-05, 9.999999999998899e-05, 0.031072284718386745, 0.0705753918146782, 0.051748409022541075, 0.021989751554598702, 9.999999999998899e-05, 9.999999999998899e-05, 0.03825594493224094, 9.999999999998899e-05, 0.03608131249491797, 0.03875343362310146, 0.03575346255759082, 0.005194684634735269, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.42240710273990745, 0.3922565272091817, 0.4503496067542331, 0.16808666614092949, 0.20806974892310393, 0.20533905850429857, 0.4243588361999979, 0.41825238311722623, 0.3936156393972069, 0.11606447852273227, 0.10095303653031384, 0.030273588827736786, 0.08635680659556288, 0.10759005263177746, 0.09135421685441647, 0.05906218096931393, 0.11722068266033547, 0.08695257827611536, 0.1428487983110508, 0.16633429483529305, 0.14438547835850601, 0.2515417806925492, 0.20143297485083478, 0.15582941729859578, 0.1897473089885665, 0.2866594606441507, 0.26775647686752846, 0.1461433166025805, 0.23683402481092897, 0.2795845061436947, 0.19239491684237253, 0.13904355267385216, 0.17118959212052365, 0.24447921018999685, 0.1728929684250745, 0.15437638049014857, 0.177008495633729, 0.1603683752766223, 0.06477662978799159, 0.19323069266584514, 0.10578378898473217, 0.1807960780226291, 0.2064965932515539, 0.20978311402305172, 0.09410167209449627, 0.18971572816467674, 0.1775629862073661, 0.2311810386438944, 0.18619157719515433, 0.14370696153035878, 0.2410030850727759, 0.19622652424185494, 0.20364557120948035, 0.17846099311768682, 0.21170442625560437, 0.21189054479814962, 0.17980352478051032, 0.18484646373844626, 0.1985029916954305, 0.17420304237893613, 0.1825129716934334, 0.19057196450808955, 0.20057259115084436, 0.18517641899454418, 0.16278986165717013, 0.17051536488964902, 0.5301800625353061, 0.23493566090104334, 0.09495795988764189, 0.15013879370015526, 0.12776512755376457, 0.12662762386238446, 0.11843304340458327, 0.10868018474286056, 0.20889037633176177, 0.08285187418785644, 0.20887163916704343, 0.19805499906212443, 0.16286083097383985, 0.10756519271909548, 0.10949392133529268, 0.19524716843874035, 0.19203598816062784, 0.1975265326301947, 0.18882039361851766, 0.18296533670584836, 0.19546365726856074, 0.20996738128914205, 0.1880189846013991, 0.18858574534840644, 0.08378204744597861, 0.08429066817866748, 0.10401644030862589, 0.0789095206664766, 0.07331109883526954, 0.07631858785714063, 0.0985152060729011, 0.0735540286957963, 0.09084317467262304]}, "mutation_prompt": null}
{"id": "0da325d2-62c0-4e81-ae2b-9cc41855735e", "solution": "import numpy as np\n\nclass ADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        \n        evaluations = self.population_size\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters\n                w = 0.5 + 0.5 * np.random.rand()  # Inertia weight\n                c1 = 1.5 + np.random.rand()  # Cognitive (local) coefficient\n                c2 = 1.5 + np.random.rand()  # Social (global) coefficient\n\n                # Update velocities and positions\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_value", "name": "ADSO", "description": "Adaptive Dynamic Swarm Optimization (ADSO) using an adaptive swarm strategy with dynamic local exploitation and global exploration.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79cc1f52-0fd0-48a4-82ef-adb9e87fd695", "metadata": {"aucs": [0.6594565641618879, 0.5585809039779229, 0.7396528129314988, 0.14130015460874001, 0.161239787529469, 0.15694656914410932, 0.1495658608390098, 0.18280542280075007, 0.18325486864771134, 0.2593478967660189, 0.041246625702633044, 9.999999999998899e-05, 0.04723926931128375, 0.32891771728430763, 0.05496979466705232, 0.0057853939430875245, 0.3590412342843713, 0.004176908029004167, 0.12081329321886847, 0.1329735936330224, 0.1258639361148094, 0.04301560056090781, 0.10266104655560393, 0.09523173464779155, 0.057458299585834705, 0.05600984039455437, 0.04603978255190666, 0.09151391224431249, 0.08874355369932296, 0.14226168933139738, 0.11638719866062952, 0.1146638584736811, 0.12773270789724978, 0.06862048801762177, 0.016296303700053416, 0.10765887847983335, 0.9971146896948477, 0.9949315315869507, 0.9978176931252873, 0.9980244325521848, 0.09999991576597389, 0.9968854064558058, 0.9972320987819742, 0.9976656757502812, 0.9924181718152312, 0.059752289889595356, 0.055667560537888905, 0.05568014248621944, 0.1806268192711541, 0.14561163288437162, 0.15056744849784076, 0.08920167848673932, 0.08900620589633212, 9.999999999998899e-05, 0.17297337089869957, 0.31198135452467424, 0.291863608998539, 0.19807922840980885, 0.24261845227972123, 0.3387808671862387, 0.11885264330559875, 0.12431576648806508, 0.14666736459208174, 0.14384805260796474, 0.14618415577813226, 0.1733186696508464, 0.16470326099633714, 9.999999999998899e-05, 0.1294933195091027, 0.14803676900837504, 0.1472744157198893, 0.15730883173641286, 0.1531772772166079, 0.016883451237602265, 0.05060660628406133, 0.14662716417760513, 0.13843099220348454, 0.14573296797615964, 0.1853610690331502, 0.031486031128971304, 0.13935451914013197, 9.999999999998899e-05, 0.007123037535430532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01827910283164058, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04441582842143743, 0.025982830095157672, 0.06936715590125964, 0.16688222609668502, 9.999999999998899e-05, 0.031847279447143606, 0.12009486460733665, 0.028500677227373816, 0.020062150348567953, 0.09131828653620055, 0.023877632400643778, 0.021859451574296473, 0.1206039063304597, 0.06468587452543684, 0.046062786829776825, 9.999999999998899e-05, 9.999999999998899e-05, 0.047483962034128524, 0.12135216608155186, 0.06098990186555531, 0.0414304331428883, 0.036942873319209646, 0.0057066241241719995, 0.00529010754728898, 0.07349407711587885, 9.999999999998899e-05, 0.07615899842452578, 0.4146704937968485, 0.43821339242662605, 0.43295531292079503, 0.1816880469887796, 0.4305113821878159, 0.20897245973750944, 0.4121730042416124, 0.4399706127441998, 0.40851808456242766, 0.06029305652297079, 0.07904887629363999, 0.023559086131001772, 0.08044108020970053, 0.10081686815649915, 0.073268936800021, 0.06864104345063604, 0.09198365483804705, 0.14205625242399633, 0.2849161700806532, 0.2015540551224264, 0.26017535780678014, 0.23247392621478635, 0.14113832311675778, 0.16415844934613255, 0.1898528032181338, 0.18698586529233685, 0.2770829245153167, 0.2862510778961701, 0.2866760079214774, 0.2239447783508628, 0.18940377893259008, 0.19644026708986762, 0.25918219920522856, 0.2752825594133028, 0.3152527392202835, 0.23168234766054507, 0.16202423196849214, 0.15899141130588013, 0.17256292097272907, 0.19127562069129045, 0.07961761588594019, 0.15490354629750946, 0.25325745423796475, 0.19738502743859587, 0.09405438071379046, 0.20628879791621957, 0.18286776016236506, 0.23642034042517612, 0.18973421279767744, 0.16422176497782692, 0.17584904614923502, 0.22834288534262515, 0.1709982500025743, 0.19290197336152404, 0.20982677219386237, 0.187911484113654, 0.1806138738944748, 0.20840090731216598, 0.2073039287557219, 0.2304570751287719, 0.2367380663354154, 0.18013124109150136, 0.1749935974218988, 0.7551512838091496, 0.15587664146714109, 0.16423156559048946, 0.12994850263362545, 0.1657343216562407, 0.1293238783841847, 0.18113235655409177, 0.1283882998243887, 0.6028550326976516, 0.07925224479464288, 0.1097479004712193, 0.34914887453945076, 0.08289967966648126, 0.20792780609178896, 0.16115572323573502, 0.15076880233543166, 0.11272824498403533, 0.1086591468971132, 0.1958427077704803, 0.19556946888124527, 0.22296409448414078, 0.1937702208700648, 0.16186895084720743, 0.20492365433845883, 0.21636422109524533, 0.18771269517603606, 0.2055664452630015, 0.08604075452426274, 0.04894760704540224, 0.08160057621466554, 0.08602663325854154, 0.05805475259528525, 0.07585242918657664, 0.10141265123715171, 0.07305405241247886, 0.07434758300385547]}, "mutation_prompt": null}
{"id": "d5f39372-1748-4fdf-aa66-d506b8c150c1", "solution": "import numpy as np\n\nclass ADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        \n        evaluations = self.population_size\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters\n                w = 0.5 + 0.5 * np.random.rand()  # Inertia weight\n                c1 = 1.5 + np.random.rand()  # Cognitive (local) coefficient\n                c2 = 1.5 + np.random.rand()  # Social (global) coefficient\n\n                # Update velocities and positions\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_value", "name": "ADSO", "description": "Adaptive Dynamic Swarm Optimization (ADSO) using an adaptive swarm strategy with dynamic local exploitation and global exploration.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79cc1f52-0fd0-48a4-82ef-adb9e87fd695", "metadata": {"aucs": [0.6594565641618879, 0.5585809039779229, 0.7396528129314988, 0.14130015460874001, 0.161239787529469, 0.15694656914410932, 0.1495658608390098, 0.18280542280075007, 0.18325486864771134, 0.2593478967660189, 0.041246625702633044, 9.999999999998899e-05, 0.04723926931128375, 0.32891771728430763, 0.05496979466705232, 0.0057853939430875245, 0.3590412342843713, 0.004176908029004167, 0.12081329321886847, 0.1329735936330224, 0.1258639361148094, 0.04301560056090781, 0.10266104655560393, 0.09523173464779155, 0.057458299585834705, 0.05600984039455437, 0.04603978255190666, 0.09151391224431249, 0.08874355369932296, 0.14226168933139738, 0.11638719866062952, 0.1146638584736811, 0.12773270789724978, 0.06862048801762177, 0.016296303700053416, 0.10765887847983335, 0.9971146896948477, 0.9949315315869507, 0.9978176931252873, 0.9980244325521848, 0.09999991576597389, 0.9968854064558058, 0.9972320987819742, 0.9976656757502812, 0.9924181718152312, 0.059752289889595356, 0.055667560537888905, 0.05568014248621944, 0.1806268192711541, 0.14561163288437162, 0.15056744849784076, 0.08920167848673932, 0.08900620589633212, 9.999999999998899e-05, 0.17297337089869957, 0.31198135452467424, 0.291863608998539, 0.19807922840980885, 0.24261845227972123, 0.3387808671862387, 0.11885264330559875, 0.12431576648806508, 0.14666736459208174, 0.14384805260796474, 0.14618415577813226, 0.1733186696508464, 0.16470326099633714, 9.999999999998899e-05, 0.1294933195091027, 0.14803676900837504, 0.1472744157198893, 0.15730883173641286, 0.1531772772166079, 0.016883451237602265, 0.05060660628406133, 0.14662716417760513, 0.13843099220348454, 0.14573296797615964, 0.1853610690331502, 0.031486031128971304, 0.13935451914013197, 9.999999999998899e-05, 0.007123037535430532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01827910283164058, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04441582842143743, 0.025982830095157672, 0.06936715590125964, 0.16688222609668502, 9.999999999998899e-05, 0.031847279447143606, 0.12009486460733665, 0.028500677227373816, 0.020062150348567953, 0.09131828653620055, 0.023877632400643778, 0.021859451574296473, 0.1206039063304597, 0.06468587452543684, 0.046062786829776825, 9.999999999998899e-05, 9.999999999998899e-05, 0.047483962034128524, 0.12135216608155186, 0.06098990186555531, 0.0414304331428883, 0.036942873319209646, 0.0057066241241719995, 0.00529010754728898, 0.07349407711587885, 9.999999999998899e-05, 0.07615899842452578, 0.4146704937968485, 0.43821339242662605, 0.43295531292079503, 0.1816880469887796, 0.4305113821878159, 0.20897245973750944, 0.4121730042416124, 0.4399706127441998, 0.40851808456242766, 0.06029305652297079, 0.07904887629363999, 0.023559086131001772, 0.08044108020970053, 0.10081686815649915, 0.073268936800021, 0.06864104345063604, 0.09198365483804705, 0.14205625242399633, 0.2849161700806532, 0.2015540551224264, 0.26017535780678014, 0.23247392621478635, 0.14113832311675778, 0.16415844934613255, 0.1898528032181338, 0.18698586529233685, 0.2770829245153167, 0.2862510778961701, 0.2866760079214774, 0.2239447783508628, 0.18940377893259008, 0.19644026708986762, 0.25918219920522856, 0.2752825594133028, 0.3152527392202835, 0.23168234766054507, 0.16202423196849214, 0.15899141130588013, 0.17256292097272907, 0.19127562069129045, 0.07961761588594019, 0.15490354629750946, 0.25325745423796475, 0.19738502743859587, 0.09405438071379046, 0.20628879791621957, 0.18286776016236506, 0.23642034042517612, 0.18973421279767744, 0.16422176497782692, 0.17584904614923502, 0.22834288534262515, 0.1709982500025743, 0.19290197336152404, 0.20982677219386237, 0.187911484113654, 0.1806138738944748, 0.20840090731216598, 0.2073039287557219, 0.2304570751287719, 0.2367380663354154, 0.18013124109150136, 0.1749935974218988, 0.7551512838091496, 0.15587664146714109, 0.16423156559048946, 0.12994850263362545, 0.1657343216562407, 0.1293238783841847, 0.18113235655409177, 0.1283882998243887, 0.6028550326976516, 0.07925224479464288, 0.1097479004712193, 0.34914887453945076, 0.08289967966648126, 0.20792780609178896, 0.16115572323573502, 0.15076880233543166, 0.11272824498403533, 0.1086591468971132, 0.1958427077704803, 0.19556946888124527, 0.22296409448414078, 0.1937702208700648, 0.16186895084720743, 0.20492365433845883, 0.21636422109524533, 0.18771269517603606, 0.2055664452630015, 0.08604075452426274, 0.04894760704540224, 0.08160057621466554, 0.08602663325854154, 0.05805475259528525, 0.07585242918657664, 0.10141265123715171, 0.07305405241247886, 0.07434758300385547]}, "mutation_prompt": null}
{"id": "1ec27a1c-1e2f-4baa-b52b-1cd4aafbc0a9", "solution": "import numpy as np\n\nclass ADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        \n        evaluations = self.population_size\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters\n                w = 0.5 + 0.5 * np.random.rand()  # Inertia weight\n                c1 = 1.5 + np.random.rand()  # Cognitive (local) coefficient\n                c2 = 1.5 + np.random.rand()  # Social (global) coefficient\n\n                # Update velocities and positions\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_value", "name": "ADSO", "description": "Adaptive Dynamic Swarm Optimization (ADSO) using an adaptive swarm strategy with dynamic local exploitation and global exploration.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79cc1f52-0fd0-48a4-82ef-adb9e87fd695", "metadata": {"aucs": [0.6594565641618879, 0.5585809039779229, 0.7396528129314988, 0.14130015460874001, 0.161239787529469, 0.15694656914410932, 0.1495658608390098, 0.18280542280075007, 0.18325486864771134, 0.2593478967660189, 0.041246625702633044, 9.999999999998899e-05, 0.04723926931128375, 0.32891771728430763, 0.05496979466705232, 0.0057853939430875245, 0.3590412342843713, 0.004176908029004167, 0.12081329321886847, 0.1329735936330224, 0.1258639361148094, 0.04301560056090781, 0.10266104655560393, 0.09523173464779155, 0.057458299585834705, 0.05600984039455437, 0.04603978255190666, 0.09151391224431249, 0.08874355369932296, 0.14226168933139738, 0.11638719866062952, 0.1146638584736811, 0.12773270789724978, 0.06862048801762177, 0.016296303700053416, 0.10765887847983335, 0.9971146896948477, 0.9949315315869507, 0.9978176931252873, 0.9980244325521848, 0.09999991576597389, 0.9968854064558058, 0.9972320987819742, 0.9976656757502812, 0.9924181718152312, 0.059752289889595356, 0.055667560537888905, 0.05568014248621944, 0.1806268192711541, 0.14561163288437162, 0.15056744849784076, 0.08920167848673932, 0.08900620589633212, 9.999999999998899e-05, 0.17297337089869957, 0.31198135452467424, 0.291863608998539, 0.19807922840980885, 0.24261845227972123, 0.3387808671862387, 0.11885264330559875, 0.12431576648806508, 0.14666736459208174, 0.14384805260796474, 0.14618415577813226, 0.1733186696508464, 0.16470326099633714, 9.999999999998899e-05, 0.1294933195091027, 0.14803676900837504, 0.1472744157198893, 0.15730883173641286, 0.1531772772166079, 0.016883451237602265, 0.05060660628406133, 0.14662716417760513, 0.13843099220348454, 0.14573296797615964, 0.1853610690331502, 0.031486031128971304, 0.13935451914013197, 9.999999999998899e-05, 0.007123037535430532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01827910283164058, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04441582842143743, 0.025982830095157672, 0.06936715590125964, 0.16688222609668502, 9.999999999998899e-05, 0.031847279447143606, 0.12009486460733665, 0.028500677227373816, 0.020062150348567953, 0.09131828653620055, 0.023877632400643778, 0.021859451574296473, 0.1206039063304597, 0.06468587452543684, 0.046062786829776825, 9.999999999998899e-05, 9.999999999998899e-05, 0.047483962034128524, 0.12135216608155186, 0.06098990186555531, 0.0414304331428883, 0.036942873319209646, 0.0057066241241719995, 0.00529010754728898, 0.07349407711587885, 9.999999999998899e-05, 0.07615899842452578, 0.4146704937968485, 0.43821339242662605, 0.43295531292079503, 0.1816880469887796, 0.4305113821878159, 0.20897245973750944, 0.4121730042416124, 0.4399706127441998, 0.40851808456242766, 0.06029305652297079, 0.07904887629363999, 0.023559086131001772, 0.08044108020970053, 0.10081686815649915, 0.073268936800021, 0.06864104345063604, 0.09198365483804705, 0.14205625242399633, 0.2849161700806532, 0.2015540551224264, 0.26017535780678014, 0.23247392621478635, 0.14113832311675778, 0.16415844934613255, 0.1898528032181338, 0.18698586529233685, 0.2770829245153167, 0.2862510778961701, 0.2866760079214774, 0.2239447783508628, 0.18940377893259008, 0.19644026708986762, 0.25918219920522856, 0.2752825594133028, 0.3152527392202835, 0.23168234766054507, 0.16202423196849214, 0.15899141130588013, 0.17256292097272907, 0.19127562069129045, 0.07961761588594019, 0.15490354629750946, 0.25325745423796475, 0.19738502743859587, 0.09405438071379046, 0.20628879791621957, 0.18286776016236506, 0.23642034042517612, 0.18973421279767744, 0.16422176497782692, 0.17584904614923502, 0.22834288534262515, 0.1709982500025743, 0.19290197336152404, 0.20982677219386237, 0.187911484113654, 0.1806138738944748, 0.20840090731216598, 0.2073039287557219, 0.2304570751287719, 0.2367380663354154, 0.18013124109150136, 0.1749935974218988, 0.7551512838091496, 0.15587664146714109, 0.16423156559048946, 0.12994850263362545, 0.1657343216562407, 0.1293238783841847, 0.18113235655409177, 0.1283882998243887, 0.6028550326976516, 0.07925224479464288, 0.1097479004712193, 0.34914887453945076, 0.08289967966648126, 0.20792780609178896, 0.16115572323573502, 0.15076880233543166, 0.11272824498403533, 0.1086591468971132, 0.1958427077704803, 0.19556946888124527, 0.22296409448414078, 0.1937702208700648, 0.16186895084720743, 0.20492365433845883, 0.21636422109524533, 0.18771269517603606, 0.2055664452630015, 0.08604075452426274, 0.04894760704540224, 0.08160057621466554, 0.08602663325854154, 0.05805475259528525, 0.07585242918657664, 0.10141265123715171, 0.07305405241247886, 0.07434758300385547]}, "mutation_prompt": null}
{"id": "668bdb15-532b-4da0-a468-845553263b52", "solution": "import numpy as np\n\nclass ADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        \n        evaluations = self.population_size\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters\n                w = 0.5 + 0.5 * np.random.rand()  # Inertia weight\n                c1 = 1.5 + np.random.rand()  # Cognitive (local) coefficient\n                c2 = 1.5 + np.random.rand()  # Social (global) coefficient\n\n                # Update velocities and positions\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_value", "name": "ADSO", "description": "Adaptive Dynamic Swarm Optimization (ADSO) using an adaptive swarm strategy with dynamic local exploitation and global exploration.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79cc1f52-0fd0-48a4-82ef-adb9e87fd695", "metadata": {"aucs": [0.6594565641618879, 0.5585809039779229, 0.7396528129314988, 0.14130015460874001, 0.161239787529469, 0.15694656914410932, 0.1495658608390098, 0.18280542280075007, 0.18325486864771134, 0.2593478967660189, 0.041246625702633044, 9.999999999998899e-05, 0.04723926931128375, 0.32891771728430763, 0.05496979466705232, 0.0057853939430875245, 0.3590412342843713, 0.004176908029004167, 0.12081329321886847, 0.1329735936330224, 0.1258639361148094, 0.04301560056090781, 0.10266104655560393, 0.09523173464779155, 0.057458299585834705, 0.05600984039455437, 0.04603978255190666, 0.09151391224431249, 0.08874355369932296, 0.14226168933139738, 0.11638719866062952, 0.1146638584736811, 0.12773270789724978, 0.06862048801762177, 0.016296303700053416, 0.10765887847983335, 0.9971146896948477, 0.9949315315869507, 0.9978176931252873, 0.9980244325521848, 0.09999991576597389, 0.9968854064558058, 0.9972320987819742, 0.9976656757502812, 0.9924181718152312, 0.059752289889595356, 0.055667560537888905, 0.05568014248621944, 0.1806268192711541, 0.14561163288437162, 0.15056744849784076, 0.08920167848673932, 0.08900620589633212, 9.999999999998899e-05, 0.17297337089869957, 0.31198135452467424, 0.291863608998539, 0.19807922840980885, 0.24261845227972123, 0.3387808671862387, 0.11885264330559875, 0.12431576648806508, 0.14666736459208174, 0.14384805260796474, 0.14618415577813226, 0.1733186696508464, 0.16470326099633714, 9.999999999998899e-05, 0.1294933195091027, 0.14803676900837504, 0.1472744157198893, 0.15730883173641286, 0.1531772772166079, 0.016883451237602265, 0.05060660628406133, 0.14662716417760513, 0.13843099220348454, 0.14573296797615964, 0.1853610690331502, 0.031486031128971304, 0.13935451914013197, 9.999999999998899e-05, 0.007123037535430532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01827910283164058, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04441582842143743, 0.025982830095157672, 0.06936715590125964, 0.16688222609668502, 9.999999999998899e-05, 0.031847279447143606, 0.12009486460733665, 0.028500677227373816, 0.020062150348567953, 0.09131828653620055, 0.023877632400643778, 0.021859451574296473, 0.1206039063304597, 0.06468587452543684, 0.046062786829776825, 9.999999999998899e-05, 9.999999999998899e-05, 0.047483962034128524, 0.12135216608155186, 0.06098990186555531, 0.0414304331428883, 0.036942873319209646, 0.0057066241241719995, 0.00529010754728898, 0.07349407711587885, 9.999999999998899e-05, 0.07615899842452578, 0.4146704937968485, 0.43821339242662605, 0.43295531292079503, 0.1816880469887796, 0.4305113821878159, 0.20897245973750944, 0.4121730042416124, 0.4399706127441998, 0.40851808456242766, 0.06029305652297079, 0.07904887629363999, 0.023559086131001772, 0.08044108020970053, 0.10081686815649915, 0.073268936800021, 0.06864104345063604, 0.09198365483804705, 0.14205625242399633, 0.2849161700806532, 0.2015540551224264, 0.26017535780678014, 0.23247392621478635, 0.14113832311675778, 0.16415844934613255, 0.1898528032181338, 0.18698586529233685, 0.2770829245153167, 0.2862510778961701, 0.2866760079214774, 0.2239447783508628, 0.18940377893259008, 0.19644026708986762, 0.25918219920522856, 0.2752825594133028, 0.3152527392202835, 0.23168234766054507, 0.16202423196849214, 0.15899141130588013, 0.17256292097272907, 0.19127562069129045, 0.07961761588594019, 0.15490354629750946, 0.25325745423796475, 0.19738502743859587, 0.09405438071379046, 0.20628879791621957, 0.18286776016236506, 0.23642034042517612, 0.18973421279767744, 0.16422176497782692, 0.17584904614923502, 0.22834288534262515, 0.1709982500025743, 0.19290197336152404, 0.20982677219386237, 0.187911484113654, 0.1806138738944748, 0.20840090731216598, 0.2073039287557219, 0.2304570751287719, 0.2367380663354154, 0.18013124109150136, 0.1749935974218988, 0.7551512838091496, 0.15587664146714109, 0.16423156559048946, 0.12994850263362545, 0.1657343216562407, 0.1293238783841847, 0.18113235655409177, 0.1283882998243887, 0.6028550326976516, 0.07925224479464288, 0.1097479004712193, 0.34914887453945076, 0.08289967966648126, 0.20792780609178896, 0.16115572323573502, 0.15076880233543166, 0.11272824498403533, 0.1086591468971132, 0.1958427077704803, 0.19556946888124527, 0.22296409448414078, 0.1937702208700648, 0.16186895084720743, 0.20492365433845883, 0.21636422109524533, 0.18771269517603606, 0.2055664452630015, 0.08604075452426274, 0.04894760704540224, 0.08160057621466554, 0.08602663325854154, 0.05805475259528525, 0.07585242918657664, 0.10141265123715171, 0.07305405241247886, 0.07434758300385547]}, "mutation_prompt": null}
{"id": "5d0f0ac5-96e7-440a-b8a8-f2e12def216a", "solution": "import numpy as np\n\nclass ADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        \n        evaluations = self.population_size\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters\n                w = 0.5 + 0.5 * np.random.rand()  # Inertia weight\n                c1 = 1.5 + np.random.rand()  # Cognitive (local) coefficient\n                c2 = 1.5 + np.random.rand()  # Social (global) coefficient\n\n                # Update velocities and positions\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n        return self.global_best_position, self.global_best_value", "name": "ADSO", "description": "Adaptive Dynamic Swarm Optimization (ADSO) using an adaptive swarm strategy with dynamic local exploitation and global exploration.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "79cc1f52-0fd0-48a4-82ef-adb9e87fd695", "metadata": {"aucs": [0.6594565641618879, 0.5585809039779229, 0.7396528129314988, 0.14130015460874001, 0.161239787529469, 0.15694656914410932, 0.1495658608390098, 0.18280542280075007, 0.18325486864771134, 0.2593478967660189, 0.041246625702633044, 9.999999999998899e-05, 0.04723926931128375, 0.32891771728430763, 0.05496979466705232, 0.0057853939430875245, 0.3590412342843713, 0.004176908029004167, 0.12081329321886847, 0.1329735936330224, 0.1258639361148094, 0.04301560056090781, 0.10266104655560393, 0.09523173464779155, 0.057458299585834705, 0.05600984039455437, 0.04603978255190666, 0.09151391224431249, 0.08874355369932296, 0.14226168933139738, 0.11638719866062952, 0.1146638584736811, 0.12773270789724978, 0.06862048801762177, 0.016296303700053416, 0.10765887847983335, 0.9971146896948477, 0.9949315315869507, 0.9978176931252873, 0.9980244325521848, 0.09999991576597389, 0.9968854064558058, 0.9972320987819742, 0.9976656757502812, 0.9924181718152312, 0.059752289889595356, 0.055667560537888905, 0.05568014248621944, 0.1806268192711541, 0.14561163288437162, 0.15056744849784076, 0.08920167848673932, 0.08900620589633212, 9.999999999998899e-05, 0.17297337089869957, 0.31198135452467424, 0.291863608998539, 0.19807922840980885, 0.24261845227972123, 0.3387808671862387, 0.11885264330559875, 0.12431576648806508, 0.14666736459208174, 0.14384805260796474, 0.14618415577813226, 0.1733186696508464, 0.16470326099633714, 9.999999999998899e-05, 0.1294933195091027, 0.14803676900837504, 0.1472744157198893, 0.15730883173641286, 0.1531772772166079, 0.016883451237602265, 0.05060660628406133, 0.14662716417760513, 0.13843099220348454, 0.14573296797615964, 0.1853610690331502, 0.031486031128971304, 0.13935451914013197, 9.999999999998899e-05, 0.007123037535430532, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01827910283164058, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04441582842143743, 0.025982830095157672, 0.06936715590125964, 0.16688222609668502, 9.999999999998899e-05, 0.031847279447143606, 0.12009486460733665, 0.028500677227373816, 0.020062150348567953, 0.09131828653620055, 0.023877632400643778, 0.021859451574296473, 0.1206039063304597, 0.06468587452543684, 0.046062786829776825, 9.999999999998899e-05, 9.999999999998899e-05, 0.047483962034128524, 0.12135216608155186, 0.06098990186555531, 0.0414304331428883, 0.036942873319209646, 0.0057066241241719995, 0.00529010754728898, 0.07349407711587885, 9.999999999998899e-05, 0.07615899842452578, 0.4146704937968485, 0.43821339242662605, 0.43295531292079503, 0.1816880469887796, 0.4305113821878159, 0.20897245973750944, 0.4121730042416124, 0.4399706127441998, 0.40851808456242766, 0.06029305652297079, 0.07904887629363999, 0.023559086131001772, 0.08044108020970053, 0.10081686815649915, 0.073268936800021, 0.06864104345063604, 0.09198365483804705, 0.14205625242399633, 0.2849161700806532, 0.2015540551224264, 0.26017535780678014, 0.23247392621478635, 0.14113832311675778, 0.16415844934613255, 0.1898528032181338, 0.18698586529233685, 0.2770829245153167, 0.2862510778961701, 0.2866760079214774, 0.2239447783508628, 0.18940377893259008, 0.19644026708986762, 0.25918219920522856, 0.2752825594133028, 0.3152527392202835, 0.23168234766054507, 0.16202423196849214, 0.15899141130588013, 0.17256292097272907, 0.19127562069129045, 0.07961761588594019, 0.15490354629750946, 0.25325745423796475, 0.19738502743859587, 0.09405438071379046, 0.20628879791621957, 0.18286776016236506, 0.23642034042517612, 0.18973421279767744, 0.16422176497782692, 0.17584904614923502, 0.22834288534262515, 0.1709982500025743, 0.19290197336152404, 0.20982677219386237, 0.187911484113654, 0.1806138738944748, 0.20840090731216598, 0.2073039287557219, 0.2304570751287719, 0.2367380663354154, 0.18013124109150136, 0.1749935974218988, 0.7551512838091496, 0.15587664146714109, 0.16423156559048946, 0.12994850263362545, 0.1657343216562407, 0.1293238783841847, 0.18113235655409177, 0.1283882998243887, 0.6028550326976516, 0.07925224479464288, 0.1097479004712193, 0.34914887453945076, 0.08289967966648126, 0.20792780609178896, 0.16115572323573502, 0.15076880233543166, 0.11272824498403533, 0.1086591468971132, 0.1958427077704803, 0.19556946888124527, 0.22296409448414078, 0.1937702208700648, 0.16186895084720743, 0.20492365433845883, 0.21636422109524533, 0.18771269517603606, 0.2055664452630015, 0.08604075452426274, 0.04894760704540224, 0.08160057621466554, 0.08602663325854154, 0.05805475259528525, 0.07585242918657664, 0.10141265123715171, 0.07305405241247886, 0.07434758300385547]}, "mutation_prompt": null}
{"id": "f525a6ad-14a1-4746-9ac5-281959d9f04a", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n\n        evaluations = self.population_size\n\n        # Chaotic sequence for enhanced exploration\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters with chaotic influence\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                # Update velocities and positions\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSO", "description": "Enhanced Adaptive Dynamic Swarm Optimization using a chaotic sequence for improved exploration and convergence.", "configspace": "", "generation": 16, "fitness": 0.27097625403371217, "feedback": "The algorithm EnhancedADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.29.", "error": "", "parent_id": "79cc1f52-0fd0-48a4-82ef-adb9e87fd695", "metadata": {"aucs": [0.9606421521491567, 0.9668183494372784, 0.9631173264239539, 0.19152250335080534, 0.9591354798167535, 0.9497260652698799, 0.18362532799292863, 0.9662964461724485, 0.9590758850318503, 0.870276671193236, 0.8360869028517419, 0.044918167030527534, 0.8996928018794866, 0.8725391114523323, 0.9116418294454794, 0.06258831314903968, 0.9056833504483991, 0.905927765678619, 0.10896171949789601, 0.1738665431701385, 0.15787460675464027, 0.15260727546595787, 0.053373433968228134, 0.1712213839462744, 0.13609020884797918, 0.03932861572973512, 0.1035469944657017, 0.17526261939576038, 0.10834511395180091, 0.1135482504788009, 0.11572510855544371, 0.040802954419393966, 0.08460470255534569, 0.05858917052194079, 0.11306099145245918, 0.14587753037177897, 0.9965599164066729, 0.9944518748694048, 0.9966516213229507, 0.9939240628021291, 0.9945403672947017, 0.9949994644323426, 0.9916295349048333, 0.9966791269088735, 0.9956687050377321, 0.060270081623678196, 0.055828423019463336, 0.8690617960076695, 0.6435033979805833, 0.5419692327982824, 0.27261759630440197, 0.12869013963314901, 0.0896027249932626, 0.0895509384785349, 0.22638307354498133, 0.16897469383153418, 0.2039023389437703, 0.21589038788135928, 0.05380388922728163, 0.1963309203970981, 0.06821955731301421, 0.11702765009435756, 0.19582786722763956, 0.3875029135335776, 0.21434302788134962, 0.21985722485217563, 0.22907988209305308, 9.999999999998899e-05, 0.35314854989691535, 0.23584823503788999, 0.2648118936847873, 0.21053037879433056, 0.1374432737450192, 0.0005424007391671148, 0.13596131967175884, 0.26900027499337553, 0.25992076828985133, 0.23859610890004368, 0.26744093466241725, 0.03550310670461854, 0.26684285621434256, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.055634562971867085, 0.1309583207928865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027964602005681627, 0.045395695681775705, 0.03789612497234596, 0.047086079682287396, 0.08338368745833846, 9.999999999998899e-05, 0.006652879854137095, 0.06747487157051169, 0.029333785990683814, 9.999999999998899e-05, 0.05570328209967068, 0.055882482227813335, 0.05524252097694027, 0.08687207742696224, 0.0857082003422518, 0.08569298314820373, 0.2847856232930974, 0.11030082518483997, 0.08078333977335894, 9.999999999998899e-05, 9.999999999998899e-05, 0.06576360652741953, 0.08264230312249932, 0.12279269435814111, 9.999999999998899e-05, 0.05038151529454549, 0.050817378214639164, 0.08694054996549716, 0.5808418945828069, 0.6080247484372157, 0.5583110071763231, 0.5591270571796048, 0.5575521353288737, 0.20987020714261384, 0.6052939750285296, 0.5538912300026686, 0.5515724840786852, 0.04918398783738698, 0.09341986392220591, 0.050258537247197976, 0.11421417141896384, 0.03348785748752636, 0.09382345031591266, 0.05806281509780897, 0.10755087460107138, 0.10581450714358143, 0.20861253950392755, 0.1863652271110472, 0.15380168862749688, 0.23857654059607614, 0.15239927458850977, 0.15299939195536627, 0.1801192570781519, 0.18282291117197158, 0.25352356281373334, 0.2110003946070197, 0.23421152732254236, 0.1858003096269707, 0.2232024194004435, 0.16292147369734922, 0.3870302970436418, 0.23613808487473376, 0.21626288649817682, 0.13641238721453097, 0.16051517032679707, 0.22319065036572527, 0.2574716201948669, 0.1429169618665146, 0.12031860396807037, 0.3112302762868705, 0.11358259547105953, 0.2621197853943824, 0.16006697610920329, 0.21520163982342733, 0.16536541019869744, 0.28915570484095254, 0.29462712876179065, 0.142082119716039, 0.3437188272145205, 0.20550969131773988, 0.2188675520156501, 0.2437256692788885, 0.1788145570141152, 0.19096905210164983, 0.19178592620104173, 0.2021503607516728, 0.2155292147581681, 0.18781460070623157, 0.17543564178074134, 0.17565525501662105, 0.2074630763332913, 0.9645150994938512, 0.9620982741255045, 0.1888756442742039, 0.17349450497339947, 0.20272548404669366, 0.11829650403085779, 0.154957984810699, 0.12738878148285748, 0.15497872808671875, 0.835352796843349, 0.11343596052101279, 0.7555334110682126, 0.22845062671852412, 0.21388002196805533, 0.21499274702835947, 0.14342675348830358, 0.10975363168777752, 0.878118376316764, 0.21030577015963692, 0.2294294183820068, 0.19358285943340536, 0.2676149504202102, 0.1910552996560846, 0.23105801354744981, 0.3008748174595862, 0.19420814204455816, 0.24638708904432383, 0.10386479840013485, 0.08750654855862516, 0.11684758422574959, 0.11968210386487588, 0.0858392809292281, 0.13380694625256473, 0.09572186245248537, 0.07599006558397436, 0.08481074609243966]}, "mutation_prompt": null}
{"id": "5bb2d076-0c10-4d98-858f-dcf9d769b675", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n\n        evaluations = self.population_size\n\n        # Chaotic sequence for enhanced exploration\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters with chaotic influence\n                w = 0.4 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + 0.5 * np.random.rand() \n                c2 = 1.5 + 0.5 * np.random.rand()\n\n                # Update velocities and positions\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSO", "description": "Enhanced Dynamic Swarm Optimization with self-adaptive inertia and random cognitive/social coefficients.", "configspace": "", "generation": 17, "fitness": 0.2491031939382922, "feedback": "The algorithm EnhancedADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.27.", "error": "", "parent_id": "f525a6ad-14a1-4746-9ac5-281959d9f04a", "metadata": {"aucs": [0.9661805665842641, 0.9635408173086841, 0.968425027034046, 0.9627473790632892, 0.9659076616545748, 0.11613708321670091, 0.9699051684572936, 0.18369592821982883, 0.964512321365651, 0.9237463456666797, 9.999999999998899e-05, 0.08239838561464896, 0.9230373654180276, 0.05129782578127484, 0.9150809051189406, 9.999999999998899e-05, 0.9344662110407831, 0.921828980128001, 0.19469820394460424, 0.12804592369095025, 0.09888429057777992, 0.06438103418021512, 0.14990010070141613, 0.07600619951934773, 0.11344667551195942, 0.08715822556012154, 0.11884847357572559, 0.10774030384612066, 0.1276740722423234, 0.06642869383298566, 0.11399994539535796, 0.09764638629051225, 0.11164345567086054, 0.07645166260466851, 0.12807527101167182, 0.02887858937485177, 0.996174158303775, 0.9928734422831172, 0.9966564429719568, 0.9971412266460774, 0.9940628142259925, 0.9970077623533294, 0.09992302574519818, 0.9949965024498187, 0.9961822088071534, 0.06036329409274044, 0.06044359586171699, 0.028433145042271235, 0.15327713688576494, 0.7846481504851854, 0.1547840798357849, 0.0845776396763287, 0.0896697639486691, 9.999999999998899e-05, 0.20665131995736252, 0.09153499777371177, 0.16630977000827352, 0.19965632370562436, 0.19594217858731167, 0.15662109781829037, 0.24923723926854335, 0.17604026832071284, 0.18835715068470105, 0.15552105308841402, 0.25523917350856073, 0.25265908489414657, 0.25302467999979916, 0.23558186432787642, 0.13703709766668126, 0.2647619930346288, 0.4537141489200467, 0.1366967992886886, 0.13879637969012948, 0.2408245956879036, 0.2564893628803425, 0.23515635582832528, 0.1381245725951683, 0.29116994893772075, 0.29264217934742365, 9.999999999998899e-05, 0.27947196561486465, 0.07804297931406945, 9.999999999998899e-05, 9.999999999998899e-05, 0.04495623653090375, 9.999999999998899e-05, 0.03903734774069689, 0.050698109814323655, 9.999999999998899e-05, 9.999999999998899e-05, 0.04940344527689777, 0.04165180147375125, 0.0575522002238773, 0.03929864581378728, 0.008271094991462835, 0.025859377960575913, 0.09821971333138557, 0.10243456343162105, 0.060767287861035024, 0.05560443206257337, 0.03863825458781789, 0.07420178193360283, 0.16993662400137077, 0.10619087098388014, 0.40742431062428164, 0.08966408751722776, 9.999999999998899e-05, 0.08198508592018827, 0.04540399501574244, 9.999999999998899e-05, 0.045210119552132944, 0.054298919470669116, 0.17158782652792792, 0.06282612029538781, 0.08583768373023215, 0.08698622866617733, 0.1612570052614748, 0.545815274951583, 0.5607289680413788, 0.5606744445235685, 0.5879987628051242, 0.5742056258796331, 0.5775515614058306, 0.6031243823724347, 0.6054038669564406, 0.6228434565274454, 0.04194131948886226, 0.10310765863983451, 0.06813058673866157, 0.11790907291090913, 0.08430709694423744, 0.15029234244672696, 0.07838151154409956, 0.06485037044672592, 0.0872373767131569, 0.3552912526620773, 0.22406617553953234, 0.20805690564746926, 0.2594995447949192, 0.14185317894865546, 0.17759952962594328, 0.21028771060743667, 0.18525785095675862, 0.20456799035662643, 0.15353178591024463, 0.17486488445573323, 0.1877427131401701, 0.19312480353986383, 0.16695959003097782, 0.379740159102924, 0.30421368903534374, 0.3339319926164457, 0.16895632388858284, 0.11271829137225742, 0.1402154820962418, 0.2032126723922565, 0.19963558066711518, 0.186517066814871, 0.35485405733268427, 0.21051008121340753, 0.07942118572744095, 0.10191989444963656, 0.23608869286660605, 0.15572707863897883, 0.2430260923558083, 0.24903273784705648, 0.16287962935004874, 0.21138004637635865, 0.2398975339753493, 0.19116902357484666, 0.1995807528867356, 0.20480610045112912, 0.1891939529554596, 0.23031831846135054, 0.2585592028458279, 0.1887843651882225, 0.1815430475559936, 0.18901192101701525, 0.16397966559840882, 0.21231721003571402, 0.18369105079505899, 0.16428463421395068, 0.20178797686835492, 0.17404294146140042, 0.20260841491240966, 0.10996656422818307, 0.16905152450615624, 0.1273665650423239, 0.15474481001410367, 0.0834818564723595, 0.11321177178281938, 0.7235513179990081, 0.578570606180773, 0.15248207640980205, 0.21491567344277507, 0.104104373358341, 0.15761761374493888, 0.8816795727475094, 0.2060059178192447, 0.20087312995335327, 0.20853272085650076, 0.18804621437165348, 0.194445286152241, 0.19600430629724408, 0.2526765067100881, 0.18811123312830802, 0.22014647857495306, 0.07843562861334907, 0.10017254247057805, 0.0868748881719934, 0.12607822604356111, 0.09261280314219711, 0.0804340578666719, 0.08730454747485705, 0.07061673045779404, 0.10577226397371065]}, "mutation_prompt": null}
{"id": "1ef66976-8d24-4601-a6b1-efaa9b25ac91", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def levy_flight(self, L):\n        sigma1 = np.power((np.math.gamma(1 + L) * np.sin(np.pi * L / 2)) / (np.math.gamma((1 + L) / 2) * L * np.power(2, (L - 1) / 2)), 1 / L)\n        sigma2 = 1\n        u = np.random.normal(0, sigma1, self.dim)\n        v = np.random.normal(0, sigma2, self.dim)\n        step = u / np.power(np.abs(v), 1 / L)\n        return step\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]) +\n                                 self.levy_flight(1.5))\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSO", "description": "Enhanced Adaptive Dynamic Swarm Optimization leveraging Levy flight for better exploration in complex landscapes.", "configspace": "", "generation": 18, "fitness": 0.13166704542256602, "feedback": "The algorithm EnhancedADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.19.", "error": "", "parent_id": "f525a6ad-14a1-4746-9ac5-281959d9f04a", "metadata": {"aucs": [0.2021749921903071, 0.1914393405271353, 0.18152754881427013, 0.22594773910879962, 0.21198360502234903, 0.25103913405665157, 0.20702206726368666, 0.19541476170186967, 0.17594374853158423, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05018812557615571, 0.057980337748704924, 0.03956385532786266, 0.05644536694843405, 0.05056591138050848, 0.04866463027647294, 0.06717719802335576, 0.04138690284689639, 0.04294117366070804, 0.056125606053374355, 0.04770854965158322, 0.0353070964630291, 0.031397932272209994, 0.039043729469045996, 0.0403543823919259, 0.034347734669875396, 0.02959526466778062, 0.04324583990191144, 0.9964081774651726, 0.9956467640625886, 0.9973369087840527, 0.9960178595250614, 0.9952854340432615, 0.9973393524685775, 0.9953528117260712, 0.9962320797756662, 0.9913770909000471, 0.13737435147577504, 0.0942044953080825, 0.10251447999643593, 0.08527519015037544, 0.11704326519322716, 0.11482687629755872, 0.08291623079192212, 0.08705225740249933, 0.0851415820825494, 0.13348096718952673, 0.10759776132255816, 0.11571843523237735, 0.14987315288227, 0.1420444970422059, 0.15126737778758614, 0.1323039096802262, 0.11962151477131355, 0.13708475809970788, 0.05553393582179256, 9.999999999998899e-05, 9.999999999998899e-05, 0.02687136926894962, 9.999999999998899e-05, 0.04945734013345171, 0.013371055738907178, 0.01520262904549785, 9.999999999998899e-05, 0.006746461975036588, 0.01998395713557033, 0.0034598324111779766, 9.999999999998899e-05, 0.02699762166855324, 0.03926125345602982, 9.999999999998899e-05, 0.004897473043201761, 0.007970357506499215, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05771200159191503, 0.013446838103590153, 0.04661345027367547, 0.04163535781023997, 0.03645323593068228, 0.0011949955630793374, 0.04657870479356041, 0.04536546203635006, 0.012977419302786286, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004236763970395407, 0.007508616372320698, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01393985619779492, 0.012774969447066131, 0.2201463140133253, 0.22680946255076895, 0.21126902378716939, 0.22934855387262765, 0.20685208878899364, 0.22704316792643742, 0.22763660683081333, 0.1848780800060601, 0.21789089788691474, 0.06479738833771631, 0.05866738343087585, 0.056942885870508664, 0.051706478888930874, 0.06905732332446002, 0.049226653499379935, 0.052214953226869865, 0.06128904145240244, 0.05104171608238339, 0.1686346843380856, 0.1337619566340018, 0.13947805762400056, 0.1371727280146381, 0.1849569406126148, 0.15561597768356772, 0.14114610326835664, 0.14608327408558341, 0.14079473837160417, 0.1732960831470931, 0.17346343085464855, 0.186853616653765, 0.15598030667153417, 0.15504571873662154, 0.17168580137188383, 0.1798363803500933, 0.18467418704444394, 0.18501736360047394, 0.1166145221534638, 0.13098485608700394, 0.10869652906615934, 0.11505023912662549, 0.13816606456085478, 0.10235777542509072, 0.12122862957586367, 0.13954569850310872, 0.11351650693195625, 0.1598086708480141, 0.16907533223868954, 0.14094393112718206, 0.15059154648482287, 0.14726912376382184, 0.1450023578469336, 0.17661562395585406, 0.13983188692348592, 0.13395068346470784, 0.1506793932660423, 0.1456200543638121, 0.14968447872089452, 0.15044037530253296, 0.15716731762737346, 0.14254463590400557, 0.159409299855366, 0.15299622422109083, 0.14507507337300374, 0.1926035775479098, 0.16594264222719934, 0.16376972202770834, 0.1540371837972656, 0.16356694360891666, 0.13989720943734552, 0.1632510579917189, 0.16869757506420646, 0.1559219580669069, 0.148805444390109, 0.1595969931975627, 0.1525095017614312, 0.12487307782484491, 0.10143931127532346, 0.1602151638726067, 0.18333084590464632, 0.12191817108284908, 0.11430314065281222, 0.17805018633285596, 0.18637181447366025, 0.1845544142076544, 0.20540625706642823, 0.21108250196714384, 0.19661850415213844, 0.18322522992435952, 0.18724138214986896, 0.1971521673027542, 0.05698213589835299, 0.06476175072059598, 0.04695606701019894, 0.04375290311889135, 0.04879620469112811, 0.05508570535420099, 0.05968367417746834, 0.04759444671609614, 0.04404363212038842]}, "mutation_prompt": null}
{"id": "de444a60-d07b-4f18-83e9-570cf1bb9605", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n\n        evaluations = self.population_size\n\n        # Chaotic sequence for enhanced exploration\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters with chaotic influence\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                # Update velocities and positions\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSO", "description": "Enhanced Adaptive Dynamic Swarm Optimization using a chaotic sequence for improved exploration and convergence.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f525a6ad-14a1-4746-9ac5-281959d9f04a", "metadata": {"aucs": [0.9606421521491567, 0.9668183494372784, 0.9631173264239539, 0.19152250335080534, 0.9591354798167535, 0.9497260652698799, 0.18362532799292863, 0.9662964461724485, 0.9590758850318503, 0.870276671193236, 0.8360869028517419, 0.044918167030527534, 0.8996928018794866, 0.8725391114523323, 0.9116418294454794, 0.06258831314903968, 0.9056833504483991, 0.905927765678619, 0.10896171949789601, 0.1738665431701385, 0.15787460675464027, 0.15260727546595787, 0.053373433968228134, 0.1712213839462744, 0.13609020884797918, 0.03932861572973512, 0.1035469944657017, 0.17526261939576038, 0.10834511395180091, 0.1135482504788009, 0.11572510855544371, 0.040802954419393966, 0.08460470255534569, 0.05858917052194079, 0.11306099145245918, 0.14587753037177897, 0.9965599164066729, 0.9944518748694048, 0.9966516213229507, 0.9939240628021291, 0.9945403672947017, 0.9949994644323426, 0.9916295349048333, 0.9966791269088735, 0.9956687050377321, 0.060270081623678196, 0.055828423019463336, 0.8690617960076695, 0.6435033979805833, 0.5419692327982824, 0.27261759630440197, 0.12869013963314901, 0.0896027249932626, 0.0895509384785349, 0.22638307354498133, 0.16897469383153418, 0.2039023389437703, 0.21589038788135928, 0.05380388922728163, 0.1963309203970981, 0.06821955731301421, 0.11702765009435756, 0.19582786722763956, 0.3875029135335776, 0.21434302788134962, 0.21985722485217563, 0.22907988209305308, 9.999999999998899e-05, 0.35314854989691535, 0.23584823503788999, 0.2648118936847873, 0.21053037879433056, 0.1374432737450192, 0.0005424007391671148, 0.13596131967175884, 0.26900027499337553, 0.25992076828985133, 0.23859610890004368, 0.26744093466241725, 0.03550310670461854, 0.26684285621434256, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.055634562971867085, 0.1309583207928865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027964602005681627, 0.045395695681775705, 0.03789612497234596, 0.047086079682287396, 0.08338368745833846, 9.999999999998899e-05, 0.006652879854137095, 0.06747487157051169, 0.029333785990683814, 9.999999999998899e-05, 0.05570328209967068, 0.055882482227813335, 0.05524252097694027, 0.08687207742696224, 0.0857082003422518, 0.08569298314820373, 0.2847856232930974, 0.11030082518483997, 0.08078333977335894, 9.999999999998899e-05, 9.999999999998899e-05, 0.06576360652741953, 0.08264230312249932, 0.12279269435814111, 9.999999999998899e-05, 0.05038151529454549, 0.050817378214639164, 0.08694054996549716, 0.5808418945828069, 0.6080247484372157, 0.5583110071763231, 0.5591270571796048, 0.5575521353288737, 0.20987020714261384, 0.6052939750285296, 0.5538912300026686, 0.5515724840786852, 0.04918398783738698, 0.09341986392220591, 0.050258537247197976, 0.11421417141896384, 0.03348785748752636, 0.09382345031591266, 0.05806281509780897, 0.10755087460107138, 0.10581450714358143, 0.20861253950392755, 0.1863652271110472, 0.15380168862749688, 0.23857654059607614, 0.15239927458850977, 0.15299939195536627, 0.1801192570781519, 0.18282291117197158, 0.25352356281373334, 0.2110003946070197, 0.23421152732254236, 0.1858003096269707, 0.2232024194004435, 0.16292147369734922, 0.3870302970436418, 0.23613808487473376, 0.21626288649817682, 0.13641238721453097, 0.16051517032679707, 0.22319065036572527, 0.2574716201948669, 0.1429169618665146, 0.12031860396807037, 0.3112302762868705, 0.11358259547105953, 0.2621197853943824, 0.16006697610920329, 0.21520163982342733, 0.16536541019869744, 0.28915570484095254, 0.29462712876179065, 0.142082119716039, 0.3437188272145205, 0.20550969131773988, 0.2188675520156501, 0.2437256692788885, 0.1788145570141152, 0.19096905210164983, 0.19178592620104173, 0.2021503607516728, 0.2155292147581681, 0.18781460070623157, 0.17543564178074134, 0.17565525501662105, 0.2074630763332913, 0.9645150994938512, 0.9620982741255045, 0.1888756442742039, 0.17349450497339947, 0.20272548404669366, 0.11829650403085779, 0.154957984810699, 0.12738878148285748, 0.15497872808671875, 0.835352796843349, 0.11343596052101279, 0.7555334110682126, 0.22845062671852412, 0.21388002196805533, 0.21499274702835947, 0.14342675348830358, 0.10975363168777752, 0.878118376316764, 0.21030577015963692, 0.2294294183820068, 0.19358285943340536, 0.2676149504202102, 0.1910552996560846, 0.23105801354744981, 0.3008748174595862, 0.19420814204455816, 0.24638708904432383, 0.10386479840013485, 0.08750654855862516, 0.11684758422574959, 0.11968210386487588, 0.0858392809292281, 0.13380694625256473, 0.09572186245248537, 0.07599006558397436, 0.08481074609243966]}, "mutation_prompt": null}
{"id": "78f8f666-358a-4865-83b5-cc0e2d81dedd", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n\n        evaluations = self.population_size\n\n        # Chaotic sequence for enhanced exploration\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters with chaotic influence\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                # Update velocities and positions\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSO", "description": "Enhanced Adaptive Dynamic Swarm Optimization using a chaotic sequence for improved exploration and convergence.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f525a6ad-14a1-4746-9ac5-281959d9f04a", "metadata": {"aucs": [0.9606421521491567, 0.9668183494372784, 0.9631173264239539, 0.19152250335080534, 0.9591354798167535, 0.9497260652698799, 0.18362532799292863, 0.9662964461724485, 0.9590758850318503, 0.870276671193236, 0.8360869028517419, 0.044918167030527534, 0.8996928018794866, 0.8725391114523323, 0.9116418294454794, 0.06258831314903968, 0.9056833504483991, 0.905927765678619, 0.10896171949789601, 0.1738665431701385, 0.15787460675464027, 0.15260727546595787, 0.053373433968228134, 0.1712213839462744, 0.13609020884797918, 0.03932861572973512, 0.1035469944657017, 0.17526261939576038, 0.10834511395180091, 0.1135482504788009, 0.11572510855544371, 0.040802954419393966, 0.08460470255534569, 0.05858917052194079, 0.11306099145245918, 0.14587753037177897, 0.9965599164066729, 0.9944518748694048, 0.9966516213229507, 0.9939240628021291, 0.9945403672947017, 0.9949994644323426, 0.9916295349048333, 0.9966791269088735, 0.9956687050377321, 0.060270081623678196, 0.055828423019463336, 0.8690617960076695, 0.6435033979805833, 0.5419692327982824, 0.27261759630440197, 0.12869013963314901, 0.0896027249932626, 0.0895509384785349, 0.22638307354498133, 0.16897469383153418, 0.2039023389437703, 0.21589038788135928, 0.05380388922728163, 0.1963309203970981, 0.06821955731301421, 0.11702765009435756, 0.19582786722763956, 0.3875029135335776, 0.21434302788134962, 0.21985722485217563, 0.22907988209305308, 9.999999999998899e-05, 0.35314854989691535, 0.23584823503788999, 0.2648118936847873, 0.21053037879433056, 0.1374432737450192, 0.0005424007391671148, 0.13596131967175884, 0.26900027499337553, 0.25992076828985133, 0.23859610890004368, 0.26744093466241725, 0.03550310670461854, 0.26684285621434256, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.055634562971867085, 0.1309583207928865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027964602005681627, 0.045395695681775705, 0.03789612497234596, 0.047086079682287396, 0.08338368745833846, 9.999999999998899e-05, 0.006652879854137095, 0.06747487157051169, 0.029333785990683814, 9.999999999998899e-05, 0.05570328209967068, 0.055882482227813335, 0.05524252097694027, 0.08687207742696224, 0.0857082003422518, 0.08569298314820373, 0.2847856232930974, 0.11030082518483997, 0.08078333977335894, 9.999999999998899e-05, 9.999999999998899e-05, 0.06576360652741953, 0.08264230312249932, 0.12279269435814111, 9.999999999998899e-05, 0.05038151529454549, 0.050817378214639164, 0.08694054996549716, 0.5808418945828069, 0.6080247484372157, 0.5583110071763231, 0.5591270571796048, 0.5575521353288737, 0.20987020714261384, 0.6052939750285296, 0.5538912300026686, 0.5515724840786852, 0.04918398783738698, 0.09341986392220591, 0.050258537247197976, 0.11421417141896384, 0.03348785748752636, 0.09382345031591266, 0.05806281509780897, 0.10755087460107138, 0.10581450714358143, 0.20861253950392755, 0.1863652271110472, 0.15380168862749688, 0.23857654059607614, 0.15239927458850977, 0.15299939195536627, 0.1801192570781519, 0.18282291117197158, 0.25352356281373334, 0.2110003946070197, 0.23421152732254236, 0.1858003096269707, 0.2232024194004435, 0.16292147369734922, 0.3870302970436418, 0.23613808487473376, 0.21626288649817682, 0.13641238721453097, 0.16051517032679707, 0.22319065036572527, 0.2574716201948669, 0.1429169618665146, 0.12031860396807037, 0.3112302762868705, 0.11358259547105953, 0.2621197853943824, 0.16006697610920329, 0.21520163982342733, 0.16536541019869744, 0.28915570484095254, 0.29462712876179065, 0.142082119716039, 0.3437188272145205, 0.20550969131773988, 0.2188675520156501, 0.2437256692788885, 0.1788145570141152, 0.19096905210164983, 0.19178592620104173, 0.2021503607516728, 0.2155292147581681, 0.18781460070623157, 0.17543564178074134, 0.17565525501662105, 0.2074630763332913, 0.9645150994938512, 0.9620982741255045, 0.1888756442742039, 0.17349450497339947, 0.20272548404669366, 0.11829650403085779, 0.154957984810699, 0.12738878148285748, 0.15497872808671875, 0.835352796843349, 0.11343596052101279, 0.7555334110682126, 0.22845062671852412, 0.21388002196805533, 0.21499274702835947, 0.14342675348830358, 0.10975363168777752, 0.878118376316764, 0.21030577015963692, 0.2294294183820068, 0.19358285943340536, 0.2676149504202102, 0.1910552996560846, 0.23105801354744981, 0.3008748174595862, 0.19420814204455816, 0.24638708904432383, 0.10386479840013485, 0.08750654855862516, 0.11684758422574959, 0.11968210386487588, 0.0858392809292281, 0.13380694625256473, 0.09572186245248537, 0.07599006558397436, 0.08481074609243966]}, "mutation_prompt": null}
{"id": "5a67dd41-5f4f-41bb-978b-7f8ffcd030ac", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n\n        evaluations = self.population_size\n\n        # Chaotic sequence for enhanced exploration\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters with chaotic influence\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                # Update velocities and positions\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSO", "description": "Enhanced Adaptive Dynamic Swarm Optimization using a chaotic sequence for improved exploration and convergence.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f525a6ad-14a1-4746-9ac5-281959d9f04a", "metadata": {"aucs": [0.9606421521491567, 0.9668183494372784, 0.9631173264239539, 0.19152250335080534, 0.9591354798167535, 0.9497260652698799, 0.18362532799292863, 0.9662964461724485, 0.9590758850318503, 0.870276671193236, 0.8360869028517419, 0.044918167030527534, 0.8996928018794866, 0.8725391114523323, 0.9116418294454794, 0.06258831314903968, 0.9056833504483991, 0.905927765678619, 0.10896171949789601, 0.1738665431701385, 0.15787460675464027, 0.15260727546595787, 0.053373433968228134, 0.1712213839462744, 0.13609020884797918, 0.03932861572973512, 0.1035469944657017, 0.17526261939576038, 0.10834511395180091, 0.1135482504788009, 0.11572510855544371, 0.040802954419393966, 0.08460470255534569, 0.05858917052194079, 0.11306099145245918, 0.14587753037177897, 0.9965599164066729, 0.9944518748694048, 0.9966516213229507, 0.9939240628021291, 0.9945403672947017, 0.9949994644323426, 0.9916295349048333, 0.9966791269088735, 0.9956687050377321, 0.060270081623678196, 0.055828423019463336, 0.8690617960076695, 0.6435033979805833, 0.5419692327982824, 0.27261759630440197, 0.12869013963314901, 0.0896027249932626, 0.0895509384785349, 0.22638307354498133, 0.16897469383153418, 0.2039023389437703, 0.21589038788135928, 0.05380388922728163, 0.1963309203970981, 0.06821955731301421, 0.11702765009435756, 0.19582786722763956, 0.3875029135335776, 0.21434302788134962, 0.21985722485217563, 0.22907988209305308, 9.999999999998899e-05, 0.35314854989691535, 0.23584823503788999, 0.2648118936847873, 0.21053037879433056, 0.1374432737450192, 0.0005424007391671148, 0.13596131967175884, 0.26900027499337553, 0.25992076828985133, 0.23859610890004368, 0.26744093466241725, 0.03550310670461854, 0.26684285621434256, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.055634562971867085, 0.1309583207928865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027964602005681627, 0.045395695681775705, 0.03789612497234596, 0.047086079682287396, 0.08338368745833846, 9.999999999998899e-05, 0.006652879854137095, 0.06747487157051169, 0.029333785990683814, 9.999999999998899e-05, 0.05570328209967068, 0.055882482227813335, 0.05524252097694027, 0.08687207742696224, 0.0857082003422518, 0.08569298314820373, 0.2847856232930974, 0.11030082518483997, 0.08078333977335894, 9.999999999998899e-05, 9.999999999998899e-05, 0.06576360652741953, 0.08264230312249932, 0.12279269435814111, 9.999999999998899e-05, 0.05038151529454549, 0.050817378214639164, 0.08694054996549716, 0.5808418945828069, 0.6080247484372157, 0.5583110071763231, 0.5591270571796048, 0.5575521353288737, 0.20987020714261384, 0.6052939750285296, 0.5538912300026686, 0.5515724840786852, 0.04918398783738698, 0.09341986392220591, 0.050258537247197976, 0.11421417141896384, 0.03348785748752636, 0.09382345031591266, 0.05806281509780897, 0.10755087460107138, 0.10581450714358143, 0.20861253950392755, 0.1863652271110472, 0.15380168862749688, 0.23857654059607614, 0.15239927458850977, 0.15299939195536627, 0.1801192570781519, 0.18282291117197158, 0.25352356281373334, 0.2110003946070197, 0.23421152732254236, 0.1858003096269707, 0.2232024194004435, 0.16292147369734922, 0.3870302970436418, 0.23613808487473376, 0.21626288649817682, 0.13641238721453097, 0.16051517032679707, 0.22319065036572527, 0.2574716201948669, 0.1429169618665146, 0.12031860396807037, 0.3112302762868705, 0.11358259547105953, 0.2621197853943824, 0.16006697610920329, 0.21520163982342733, 0.16536541019869744, 0.28915570484095254, 0.29462712876179065, 0.142082119716039, 0.3437188272145205, 0.20550969131773988, 0.2188675520156501, 0.2437256692788885, 0.1788145570141152, 0.19096905210164983, 0.19178592620104173, 0.2021503607516728, 0.2155292147581681, 0.18781460070623157, 0.17543564178074134, 0.17565525501662105, 0.2074630763332913, 0.9645150994938512, 0.9620982741255045, 0.1888756442742039, 0.17349450497339947, 0.20272548404669366, 0.11829650403085779, 0.154957984810699, 0.12738878148285748, 0.15497872808671875, 0.835352796843349, 0.11343596052101279, 0.7555334110682126, 0.22845062671852412, 0.21388002196805533, 0.21499274702835947, 0.14342675348830358, 0.10975363168777752, 0.878118376316764, 0.21030577015963692, 0.2294294183820068, 0.19358285943340536, 0.2676149504202102, 0.1910552996560846, 0.23105801354744981, 0.3008748174595862, 0.19420814204455816, 0.24638708904432383, 0.10386479840013485, 0.08750654855862516, 0.11684758422574959, 0.11968210386487588, 0.0858392809292281, 0.13380694625256473, 0.09572186245248537, 0.07599006558397436, 0.08481074609243966]}, "mutation_prompt": null}
{"id": "c26657b1-0a5b-40dd-9d1b-ee76a4fefb90", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n\n        evaluations = self.population_size\n\n        # Chaotic sequence for enhanced exploration\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n\n        def levy_flight(Lambda):\n            sigma1 = np.power((np.gamma(1 + Lambda) * np.sin(np.pi * Lambda / 2)) /\n                              (np.gamma((1 + Lambda) / 2) * Lambda * np.power(2, (Lambda - 1) / 2)), 1 / Lambda)\n            sigma2 = 1\n            u = np.random.normal(0, sigma1, size=self.dim)\n            v = np.random.normal(0, sigma2, size=self.dim)\n            step = u / np.power(np.abs(v), 1 / Lambda)\n            return step\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters with chaotic influence\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                # Update velocities and positions\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                \n                # Incorporate Levy flight for enhanced global search\n                levy_step = levy_flight(1.5)\n                if np.random.rand() < 0.3:  # 30% chance to apply Levy flight\n                    velocities[i] += levy_step * np.random.uniform(-1, 1, self.dim)\n                \n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSO", "description": "EnhancedADSO with Levy flight to improve global exploration and convergence.", "configspace": "", "generation": 22, "fitness": -Infinity, "feedback": "An exception occurred: AttributeError(\"module 'numpy' has no attribute 'gamma'\").", "error": "AttributeError(\"module 'numpy' has no attribute 'gamma'\")", "parent_id": "f525a6ad-14a1-4746-9ac5-281959d9f04a", "metadata": {}, "mutation_prompt": null}
{"id": "c252d855-3606-4bae-8c23-1394e84274a2", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n\n        evaluations = self.population_size\n\n        # Chaotic sequence for enhanced exploration\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters with chaotic influence\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                # Update velocities and positions\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSO", "description": "Enhanced Adaptive Dynamic Swarm Optimization using a chaotic sequence for improved exploration and convergence.", "configspace": "", "generation": 17, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "f525a6ad-14a1-4746-9ac5-281959d9f04a", "metadata": {"aucs": [0.9606421521491567, 0.9668183494372784, 0.9631173264239539, 0.19152250335080534, 0.9591354798167535, 0.9497260652698799, 0.18362532799292863, 0.9662964461724485, 0.9590758850318503, 0.870276671193236, 0.8360869028517419, 0.044918167030527534, 0.8996928018794866, 0.8725391114523323, 0.9116418294454794, 0.06258831314903968, 0.9056833504483991, 0.905927765678619, 0.10896171949789601, 0.1738665431701385, 0.15787460675464027, 0.15260727546595787, 0.053373433968228134, 0.1712213839462744, 0.13609020884797918, 0.03932861572973512, 0.1035469944657017, 0.17526261939576038, 0.10834511395180091, 0.1135482504788009, 0.11572510855544371, 0.040802954419393966, 0.08460470255534569, 0.05858917052194079, 0.11306099145245918, 0.14587753037177897, 0.9965599164066729, 0.9944518748694048, 0.9966516213229507, 0.9939240628021291, 0.9945403672947017, 0.9949994644323426, 0.9916295349048333, 0.9966791269088735, 0.9956687050377321, 0.060270081623678196, 0.055828423019463336, 0.8690617960076695, 0.6435033979805833, 0.5419692327982824, 0.27261759630440197, 0.12869013963314901, 0.0896027249932626, 0.0895509384785349, 0.22638307354498133, 0.16897469383153418, 0.2039023389437703, 0.21589038788135928, 0.05380388922728163, 0.1963309203970981, 0.06821955731301421, 0.11702765009435756, 0.19582786722763956, 0.3875029135335776, 0.21434302788134962, 0.21985722485217563, 0.22907988209305308, 9.999999999998899e-05, 0.35314854989691535, 0.23584823503788999, 0.2648118936847873, 0.21053037879433056, 0.1374432737450192, 0.0005424007391671148, 0.13596131967175884, 0.26900027499337553, 0.25992076828985133, 0.23859610890004368, 0.26744093466241725, 0.03550310670461854, 0.26684285621434256, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.055634562971867085, 0.1309583207928865, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.027964602005681627, 0.045395695681775705, 0.03789612497234596, 0.047086079682287396, 0.08338368745833846, 9.999999999998899e-05, 0.006652879854137095, 0.06747487157051169, 0.029333785990683814, 9.999999999998899e-05, 0.05570328209967068, 0.055882482227813335, 0.05524252097694027, 0.08687207742696224, 0.0857082003422518, 0.08569298314820373, 0.2847856232930974, 0.11030082518483997, 0.08078333977335894, 9.999999999998899e-05, 9.999999999998899e-05, 0.06576360652741953, 0.08264230312249932, 0.12279269435814111, 9.999999999998899e-05, 0.05038151529454549, 0.050817378214639164, 0.08694054996549716, 0.5808418945828069, 0.6080247484372157, 0.5583110071763231, 0.5591270571796048, 0.5575521353288737, 0.20987020714261384, 0.6052939750285296, 0.5538912300026686, 0.5515724840786852, 0.04918398783738698, 0.09341986392220591, 0.050258537247197976, 0.11421417141896384, 0.03348785748752636, 0.09382345031591266, 0.05806281509780897, 0.10755087460107138, 0.10581450714358143, 0.20861253950392755, 0.1863652271110472, 0.15380168862749688, 0.23857654059607614, 0.15239927458850977, 0.15299939195536627, 0.1801192570781519, 0.18282291117197158, 0.25352356281373334, 0.2110003946070197, 0.23421152732254236, 0.1858003096269707, 0.2232024194004435, 0.16292147369734922, 0.3870302970436418, 0.23613808487473376, 0.21626288649817682, 0.13641238721453097, 0.16051517032679707, 0.22319065036572527, 0.2574716201948669, 0.1429169618665146, 0.12031860396807037, 0.3112302762868705, 0.11358259547105953, 0.2621197853943824, 0.16006697610920329, 0.21520163982342733, 0.16536541019869744, 0.28915570484095254, 0.29462712876179065, 0.142082119716039, 0.3437188272145205, 0.20550969131773988, 0.2188675520156501, 0.2437256692788885, 0.1788145570141152, 0.19096905210164983, 0.19178592620104173, 0.2021503607516728, 0.2155292147581681, 0.18781460070623157, 0.17543564178074134, 0.17565525501662105, 0.2074630763332913, 0.9645150994938512, 0.9620982741255045, 0.1888756442742039, 0.17349450497339947, 0.20272548404669366, 0.11829650403085779, 0.154957984810699, 0.12738878148285748, 0.15497872808671875, 0.835352796843349, 0.11343596052101279, 0.7555334110682126, 0.22845062671852412, 0.21388002196805533, 0.21499274702835947, 0.14342675348830358, 0.10975363168777752, 0.878118376316764, 0.21030577015963692, 0.2294294183820068, 0.19358285943340536, 0.2676149504202102, 0.1910552996560846, 0.23105801354744981, 0.3008748174595862, 0.19420814204455816, 0.24638708904432383, 0.10386479840013485, 0.08750654855862516, 0.11684758422574959, 0.11968210386487588, 0.0858392809292281, 0.13380694625256473, 0.09572186245248537, 0.07599006558397436, 0.08481074609243966]}, "mutation_prompt": null}
{"id": "174dfd87-246f-490c-a41a-9d48620c2142", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n\n        evaluations = self.population_size\n\n        # Chaotic sequence for enhanced exploration\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters with chaotic influence\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                # Update velocities and positions with adaptive velocity clamping\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSO", "description": "Enhanced Adaptive Dynamic Swarm Optimization with adaptive velocity clamping for improved balance between exploration and exploitation.", "configspace": "", "generation": 24, "fitness": 0.3120094668657345, "feedback": "The algorithm EnhancedADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.31.", "error": "", "parent_id": "f525a6ad-14a1-4746-9ac5-281959d9f04a", "metadata": {"aucs": [0.9672889460943264, 0.9655140257204778, 0.9682345925081576, 0.960720516925544, 0.9580731714767021, 0.9657190611971629, 0.9670858759645922, 0.9670105639246046, 0.9590031341573582, 0.9109831458348876, 0.90018785640823, 0.9133472036111555, 0.9185820767461782, 0.8827259290831997, 0.8935957718398462, 0.9157124128694627, 0.9046357388488894, 0.8963919193884613, 0.08258084098310481, 0.1258025063507101, 0.054088180535653896, 0.062087692075551426, 0.1504937931204171, 0.11621406356190933, 0.09242994411244976, 0.05880190393443829, 0.03947782865330596, 0.10050100394219064, 0.07962151858363598, 0.12491678570990938, 0.13994710885763872, 0.1639556612635642, 0.10789120934742402, 0.1277169940284768, 0.04913464904206233, 0.07536419363142777, 0.9868878181648546, 0.9815436662618467, 0.9867949800291644, 0.9742938409634142, 0.9856479249729025, 0.9868776237678425, 0.980509262001661, 0.9764355008951185, 0.09945001530892428, 0.8695576037825782, 0.9069584047046176, 0.9091321419738142, 0.9130002231642697, 0.43423050829768695, 0.8917820729280459, 0.8930124311091302, 0.8746035432429233, 0.8723957125551702, 0.21885232428872636, 0.1617755219082494, 0.20706450290895884, 0.39499916188845663, 0.23001985285363802, 0.19785953418133506, 0.2599439816898593, 0.25125100898241204, 0.2071926602922861, 0.2842844058934746, 0.22077093711286278, 0.22789845254207575, 0.3201271860419157, 0.19731848635057803, 0.2346104833201833, 0.22824143509658856, 0.1376812470238581, 0.2213692706757684, 0.2337870732443167, 0.1531490134798078, 0.18559655135200304, 0.2339152589722947, 0.25302953342069934, 0.23687111691580698, 0.2725710023487945, 9.999999999998899e-05, 0.2751716198701235, 0.00011266821717725861, 0.00041641946556048026, 0.09022848871299627, 0.037578242534705875, 0.050116360548273065, 9.999999999998899e-05, 0.0059339144085859274, 0.06589749768909747, 9.999999999998899e-05, 0.14500087434875708, 0.09763341654236668, 0.09831612458370886, 0.052709223086294554, 0.020003565796235856, 0.03121721952694334, 0.08396922175893795, 0.0733937649234635, 0.14422779277363518, 0.1113886984383704, 0.2693691699592692, 0.31029816142931455, 0.11628277306357415, 0.08568678636554217, 0.14804824915780213, 0.09820991619607589, 0.20073212034212706, 0.08157391211825593, 0.2108272049324852, 0.08065242230399505, 0.06167295559803554, 0.10124611518554594, 0.0069424289428090535, 0.1347273519305403, 0.08685579034358148, 0.07481612047468622, 0.08667613399484686, 0.617464298299677, 0.5772999564309707, 0.6131707903905133, 0.5772957368236936, 0.5638573267594187, 0.20944262130877844, 0.6215265324839134, 0.6241908896770444, 0.5367699392703836, 0.03795561241371648, 0.06720852772204544, 0.034745692440503295, 0.0547595285997855, 0.06937922424569787, 0.09523615310128153, 0.05227105595724002, 0.07632593180879776, 0.08181649051064743, 0.20079425347290658, 0.24462110211288024, 0.24372474175293124, 0.19147136210533822, 0.20285685288051702, 0.15028302051835163, 0.176262930961273, 0.27485076987335255, 0.3293254536097219, 0.1704798750370483, 0.27624910165078165, 0.20109968887564733, 0.15156478169400178, 0.40311593633677034, 0.16213678744266313, 0.16767136463967347, 0.18741546781258012, 0.1364865975035071, 0.29943070331836774, 0.16811955051871608, 0.12322456409746896, 0.09856300067476009, 0.19351753280889206, 0.33278515906422734, 0.19585617680715406, 0.21684709497510568, 0.1588178060926151, 0.24590889242762082, 0.19065338111331098, 0.21999561678085733, 0.23921629846671455, 0.2473096753991636, 0.25139841550951314, 0.25018973806023814, 0.2563181655485187, 0.24827680422815313, 0.17104482340169047, 0.17438777549518525, 0.18652137383221978, 0.17877506396978893, 0.18376906354855005, 0.1636054453564666, 0.21337348416290047, 0.1799529095456721, 0.1824618557806874, 0.18965855790492214, 0.944706882767557, 0.18967505937084783, 0.17407502042711054, 0.2024186369075911, 0.11514414713071586, 0.16920610830415883, 0.1682514999497675, 0.16895851279997331, 0.9404226689703613, 0.11331609994785175, 0.7194126168594819, 0.7544267691831578, 0.15654660318094904, 0.21453194170402157, 0.06492637246840027, 0.09479795286667814, 0.8776146410149472, 0.2091131807892933, 0.21298604665218668, 0.23928538562252466, 0.24603521753449065, 0.213028212963975, 0.22140339266894704, 0.24320925850642117, 0.21760492859757474, 0.1855562318085856, 0.0854737887161473, 0.09777782081210828, 0.06579061783338969, 0.10910852346069766, 0.101573353670667, 0.08004841530980045, 0.07672787960328153, 0.09241158114311743, 0.09001032523259656]}, "mutation_prompt": null}
{"id": "ecdc4644-fb8e-4182-b011-25031bcab245", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n\n        evaluations = self.population_size\n\n        # Chaotic sequence for enhanced exploration\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters with chaotic influence\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                # Update velocities and positions with adaptive velocity clamping\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSO", "description": "Enhanced Adaptive Dynamic Swarm Optimization with adaptive velocity clamping for improved balance between exploration and exploitation.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "174dfd87-246f-490c-a41a-9d48620c2142", "metadata": {"aucs": [0.9672889460943264, 0.9655140257204778, 0.9682345925081576, 0.960720516925544, 0.9580731714767021, 0.9657190611971629, 0.9670858759645922, 0.9670105639246046, 0.9590031341573582, 0.9109831458348876, 0.90018785640823, 0.9133472036111555, 0.9185820767461782, 0.8827259290831997, 0.8935957718398462, 0.9157124128694627, 0.9046357388488894, 0.8963919193884613, 0.08258084098310481, 0.1258025063507101, 0.054088180535653896, 0.062087692075551426, 0.1504937931204171, 0.11621406356190933, 0.09242994411244976, 0.05880190393443829, 0.03947782865330596, 0.10050100394219064, 0.07962151858363598, 0.12491678570990938, 0.13994710885763872, 0.1639556612635642, 0.10789120934742402, 0.1277169940284768, 0.04913464904206233, 0.07536419363142777, 0.9868878181648546, 0.9815436662618467, 0.9867949800291644, 0.9742938409634142, 0.9856479249729025, 0.9868776237678425, 0.980509262001661, 0.9764355008951185, 0.09945001530892428, 0.8695576037825782, 0.9069584047046176, 0.9091321419738142, 0.9130002231642697, 0.43423050829768695, 0.8917820729280459, 0.8930124311091302, 0.8746035432429233, 0.8723957125551702, 0.21885232428872636, 0.1617755219082494, 0.20706450290895884, 0.39499916188845663, 0.23001985285363802, 0.19785953418133506, 0.2599439816898593, 0.25125100898241204, 0.2071926602922861, 0.2842844058934746, 0.22077093711286278, 0.22789845254207575, 0.3201271860419157, 0.19731848635057803, 0.2346104833201833, 0.22824143509658856, 0.1376812470238581, 0.2213692706757684, 0.2337870732443167, 0.1531490134798078, 0.18559655135200304, 0.2339152589722947, 0.25302953342069934, 0.23687111691580698, 0.2725710023487945, 9.999999999998899e-05, 0.2751716198701235, 0.00011266821717725861, 0.00041641946556048026, 0.09022848871299627, 0.037578242534705875, 0.050116360548273065, 9.999999999998899e-05, 0.0059339144085859274, 0.06589749768909747, 9.999999999998899e-05, 0.14500087434875708, 0.09763341654236668, 0.09831612458370886, 0.052709223086294554, 0.020003565796235856, 0.03121721952694334, 0.08396922175893795, 0.0733937649234635, 0.14422779277363518, 0.1113886984383704, 0.2693691699592692, 0.31029816142931455, 0.11628277306357415, 0.08568678636554217, 0.14804824915780213, 0.09820991619607589, 0.20073212034212706, 0.08157391211825593, 0.2108272049324852, 0.08065242230399505, 0.06167295559803554, 0.10124611518554594, 0.0069424289428090535, 0.1347273519305403, 0.08685579034358148, 0.07481612047468622, 0.08667613399484686, 0.617464298299677, 0.5772999564309707, 0.6131707903905133, 0.5772957368236936, 0.5638573267594187, 0.20944262130877844, 0.6215265324839134, 0.6241908896770444, 0.5367699392703836, 0.03795561241371648, 0.06720852772204544, 0.034745692440503295, 0.0547595285997855, 0.06937922424569787, 0.09523615310128153, 0.05227105595724002, 0.07632593180879776, 0.08181649051064743, 0.20079425347290658, 0.24462110211288024, 0.24372474175293124, 0.19147136210533822, 0.20285685288051702, 0.15028302051835163, 0.176262930961273, 0.27485076987335255, 0.3293254536097219, 0.1704798750370483, 0.27624910165078165, 0.20109968887564733, 0.15156478169400178, 0.40311593633677034, 0.16213678744266313, 0.16767136463967347, 0.18741546781258012, 0.1364865975035071, 0.29943070331836774, 0.16811955051871608, 0.12322456409746896, 0.09856300067476009, 0.19351753280889206, 0.33278515906422734, 0.19585617680715406, 0.21684709497510568, 0.1588178060926151, 0.24590889242762082, 0.19065338111331098, 0.21999561678085733, 0.23921629846671455, 0.2473096753991636, 0.25139841550951314, 0.25018973806023814, 0.2563181655485187, 0.24827680422815313, 0.17104482340169047, 0.17438777549518525, 0.18652137383221978, 0.17877506396978893, 0.18376906354855005, 0.1636054453564666, 0.21337348416290047, 0.1799529095456721, 0.1824618557806874, 0.18965855790492214, 0.944706882767557, 0.18967505937084783, 0.17407502042711054, 0.2024186369075911, 0.11514414713071586, 0.16920610830415883, 0.1682514999497675, 0.16895851279997331, 0.9404226689703613, 0.11331609994785175, 0.7194126168594819, 0.7544267691831578, 0.15654660318094904, 0.21453194170402157, 0.06492637246840027, 0.09479795286667814, 0.8776146410149472, 0.2091131807892933, 0.21298604665218668, 0.23928538562252466, 0.24603521753449065, 0.213028212963975, 0.22140339266894704, 0.24320925850642117, 0.21760492859757474, 0.1855562318085856, 0.0854737887161473, 0.09777782081210828, 0.06579061783338969, 0.10910852346069766, 0.101573353670667, 0.08004841530980045, 0.07672787960328153, 0.09241158114311743, 0.09001032523259656]}, "mutation_prompt": null}
{"id": "44510d4d-77fc-4871-920a-34f4968aeabe", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n\n        evaluations = self.population_size\n\n        # Chaotic sequence for enhanced exploration\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters with chaotic influence\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                # Update velocities and positions with adaptive velocity clamping\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Chaotic mutation applied to enhance exploration\n                mutation_index = np.random.randint(self.dim)\n                population[i, mutation_index] += chaotic_sequence[(evaluations + i) % len(chaotic_sequence)] * (self.bounds[1] - self.bounds[0]) * 0.02\n\n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSO", "description": "Enhanced Adaptive Dynamic Swarm Optimization with chaotic mutation strategy for further enhanced exploration capabilities.", "configspace": "", "generation": 26, "fitness": 0.22719685917056712, "feedback": "The algorithm EnhancedADSO got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.23 with standard deviation 0.21.", "error": "", "parent_id": "174dfd87-246f-490c-a41a-9d48620c2142", "metadata": {"aucs": [0.5181237253380628, 0.533591643095646, 0.5186509094685504, 0.5026895750588325, 0.4913012794143211, 0.5065598263990924, 0.5261822813518076, 0.4904608077385134, 0.4984066981340671, 0.039410080842579354, 0.032659598800536704, 0.02214521039330153, 0.012688913452923445, 0.1021025742852738, 0.08307324311742392, 0.043191474624682424, 0.08488396727126624, 0.052043110451595376, 0.0808365788247506, 0.09853509837502428, 0.11361963195154168, 0.1262832576645715, 0.10713708961085944, 0.10773287714892121, 0.07838167735187418, 0.08682050923629614, 0.0955791149393379, 0.13463755015854983, 0.12143447042445021, 0.08647452364770358, 0.10782925468621818, 0.10357887156986367, 0.10236829949233961, 0.12003799183174357, 0.0670413823578696, 0.0695007436217191, 0.9898094431967823, 0.9842825285551104, 0.9873014655187629, 0.9840480025970125, 0.9877785564400795, 0.986741071773361, 0.9689826594526704, 0.9820881826673163, 0.974185085330287, 0.3616614389185996, 0.3624159746654615, 0.3529092019943538, 0.355489999787033, 0.33965167883334413, 0.3227770449742553, 0.3714815553124249, 0.35830100800758624, 0.3737327543261125, 0.34856211669315096, 0.1649336450056912, 0.2221185124560452, 0.38451838532401794, 0.2836542962105334, 0.39488314785785994, 0.3719692289041552, 0.3891402532129735, 0.23148327932599433, 0.18597476617463704, 0.16892767570762413, 0.18190582096514862, 0.20895894824268557, 0.116315589436636, 0.16357834160653906, 0.18686362445922156, 0.1901200356111199, 0.19102897716028833, 0.1972945749877245, 0.19547462610344712, 0.14853036389491536, 0.13396306108029932, 0.17543389840230394, 0.2247148855877653, 0.18964701759727054, 0.13520190347237726, 0.1962871426808337, 9.999999999998899e-05, 9.999999999998899e-05, 0.04542994672978873, 0.06045739213910051, 9.999999999998899e-05, 0.0035777284769954454, 0.007477146362242282, 9.999999999998899e-05, 9.999999999998899e-05, 0.1156064362437701, 0.07026430785537596, 0.09692148707151227, 0.027710154391450526, 0.006267952767351148, 0.035506079765247, 0.11845453164123065, 0.07497951619264898, 0.09081772067220772, 0.0056193369904323776, 9.999999999998899e-05, 0.07017541355260326, 9.999999999998899e-05, 9.999999999998899e-05, 0.019717360156460195, 9.999999999998899e-05, 0.04277887231086097, 0.01735813074880388, 0.1093764560476691, 0.08722001457667561, 0.11165669218872676, 0.14811820487826077, 0.05546439001650527, 0.1609741627361756, 0.12429152791999931, 0.08154385953074939, 0.08004916120265515, 0.4623735736428982, 0.4521158216286868, 0.44510838542850084, 0.4092317142763371, 0.4527148475803787, 0.44954015582220963, 0.45613058504550863, 0.5153907829130657, 0.4352891499212447, 0.10485711645159612, 0.08629946623270479, 0.09308285752015799, 0.10385532948224996, 0.0707378889146354, 0.07421417950773557, 0.08693423058084793, 0.13616880171270407, 0.08841050873507506, 0.17942559861180885, 0.13980243775869916, 0.22829409152592683, 0.3323730103234297, 0.1935212359461148, 0.18327593884416193, 0.15334500004332408, 0.21875086998833393, 0.30157094753092184, 0.18373218428139138, 0.32336073316099045, 0.16429420442927622, 0.3079755273881567, 0.19105039693923553, 0.28421821424231397, 0.19813456358964043, 0.21332149320437188, 0.18879473082173293, 0.21370654703162784, 0.2306891888378534, 0.23892347703714378, 0.20938939437427428, 0.2051115624423141, 0.23078693142638473, 0.20681109635604533, 0.2212633260166753, 0.16695666928099162, 0.18337920726032542, 0.19525696001910298, 0.2030533812491896, 0.21149109978559544, 0.21749109625073337, 0.21653143599047153, 0.2221210239584781, 0.22751818825547032, 0.22246843306507402, 0.22920335197802288, 0.2078010721889899, 0.1905419597825203, 0.2050896571062757, 0.1973124129565872, 0.17537728462748126, 0.21301800297451878, 0.2523404753073418, 0.19884754100203772, 0.17973585419593752, 0.753569944311237, 0.18950778729150974, 0.17402865372327436, 0.20220109409944387, 0.1706367221222792, 0.16914242363257548, 0.16813969424725206, 0.1548838805795847, 0.6579721346627532, 0.11294350836202716, 0.0736666246329436, 0.15614429334954727, 0.1700425467426041, 0.2144952787228025, 0.4737024776533115, 0.4292529758734668, 0.7520572791644125, 0.17624944144637034, 0.202167264078971, 0.18423856956208007, 0.189074971106169, 0.19008004333951256, 0.19111865886541968, 0.1882783196158695, 0.1966563031984241, 0.19749996600834618, 0.0900737587920154, 0.07097271634795688, 0.08460295086482206, 0.08750465808915686, 0.13407791623922005, 0.1035194472642823, 0.06359113765312763, 0.0749088188220679, 0.08777651978441103]}, "mutation_prompt": null}
{"id": "deea5df8-42f6-440b-9037-16261ba07cc9", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n\n        evaluations = self.population_size\n\n        # Chaotic sequence for enhanced exploration\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters with chaotic influence\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                # Update velocities and positions with adaptive velocity clamping\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSO", "description": "Enhanced Adaptive Dynamic Swarm Optimization with adaptive velocity clamping for improved balance between exploration and exploitation.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "174dfd87-246f-490c-a41a-9d48620c2142", "metadata": {"aucs": [0.9672889460943264, 0.9655140257204778, 0.9682345925081576, 0.960720516925544, 0.9580731714767021, 0.9657190611971629, 0.9670858759645922, 0.9670105639246046, 0.9590031341573582, 0.9109831458348876, 0.90018785640823, 0.9133472036111555, 0.9185820767461782, 0.8827259290831997, 0.8935957718398462, 0.9157124128694627, 0.9046357388488894, 0.8963919193884613, 0.08258084098310481, 0.1258025063507101, 0.054088180535653896, 0.062087692075551426, 0.1504937931204171, 0.11621406356190933, 0.09242994411244976, 0.05880190393443829, 0.03947782865330596, 0.10050100394219064, 0.07962151858363598, 0.12491678570990938, 0.13994710885763872, 0.1639556612635642, 0.10789120934742402, 0.1277169940284768, 0.04913464904206233, 0.07536419363142777, 0.9868878181648546, 0.9815436662618467, 0.9867949800291644, 0.9742938409634142, 0.9856479249729025, 0.9868776237678425, 0.980509262001661, 0.9764355008951185, 0.09945001530892428, 0.8695576037825782, 0.9069584047046176, 0.9091321419738142, 0.9130002231642697, 0.43423050829768695, 0.8917820729280459, 0.8930124311091302, 0.8746035432429233, 0.8723957125551702, 0.21885232428872636, 0.1617755219082494, 0.20706450290895884, 0.39499916188845663, 0.23001985285363802, 0.19785953418133506, 0.2599439816898593, 0.25125100898241204, 0.2071926602922861, 0.2842844058934746, 0.22077093711286278, 0.22789845254207575, 0.3201271860419157, 0.19731848635057803, 0.2346104833201833, 0.22824143509658856, 0.1376812470238581, 0.2213692706757684, 0.2337870732443167, 0.1531490134798078, 0.18559655135200304, 0.2339152589722947, 0.25302953342069934, 0.23687111691580698, 0.2725710023487945, 9.999999999998899e-05, 0.2751716198701235, 0.00011266821717725861, 0.00041641946556048026, 0.09022848871299627, 0.037578242534705875, 0.050116360548273065, 9.999999999998899e-05, 0.0059339144085859274, 0.06589749768909747, 9.999999999998899e-05, 0.14500087434875708, 0.09763341654236668, 0.09831612458370886, 0.052709223086294554, 0.020003565796235856, 0.03121721952694334, 0.08396922175893795, 0.0733937649234635, 0.14422779277363518, 0.1113886984383704, 0.2693691699592692, 0.31029816142931455, 0.11628277306357415, 0.08568678636554217, 0.14804824915780213, 0.09820991619607589, 0.20073212034212706, 0.08157391211825593, 0.2108272049324852, 0.08065242230399505, 0.06167295559803554, 0.10124611518554594, 0.0069424289428090535, 0.1347273519305403, 0.08685579034358148, 0.07481612047468622, 0.08667613399484686, 0.617464298299677, 0.5772999564309707, 0.6131707903905133, 0.5772957368236936, 0.5638573267594187, 0.20944262130877844, 0.6215265324839134, 0.6241908896770444, 0.5367699392703836, 0.03795561241371648, 0.06720852772204544, 0.034745692440503295, 0.0547595285997855, 0.06937922424569787, 0.09523615310128153, 0.05227105595724002, 0.07632593180879776, 0.08181649051064743, 0.20079425347290658, 0.24462110211288024, 0.24372474175293124, 0.19147136210533822, 0.20285685288051702, 0.15028302051835163, 0.176262930961273, 0.27485076987335255, 0.3293254536097219, 0.1704798750370483, 0.27624910165078165, 0.20109968887564733, 0.15156478169400178, 0.40311593633677034, 0.16213678744266313, 0.16767136463967347, 0.18741546781258012, 0.1364865975035071, 0.29943070331836774, 0.16811955051871608, 0.12322456409746896, 0.09856300067476009, 0.19351753280889206, 0.33278515906422734, 0.19585617680715406, 0.21684709497510568, 0.1588178060926151, 0.24590889242762082, 0.19065338111331098, 0.21999561678085733, 0.23921629846671455, 0.2473096753991636, 0.25139841550951314, 0.25018973806023814, 0.2563181655485187, 0.24827680422815313, 0.17104482340169047, 0.17438777549518525, 0.18652137383221978, 0.17877506396978893, 0.18376906354855005, 0.1636054453564666, 0.21337348416290047, 0.1799529095456721, 0.1824618557806874, 0.18965855790492214, 0.944706882767557, 0.18967505937084783, 0.17407502042711054, 0.2024186369075911, 0.11514414713071586, 0.16920610830415883, 0.1682514999497675, 0.16895851279997331, 0.9404226689703613, 0.11331609994785175, 0.7194126168594819, 0.7544267691831578, 0.15654660318094904, 0.21453194170402157, 0.06492637246840027, 0.09479795286667814, 0.8776146410149472, 0.2091131807892933, 0.21298604665218668, 0.23928538562252466, 0.24603521753449065, 0.213028212963975, 0.22140339266894704, 0.24320925850642117, 0.21760492859757474, 0.1855562318085856, 0.0854737887161473, 0.09777782081210828, 0.06579061783338969, 0.10910852346069766, 0.101573353670667, 0.08004841530980045, 0.07672787960328153, 0.09241158114311743, 0.09001032523259656]}, "mutation_prompt": null}
{"id": "684e0102-10e7-4d20-aaf5-b378df7ec936", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n\n        evaluations = self.population_size\n\n        # Chaotic sequence for enhanced exploration\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters with chaotic influence\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                # Update velocities and positions with adaptive velocity clamping\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSO", "description": "Enhanced Adaptive Dynamic Swarm Optimization with adaptive velocity clamping for improved balance between exploration and exploitation.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "174dfd87-246f-490c-a41a-9d48620c2142", "metadata": {"aucs": [0.9672889460943264, 0.9655140257204778, 0.9682345925081576, 0.960720516925544, 0.9580731714767021, 0.9657190611971629, 0.9670858759645922, 0.9670105639246046, 0.9590031341573582, 0.9109831458348876, 0.90018785640823, 0.9133472036111555, 0.9185820767461782, 0.8827259290831997, 0.8935957718398462, 0.9157124128694627, 0.9046357388488894, 0.8963919193884613, 0.08258084098310481, 0.1258025063507101, 0.054088180535653896, 0.062087692075551426, 0.1504937931204171, 0.11621406356190933, 0.09242994411244976, 0.05880190393443829, 0.03947782865330596, 0.10050100394219064, 0.07962151858363598, 0.12491678570990938, 0.13994710885763872, 0.1639556612635642, 0.10789120934742402, 0.1277169940284768, 0.04913464904206233, 0.07536419363142777, 0.9868878181648546, 0.9815436662618467, 0.9867949800291644, 0.9742938409634142, 0.9856479249729025, 0.9868776237678425, 0.980509262001661, 0.9764355008951185, 0.09945001530892428, 0.8695576037825782, 0.9069584047046176, 0.9091321419738142, 0.9130002231642697, 0.43423050829768695, 0.8917820729280459, 0.8930124311091302, 0.8746035432429233, 0.8723957125551702, 0.21885232428872636, 0.1617755219082494, 0.20706450290895884, 0.39499916188845663, 0.23001985285363802, 0.19785953418133506, 0.2599439816898593, 0.25125100898241204, 0.2071926602922861, 0.2842844058934746, 0.22077093711286278, 0.22789845254207575, 0.3201271860419157, 0.19731848635057803, 0.2346104833201833, 0.22824143509658856, 0.1376812470238581, 0.2213692706757684, 0.2337870732443167, 0.1531490134798078, 0.18559655135200304, 0.2339152589722947, 0.25302953342069934, 0.23687111691580698, 0.2725710023487945, 9.999999999998899e-05, 0.2751716198701235, 0.00011266821717725861, 0.00041641946556048026, 0.09022848871299627, 0.037578242534705875, 0.050116360548273065, 9.999999999998899e-05, 0.0059339144085859274, 0.06589749768909747, 9.999999999998899e-05, 0.14500087434875708, 0.09763341654236668, 0.09831612458370886, 0.052709223086294554, 0.020003565796235856, 0.03121721952694334, 0.08396922175893795, 0.0733937649234635, 0.14422779277363518, 0.1113886984383704, 0.2693691699592692, 0.31029816142931455, 0.11628277306357415, 0.08568678636554217, 0.14804824915780213, 0.09820991619607589, 0.20073212034212706, 0.08157391211825593, 0.2108272049324852, 0.08065242230399505, 0.06167295559803554, 0.10124611518554594, 0.0069424289428090535, 0.1347273519305403, 0.08685579034358148, 0.07481612047468622, 0.08667613399484686, 0.617464298299677, 0.5772999564309707, 0.6131707903905133, 0.5772957368236936, 0.5638573267594187, 0.20944262130877844, 0.6215265324839134, 0.6241908896770444, 0.5367699392703836, 0.03795561241371648, 0.06720852772204544, 0.034745692440503295, 0.0547595285997855, 0.06937922424569787, 0.09523615310128153, 0.05227105595724002, 0.07632593180879776, 0.08181649051064743, 0.20079425347290658, 0.24462110211288024, 0.24372474175293124, 0.19147136210533822, 0.20285685288051702, 0.15028302051835163, 0.176262930961273, 0.27485076987335255, 0.3293254536097219, 0.1704798750370483, 0.27624910165078165, 0.20109968887564733, 0.15156478169400178, 0.40311593633677034, 0.16213678744266313, 0.16767136463967347, 0.18741546781258012, 0.1364865975035071, 0.29943070331836774, 0.16811955051871608, 0.12322456409746896, 0.09856300067476009, 0.19351753280889206, 0.33278515906422734, 0.19585617680715406, 0.21684709497510568, 0.1588178060926151, 0.24590889242762082, 0.19065338111331098, 0.21999561678085733, 0.23921629846671455, 0.2473096753991636, 0.25139841550951314, 0.25018973806023814, 0.2563181655485187, 0.24827680422815313, 0.17104482340169047, 0.17438777549518525, 0.18652137383221978, 0.17877506396978893, 0.18376906354855005, 0.1636054453564666, 0.21337348416290047, 0.1799529095456721, 0.1824618557806874, 0.18965855790492214, 0.944706882767557, 0.18967505937084783, 0.17407502042711054, 0.2024186369075911, 0.11514414713071586, 0.16920610830415883, 0.1682514999497675, 0.16895851279997331, 0.9404226689703613, 0.11331609994785175, 0.7194126168594819, 0.7544267691831578, 0.15654660318094904, 0.21453194170402157, 0.06492637246840027, 0.09479795286667814, 0.8776146410149472, 0.2091131807892933, 0.21298604665218668, 0.23928538562252466, 0.24603521753449065, 0.213028212963975, 0.22140339266894704, 0.24320925850642117, 0.21760492859757474, 0.1855562318085856, 0.0854737887161473, 0.09777782081210828, 0.06579061783338969, 0.10910852346069766, 0.101573353670667, 0.08004841530980045, 0.07672787960328153, 0.09241158114311743, 0.09001032523259656]}, "mutation_prompt": null}
{"id": "73f9313c-9ab3-4de2-a15c-33b8fae6452c", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n\n        evaluations = self.population_size\n\n        # Chaotic sequence for enhanced exploration\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters with chaotic influence\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                # Update velocities and positions with adaptive velocity clamping\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSO", "description": "Enhanced Adaptive Dynamic Swarm Optimization with adaptive velocity clamping for improved balance between exploration and exploitation.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "174dfd87-246f-490c-a41a-9d48620c2142", "metadata": {"aucs": [0.9672889460943264, 0.9655140257204778, 0.9682345925081576, 0.960720516925544, 0.9580731714767021, 0.9657190611971629, 0.9670858759645922, 0.9670105639246046, 0.9590031341573582, 0.9109831458348876, 0.90018785640823, 0.9133472036111555, 0.9185820767461782, 0.8827259290831997, 0.8935957718398462, 0.9157124128694627, 0.9046357388488894, 0.8963919193884613, 0.08258084098310481, 0.1258025063507101, 0.054088180535653896, 0.062087692075551426, 0.1504937931204171, 0.11621406356190933, 0.09242994411244976, 0.05880190393443829, 0.03947782865330596, 0.10050100394219064, 0.07962151858363598, 0.12491678570990938, 0.13994710885763872, 0.1639556612635642, 0.10789120934742402, 0.1277169940284768, 0.04913464904206233, 0.07536419363142777, 0.9868878181648546, 0.9815436662618467, 0.9867949800291644, 0.9742938409634142, 0.9856479249729025, 0.9868776237678425, 0.980509262001661, 0.9764355008951185, 0.09945001530892428, 0.8695576037825782, 0.9069584047046176, 0.9091321419738142, 0.9130002231642697, 0.43423050829768695, 0.8917820729280459, 0.8930124311091302, 0.8746035432429233, 0.8723957125551702, 0.21885232428872636, 0.1617755219082494, 0.20706450290895884, 0.39499916188845663, 0.23001985285363802, 0.19785953418133506, 0.2599439816898593, 0.25125100898241204, 0.2071926602922861, 0.2842844058934746, 0.22077093711286278, 0.22789845254207575, 0.3201271860419157, 0.19731848635057803, 0.2346104833201833, 0.22824143509658856, 0.1376812470238581, 0.2213692706757684, 0.2337870732443167, 0.1531490134798078, 0.18559655135200304, 0.2339152589722947, 0.25302953342069934, 0.23687111691580698, 0.2725710023487945, 9.999999999998899e-05, 0.2751716198701235, 0.00011266821717725861, 0.00041641946556048026, 0.09022848871299627, 0.037578242534705875, 0.050116360548273065, 9.999999999998899e-05, 0.0059339144085859274, 0.06589749768909747, 9.999999999998899e-05, 0.14500087434875708, 0.09763341654236668, 0.09831612458370886, 0.052709223086294554, 0.020003565796235856, 0.03121721952694334, 0.08396922175893795, 0.0733937649234635, 0.14422779277363518, 0.1113886984383704, 0.2693691699592692, 0.31029816142931455, 0.11628277306357415, 0.08568678636554217, 0.14804824915780213, 0.09820991619607589, 0.20073212034212706, 0.08157391211825593, 0.2108272049324852, 0.08065242230399505, 0.06167295559803554, 0.10124611518554594, 0.0069424289428090535, 0.1347273519305403, 0.08685579034358148, 0.07481612047468622, 0.08667613399484686, 0.617464298299677, 0.5772999564309707, 0.6131707903905133, 0.5772957368236936, 0.5638573267594187, 0.20944262130877844, 0.6215265324839134, 0.6241908896770444, 0.5367699392703836, 0.03795561241371648, 0.06720852772204544, 0.034745692440503295, 0.0547595285997855, 0.06937922424569787, 0.09523615310128153, 0.05227105595724002, 0.07632593180879776, 0.08181649051064743, 0.20079425347290658, 0.24462110211288024, 0.24372474175293124, 0.19147136210533822, 0.20285685288051702, 0.15028302051835163, 0.176262930961273, 0.27485076987335255, 0.3293254536097219, 0.1704798750370483, 0.27624910165078165, 0.20109968887564733, 0.15156478169400178, 0.40311593633677034, 0.16213678744266313, 0.16767136463967347, 0.18741546781258012, 0.1364865975035071, 0.29943070331836774, 0.16811955051871608, 0.12322456409746896, 0.09856300067476009, 0.19351753280889206, 0.33278515906422734, 0.19585617680715406, 0.21684709497510568, 0.1588178060926151, 0.24590889242762082, 0.19065338111331098, 0.21999561678085733, 0.23921629846671455, 0.2473096753991636, 0.25139841550951314, 0.25018973806023814, 0.2563181655485187, 0.24827680422815313, 0.17104482340169047, 0.17438777549518525, 0.18652137383221978, 0.17877506396978893, 0.18376906354855005, 0.1636054453564666, 0.21337348416290047, 0.1799529095456721, 0.1824618557806874, 0.18965855790492214, 0.944706882767557, 0.18967505937084783, 0.17407502042711054, 0.2024186369075911, 0.11514414713071586, 0.16920610830415883, 0.1682514999497675, 0.16895851279997331, 0.9404226689703613, 0.11331609994785175, 0.7194126168594819, 0.7544267691831578, 0.15654660318094904, 0.21453194170402157, 0.06492637246840027, 0.09479795286667814, 0.8776146410149472, 0.2091131807892933, 0.21298604665218668, 0.23928538562252466, 0.24603521753449065, 0.213028212963975, 0.22140339266894704, 0.24320925850642117, 0.21760492859757474, 0.1855562318085856, 0.0854737887161473, 0.09777782081210828, 0.06579061783338969, 0.10910852346069766, 0.101573353670667, 0.08004841530980045, 0.07672787960328153, 0.09241158114311743, 0.09001032523259656]}, "mutation_prompt": null}
{"id": "fa0eeb73-4826-4129-bb32-d69e9e9884c7", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n\n        evaluations = self.population_size\n\n        # Chaotic sequence for enhanced exploration\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters with chaotic influence\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                # Update velocities and positions with adaptive velocity clamping\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSO", "description": "Enhanced Adaptive Dynamic Swarm Optimization with adaptive velocity clamping for improved balance between exploration and exploitation.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "174dfd87-246f-490c-a41a-9d48620c2142", "metadata": {"aucs": [0.9672889460943264, 0.9655140257204778, 0.9682345925081576, 0.960720516925544, 0.9580731714767021, 0.9657190611971629, 0.9670858759645922, 0.9670105639246046, 0.9590031341573582, 0.9109831458348876, 0.90018785640823, 0.9133472036111555, 0.9185820767461782, 0.8827259290831997, 0.8935957718398462, 0.9157124128694627, 0.9046357388488894, 0.8963919193884613, 0.08258084098310481, 0.1258025063507101, 0.054088180535653896, 0.062087692075551426, 0.1504937931204171, 0.11621406356190933, 0.09242994411244976, 0.05880190393443829, 0.03947782865330596, 0.10050100394219064, 0.07962151858363598, 0.12491678570990938, 0.13994710885763872, 0.1639556612635642, 0.10789120934742402, 0.1277169940284768, 0.04913464904206233, 0.07536419363142777, 0.9868878181648546, 0.9815436662618467, 0.9867949800291644, 0.9742938409634142, 0.9856479249729025, 0.9868776237678425, 0.980509262001661, 0.9764355008951185, 0.09945001530892428, 0.8695576037825782, 0.9069584047046176, 0.9091321419738142, 0.9130002231642697, 0.43423050829768695, 0.8917820729280459, 0.8930124311091302, 0.8746035432429233, 0.8723957125551702, 0.21885232428872636, 0.1617755219082494, 0.20706450290895884, 0.39499916188845663, 0.23001985285363802, 0.19785953418133506, 0.2599439816898593, 0.25125100898241204, 0.2071926602922861, 0.2842844058934746, 0.22077093711286278, 0.22789845254207575, 0.3201271860419157, 0.19731848635057803, 0.2346104833201833, 0.22824143509658856, 0.1376812470238581, 0.2213692706757684, 0.2337870732443167, 0.1531490134798078, 0.18559655135200304, 0.2339152589722947, 0.25302953342069934, 0.23687111691580698, 0.2725710023487945, 9.999999999998899e-05, 0.2751716198701235, 0.00011266821717725861, 0.00041641946556048026, 0.09022848871299627, 0.037578242534705875, 0.050116360548273065, 9.999999999998899e-05, 0.0059339144085859274, 0.06589749768909747, 9.999999999998899e-05, 0.14500087434875708, 0.09763341654236668, 0.09831612458370886, 0.052709223086294554, 0.020003565796235856, 0.03121721952694334, 0.08396922175893795, 0.0733937649234635, 0.14422779277363518, 0.1113886984383704, 0.2693691699592692, 0.31029816142931455, 0.11628277306357415, 0.08568678636554217, 0.14804824915780213, 0.09820991619607589, 0.20073212034212706, 0.08157391211825593, 0.2108272049324852, 0.08065242230399505, 0.06167295559803554, 0.10124611518554594, 0.0069424289428090535, 0.1347273519305403, 0.08685579034358148, 0.07481612047468622, 0.08667613399484686, 0.617464298299677, 0.5772999564309707, 0.6131707903905133, 0.5772957368236936, 0.5638573267594187, 0.20944262130877844, 0.6215265324839134, 0.6241908896770444, 0.5367699392703836, 0.03795561241371648, 0.06720852772204544, 0.034745692440503295, 0.0547595285997855, 0.06937922424569787, 0.09523615310128153, 0.05227105595724002, 0.07632593180879776, 0.08181649051064743, 0.20079425347290658, 0.24462110211288024, 0.24372474175293124, 0.19147136210533822, 0.20285685288051702, 0.15028302051835163, 0.176262930961273, 0.27485076987335255, 0.3293254536097219, 0.1704798750370483, 0.27624910165078165, 0.20109968887564733, 0.15156478169400178, 0.40311593633677034, 0.16213678744266313, 0.16767136463967347, 0.18741546781258012, 0.1364865975035071, 0.29943070331836774, 0.16811955051871608, 0.12322456409746896, 0.09856300067476009, 0.19351753280889206, 0.33278515906422734, 0.19585617680715406, 0.21684709497510568, 0.1588178060926151, 0.24590889242762082, 0.19065338111331098, 0.21999561678085733, 0.23921629846671455, 0.2473096753991636, 0.25139841550951314, 0.25018973806023814, 0.2563181655485187, 0.24827680422815313, 0.17104482340169047, 0.17438777549518525, 0.18652137383221978, 0.17877506396978893, 0.18376906354855005, 0.1636054453564666, 0.21337348416290047, 0.1799529095456721, 0.1824618557806874, 0.18965855790492214, 0.944706882767557, 0.18967505937084783, 0.17407502042711054, 0.2024186369075911, 0.11514414713071586, 0.16920610830415883, 0.1682514999497675, 0.16895851279997331, 0.9404226689703613, 0.11331609994785175, 0.7194126168594819, 0.7544267691831578, 0.15654660318094904, 0.21453194170402157, 0.06492637246840027, 0.09479795286667814, 0.8776146410149472, 0.2091131807892933, 0.21298604665218668, 0.23928538562252466, 0.24603521753449065, 0.213028212963975, 0.22140339266894704, 0.24320925850642117, 0.21760492859757474, 0.1855562318085856, 0.0854737887161473, 0.09777782081210828, 0.06579061783338969, 0.10910852346069766, 0.101573353670667, 0.08004841530980045, 0.07672787960328153, 0.09241158114311743, 0.09001032523259656]}, "mutation_prompt": null}
{"id": "46ad3650-1ab8-4873-bafd-6021bade892d", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n\n        evaluations = self.population_size\n\n        # Chaotic sequence for enhanced exploration\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters with chaotic influence\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                # Update velocities and positions with adaptive velocity clamping\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSO", "description": "Enhanced Adaptive Dynamic Swarm Optimization with adaptive velocity clamping for improved balance between exploration and exploitation.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "174dfd87-246f-490c-a41a-9d48620c2142", "metadata": {"aucs": [0.9672889460943264, 0.9655140257204778, 0.9682345925081576, 0.960720516925544, 0.9580731714767021, 0.9657190611971629, 0.9670858759645922, 0.9670105639246046, 0.9590031341573582, 0.9109831458348876, 0.90018785640823, 0.9133472036111555, 0.9185820767461782, 0.8827259290831997, 0.8935957718398462, 0.9157124128694627, 0.9046357388488894, 0.8963919193884613, 0.08258084098310481, 0.1258025063507101, 0.054088180535653896, 0.062087692075551426, 0.1504937931204171, 0.11621406356190933, 0.09242994411244976, 0.05880190393443829, 0.03947782865330596, 0.10050100394219064, 0.07962151858363598, 0.12491678570990938, 0.13994710885763872, 0.1639556612635642, 0.10789120934742402, 0.1277169940284768, 0.04913464904206233, 0.07536419363142777, 0.9868878181648546, 0.9815436662618467, 0.9867949800291644, 0.9742938409634142, 0.9856479249729025, 0.9868776237678425, 0.980509262001661, 0.9764355008951185, 0.09945001530892428, 0.8695576037825782, 0.9069584047046176, 0.9091321419738142, 0.9130002231642697, 0.43423050829768695, 0.8917820729280459, 0.8930124311091302, 0.8746035432429233, 0.8723957125551702, 0.21885232428872636, 0.1617755219082494, 0.20706450290895884, 0.39499916188845663, 0.23001985285363802, 0.19785953418133506, 0.2599439816898593, 0.25125100898241204, 0.2071926602922861, 0.2842844058934746, 0.22077093711286278, 0.22789845254207575, 0.3201271860419157, 0.19731848635057803, 0.2346104833201833, 0.22824143509658856, 0.1376812470238581, 0.2213692706757684, 0.2337870732443167, 0.1531490134798078, 0.18559655135200304, 0.2339152589722947, 0.25302953342069934, 0.23687111691580698, 0.2725710023487945, 9.999999999998899e-05, 0.2751716198701235, 0.00011266821717725861, 0.00041641946556048026, 0.09022848871299627, 0.037578242534705875, 0.050116360548273065, 9.999999999998899e-05, 0.0059339144085859274, 0.06589749768909747, 9.999999999998899e-05, 0.14500087434875708, 0.09763341654236668, 0.09831612458370886, 0.052709223086294554, 0.020003565796235856, 0.03121721952694334, 0.08396922175893795, 0.0733937649234635, 0.14422779277363518, 0.1113886984383704, 0.2693691699592692, 0.31029816142931455, 0.11628277306357415, 0.08568678636554217, 0.14804824915780213, 0.09820991619607589, 0.20073212034212706, 0.08157391211825593, 0.2108272049324852, 0.08065242230399505, 0.06167295559803554, 0.10124611518554594, 0.0069424289428090535, 0.1347273519305403, 0.08685579034358148, 0.07481612047468622, 0.08667613399484686, 0.617464298299677, 0.5772999564309707, 0.6131707903905133, 0.5772957368236936, 0.5638573267594187, 0.20944262130877844, 0.6215265324839134, 0.6241908896770444, 0.5367699392703836, 0.03795561241371648, 0.06720852772204544, 0.034745692440503295, 0.0547595285997855, 0.06937922424569787, 0.09523615310128153, 0.05227105595724002, 0.07632593180879776, 0.08181649051064743, 0.20079425347290658, 0.24462110211288024, 0.24372474175293124, 0.19147136210533822, 0.20285685288051702, 0.15028302051835163, 0.176262930961273, 0.27485076987335255, 0.3293254536097219, 0.1704798750370483, 0.27624910165078165, 0.20109968887564733, 0.15156478169400178, 0.40311593633677034, 0.16213678744266313, 0.16767136463967347, 0.18741546781258012, 0.1364865975035071, 0.29943070331836774, 0.16811955051871608, 0.12322456409746896, 0.09856300067476009, 0.19351753280889206, 0.33278515906422734, 0.19585617680715406, 0.21684709497510568, 0.1588178060926151, 0.24590889242762082, 0.19065338111331098, 0.21999561678085733, 0.23921629846671455, 0.2473096753991636, 0.25139841550951314, 0.25018973806023814, 0.2563181655485187, 0.24827680422815313, 0.17104482340169047, 0.17438777549518525, 0.18652137383221978, 0.17877506396978893, 0.18376906354855005, 0.1636054453564666, 0.21337348416290047, 0.1799529095456721, 0.1824618557806874, 0.18965855790492214, 0.944706882767557, 0.18967505937084783, 0.17407502042711054, 0.2024186369075911, 0.11514414713071586, 0.16920610830415883, 0.1682514999497675, 0.16895851279997331, 0.9404226689703613, 0.11331609994785175, 0.7194126168594819, 0.7544267691831578, 0.15654660318094904, 0.21453194170402157, 0.06492637246840027, 0.09479795286667814, 0.8776146410149472, 0.2091131807892933, 0.21298604665218668, 0.23928538562252466, 0.24603521753449065, 0.213028212963975, 0.22140339266894704, 0.24320925850642117, 0.21760492859757474, 0.1855562318085856, 0.0854737887161473, 0.09777782081210828, 0.06579061783338969, 0.10910852346069766, 0.101573353670667, 0.08004841530980045, 0.07672787960328153, 0.09241158114311743, 0.09001032523259656]}, "mutation_prompt": null}
{"id": "be579c3d-c388-4116-a009-369aec7a8c69", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n\n        evaluations = self.population_size\n\n        # Chaotic sequence for enhanced exploration\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters with chaotic influence\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                # Update velocities and positions with adaptive velocity clamping\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSO", "description": "Enhanced Adaptive Dynamic Swarm Optimization with adaptive velocity clamping for improved balance between exploration and exploitation.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "174dfd87-246f-490c-a41a-9d48620c2142", "metadata": {"aucs": [0.9672889460943264, 0.9655140257204778, 0.9682345925081576, 0.960720516925544, 0.9580731714767021, 0.9657190611971629, 0.9670858759645922, 0.9670105639246046, 0.9590031341573582, 0.9109831458348876, 0.90018785640823, 0.9133472036111555, 0.9185820767461782, 0.8827259290831997, 0.8935957718398462, 0.9157124128694627, 0.9046357388488894, 0.8963919193884613, 0.08258084098310481, 0.1258025063507101, 0.054088180535653896, 0.062087692075551426, 0.1504937931204171, 0.11621406356190933, 0.09242994411244976, 0.05880190393443829, 0.03947782865330596, 0.10050100394219064, 0.07962151858363598, 0.12491678570990938, 0.13994710885763872, 0.1639556612635642, 0.10789120934742402, 0.1277169940284768, 0.04913464904206233, 0.07536419363142777, 0.9868878181648546, 0.9815436662618467, 0.9867949800291644, 0.9742938409634142, 0.9856479249729025, 0.9868776237678425, 0.980509262001661, 0.9764355008951185, 0.09945001530892428, 0.8695576037825782, 0.9069584047046176, 0.9091321419738142, 0.9130002231642697, 0.43423050829768695, 0.8917820729280459, 0.8930124311091302, 0.8746035432429233, 0.8723957125551702, 0.21885232428872636, 0.1617755219082494, 0.20706450290895884, 0.39499916188845663, 0.23001985285363802, 0.19785953418133506, 0.2599439816898593, 0.25125100898241204, 0.2071926602922861, 0.2842844058934746, 0.22077093711286278, 0.22789845254207575, 0.3201271860419157, 0.19731848635057803, 0.2346104833201833, 0.22824143509658856, 0.1376812470238581, 0.2213692706757684, 0.2337870732443167, 0.1531490134798078, 0.18559655135200304, 0.2339152589722947, 0.25302953342069934, 0.23687111691580698, 0.2725710023487945, 9.999999999998899e-05, 0.2751716198701235, 0.00011266821717725861, 0.00041641946556048026, 0.09022848871299627, 0.037578242534705875, 0.050116360548273065, 9.999999999998899e-05, 0.0059339144085859274, 0.06589749768909747, 9.999999999998899e-05, 0.14500087434875708, 0.09763341654236668, 0.09831612458370886, 0.052709223086294554, 0.020003565796235856, 0.03121721952694334, 0.08396922175893795, 0.0733937649234635, 0.14422779277363518, 0.1113886984383704, 0.2693691699592692, 0.31029816142931455, 0.11628277306357415, 0.08568678636554217, 0.14804824915780213, 0.09820991619607589, 0.20073212034212706, 0.08157391211825593, 0.2108272049324852, 0.08065242230399505, 0.06167295559803554, 0.10124611518554594, 0.0069424289428090535, 0.1347273519305403, 0.08685579034358148, 0.07481612047468622, 0.08667613399484686, 0.617464298299677, 0.5772999564309707, 0.6131707903905133, 0.5772957368236936, 0.5638573267594187, 0.20944262130877844, 0.6215265324839134, 0.6241908896770444, 0.5367699392703836, 0.03795561241371648, 0.06720852772204544, 0.034745692440503295, 0.0547595285997855, 0.06937922424569787, 0.09523615310128153, 0.05227105595724002, 0.07632593180879776, 0.08181649051064743, 0.20079425347290658, 0.24462110211288024, 0.24372474175293124, 0.19147136210533822, 0.20285685288051702, 0.15028302051835163, 0.176262930961273, 0.27485076987335255, 0.3293254536097219, 0.1704798750370483, 0.27624910165078165, 0.20109968887564733, 0.15156478169400178, 0.40311593633677034, 0.16213678744266313, 0.16767136463967347, 0.18741546781258012, 0.1364865975035071, 0.29943070331836774, 0.16811955051871608, 0.12322456409746896, 0.09856300067476009, 0.19351753280889206, 0.33278515906422734, 0.19585617680715406, 0.21684709497510568, 0.1588178060926151, 0.24590889242762082, 0.19065338111331098, 0.21999561678085733, 0.23921629846671455, 0.2473096753991636, 0.25139841550951314, 0.25018973806023814, 0.2563181655485187, 0.24827680422815313, 0.17104482340169047, 0.17438777549518525, 0.18652137383221978, 0.17877506396978893, 0.18376906354855005, 0.1636054453564666, 0.21337348416290047, 0.1799529095456721, 0.1824618557806874, 0.18965855790492214, 0.944706882767557, 0.18967505937084783, 0.17407502042711054, 0.2024186369075911, 0.11514414713071586, 0.16920610830415883, 0.1682514999497675, 0.16895851279997331, 0.9404226689703613, 0.11331609994785175, 0.7194126168594819, 0.7544267691831578, 0.15654660318094904, 0.21453194170402157, 0.06492637246840027, 0.09479795286667814, 0.8776146410149472, 0.2091131807892933, 0.21298604665218668, 0.23928538562252466, 0.24603521753449065, 0.213028212963975, 0.22140339266894704, 0.24320925850642117, 0.21760492859757474, 0.1855562318085856, 0.0854737887161473, 0.09777782081210828, 0.06579061783338969, 0.10910852346069766, 0.101573353670667, 0.08004841530980045, 0.07672787960328153, 0.09241158114311743, 0.09001032523259656]}, "mutation_prompt": null}
{"id": "48c40334-b0dd-4468-9e74-cc5c0af5bb06", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n\n        evaluations = self.population_size\n\n        # Chaotic sequence for enhanced exploration\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters with chaotic influence\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                # Update velocities and positions with adaptive velocity clamping\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSO", "description": "Enhanced Adaptive Dynamic Swarm Optimization with adaptive velocity clamping for improved balance between exploration and exploitation.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "174dfd87-246f-490c-a41a-9d48620c2142", "metadata": {"aucs": [0.9672889460943264, 0.9655140257204778, 0.9682345925081576, 0.960720516925544, 0.9580731714767021, 0.9657190611971629, 0.9670858759645922, 0.9670105639246046, 0.9590031341573582, 0.9109831458348876, 0.90018785640823, 0.9133472036111555, 0.9185820767461782, 0.8827259290831997, 0.8935957718398462, 0.9157124128694627, 0.9046357388488894, 0.8963919193884613, 0.08258084098310481, 0.1258025063507101, 0.054088180535653896, 0.062087692075551426, 0.1504937931204171, 0.11621406356190933, 0.09242994411244976, 0.05880190393443829, 0.03947782865330596, 0.10050100394219064, 0.07962151858363598, 0.12491678570990938, 0.13994710885763872, 0.1639556612635642, 0.10789120934742402, 0.1277169940284768, 0.04913464904206233, 0.07536419363142777, 0.9868878181648546, 0.9815436662618467, 0.9867949800291644, 0.9742938409634142, 0.9856479249729025, 0.9868776237678425, 0.980509262001661, 0.9764355008951185, 0.09945001530892428, 0.8695576037825782, 0.9069584047046176, 0.9091321419738142, 0.9130002231642697, 0.43423050829768695, 0.8917820729280459, 0.8930124311091302, 0.8746035432429233, 0.8723957125551702, 0.21885232428872636, 0.1617755219082494, 0.20706450290895884, 0.39499916188845663, 0.23001985285363802, 0.19785953418133506, 0.2599439816898593, 0.25125100898241204, 0.2071926602922861, 0.2842844058934746, 0.22077093711286278, 0.22789845254207575, 0.3201271860419157, 0.19731848635057803, 0.2346104833201833, 0.22824143509658856, 0.1376812470238581, 0.2213692706757684, 0.2337870732443167, 0.1531490134798078, 0.18559655135200304, 0.2339152589722947, 0.25302953342069934, 0.23687111691580698, 0.2725710023487945, 9.999999999998899e-05, 0.2751716198701235, 0.00011266821717725861, 0.00041641946556048026, 0.09022848871299627, 0.037578242534705875, 0.050116360548273065, 9.999999999998899e-05, 0.0059339144085859274, 0.06589749768909747, 9.999999999998899e-05, 0.14500087434875708, 0.09763341654236668, 0.09831612458370886, 0.052709223086294554, 0.020003565796235856, 0.03121721952694334, 0.08396922175893795, 0.0733937649234635, 0.14422779277363518, 0.1113886984383704, 0.2693691699592692, 0.31029816142931455, 0.11628277306357415, 0.08568678636554217, 0.14804824915780213, 0.09820991619607589, 0.20073212034212706, 0.08157391211825593, 0.2108272049324852, 0.08065242230399505, 0.06167295559803554, 0.10124611518554594, 0.0069424289428090535, 0.1347273519305403, 0.08685579034358148, 0.07481612047468622, 0.08667613399484686, 0.617464298299677, 0.5772999564309707, 0.6131707903905133, 0.5772957368236936, 0.5638573267594187, 0.20944262130877844, 0.6215265324839134, 0.6241908896770444, 0.5367699392703836, 0.03795561241371648, 0.06720852772204544, 0.034745692440503295, 0.0547595285997855, 0.06937922424569787, 0.09523615310128153, 0.05227105595724002, 0.07632593180879776, 0.08181649051064743, 0.20079425347290658, 0.24462110211288024, 0.24372474175293124, 0.19147136210533822, 0.20285685288051702, 0.15028302051835163, 0.176262930961273, 0.27485076987335255, 0.3293254536097219, 0.1704798750370483, 0.27624910165078165, 0.20109968887564733, 0.15156478169400178, 0.40311593633677034, 0.16213678744266313, 0.16767136463967347, 0.18741546781258012, 0.1364865975035071, 0.29943070331836774, 0.16811955051871608, 0.12322456409746896, 0.09856300067476009, 0.19351753280889206, 0.33278515906422734, 0.19585617680715406, 0.21684709497510568, 0.1588178060926151, 0.24590889242762082, 0.19065338111331098, 0.21999561678085733, 0.23921629846671455, 0.2473096753991636, 0.25139841550951314, 0.25018973806023814, 0.2563181655485187, 0.24827680422815313, 0.17104482340169047, 0.17438777549518525, 0.18652137383221978, 0.17877506396978893, 0.18376906354855005, 0.1636054453564666, 0.21337348416290047, 0.1799529095456721, 0.1824618557806874, 0.18965855790492214, 0.944706882767557, 0.18967505937084783, 0.17407502042711054, 0.2024186369075911, 0.11514414713071586, 0.16920610830415883, 0.1682514999497675, 0.16895851279997331, 0.9404226689703613, 0.11331609994785175, 0.7194126168594819, 0.7544267691831578, 0.15654660318094904, 0.21453194170402157, 0.06492637246840027, 0.09479795286667814, 0.8776146410149472, 0.2091131807892933, 0.21298604665218668, 0.23928538562252466, 0.24603521753449065, 0.213028212963975, 0.22140339266894704, 0.24320925850642117, 0.21760492859757474, 0.1855562318085856, 0.0854737887161473, 0.09777782081210828, 0.06579061783338969, 0.10910852346069766, 0.101573353670667, 0.08004841530980045, 0.07672787960328153, 0.09241158114311743, 0.09001032523259656]}, "mutation_prompt": null}
{"id": "8dd5d040-f200-49f6-a311-f9a9b34b381e", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n\n        evaluations = self.population_size\n\n        # Chaotic sequence for enhanced exploration\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters with chaotic influence\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                # Update velocities and positions with adaptive velocity clamping\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSO", "description": "Enhanced Adaptive Dynamic Swarm Optimization with adaptive velocity clamping for improved balance between exploration and exploitation.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "174dfd87-246f-490c-a41a-9d48620c2142", "metadata": {"aucs": [0.9672889460943264, 0.9655140257204778, 0.9682345925081576, 0.960720516925544, 0.9580731714767021, 0.9657190611971629, 0.9670858759645922, 0.9670105639246046, 0.9590031341573582, 0.9109831458348876, 0.90018785640823, 0.9133472036111555, 0.9185820767461782, 0.8827259290831997, 0.8935957718398462, 0.9157124128694627, 0.9046357388488894, 0.8963919193884613, 0.08258084098310481, 0.1258025063507101, 0.054088180535653896, 0.062087692075551426, 0.1504937931204171, 0.11621406356190933, 0.09242994411244976, 0.05880190393443829, 0.03947782865330596, 0.10050100394219064, 0.07962151858363598, 0.12491678570990938, 0.13994710885763872, 0.1639556612635642, 0.10789120934742402, 0.1277169940284768, 0.04913464904206233, 0.07536419363142777, 0.9868878181648546, 0.9815436662618467, 0.9867949800291644, 0.9742938409634142, 0.9856479249729025, 0.9868776237678425, 0.980509262001661, 0.9764355008951185, 0.09945001530892428, 0.8695576037825782, 0.9069584047046176, 0.9091321419738142, 0.9130002231642697, 0.43423050829768695, 0.8917820729280459, 0.8930124311091302, 0.8746035432429233, 0.8723957125551702, 0.21885232428872636, 0.1617755219082494, 0.20706450290895884, 0.39499916188845663, 0.23001985285363802, 0.19785953418133506, 0.2599439816898593, 0.25125100898241204, 0.2071926602922861, 0.2842844058934746, 0.22077093711286278, 0.22789845254207575, 0.3201271860419157, 0.19731848635057803, 0.2346104833201833, 0.22824143509658856, 0.1376812470238581, 0.2213692706757684, 0.2337870732443167, 0.1531490134798078, 0.18559655135200304, 0.2339152589722947, 0.25302953342069934, 0.23687111691580698, 0.2725710023487945, 9.999999999998899e-05, 0.2751716198701235, 0.00011266821717725861, 0.00041641946556048026, 0.09022848871299627, 0.037578242534705875, 0.050116360548273065, 9.999999999998899e-05, 0.0059339144085859274, 0.06589749768909747, 9.999999999998899e-05, 0.14500087434875708, 0.09763341654236668, 0.09831612458370886, 0.052709223086294554, 0.020003565796235856, 0.03121721952694334, 0.08396922175893795, 0.0733937649234635, 0.14422779277363518, 0.1113886984383704, 0.2693691699592692, 0.31029816142931455, 0.11628277306357415, 0.08568678636554217, 0.14804824915780213, 0.09820991619607589, 0.20073212034212706, 0.08157391211825593, 0.2108272049324852, 0.08065242230399505, 0.06167295559803554, 0.10124611518554594, 0.0069424289428090535, 0.1347273519305403, 0.08685579034358148, 0.07481612047468622, 0.08667613399484686, 0.617464298299677, 0.5772999564309707, 0.6131707903905133, 0.5772957368236936, 0.5638573267594187, 0.20944262130877844, 0.6215265324839134, 0.6241908896770444, 0.5367699392703836, 0.03795561241371648, 0.06720852772204544, 0.034745692440503295, 0.0547595285997855, 0.06937922424569787, 0.09523615310128153, 0.05227105595724002, 0.07632593180879776, 0.08181649051064743, 0.20079425347290658, 0.24462110211288024, 0.24372474175293124, 0.19147136210533822, 0.20285685288051702, 0.15028302051835163, 0.176262930961273, 0.27485076987335255, 0.3293254536097219, 0.1704798750370483, 0.27624910165078165, 0.20109968887564733, 0.15156478169400178, 0.40311593633677034, 0.16213678744266313, 0.16767136463967347, 0.18741546781258012, 0.1364865975035071, 0.29943070331836774, 0.16811955051871608, 0.12322456409746896, 0.09856300067476009, 0.19351753280889206, 0.33278515906422734, 0.19585617680715406, 0.21684709497510568, 0.1588178060926151, 0.24590889242762082, 0.19065338111331098, 0.21999561678085733, 0.23921629846671455, 0.2473096753991636, 0.25139841550951314, 0.25018973806023814, 0.2563181655485187, 0.24827680422815313, 0.17104482340169047, 0.17438777549518525, 0.18652137383221978, 0.17877506396978893, 0.18376906354855005, 0.1636054453564666, 0.21337348416290047, 0.1799529095456721, 0.1824618557806874, 0.18965855790492214, 0.944706882767557, 0.18967505937084783, 0.17407502042711054, 0.2024186369075911, 0.11514414713071586, 0.16920610830415883, 0.1682514999497675, 0.16895851279997331, 0.9404226689703613, 0.11331609994785175, 0.7194126168594819, 0.7544267691831578, 0.15654660318094904, 0.21453194170402157, 0.06492637246840027, 0.09479795286667814, 0.8776146410149472, 0.2091131807892933, 0.21298604665218668, 0.23928538562252466, 0.24603521753449065, 0.213028212963975, 0.22140339266894704, 0.24320925850642117, 0.21760492859757474, 0.1855562318085856, 0.0854737887161473, 0.09777782081210828, 0.06579061783338969, 0.10910852346069766, 0.101573353670667, 0.08004841530980045, 0.07672787960328153, 0.09241158114311743, 0.09001032523259656]}, "mutation_prompt": null}
{"id": "b548643c-6c57-4ce0-965c-3c39c4dd99de", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n\n        evaluations = self.population_size\n\n        # Chaotic sequence for enhanced exploration\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters with chaotic influence\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                # Update velocities and positions with adaptive velocity clamping\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSO", "description": "Enhanced Adaptive Dynamic Swarm Optimization with adaptive velocity clamping for improved balance between exploration and exploitation.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "174dfd87-246f-490c-a41a-9d48620c2142", "metadata": {"aucs": [0.9672889460943264, 0.9655140257204778, 0.9682345925081576, 0.960720516925544, 0.9580731714767021, 0.9657190611971629, 0.9670858759645922, 0.9670105639246046, 0.9590031341573582, 0.9109831458348876, 0.90018785640823, 0.9133472036111555, 0.9185820767461782, 0.8827259290831997, 0.8935957718398462, 0.9157124128694627, 0.9046357388488894, 0.8963919193884613, 0.08258084098310481, 0.1258025063507101, 0.054088180535653896, 0.062087692075551426, 0.1504937931204171, 0.11621406356190933, 0.09242994411244976, 0.05880190393443829, 0.03947782865330596, 0.10050100394219064, 0.07962151858363598, 0.12491678570990938, 0.13994710885763872, 0.1639556612635642, 0.10789120934742402, 0.1277169940284768, 0.04913464904206233, 0.07536419363142777, 0.9868878181648546, 0.9815436662618467, 0.9867949800291644, 0.9742938409634142, 0.9856479249729025, 0.9868776237678425, 0.980509262001661, 0.9764355008951185, 0.09945001530892428, 0.8695576037825782, 0.9069584047046176, 0.9091321419738142, 0.9130002231642697, 0.43423050829768695, 0.8917820729280459, 0.8930124311091302, 0.8746035432429233, 0.8723957125551702, 0.21885232428872636, 0.1617755219082494, 0.20706450290895884, 0.39499916188845663, 0.23001985285363802, 0.19785953418133506, 0.2599439816898593, 0.25125100898241204, 0.2071926602922861, 0.2842844058934746, 0.22077093711286278, 0.22789845254207575, 0.3201271860419157, 0.19731848635057803, 0.2346104833201833, 0.22824143509658856, 0.1376812470238581, 0.2213692706757684, 0.2337870732443167, 0.1531490134798078, 0.18559655135200304, 0.2339152589722947, 0.25302953342069934, 0.23687111691580698, 0.2725710023487945, 9.999999999998899e-05, 0.2751716198701235, 0.00011266821717725861, 0.00041641946556048026, 0.09022848871299627, 0.037578242534705875, 0.050116360548273065, 9.999999999998899e-05, 0.0059339144085859274, 0.06589749768909747, 9.999999999998899e-05, 0.14500087434875708, 0.09763341654236668, 0.09831612458370886, 0.052709223086294554, 0.020003565796235856, 0.03121721952694334, 0.08396922175893795, 0.0733937649234635, 0.14422779277363518, 0.1113886984383704, 0.2693691699592692, 0.31029816142931455, 0.11628277306357415, 0.08568678636554217, 0.14804824915780213, 0.09820991619607589, 0.20073212034212706, 0.08157391211825593, 0.2108272049324852, 0.08065242230399505, 0.06167295559803554, 0.10124611518554594, 0.0069424289428090535, 0.1347273519305403, 0.08685579034358148, 0.07481612047468622, 0.08667613399484686, 0.617464298299677, 0.5772999564309707, 0.6131707903905133, 0.5772957368236936, 0.5638573267594187, 0.20944262130877844, 0.6215265324839134, 0.6241908896770444, 0.5367699392703836, 0.03795561241371648, 0.06720852772204544, 0.034745692440503295, 0.0547595285997855, 0.06937922424569787, 0.09523615310128153, 0.05227105595724002, 0.07632593180879776, 0.08181649051064743, 0.20079425347290658, 0.24462110211288024, 0.24372474175293124, 0.19147136210533822, 0.20285685288051702, 0.15028302051835163, 0.176262930961273, 0.27485076987335255, 0.3293254536097219, 0.1704798750370483, 0.27624910165078165, 0.20109968887564733, 0.15156478169400178, 0.40311593633677034, 0.16213678744266313, 0.16767136463967347, 0.18741546781258012, 0.1364865975035071, 0.29943070331836774, 0.16811955051871608, 0.12322456409746896, 0.09856300067476009, 0.19351753280889206, 0.33278515906422734, 0.19585617680715406, 0.21684709497510568, 0.1588178060926151, 0.24590889242762082, 0.19065338111331098, 0.21999561678085733, 0.23921629846671455, 0.2473096753991636, 0.25139841550951314, 0.25018973806023814, 0.2563181655485187, 0.24827680422815313, 0.17104482340169047, 0.17438777549518525, 0.18652137383221978, 0.17877506396978893, 0.18376906354855005, 0.1636054453564666, 0.21337348416290047, 0.1799529095456721, 0.1824618557806874, 0.18965855790492214, 0.944706882767557, 0.18967505937084783, 0.17407502042711054, 0.2024186369075911, 0.11514414713071586, 0.16920610830415883, 0.1682514999497675, 0.16895851279997331, 0.9404226689703613, 0.11331609994785175, 0.7194126168594819, 0.7544267691831578, 0.15654660318094904, 0.21453194170402157, 0.06492637246840027, 0.09479795286667814, 0.8776146410149472, 0.2091131807892933, 0.21298604665218668, 0.23928538562252466, 0.24603521753449065, 0.213028212963975, 0.22140339266894704, 0.24320925850642117, 0.21760492859757474, 0.1855562318085856, 0.0854737887161473, 0.09777782081210828, 0.06579061783338969, 0.10910852346069766, 0.101573353670667, 0.08004841530980045, 0.07672787960328153, 0.09241158114311743, 0.09001032523259656]}, "mutation_prompt": null}
{"id": "358ddfad-41ab-4222-9f99-789a805685ad", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n\n        evaluations = self.population_size\n\n        # Chaotic sequence for enhanced exploration\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters with chaotic influence\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                # Update velocities and positions with adaptive velocity clamping\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSO", "description": "Enhanced Adaptive Dynamic Swarm Optimization with adaptive velocity clamping for improved balance between exploration and exploitation.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "174dfd87-246f-490c-a41a-9d48620c2142", "metadata": {"aucs": [0.9672889460943264, 0.9655140257204778, 0.9682345925081576, 0.960720516925544, 0.9580731714767021, 0.9657190611971629, 0.9670858759645922, 0.9670105639246046, 0.9590031341573582, 0.9109831458348876, 0.90018785640823, 0.9133472036111555, 0.9185820767461782, 0.8827259290831997, 0.8935957718398462, 0.9157124128694627, 0.9046357388488894, 0.8963919193884613, 0.08258084098310481, 0.1258025063507101, 0.054088180535653896, 0.062087692075551426, 0.1504937931204171, 0.11621406356190933, 0.09242994411244976, 0.05880190393443829, 0.03947782865330596, 0.10050100394219064, 0.07962151858363598, 0.12491678570990938, 0.13994710885763872, 0.1639556612635642, 0.10789120934742402, 0.1277169940284768, 0.04913464904206233, 0.07536419363142777, 0.9868878181648546, 0.9815436662618467, 0.9867949800291644, 0.9742938409634142, 0.9856479249729025, 0.9868776237678425, 0.980509262001661, 0.9764355008951185, 0.09945001530892428, 0.8695576037825782, 0.9069584047046176, 0.9091321419738142, 0.9130002231642697, 0.43423050829768695, 0.8917820729280459, 0.8930124311091302, 0.8746035432429233, 0.8723957125551702, 0.21885232428872636, 0.1617755219082494, 0.20706450290895884, 0.39499916188845663, 0.23001985285363802, 0.19785953418133506, 0.2599439816898593, 0.25125100898241204, 0.2071926602922861, 0.2842844058934746, 0.22077093711286278, 0.22789845254207575, 0.3201271860419157, 0.19731848635057803, 0.2346104833201833, 0.22824143509658856, 0.1376812470238581, 0.2213692706757684, 0.2337870732443167, 0.1531490134798078, 0.18559655135200304, 0.2339152589722947, 0.25302953342069934, 0.23687111691580698, 0.2725710023487945, 9.999999999998899e-05, 0.2751716198701235, 0.00011266821717725861, 0.00041641946556048026, 0.09022848871299627, 0.037578242534705875, 0.050116360548273065, 9.999999999998899e-05, 0.0059339144085859274, 0.06589749768909747, 9.999999999998899e-05, 0.14500087434875708, 0.09763341654236668, 0.09831612458370886, 0.052709223086294554, 0.020003565796235856, 0.03121721952694334, 0.08396922175893795, 0.0733937649234635, 0.14422779277363518, 0.1113886984383704, 0.2693691699592692, 0.31029816142931455, 0.11628277306357415, 0.08568678636554217, 0.14804824915780213, 0.09820991619607589, 0.20073212034212706, 0.08157391211825593, 0.2108272049324852, 0.08065242230399505, 0.06167295559803554, 0.10124611518554594, 0.0069424289428090535, 0.1347273519305403, 0.08685579034358148, 0.07481612047468622, 0.08667613399484686, 0.617464298299677, 0.5772999564309707, 0.6131707903905133, 0.5772957368236936, 0.5638573267594187, 0.20944262130877844, 0.6215265324839134, 0.6241908896770444, 0.5367699392703836, 0.03795561241371648, 0.06720852772204544, 0.034745692440503295, 0.0547595285997855, 0.06937922424569787, 0.09523615310128153, 0.05227105595724002, 0.07632593180879776, 0.08181649051064743, 0.20079425347290658, 0.24462110211288024, 0.24372474175293124, 0.19147136210533822, 0.20285685288051702, 0.15028302051835163, 0.176262930961273, 0.27485076987335255, 0.3293254536097219, 0.1704798750370483, 0.27624910165078165, 0.20109968887564733, 0.15156478169400178, 0.40311593633677034, 0.16213678744266313, 0.16767136463967347, 0.18741546781258012, 0.1364865975035071, 0.29943070331836774, 0.16811955051871608, 0.12322456409746896, 0.09856300067476009, 0.19351753280889206, 0.33278515906422734, 0.19585617680715406, 0.21684709497510568, 0.1588178060926151, 0.24590889242762082, 0.19065338111331098, 0.21999561678085733, 0.23921629846671455, 0.2473096753991636, 0.25139841550951314, 0.25018973806023814, 0.2563181655485187, 0.24827680422815313, 0.17104482340169047, 0.17438777549518525, 0.18652137383221978, 0.17877506396978893, 0.18376906354855005, 0.1636054453564666, 0.21337348416290047, 0.1799529095456721, 0.1824618557806874, 0.18965855790492214, 0.944706882767557, 0.18967505937084783, 0.17407502042711054, 0.2024186369075911, 0.11514414713071586, 0.16920610830415883, 0.1682514999497675, 0.16895851279997331, 0.9404226689703613, 0.11331609994785175, 0.7194126168594819, 0.7544267691831578, 0.15654660318094904, 0.21453194170402157, 0.06492637246840027, 0.09479795286667814, 0.8776146410149472, 0.2091131807892933, 0.21298604665218668, 0.23928538562252466, 0.24603521753449065, 0.213028212963975, 0.22140339266894704, 0.24320925850642117, 0.21760492859757474, 0.1855562318085856, 0.0854737887161473, 0.09777782081210828, 0.06579061783338969, 0.10910852346069766, 0.101573353670667, 0.08004841530980045, 0.07672787960328153, 0.09241158114311743, 0.09001032523259656]}, "mutation_prompt": null}
{"id": "f2c243a6-d80e-45a1-8ffe-0f5533af43b7", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n\n        evaluations = self.population_size\n\n        # Chaotic sequence for enhanced exploration\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters with chaotic influence\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                # Update velocities and positions with adaptive velocity clamping\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSO", "description": "Enhanced Adaptive Dynamic Swarm Optimization with adaptive velocity clamping for improved balance between exploration and exploitation.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "174dfd87-246f-490c-a41a-9d48620c2142", "metadata": {"aucs": [0.9672889460943264, 0.9655140257204778, 0.9682345925081576, 0.960720516925544, 0.9580731714767021, 0.9657190611971629, 0.9670858759645922, 0.9670105639246046, 0.9590031341573582, 0.9109831458348876, 0.90018785640823, 0.9133472036111555, 0.9185820767461782, 0.8827259290831997, 0.8935957718398462, 0.9157124128694627, 0.9046357388488894, 0.8963919193884613, 0.08258084098310481, 0.1258025063507101, 0.054088180535653896, 0.062087692075551426, 0.1504937931204171, 0.11621406356190933, 0.09242994411244976, 0.05880190393443829, 0.03947782865330596, 0.10050100394219064, 0.07962151858363598, 0.12491678570990938, 0.13994710885763872, 0.1639556612635642, 0.10789120934742402, 0.1277169940284768, 0.04913464904206233, 0.07536419363142777, 0.9868878181648546, 0.9815436662618467, 0.9867949800291644, 0.9742938409634142, 0.9856479249729025, 0.9868776237678425, 0.980509262001661, 0.9764355008951185, 0.09945001530892428, 0.8695576037825782, 0.9069584047046176, 0.9091321419738142, 0.9130002231642697, 0.43423050829768695, 0.8917820729280459, 0.8930124311091302, 0.8746035432429233, 0.8723957125551702, 0.21885232428872636, 0.1617755219082494, 0.20706450290895884, 0.39499916188845663, 0.23001985285363802, 0.19785953418133506, 0.2599439816898593, 0.25125100898241204, 0.2071926602922861, 0.2842844058934746, 0.22077093711286278, 0.22789845254207575, 0.3201271860419157, 0.19731848635057803, 0.2346104833201833, 0.22824143509658856, 0.1376812470238581, 0.2213692706757684, 0.2337870732443167, 0.1531490134798078, 0.18559655135200304, 0.2339152589722947, 0.25302953342069934, 0.23687111691580698, 0.2725710023487945, 9.999999999998899e-05, 0.2751716198701235, 0.00011266821717725861, 0.00041641946556048026, 0.09022848871299627, 0.037578242534705875, 0.050116360548273065, 9.999999999998899e-05, 0.0059339144085859274, 0.06589749768909747, 9.999999999998899e-05, 0.14500087434875708, 0.09763341654236668, 0.09831612458370886, 0.052709223086294554, 0.020003565796235856, 0.03121721952694334, 0.08396922175893795, 0.0733937649234635, 0.14422779277363518, 0.1113886984383704, 0.2693691699592692, 0.31029816142931455, 0.11628277306357415, 0.08568678636554217, 0.14804824915780213, 0.09820991619607589, 0.20073212034212706, 0.08157391211825593, 0.2108272049324852, 0.08065242230399505, 0.06167295559803554, 0.10124611518554594, 0.0069424289428090535, 0.1347273519305403, 0.08685579034358148, 0.07481612047468622, 0.08667613399484686, 0.617464298299677, 0.5772999564309707, 0.6131707903905133, 0.5772957368236936, 0.5638573267594187, 0.20944262130877844, 0.6215265324839134, 0.6241908896770444, 0.5367699392703836, 0.03795561241371648, 0.06720852772204544, 0.034745692440503295, 0.0547595285997855, 0.06937922424569787, 0.09523615310128153, 0.05227105595724002, 0.07632593180879776, 0.08181649051064743, 0.20079425347290658, 0.24462110211288024, 0.24372474175293124, 0.19147136210533822, 0.20285685288051702, 0.15028302051835163, 0.176262930961273, 0.27485076987335255, 0.3293254536097219, 0.1704798750370483, 0.27624910165078165, 0.20109968887564733, 0.15156478169400178, 0.40311593633677034, 0.16213678744266313, 0.16767136463967347, 0.18741546781258012, 0.1364865975035071, 0.29943070331836774, 0.16811955051871608, 0.12322456409746896, 0.09856300067476009, 0.19351753280889206, 0.33278515906422734, 0.19585617680715406, 0.21684709497510568, 0.1588178060926151, 0.24590889242762082, 0.19065338111331098, 0.21999561678085733, 0.23921629846671455, 0.2473096753991636, 0.25139841550951314, 0.25018973806023814, 0.2563181655485187, 0.24827680422815313, 0.17104482340169047, 0.17438777549518525, 0.18652137383221978, 0.17877506396978893, 0.18376906354855005, 0.1636054453564666, 0.21337348416290047, 0.1799529095456721, 0.1824618557806874, 0.18965855790492214, 0.944706882767557, 0.18967505937084783, 0.17407502042711054, 0.2024186369075911, 0.11514414713071586, 0.16920610830415883, 0.1682514999497675, 0.16895851279997331, 0.9404226689703613, 0.11331609994785175, 0.7194126168594819, 0.7544267691831578, 0.15654660318094904, 0.21453194170402157, 0.06492637246840027, 0.09479795286667814, 0.8776146410149472, 0.2091131807892933, 0.21298604665218668, 0.23928538562252466, 0.24603521753449065, 0.213028212963975, 0.22140339266894704, 0.24320925850642117, 0.21760492859757474, 0.1855562318085856, 0.0854737887161473, 0.09777782081210828, 0.06579061783338969, 0.10910852346069766, 0.101573353670667, 0.08004841530980045, 0.07672787960328153, 0.09241158114311743, 0.09001032523259656]}, "mutation_prompt": null}
{"id": "ad7f0d32-eb60-42b6-8049-48e144eb4ef7", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n\n        evaluations = self.population_size\n\n        # Chaotic sequence for enhanced exploration\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters with chaotic influence\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                # Update velocities and positions with adaptive velocity clamping\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSO", "description": "Enhanced Adaptive Dynamic Swarm Optimization with adaptive velocity clamping for improved balance between exploration and exploitation.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "174dfd87-246f-490c-a41a-9d48620c2142", "metadata": {"aucs": [0.9672889460943264, 0.9655140257204778, 0.9682345925081576, 0.960720516925544, 0.9580731714767021, 0.9657190611971629, 0.9670858759645922, 0.9670105639246046, 0.9590031341573582, 0.9109831458348876, 0.90018785640823, 0.9133472036111555, 0.9185820767461782, 0.8827259290831997, 0.8935957718398462, 0.9157124128694627, 0.9046357388488894, 0.8963919193884613, 0.08258084098310481, 0.1258025063507101, 0.054088180535653896, 0.062087692075551426, 0.1504937931204171, 0.11621406356190933, 0.09242994411244976, 0.05880190393443829, 0.03947782865330596, 0.10050100394219064, 0.07962151858363598, 0.12491678570990938, 0.13994710885763872, 0.1639556612635642, 0.10789120934742402, 0.1277169940284768, 0.04913464904206233, 0.07536419363142777, 0.9868878181648546, 0.9815436662618467, 0.9867949800291644, 0.9742938409634142, 0.9856479249729025, 0.9868776237678425, 0.980509262001661, 0.9764355008951185, 0.09945001530892428, 0.8695576037825782, 0.9069584047046176, 0.9091321419738142, 0.9130002231642697, 0.43423050829768695, 0.8917820729280459, 0.8930124311091302, 0.8746035432429233, 0.8723957125551702, 0.21885232428872636, 0.1617755219082494, 0.20706450290895884, 0.39499916188845663, 0.23001985285363802, 0.19785953418133506, 0.2599439816898593, 0.25125100898241204, 0.2071926602922861, 0.2842844058934746, 0.22077093711286278, 0.22789845254207575, 0.3201271860419157, 0.19731848635057803, 0.2346104833201833, 0.22824143509658856, 0.1376812470238581, 0.2213692706757684, 0.2337870732443167, 0.1531490134798078, 0.18559655135200304, 0.2339152589722947, 0.25302953342069934, 0.23687111691580698, 0.2725710023487945, 9.999999999998899e-05, 0.2751716198701235, 0.00011266821717725861, 0.00041641946556048026, 0.09022848871299627, 0.037578242534705875, 0.050116360548273065, 9.999999999998899e-05, 0.0059339144085859274, 0.06589749768909747, 9.999999999998899e-05, 0.14500087434875708, 0.09763341654236668, 0.09831612458370886, 0.052709223086294554, 0.020003565796235856, 0.03121721952694334, 0.08396922175893795, 0.0733937649234635, 0.14422779277363518, 0.1113886984383704, 0.2693691699592692, 0.31029816142931455, 0.11628277306357415, 0.08568678636554217, 0.14804824915780213, 0.09820991619607589, 0.20073212034212706, 0.08157391211825593, 0.2108272049324852, 0.08065242230399505, 0.06167295559803554, 0.10124611518554594, 0.0069424289428090535, 0.1347273519305403, 0.08685579034358148, 0.07481612047468622, 0.08667613399484686, 0.617464298299677, 0.5772999564309707, 0.6131707903905133, 0.5772957368236936, 0.5638573267594187, 0.20944262130877844, 0.6215265324839134, 0.6241908896770444, 0.5367699392703836, 0.03795561241371648, 0.06720852772204544, 0.034745692440503295, 0.0547595285997855, 0.06937922424569787, 0.09523615310128153, 0.05227105595724002, 0.07632593180879776, 0.08181649051064743, 0.20079425347290658, 0.24462110211288024, 0.24372474175293124, 0.19147136210533822, 0.20285685288051702, 0.15028302051835163, 0.176262930961273, 0.27485076987335255, 0.3293254536097219, 0.1704798750370483, 0.27624910165078165, 0.20109968887564733, 0.15156478169400178, 0.40311593633677034, 0.16213678744266313, 0.16767136463967347, 0.18741546781258012, 0.1364865975035071, 0.29943070331836774, 0.16811955051871608, 0.12322456409746896, 0.09856300067476009, 0.19351753280889206, 0.33278515906422734, 0.19585617680715406, 0.21684709497510568, 0.1588178060926151, 0.24590889242762082, 0.19065338111331098, 0.21999561678085733, 0.23921629846671455, 0.2473096753991636, 0.25139841550951314, 0.25018973806023814, 0.2563181655485187, 0.24827680422815313, 0.17104482340169047, 0.17438777549518525, 0.18652137383221978, 0.17877506396978893, 0.18376906354855005, 0.1636054453564666, 0.21337348416290047, 0.1799529095456721, 0.1824618557806874, 0.18965855790492214, 0.944706882767557, 0.18967505937084783, 0.17407502042711054, 0.2024186369075911, 0.11514414713071586, 0.16920610830415883, 0.1682514999497675, 0.16895851279997331, 0.9404226689703613, 0.11331609994785175, 0.7194126168594819, 0.7544267691831578, 0.15654660318094904, 0.21453194170402157, 0.06492637246840027, 0.09479795286667814, 0.8776146410149472, 0.2091131807892933, 0.21298604665218668, 0.23928538562252466, 0.24603521753449065, 0.213028212963975, 0.22140339266894704, 0.24320925850642117, 0.21760492859757474, 0.1855562318085856, 0.0854737887161473, 0.09777782081210828, 0.06579061783338969, 0.10910852346069766, 0.101573353670667, 0.08004841530980045, 0.07672787960328153, 0.09241158114311743, 0.09001032523259656]}, "mutation_prompt": null}
{"id": "81c8455a-df7f-4727-b13e-075de3175e3b", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n\n        evaluations = self.population_size\n\n        # Chaotic sequence for enhanced exploration\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters with chaotic influence\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                # Update velocities and positions with adaptive velocity clamping\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSO", "description": "Enhanced Adaptive Dynamic Swarm Optimization with adaptive velocity clamping for improved balance between exploration and exploitation.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "174dfd87-246f-490c-a41a-9d48620c2142", "metadata": {"aucs": [0.9672889460943264, 0.9655140257204778, 0.9682345925081576, 0.960720516925544, 0.9580731714767021, 0.9657190611971629, 0.9670858759645922, 0.9670105639246046, 0.9590031341573582, 0.9109831458348876, 0.90018785640823, 0.9133472036111555, 0.9185820767461782, 0.8827259290831997, 0.8935957718398462, 0.9157124128694627, 0.9046357388488894, 0.8963919193884613, 0.08258084098310481, 0.1258025063507101, 0.054088180535653896, 0.062087692075551426, 0.1504937931204171, 0.11621406356190933, 0.09242994411244976, 0.05880190393443829, 0.03947782865330596, 0.10050100394219064, 0.07962151858363598, 0.12491678570990938, 0.13994710885763872, 0.1639556612635642, 0.10789120934742402, 0.1277169940284768, 0.04913464904206233, 0.07536419363142777, 0.9868878181648546, 0.9815436662618467, 0.9867949800291644, 0.9742938409634142, 0.9856479249729025, 0.9868776237678425, 0.980509262001661, 0.9764355008951185, 0.09945001530892428, 0.8695576037825782, 0.9069584047046176, 0.9091321419738142, 0.9130002231642697, 0.43423050829768695, 0.8917820729280459, 0.8930124311091302, 0.8746035432429233, 0.8723957125551702, 0.21885232428872636, 0.1617755219082494, 0.20706450290895884, 0.39499916188845663, 0.23001985285363802, 0.19785953418133506, 0.2599439816898593, 0.25125100898241204, 0.2071926602922861, 0.2842844058934746, 0.22077093711286278, 0.22789845254207575, 0.3201271860419157, 0.19731848635057803, 0.2346104833201833, 0.22824143509658856, 0.1376812470238581, 0.2213692706757684, 0.2337870732443167, 0.1531490134798078, 0.18559655135200304, 0.2339152589722947, 0.25302953342069934, 0.23687111691580698, 0.2725710023487945, 9.999999999998899e-05, 0.2751716198701235, 0.00011266821717725861, 0.00041641946556048026, 0.09022848871299627, 0.037578242534705875, 0.050116360548273065, 9.999999999998899e-05, 0.0059339144085859274, 0.06589749768909747, 9.999999999998899e-05, 0.14500087434875708, 0.09763341654236668, 0.09831612458370886, 0.052709223086294554, 0.020003565796235856, 0.03121721952694334, 0.08396922175893795, 0.0733937649234635, 0.14422779277363518, 0.1113886984383704, 0.2693691699592692, 0.31029816142931455, 0.11628277306357415, 0.08568678636554217, 0.14804824915780213, 0.09820991619607589, 0.20073212034212706, 0.08157391211825593, 0.2108272049324852, 0.08065242230399505, 0.06167295559803554, 0.10124611518554594, 0.0069424289428090535, 0.1347273519305403, 0.08685579034358148, 0.07481612047468622, 0.08667613399484686, 0.617464298299677, 0.5772999564309707, 0.6131707903905133, 0.5772957368236936, 0.5638573267594187, 0.20944262130877844, 0.6215265324839134, 0.6241908896770444, 0.5367699392703836, 0.03795561241371648, 0.06720852772204544, 0.034745692440503295, 0.0547595285997855, 0.06937922424569787, 0.09523615310128153, 0.05227105595724002, 0.07632593180879776, 0.08181649051064743, 0.20079425347290658, 0.24462110211288024, 0.24372474175293124, 0.19147136210533822, 0.20285685288051702, 0.15028302051835163, 0.176262930961273, 0.27485076987335255, 0.3293254536097219, 0.1704798750370483, 0.27624910165078165, 0.20109968887564733, 0.15156478169400178, 0.40311593633677034, 0.16213678744266313, 0.16767136463967347, 0.18741546781258012, 0.1364865975035071, 0.29943070331836774, 0.16811955051871608, 0.12322456409746896, 0.09856300067476009, 0.19351753280889206, 0.33278515906422734, 0.19585617680715406, 0.21684709497510568, 0.1588178060926151, 0.24590889242762082, 0.19065338111331098, 0.21999561678085733, 0.23921629846671455, 0.2473096753991636, 0.25139841550951314, 0.25018973806023814, 0.2563181655485187, 0.24827680422815313, 0.17104482340169047, 0.17438777549518525, 0.18652137383221978, 0.17877506396978893, 0.18376906354855005, 0.1636054453564666, 0.21337348416290047, 0.1799529095456721, 0.1824618557806874, 0.18965855790492214, 0.944706882767557, 0.18967505937084783, 0.17407502042711054, 0.2024186369075911, 0.11514414713071586, 0.16920610830415883, 0.1682514999497675, 0.16895851279997331, 0.9404226689703613, 0.11331609994785175, 0.7194126168594819, 0.7544267691831578, 0.15654660318094904, 0.21453194170402157, 0.06492637246840027, 0.09479795286667814, 0.8776146410149472, 0.2091131807892933, 0.21298604665218668, 0.23928538562252466, 0.24603521753449065, 0.213028212963975, 0.22140339266894704, 0.24320925850642117, 0.21760492859757474, 0.1855562318085856, 0.0854737887161473, 0.09777782081210828, 0.06579061783338969, 0.10910852346069766, 0.101573353670667, 0.08004841530980045, 0.07672787960328153, 0.09241158114311743, 0.09001032523259656]}, "mutation_prompt": null}
{"id": "8640fcbd-2b0a-430c-85cb-d778367c8392", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n\n        evaluations = self.population_size\n\n        # Chaotic sequence for enhanced exploration\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters with chaotic influence\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                # Update velocities and positions with adaptive velocity clamping\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSO", "description": "Enhanced Adaptive Dynamic Swarm Optimization with adaptive velocity clamping for improved balance between exploration and exploitation.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "174dfd87-246f-490c-a41a-9d48620c2142", "metadata": {"aucs": [0.9672889460943264, 0.9655140257204778, 0.9682345925081576, 0.960720516925544, 0.9580731714767021, 0.9657190611971629, 0.9670858759645922, 0.9670105639246046, 0.9590031341573582, 0.9109831458348876, 0.90018785640823, 0.9133472036111555, 0.9185820767461782, 0.8827259290831997, 0.8935957718398462, 0.9157124128694627, 0.9046357388488894, 0.8963919193884613, 0.08258084098310481, 0.1258025063507101, 0.054088180535653896, 0.062087692075551426, 0.1504937931204171, 0.11621406356190933, 0.09242994411244976, 0.05880190393443829, 0.03947782865330596, 0.10050100394219064, 0.07962151858363598, 0.12491678570990938, 0.13994710885763872, 0.1639556612635642, 0.10789120934742402, 0.1277169940284768, 0.04913464904206233, 0.07536419363142777, 0.9868878181648546, 0.9815436662618467, 0.9867949800291644, 0.9742938409634142, 0.9856479249729025, 0.9868776237678425, 0.980509262001661, 0.9764355008951185, 0.09945001530892428, 0.8695576037825782, 0.9069584047046176, 0.9091321419738142, 0.9130002231642697, 0.43423050829768695, 0.8917820729280459, 0.8930124311091302, 0.8746035432429233, 0.8723957125551702, 0.21885232428872636, 0.1617755219082494, 0.20706450290895884, 0.39499916188845663, 0.23001985285363802, 0.19785953418133506, 0.2599439816898593, 0.25125100898241204, 0.2071926602922861, 0.2842844058934746, 0.22077093711286278, 0.22789845254207575, 0.3201271860419157, 0.19731848635057803, 0.2346104833201833, 0.22824143509658856, 0.1376812470238581, 0.2213692706757684, 0.2337870732443167, 0.1531490134798078, 0.18559655135200304, 0.2339152589722947, 0.25302953342069934, 0.23687111691580698, 0.2725710023487945, 9.999999999998899e-05, 0.2751716198701235, 0.00011266821717725861, 0.00041641946556048026, 0.09022848871299627, 0.037578242534705875, 0.050116360548273065, 9.999999999998899e-05, 0.0059339144085859274, 0.06589749768909747, 9.999999999998899e-05, 0.14500087434875708, 0.09763341654236668, 0.09831612458370886, 0.052709223086294554, 0.020003565796235856, 0.03121721952694334, 0.08396922175893795, 0.0733937649234635, 0.14422779277363518, 0.1113886984383704, 0.2693691699592692, 0.31029816142931455, 0.11628277306357415, 0.08568678636554217, 0.14804824915780213, 0.09820991619607589, 0.20073212034212706, 0.08157391211825593, 0.2108272049324852, 0.08065242230399505, 0.06167295559803554, 0.10124611518554594, 0.0069424289428090535, 0.1347273519305403, 0.08685579034358148, 0.07481612047468622, 0.08667613399484686, 0.617464298299677, 0.5772999564309707, 0.6131707903905133, 0.5772957368236936, 0.5638573267594187, 0.20944262130877844, 0.6215265324839134, 0.6241908896770444, 0.5367699392703836, 0.03795561241371648, 0.06720852772204544, 0.034745692440503295, 0.0547595285997855, 0.06937922424569787, 0.09523615310128153, 0.05227105595724002, 0.07632593180879776, 0.08181649051064743, 0.20079425347290658, 0.24462110211288024, 0.24372474175293124, 0.19147136210533822, 0.20285685288051702, 0.15028302051835163, 0.176262930961273, 0.27485076987335255, 0.3293254536097219, 0.1704798750370483, 0.27624910165078165, 0.20109968887564733, 0.15156478169400178, 0.40311593633677034, 0.16213678744266313, 0.16767136463967347, 0.18741546781258012, 0.1364865975035071, 0.29943070331836774, 0.16811955051871608, 0.12322456409746896, 0.09856300067476009, 0.19351753280889206, 0.33278515906422734, 0.19585617680715406, 0.21684709497510568, 0.1588178060926151, 0.24590889242762082, 0.19065338111331098, 0.21999561678085733, 0.23921629846671455, 0.2473096753991636, 0.25139841550951314, 0.25018973806023814, 0.2563181655485187, 0.24827680422815313, 0.17104482340169047, 0.17438777549518525, 0.18652137383221978, 0.17877506396978893, 0.18376906354855005, 0.1636054453564666, 0.21337348416290047, 0.1799529095456721, 0.1824618557806874, 0.18965855790492214, 0.944706882767557, 0.18967505937084783, 0.17407502042711054, 0.2024186369075911, 0.11514414713071586, 0.16920610830415883, 0.1682514999497675, 0.16895851279997331, 0.9404226689703613, 0.11331609994785175, 0.7194126168594819, 0.7544267691831578, 0.15654660318094904, 0.21453194170402157, 0.06492637246840027, 0.09479795286667814, 0.8776146410149472, 0.2091131807892933, 0.21298604665218668, 0.23928538562252466, 0.24603521753449065, 0.213028212963975, 0.22140339266894704, 0.24320925850642117, 0.21760492859757474, 0.1855562318085856, 0.0854737887161473, 0.09777782081210828, 0.06579061783338969, 0.10910852346069766, 0.101573353670667, 0.08004841530980045, 0.07672787960328153, 0.09241158114311743, 0.09001032523259656]}, "mutation_prompt": null}
{"id": "bbe43805-a002-471e-9656-2463e3417e4f", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n\n        evaluations = self.population_size\n\n        # Chaotic sequence for enhanced exploration\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters with chaotic influence\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                # Update velocities and positions with adaptive velocity clamping\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSO", "description": "Enhanced Adaptive Dynamic Swarm Optimization with adaptive velocity clamping for improved balance between exploration and exploitation.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "174dfd87-246f-490c-a41a-9d48620c2142", "metadata": {"aucs": [0.9672889460943264, 0.9655140257204778, 0.9682345925081576, 0.960720516925544, 0.9580731714767021, 0.9657190611971629, 0.9670858759645922, 0.9670105639246046, 0.9590031341573582, 0.9109831458348876, 0.90018785640823, 0.9133472036111555, 0.9185820767461782, 0.8827259290831997, 0.8935957718398462, 0.9157124128694627, 0.9046357388488894, 0.8963919193884613, 0.08258084098310481, 0.1258025063507101, 0.054088180535653896, 0.062087692075551426, 0.1504937931204171, 0.11621406356190933, 0.09242994411244976, 0.05880190393443829, 0.03947782865330596, 0.10050100394219064, 0.07962151858363598, 0.12491678570990938, 0.13994710885763872, 0.1639556612635642, 0.10789120934742402, 0.1277169940284768, 0.04913464904206233, 0.07536419363142777, 0.9868878181648546, 0.9815436662618467, 0.9867949800291644, 0.9742938409634142, 0.9856479249729025, 0.9868776237678425, 0.980509262001661, 0.9764355008951185, 0.09945001530892428, 0.8695576037825782, 0.9069584047046176, 0.9091321419738142, 0.9130002231642697, 0.43423050829768695, 0.8917820729280459, 0.8930124311091302, 0.8746035432429233, 0.8723957125551702, 0.21885232428872636, 0.1617755219082494, 0.20706450290895884, 0.39499916188845663, 0.23001985285363802, 0.19785953418133506, 0.2599439816898593, 0.25125100898241204, 0.2071926602922861, 0.2842844058934746, 0.22077093711286278, 0.22789845254207575, 0.3201271860419157, 0.19731848635057803, 0.2346104833201833, 0.22824143509658856, 0.1376812470238581, 0.2213692706757684, 0.2337870732443167, 0.1531490134798078, 0.18559655135200304, 0.2339152589722947, 0.25302953342069934, 0.23687111691580698, 0.2725710023487945, 9.999999999998899e-05, 0.2751716198701235, 0.00011266821717725861, 0.00041641946556048026, 0.09022848871299627, 0.037578242534705875, 0.050116360548273065, 9.999999999998899e-05, 0.0059339144085859274, 0.06589749768909747, 9.999999999998899e-05, 0.14500087434875708, 0.09763341654236668, 0.09831612458370886, 0.052709223086294554, 0.020003565796235856, 0.03121721952694334, 0.08396922175893795, 0.0733937649234635, 0.14422779277363518, 0.1113886984383704, 0.2693691699592692, 0.31029816142931455, 0.11628277306357415, 0.08568678636554217, 0.14804824915780213, 0.09820991619607589, 0.20073212034212706, 0.08157391211825593, 0.2108272049324852, 0.08065242230399505, 0.06167295559803554, 0.10124611518554594, 0.0069424289428090535, 0.1347273519305403, 0.08685579034358148, 0.07481612047468622, 0.08667613399484686, 0.617464298299677, 0.5772999564309707, 0.6131707903905133, 0.5772957368236936, 0.5638573267594187, 0.20944262130877844, 0.6215265324839134, 0.6241908896770444, 0.5367699392703836, 0.03795561241371648, 0.06720852772204544, 0.034745692440503295, 0.0547595285997855, 0.06937922424569787, 0.09523615310128153, 0.05227105595724002, 0.07632593180879776, 0.08181649051064743, 0.20079425347290658, 0.24462110211288024, 0.24372474175293124, 0.19147136210533822, 0.20285685288051702, 0.15028302051835163, 0.176262930961273, 0.27485076987335255, 0.3293254536097219, 0.1704798750370483, 0.27624910165078165, 0.20109968887564733, 0.15156478169400178, 0.40311593633677034, 0.16213678744266313, 0.16767136463967347, 0.18741546781258012, 0.1364865975035071, 0.29943070331836774, 0.16811955051871608, 0.12322456409746896, 0.09856300067476009, 0.19351753280889206, 0.33278515906422734, 0.19585617680715406, 0.21684709497510568, 0.1588178060926151, 0.24590889242762082, 0.19065338111331098, 0.21999561678085733, 0.23921629846671455, 0.2473096753991636, 0.25139841550951314, 0.25018973806023814, 0.2563181655485187, 0.24827680422815313, 0.17104482340169047, 0.17438777549518525, 0.18652137383221978, 0.17877506396978893, 0.18376906354855005, 0.1636054453564666, 0.21337348416290047, 0.1799529095456721, 0.1824618557806874, 0.18965855790492214, 0.944706882767557, 0.18967505937084783, 0.17407502042711054, 0.2024186369075911, 0.11514414713071586, 0.16920610830415883, 0.1682514999497675, 0.16895851279997331, 0.9404226689703613, 0.11331609994785175, 0.7194126168594819, 0.7544267691831578, 0.15654660318094904, 0.21453194170402157, 0.06492637246840027, 0.09479795286667814, 0.8776146410149472, 0.2091131807892933, 0.21298604665218668, 0.23928538562252466, 0.24603521753449065, 0.213028212963975, 0.22140339266894704, 0.24320925850642117, 0.21760492859757474, 0.1855562318085856, 0.0854737887161473, 0.09777782081210828, 0.06579061783338969, 0.10910852346069766, 0.101573353670667, 0.08004841530980045, 0.07672787960328153, 0.09241158114311743, 0.09001032523259656]}, "mutation_prompt": null}
{"id": "534f78fe-1e82-40a5-a74e-2a9a7e0793e8", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n\n        evaluations = self.population_size\n\n        # Chaotic sequence for enhanced exploration\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters with chaotic influence\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                # Update velocities and positions with adaptive velocity clamping\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSO", "description": "Enhanced Adaptive Dynamic Swarm Optimization with adaptive velocity clamping for improved balance between exploration and exploitation.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "174dfd87-246f-490c-a41a-9d48620c2142", "metadata": {"aucs": [0.9672889460943264, 0.9655140257204778, 0.9682345925081576, 0.960720516925544, 0.9580731714767021, 0.9657190611971629, 0.9670858759645922, 0.9670105639246046, 0.9590031341573582, 0.9109831458348876, 0.90018785640823, 0.9133472036111555, 0.9185820767461782, 0.8827259290831997, 0.8935957718398462, 0.9157124128694627, 0.9046357388488894, 0.8963919193884613, 0.08258084098310481, 0.1258025063507101, 0.054088180535653896, 0.062087692075551426, 0.1504937931204171, 0.11621406356190933, 0.09242994411244976, 0.05880190393443829, 0.03947782865330596, 0.10050100394219064, 0.07962151858363598, 0.12491678570990938, 0.13994710885763872, 0.1639556612635642, 0.10789120934742402, 0.1277169940284768, 0.04913464904206233, 0.07536419363142777, 0.9868878181648546, 0.9815436662618467, 0.9867949800291644, 0.9742938409634142, 0.9856479249729025, 0.9868776237678425, 0.980509262001661, 0.9764355008951185, 0.09945001530892428, 0.8695576037825782, 0.9069584047046176, 0.9091321419738142, 0.9130002231642697, 0.43423050829768695, 0.8917820729280459, 0.8930124311091302, 0.8746035432429233, 0.8723957125551702, 0.21885232428872636, 0.1617755219082494, 0.20706450290895884, 0.39499916188845663, 0.23001985285363802, 0.19785953418133506, 0.2599439816898593, 0.25125100898241204, 0.2071926602922861, 0.2842844058934746, 0.22077093711286278, 0.22789845254207575, 0.3201271860419157, 0.19731848635057803, 0.2346104833201833, 0.22824143509658856, 0.1376812470238581, 0.2213692706757684, 0.2337870732443167, 0.1531490134798078, 0.18559655135200304, 0.2339152589722947, 0.25302953342069934, 0.23687111691580698, 0.2725710023487945, 9.999999999998899e-05, 0.2751716198701235, 0.00011266821717725861, 0.00041641946556048026, 0.09022848871299627, 0.037578242534705875, 0.050116360548273065, 9.999999999998899e-05, 0.0059339144085859274, 0.06589749768909747, 9.999999999998899e-05, 0.14500087434875708, 0.09763341654236668, 0.09831612458370886, 0.052709223086294554, 0.020003565796235856, 0.03121721952694334, 0.08396922175893795, 0.0733937649234635, 0.14422779277363518, 0.1113886984383704, 0.2693691699592692, 0.31029816142931455, 0.11628277306357415, 0.08568678636554217, 0.14804824915780213, 0.09820991619607589, 0.20073212034212706, 0.08157391211825593, 0.2108272049324852, 0.08065242230399505, 0.06167295559803554, 0.10124611518554594, 0.0069424289428090535, 0.1347273519305403, 0.08685579034358148, 0.07481612047468622, 0.08667613399484686, 0.617464298299677, 0.5772999564309707, 0.6131707903905133, 0.5772957368236936, 0.5638573267594187, 0.20944262130877844, 0.6215265324839134, 0.6241908896770444, 0.5367699392703836, 0.03795561241371648, 0.06720852772204544, 0.034745692440503295, 0.0547595285997855, 0.06937922424569787, 0.09523615310128153, 0.05227105595724002, 0.07632593180879776, 0.08181649051064743, 0.20079425347290658, 0.24462110211288024, 0.24372474175293124, 0.19147136210533822, 0.20285685288051702, 0.15028302051835163, 0.176262930961273, 0.27485076987335255, 0.3293254536097219, 0.1704798750370483, 0.27624910165078165, 0.20109968887564733, 0.15156478169400178, 0.40311593633677034, 0.16213678744266313, 0.16767136463967347, 0.18741546781258012, 0.1364865975035071, 0.29943070331836774, 0.16811955051871608, 0.12322456409746896, 0.09856300067476009, 0.19351753280889206, 0.33278515906422734, 0.19585617680715406, 0.21684709497510568, 0.1588178060926151, 0.24590889242762082, 0.19065338111331098, 0.21999561678085733, 0.23921629846671455, 0.2473096753991636, 0.25139841550951314, 0.25018973806023814, 0.2563181655485187, 0.24827680422815313, 0.17104482340169047, 0.17438777549518525, 0.18652137383221978, 0.17877506396978893, 0.18376906354855005, 0.1636054453564666, 0.21337348416290047, 0.1799529095456721, 0.1824618557806874, 0.18965855790492214, 0.944706882767557, 0.18967505937084783, 0.17407502042711054, 0.2024186369075911, 0.11514414713071586, 0.16920610830415883, 0.1682514999497675, 0.16895851279997331, 0.9404226689703613, 0.11331609994785175, 0.7194126168594819, 0.7544267691831578, 0.15654660318094904, 0.21453194170402157, 0.06492637246840027, 0.09479795286667814, 0.8776146410149472, 0.2091131807892933, 0.21298604665218668, 0.23928538562252466, 0.24603521753449065, 0.213028212963975, 0.22140339266894704, 0.24320925850642117, 0.21760492859757474, 0.1855562318085856, 0.0854737887161473, 0.09777782081210828, 0.06579061783338969, 0.10910852346069766, 0.101573353670667, 0.08004841530980045, 0.07672787960328153, 0.09241158114311743, 0.09001032523259656]}, "mutation_prompt": null}
{"id": "50041e9f-8049-4347-8bd1-f5f115e01ab0", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n\n        evaluations = self.population_size\n\n        # Chaotic sequence for enhanced exploration\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters with chaotic influence\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                # Update velocities and positions with adaptive velocity clamping\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSO", "description": "Enhanced Adaptive Dynamic Swarm Optimization with adaptive velocity clamping for improved balance between exploration and exploitation.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "174dfd87-246f-490c-a41a-9d48620c2142", "metadata": {"aucs": [0.9672889460943264, 0.9655140257204778, 0.9682345925081576, 0.960720516925544, 0.9580731714767021, 0.9657190611971629, 0.9670858759645922, 0.9670105639246046, 0.9590031341573582, 0.9109831458348876, 0.90018785640823, 0.9133472036111555, 0.9185820767461782, 0.8827259290831997, 0.8935957718398462, 0.9157124128694627, 0.9046357388488894, 0.8963919193884613, 0.08258084098310481, 0.1258025063507101, 0.054088180535653896, 0.062087692075551426, 0.1504937931204171, 0.11621406356190933, 0.09242994411244976, 0.05880190393443829, 0.03947782865330596, 0.10050100394219064, 0.07962151858363598, 0.12491678570990938, 0.13994710885763872, 0.1639556612635642, 0.10789120934742402, 0.1277169940284768, 0.04913464904206233, 0.07536419363142777, 0.9868878181648546, 0.9815436662618467, 0.9867949800291644, 0.9742938409634142, 0.9856479249729025, 0.9868776237678425, 0.980509262001661, 0.9764355008951185, 0.09945001530892428, 0.8695576037825782, 0.9069584047046176, 0.9091321419738142, 0.9130002231642697, 0.43423050829768695, 0.8917820729280459, 0.8930124311091302, 0.8746035432429233, 0.8723957125551702, 0.21885232428872636, 0.1617755219082494, 0.20706450290895884, 0.39499916188845663, 0.23001985285363802, 0.19785953418133506, 0.2599439816898593, 0.25125100898241204, 0.2071926602922861, 0.2842844058934746, 0.22077093711286278, 0.22789845254207575, 0.3201271860419157, 0.19731848635057803, 0.2346104833201833, 0.22824143509658856, 0.1376812470238581, 0.2213692706757684, 0.2337870732443167, 0.1531490134798078, 0.18559655135200304, 0.2339152589722947, 0.25302953342069934, 0.23687111691580698, 0.2725710023487945, 9.999999999998899e-05, 0.2751716198701235, 0.00011266821717725861, 0.00041641946556048026, 0.09022848871299627, 0.037578242534705875, 0.050116360548273065, 9.999999999998899e-05, 0.0059339144085859274, 0.06589749768909747, 9.999999999998899e-05, 0.14500087434875708, 0.09763341654236668, 0.09831612458370886, 0.052709223086294554, 0.020003565796235856, 0.03121721952694334, 0.08396922175893795, 0.0733937649234635, 0.14422779277363518, 0.1113886984383704, 0.2693691699592692, 0.31029816142931455, 0.11628277306357415, 0.08568678636554217, 0.14804824915780213, 0.09820991619607589, 0.20073212034212706, 0.08157391211825593, 0.2108272049324852, 0.08065242230399505, 0.06167295559803554, 0.10124611518554594, 0.0069424289428090535, 0.1347273519305403, 0.08685579034358148, 0.07481612047468622, 0.08667613399484686, 0.617464298299677, 0.5772999564309707, 0.6131707903905133, 0.5772957368236936, 0.5638573267594187, 0.20944262130877844, 0.6215265324839134, 0.6241908896770444, 0.5367699392703836, 0.03795561241371648, 0.06720852772204544, 0.034745692440503295, 0.0547595285997855, 0.06937922424569787, 0.09523615310128153, 0.05227105595724002, 0.07632593180879776, 0.08181649051064743, 0.20079425347290658, 0.24462110211288024, 0.24372474175293124, 0.19147136210533822, 0.20285685288051702, 0.15028302051835163, 0.176262930961273, 0.27485076987335255, 0.3293254536097219, 0.1704798750370483, 0.27624910165078165, 0.20109968887564733, 0.15156478169400178, 0.40311593633677034, 0.16213678744266313, 0.16767136463967347, 0.18741546781258012, 0.1364865975035071, 0.29943070331836774, 0.16811955051871608, 0.12322456409746896, 0.09856300067476009, 0.19351753280889206, 0.33278515906422734, 0.19585617680715406, 0.21684709497510568, 0.1588178060926151, 0.24590889242762082, 0.19065338111331098, 0.21999561678085733, 0.23921629846671455, 0.2473096753991636, 0.25139841550951314, 0.25018973806023814, 0.2563181655485187, 0.24827680422815313, 0.17104482340169047, 0.17438777549518525, 0.18652137383221978, 0.17877506396978893, 0.18376906354855005, 0.1636054453564666, 0.21337348416290047, 0.1799529095456721, 0.1824618557806874, 0.18965855790492214, 0.944706882767557, 0.18967505937084783, 0.17407502042711054, 0.2024186369075911, 0.11514414713071586, 0.16920610830415883, 0.1682514999497675, 0.16895851279997331, 0.9404226689703613, 0.11331609994785175, 0.7194126168594819, 0.7544267691831578, 0.15654660318094904, 0.21453194170402157, 0.06492637246840027, 0.09479795286667814, 0.8776146410149472, 0.2091131807892933, 0.21298604665218668, 0.23928538562252466, 0.24603521753449065, 0.213028212963975, 0.22140339266894704, 0.24320925850642117, 0.21760492859757474, 0.1855562318085856, 0.0854737887161473, 0.09777782081210828, 0.06579061783338969, 0.10910852346069766, 0.101573353670667, 0.08004841530980045, 0.07672787960328153, 0.09241158114311743, 0.09001032523259656]}, "mutation_prompt": null}
{"id": "88fad6c4-1263-4140-9e02-dabe61cefb58", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n\n        evaluations = self.population_size\n\n        # Chaotic sequence for enhanced exploration\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters with chaotic influence\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                # Update velocities and positions with adaptive velocity clamping\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSO", "description": "Enhanced Adaptive Dynamic Swarm Optimization with adaptive velocity clamping for improved balance between exploration and exploitation.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "174dfd87-246f-490c-a41a-9d48620c2142", "metadata": {"aucs": [0.9672889460943264, 0.9655140257204778, 0.9682345925081576, 0.960720516925544, 0.9580731714767021, 0.9657190611971629, 0.9670858759645922, 0.9670105639246046, 0.9590031341573582, 0.9109831458348876, 0.90018785640823, 0.9133472036111555, 0.9185820767461782, 0.8827259290831997, 0.8935957718398462, 0.9157124128694627, 0.9046357388488894, 0.8963919193884613, 0.08258084098310481, 0.1258025063507101, 0.054088180535653896, 0.062087692075551426, 0.1504937931204171, 0.11621406356190933, 0.09242994411244976, 0.05880190393443829, 0.03947782865330596, 0.10050100394219064, 0.07962151858363598, 0.12491678570990938, 0.13994710885763872, 0.1639556612635642, 0.10789120934742402, 0.1277169940284768, 0.04913464904206233, 0.07536419363142777, 0.9868878181648546, 0.9815436662618467, 0.9867949800291644, 0.9742938409634142, 0.9856479249729025, 0.9868776237678425, 0.980509262001661, 0.9764355008951185, 0.09945001530892428, 0.8695576037825782, 0.9069584047046176, 0.9091321419738142, 0.9130002231642697, 0.43423050829768695, 0.8917820729280459, 0.8930124311091302, 0.8746035432429233, 0.8723957125551702, 0.21885232428872636, 0.1617755219082494, 0.20706450290895884, 0.39499916188845663, 0.23001985285363802, 0.19785953418133506, 0.2599439816898593, 0.25125100898241204, 0.2071926602922861, 0.2842844058934746, 0.22077093711286278, 0.22789845254207575, 0.3201271860419157, 0.19731848635057803, 0.2346104833201833, 0.22824143509658856, 0.1376812470238581, 0.2213692706757684, 0.2337870732443167, 0.1531490134798078, 0.18559655135200304, 0.2339152589722947, 0.25302953342069934, 0.23687111691580698, 0.2725710023487945, 9.999999999998899e-05, 0.2751716198701235, 0.00011266821717725861, 0.00041641946556048026, 0.09022848871299627, 0.037578242534705875, 0.050116360548273065, 9.999999999998899e-05, 0.0059339144085859274, 0.06589749768909747, 9.999999999998899e-05, 0.14500087434875708, 0.09763341654236668, 0.09831612458370886, 0.052709223086294554, 0.020003565796235856, 0.03121721952694334, 0.08396922175893795, 0.0733937649234635, 0.14422779277363518, 0.1113886984383704, 0.2693691699592692, 0.31029816142931455, 0.11628277306357415, 0.08568678636554217, 0.14804824915780213, 0.09820991619607589, 0.20073212034212706, 0.08157391211825593, 0.2108272049324852, 0.08065242230399505, 0.06167295559803554, 0.10124611518554594, 0.0069424289428090535, 0.1347273519305403, 0.08685579034358148, 0.07481612047468622, 0.08667613399484686, 0.617464298299677, 0.5772999564309707, 0.6131707903905133, 0.5772957368236936, 0.5638573267594187, 0.20944262130877844, 0.6215265324839134, 0.6241908896770444, 0.5367699392703836, 0.03795561241371648, 0.06720852772204544, 0.034745692440503295, 0.0547595285997855, 0.06937922424569787, 0.09523615310128153, 0.05227105595724002, 0.07632593180879776, 0.08181649051064743, 0.20079425347290658, 0.24462110211288024, 0.24372474175293124, 0.19147136210533822, 0.20285685288051702, 0.15028302051835163, 0.176262930961273, 0.27485076987335255, 0.3293254536097219, 0.1704798750370483, 0.27624910165078165, 0.20109968887564733, 0.15156478169400178, 0.40311593633677034, 0.16213678744266313, 0.16767136463967347, 0.18741546781258012, 0.1364865975035071, 0.29943070331836774, 0.16811955051871608, 0.12322456409746896, 0.09856300067476009, 0.19351753280889206, 0.33278515906422734, 0.19585617680715406, 0.21684709497510568, 0.1588178060926151, 0.24590889242762082, 0.19065338111331098, 0.21999561678085733, 0.23921629846671455, 0.2473096753991636, 0.25139841550951314, 0.25018973806023814, 0.2563181655485187, 0.24827680422815313, 0.17104482340169047, 0.17438777549518525, 0.18652137383221978, 0.17877506396978893, 0.18376906354855005, 0.1636054453564666, 0.21337348416290047, 0.1799529095456721, 0.1824618557806874, 0.18965855790492214, 0.944706882767557, 0.18967505937084783, 0.17407502042711054, 0.2024186369075911, 0.11514414713071586, 0.16920610830415883, 0.1682514999497675, 0.16895851279997331, 0.9404226689703613, 0.11331609994785175, 0.7194126168594819, 0.7544267691831578, 0.15654660318094904, 0.21453194170402157, 0.06492637246840027, 0.09479795286667814, 0.8776146410149472, 0.2091131807892933, 0.21298604665218668, 0.23928538562252466, 0.24603521753449065, 0.213028212963975, 0.22140339266894704, 0.24320925850642117, 0.21760492859757474, 0.1855562318085856, 0.0854737887161473, 0.09777782081210828, 0.06579061783338969, 0.10910852346069766, 0.101573353670667, 0.08004841530980045, 0.07672787960328153, 0.09241158114311743, 0.09001032523259656]}, "mutation_prompt": null}
{"id": "9ea7bef1-886d-487f-9256-7f5fd0d34759", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n\n        evaluations = self.population_size\n\n        # Chaotic sequence for enhanced exploration\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters with chaotic influence\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                # Update velocities and positions with adaptive velocity clamping\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSO", "description": "Enhanced Adaptive Dynamic Swarm Optimization with adaptive velocity clamping for improved balance between exploration and exploitation.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "174dfd87-246f-490c-a41a-9d48620c2142", "metadata": {"aucs": [0.9672889460943264, 0.9655140257204778, 0.9682345925081576, 0.960720516925544, 0.9580731714767021, 0.9657190611971629, 0.9670858759645922, 0.9670105639246046, 0.9590031341573582, 0.9109831458348876, 0.90018785640823, 0.9133472036111555, 0.9185820767461782, 0.8827259290831997, 0.8935957718398462, 0.9157124128694627, 0.9046357388488894, 0.8963919193884613, 0.08258084098310481, 0.1258025063507101, 0.054088180535653896, 0.062087692075551426, 0.1504937931204171, 0.11621406356190933, 0.09242994411244976, 0.05880190393443829, 0.03947782865330596, 0.10050100394219064, 0.07962151858363598, 0.12491678570990938, 0.13994710885763872, 0.1639556612635642, 0.10789120934742402, 0.1277169940284768, 0.04913464904206233, 0.07536419363142777, 0.9868878181648546, 0.9815436662618467, 0.9867949800291644, 0.9742938409634142, 0.9856479249729025, 0.9868776237678425, 0.980509262001661, 0.9764355008951185, 0.09945001530892428, 0.8695576037825782, 0.9069584047046176, 0.9091321419738142, 0.9130002231642697, 0.43423050829768695, 0.8917820729280459, 0.8930124311091302, 0.8746035432429233, 0.8723957125551702, 0.21885232428872636, 0.1617755219082494, 0.20706450290895884, 0.39499916188845663, 0.23001985285363802, 0.19785953418133506, 0.2599439816898593, 0.25125100898241204, 0.2071926602922861, 0.2842844058934746, 0.22077093711286278, 0.22789845254207575, 0.3201271860419157, 0.19731848635057803, 0.2346104833201833, 0.22824143509658856, 0.1376812470238581, 0.2213692706757684, 0.2337870732443167, 0.1531490134798078, 0.18559655135200304, 0.2339152589722947, 0.25302953342069934, 0.23687111691580698, 0.2725710023487945, 9.999999999998899e-05, 0.2751716198701235, 0.00011266821717725861, 0.00041641946556048026, 0.09022848871299627, 0.037578242534705875, 0.050116360548273065, 9.999999999998899e-05, 0.0059339144085859274, 0.06589749768909747, 9.999999999998899e-05, 0.14500087434875708, 0.09763341654236668, 0.09831612458370886, 0.052709223086294554, 0.020003565796235856, 0.03121721952694334, 0.08396922175893795, 0.0733937649234635, 0.14422779277363518, 0.1113886984383704, 0.2693691699592692, 0.31029816142931455, 0.11628277306357415, 0.08568678636554217, 0.14804824915780213, 0.09820991619607589, 0.20073212034212706, 0.08157391211825593, 0.2108272049324852, 0.08065242230399505, 0.06167295559803554, 0.10124611518554594, 0.0069424289428090535, 0.1347273519305403, 0.08685579034358148, 0.07481612047468622, 0.08667613399484686, 0.617464298299677, 0.5772999564309707, 0.6131707903905133, 0.5772957368236936, 0.5638573267594187, 0.20944262130877844, 0.6215265324839134, 0.6241908896770444, 0.5367699392703836, 0.03795561241371648, 0.06720852772204544, 0.034745692440503295, 0.0547595285997855, 0.06937922424569787, 0.09523615310128153, 0.05227105595724002, 0.07632593180879776, 0.08181649051064743, 0.20079425347290658, 0.24462110211288024, 0.24372474175293124, 0.19147136210533822, 0.20285685288051702, 0.15028302051835163, 0.176262930961273, 0.27485076987335255, 0.3293254536097219, 0.1704798750370483, 0.27624910165078165, 0.20109968887564733, 0.15156478169400178, 0.40311593633677034, 0.16213678744266313, 0.16767136463967347, 0.18741546781258012, 0.1364865975035071, 0.29943070331836774, 0.16811955051871608, 0.12322456409746896, 0.09856300067476009, 0.19351753280889206, 0.33278515906422734, 0.19585617680715406, 0.21684709497510568, 0.1588178060926151, 0.24590889242762082, 0.19065338111331098, 0.21999561678085733, 0.23921629846671455, 0.2473096753991636, 0.25139841550951314, 0.25018973806023814, 0.2563181655485187, 0.24827680422815313, 0.17104482340169047, 0.17438777549518525, 0.18652137383221978, 0.17877506396978893, 0.18376906354855005, 0.1636054453564666, 0.21337348416290047, 0.1799529095456721, 0.1824618557806874, 0.18965855790492214, 0.944706882767557, 0.18967505937084783, 0.17407502042711054, 0.2024186369075911, 0.11514414713071586, 0.16920610830415883, 0.1682514999497675, 0.16895851279997331, 0.9404226689703613, 0.11331609994785175, 0.7194126168594819, 0.7544267691831578, 0.15654660318094904, 0.21453194170402157, 0.06492637246840027, 0.09479795286667814, 0.8776146410149472, 0.2091131807892933, 0.21298604665218668, 0.23928538562252466, 0.24603521753449065, 0.213028212963975, 0.22140339266894704, 0.24320925850642117, 0.21760492859757474, 0.1855562318085856, 0.0854737887161473, 0.09777782081210828, 0.06579061783338969, 0.10910852346069766, 0.101573353670667, 0.08004841530980045, 0.07672787960328153, 0.09241158114311743, 0.09001032523259656]}, "mutation_prompt": null}
{"id": "8d3e9dd6-be31-4f74-88fd-05dc5b7aa72e", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n\n        evaluations = self.population_size\n\n        # Chaotic sequence for enhanced exploration\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters with chaotic influence\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                # Update velocities and positions with adaptive velocity clamping\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSO", "description": "Enhanced Adaptive Dynamic Swarm Optimization with adaptive velocity clamping for improved balance between exploration and exploitation.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "174dfd87-246f-490c-a41a-9d48620c2142", "metadata": {"aucs": [0.9672889460943264, 0.9655140257204778, 0.9682345925081576, 0.960720516925544, 0.9580731714767021, 0.9657190611971629, 0.9670858759645922, 0.9670105639246046, 0.9590031341573582, 0.9109831458348876, 0.90018785640823, 0.9133472036111555, 0.9185820767461782, 0.8827259290831997, 0.8935957718398462, 0.9157124128694627, 0.9046357388488894, 0.8963919193884613, 0.08258084098310481, 0.1258025063507101, 0.054088180535653896, 0.062087692075551426, 0.1504937931204171, 0.11621406356190933, 0.09242994411244976, 0.05880190393443829, 0.03947782865330596, 0.10050100394219064, 0.07962151858363598, 0.12491678570990938, 0.13994710885763872, 0.1639556612635642, 0.10789120934742402, 0.1277169940284768, 0.04913464904206233, 0.07536419363142777, 0.9868878181648546, 0.9815436662618467, 0.9867949800291644, 0.9742938409634142, 0.9856479249729025, 0.9868776237678425, 0.980509262001661, 0.9764355008951185, 0.09945001530892428, 0.8695576037825782, 0.9069584047046176, 0.9091321419738142, 0.9130002231642697, 0.43423050829768695, 0.8917820729280459, 0.8930124311091302, 0.8746035432429233, 0.8723957125551702, 0.21885232428872636, 0.1617755219082494, 0.20706450290895884, 0.39499916188845663, 0.23001985285363802, 0.19785953418133506, 0.2599439816898593, 0.25125100898241204, 0.2071926602922861, 0.2842844058934746, 0.22077093711286278, 0.22789845254207575, 0.3201271860419157, 0.19731848635057803, 0.2346104833201833, 0.22824143509658856, 0.1376812470238581, 0.2213692706757684, 0.2337870732443167, 0.1531490134798078, 0.18559655135200304, 0.2339152589722947, 0.25302953342069934, 0.23687111691580698, 0.2725710023487945, 9.999999999998899e-05, 0.2751716198701235, 0.00011266821717725861, 0.00041641946556048026, 0.09022848871299627, 0.037578242534705875, 0.050116360548273065, 9.999999999998899e-05, 0.0059339144085859274, 0.06589749768909747, 9.999999999998899e-05, 0.14500087434875708, 0.09763341654236668, 0.09831612458370886, 0.052709223086294554, 0.020003565796235856, 0.03121721952694334, 0.08396922175893795, 0.0733937649234635, 0.14422779277363518, 0.1113886984383704, 0.2693691699592692, 0.31029816142931455, 0.11628277306357415, 0.08568678636554217, 0.14804824915780213, 0.09820991619607589, 0.20073212034212706, 0.08157391211825593, 0.2108272049324852, 0.08065242230399505, 0.06167295559803554, 0.10124611518554594, 0.0069424289428090535, 0.1347273519305403, 0.08685579034358148, 0.07481612047468622, 0.08667613399484686, 0.617464298299677, 0.5772999564309707, 0.6131707903905133, 0.5772957368236936, 0.5638573267594187, 0.20944262130877844, 0.6215265324839134, 0.6241908896770444, 0.5367699392703836, 0.03795561241371648, 0.06720852772204544, 0.034745692440503295, 0.0547595285997855, 0.06937922424569787, 0.09523615310128153, 0.05227105595724002, 0.07632593180879776, 0.08181649051064743, 0.20079425347290658, 0.24462110211288024, 0.24372474175293124, 0.19147136210533822, 0.20285685288051702, 0.15028302051835163, 0.176262930961273, 0.27485076987335255, 0.3293254536097219, 0.1704798750370483, 0.27624910165078165, 0.20109968887564733, 0.15156478169400178, 0.40311593633677034, 0.16213678744266313, 0.16767136463967347, 0.18741546781258012, 0.1364865975035071, 0.29943070331836774, 0.16811955051871608, 0.12322456409746896, 0.09856300067476009, 0.19351753280889206, 0.33278515906422734, 0.19585617680715406, 0.21684709497510568, 0.1588178060926151, 0.24590889242762082, 0.19065338111331098, 0.21999561678085733, 0.23921629846671455, 0.2473096753991636, 0.25139841550951314, 0.25018973806023814, 0.2563181655485187, 0.24827680422815313, 0.17104482340169047, 0.17438777549518525, 0.18652137383221978, 0.17877506396978893, 0.18376906354855005, 0.1636054453564666, 0.21337348416290047, 0.1799529095456721, 0.1824618557806874, 0.18965855790492214, 0.944706882767557, 0.18967505937084783, 0.17407502042711054, 0.2024186369075911, 0.11514414713071586, 0.16920610830415883, 0.1682514999497675, 0.16895851279997331, 0.9404226689703613, 0.11331609994785175, 0.7194126168594819, 0.7544267691831578, 0.15654660318094904, 0.21453194170402157, 0.06492637246840027, 0.09479795286667814, 0.8776146410149472, 0.2091131807892933, 0.21298604665218668, 0.23928538562252466, 0.24603521753449065, 0.213028212963975, 0.22140339266894704, 0.24320925850642117, 0.21760492859757474, 0.1855562318085856, 0.0854737887161473, 0.09777782081210828, 0.06579061783338969, 0.10910852346069766, 0.101573353670667, 0.08004841530980045, 0.07672787960328153, 0.09241158114311743, 0.09001032523259656]}, "mutation_prompt": null}
{"id": "9736901b-f26a-4923-9eef-4320af13111e", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n\n        evaluations = self.population_size\n\n        # Chaotic sequence for enhanced exploration\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters with chaotic influence\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                # Update velocities and positions with adaptive velocity clamping\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSO", "description": "Enhanced Adaptive Dynamic Swarm Optimization with adaptive velocity clamping for improved balance between exploration and exploitation.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "174dfd87-246f-490c-a41a-9d48620c2142", "metadata": {"aucs": [0.9672889460943264, 0.9655140257204778, 0.9682345925081576, 0.960720516925544, 0.9580731714767021, 0.9657190611971629, 0.9670858759645922, 0.9670105639246046, 0.9590031341573582, 0.9109831458348876, 0.90018785640823, 0.9133472036111555, 0.9185820767461782, 0.8827259290831997, 0.8935957718398462, 0.9157124128694627, 0.9046357388488894, 0.8963919193884613, 0.08258084098310481, 0.1258025063507101, 0.054088180535653896, 0.062087692075551426, 0.1504937931204171, 0.11621406356190933, 0.09242994411244976, 0.05880190393443829, 0.03947782865330596, 0.10050100394219064, 0.07962151858363598, 0.12491678570990938, 0.13994710885763872, 0.1639556612635642, 0.10789120934742402, 0.1277169940284768, 0.04913464904206233, 0.07536419363142777, 0.9868878181648546, 0.9815436662618467, 0.9867949800291644, 0.9742938409634142, 0.9856479249729025, 0.9868776237678425, 0.980509262001661, 0.9764355008951185, 0.09945001530892428, 0.8695576037825782, 0.9069584047046176, 0.9091321419738142, 0.9130002231642697, 0.43423050829768695, 0.8917820729280459, 0.8930124311091302, 0.8746035432429233, 0.8723957125551702, 0.21885232428872636, 0.1617755219082494, 0.20706450290895884, 0.39499916188845663, 0.23001985285363802, 0.19785953418133506, 0.2599439816898593, 0.25125100898241204, 0.2071926602922861, 0.2842844058934746, 0.22077093711286278, 0.22789845254207575, 0.3201271860419157, 0.19731848635057803, 0.2346104833201833, 0.22824143509658856, 0.1376812470238581, 0.2213692706757684, 0.2337870732443167, 0.1531490134798078, 0.18559655135200304, 0.2339152589722947, 0.25302953342069934, 0.23687111691580698, 0.2725710023487945, 9.999999999998899e-05, 0.2751716198701235, 0.00011266821717725861, 0.00041641946556048026, 0.09022848871299627, 0.037578242534705875, 0.050116360548273065, 9.999999999998899e-05, 0.0059339144085859274, 0.06589749768909747, 9.999999999998899e-05, 0.14500087434875708, 0.09763341654236668, 0.09831612458370886, 0.052709223086294554, 0.020003565796235856, 0.03121721952694334, 0.08396922175893795, 0.0733937649234635, 0.14422779277363518, 0.1113886984383704, 0.2693691699592692, 0.31029816142931455, 0.11628277306357415, 0.08568678636554217, 0.14804824915780213, 0.09820991619607589, 0.20073212034212706, 0.08157391211825593, 0.2108272049324852, 0.08065242230399505, 0.06167295559803554, 0.10124611518554594, 0.0069424289428090535, 0.1347273519305403, 0.08685579034358148, 0.07481612047468622, 0.08667613399484686, 0.617464298299677, 0.5772999564309707, 0.6131707903905133, 0.5772957368236936, 0.5638573267594187, 0.20944262130877844, 0.6215265324839134, 0.6241908896770444, 0.5367699392703836, 0.03795561241371648, 0.06720852772204544, 0.034745692440503295, 0.0547595285997855, 0.06937922424569787, 0.09523615310128153, 0.05227105595724002, 0.07632593180879776, 0.08181649051064743, 0.20079425347290658, 0.24462110211288024, 0.24372474175293124, 0.19147136210533822, 0.20285685288051702, 0.15028302051835163, 0.176262930961273, 0.27485076987335255, 0.3293254536097219, 0.1704798750370483, 0.27624910165078165, 0.20109968887564733, 0.15156478169400178, 0.40311593633677034, 0.16213678744266313, 0.16767136463967347, 0.18741546781258012, 0.1364865975035071, 0.29943070331836774, 0.16811955051871608, 0.12322456409746896, 0.09856300067476009, 0.19351753280889206, 0.33278515906422734, 0.19585617680715406, 0.21684709497510568, 0.1588178060926151, 0.24590889242762082, 0.19065338111331098, 0.21999561678085733, 0.23921629846671455, 0.2473096753991636, 0.25139841550951314, 0.25018973806023814, 0.2563181655485187, 0.24827680422815313, 0.17104482340169047, 0.17438777549518525, 0.18652137383221978, 0.17877506396978893, 0.18376906354855005, 0.1636054453564666, 0.21337348416290047, 0.1799529095456721, 0.1824618557806874, 0.18965855790492214, 0.944706882767557, 0.18967505937084783, 0.17407502042711054, 0.2024186369075911, 0.11514414713071586, 0.16920610830415883, 0.1682514999497675, 0.16895851279997331, 0.9404226689703613, 0.11331609994785175, 0.7194126168594819, 0.7544267691831578, 0.15654660318094904, 0.21453194170402157, 0.06492637246840027, 0.09479795286667814, 0.8776146410149472, 0.2091131807892933, 0.21298604665218668, 0.23928538562252466, 0.24603521753449065, 0.213028212963975, 0.22140339266894704, 0.24320925850642117, 0.21760492859757474, 0.1855562318085856, 0.0854737887161473, 0.09777782081210828, 0.06579061783338969, 0.10910852346069766, 0.101573353670667, 0.08004841530980045, 0.07672787960328153, 0.09241158114311743, 0.09001032523259656]}, "mutation_prompt": null}
{"id": "21da5ba5-2534-4b4d-9bcb-f2c27d77a133", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n\n        evaluations = self.population_size\n\n        # Chaotic sequence for enhanced exploration\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters with chaotic influence\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                # Update velocities and positions with adaptive velocity clamping\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSO", "description": "Enhanced Adaptive Dynamic Swarm Optimization with adaptive velocity clamping for improved balance between exploration and exploitation.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "174dfd87-246f-490c-a41a-9d48620c2142", "metadata": {"aucs": [0.9672889460943264, 0.9655140257204778, 0.9682345925081576, 0.960720516925544, 0.9580731714767021, 0.9657190611971629, 0.9670858759645922, 0.9670105639246046, 0.9590031341573582, 0.9109831458348876, 0.90018785640823, 0.9133472036111555, 0.9185820767461782, 0.8827259290831997, 0.8935957718398462, 0.9157124128694627, 0.9046357388488894, 0.8963919193884613, 0.08258084098310481, 0.1258025063507101, 0.054088180535653896, 0.062087692075551426, 0.1504937931204171, 0.11621406356190933, 0.09242994411244976, 0.05880190393443829, 0.03947782865330596, 0.10050100394219064, 0.07962151858363598, 0.12491678570990938, 0.13994710885763872, 0.1639556612635642, 0.10789120934742402, 0.1277169940284768, 0.04913464904206233, 0.07536419363142777, 0.9868878181648546, 0.9815436662618467, 0.9867949800291644, 0.9742938409634142, 0.9856479249729025, 0.9868776237678425, 0.980509262001661, 0.9764355008951185, 0.09945001530892428, 0.8695576037825782, 0.9069584047046176, 0.9091321419738142, 0.9130002231642697, 0.43423050829768695, 0.8917820729280459, 0.8930124311091302, 0.8746035432429233, 0.8723957125551702, 0.21885232428872636, 0.1617755219082494, 0.20706450290895884, 0.39499916188845663, 0.23001985285363802, 0.19785953418133506, 0.2599439816898593, 0.25125100898241204, 0.2071926602922861, 0.2842844058934746, 0.22077093711286278, 0.22789845254207575, 0.3201271860419157, 0.19731848635057803, 0.2346104833201833, 0.22824143509658856, 0.1376812470238581, 0.2213692706757684, 0.2337870732443167, 0.1531490134798078, 0.18559655135200304, 0.2339152589722947, 0.25302953342069934, 0.23687111691580698, 0.2725710023487945, 9.999999999998899e-05, 0.2751716198701235, 0.00011266821717725861, 0.00041641946556048026, 0.09022848871299627, 0.037578242534705875, 0.050116360548273065, 9.999999999998899e-05, 0.0059339144085859274, 0.06589749768909747, 9.999999999998899e-05, 0.14500087434875708, 0.09763341654236668, 0.09831612458370886, 0.052709223086294554, 0.020003565796235856, 0.03121721952694334, 0.08396922175893795, 0.0733937649234635, 0.14422779277363518, 0.1113886984383704, 0.2693691699592692, 0.31029816142931455, 0.11628277306357415, 0.08568678636554217, 0.14804824915780213, 0.09820991619607589, 0.20073212034212706, 0.08157391211825593, 0.2108272049324852, 0.08065242230399505, 0.06167295559803554, 0.10124611518554594, 0.0069424289428090535, 0.1347273519305403, 0.08685579034358148, 0.07481612047468622, 0.08667613399484686, 0.617464298299677, 0.5772999564309707, 0.6131707903905133, 0.5772957368236936, 0.5638573267594187, 0.20944262130877844, 0.6215265324839134, 0.6241908896770444, 0.5367699392703836, 0.03795561241371648, 0.06720852772204544, 0.034745692440503295, 0.0547595285997855, 0.06937922424569787, 0.09523615310128153, 0.05227105595724002, 0.07632593180879776, 0.08181649051064743, 0.20079425347290658, 0.24462110211288024, 0.24372474175293124, 0.19147136210533822, 0.20285685288051702, 0.15028302051835163, 0.176262930961273, 0.27485076987335255, 0.3293254536097219, 0.1704798750370483, 0.27624910165078165, 0.20109968887564733, 0.15156478169400178, 0.40311593633677034, 0.16213678744266313, 0.16767136463967347, 0.18741546781258012, 0.1364865975035071, 0.29943070331836774, 0.16811955051871608, 0.12322456409746896, 0.09856300067476009, 0.19351753280889206, 0.33278515906422734, 0.19585617680715406, 0.21684709497510568, 0.1588178060926151, 0.24590889242762082, 0.19065338111331098, 0.21999561678085733, 0.23921629846671455, 0.2473096753991636, 0.25139841550951314, 0.25018973806023814, 0.2563181655485187, 0.24827680422815313, 0.17104482340169047, 0.17438777549518525, 0.18652137383221978, 0.17877506396978893, 0.18376906354855005, 0.1636054453564666, 0.21337348416290047, 0.1799529095456721, 0.1824618557806874, 0.18965855790492214, 0.944706882767557, 0.18967505937084783, 0.17407502042711054, 0.2024186369075911, 0.11514414713071586, 0.16920610830415883, 0.1682514999497675, 0.16895851279997331, 0.9404226689703613, 0.11331609994785175, 0.7194126168594819, 0.7544267691831578, 0.15654660318094904, 0.21453194170402157, 0.06492637246840027, 0.09479795286667814, 0.8776146410149472, 0.2091131807892933, 0.21298604665218668, 0.23928538562252466, 0.24603521753449065, 0.213028212963975, 0.22140339266894704, 0.24320925850642117, 0.21760492859757474, 0.1855562318085856, 0.0854737887161473, 0.09777782081210828, 0.06579061783338969, 0.10910852346069766, 0.101573353670667, 0.08004841530980045, 0.07672787960328153, 0.09241158114311743, 0.09001032523259656]}, "mutation_prompt": null}
{"id": "c255ae0f-5120-4312-b14c-f0c145bd89f1", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n\n        evaluations = self.population_size\n\n        # Chaotic sequence for enhanced exploration\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters with chaotic influence\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                # Update velocities and positions with adaptive velocity clamping\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSO", "description": "Enhanced Adaptive Dynamic Swarm Optimization with adaptive velocity clamping for improved balance between exploration and exploitation.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "174dfd87-246f-490c-a41a-9d48620c2142", "metadata": {"aucs": [0.9672889460943264, 0.9655140257204778, 0.9682345925081576, 0.960720516925544, 0.9580731714767021, 0.9657190611971629, 0.9670858759645922, 0.9670105639246046, 0.9590031341573582, 0.9109831458348876, 0.90018785640823, 0.9133472036111555, 0.9185820767461782, 0.8827259290831997, 0.8935957718398462, 0.9157124128694627, 0.9046357388488894, 0.8963919193884613, 0.08258084098310481, 0.1258025063507101, 0.054088180535653896, 0.062087692075551426, 0.1504937931204171, 0.11621406356190933, 0.09242994411244976, 0.05880190393443829, 0.03947782865330596, 0.10050100394219064, 0.07962151858363598, 0.12491678570990938, 0.13994710885763872, 0.1639556612635642, 0.10789120934742402, 0.1277169940284768, 0.04913464904206233, 0.07536419363142777, 0.9868878181648546, 0.9815436662618467, 0.9867949800291644, 0.9742938409634142, 0.9856479249729025, 0.9868776237678425, 0.980509262001661, 0.9764355008951185, 0.09945001530892428, 0.8695576037825782, 0.9069584047046176, 0.9091321419738142, 0.9130002231642697, 0.43423050829768695, 0.8917820729280459, 0.8930124311091302, 0.8746035432429233, 0.8723957125551702, 0.21885232428872636, 0.1617755219082494, 0.20706450290895884, 0.39499916188845663, 0.23001985285363802, 0.19785953418133506, 0.2599439816898593, 0.25125100898241204, 0.2071926602922861, 0.2842844058934746, 0.22077093711286278, 0.22789845254207575, 0.3201271860419157, 0.19731848635057803, 0.2346104833201833, 0.22824143509658856, 0.1376812470238581, 0.2213692706757684, 0.2337870732443167, 0.1531490134798078, 0.18559655135200304, 0.2339152589722947, 0.25302953342069934, 0.23687111691580698, 0.2725710023487945, 9.999999999998899e-05, 0.2751716198701235, 0.00011266821717725861, 0.00041641946556048026, 0.09022848871299627, 0.037578242534705875, 0.050116360548273065, 9.999999999998899e-05, 0.0059339144085859274, 0.06589749768909747, 9.999999999998899e-05, 0.14500087434875708, 0.09763341654236668, 0.09831612458370886, 0.052709223086294554, 0.020003565796235856, 0.03121721952694334, 0.08396922175893795, 0.0733937649234635, 0.14422779277363518, 0.1113886984383704, 0.2693691699592692, 0.31029816142931455, 0.11628277306357415, 0.08568678636554217, 0.14804824915780213, 0.09820991619607589, 0.20073212034212706, 0.08157391211825593, 0.2108272049324852, 0.08065242230399505, 0.06167295559803554, 0.10124611518554594, 0.0069424289428090535, 0.1347273519305403, 0.08685579034358148, 0.07481612047468622, 0.08667613399484686, 0.617464298299677, 0.5772999564309707, 0.6131707903905133, 0.5772957368236936, 0.5638573267594187, 0.20944262130877844, 0.6215265324839134, 0.6241908896770444, 0.5367699392703836, 0.03795561241371648, 0.06720852772204544, 0.034745692440503295, 0.0547595285997855, 0.06937922424569787, 0.09523615310128153, 0.05227105595724002, 0.07632593180879776, 0.08181649051064743, 0.20079425347290658, 0.24462110211288024, 0.24372474175293124, 0.19147136210533822, 0.20285685288051702, 0.15028302051835163, 0.176262930961273, 0.27485076987335255, 0.3293254536097219, 0.1704798750370483, 0.27624910165078165, 0.20109968887564733, 0.15156478169400178, 0.40311593633677034, 0.16213678744266313, 0.16767136463967347, 0.18741546781258012, 0.1364865975035071, 0.29943070331836774, 0.16811955051871608, 0.12322456409746896, 0.09856300067476009, 0.19351753280889206, 0.33278515906422734, 0.19585617680715406, 0.21684709497510568, 0.1588178060926151, 0.24590889242762082, 0.19065338111331098, 0.21999561678085733, 0.23921629846671455, 0.2473096753991636, 0.25139841550951314, 0.25018973806023814, 0.2563181655485187, 0.24827680422815313, 0.17104482340169047, 0.17438777549518525, 0.18652137383221978, 0.17877506396978893, 0.18376906354855005, 0.1636054453564666, 0.21337348416290047, 0.1799529095456721, 0.1824618557806874, 0.18965855790492214, 0.944706882767557, 0.18967505937084783, 0.17407502042711054, 0.2024186369075911, 0.11514414713071586, 0.16920610830415883, 0.1682514999497675, 0.16895851279997331, 0.9404226689703613, 0.11331609994785175, 0.7194126168594819, 0.7544267691831578, 0.15654660318094904, 0.21453194170402157, 0.06492637246840027, 0.09479795286667814, 0.8776146410149472, 0.2091131807892933, 0.21298604665218668, 0.23928538562252466, 0.24603521753449065, 0.213028212963975, 0.22140339266894704, 0.24320925850642117, 0.21760492859757474, 0.1855562318085856, 0.0854737887161473, 0.09777782081210828, 0.06579061783338969, 0.10910852346069766, 0.101573353670667, 0.08004841530980045, 0.07672787960328153, 0.09241158114311743, 0.09001032523259656]}, "mutation_prompt": null}
{"id": "5e66f8e2-3f19-4681-8416-08d699c43bdd", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n\n        evaluations = self.population_size\n\n        # Chaotic sequence for enhanced exploration\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters with chaotic influence\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                # Update velocities and positions with adaptive velocity clamping\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSO", "description": "Enhanced Adaptive Dynamic Swarm Optimization with adaptive velocity clamping for improved balance between exploration and exploitation.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "174dfd87-246f-490c-a41a-9d48620c2142", "metadata": {"aucs": [0.9672889460943264, 0.9655140257204778, 0.9682345925081576, 0.960720516925544, 0.9580731714767021, 0.9657190611971629, 0.9670858759645922, 0.9670105639246046, 0.9590031341573582, 0.9109831458348876, 0.90018785640823, 0.9133472036111555, 0.9185820767461782, 0.8827259290831997, 0.8935957718398462, 0.9157124128694627, 0.9046357388488894, 0.8963919193884613, 0.08258084098310481, 0.1258025063507101, 0.054088180535653896, 0.062087692075551426, 0.1504937931204171, 0.11621406356190933, 0.09242994411244976, 0.05880190393443829, 0.03947782865330596, 0.10050100394219064, 0.07962151858363598, 0.12491678570990938, 0.13994710885763872, 0.1639556612635642, 0.10789120934742402, 0.1277169940284768, 0.04913464904206233, 0.07536419363142777, 0.9868878181648546, 0.9815436662618467, 0.9867949800291644, 0.9742938409634142, 0.9856479249729025, 0.9868776237678425, 0.980509262001661, 0.9764355008951185, 0.09945001530892428, 0.8695576037825782, 0.9069584047046176, 0.9091321419738142, 0.9130002231642697, 0.43423050829768695, 0.8917820729280459, 0.8930124311091302, 0.8746035432429233, 0.8723957125551702, 0.21885232428872636, 0.1617755219082494, 0.20706450290895884, 0.39499916188845663, 0.23001985285363802, 0.19785953418133506, 0.2599439816898593, 0.25125100898241204, 0.2071926602922861, 0.2842844058934746, 0.22077093711286278, 0.22789845254207575, 0.3201271860419157, 0.19731848635057803, 0.2346104833201833, 0.22824143509658856, 0.1376812470238581, 0.2213692706757684, 0.2337870732443167, 0.1531490134798078, 0.18559655135200304, 0.2339152589722947, 0.25302953342069934, 0.23687111691580698, 0.2725710023487945, 9.999999999998899e-05, 0.2751716198701235, 0.00011266821717725861, 0.00041641946556048026, 0.09022848871299627, 0.037578242534705875, 0.050116360548273065, 9.999999999998899e-05, 0.0059339144085859274, 0.06589749768909747, 9.999999999998899e-05, 0.14500087434875708, 0.09763341654236668, 0.09831612458370886, 0.052709223086294554, 0.020003565796235856, 0.03121721952694334, 0.08396922175893795, 0.0733937649234635, 0.14422779277363518, 0.1113886984383704, 0.2693691699592692, 0.31029816142931455, 0.11628277306357415, 0.08568678636554217, 0.14804824915780213, 0.09820991619607589, 0.20073212034212706, 0.08157391211825593, 0.2108272049324852, 0.08065242230399505, 0.06167295559803554, 0.10124611518554594, 0.0069424289428090535, 0.1347273519305403, 0.08685579034358148, 0.07481612047468622, 0.08667613399484686, 0.617464298299677, 0.5772999564309707, 0.6131707903905133, 0.5772957368236936, 0.5638573267594187, 0.20944262130877844, 0.6215265324839134, 0.6241908896770444, 0.5367699392703836, 0.03795561241371648, 0.06720852772204544, 0.034745692440503295, 0.0547595285997855, 0.06937922424569787, 0.09523615310128153, 0.05227105595724002, 0.07632593180879776, 0.08181649051064743, 0.20079425347290658, 0.24462110211288024, 0.24372474175293124, 0.19147136210533822, 0.20285685288051702, 0.15028302051835163, 0.176262930961273, 0.27485076987335255, 0.3293254536097219, 0.1704798750370483, 0.27624910165078165, 0.20109968887564733, 0.15156478169400178, 0.40311593633677034, 0.16213678744266313, 0.16767136463967347, 0.18741546781258012, 0.1364865975035071, 0.29943070331836774, 0.16811955051871608, 0.12322456409746896, 0.09856300067476009, 0.19351753280889206, 0.33278515906422734, 0.19585617680715406, 0.21684709497510568, 0.1588178060926151, 0.24590889242762082, 0.19065338111331098, 0.21999561678085733, 0.23921629846671455, 0.2473096753991636, 0.25139841550951314, 0.25018973806023814, 0.2563181655485187, 0.24827680422815313, 0.17104482340169047, 0.17438777549518525, 0.18652137383221978, 0.17877506396978893, 0.18376906354855005, 0.1636054453564666, 0.21337348416290047, 0.1799529095456721, 0.1824618557806874, 0.18965855790492214, 0.944706882767557, 0.18967505937084783, 0.17407502042711054, 0.2024186369075911, 0.11514414713071586, 0.16920610830415883, 0.1682514999497675, 0.16895851279997331, 0.9404226689703613, 0.11331609994785175, 0.7194126168594819, 0.7544267691831578, 0.15654660318094904, 0.21453194170402157, 0.06492637246840027, 0.09479795286667814, 0.8776146410149472, 0.2091131807892933, 0.21298604665218668, 0.23928538562252466, 0.24603521753449065, 0.213028212963975, 0.22140339266894704, 0.24320925850642117, 0.21760492859757474, 0.1855562318085856, 0.0854737887161473, 0.09777782081210828, 0.06579061783338969, 0.10910852346069766, 0.101573353670667, 0.08004841530980045, 0.07672787960328153, 0.09241158114311743, 0.09001032523259656]}, "mutation_prompt": null}
{"id": "c76d8077-7a29-45dd-92e2-e94d9b810c2b", "solution": "import numpy as np\n\nclass EnhancedADSO:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n\n    def __call__(self, func):\n        # Initialize population\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        \n        # Update global best\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n\n        evaluations = self.population_size\n\n        # Chaotic sequence for enhanced exploration\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n\n        # Main loop\n        while evaluations < self.budget:\n            for i in range(self.population_size):\n                # Adaptive Parameters with chaotic influence\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                # Update velocities and positions with adaptive velocity clamping\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Evaluate new solution\n                current_value = func(population[i])\n                evaluations += 1\n\n                # Update personal best\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                # Update global best\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                # Stop if budget is reached\n                if evaluations >= self.budget:\n                    break\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSO", "description": "Enhanced Adaptive Dynamic Swarm Optimization with adaptive velocity clamping for improved balance between exploration and exploitation.", "configspace": "", "generation": 25, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "174dfd87-246f-490c-a41a-9d48620c2142", "metadata": {"aucs": [0.9672889460943264, 0.9655140257204778, 0.9682345925081576, 0.960720516925544, 0.9580731714767021, 0.9657190611971629, 0.9670858759645922, 0.9670105639246046, 0.9590031341573582, 0.9109831458348876, 0.90018785640823, 0.9133472036111555, 0.9185820767461782, 0.8827259290831997, 0.8935957718398462, 0.9157124128694627, 0.9046357388488894, 0.8963919193884613, 0.08258084098310481, 0.1258025063507101, 0.054088180535653896, 0.062087692075551426, 0.1504937931204171, 0.11621406356190933, 0.09242994411244976, 0.05880190393443829, 0.03947782865330596, 0.10050100394219064, 0.07962151858363598, 0.12491678570990938, 0.13994710885763872, 0.1639556612635642, 0.10789120934742402, 0.1277169940284768, 0.04913464904206233, 0.07536419363142777, 0.9868878181648546, 0.9815436662618467, 0.9867949800291644, 0.9742938409634142, 0.9856479249729025, 0.9868776237678425, 0.980509262001661, 0.9764355008951185, 0.09945001530892428, 0.8695576037825782, 0.9069584047046176, 0.9091321419738142, 0.9130002231642697, 0.43423050829768695, 0.8917820729280459, 0.8930124311091302, 0.8746035432429233, 0.8723957125551702, 0.21885232428872636, 0.1617755219082494, 0.20706450290895884, 0.39499916188845663, 0.23001985285363802, 0.19785953418133506, 0.2599439816898593, 0.25125100898241204, 0.2071926602922861, 0.2842844058934746, 0.22077093711286278, 0.22789845254207575, 0.3201271860419157, 0.19731848635057803, 0.2346104833201833, 0.22824143509658856, 0.1376812470238581, 0.2213692706757684, 0.2337870732443167, 0.1531490134798078, 0.18559655135200304, 0.2339152589722947, 0.25302953342069934, 0.23687111691580698, 0.2725710023487945, 9.999999999998899e-05, 0.2751716198701235, 0.00011266821717725861, 0.00041641946556048026, 0.09022848871299627, 0.037578242534705875, 0.050116360548273065, 9.999999999998899e-05, 0.0059339144085859274, 0.06589749768909747, 9.999999999998899e-05, 0.14500087434875708, 0.09763341654236668, 0.09831612458370886, 0.052709223086294554, 0.020003565796235856, 0.03121721952694334, 0.08396922175893795, 0.0733937649234635, 0.14422779277363518, 0.1113886984383704, 0.2693691699592692, 0.31029816142931455, 0.11628277306357415, 0.08568678636554217, 0.14804824915780213, 0.09820991619607589, 0.20073212034212706, 0.08157391211825593, 0.2108272049324852, 0.08065242230399505, 0.06167295559803554, 0.10124611518554594, 0.0069424289428090535, 0.1347273519305403, 0.08685579034358148, 0.07481612047468622, 0.08667613399484686, 0.617464298299677, 0.5772999564309707, 0.6131707903905133, 0.5772957368236936, 0.5638573267594187, 0.20944262130877844, 0.6215265324839134, 0.6241908896770444, 0.5367699392703836, 0.03795561241371648, 0.06720852772204544, 0.034745692440503295, 0.0547595285997855, 0.06937922424569787, 0.09523615310128153, 0.05227105595724002, 0.07632593180879776, 0.08181649051064743, 0.20079425347290658, 0.24462110211288024, 0.24372474175293124, 0.19147136210533822, 0.20285685288051702, 0.15028302051835163, 0.176262930961273, 0.27485076987335255, 0.3293254536097219, 0.1704798750370483, 0.27624910165078165, 0.20109968887564733, 0.15156478169400178, 0.40311593633677034, 0.16213678744266313, 0.16767136463967347, 0.18741546781258012, 0.1364865975035071, 0.29943070331836774, 0.16811955051871608, 0.12322456409746896, 0.09856300067476009, 0.19351753280889206, 0.33278515906422734, 0.19585617680715406, 0.21684709497510568, 0.1588178060926151, 0.24590889242762082, 0.19065338111331098, 0.21999561678085733, 0.23921629846671455, 0.2473096753991636, 0.25139841550951314, 0.25018973806023814, 0.2563181655485187, 0.24827680422815313, 0.17104482340169047, 0.17438777549518525, 0.18652137383221978, 0.17877506396978893, 0.18376906354855005, 0.1636054453564666, 0.21337348416290047, 0.1799529095456721, 0.1824618557806874, 0.18965855790492214, 0.944706882767557, 0.18967505937084783, 0.17407502042711054, 0.2024186369075911, 0.11514414713071586, 0.16920610830415883, 0.1682514999497675, 0.16895851279997331, 0.9404226689703613, 0.11331609994785175, 0.7194126168594819, 0.7544267691831578, 0.15654660318094904, 0.21453194170402157, 0.06492637246840027, 0.09479795286667814, 0.8776146410149472, 0.2091131807892933, 0.21298604665218668, 0.23928538562252466, 0.24603521753449065, 0.213028212963975, 0.22140339266894704, 0.24320925850642117, 0.21760492859757474, 0.1855562318085856, 0.0854737887161473, 0.09777782081210828, 0.06579061783338969, 0.10910852346069766, 0.101573353670667, 0.08004841530980045, 0.07672787960328153, 0.09241158114311743, 0.09001032523259656]}, "mutation_prompt": null}
{"id": "c5eb2e42-a845-43c5-b67b-a2f3055cd3a2", "solution": "import numpy as np\n\nclass EnhancedADSOPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                mutation_index = np.random.randint(self.population_size)\n                population[mutation_index] = np.random.uniform(self.bounds[0], self.bounds[1], self.dim)\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOPlus", "description": "EnhancedADSO+ introduces adaptive mutation based on stagnation detection for improved local search capabilities.", "configspace": "", "generation": 52, "fitness": 0.32025002457757024, "feedback": "The algorithm EnhancedADSOPlus got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.31.", "error": "", "parent_id": "174dfd87-246f-490c-a41a-9d48620c2142", "metadata": {"aucs": [0.9672889460943264, 0.9655140257204778, 0.9682345925081576, 0.960720516925544, 0.9580731714767021, 0.9657190611971629, 0.9670858759645922, 0.9670105639246046, 0.9590031341573582, 0.9109831458348876, 0.90018785640823, 0.9133472036111555, 0.9185820767461782, 0.8827259290831997, 0.8935957718398462, 0.9157124128694627, 0.9046357388488894, 0.8965043002651412, 0.08151330559669911, 0.12035527339348484, 0.082069234744934, 0.10484169744552418, 0.14822440825828997, 0.12554214473661973, 0.09143024469287575, 0.06659067430747678, 0.06414457439592847, 0.11815111843917292, 0.08168527878282605, 0.1260766624396441, 0.1372599942217223, 0.1522964232929347, 0.1077305204798138, 0.1268678993665877, 0.06882676790174613, 0.10021004611389595, 0.9868878181648546, 0.9815436662618467, 0.9867949800291644, 0.9742938409634142, 0.9856479249729025, 0.9868776237678425, 0.980509262001661, 0.9764355008951185, 0.9542955254773257, 0.9011295672521412, 0.9078093955668622, 0.9091321419738142, 0.9129478444484473, 0.444858688428454, 0.8896340709688796, 0.9003535827367839, 0.8824681892505785, 0.876630194251509, 0.23020189072397268, 0.21283545828016115, 0.3353954205867532, 0.39499916188845663, 0.262826556741778, 0.19588288529332687, 0.21675148125581745, 0.24390513025292093, 0.21381750130502364, 0.28652941366503537, 0.2264406481794773, 0.22693970123041307, 0.31824302331200893, 0.19995261338086978, 0.23090039235526305, 0.23275944606188737, 0.13765809227266668, 0.21009867620808897, 0.2320242869243796, 0.14895046614559304, 0.2020443428124905, 0.22902417727754576, 0.25093527135345617, 0.2351690019323872, 0.2717102172036421, 9.999999999998899e-05, 0.27349553636783963, 9.999999999998899e-05, 9.999999999998899e-05, 0.07805219675149289, 0.03630626443778351, 0.04970310870373473, 9.999999999998899e-05, 0.0060607051608447815, 0.06537261860902888, 9.999999999998899e-05, 0.13346674221246524, 0.0829188608214918, 0.11843966673017914, 0.03145485003238113, 0.012290591307456245, 0.03299709656604777, 0.10342528281094432, 0.06339482096717841, 0.1377058452549692, 0.11138983685493553, 0.2693723154163632, 0.3102951196279352, 0.116281143176869, 0.08568678636554938, 0.14804643080783353, 0.09820802212191826, 0.20073284601533514, 0.08157391211825593, 0.21082721417750117, 0.08065242202267031, 0.061672953950578036, 0.10164501612658206, 0.006942427336590118, 0.1539961036316454, 0.08685627817042574, 0.07481612051190956, 0.08667613399585428, 0.5844103012125215, 0.5700525562646996, 0.6016314487815382, 0.5884683173449047, 0.5681862146975627, 0.47476939197668677, 0.5897307908482162, 0.6151765450485467, 0.5492828242038301, 0.07465209110481574, 0.07367757693305033, 0.05523009541498136, 0.05475952859939026, 0.0837240677160096, 0.09523615310128153, 0.05245147582506471, 0.07632593180879776, 0.0818164905106431, 0.19109040351548523, 0.24312227710318945, 0.24341654501988885, 0.18867402824227286, 0.20675878780923462, 0.1518850847387272, 0.12707107093420256, 0.274563353664256, 0.30186064244449295, 0.21721272040877726, 0.2713976750810754, 0.2436416834407099, 0.17903860251687875, 0.40245992856655244, 0.1838095120924862, 0.16683072621637984, 0.1873939300636316, 0.13648573695490762, 0.2615522125503087, 0.17644819745740403, 0.12336694635142453, 0.15315590161772774, 0.1918359469228098, 0.3327014286190424, 0.1958525819875493, 0.21680401327433851, 0.15880454951906764, 0.27022113466896047, 0.19569437713217663, 0.24097914710638668, 0.24273770801445038, 0.29123367548552614, 0.19762888257901634, 0.25655726625127606, 0.25448240735144256, 0.24822030684005358, 0.1792451383749638, 0.17983426321531537, 0.1944720900038427, 0.17920321790516425, 0.18709770750026933, 0.18543687439219025, 0.21080846988878532, 0.19241612985467615, 0.18096308129680816, 0.18965855790492214, 0.944706882767557, 0.18967505937084783, 0.27932750460107514, 0.2024186369075952, 0.13691664604850995, 0.16920610830382188, 0.1682514999497675, 0.1689585122507371, 0.9364217229049634, 0.11331609615609484, 0.7084269759253409, 0.675929730094844, 0.15654660316714253, 0.21453194170402157, 0.08036247590534606, 0.10556963116148377, 0.9041244522682976, 0.19366263996645683, 0.23237861805102134, 0.25831433029579587, 0.21558394506701772, 0.20102286485092313, 0.20817685559565235, 0.20998493446770783, 0.27950362597869904, 0.2019937653356525, 0.0709529111113485, 0.09756009366042617, 0.06382194944680741, 0.10910838261279965, 0.10157232892293355, 0.1093690611290764, 0.0805868708527705, 0.09229948028267954, 0.08547451206467249]}, "mutation_prompt": null}
{"id": "c5a04327-a0ed-4861-ab78-038edb1a85d8", "solution": "import numpy as np\n\nclass EnhancedADSOPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                mutation_index = np.random.randint(self.population_size)\n                population[mutation_index] = np.random.uniform(self.bounds[0], self.bounds[1], self.dim)\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOPlus", "description": "EnhancedADSO+ introduces adaptive mutation based on stagnation detection for improved local search capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c5eb2e42-a845-43c5-b67b-a2f3055cd3a2", "metadata": {"aucs": [0.9672889460943264, 0.9655140257204778, 0.9682345925081576, 0.960720516925544, 0.9580731714767021, 0.9657190611971629, 0.9670858759645922, 0.9670105639246046, 0.9590031341573582, 0.9109831458348876, 0.90018785640823, 0.9133472036111555, 0.9185820767461782, 0.8827259290831997, 0.8935957718398462, 0.9157124128694627, 0.9046357388488894, 0.8965043002651412, 0.08151330559669911, 0.12035527339348484, 0.082069234744934, 0.10484169744552418, 0.14822440825828997, 0.12554214473661973, 0.09143024469287575, 0.06659067430747678, 0.06414457439592847, 0.11815111843917292, 0.08168527878282605, 0.1260766624396441, 0.1372599942217223, 0.1522964232929347, 0.1077305204798138, 0.1268678993665877, 0.06882676790174613, 0.10021004611389595, 0.9868878181648546, 0.9815436662618467, 0.9867949800291644, 0.9742938409634142, 0.9856479249729025, 0.9868776237678425, 0.980509262001661, 0.9764355008951185, 0.9542955254773257, 0.9011295672521412, 0.9078093955668622, 0.9091321419738142, 0.9129478444484473, 0.444858688428454, 0.8896340709688796, 0.9003535827367839, 0.8824681892505785, 0.876630194251509, 0.23020189072397268, 0.21283545828016115, 0.3353954205867532, 0.39499916188845663, 0.262826556741778, 0.19588288529332687, 0.21675148125581745, 0.24390513025292093, 0.21381750130502364, 0.28652941366503537, 0.2264406481794773, 0.22693970123041307, 0.31824302331200893, 0.19995261338086978, 0.23090039235526305, 0.23275944606188737, 0.13765809227266668, 0.21009867620808897, 0.2320242869243796, 0.14895046614559304, 0.2020443428124905, 0.22902417727754576, 0.25093527135345617, 0.2351690019323872, 0.2717102172036421, 9.999999999998899e-05, 0.27349553636783963, 9.999999999998899e-05, 9.999999999998899e-05, 0.07805219675149289, 0.03630626443778351, 0.04970310870373473, 9.999999999998899e-05, 0.0060607051608447815, 0.06537261860902888, 9.999999999998899e-05, 0.13346674221246524, 0.0829188608214918, 0.11843966673017914, 0.03145485003238113, 0.012290591307456245, 0.03299709656604777, 0.10342528281094432, 0.06339482096717841, 0.1377058452549692, 0.11138983685493553, 0.2693723154163632, 0.3102951196279352, 0.116281143176869, 0.08568678636554938, 0.14804643080783353, 0.09820802212191826, 0.20073284601533514, 0.08157391211825593, 0.21082721417750117, 0.08065242202267031, 0.061672953950578036, 0.10164501612658206, 0.006942427336590118, 0.1539961036316454, 0.08685627817042574, 0.07481612051190956, 0.08667613399585428, 0.5844103012125215, 0.5700525562646996, 0.6016314487815382, 0.5884683173449047, 0.5681862146975627, 0.47476939197668677, 0.5897307908482162, 0.6151765450485467, 0.5492828242038301, 0.07465209110481574, 0.07367757693305033, 0.05523009541498136, 0.05475952859939026, 0.0837240677160096, 0.09523615310128153, 0.05245147582506471, 0.07632593180879776, 0.0818164905106431, 0.19109040351548523, 0.24312227710318945, 0.24341654501988885, 0.18867402824227286, 0.20675878780923462, 0.1518850847387272, 0.12707107093420256, 0.274563353664256, 0.30186064244449295, 0.21721272040877726, 0.2713976750810754, 0.2436416834407099, 0.17903860251687875, 0.40245992856655244, 0.1838095120924862, 0.16683072621637984, 0.1873939300636316, 0.13648573695490762, 0.2615522125503087, 0.17644819745740403, 0.12336694635142453, 0.15315590161772774, 0.1918359469228098, 0.3327014286190424, 0.1958525819875493, 0.21680401327433851, 0.15880454951906764, 0.27022113466896047, 0.19569437713217663, 0.24097914710638668, 0.24273770801445038, 0.29123367548552614, 0.19762888257901634, 0.25655726625127606, 0.25448240735144256, 0.24822030684005358, 0.1792451383749638, 0.17983426321531537, 0.1944720900038427, 0.17920321790516425, 0.18709770750026933, 0.18543687439219025, 0.21080846988878532, 0.19241612985467615, 0.18096308129680816, 0.18965855790492214, 0.944706882767557, 0.18967505937084783, 0.27932750460107514, 0.2024186369075952, 0.13691664604850995, 0.16920610830382188, 0.1682514999497675, 0.1689585122507371, 0.9364217229049634, 0.11331609615609484, 0.7084269759253409, 0.675929730094844, 0.15654660316714253, 0.21453194170402157, 0.08036247590534606, 0.10556963116148377, 0.9041244522682976, 0.19366263996645683, 0.23237861805102134, 0.25831433029579587, 0.21558394506701772, 0.20102286485092313, 0.20817685559565235, 0.20998493446770783, 0.27950362597869904, 0.2019937653356525, 0.0709529111113485, 0.09756009366042617, 0.06382194944680741, 0.10910838261279965, 0.10157232892293355, 0.1093690611290764, 0.0805868708527705, 0.09229948028267954, 0.08547451206467249]}, "mutation_prompt": null}
{"id": "7fce918d-e7f4-493e-806b-6224059e1579", "solution": "import numpy as np\n\nclass EnhancedADSOPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                mutation_index = np.random.randint(self.population_size)\n                population[mutation_index] = np.random.uniform(self.bounds[0], self.bounds[1], self.dim)\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOPlus", "description": "EnhancedADSO+ introduces adaptive mutation based on stagnation detection for improved local search capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c5eb2e42-a845-43c5-b67b-a2f3055cd3a2", "metadata": {"aucs": [0.9672889460943264, 0.9655140257204778, 0.9682345925081576, 0.960720516925544, 0.9580731714767021, 0.9657190611971629, 0.9670858759645922, 0.9670105639246046, 0.9590031341573582, 0.9109831458348876, 0.90018785640823, 0.9133472036111555, 0.9185820767461782, 0.8827259290831997, 0.8935957718398462, 0.9157124128694627, 0.9046357388488894, 0.8965043002651412, 0.08151330559669911, 0.12035527339348484, 0.082069234744934, 0.10484169744552418, 0.14822440825828997, 0.12554214473661973, 0.09143024469287575, 0.06659067430747678, 0.06414457439592847, 0.11815111843917292, 0.08168527878282605, 0.1260766624396441, 0.1372599942217223, 0.1522964232929347, 0.1077305204798138, 0.1268678993665877, 0.06882676790174613, 0.10021004611389595, 0.9868878181648546, 0.9815436662618467, 0.9867949800291644, 0.9742938409634142, 0.9856479249729025, 0.9868776237678425, 0.980509262001661, 0.9764355008951185, 0.9542955254773257, 0.9011295672521412, 0.9078093955668622, 0.9091321419738142, 0.9129478444484473, 0.444858688428454, 0.8896340709688796, 0.9003535827367839, 0.8824681892505785, 0.876630194251509, 0.23020189072397268, 0.21283545828016115, 0.3353954205867532, 0.39499916188845663, 0.262826556741778, 0.19588288529332687, 0.21675148125581745, 0.24390513025292093, 0.21381750130502364, 0.28652941366503537, 0.2264406481794773, 0.22693970123041307, 0.31824302331200893, 0.19995261338086978, 0.23090039235526305, 0.23275944606188737, 0.13765809227266668, 0.21009867620808897, 0.2320242869243796, 0.14895046614559304, 0.2020443428124905, 0.22902417727754576, 0.25093527135345617, 0.2351690019323872, 0.2717102172036421, 9.999999999998899e-05, 0.27349553636783963, 9.999999999998899e-05, 9.999999999998899e-05, 0.07805219675149289, 0.03630626443778351, 0.04970310870373473, 9.999999999998899e-05, 0.0060607051608447815, 0.06537261860902888, 9.999999999998899e-05, 0.13346674221246524, 0.0829188608214918, 0.11843966673017914, 0.03145485003238113, 0.012290591307456245, 0.03299709656604777, 0.10342528281094432, 0.06339482096717841, 0.1377058452549692, 0.11138983685493553, 0.2693723154163632, 0.3102951196279352, 0.116281143176869, 0.08568678636554938, 0.14804643080783353, 0.09820802212191826, 0.20073284601533514, 0.08157391211825593, 0.21082721417750117, 0.08065242202267031, 0.061672953950578036, 0.10164501612658206, 0.006942427336590118, 0.1539961036316454, 0.08685627817042574, 0.07481612051190956, 0.08667613399585428, 0.5844103012125215, 0.5700525562646996, 0.6016314487815382, 0.5884683173449047, 0.5681862146975627, 0.47476939197668677, 0.5897307908482162, 0.6151765450485467, 0.5492828242038301, 0.07465209110481574, 0.07367757693305033, 0.05523009541498136, 0.05475952859939026, 0.0837240677160096, 0.09523615310128153, 0.05245147582506471, 0.07632593180879776, 0.0818164905106431, 0.19109040351548523, 0.24312227710318945, 0.24341654501988885, 0.18867402824227286, 0.20675878780923462, 0.1518850847387272, 0.12707107093420256, 0.274563353664256, 0.30186064244449295, 0.21721272040877726, 0.2713976750810754, 0.2436416834407099, 0.17903860251687875, 0.40245992856655244, 0.1838095120924862, 0.16683072621637984, 0.1873939300636316, 0.13648573695490762, 0.2615522125503087, 0.17644819745740403, 0.12336694635142453, 0.15315590161772774, 0.1918359469228098, 0.3327014286190424, 0.1958525819875493, 0.21680401327433851, 0.15880454951906764, 0.27022113466896047, 0.19569437713217663, 0.24097914710638668, 0.24273770801445038, 0.29123367548552614, 0.19762888257901634, 0.25655726625127606, 0.25448240735144256, 0.24822030684005358, 0.1792451383749638, 0.17983426321531537, 0.1944720900038427, 0.17920321790516425, 0.18709770750026933, 0.18543687439219025, 0.21080846988878532, 0.19241612985467615, 0.18096308129680816, 0.18965855790492214, 0.944706882767557, 0.18967505937084783, 0.27932750460107514, 0.2024186369075952, 0.13691664604850995, 0.16920610830382188, 0.1682514999497675, 0.1689585122507371, 0.9364217229049634, 0.11331609615609484, 0.7084269759253409, 0.675929730094844, 0.15654660316714253, 0.21453194170402157, 0.08036247590534606, 0.10556963116148377, 0.9041244522682976, 0.19366263996645683, 0.23237861805102134, 0.25831433029579587, 0.21558394506701772, 0.20102286485092313, 0.20817685559565235, 0.20998493446770783, 0.27950362597869904, 0.2019937653356525, 0.0709529111113485, 0.09756009366042617, 0.06382194944680741, 0.10910838261279965, 0.10157232892293355, 0.1093690611290764, 0.0805868708527705, 0.09229948028267954, 0.08547451206467249]}, "mutation_prompt": null}
{"id": "4a8ddf5d-0c9a-492e-9c7b-ffb85ae30bb9", "solution": "import numpy as np\n\nclass EnhancedADSOPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                mutation_index = np.random.randint(self.population_size)\n                population[mutation_index] = np.random.uniform(self.bounds[0], self.bounds[1], self.dim)\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOPlus", "description": "EnhancedADSO+ introduces adaptive mutation based on stagnation detection for improved local search capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c5eb2e42-a845-43c5-b67b-a2f3055cd3a2", "metadata": {"aucs": [0.9672889460943264, 0.9655140257204778, 0.9682345925081576, 0.960720516925544, 0.9580731714767021, 0.9657190611971629, 0.9670858759645922, 0.9670105639246046, 0.9590031341573582, 0.9109831458348876, 0.90018785640823, 0.9133472036111555, 0.9185820767461782, 0.8827259290831997, 0.8935957718398462, 0.9157124128694627, 0.9046357388488894, 0.8965043002651412, 0.08151330559669911, 0.12035527339348484, 0.082069234744934, 0.10484169744552418, 0.14822440825828997, 0.12554214473661973, 0.09143024469287575, 0.06659067430747678, 0.06414457439592847, 0.11815111843917292, 0.08168527878282605, 0.1260766624396441, 0.1372599942217223, 0.1522964232929347, 0.1077305204798138, 0.1268678993665877, 0.06882676790174613, 0.10021004611389595, 0.9868878181648546, 0.9815436662618467, 0.9867949800291644, 0.9742938409634142, 0.9856479249729025, 0.9868776237678425, 0.980509262001661, 0.9764355008951185, 0.9542955254773257, 0.9011295672521412, 0.9078093955668622, 0.9091321419738142, 0.9129478444484473, 0.444858688428454, 0.8896340709688796, 0.9003535827367839, 0.8824681892505785, 0.876630194251509, 0.23020189072397268, 0.21283545828016115, 0.3353954205867532, 0.39499916188845663, 0.262826556741778, 0.19588288529332687, 0.21675148125581745, 0.24390513025292093, 0.21381750130502364, 0.28652941366503537, 0.2264406481794773, 0.22693970123041307, 0.31824302331200893, 0.19995261338086978, 0.23090039235526305, 0.23275944606188737, 0.13765809227266668, 0.21009867620808897, 0.2320242869243796, 0.14895046614559304, 0.2020443428124905, 0.22902417727754576, 0.25093527135345617, 0.2351690019323872, 0.2717102172036421, 9.999999999998899e-05, 0.27349553636783963, 9.999999999998899e-05, 9.999999999998899e-05, 0.07805219675149289, 0.03630626443778351, 0.04970310870373473, 9.999999999998899e-05, 0.0060607051608447815, 0.06537261860902888, 9.999999999998899e-05, 0.13346674221246524, 0.0829188608214918, 0.11843966673017914, 0.03145485003238113, 0.012290591307456245, 0.03299709656604777, 0.10342528281094432, 0.06339482096717841, 0.1377058452549692, 0.11138983685493553, 0.2693723154163632, 0.3102951196279352, 0.116281143176869, 0.08568678636554938, 0.14804643080783353, 0.09820802212191826, 0.20073284601533514, 0.08157391211825593, 0.21082721417750117, 0.08065242202267031, 0.061672953950578036, 0.10164501612658206, 0.006942427336590118, 0.1539961036316454, 0.08685627817042574, 0.07481612051190956, 0.08667613399585428, 0.5844103012125215, 0.5700525562646996, 0.6016314487815382, 0.5884683173449047, 0.5681862146975627, 0.47476939197668677, 0.5897307908482162, 0.6151765450485467, 0.5492828242038301, 0.07465209110481574, 0.07367757693305033, 0.05523009541498136, 0.05475952859939026, 0.0837240677160096, 0.09523615310128153, 0.05245147582506471, 0.07632593180879776, 0.0818164905106431, 0.19109040351548523, 0.24312227710318945, 0.24341654501988885, 0.18867402824227286, 0.20675878780923462, 0.1518850847387272, 0.12707107093420256, 0.274563353664256, 0.30186064244449295, 0.21721272040877726, 0.2713976750810754, 0.2436416834407099, 0.17903860251687875, 0.40245992856655244, 0.1838095120924862, 0.16683072621637984, 0.1873939300636316, 0.13648573695490762, 0.2615522125503087, 0.17644819745740403, 0.12336694635142453, 0.15315590161772774, 0.1918359469228098, 0.3327014286190424, 0.1958525819875493, 0.21680401327433851, 0.15880454951906764, 0.27022113466896047, 0.19569437713217663, 0.24097914710638668, 0.24273770801445038, 0.29123367548552614, 0.19762888257901634, 0.25655726625127606, 0.25448240735144256, 0.24822030684005358, 0.1792451383749638, 0.17983426321531537, 0.1944720900038427, 0.17920321790516425, 0.18709770750026933, 0.18543687439219025, 0.21080846988878532, 0.19241612985467615, 0.18096308129680816, 0.18965855790492214, 0.944706882767557, 0.18967505937084783, 0.27932750460107514, 0.2024186369075952, 0.13691664604850995, 0.16920610830382188, 0.1682514999497675, 0.1689585122507371, 0.9364217229049634, 0.11331609615609484, 0.7084269759253409, 0.675929730094844, 0.15654660316714253, 0.21453194170402157, 0.08036247590534606, 0.10556963116148377, 0.9041244522682976, 0.19366263996645683, 0.23237861805102134, 0.25831433029579587, 0.21558394506701772, 0.20102286485092313, 0.20817685559565235, 0.20998493446770783, 0.27950362597869904, 0.2019937653356525, 0.0709529111113485, 0.09756009366042617, 0.06382194944680741, 0.10910838261279965, 0.10157232892293355, 0.1093690611290764, 0.0805868708527705, 0.09229948028267954, 0.08547451206467249]}, "mutation_prompt": null}
{"id": "f69b05f5-4ebb-427e-8320-ce5a74eedcf8", "solution": "import numpy as np\n\nclass EnhancedADSOPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                mutation_index = np.random.randint(self.population_size)\n                population[mutation_index] = np.random.uniform(self.bounds[0], self.bounds[1], self.dim)\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOPlus", "description": "EnhancedADSO+ introduces adaptive mutation based on stagnation detection for improved local search capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c5eb2e42-a845-43c5-b67b-a2f3055cd3a2", "metadata": {"aucs": [0.9672889460943264, 0.9655140257204778, 0.9682345925081576, 0.960720516925544, 0.9580731714767021, 0.9657190611971629, 0.9670858759645922, 0.9670105639246046, 0.9590031341573582, 0.9109831458348876, 0.90018785640823, 0.9133472036111555, 0.9185820767461782, 0.8827259290831997, 0.8935957718398462, 0.9157124128694627, 0.9046357388488894, 0.8965043002651412, 0.08151330559669911, 0.12035527339348484, 0.082069234744934, 0.10484169744552418, 0.14822440825828997, 0.12554214473661973, 0.09143024469287575, 0.06659067430747678, 0.06414457439592847, 0.11815111843917292, 0.08168527878282605, 0.1260766624396441, 0.1372599942217223, 0.1522964232929347, 0.1077305204798138, 0.1268678993665877, 0.06882676790174613, 0.10021004611389595, 0.9868878181648546, 0.9815436662618467, 0.9867949800291644, 0.9742938409634142, 0.9856479249729025, 0.9868776237678425, 0.980509262001661, 0.9764355008951185, 0.9542955254773257, 0.9011295672521412, 0.9078093955668622, 0.9091321419738142, 0.9129478444484473, 0.444858688428454, 0.8896340709688796, 0.9003535827367839, 0.8824681892505785, 0.876630194251509, 0.23020189072397268, 0.21283545828016115, 0.3353954205867532, 0.39499916188845663, 0.262826556741778, 0.19588288529332687, 0.21675148125581745, 0.24390513025292093, 0.21381750130502364, 0.28652941366503537, 0.2264406481794773, 0.22693970123041307, 0.31824302331200893, 0.19995261338086978, 0.23090039235526305, 0.23275944606188737, 0.13765809227266668, 0.21009867620808897, 0.2320242869243796, 0.14895046614559304, 0.2020443428124905, 0.22902417727754576, 0.25093527135345617, 0.2351690019323872, 0.2717102172036421, 9.999999999998899e-05, 0.27349553636783963, 9.999999999998899e-05, 9.999999999998899e-05, 0.07805219675149289, 0.03630626443778351, 0.04970310870373473, 9.999999999998899e-05, 0.0060607051608447815, 0.06537261860902888, 9.999999999998899e-05, 0.13346674221246524, 0.0829188608214918, 0.11843966673017914, 0.03145485003238113, 0.012290591307456245, 0.03299709656604777, 0.10342528281094432, 0.06339482096717841, 0.1377058452549692, 0.11138983685493553, 0.2693723154163632, 0.3102951196279352, 0.116281143176869, 0.08568678636554938, 0.14804643080783353, 0.09820802212191826, 0.20073284601533514, 0.08157391211825593, 0.21082721417750117, 0.08065242202267031, 0.061672953950578036, 0.10164501612658206, 0.006942427336590118, 0.1539961036316454, 0.08685627817042574, 0.07481612051190956, 0.08667613399585428, 0.5844103012125215, 0.5700525562646996, 0.6016314487815382, 0.5884683173449047, 0.5681862146975627, 0.47476939197668677, 0.5897307908482162, 0.6151765450485467, 0.5492828242038301, 0.07465209110481574, 0.07367757693305033, 0.05523009541498136, 0.05475952859939026, 0.0837240677160096, 0.09523615310128153, 0.05245147582506471, 0.07632593180879776, 0.0818164905106431, 0.19109040351548523, 0.24312227710318945, 0.24341654501988885, 0.18867402824227286, 0.20675878780923462, 0.1518850847387272, 0.12707107093420256, 0.274563353664256, 0.30186064244449295, 0.21721272040877726, 0.2713976750810754, 0.2436416834407099, 0.17903860251687875, 0.40245992856655244, 0.1838095120924862, 0.16683072621637984, 0.1873939300636316, 0.13648573695490762, 0.2615522125503087, 0.17644819745740403, 0.12336694635142453, 0.15315590161772774, 0.1918359469228098, 0.3327014286190424, 0.1958525819875493, 0.21680401327433851, 0.15880454951906764, 0.27022113466896047, 0.19569437713217663, 0.24097914710638668, 0.24273770801445038, 0.29123367548552614, 0.19762888257901634, 0.25655726625127606, 0.25448240735144256, 0.24822030684005358, 0.1792451383749638, 0.17983426321531537, 0.1944720900038427, 0.17920321790516425, 0.18709770750026933, 0.18543687439219025, 0.21080846988878532, 0.19241612985467615, 0.18096308129680816, 0.18965855790492214, 0.944706882767557, 0.18967505937084783, 0.27932750460107514, 0.2024186369075952, 0.13691664604850995, 0.16920610830382188, 0.1682514999497675, 0.1689585122507371, 0.9364217229049634, 0.11331609615609484, 0.7084269759253409, 0.675929730094844, 0.15654660316714253, 0.21453194170402157, 0.08036247590534606, 0.10556963116148377, 0.9041244522682976, 0.19366263996645683, 0.23237861805102134, 0.25831433029579587, 0.21558394506701772, 0.20102286485092313, 0.20817685559565235, 0.20998493446770783, 0.27950362597869904, 0.2019937653356525, 0.0709529111113485, 0.09756009366042617, 0.06382194944680741, 0.10910838261279965, 0.10157232892293355, 0.1093690611290764, 0.0805868708527705, 0.09229948028267954, 0.08547451206467249]}, "mutation_prompt": null}
{"id": "c8678c93-5bf8-44d7-9e54-7b84a266bee1", "solution": "import numpy as np\n\nclass EnhancedADSOPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                mutation_index = np.random.randint(self.population_size)\n                population[mutation_index] = np.random.uniform(self.bounds[0], self.bounds[1], self.dim)\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOPlus", "description": "EnhancedADSO+ introduces adaptive mutation based on stagnation detection for improved local search capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c5eb2e42-a845-43c5-b67b-a2f3055cd3a2", "metadata": {"aucs": [0.9672889460943264, 0.9655140257204778, 0.9682345925081576, 0.960720516925544, 0.9580731714767021, 0.9657190611971629, 0.9670858759645922, 0.9670105639246046, 0.9590031341573582, 0.9109831458348876, 0.90018785640823, 0.9133472036111555, 0.9185820767461782, 0.8827259290831997, 0.8935957718398462, 0.9157124128694627, 0.9046357388488894, 0.8965043002651412, 0.08151330559669911, 0.12035527339348484, 0.082069234744934, 0.10484169744552418, 0.14822440825828997, 0.12554214473661973, 0.09143024469287575, 0.06659067430747678, 0.06414457439592847, 0.11815111843917292, 0.08168527878282605, 0.1260766624396441, 0.1372599942217223, 0.1522964232929347, 0.1077305204798138, 0.1268678993665877, 0.06882676790174613, 0.10021004611389595, 0.9868878181648546, 0.9815436662618467, 0.9867949800291644, 0.9742938409634142, 0.9856479249729025, 0.9868776237678425, 0.980509262001661, 0.9764355008951185, 0.9542955254773257, 0.9011295672521412, 0.9078093955668622, 0.9091321419738142, 0.9129478444484473, 0.444858688428454, 0.8896340709688796, 0.9003535827367839, 0.8824681892505785, 0.876630194251509, 0.23020189072397268, 0.21283545828016115, 0.3353954205867532, 0.39499916188845663, 0.262826556741778, 0.19588288529332687, 0.21675148125581745, 0.24390513025292093, 0.21381750130502364, 0.28652941366503537, 0.2264406481794773, 0.22693970123041307, 0.31824302331200893, 0.19995261338086978, 0.23090039235526305, 0.23275944606188737, 0.13765809227266668, 0.21009867620808897, 0.2320242869243796, 0.14895046614559304, 0.2020443428124905, 0.22902417727754576, 0.25093527135345617, 0.2351690019323872, 0.2717102172036421, 9.999999999998899e-05, 0.27349553636783963, 9.999999999998899e-05, 9.999999999998899e-05, 0.07805219675149289, 0.03630626443778351, 0.04970310870373473, 9.999999999998899e-05, 0.0060607051608447815, 0.06537261860902888, 9.999999999998899e-05, 0.13346674221246524, 0.0829188608214918, 0.11843966673017914, 0.03145485003238113, 0.012290591307456245, 0.03299709656604777, 0.10342528281094432, 0.06339482096717841, 0.1377058452549692, 0.11138983685493553, 0.2693723154163632, 0.3102951196279352, 0.116281143176869, 0.08568678636554938, 0.14804643080783353, 0.09820802212191826, 0.20073284601533514, 0.08157391211825593, 0.21082721417750117, 0.08065242202267031, 0.061672953950578036, 0.10164501612658206, 0.006942427336590118, 0.1539961036316454, 0.08685627817042574, 0.07481612051190956, 0.08667613399585428, 0.5844103012125215, 0.5700525562646996, 0.6016314487815382, 0.5884683173449047, 0.5681862146975627, 0.47476939197668677, 0.5897307908482162, 0.6151765450485467, 0.5492828242038301, 0.07465209110481574, 0.07367757693305033, 0.05523009541498136, 0.05475952859939026, 0.0837240677160096, 0.09523615310128153, 0.05245147582506471, 0.07632593180879776, 0.0818164905106431, 0.19109040351548523, 0.24312227710318945, 0.24341654501988885, 0.18867402824227286, 0.20675878780923462, 0.1518850847387272, 0.12707107093420256, 0.274563353664256, 0.30186064244449295, 0.21721272040877726, 0.2713976750810754, 0.2436416834407099, 0.17903860251687875, 0.40245992856655244, 0.1838095120924862, 0.16683072621637984, 0.1873939300636316, 0.13648573695490762, 0.2615522125503087, 0.17644819745740403, 0.12336694635142453, 0.15315590161772774, 0.1918359469228098, 0.3327014286190424, 0.1958525819875493, 0.21680401327433851, 0.15880454951906764, 0.27022113466896047, 0.19569437713217663, 0.24097914710638668, 0.24273770801445038, 0.29123367548552614, 0.19762888257901634, 0.25655726625127606, 0.25448240735144256, 0.24822030684005358, 0.1792451383749638, 0.17983426321531537, 0.1944720900038427, 0.17920321790516425, 0.18709770750026933, 0.18543687439219025, 0.21080846988878532, 0.19241612985467615, 0.18096308129680816, 0.18965855790492214, 0.944706882767557, 0.18967505937084783, 0.27932750460107514, 0.2024186369075952, 0.13691664604850995, 0.16920610830382188, 0.1682514999497675, 0.1689585122507371, 0.9364217229049634, 0.11331609615609484, 0.7084269759253409, 0.675929730094844, 0.15654660316714253, 0.21453194170402157, 0.08036247590534606, 0.10556963116148377, 0.9041244522682976, 0.19366263996645683, 0.23237861805102134, 0.25831433029579587, 0.21558394506701772, 0.20102286485092313, 0.20817685559565235, 0.20998493446770783, 0.27950362597869904, 0.2019937653356525, 0.0709529111113485, 0.09756009366042617, 0.06382194944680741, 0.10910838261279965, 0.10157232892293355, 0.1093690611290764, 0.0805868708527705, 0.09229948028267954, 0.08547451206467249]}, "mutation_prompt": null}
{"id": "7ca03fe3-b832-484e-9e88-d258da007d82", "solution": "import numpy as np\n\nclass EnhancedADSOPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                mutation_index = np.random.randint(self.population_size)\n                population[mutation_index] = np.random.uniform(self.bounds[0], self.bounds[1], self.dim)\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOPlus", "description": "EnhancedADSO+ introduces adaptive mutation based on stagnation detection for improved local search capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c5eb2e42-a845-43c5-b67b-a2f3055cd3a2", "metadata": {"aucs": [0.9672889460943264, 0.9655140257204778, 0.9682345925081576, 0.960720516925544, 0.9580731714767021, 0.9657190611971629, 0.9670858759645922, 0.9670105639246046, 0.9590031341573582, 0.9109831458348876, 0.90018785640823, 0.9133472036111555, 0.9185820767461782, 0.8827259290831997, 0.8935957718398462, 0.9157124128694627, 0.9046357388488894, 0.8965043002651412, 0.08151330559669911, 0.12035527339348484, 0.082069234744934, 0.10484169744552418, 0.14822440825828997, 0.12554214473661973, 0.09143024469287575, 0.06659067430747678, 0.06414457439592847, 0.11815111843917292, 0.08168527878282605, 0.1260766624396441, 0.1372599942217223, 0.1522964232929347, 0.1077305204798138, 0.1268678993665877, 0.06882676790174613, 0.10021004611389595, 0.9868878181648546, 0.9815436662618467, 0.9867949800291644, 0.9742938409634142, 0.9856479249729025, 0.9868776237678425, 0.980509262001661, 0.9764355008951185, 0.9542955254773257, 0.9011295672521412, 0.9078093955668622, 0.9091321419738142, 0.9129478444484473, 0.444858688428454, 0.8896340709688796, 0.9003535827367839, 0.8824681892505785, 0.876630194251509, 0.23020189072397268, 0.21283545828016115, 0.3353954205867532, 0.39499916188845663, 0.262826556741778, 0.19588288529332687, 0.21675148125581745, 0.24390513025292093, 0.21381750130502364, 0.28652941366503537, 0.2264406481794773, 0.22693970123041307, 0.31824302331200893, 0.19995261338086978, 0.23090039235526305, 0.23275944606188737, 0.13765809227266668, 0.21009867620808897, 0.2320242869243796, 0.14895046614559304, 0.2020443428124905, 0.22902417727754576, 0.25093527135345617, 0.2351690019323872, 0.2717102172036421, 9.999999999998899e-05, 0.27349553636783963, 9.999999999998899e-05, 9.999999999998899e-05, 0.07805219675149289, 0.03630626443778351, 0.04970310870373473, 9.999999999998899e-05, 0.0060607051608447815, 0.06537261860902888, 9.999999999998899e-05, 0.13346674221246524, 0.0829188608214918, 0.11843966673017914, 0.03145485003238113, 0.012290591307456245, 0.03299709656604777, 0.10342528281094432, 0.06339482096717841, 0.1377058452549692, 0.11138983685493553, 0.2693723154163632, 0.3102951196279352, 0.116281143176869, 0.08568678636554938, 0.14804643080783353, 0.09820802212191826, 0.20073284601533514, 0.08157391211825593, 0.21082721417750117, 0.08065242202267031, 0.061672953950578036, 0.10164501612658206, 0.006942427336590118, 0.1539961036316454, 0.08685627817042574, 0.07481612051190956, 0.08667613399585428, 0.5844103012125215, 0.5700525562646996, 0.6016314487815382, 0.5884683173449047, 0.5681862146975627, 0.47476939197668677, 0.5897307908482162, 0.6151765450485467, 0.5492828242038301, 0.07465209110481574, 0.07367757693305033, 0.05523009541498136, 0.05475952859939026, 0.0837240677160096, 0.09523615310128153, 0.05245147582506471, 0.07632593180879776, 0.0818164905106431, 0.19109040351548523, 0.24312227710318945, 0.24341654501988885, 0.18867402824227286, 0.20675878780923462, 0.1518850847387272, 0.12707107093420256, 0.274563353664256, 0.30186064244449295, 0.21721272040877726, 0.2713976750810754, 0.2436416834407099, 0.17903860251687875, 0.40245992856655244, 0.1838095120924862, 0.16683072621637984, 0.1873939300636316, 0.13648573695490762, 0.2615522125503087, 0.17644819745740403, 0.12336694635142453, 0.15315590161772774, 0.1918359469228098, 0.3327014286190424, 0.1958525819875493, 0.21680401327433851, 0.15880454951906764, 0.27022113466896047, 0.19569437713217663, 0.24097914710638668, 0.24273770801445038, 0.29123367548552614, 0.19762888257901634, 0.25655726625127606, 0.25448240735144256, 0.24822030684005358, 0.1792451383749638, 0.17983426321531537, 0.1944720900038427, 0.17920321790516425, 0.18709770750026933, 0.18543687439219025, 0.21080846988878532, 0.19241612985467615, 0.18096308129680816, 0.18965855790492214, 0.944706882767557, 0.18967505937084783, 0.27932750460107514, 0.2024186369075952, 0.13691664604850995, 0.16920610830382188, 0.1682514999497675, 0.1689585122507371, 0.9364217229049634, 0.11331609615609484, 0.7084269759253409, 0.675929730094844, 0.15654660316714253, 0.21453194170402157, 0.08036247590534606, 0.10556963116148377, 0.9041244522682976, 0.19366263996645683, 0.23237861805102134, 0.25831433029579587, 0.21558394506701772, 0.20102286485092313, 0.20817685559565235, 0.20998493446770783, 0.27950362597869904, 0.2019937653356525, 0.0709529111113485, 0.09756009366042617, 0.06382194944680741, 0.10910838261279965, 0.10157232892293355, 0.1093690611290764, 0.0805868708527705, 0.09229948028267954, 0.08547451206467249]}, "mutation_prompt": null}
{"id": "e2c55ea0-d502-4edb-a5d6-6357befd56d5", "solution": "import numpy as np\n\nclass EnhancedADSOPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                mutation_index = np.random.randint(self.population_size)\n                population[mutation_index] = np.random.uniform(self.bounds[0], self.bounds[1], self.dim)\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOPlus", "description": "EnhancedADSO+ introduces adaptive mutation based on stagnation detection for improved local search capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c5eb2e42-a845-43c5-b67b-a2f3055cd3a2", "metadata": {"aucs": [0.9672889460943264, 0.9655140257204778, 0.9682345925081576, 0.960720516925544, 0.9580731714767021, 0.9657190611971629, 0.9670858759645922, 0.9670105639246046, 0.9590031341573582, 0.9109831458348876, 0.90018785640823, 0.9133472036111555, 0.9185820767461782, 0.8827259290831997, 0.8935957718398462, 0.9157124128694627, 0.9046357388488894, 0.8965043002651412, 0.08151330559669911, 0.12035527339348484, 0.082069234744934, 0.10484169744552418, 0.14822440825828997, 0.12554214473661973, 0.09143024469287575, 0.06659067430747678, 0.06414457439592847, 0.11815111843917292, 0.08168527878282605, 0.1260766624396441, 0.1372599942217223, 0.1522964232929347, 0.1077305204798138, 0.1268678993665877, 0.06882676790174613, 0.10021004611389595, 0.9868878181648546, 0.9815436662618467, 0.9867949800291644, 0.9742938409634142, 0.9856479249729025, 0.9868776237678425, 0.980509262001661, 0.9764355008951185, 0.9542955254773257, 0.9011295672521412, 0.9078093955668622, 0.9091321419738142, 0.9129478444484473, 0.444858688428454, 0.8896340709688796, 0.9003535827367839, 0.8824681892505785, 0.876630194251509, 0.23020189072397268, 0.21283545828016115, 0.3353954205867532, 0.39499916188845663, 0.262826556741778, 0.19588288529332687, 0.21675148125581745, 0.24390513025292093, 0.21381750130502364, 0.28652941366503537, 0.2264406481794773, 0.22693970123041307, 0.31824302331200893, 0.19995261338086978, 0.23090039235526305, 0.23275944606188737, 0.13765809227266668, 0.21009867620808897, 0.2320242869243796, 0.14895046614559304, 0.2020443428124905, 0.22902417727754576, 0.25093527135345617, 0.2351690019323872, 0.2717102172036421, 9.999999999998899e-05, 0.27349553636783963, 9.999999999998899e-05, 9.999999999998899e-05, 0.07805219675149289, 0.03630626443778351, 0.04970310870373473, 9.999999999998899e-05, 0.0060607051608447815, 0.06537261860902888, 9.999999999998899e-05, 0.13346674221246524, 0.0829188608214918, 0.11843966673017914, 0.03145485003238113, 0.012290591307456245, 0.03299709656604777, 0.10342528281094432, 0.06339482096717841, 0.1377058452549692, 0.11138983685493553, 0.2693723154163632, 0.3102951196279352, 0.116281143176869, 0.08568678636554938, 0.14804643080783353, 0.09820802212191826, 0.20073284601533514, 0.08157391211825593, 0.21082721417750117, 0.08065242202267031, 0.061672953950578036, 0.10164501612658206, 0.006942427336590118, 0.1539961036316454, 0.08685627817042574, 0.07481612051190956, 0.08667613399585428, 0.5844103012125215, 0.5700525562646996, 0.6016314487815382, 0.5884683173449047, 0.5681862146975627, 0.47476939197668677, 0.5897307908482162, 0.6151765450485467, 0.5492828242038301, 0.07465209110481574, 0.07367757693305033, 0.05523009541498136, 0.05475952859939026, 0.0837240677160096, 0.09523615310128153, 0.05245147582506471, 0.07632593180879776, 0.0818164905106431, 0.19109040351548523, 0.24312227710318945, 0.24341654501988885, 0.18867402824227286, 0.20675878780923462, 0.1518850847387272, 0.12707107093420256, 0.274563353664256, 0.30186064244449295, 0.21721272040877726, 0.2713976750810754, 0.2436416834407099, 0.17903860251687875, 0.40245992856655244, 0.1838095120924862, 0.16683072621637984, 0.1873939300636316, 0.13648573695490762, 0.2615522125503087, 0.17644819745740403, 0.12336694635142453, 0.15315590161772774, 0.1918359469228098, 0.3327014286190424, 0.1958525819875493, 0.21680401327433851, 0.15880454951906764, 0.27022113466896047, 0.19569437713217663, 0.24097914710638668, 0.24273770801445038, 0.29123367548552614, 0.19762888257901634, 0.25655726625127606, 0.25448240735144256, 0.24822030684005358, 0.1792451383749638, 0.17983426321531537, 0.1944720900038427, 0.17920321790516425, 0.18709770750026933, 0.18543687439219025, 0.21080846988878532, 0.19241612985467615, 0.18096308129680816, 0.18965855790492214, 0.944706882767557, 0.18967505937084783, 0.27932750460107514, 0.2024186369075952, 0.13691664604850995, 0.16920610830382188, 0.1682514999497675, 0.1689585122507371, 0.9364217229049634, 0.11331609615609484, 0.7084269759253409, 0.675929730094844, 0.15654660316714253, 0.21453194170402157, 0.08036247590534606, 0.10556963116148377, 0.9041244522682976, 0.19366263996645683, 0.23237861805102134, 0.25831433029579587, 0.21558394506701772, 0.20102286485092313, 0.20817685559565235, 0.20998493446770783, 0.27950362597869904, 0.2019937653356525, 0.0709529111113485, 0.09756009366042617, 0.06382194944680741, 0.10910838261279965, 0.10157232892293355, 0.1093690611290764, 0.0805868708527705, 0.09229948028267954, 0.08547451206467249]}, "mutation_prompt": null}
{"id": "c1ca1229-b5d6-439b-9222-9ca87131e910", "solution": "import numpy as np\n\nclass EnhancedADSOPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                mutation_index = np.random.randint(self.population_size)\n                population[mutation_index] = np.random.uniform(self.bounds[0], self.bounds[1], self.dim)\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOPlus", "description": "EnhancedADSO+ introduces adaptive mutation based on stagnation detection for improved local search capabilities.", "configspace": "", "generation": 53, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "c5eb2e42-a845-43c5-b67b-a2f3055cd3a2", "metadata": {"aucs": [0.9672889460943264, 0.9655140257204778, 0.9682345925081576, 0.960720516925544, 0.9580731714767021, 0.9657190611971629, 0.9670858759645922, 0.9670105639246046, 0.9590031341573582, 0.9109831458348876, 0.90018785640823, 0.9133472036111555, 0.9185820767461782, 0.8827259290831997, 0.8935957718398462, 0.9157124128694627, 0.9046357388488894, 0.8965043002651412, 0.08151330559669911, 0.12035527339348484, 0.082069234744934, 0.10484169744552418, 0.14822440825828997, 0.12554214473661973, 0.09143024469287575, 0.06659067430747678, 0.06414457439592847, 0.11815111843917292, 0.08168527878282605, 0.1260766624396441, 0.1372599942217223, 0.1522964232929347, 0.1077305204798138, 0.1268678993665877, 0.06882676790174613, 0.10021004611389595, 0.9868878181648546, 0.9815436662618467, 0.9867949800291644, 0.9742938409634142, 0.9856479249729025, 0.9868776237678425, 0.980509262001661, 0.9764355008951185, 0.9542955254773257, 0.9011295672521412, 0.9078093955668622, 0.9091321419738142, 0.9129478444484473, 0.444858688428454, 0.8896340709688796, 0.9003535827367839, 0.8824681892505785, 0.876630194251509, 0.23020189072397268, 0.21283545828016115, 0.3353954205867532, 0.39499916188845663, 0.262826556741778, 0.19588288529332687, 0.21675148125581745, 0.24390513025292093, 0.21381750130502364, 0.28652941366503537, 0.2264406481794773, 0.22693970123041307, 0.31824302331200893, 0.19995261338086978, 0.23090039235526305, 0.23275944606188737, 0.13765809227266668, 0.21009867620808897, 0.2320242869243796, 0.14895046614559304, 0.2020443428124905, 0.22902417727754576, 0.25093527135345617, 0.2351690019323872, 0.2717102172036421, 9.999999999998899e-05, 0.27349553636783963, 9.999999999998899e-05, 9.999999999998899e-05, 0.07805219675149289, 0.03630626443778351, 0.04970310870373473, 9.999999999998899e-05, 0.0060607051608447815, 0.06537261860902888, 9.999999999998899e-05, 0.13346674221246524, 0.0829188608214918, 0.11843966673017914, 0.03145485003238113, 0.012290591307456245, 0.03299709656604777, 0.10342528281094432, 0.06339482096717841, 0.1377058452549692, 0.11138983685493553, 0.2693723154163632, 0.3102951196279352, 0.116281143176869, 0.08568678636554938, 0.14804643080783353, 0.09820802212191826, 0.20073284601533514, 0.08157391211825593, 0.21082721417750117, 0.08065242202267031, 0.061672953950578036, 0.10164501612658206, 0.006942427336590118, 0.1539961036316454, 0.08685627817042574, 0.07481612051190956, 0.08667613399585428, 0.5844103012125215, 0.5700525562646996, 0.6016314487815382, 0.5884683173449047, 0.5681862146975627, 0.47476939197668677, 0.5897307908482162, 0.6151765450485467, 0.5492828242038301, 0.07465209110481574, 0.07367757693305033, 0.05523009541498136, 0.05475952859939026, 0.0837240677160096, 0.09523615310128153, 0.05245147582506471, 0.07632593180879776, 0.0818164905106431, 0.19109040351548523, 0.24312227710318945, 0.24341654501988885, 0.18867402824227286, 0.20675878780923462, 0.1518850847387272, 0.12707107093420256, 0.274563353664256, 0.30186064244449295, 0.21721272040877726, 0.2713976750810754, 0.2436416834407099, 0.17903860251687875, 0.40245992856655244, 0.1838095120924862, 0.16683072621637984, 0.1873939300636316, 0.13648573695490762, 0.2615522125503087, 0.17644819745740403, 0.12336694635142453, 0.15315590161772774, 0.1918359469228098, 0.3327014286190424, 0.1958525819875493, 0.21680401327433851, 0.15880454951906764, 0.27022113466896047, 0.19569437713217663, 0.24097914710638668, 0.24273770801445038, 0.29123367548552614, 0.19762888257901634, 0.25655726625127606, 0.25448240735144256, 0.24822030684005358, 0.1792451383749638, 0.17983426321531537, 0.1944720900038427, 0.17920321790516425, 0.18709770750026933, 0.18543687439219025, 0.21080846988878532, 0.19241612985467615, 0.18096308129680816, 0.18965855790492214, 0.944706882767557, 0.18967505937084783, 0.27932750460107514, 0.2024186369075952, 0.13691664604850995, 0.16920610830382188, 0.1682514999497675, 0.1689585122507371, 0.9364217229049634, 0.11331609615609484, 0.7084269759253409, 0.675929730094844, 0.15654660316714253, 0.21453194170402157, 0.08036247590534606, 0.10556963116148377, 0.9041244522682976, 0.19366263996645683, 0.23237861805102134, 0.25831433029579587, 0.21558394506701772, 0.20102286485092313, 0.20817685559565235, 0.20998493446770783, 0.27950362597869904, 0.2019937653356525, 0.0709529111113485, 0.09756009366042617, 0.06382194944680741, 0.10910838261279965, 0.10157232892293355, 0.1093690611290764, 0.0805868708527705, 0.09229948028267954, 0.08547451206467249]}, "mutation_prompt": null}
{"id": "ef3958f7-4e3c-49f8-97be-083c92c79acc", "solution": "import numpy as np\n\nclass EnhancedADSOStar:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                for group in np.array_split(np.random.permutation(self.population_size), 2):\n                    group_best_index = group[np.argmin(personal_best_values[group])]\n                    for i in group:\n                        if i != group_best_index:\n                            population[i] = np.random.uniform(self.bounds[0], self.bounds[1], self.dim)\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOStar", "description": "EnhancedADSOStar combines adaptive inertia and dynamic particle grouping to balance exploration and exploitation effectively.", "configspace": "", "generation": 61, "fitness": 0.3223330232004172, "feedback": "The algorithm EnhancedADSOStar got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.30.", "error": "", "parent_id": "c5eb2e42-a845-43c5-b67b-a2f3055cd3a2", "metadata": {"aucs": [0.9672889460943264, 0.9655140257204778, 0.9682345925081576, 0.960720516925544, 0.9580731714767021, 0.9657190611971629, 0.9670858759645922, 0.9670105639246046, 0.9590031341573582, 0.9109831458348876, 0.90018785640823, 0.9133472036111555, 0.9185820767461782, 0.8827259290831997, 0.8935957718398462, 0.9157124128694627, 0.9046357388488894, 0.8962492816139094, 0.09008188750683166, 0.12035527339348484, 0.1037323456723881, 0.06565563332483448, 0.1269386338383074, 0.15268201236454282, 0.09143024469287575, 0.07636397172774945, 0.08301111763946079, 0.10791854248511701, 0.07882556107533911, 0.11875433116097611, 0.13725999415413115, 0.1701384426358693, 0.10769488084240986, 0.12095429549709547, 0.10036193447987429, 0.09492648365862844, 0.9868878181648546, 0.9815436662618467, 0.9867949800291644, 0.9742938409634142, 0.9856479249729025, 0.9868776237678425, 0.980509262001661, 0.9764355008951185, 0.9341749050498139, 0.7498952551391147, 0.8265649588036872, 0.9091321419738142, 0.906120613807859, 0.4124905718241667, 0.8699181924712684, 0.8371092960617749, 0.7587056649148833, 0.8458470172420863, 0.24719938850446155, 0.2113832804492498, 0.38011657876107796, 0.7232580834442952, 0.27517934119854204, 0.24836351277451996, 0.3540438670308125, 0.3537612959786983, 0.22995592544097876, 0.28001154462179145, 0.2113871973416237, 0.2252028205946386, 0.3180174691850042, 0.19802286568082983, 0.22969900771031238, 0.22522644687349969, 0.13768596015848855, 0.2106410573117422, 0.22795138625872802, 0.14046972169719352, 0.18696319504262027, 0.2245336850029328, 0.2439020666066224, 0.22775042941685764, 0.2711128400938648, 0.08201947083319683, 0.2691520654612044, 9.999999999998899e-05, 0.003618848405605446, 0.07752614260747692, 0.03160555525041453, 0.049356605850478075, 9.999999999998899e-05, 0.004830026049266967, 0.06534373620950917, 9.999999999998899e-05, 0.1576413453840736, 0.14022856603985223, 0.10681636612540046, 0.050174983344626, 0.01916868091070878, 0.03731635342781281, 0.10015717577284489, 0.08853788674392304, 0.14062034759104935, 0.111384489047752, 0.26936274995942444, 0.310294505993031, 0.11626997960863594, 0.08568678636502447, 0.14803528131738697, 0.09820781162439185, 0.20072875806193924, 0.08157391211825593, 0.2108271982054135, 0.080652423115113, 0.06167293821140263, 0.10157431752238621, 0.00694242853415783, 0.1403074239556178, 0.08685313077205303, 0.07481612036650898, 0.08667613373346428, 0.5763682770716587, 0.5454024777866496, 0.5915292088315266, 0.5484191991821583, 0.5771524956365042, 0.44455657129083104, 0.5676067074349362, 0.6041750978404817, 0.5367080269602396, 0.08131299821045945, 0.08007430706662744, 0.07510373133083381, 0.05475952859740407, 0.07869616935321067, 0.09523615310128153, 0.05222581923997127, 0.07632593180879776, 0.08181649050949402, 0.19373325972040345, 0.24312090622757043, 0.24340830620241716, 0.2531189066266295, 0.24798647268077, 0.15313728193020448, 0.2410857687295458, 0.2745608958378132, 0.27752229764287395, 0.197288669898515, 0.2771154781258519, 0.2160982835642392, 0.2686779620848938, 0.4020756938447383, 0.2737311594252214, 0.16652758290224046, 0.1913389303654952, 0.2049479519309949, 0.27690397884438445, 0.16948540047001592, 0.1630620480664866, 0.2329121556183843, 0.19338370560552876, 0.33229587409655703, 0.19583233628399133, 0.21901471488767255, 0.16328939386242347, 0.2426299980390878, 0.2095640803464126, 0.22869026985882568, 0.22725439529126468, 0.22200838816644486, 0.21672808846107117, 0.2247713738950915, 0.2732188094582033, 0.2517672703021483, 0.18607614090080238, 0.18070967152374562, 0.18639982146277378, 0.17604286690941084, 0.1848556188679521, 0.17760369492360206, 0.21147319705253642, 0.19786266775995665, 0.18978081504009514, 0.18965855790492214, 0.944706882767557, 0.18967505937084783, 0.3290144414658819, 0.20241863690755857, 0.194765256053819, 0.16920610830077965, 0.2119237766085056, 0.16895851265016149, 0.8803780957802246, 0.14030798020203095, 0.609170878131498, 0.6765943010130536, 0.1565466030817605, 0.21453194170402157, 0.11662830270730773, 0.22247492321440088, 0.7557930577425305, 0.19469189972410206, 0.19255438884885412, 0.1860444870849195, 0.1801382124810551, 0.19413300078021867, 0.1881135052004984, 0.21132741235743446, 0.1892359623821931, 0.18882460836268056, 0.07326403334451692, 0.11719661004182258, 0.07620117182685171, 0.10910817335656209, 0.10254456487062091, 0.10907907281310347, 0.09628620789733378, 0.09148268925588565, 0.07556828304757146]}, "mutation_prompt": null}
{"id": "66ee0a75-541c-453f-a056-1d85965f7129", "solution": "import numpy as np\n\nclass EnhancedADSOStarPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n        self.max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                velocities[i] = np.clip(velocities[i], -self.max_velocity, self.max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                for group in np.array_split(np.random.permutation(self.population_size), 2):\n                    population[group] = np.random.uniform(self.bounds[0], self.bounds[1], (len(group), self.dim))\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOStarPlus", "description": "EnhancedADSOStarPlus introduces adaptive random restarts and dynamic inertia adjustment for improved convergence.", "configspace": "", "generation": 62, "fitness": 0.3142261089260331, "feedback": "The algorithm EnhancedADSOStarPlus got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.31 with standard deviation 0.30.", "error": "", "parent_id": "ef3958f7-4e3c-49f8-97be-083c92c79acc", "metadata": {"aucs": [0.9672889460943264, 0.9655140257204778, 0.9682345925081576, 0.960720516925544, 0.9580731714767021, 0.9657190611971629, 0.9670858759645922, 0.9670105639246046, 0.9590031341573582, 0.9109831458348876, 0.90018785640823, 0.9133472036111555, 0.9185820767461782, 0.8827259290831997, 0.8935957718398462, 0.9157124128694627, 0.9046357388488894, 0.8716378043704105, 0.08278649390371318, 0.12035527339348484, 0.06762468551734346, 0.07534211633575305, 0.11672633711085179, 0.10621975340769674, 0.09143024469287575, 0.06662928847332172, 0.11154158060879238, 0.0902463686628403, 0.07882556107533911, 0.11875433109614064, 0.13725999042993553, 0.10995731621692628, 0.10504978891553474, 0.120939446981143, 0.06447302974615177, 0.07172304002840324, 0.9868878181648546, 0.9815436662618467, 0.9867949800291644, 0.9742938409634142, 0.9856479249729025, 0.9868776237678425, 0.980509262001661, 0.9764355008951185, 0.9510779617220998, 0.4223909328595702, 0.7902199439915089, 0.9091321419738142, 0.881061224129258, 0.3486627451633857, 0.8693193815197864, 0.8245938555826178, 0.6833289699304831, 0.8377544115346549, 0.23112330806571058, 0.22552100314799262, 0.20463112027236763, 0.39499916188845663, 0.24726259021667352, 0.22110513869246584, 0.9385472482704368, 0.25175798512960756, 0.3501945072462038, 0.2792185195226764, 0.19042111036032172, 0.22362727794467363, 0.31727803887378847, 0.14567700218241753, 0.2281039039750311, 0.18293116619093597, 0.13759105847364939, 0.20662499552492786, 0.22672731234770094, 0.12493400564589208, 0.18498170976063877, 0.2245179264748507, 0.23380760765709196, 0.22548940347505209, 0.2681773041515464, 0.18836253816476134, 0.26294691211527876, 9.999999999998899e-05, 9.999999999998899e-05, 0.07282913724238627, 0.014643583263247772, 0.04651950776541547, 9.999999999998899e-05, 0.00624584846671028, 0.06388748496568553, 9.999999999998899e-05, 0.12775754865518196, 0.140208521071169, 0.11605596426766374, 0.056910275715021275, 0.06820087966270438, 0.07729464347196913, 0.1367193597848615, 0.08326816180805852, 0.09037471796470631, 0.11138312599517464, 0.2693625153603679, 0.31029420660169205, 0.11626462708080765, 0.08568678636474814, 0.1480275956685495, 0.0982069210877633, 0.20072750061314937, 0.08157391211825593, 0.2108271393028941, 0.08065241520159361, 0.06167293671131613, 0.0988706791835764, 0.027112883991622927, 0.05981460536639116, 0.08669191032380164, 0.07481611991397807, 0.08667613069129187, 0.41880479496357825, 0.516194990210035, 0.5398929863676059, 0.527590009757936, 0.5360065998045689, 0.37563073722071305, 0.5609657823928318, 0.603547186338582, 0.5066387614378118, 0.06095943011361893, 0.0996614445839008, 0.06568204639930153, 0.06521764094620264, 0.0788248349748224, 0.09523615310128153, 0.11393675851963603, 0.07958764236366278, 0.08181649048260731, 0.18151542463907167, 0.24302768745058378, 0.2430333531187845, 0.19058500836157743, 0.16873374205102787, 0.16013400770286967, 0.20480311750107116, 0.2745525952865957, 0.27731800988446287, 0.206358233980782, 0.2718210890575521, 0.22855001358770488, 0.24915988393209454, 0.40206494440988716, 0.26578031706764615, 0.19691099798087963, 0.18731510436269705, 0.19586004303121707, 0.23417808230447767, 0.17439781527258635, 0.15314862589693334, 0.21247277706833811, 0.18647537820194515, 0.3285214569134156, 0.19575367611149752, 0.2148198296847872, 0.15838015252593773, 0.23030122032694023, 0.19855206040635898, 0.26398553937016345, 0.22538459505581154, 0.20470688892868105, 0.20727551335976135, 0.2048362548700453, 0.21034004213661117, 0.2095063227055074, 0.1826910838347101, 0.17753832022943794, 0.18641967970344753, 0.17387502898782636, 0.1860117341181856, 0.1753383254971348, 0.19573759034221472, 0.17928058930305613, 0.18096308129680816, 0.18965855790492214, 0.944706882767557, 0.18967505937084783, 0.30947748048765056, 0.20241863690682682, 0.16095407327015, 0.33631789857534045, 0.22941168022631953, 0.1700854623399135, 0.875665078173772, 0.24287704605609894, 0.43225136054517654, 0.5662000761265416, 0.15654660296660494, 0.21453194170402157, 0.13426631317601057, 0.5113829115205412, 0.4300838275506833, 0.19759592232373768, 0.1754560707768249, 0.20027362813970828, 0.1818650229221085, 0.18775151884809949, 0.19166708217196382, 0.1847357550898363, 0.20076793591754927, 0.18935996301608282, 0.07617359317871264, 0.08620143310000927, 0.07771612828012808, 0.10910700940467033, 0.10155957940451299, 0.09813155594824408, 0.1000803517830966, 0.08184471136661964, 0.08241968775011532]}, "mutation_prompt": null}
{"id": "2387954b-99df-452f-a5e4-fdb233995e23", "solution": "import numpy as np\n\nclass EnhancedADSOStar:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                for group in np.array_split(np.random.permutation(self.population_size), 2):\n                    group_best_index = group[np.argmin(personal_best_values[group])]\n                    for i in group:\n                        if i != group_best_index:\n                            population[i] = np.random.uniform(self.bounds[0], self.bounds[1], self.dim)\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOStar", "description": "EnhancedADSOStar combines adaptive inertia and dynamic particle grouping to balance exploration and exploitation effectively.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ef3958f7-4e3c-49f8-97be-083c92c79acc", "metadata": {"aucs": [0.9672889460943264, 0.9655140257204778, 0.9682345925081576, 0.960720516925544, 0.9580731714767021, 0.9657190611971629, 0.9670858759645922, 0.9670105639246046, 0.9590031341573582, 0.9109831458348876, 0.90018785640823, 0.9133472036111555, 0.9185820767461782, 0.8827259290831997, 0.8935957718398462, 0.9157124128694627, 0.9046357388488894, 0.8962492816139094, 0.09008188750683166, 0.12035527339348484, 0.1037323456723881, 0.06565563332483448, 0.1269386338383074, 0.15268201236454282, 0.09143024469287575, 0.07636397172774945, 0.08301111763946079, 0.10791854248511701, 0.07882556107533911, 0.11875433116097611, 0.13725999415413115, 0.1701384426358693, 0.10769488084240986, 0.12095429549709547, 0.10036193447987429, 0.09492648365862844, 0.9868878181648546, 0.9815436662618467, 0.9867949800291644, 0.9742938409634142, 0.9856479249729025, 0.9868776237678425, 0.980509262001661, 0.9764355008951185, 0.9341749050498139, 0.7498952551391147, 0.8265649588036872, 0.9091321419738142, 0.906120613807859, 0.4124905718241667, 0.8699181924712684, 0.8371092960617749, 0.7587056649148833, 0.8458470172420863, 0.24719938850446155, 0.2113832804492498, 0.38011657876107796, 0.7232580834442952, 0.27517934119854204, 0.24836351277451996, 0.3540438670308125, 0.3537612959786983, 0.22995592544097876, 0.28001154462179145, 0.2113871973416237, 0.2252028205946386, 0.3180174691850042, 0.19802286568082983, 0.22969900771031238, 0.22522644687349969, 0.13768596015848855, 0.2106410573117422, 0.22795138625872802, 0.14046972169719352, 0.18696319504262027, 0.2245336850029328, 0.2439020666066224, 0.22775042941685764, 0.2711128400938648, 0.08201947083319683, 0.2691520654612044, 9.999999999998899e-05, 0.003618848405605446, 0.07752614260747692, 0.03160555525041453, 0.049356605850478075, 9.999999999998899e-05, 0.004830026049266967, 0.06534373620950917, 9.999999999998899e-05, 0.1576413453840736, 0.14022856603985223, 0.10681636612540046, 0.050174983344626, 0.01916868091070878, 0.03731635342781281, 0.10015717577284489, 0.08853788674392304, 0.14062034759104935, 0.111384489047752, 0.26936274995942444, 0.310294505993031, 0.11626997960863594, 0.08568678636502447, 0.14803528131738697, 0.09820781162439185, 0.20072875806193924, 0.08157391211825593, 0.2108271982054135, 0.080652423115113, 0.06167293821140263, 0.10157431752238621, 0.00694242853415783, 0.1403074239556178, 0.08685313077205303, 0.07481612036650898, 0.08667613373346428, 0.5763682770716587, 0.5454024777866496, 0.5915292088315266, 0.5484191991821583, 0.5771524956365042, 0.44455657129083104, 0.5676067074349362, 0.6041750978404817, 0.5367080269602396, 0.08131299821045945, 0.08007430706662744, 0.07510373133083381, 0.05475952859740407, 0.07869616935321067, 0.09523615310128153, 0.05222581923997127, 0.07632593180879776, 0.08181649050949402, 0.19373325972040345, 0.24312090622757043, 0.24340830620241716, 0.2531189066266295, 0.24798647268077, 0.15313728193020448, 0.2410857687295458, 0.2745608958378132, 0.27752229764287395, 0.197288669898515, 0.2771154781258519, 0.2160982835642392, 0.2686779620848938, 0.4020756938447383, 0.2737311594252214, 0.16652758290224046, 0.1913389303654952, 0.2049479519309949, 0.27690397884438445, 0.16948540047001592, 0.1630620480664866, 0.2329121556183843, 0.19338370560552876, 0.33229587409655703, 0.19583233628399133, 0.21901471488767255, 0.16328939386242347, 0.2426299980390878, 0.2095640803464126, 0.22869026985882568, 0.22725439529126468, 0.22200838816644486, 0.21672808846107117, 0.2247713738950915, 0.2732188094582033, 0.2517672703021483, 0.18607614090080238, 0.18070967152374562, 0.18639982146277378, 0.17604286690941084, 0.1848556188679521, 0.17760369492360206, 0.21147319705253642, 0.19786266775995665, 0.18978081504009514, 0.18965855790492214, 0.944706882767557, 0.18967505937084783, 0.3290144414658819, 0.20241863690755857, 0.194765256053819, 0.16920610830077965, 0.2119237766085056, 0.16895851265016149, 0.8803780957802246, 0.14030798020203095, 0.609170878131498, 0.6765943010130536, 0.1565466030817605, 0.21453194170402157, 0.11662830270730773, 0.22247492321440088, 0.7557930577425305, 0.19469189972410206, 0.19255438884885412, 0.1860444870849195, 0.1801382124810551, 0.19413300078021867, 0.1881135052004984, 0.21132741235743446, 0.1892359623821931, 0.18882460836268056, 0.07326403334451692, 0.11719661004182258, 0.07620117182685171, 0.10910817335656209, 0.10254456487062091, 0.10907907281310347, 0.09628620789733378, 0.09148268925588565, 0.07556828304757146]}, "mutation_prompt": null}
{"id": "fe666539-b34c-423a-8fa0-7a3701f3ce57", "solution": "import numpy as np\n\nclass EnhancedADSOStar:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                for group in np.array_split(np.random.permutation(self.population_size), 2):\n                    group_best_index = group[np.argmin(personal_best_values[group])]\n                    for i in group:\n                        if i != group_best_index:\n                            population[i] = np.random.uniform(self.bounds[0], self.bounds[1], self.dim)\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOStar", "description": "EnhancedADSOStar combines adaptive inertia and dynamic particle grouping to balance exploration and exploitation effectively.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ef3958f7-4e3c-49f8-97be-083c92c79acc", "metadata": {"aucs": [0.9672889460943264, 0.9655140257204778, 0.9682345925081576, 0.960720516925544, 0.9580731714767021, 0.9657190611971629, 0.9670858759645922, 0.9670105639246046, 0.9590031341573582, 0.9109831458348876, 0.90018785640823, 0.9133472036111555, 0.9185820767461782, 0.8827259290831997, 0.8935957718398462, 0.9157124128694627, 0.9046357388488894, 0.8962492816139094, 0.09008188750683166, 0.12035527339348484, 0.1037323456723881, 0.06565563332483448, 0.1269386338383074, 0.15268201236454282, 0.09143024469287575, 0.07636397172774945, 0.08301111763946079, 0.10791854248511701, 0.07882556107533911, 0.11875433116097611, 0.13725999415413115, 0.1701384426358693, 0.10769488084240986, 0.12095429549709547, 0.10036193447987429, 0.09492648365862844, 0.9868878181648546, 0.9815436662618467, 0.9867949800291644, 0.9742938409634142, 0.9856479249729025, 0.9868776237678425, 0.980509262001661, 0.9764355008951185, 0.9341749050498139, 0.7498952551391147, 0.8265649588036872, 0.9091321419738142, 0.906120613807859, 0.4124905718241667, 0.8699181924712684, 0.8371092960617749, 0.7587056649148833, 0.8458470172420863, 0.24719938850446155, 0.2113832804492498, 0.38011657876107796, 0.7232580834442952, 0.27517934119854204, 0.24836351277451996, 0.3540438670308125, 0.3537612959786983, 0.22995592544097876, 0.28001154462179145, 0.2113871973416237, 0.2252028205946386, 0.3180174691850042, 0.19802286568082983, 0.22969900771031238, 0.22522644687349969, 0.13768596015848855, 0.2106410573117422, 0.22795138625872802, 0.14046972169719352, 0.18696319504262027, 0.2245336850029328, 0.2439020666066224, 0.22775042941685764, 0.2711128400938648, 0.08201947083319683, 0.2691520654612044, 9.999999999998899e-05, 0.003618848405605446, 0.07752614260747692, 0.03160555525041453, 0.049356605850478075, 9.999999999998899e-05, 0.004830026049266967, 0.06534373620950917, 9.999999999998899e-05, 0.1576413453840736, 0.14022856603985223, 0.10681636612540046, 0.050174983344626, 0.01916868091070878, 0.03731635342781281, 0.10015717577284489, 0.08853788674392304, 0.14062034759104935, 0.111384489047752, 0.26936274995942444, 0.310294505993031, 0.11626997960863594, 0.08568678636502447, 0.14803528131738697, 0.09820781162439185, 0.20072875806193924, 0.08157391211825593, 0.2108271982054135, 0.080652423115113, 0.06167293821140263, 0.10157431752238621, 0.00694242853415783, 0.1403074239556178, 0.08685313077205303, 0.07481612036650898, 0.08667613373346428, 0.5763682770716587, 0.5454024777866496, 0.5915292088315266, 0.5484191991821583, 0.5771524956365042, 0.44455657129083104, 0.5676067074349362, 0.6041750978404817, 0.5367080269602396, 0.08131299821045945, 0.08007430706662744, 0.07510373133083381, 0.05475952859740407, 0.07869616935321067, 0.09523615310128153, 0.05222581923997127, 0.07632593180879776, 0.08181649050949402, 0.19373325972040345, 0.24312090622757043, 0.24340830620241716, 0.2531189066266295, 0.24798647268077, 0.15313728193020448, 0.2410857687295458, 0.2745608958378132, 0.27752229764287395, 0.197288669898515, 0.2771154781258519, 0.2160982835642392, 0.2686779620848938, 0.4020756938447383, 0.2737311594252214, 0.16652758290224046, 0.1913389303654952, 0.2049479519309949, 0.27690397884438445, 0.16948540047001592, 0.1630620480664866, 0.2329121556183843, 0.19338370560552876, 0.33229587409655703, 0.19583233628399133, 0.21901471488767255, 0.16328939386242347, 0.2426299980390878, 0.2095640803464126, 0.22869026985882568, 0.22725439529126468, 0.22200838816644486, 0.21672808846107117, 0.2247713738950915, 0.2732188094582033, 0.2517672703021483, 0.18607614090080238, 0.18070967152374562, 0.18639982146277378, 0.17604286690941084, 0.1848556188679521, 0.17760369492360206, 0.21147319705253642, 0.19786266775995665, 0.18978081504009514, 0.18965855790492214, 0.944706882767557, 0.18967505937084783, 0.3290144414658819, 0.20241863690755857, 0.194765256053819, 0.16920610830077965, 0.2119237766085056, 0.16895851265016149, 0.8803780957802246, 0.14030798020203095, 0.609170878131498, 0.6765943010130536, 0.1565466030817605, 0.21453194170402157, 0.11662830270730773, 0.22247492321440088, 0.7557930577425305, 0.19469189972410206, 0.19255438884885412, 0.1860444870849195, 0.1801382124810551, 0.19413300078021867, 0.1881135052004984, 0.21132741235743446, 0.1892359623821931, 0.18882460836268056, 0.07326403334451692, 0.11719661004182258, 0.07620117182685171, 0.10910817335656209, 0.10254456487062091, 0.10907907281310347, 0.09628620789733378, 0.09148268925588565, 0.07556828304757146]}, "mutation_prompt": null}
{"id": "30e10933-fff1-4d1e-ab02-45f99fd4078d", "solution": "import numpy as np\n\nclass EnhancedADSOStar:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                for group in np.array_split(np.random.permutation(self.population_size), 2):\n                    group_best_index = group[np.argmin(personal_best_values[group])]\n                    for i in group:\n                        if i != group_best_index:\n                            population[i] = np.random.uniform(self.bounds[0], self.bounds[1], self.dim)\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOStar", "description": "EnhancedADSOStar combines adaptive inertia and dynamic particle grouping to balance exploration and exploitation effectively.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ef3958f7-4e3c-49f8-97be-083c92c79acc", "metadata": {"aucs": [0.9672889460943264, 0.9655140257204778, 0.9682345925081576, 0.960720516925544, 0.9580731714767021, 0.9657190611971629, 0.9670858759645922, 0.9670105639246046, 0.9590031341573582, 0.9109831458348876, 0.90018785640823, 0.9133472036111555, 0.9185820767461782, 0.8827259290831997, 0.8935957718398462, 0.9157124128694627, 0.9046357388488894, 0.8962492816139094, 0.09008188750683166, 0.12035527339348484, 0.1037323456723881, 0.06565563332483448, 0.1269386338383074, 0.15268201236454282, 0.09143024469287575, 0.07636397172774945, 0.08301111763946079, 0.10791854248511701, 0.07882556107533911, 0.11875433116097611, 0.13725999415413115, 0.1701384426358693, 0.10769488084240986, 0.12095429549709547, 0.10036193447987429, 0.09492648365862844, 0.9868878181648546, 0.9815436662618467, 0.9867949800291644, 0.9742938409634142, 0.9856479249729025, 0.9868776237678425, 0.980509262001661, 0.9764355008951185, 0.9341749050498139, 0.7498952551391147, 0.8265649588036872, 0.9091321419738142, 0.906120613807859, 0.4124905718241667, 0.8699181924712684, 0.8371092960617749, 0.7587056649148833, 0.8458470172420863, 0.24719938850446155, 0.2113832804492498, 0.38011657876107796, 0.7232580834442952, 0.27517934119854204, 0.24836351277451996, 0.3540438670308125, 0.3537612959786983, 0.22995592544097876, 0.28001154462179145, 0.2113871973416237, 0.2252028205946386, 0.3180174691850042, 0.19802286568082983, 0.22969900771031238, 0.22522644687349969, 0.13768596015848855, 0.2106410573117422, 0.22795138625872802, 0.14046972169719352, 0.18696319504262027, 0.2245336850029328, 0.2439020666066224, 0.22775042941685764, 0.2711128400938648, 0.08201947083319683, 0.2691520654612044, 9.999999999998899e-05, 0.003618848405605446, 0.07752614260747692, 0.03160555525041453, 0.049356605850478075, 9.999999999998899e-05, 0.004830026049266967, 0.06534373620950917, 9.999999999998899e-05, 0.1576413453840736, 0.14022856603985223, 0.10681636612540046, 0.050174983344626, 0.01916868091070878, 0.03731635342781281, 0.10015717577284489, 0.08853788674392304, 0.14062034759104935, 0.111384489047752, 0.26936274995942444, 0.310294505993031, 0.11626997960863594, 0.08568678636502447, 0.14803528131738697, 0.09820781162439185, 0.20072875806193924, 0.08157391211825593, 0.2108271982054135, 0.080652423115113, 0.06167293821140263, 0.10157431752238621, 0.00694242853415783, 0.1403074239556178, 0.08685313077205303, 0.07481612036650898, 0.08667613373346428, 0.5763682770716587, 0.5454024777866496, 0.5915292088315266, 0.5484191991821583, 0.5771524956365042, 0.44455657129083104, 0.5676067074349362, 0.6041750978404817, 0.5367080269602396, 0.08131299821045945, 0.08007430706662744, 0.07510373133083381, 0.05475952859740407, 0.07869616935321067, 0.09523615310128153, 0.05222581923997127, 0.07632593180879776, 0.08181649050949402, 0.19373325972040345, 0.24312090622757043, 0.24340830620241716, 0.2531189066266295, 0.24798647268077, 0.15313728193020448, 0.2410857687295458, 0.2745608958378132, 0.27752229764287395, 0.197288669898515, 0.2771154781258519, 0.2160982835642392, 0.2686779620848938, 0.4020756938447383, 0.2737311594252214, 0.16652758290224046, 0.1913389303654952, 0.2049479519309949, 0.27690397884438445, 0.16948540047001592, 0.1630620480664866, 0.2329121556183843, 0.19338370560552876, 0.33229587409655703, 0.19583233628399133, 0.21901471488767255, 0.16328939386242347, 0.2426299980390878, 0.2095640803464126, 0.22869026985882568, 0.22725439529126468, 0.22200838816644486, 0.21672808846107117, 0.2247713738950915, 0.2732188094582033, 0.2517672703021483, 0.18607614090080238, 0.18070967152374562, 0.18639982146277378, 0.17604286690941084, 0.1848556188679521, 0.17760369492360206, 0.21147319705253642, 0.19786266775995665, 0.18978081504009514, 0.18965855790492214, 0.944706882767557, 0.18967505937084783, 0.3290144414658819, 0.20241863690755857, 0.194765256053819, 0.16920610830077965, 0.2119237766085056, 0.16895851265016149, 0.8803780957802246, 0.14030798020203095, 0.609170878131498, 0.6765943010130536, 0.1565466030817605, 0.21453194170402157, 0.11662830270730773, 0.22247492321440088, 0.7557930577425305, 0.19469189972410206, 0.19255438884885412, 0.1860444870849195, 0.1801382124810551, 0.19413300078021867, 0.1881135052004984, 0.21132741235743446, 0.1892359623821931, 0.18882460836268056, 0.07326403334451692, 0.11719661004182258, 0.07620117182685171, 0.10910817335656209, 0.10254456487062091, 0.10907907281310347, 0.09628620789733378, 0.09148268925588565, 0.07556828304757146]}, "mutation_prompt": null}
{"id": "a90665a4-b538-4b30-baa8-c73f7f2a734b", "solution": "import numpy as np\n\nclass EnhancedADSOStar:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                for group in np.array_split(np.random.permutation(self.population_size), 2):\n                    group_best_index = group[np.argmin(personal_best_values[group])]\n                    for i in group:\n                        if i != group_best_index:\n                            population[i] = np.random.uniform(self.bounds[0], self.bounds[1], self.dim)\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOStar", "description": "EnhancedADSOStar combines adaptive inertia and dynamic particle grouping to balance exploration and exploitation effectively.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ef3958f7-4e3c-49f8-97be-083c92c79acc", "metadata": {"aucs": [0.9672889460943264, 0.9655140257204778, 0.9682345925081576, 0.960720516925544, 0.9580731714767021, 0.9657190611971629, 0.9670858759645922, 0.9670105639246046, 0.9590031341573582, 0.9109831458348876, 0.90018785640823, 0.9133472036111555, 0.9185820767461782, 0.8827259290831997, 0.8935957718398462, 0.9157124128694627, 0.9046357388488894, 0.8962492816139094, 0.09008188750683166, 0.12035527339348484, 0.1037323456723881, 0.06565563332483448, 0.1269386338383074, 0.15268201236454282, 0.09143024469287575, 0.07636397172774945, 0.08301111763946079, 0.10791854248511701, 0.07882556107533911, 0.11875433116097611, 0.13725999415413115, 0.1701384426358693, 0.10769488084240986, 0.12095429549709547, 0.10036193447987429, 0.09492648365862844, 0.9868878181648546, 0.9815436662618467, 0.9867949800291644, 0.9742938409634142, 0.9856479249729025, 0.9868776237678425, 0.980509262001661, 0.9764355008951185, 0.9341749050498139, 0.7498952551391147, 0.8265649588036872, 0.9091321419738142, 0.906120613807859, 0.4124905718241667, 0.8699181924712684, 0.8371092960617749, 0.7587056649148833, 0.8458470172420863, 0.24719938850446155, 0.2113832804492498, 0.38011657876107796, 0.7232580834442952, 0.27517934119854204, 0.24836351277451996, 0.3540438670308125, 0.3537612959786983, 0.22995592544097876, 0.28001154462179145, 0.2113871973416237, 0.2252028205946386, 0.3180174691850042, 0.19802286568082983, 0.22969900771031238, 0.22522644687349969, 0.13768596015848855, 0.2106410573117422, 0.22795138625872802, 0.14046972169719352, 0.18696319504262027, 0.2245336850029328, 0.2439020666066224, 0.22775042941685764, 0.2711128400938648, 0.08201947083319683, 0.2691520654612044, 9.999999999998899e-05, 0.003618848405605446, 0.07752614260747692, 0.03160555525041453, 0.049356605850478075, 9.999999999998899e-05, 0.004830026049266967, 0.06534373620950917, 9.999999999998899e-05, 0.1576413453840736, 0.14022856603985223, 0.10681636612540046, 0.050174983344626, 0.01916868091070878, 0.03731635342781281, 0.10015717577284489, 0.08853788674392304, 0.14062034759104935, 0.111384489047752, 0.26936274995942444, 0.310294505993031, 0.11626997960863594, 0.08568678636502447, 0.14803528131738697, 0.09820781162439185, 0.20072875806193924, 0.08157391211825593, 0.2108271982054135, 0.080652423115113, 0.06167293821140263, 0.10157431752238621, 0.00694242853415783, 0.1403074239556178, 0.08685313077205303, 0.07481612036650898, 0.08667613373346428, 0.5763682770716587, 0.5454024777866496, 0.5915292088315266, 0.5484191991821583, 0.5771524956365042, 0.44455657129083104, 0.5676067074349362, 0.6041750978404817, 0.5367080269602396, 0.08131299821045945, 0.08007430706662744, 0.07510373133083381, 0.05475952859740407, 0.07869616935321067, 0.09523615310128153, 0.05222581923997127, 0.07632593180879776, 0.08181649050949402, 0.19373325972040345, 0.24312090622757043, 0.24340830620241716, 0.2531189066266295, 0.24798647268077, 0.15313728193020448, 0.2410857687295458, 0.2745608958378132, 0.27752229764287395, 0.197288669898515, 0.2771154781258519, 0.2160982835642392, 0.2686779620848938, 0.4020756938447383, 0.2737311594252214, 0.16652758290224046, 0.1913389303654952, 0.2049479519309949, 0.27690397884438445, 0.16948540047001592, 0.1630620480664866, 0.2329121556183843, 0.19338370560552876, 0.33229587409655703, 0.19583233628399133, 0.21901471488767255, 0.16328939386242347, 0.2426299980390878, 0.2095640803464126, 0.22869026985882568, 0.22725439529126468, 0.22200838816644486, 0.21672808846107117, 0.2247713738950915, 0.2732188094582033, 0.2517672703021483, 0.18607614090080238, 0.18070967152374562, 0.18639982146277378, 0.17604286690941084, 0.1848556188679521, 0.17760369492360206, 0.21147319705253642, 0.19786266775995665, 0.18978081504009514, 0.18965855790492214, 0.944706882767557, 0.18967505937084783, 0.3290144414658819, 0.20241863690755857, 0.194765256053819, 0.16920610830077965, 0.2119237766085056, 0.16895851265016149, 0.8803780957802246, 0.14030798020203095, 0.609170878131498, 0.6765943010130536, 0.1565466030817605, 0.21453194170402157, 0.11662830270730773, 0.22247492321440088, 0.7557930577425305, 0.19469189972410206, 0.19255438884885412, 0.1860444870849195, 0.1801382124810551, 0.19413300078021867, 0.1881135052004984, 0.21132741235743446, 0.1892359623821931, 0.18882460836268056, 0.07326403334451692, 0.11719661004182258, 0.07620117182685171, 0.10910817335656209, 0.10254456487062091, 0.10907907281310347, 0.09628620789733378, 0.09148268925588565, 0.07556828304757146]}, "mutation_prompt": null}
{"id": "12d5c2ad-4196-4fa9-92a0-2725576a9985", "solution": "import numpy as np\n\nclass EnhancedADSOStar:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                for group in np.array_split(np.random.permutation(self.population_size), 2):\n                    group_best_index = group[np.argmin(personal_best_values[group])]\n                    for i in group:\n                        if i != group_best_index:\n                            population[i] = np.random.uniform(self.bounds[0], self.bounds[1], self.dim)\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOStar", "description": "EnhancedADSOStar combines adaptive inertia and dynamic particle grouping to balance exploration and exploitation effectively.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ef3958f7-4e3c-49f8-97be-083c92c79acc", "metadata": {"aucs": [0.9672889460943264, 0.9655140257204778, 0.9682345925081576, 0.960720516925544, 0.9580731714767021, 0.9657190611971629, 0.9670858759645922, 0.9670105639246046, 0.9590031341573582, 0.9109831458348876, 0.90018785640823, 0.9133472036111555, 0.9185820767461782, 0.8827259290831997, 0.8935957718398462, 0.9157124128694627, 0.9046357388488894, 0.8962492816139094, 0.09008188750683166, 0.12035527339348484, 0.1037323456723881, 0.06565563332483448, 0.1269386338383074, 0.15268201236454282, 0.09143024469287575, 0.07636397172774945, 0.08301111763946079, 0.10791854248511701, 0.07882556107533911, 0.11875433116097611, 0.13725999415413115, 0.1701384426358693, 0.10769488084240986, 0.12095429549709547, 0.10036193447987429, 0.09492648365862844, 0.9868878181648546, 0.9815436662618467, 0.9867949800291644, 0.9742938409634142, 0.9856479249729025, 0.9868776237678425, 0.980509262001661, 0.9764355008951185, 0.9341749050498139, 0.7498952551391147, 0.8265649588036872, 0.9091321419738142, 0.906120613807859, 0.4124905718241667, 0.8699181924712684, 0.8371092960617749, 0.7587056649148833, 0.8458470172420863, 0.24719938850446155, 0.2113832804492498, 0.38011657876107796, 0.7232580834442952, 0.27517934119854204, 0.24836351277451996, 0.3540438670308125, 0.3537612959786983, 0.22995592544097876, 0.28001154462179145, 0.2113871973416237, 0.2252028205946386, 0.3180174691850042, 0.19802286568082983, 0.22969900771031238, 0.22522644687349969, 0.13768596015848855, 0.2106410573117422, 0.22795138625872802, 0.14046972169719352, 0.18696319504262027, 0.2245336850029328, 0.2439020666066224, 0.22775042941685764, 0.2711128400938648, 0.08201947083319683, 0.2691520654612044, 9.999999999998899e-05, 0.003618848405605446, 0.07752614260747692, 0.03160555525041453, 0.049356605850478075, 9.999999999998899e-05, 0.004830026049266967, 0.06534373620950917, 9.999999999998899e-05, 0.1576413453840736, 0.14022856603985223, 0.10681636612540046, 0.050174983344626, 0.01916868091070878, 0.03731635342781281, 0.10015717577284489, 0.08853788674392304, 0.14062034759104935, 0.111384489047752, 0.26936274995942444, 0.310294505993031, 0.11626997960863594, 0.08568678636502447, 0.14803528131738697, 0.09820781162439185, 0.20072875806193924, 0.08157391211825593, 0.2108271982054135, 0.080652423115113, 0.06167293821140263, 0.10157431752238621, 0.00694242853415783, 0.1403074239556178, 0.08685313077205303, 0.07481612036650898, 0.08667613373346428, 0.5763682770716587, 0.5454024777866496, 0.5915292088315266, 0.5484191991821583, 0.5771524956365042, 0.44455657129083104, 0.5676067074349362, 0.6041750978404817, 0.5367080269602396, 0.08131299821045945, 0.08007430706662744, 0.07510373133083381, 0.05475952859740407, 0.07869616935321067, 0.09523615310128153, 0.05222581923997127, 0.07632593180879776, 0.08181649050949402, 0.19373325972040345, 0.24312090622757043, 0.24340830620241716, 0.2531189066266295, 0.24798647268077, 0.15313728193020448, 0.2410857687295458, 0.2745608958378132, 0.27752229764287395, 0.197288669898515, 0.2771154781258519, 0.2160982835642392, 0.2686779620848938, 0.4020756938447383, 0.2737311594252214, 0.16652758290224046, 0.1913389303654952, 0.2049479519309949, 0.27690397884438445, 0.16948540047001592, 0.1630620480664866, 0.2329121556183843, 0.19338370560552876, 0.33229587409655703, 0.19583233628399133, 0.21901471488767255, 0.16328939386242347, 0.2426299980390878, 0.2095640803464126, 0.22869026985882568, 0.22725439529126468, 0.22200838816644486, 0.21672808846107117, 0.2247713738950915, 0.2732188094582033, 0.2517672703021483, 0.18607614090080238, 0.18070967152374562, 0.18639982146277378, 0.17604286690941084, 0.1848556188679521, 0.17760369492360206, 0.21147319705253642, 0.19786266775995665, 0.18978081504009514, 0.18965855790492214, 0.944706882767557, 0.18967505937084783, 0.3290144414658819, 0.20241863690755857, 0.194765256053819, 0.16920610830077965, 0.2119237766085056, 0.16895851265016149, 0.8803780957802246, 0.14030798020203095, 0.609170878131498, 0.6765943010130536, 0.1565466030817605, 0.21453194170402157, 0.11662830270730773, 0.22247492321440088, 0.7557930577425305, 0.19469189972410206, 0.19255438884885412, 0.1860444870849195, 0.1801382124810551, 0.19413300078021867, 0.1881135052004984, 0.21132741235743446, 0.1892359623821931, 0.18882460836268056, 0.07326403334451692, 0.11719661004182258, 0.07620117182685171, 0.10910817335656209, 0.10254456487062091, 0.10907907281310347, 0.09628620789733378, 0.09148268925588565, 0.07556828304757146]}, "mutation_prompt": null}
{"id": "e8de6d5b-b918-4135-8be5-ed09696db3cb", "solution": "import numpy as np\n\nclass EnhancedADSOStarPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n        mutation_rate = 0.05\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                # Introduce mutation-based perturbation\n                if np.random.rand() < mutation_rate:\n                    population[i] += np.random.normal(0, 0.1, self.dim)\n\n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                for group in np.array_split(np.random.permutation(self.population_size), 2):\n                    group_best_index = group[np.argmin(personal_best_values[group])]\n                    for i in group:\n                        if i != group_best_index:\n                            population[i] = np.random.uniform(self.bounds[0], self.bounds[1], self.dim)\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOStarPlus", "description": "EnhancedADSOStarPlus integrates mutation-based perturbations and adaptive local search to improve convergence by escaping local optima.", "configspace": "", "generation": 68, "fitness": 0.26693190689717566, "feedback": "The algorithm EnhancedADSOStarPlus got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.24.", "error": "", "parent_id": "ef3958f7-4e3c-49f8-97be-083c92c79acc", "metadata": {"aucs": [0.8798115507354062, 0.8331614947740564, 0.6459824235045635, 0.7451879362360859, 0.818416490862137, 0.8369189625422342, 0.8157119565831528, 0.8345077103224401, 0.705700881069863, 0.19335718946965608, 0.21074020949001748, 0.12283165473059632, 0.22450700529792533, 0.10859882254341591, 0.08015445299960489, 0.12828483168187665, 0.15866992686827397, 0.3100312938815456, 0.1053113008454113, 0.1365732641316465, 0.09890144429614411, 0.11328465894239348, 0.11358241003232505, 0.10536312016264582, 0.08734380534071784, 0.08498260436994864, 0.07592636850874246, 0.10565445394159867, 0.0808887351083667, 0.07136076208331776, 0.12095620320349676, 0.11959606550787905, 0.11380154906462325, 0.12818807470188454, 0.1148646320682527, 0.11906745114750028, 0.9885026270936159, 0.978844122156425, 0.976999250379253, 0.9883296737394841, 0.9838850750079453, 0.9850566410814241, 0.9864484798048563, 0.975325678063054, 0.9722332727600166, 0.4502357122465638, 0.49260041099398744, 0.4012173881532347, 0.4702742558564853, 0.41896138138112227, 0.5227977177234533, 0.4388411738792872, 0.40710818071727595, 0.4889304320630281, 0.7401876442022657, 0.20568850521375992, 0.33496086286850657, 0.2853179141592288, 0.2814489194735226, 0.2246693899831559, 0.28143511534215304, 0.2895781687626089, 0.2330421708539383, 0.15597226140924614, 0.17565376896495688, 0.19136644509527245, 0.13188972351913653, 0.18363571489914832, 0.20547080447010535, 0.20668326063957343, 0.1894959084410618, 0.13700896419139375, 0.18249473685936535, 0.1305495009768094, 0.13452924982623282, 0.22370138405152717, 0.16230675844272502, 0.1743870934309305, 0.1902008848772867, 0.1745682099109226, 0.2246859054585576, 0.06004995759245846, 9.999999999998899e-05, 0.05065144263367005, 0.10469942938746013, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04729163668089842, 0.14238843149886926, 0.048203369609879476, 0.11391806051024322, 0.09287030184065537, 0.014285248914464477, 0.041071753497490815, 0.15167322420899998, 0.07275200841460316, 0.08915145653920975, 0.12243955589356015, 0.1942396943711111, 0.09144942205092343, 0.11128812361405926, 0.08704639976490236, 0.132000772236611, 0.1265775883855711, 0.09560494822354082, 0.08026452797355343, 0.10085737004571238, 0.2513471851817156, 0.11924390232519722, 0.11916581046757202, 0.0865894367777823, 0.2554270591979263, 0.0865794693854024, 0.1253517365022231, 0.09320897478740808, 0.5336234659948413, 0.5139359437043983, 0.5337520925204249, 0.504200427596685, 0.5358543747183808, 0.47486333210399223, 0.4786026761823622, 0.5309990297502623, 0.5112278335863983, 0.05519778467019665, 0.07726314202387874, 0.09992500736437837, 0.10904988053111064, 0.08500679559008184, 0.09149545797736414, 0.10565390165358601, 0.12301113220153725, 0.07666400161086495, 0.2600054304820796, 0.21891275063917448, 0.25705426456798264, 0.3451370106396665, 0.1748299719441022, 0.192542374651123, 0.1685009457152381, 0.21141314928939814, 0.17527835367161637, 0.32283691255773683, 0.18903129954609021, 0.21068518116111057, 0.25372413665641536, 0.29361144261414607, 0.2167543309271971, 0.22738608966747798, 0.1699572595394131, 0.19362104496875865, 0.19790835550779706, 0.24031662478648452, 0.1394625210132554, 0.2701330543857945, 0.1465101598205396, 0.15464991354041413, 0.21508784101567002, 0.16755459785660554, 0.12463878453858956, 0.24941214924393584, 0.20319443658692504, 0.23397063802653628, 0.21241210372189634, 0.2583071837078498, 0.2166679521852467, 0.29625225875250083, 0.24453928273298475, 0.2483080952344412, 0.21410339991490723, 0.18765093665541988, 0.18723346040149713, 0.19024046817036544, 0.19760209990444821, 0.18403968474442622, 0.1941777904322607, 0.18736261356760975, 0.18798075770028289, 0.18944080047594702, 0.17977770558579254, 0.18939562838757984, 0.9751146075627077, 0.20234418519486608, 0.170435133821758, 0.5422730857184843, 0.3580102667276165, 0.15465370154655045, 0.8321143238416552, 0.20295538240472444, 0.6007065651841901, 0.15608204097105915, 0.1571700569928708, 0.21429256328653956, 0.5644901436944014, 0.676865966769167, 0.5692007726108577, 0.2326168464683107, 0.19151801540896052, 0.2159733759756195, 0.1872019819736903, 0.20893634654529702, 0.22105238818002337, 0.26347237245140376, 0.20533716597132967, 0.20321287556253498, 0.09433860709502973, 0.09064232054477028, 0.07409799529591654, 0.1024734875823251, 0.1676217398161154, 0.09415221259235262, 0.08108219929411953, 0.10424725276461322, 0.07873564733527783]}, "mutation_prompt": null}
{"id": "b8368206-f366-4b6b-a13f-b2a7208835fe", "solution": "import numpy as np\n\nclass EnhancedADSOStar:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.5 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                for group in np.array_split(np.random.permutation(self.population_size), 2):\n                    group_best_index = group[np.argmin(personal_best_values[group])]\n                    for i in group:\n                        if i != group_best_index:\n                            population[i] = np.random.uniform(self.bounds[0], self.bounds[1], self.dim)\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOStar", "description": "EnhancedADSOStar combines adaptive inertia and dynamic particle grouping to balance exploration and exploitation effectively.", "configspace": "", "generation": 62, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "ef3958f7-4e3c-49f8-97be-083c92c79acc", "metadata": {"aucs": [0.9672889460943264, 0.9655140257204778, 0.9682345925081576, 0.960720516925544, 0.9580731714767021, 0.9657190611971629, 0.9670858759645922, 0.9670105639246046, 0.9590031341573582, 0.9109831458348876, 0.90018785640823, 0.9133472036111555, 0.9185820767461782, 0.8827259290831997, 0.8935957718398462, 0.9157124128694627, 0.9046357388488894, 0.8962492816139094, 0.09008188750683166, 0.12035527339348484, 0.1037323456723881, 0.06565563332483448, 0.1269386338383074, 0.15268201236454282, 0.09143024469287575, 0.07636397172774945, 0.08301111763946079, 0.10791854248511701, 0.07882556107533911, 0.11875433116097611, 0.13725999415413115, 0.1701384426358693, 0.10769488084240986, 0.12095429549709547, 0.10036193447987429, 0.09492648365862844, 0.9868878181648546, 0.9815436662618467, 0.9867949800291644, 0.9742938409634142, 0.9856479249729025, 0.9868776237678425, 0.980509262001661, 0.9764355008951185, 0.9341749050498139, 0.7498952551391147, 0.8265649588036872, 0.9091321419738142, 0.906120613807859, 0.4124905718241667, 0.8699181924712684, 0.8371092960617749, 0.7587056649148833, 0.8458470172420863, 0.24719938850446155, 0.2113832804492498, 0.38011657876107796, 0.7232580834442952, 0.27517934119854204, 0.24836351277451996, 0.3540438670308125, 0.3537612959786983, 0.22995592544097876, 0.28001154462179145, 0.2113871973416237, 0.2252028205946386, 0.3180174691850042, 0.19802286568082983, 0.22969900771031238, 0.22522644687349969, 0.13768596015848855, 0.2106410573117422, 0.22795138625872802, 0.14046972169719352, 0.18696319504262027, 0.2245336850029328, 0.2439020666066224, 0.22775042941685764, 0.2711128400938648, 0.08201947083319683, 0.2691520654612044, 9.999999999998899e-05, 0.003618848405605446, 0.07752614260747692, 0.03160555525041453, 0.049356605850478075, 9.999999999998899e-05, 0.004830026049266967, 0.06534373620950917, 9.999999999998899e-05, 0.1576413453840736, 0.14022856603985223, 0.10681636612540046, 0.050174983344626, 0.01916868091070878, 0.03731635342781281, 0.10015717577284489, 0.08853788674392304, 0.14062034759104935, 0.111384489047752, 0.26936274995942444, 0.310294505993031, 0.11626997960863594, 0.08568678636502447, 0.14803528131738697, 0.09820781162439185, 0.20072875806193924, 0.08157391211825593, 0.2108271982054135, 0.080652423115113, 0.06167293821140263, 0.10157431752238621, 0.00694242853415783, 0.1403074239556178, 0.08685313077205303, 0.07481612036650898, 0.08667613373346428, 0.5763682770716587, 0.5454024777866496, 0.5915292088315266, 0.5484191991821583, 0.5771524956365042, 0.44455657129083104, 0.5676067074349362, 0.6041750978404817, 0.5367080269602396, 0.08131299821045945, 0.08007430706662744, 0.07510373133083381, 0.05475952859740407, 0.07869616935321067, 0.09523615310128153, 0.05222581923997127, 0.07632593180879776, 0.08181649050949402, 0.19373325972040345, 0.24312090622757043, 0.24340830620241716, 0.2531189066266295, 0.24798647268077, 0.15313728193020448, 0.2410857687295458, 0.2745608958378132, 0.27752229764287395, 0.197288669898515, 0.2771154781258519, 0.2160982835642392, 0.2686779620848938, 0.4020756938447383, 0.2737311594252214, 0.16652758290224046, 0.1913389303654952, 0.2049479519309949, 0.27690397884438445, 0.16948540047001592, 0.1630620480664866, 0.2329121556183843, 0.19338370560552876, 0.33229587409655703, 0.19583233628399133, 0.21901471488767255, 0.16328939386242347, 0.2426299980390878, 0.2095640803464126, 0.22869026985882568, 0.22725439529126468, 0.22200838816644486, 0.21672808846107117, 0.2247713738950915, 0.2732188094582033, 0.2517672703021483, 0.18607614090080238, 0.18070967152374562, 0.18639982146277378, 0.17604286690941084, 0.1848556188679521, 0.17760369492360206, 0.21147319705253642, 0.19786266775995665, 0.18978081504009514, 0.18965855790492214, 0.944706882767557, 0.18967505937084783, 0.3290144414658819, 0.20241863690755857, 0.194765256053819, 0.16920610830077965, 0.2119237766085056, 0.16895851265016149, 0.8803780957802246, 0.14030798020203095, 0.609170878131498, 0.6765943010130536, 0.1565466030817605, 0.21453194170402157, 0.11662830270730773, 0.22247492321440088, 0.7557930577425305, 0.19469189972410206, 0.19255438884885412, 0.1860444870849195, 0.1801382124810551, 0.19413300078021867, 0.1881135052004984, 0.21132741235743446, 0.1892359623821931, 0.18882460836268056, 0.07326403334451692, 0.11719661004182258, 0.07620117182685171, 0.10910817335656209, 0.10254456487062091, 0.10907907281310347, 0.09628620789733378, 0.09148268925588565, 0.07556828304757146]}, "mutation_prompt": null}
{"id": "3675c68a-a97e-4fd9-ba3c-a850fa63f3c1", "solution": "import numpy as np\n\nclass EnhancedADSOStarPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.4 * chaotic_sequence[self.iteration % len(chaotic_sequence)]  # Slightly adjusted\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                for group in np.array_split(np.random.permutation(self.population_size), 2):\n                    group_best_index = group[np.argmin(personal_best_values[group])]\n                    for i in group:\n                        if i != group_best_index:\n                            neighborhood_radius = 0.1 * (self.bounds[1] - self.bounds[0])  # Added neighborhood search\n                            population[i] = np.clip(population[group_best_index] + \n                                                    np.random.uniform(-neighborhood_radius, neighborhood_radius, self.dim), \n                                                    self.bounds[0], self.bounds[1])\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOStarPlus", "description": "EnhancedADSOStarPlus leverages adaptive inertia with a dynamic neighborhood search to improve convergence speed and accuracy.", "configspace": "", "generation": 70, "fitness": 0.3267892466225185, "feedback": "The algorithm EnhancedADSOStarPlus got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.33 with standard deviation 0.31.", "error": "", "parent_id": "ef3958f7-4e3c-49f8-97be-083c92c79acc", "metadata": {"aucs": [0.9705347699428433, 0.9624287467636128, 0.9660675347526102, 0.9634449067916855, 0.9602078762657024, 0.9536548718790635, 0.9643672951320037, 0.9643061442054186, 0.9687820612271381, 0.902566623997177, 0.8746652184749697, 0.9068523852421699, 0.9013522233041774, 0.8818195584842309, 0.900187962718799, 0.8783281231565538, 0.9227528735164452, 0.8625899580619406, 0.09052588208910872, 0.124002717146798, 0.06123896425390607, 0.08394473253443613, 0.1488069069897916, 0.11855283008123862, 0.09145130050583161, 0.06700563704546714, 0.050303129636503185, 0.13706176175258278, 0.07883124181703971, 0.11913079534151638, 0.13703822067720417, 0.08168269539918316, 0.11778869795666724, 0.12095196736151503, 0.09128577326594456, 0.10701363271538011, 0.9868881356963003, 0.9815390591998592, 0.986794476175855, 0.9743702064586314, 0.9856441851331661, 0.9868768891057558, 0.9805143371912302, 0.9764364255751069, 0.9643492325721603, 0.8854785994909045, 0.8638198733894629, 0.8964462539170978, 0.8825882948710464, 0.3559191125490939, 0.9043458757613234, 0.7114321067073044, 0.8547736405538251, 0.9056614493202182, 0.303524510821122, 0.19145276933100353, 0.2133673842984405, 0.878716197599535, 0.2620886163955254, 0.19593114948726575, 0.23280505339161417, 0.2605218035488046, 0.8473972679887052, 0.24559570774198924, 0.23517882264072143, 0.22771378216966087, 0.3171828000741166, 0.21377165153763467, 0.22582002719659955, 0.22081390244552945, 0.1378612733849679, 0.22268346028151065, 0.243752440095094, 0.20397985471249935, 0.22597317714964682, 0.2283730152327652, 0.2613338934544981, 0.21645270313249187, 0.2627057250716983, 9.999999999998899e-05, 0.2704456248794338, 0.0022769086306405617, 9.999999999998899e-05, 0.0629588756667423, 0.05038881263823225, 0.049486012811279956, 0.03214975496874162, 0.0037371784415687337, 0.08865079144052912, 9.999999999998899e-05, 0.10629005494982158, 0.08491564896816728, 0.10866569395522296, 0.034346886257284326, 0.007813768068210658, 0.03211444490597515, 0.09547375352850851, 0.08642830620887276, 0.1417413809350725, 0.1159960754344993, 0.27111631707672645, 0.29828687932345477, 0.11608257432880231, 0.08719302964596376, 0.13349202339835609, 0.10165161953092372, 0.19609893224038066, 0.08132072025260573, 0.19980514126259963, 0.08142037534533009, 0.05912017288822824, 0.11761278078036197, 0.006994008277590891, 0.1350361030860835, 0.08700583934582773, 0.08801072143287125, 0.0865009132589275, 0.5720913801650838, 0.5562439605944003, 0.5989867315820625, 0.6342990394204977, 0.5590041836515293, 0.4864994281001632, 0.5875323033880153, 0.6052984788987262, 0.5725580001579126, 0.05482110182834388, 0.07193765035558841, 0.08525817349517184, 0.07236231156684825, 0.08327413834633102, 0.09557335158033498, 0.05223905142102925, 0.08037988604951718, 0.08183032980606253, 0.17869444926263822, 0.258151475939125, 0.21626524361563715, 0.4242312276316901, 0.4784876098946851, 0.20552402765474875, 0.19862201723281836, 0.3342104596468449, 0.28368672810304985, 0.20098022181637143, 0.34907920908949075, 0.22440074904839102, 0.18753875247144403, 0.3703122865749703, 0.15449169421612985, 0.16540827010797388, 0.19562877260681966, 0.13639565824642852, 0.27075711403046043, 0.22144506165579847, 0.27139906684724935, 0.27844288045408205, 0.19106190520172295, 0.3551113445784868, 0.2112595073250686, 0.22157588357802127, 0.07940383594440459, 0.24329165975700384, 0.21670008892921877, 0.22032155863108083, 0.23050330527123253, 0.3578245988023362, 0.25058767329684783, 0.26539243949145663, 0.19976518643753793, 0.2582357242163814, 0.17578609529382283, 0.1846096870173869, 0.19830884198783394, 0.1765202025803856, 0.1915870117392312, 0.18780521316720888, 0.21110387589908042, 0.1920880437405632, 0.18405231985847037, 0.18966240521553523, 0.9599985245891225, 0.1896761491641693, 0.1740583042762135, 0.20241927458509068, 0.1151442965344529, 0.16920646602713352, 0.1682535585783166, 0.1691543614891221, 0.9454210233316079, 0.11334030503404824, 0.7501505302702385, 0.6687352134130935, 0.15695668403156837, 0.2145611834602067, 0.08345586975985353, 0.09479788925453447, 0.8272875666087596, 0.18989263297318504, 0.21195187185372044, 0.19965121261840346, 0.2070423301602723, 0.21034293246275138, 0.1920171303744459, 0.22344617961471103, 0.19809067241681022, 0.20973993589689022, 0.07796796988976462, 0.1093111516180546, 0.06784782135901368, 0.10944599033515223, 0.08326679713982466, 0.10844906151385403, 0.1433692305598212, 0.09220050776768307, 0.09159646948506073]}, "mutation_prompt": null}
{"id": "12f43590-8ffa-4d9e-9479-f11745ba5235", "solution": "import numpy as np\n\nclass EnhancedADSOStarPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.4 * chaotic_sequence[self.iteration % len(chaotic_sequence)]  # Slightly adjusted\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                for group in np.array_split(np.random.permutation(self.population_size), 2):\n                    group_best_index = group[np.argmin(personal_best_values[group])]\n                    for i in group:\n                        if i != group_best_index:\n                            neighborhood_radius = 0.1 * (self.bounds[1] - self.bounds[0])  # Added neighborhood search\n                            population[i] = np.clip(population[group_best_index] + \n                                                    np.random.uniform(-neighborhood_radius, neighborhood_radius, self.dim), \n                                                    self.bounds[0], self.bounds[1])\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOStarPlus", "description": "EnhancedADSOStarPlus leverages adaptive inertia with a dynamic neighborhood search to improve convergence speed and accuracy.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3675c68a-a97e-4fd9-ba3c-a850fa63f3c1", "metadata": {"aucs": [0.9705347699428433, 0.9624287467636128, 0.9660675347526102, 0.9634449067916855, 0.9602078762657024, 0.9536548718790635, 0.9643672951320037, 0.9643061442054186, 0.9687820612271381, 0.902566623997177, 0.8746652184749697, 0.9068523852421699, 0.9013522233041774, 0.8818195584842309, 0.900187962718799, 0.8783281231565538, 0.9227528735164452, 0.8625899580619406, 0.09052588208910872, 0.124002717146798, 0.06123896425390607, 0.08394473253443613, 0.1488069069897916, 0.11855283008123862, 0.09145130050583161, 0.06700563704546714, 0.050303129636503185, 0.13706176175258278, 0.07883124181703971, 0.11913079534151638, 0.13703822067720417, 0.08168269539918316, 0.11778869795666724, 0.12095196736151503, 0.09128577326594456, 0.10701363271538011, 0.9868881356963003, 0.9815390591998592, 0.986794476175855, 0.9743702064586314, 0.9856441851331661, 0.9868768891057558, 0.9805143371912302, 0.9764364255751069, 0.9643492325721603, 0.8854785994909045, 0.8638198733894629, 0.8964462539170978, 0.8825882948710464, 0.3559191125490939, 0.9043458757613234, 0.7114321067073044, 0.8547736405538251, 0.9056614493202182, 0.303524510821122, 0.19145276933100353, 0.2133673842984405, 0.878716197599535, 0.2620886163955254, 0.19593114948726575, 0.23280505339161417, 0.2605218035488046, 0.8473972679887052, 0.24559570774198924, 0.23517882264072143, 0.22771378216966087, 0.3171828000741166, 0.21377165153763467, 0.22582002719659955, 0.22081390244552945, 0.1378612733849679, 0.22268346028151065, 0.243752440095094, 0.20397985471249935, 0.22597317714964682, 0.2283730152327652, 0.2613338934544981, 0.21645270313249187, 0.2627057250716983, 9.999999999998899e-05, 0.2704456248794338, 0.0022769086306405617, 9.999999999998899e-05, 0.0629588756667423, 0.05038881263823225, 0.049486012811279956, 0.03214975496874162, 0.0037371784415687337, 0.08865079144052912, 9.999999999998899e-05, 0.10629005494982158, 0.08491564896816728, 0.10866569395522296, 0.034346886257284326, 0.007813768068210658, 0.03211444490597515, 0.09547375352850851, 0.08642830620887276, 0.1417413809350725, 0.1159960754344993, 0.27111631707672645, 0.29828687932345477, 0.11608257432880231, 0.08719302964596376, 0.13349202339835609, 0.10165161953092372, 0.19609893224038066, 0.08132072025260573, 0.19980514126259963, 0.08142037534533009, 0.05912017288822824, 0.11761278078036197, 0.006994008277590891, 0.1350361030860835, 0.08700583934582773, 0.08801072143287125, 0.0865009132589275, 0.5720913801650838, 0.5562439605944003, 0.5989867315820625, 0.6342990394204977, 0.5590041836515293, 0.4864994281001632, 0.5875323033880153, 0.6052984788987262, 0.5725580001579126, 0.05482110182834388, 0.07193765035558841, 0.08525817349517184, 0.07236231156684825, 0.08327413834633102, 0.09557335158033498, 0.05223905142102925, 0.08037988604951718, 0.08183032980606253, 0.17869444926263822, 0.258151475939125, 0.21626524361563715, 0.4242312276316901, 0.4784876098946851, 0.20552402765474875, 0.19862201723281836, 0.3342104596468449, 0.28368672810304985, 0.20098022181637143, 0.34907920908949075, 0.22440074904839102, 0.18753875247144403, 0.3703122865749703, 0.15449169421612985, 0.16540827010797388, 0.19562877260681966, 0.13639565824642852, 0.27075711403046043, 0.22144506165579847, 0.27139906684724935, 0.27844288045408205, 0.19106190520172295, 0.3551113445784868, 0.2112595073250686, 0.22157588357802127, 0.07940383594440459, 0.24329165975700384, 0.21670008892921877, 0.22032155863108083, 0.23050330527123253, 0.3578245988023362, 0.25058767329684783, 0.26539243949145663, 0.19976518643753793, 0.2582357242163814, 0.17578609529382283, 0.1846096870173869, 0.19830884198783394, 0.1765202025803856, 0.1915870117392312, 0.18780521316720888, 0.21110387589908042, 0.1920880437405632, 0.18405231985847037, 0.18966240521553523, 0.9599985245891225, 0.1896761491641693, 0.1740583042762135, 0.20241927458509068, 0.1151442965344529, 0.16920646602713352, 0.1682535585783166, 0.1691543614891221, 0.9454210233316079, 0.11334030503404824, 0.7501505302702385, 0.6687352134130935, 0.15695668403156837, 0.2145611834602067, 0.08345586975985353, 0.09479788925453447, 0.8272875666087596, 0.18989263297318504, 0.21195187185372044, 0.19965121261840346, 0.2070423301602723, 0.21034293246275138, 0.1920171303744459, 0.22344617961471103, 0.19809067241681022, 0.20973993589689022, 0.07796796988976462, 0.1093111516180546, 0.06784782135901368, 0.10944599033515223, 0.08326679713982466, 0.10844906151385403, 0.1433692305598212, 0.09220050776768307, 0.09159646948506073]}, "mutation_prompt": null}
{"id": "7df176a8-8185-4340-b78f-172d766f281d", "solution": "import numpy as np\n\nclass EnhancedADSOStarPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.4 * chaotic_sequence[self.iteration % len(chaotic_sequence)]  # Slightly adjusted\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                for group in np.array_split(np.random.permutation(self.population_size), 2):\n                    group_best_index = group[np.argmin(personal_best_values[group])]\n                    for i in group:\n                        if i != group_best_index:\n                            neighborhood_radius = 0.1 * (self.bounds[1] - self.bounds[0])  # Added neighborhood search\n                            population[i] = np.clip(population[group_best_index] + \n                                                    np.random.uniform(-neighborhood_radius, neighborhood_radius, self.dim), \n                                                    self.bounds[0], self.bounds[1])\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOStarPlus", "description": "EnhancedADSOStarPlus leverages adaptive inertia with a dynamic neighborhood search to improve convergence speed and accuracy.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3675c68a-a97e-4fd9-ba3c-a850fa63f3c1", "metadata": {"aucs": [0.9705347699428433, 0.9624287467636128, 0.9660675347526102, 0.9634449067916855, 0.9602078762657024, 0.9536548718790635, 0.9643672951320037, 0.9643061442054186, 0.9687820612271381, 0.902566623997177, 0.8746652184749697, 0.9068523852421699, 0.9013522233041774, 0.8818195584842309, 0.900187962718799, 0.8783281231565538, 0.9227528735164452, 0.8625899580619406, 0.09052588208910872, 0.124002717146798, 0.06123896425390607, 0.08394473253443613, 0.1488069069897916, 0.11855283008123862, 0.09145130050583161, 0.06700563704546714, 0.050303129636503185, 0.13706176175258278, 0.07883124181703971, 0.11913079534151638, 0.13703822067720417, 0.08168269539918316, 0.11778869795666724, 0.12095196736151503, 0.09128577326594456, 0.10701363271538011, 0.9868881356963003, 0.9815390591998592, 0.986794476175855, 0.9743702064586314, 0.9856441851331661, 0.9868768891057558, 0.9805143371912302, 0.9764364255751069, 0.9643492325721603, 0.8854785994909045, 0.8638198733894629, 0.8964462539170978, 0.8825882948710464, 0.3559191125490939, 0.9043458757613234, 0.7114321067073044, 0.8547736405538251, 0.9056614493202182, 0.303524510821122, 0.19145276933100353, 0.2133673842984405, 0.878716197599535, 0.2620886163955254, 0.19593114948726575, 0.23280505339161417, 0.2605218035488046, 0.8473972679887052, 0.24559570774198924, 0.23517882264072143, 0.22771378216966087, 0.3171828000741166, 0.21377165153763467, 0.22582002719659955, 0.22081390244552945, 0.1378612733849679, 0.22268346028151065, 0.243752440095094, 0.20397985471249935, 0.22597317714964682, 0.2283730152327652, 0.2613338934544981, 0.21645270313249187, 0.2627057250716983, 9.999999999998899e-05, 0.2704456248794338, 0.0022769086306405617, 9.999999999998899e-05, 0.0629588756667423, 0.05038881263823225, 0.049486012811279956, 0.03214975496874162, 0.0037371784415687337, 0.08865079144052912, 9.999999999998899e-05, 0.10629005494982158, 0.08491564896816728, 0.10866569395522296, 0.034346886257284326, 0.007813768068210658, 0.03211444490597515, 0.09547375352850851, 0.08642830620887276, 0.1417413809350725, 0.1159960754344993, 0.27111631707672645, 0.29828687932345477, 0.11608257432880231, 0.08719302964596376, 0.13349202339835609, 0.10165161953092372, 0.19609893224038066, 0.08132072025260573, 0.19980514126259963, 0.08142037534533009, 0.05912017288822824, 0.11761278078036197, 0.006994008277590891, 0.1350361030860835, 0.08700583934582773, 0.08801072143287125, 0.0865009132589275, 0.5720913801650838, 0.5562439605944003, 0.5989867315820625, 0.6342990394204977, 0.5590041836515293, 0.4864994281001632, 0.5875323033880153, 0.6052984788987262, 0.5725580001579126, 0.05482110182834388, 0.07193765035558841, 0.08525817349517184, 0.07236231156684825, 0.08327413834633102, 0.09557335158033498, 0.05223905142102925, 0.08037988604951718, 0.08183032980606253, 0.17869444926263822, 0.258151475939125, 0.21626524361563715, 0.4242312276316901, 0.4784876098946851, 0.20552402765474875, 0.19862201723281836, 0.3342104596468449, 0.28368672810304985, 0.20098022181637143, 0.34907920908949075, 0.22440074904839102, 0.18753875247144403, 0.3703122865749703, 0.15449169421612985, 0.16540827010797388, 0.19562877260681966, 0.13639565824642852, 0.27075711403046043, 0.22144506165579847, 0.27139906684724935, 0.27844288045408205, 0.19106190520172295, 0.3551113445784868, 0.2112595073250686, 0.22157588357802127, 0.07940383594440459, 0.24329165975700384, 0.21670008892921877, 0.22032155863108083, 0.23050330527123253, 0.3578245988023362, 0.25058767329684783, 0.26539243949145663, 0.19976518643753793, 0.2582357242163814, 0.17578609529382283, 0.1846096870173869, 0.19830884198783394, 0.1765202025803856, 0.1915870117392312, 0.18780521316720888, 0.21110387589908042, 0.1920880437405632, 0.18405231985847037, 0.18966240521553523, 0.9599985245891225, 0.1896761491641693, 0.1740583042762135, 0.20241927458509068, 0.1151442965344529, 0.16920646602713352, 0.1682535585783166, 0.1691543614891221, 0.9454210233316079, 0.11334030503404824, 0.7501505302702385, 0.6687352134130935, 0.15695668403156837, 0.2145611834602067, 0.08345586975985353, 0.09479788925453447, 0.8272875666087596, 0.18989263297318504, 0.21195187185372044, 0.19965121261840346, 0.2070423301602723, 0.21034293246275138, 0.1920171303744459, 0.22344617961471103, 0.19809067241681022, 0.20973993589689022, 0.07796796988976462, 0.1093111516180546, 0.06784782135901368, 0.10944599033515223, 0.08326679713982466, 0.10844906151385403, 0.1433692305598212, 0.09220050776768307, 0.09159646948506073]}, "mutation_prompt": null}
{"id": "1187eed8-c20c-47f2-99da-e55026f8e03d", "solution": "import numpy as np\n\nclass EnhancedADSOStarPlusPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.4 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                perturbation = chaotic_sequence[self.iteration % len(chaotic_sequence)] * 0.2 * (self.bounds[1] - self.bounds[0])\n                for i in range(self.population_size):\n                    population[i] += np.random.normal(0, perturbation, self.dim)\n                    population[i] = np.clip(population[i], self.bounds[0], self.bounds[1])\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOStarPlusPlus", "description": "EnhancedADSOStarPlusPlus uses an adaptive chaotic perturbation strategy to escape local optima and enhance convergence diversity.", "configspace": "", "generation": 73, "fitness": 0.3042910835716356, "feedback": "The algorithm EnhancedADSOStarPlusPlus got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.29.", "error": "", "parent_id": "3675c68a-a97e-4fd9-ba3c-a850fa63f3c1", "metadata": {"aucs": [0.9705347699428433, 0.9624287467636128, 0.9660675347526102, 0.9634449067916855, 0.9602078762657024, 0.9536548718790635, 0.9643672951320037, 0.9643061442054186, 0.9687820612271381, 0.902566623997177, 0.4080480540822854, 0.9068523852421699, 0.9013522233041774, 0.7503405670192319, 0.900187962718799, 0.6180133843109517, 0.9227528735164452, 0.5891302204606865, 0.084512783495304, 0.12016435324034136, 0.07736586765308562, 0.08522998837083073, 0.12054603823764465, 0.11836485819760256, 0.09145130050583161, 0.06416081177037447, 0.05489664140882011, 0.11908253408957448, 0.08405831421714227, 0.11913079534145432, 0.1367496721021736, 0.07959735548031877, 0.10790760693735701, 0.12095196735794855, 0.06385304570638584, 0.09469486696497698, 0.9868881356963003, 0.9815390591998592, 0.986794476175855, 0.9743702064586314, 0.9856441851331661, 0.9868768891057558, 0.9805143371912302, 0.9764364255751069, 0.9626565516135339, 0.8597404313377228, 0.8131117839667299, 0.44390050935048553, 0.7640224789719041, 0.3042017522369155, 0.9043458757613234, 0.48887954574665293, 0.7480001470042601, 0.9056614493202182, 0.25998903816453256, 0.19494875855193983, 0.20279150122781187, 0.3940809711912906, 0.2761491096407206, 0.1963257159207723, 0.27406764587369836, 0.22835464532706695, 0.2544139268080118, 0.2383903186328239, 0.23511546309022746, 0.22348205559257261, 0.3140233312767047, 0.20985021710142326, 0.22445454782253305, 0.2206484216906044, 0.13771958350288516, 0.22207920913506907, 0.24299019514063014, 0.20336433066167947, 0.22508570571411746, 0.22763671267262486, 0.26130323039272785, 0.20444037580188534, 0.26267613208898055, 9.999999999998899e-05, 0.2574194376526504, 9.999999999998899e-05, 9.999999999998899e-05, 0.06290084388804029, 0.0502608341259807, 0.049473707029876635, 9.999999999998899e-05, 0.001902838653925043, 0.0737110560483416, 9.999999999998899e-05, 0.10639098656481583, 0.09493579085919124, 0.09405883209674559, 0.04789604142039916, 0.01702244963372812, 0.039323149797611534, 0.08904960099789005, 0.08271152937380788, 0.11009313027116785, 0.11599227212123608, 0.27110649917907825, 0.2982854288351001, 0.11607986849899954, 0.08719286422474548, 0.13349153412180714, 0.10164651854275597, 0.1744928608579659, 0.08132071210401026, 0.19965900335346054, 0.0814203533723552, 0.055082060924791065, 0.11761278071949033, 0.012424842484413778, 0.13503609265928584, 0.08700583933895945, 0.08800719810092217, 0.0865009060184484, 0.5641936965442089, 0.5560565748324142, 0.5551577196909074, 0.6334290467411272, 0.5443404683968431, 0.4160543107283091, 0.5445364022159358, 0.5264184284064484, 0.5705446110713568, 0.0563545511959439, 0.0747358930896691, 0.08038282738804048, 0.07435040241808433, 0.07819678431832633, 0.10386311836558837, 0.056082874752562795, 0.0763438567677831, 0.0940131536446357, 0.17289178862900956, 0.2590380786311919, 0.23100098187948648, 0.4204951987615819, 0.4784869770951863, 0.1654668049325504, 0.13820968440785142, 0.27497387898553394, 0.26066826626281514, 0.1889502093441352, 0.34902785348876175, 0.2313682254716145, 0.1862835108015355, 0.31816169230986413, 0.2139885393343599, 0.18396655553829588, 0.1951586972556868, 0.15890809897633373, 0.26939623679784463, 0.2099458459343494, 0.2369928329004357, 0.14311793569206654, 0.19090649574828678, 0.3293488811959716, 0.2112321510884717, 0.2214081799724784, 0.12081839044134157, 0.2366889864166033, 0.21230890457729856, 0.22869054349140383, 0.22602974656327957, 0.23995235472766718, 0.22200207546684392, 0.21852422241641156, 0.2161911275852828, 0.22868104490728314, 0.18318644420833885, 0.1805698963235578, 0.18642199731211695, 0.17705326356553874, 0.18802320916322768, 0.18226522696522618, 0.2102020721487513, 0.20380208990628013, 0.19382078615446086, 0.18966240521553523, 0.9599985245891225, 0.1896761491641693, 0.1920066171347945, 0.20241927458509068, 0.11784693592790385, 0.16920646602713352, 0.1682535585783166, 0.1691543614891221, 0.9400178129690482, 0.11334029573826665, 0.5795550458546825, 0.6228277911863918, 0.15695668403112562, 0.2145611834602067, 0.08318942434969323, 0.12982721411843445, 0.558561584261841, 0.17524449588698698, 0.178731260859206, 0.18770356268254984, 0.18181921867712214, 0.18336234393916262, 0.19022596271944703, 0.20394036895990697, 0.19157149977492072, 0.17954240430951018, 0.07431413558111999, 0.10485216984474044, 0.06480547274774762, 0.10944598469750522, 0.08556886700437005, 0.10792185913794694, 0.14311327398078433, 0.08945919683703363, 0.09477939137740099]}, "mutation_prompt": null}
{"id": "adc9c6cb-b67b-496c-be6d-6f9dc23858cd", "solution": "import numpy as np\n\nclass EnhancedADSOStarPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.4 * chaotic_sequence[self.iteration % len(chaotic_sequence)]  # Slightly adjusted\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                for group in np.array_split(np.random.permutation(self.population_size), 2):\n                    group_best_index = group[np.argmin(personal_best_values[group])]\n                    for i in group:\n                        if i != group_best_index:\n                            neighborhood_radius = 0.1 * (self.bounds[1] - self.bounds[0])  # Added neighborhood search\n                            population[i] = np.clip(population[group_best_index] + \n                                                    np.random.uniform(-neighborhood_radius, neighborhood_radius, self.dim), \n                                                    self.bounds[0], self.bounds[1])\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOStarPlus", "description": "EnhancedADSOStarPlus leverages adaptive inertia with a dynamic neighborhood search to improve convergence speed and accuracy.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3675c68a-a97e-4fd9-ba3c-a850fa63f3c1", "metadata": {"aucs": [0.9705347699428433, 0.9624287467636128, 0.9660675347526102, 0.9634449067916855, 0.9602078762657024, 0.9536548718790635, 0.9643672951320037, 0.9643061442054186, 0.9687820612271381, 0.902566623997177, 0.8746652184749697, 0.9068523852421699, 0.9013522233041774, 0.8818195584842309, 0.900187962718799, 0.8783281231565538, 0.9227528735164452, 0.8625899580619406, 0.09052588208910872, 0.124002717146798, 0.06123896425390607, 0.08394473253443613, 0.1488069069897916, 0.11855283008123862, 0.09145130050583161, 0.06700563704546714, 0.050303129636503185, 0.13706176175258278, 0.07883124181703971, 0.11913079534151638, 0.13703822067720417, 0.08168269539918316, 0.11778869795666724, 0.12095196736151503, 0.09128577326594456, 0.10701363271538011, 0.9868881356963003, 0.9815390591998592, 0.986794476175855, 0.9743702064586314, 0.9856441851331661, 0.9868768891057558, 0.9805143371912302, 0.9764364255751069, 0.9643492325721603, 0.8854785994909045, 0.8638198733894629, 0.8964462539170978, 0.8825882948710464, 0.3559191125490939, 0.9043458757613234, 0.7114321067073044, 0.8547736405538251, 0.9056614493202182, 0.303524510821122, 0.19145276933100353, 0.2133673842984405, 0.878716197599535, 0.2620886163955254, 0.19593114948726575, 0.23280505339161417, 0.2605218035488046, 0.8473972679887052, 0.24559570774198924, 0.23517882264072143, 0.22771378216966087, 0.3171828000741166, 0.21377165153763467, 0.22582002719659955, 0.22081390244552945, 0.1378612733849679, 0.22268346028151065, 0.243752440095094, 0.20397985471249935, 0.22597317714964682, 0.2283730152327652, 0.2613338934544981, 0.21645270313249187, 0.2627057250716983, 9.999999999998899e-05, 0.2704456248794338, 0.0022769086306405617, 9.999999999998899e-05, 0.0629588756667423, 0.05038881263823225, 0.049486012811279956, 0.03214975496874162, 0.0037371784415687337, 0.08865079144052912, 9.999999999998899e-05, 0.10629005494982158, 0.08491564896816728, 0.10866569395522296, 0.034346886257284326, 0.007813768068210658, 0.03211444490597515, 0.09547375352850851, 0.08642830620887276, 0.1417413809350725, 0.1159960754344993, 0.27111631707672645, 0.29828687932345477, 0.11608257432880231, 0.08719302964596376, 0.13349202339835609, 0.10165161953092372, 0.19609893224038066, 0.08132072025260573, 0.19980514126259963, 0.08142037534533009, 0.05912017288822824, 0.11761278078036197, 0.006994008277590891, 0.1350361030860835, 0.08700583934582773, 0.08801072143287125, 0.0865009132589275, 0.5720913801650838, 0.5562439605944003, 0.5989867315820625, 0.6342990394204977, 0.5590041836515293, 0.4864994281001632, 0.5875323033880153, 0.6052984788987262, 0.5725580001579126, 0.05482110182834388, 0.07193765035558841, 0.08525817349517184, 0.07236231156684825, 0.08327413834633102, 0.09557335158033498, 0.05223905142102925, 0.08037988604951718, 0.08183032980606253, 0.17869444926263822, 0.258151475939125, 0.21626524361563715, 0.4242312276316901, 0.4784876098946851, 0.20552402765474875, 0.19862201723281836, 0.3342104596468449, 0.28368672810304985, 0.20098022181637143, 0.34907920908949075, 0.22440074904839102, 0.18753875247144403, 0.3703122865749703, 0.15449169421612985, 0.16540827010797388, 0.19562877260681966, 0.13639565824642852, 0.27075711403046043, 0.22144506165579847, 0.27139906684724935, 0.27844288045408205, 0.19106190520172295, 0.3551113445784868, 0.2112595073250686, 0.22157588357802127, 0.07940383594440459, 0.24329165975700384, 0.21670008892921877, 0.22032155863108083, 0.23050330527123253, 0.3578245988023362, 0.25058767329684783, 0.26539243949145663, 0.19976518643753793, 0.2582357242163814, 0.17578609529382283, 0.1846096870173869, 0.19830884198783394, 0.1765202025803856, 0.1915870117392312, 0.18780521316720888, 0.21110387589908042, 0.1920880437405632, 0.18405231985847037, 0.18966240521553523, 0.9599985245891225, 0.1896761491641693, 0.1740583042762135, 0.20241927458509068, 0.1151442965344529, 0.16920646602713352, 0.1682535585783166, 0.1691543614891221, 0.9454210233316079, 0.11334030503404824, 0.7501505302702385, 0.6687352134130935, 0.15695668403156837, 0.2145611834602067, 0.08345586975985353, 0.09479788925453447, 0.8272875666087596, 0.18989263297318504, 0.21195187185372044, 0.19965121261840346, 0.2070423301602723, 0.21034293246275138, 0.1920171303744459, 0.22344617961471103, 0.19809067241681022, 0.20973993589689022, 0.07796796988976462, 0.1093111516180546, 0.06784782135901368, 0.10944599033515223, 0.08326679713982466, 0.10844906151385403, 0.1433692305598212, 0.09220050776768307, 0.09159646948506073]}, "mutation_prompt": null}
{"id": "61d4a5aa-fd42-4737-b431-1bca162df03a", "solution": "import numpy as np\n\nclass EnhancedADSOStarPlusV2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.4 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                for group in np.array_split(np.random.permutation(self.population_size), 2):\n                    elite_index = group[np.argmin(personal_best_values[group])]\n                    for i in group:\n                        if i != elite_index:\n                            neighborhood_radius = 0.1 * (1 + stagnation_counter / 10) * (self.bounds[1] - self.bounds[0])\n                            population[i] = np.clip(population[elite_index] + \n                                                    np.random.uniform(-neighborhood_radius, neighborhood_radius, self.dim), \n                                                    self.bounds[0], self.bounds[1])\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOStarPlusV2", "description": "EnhancedADSOStarPlusV2 introduces variable neighborhood sizes and elite learning to improve convergence and escape local optima.", "configspace": "", "generation": 75, "fitness": 0.3237378515835258, "feedback": "The algorithm EnhancedADSOStarPlusV2 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.32 with standard deviation 0.31.", "error": "", "parent_id": "3675c68a-a97e-4fd9-ba3c-a850fa63f3c1", "metadata": {"aucs": [0.9705347699428433, 0.9624287467636128, 0.9660675347526102, 0.9634449067916855, 0.9602078762657024, 0.9536548718790635, 0.9643672951320037, 0.9643061442054186, 0.9687820612271381, 0.902566623997177, 0.8447570696147977, 0.9068523852421699, 0.9013522233041774, 0.8818101652797349, 0.900187962718799, 0.8827977361853686, 0.9227528735164452, 0.8622986961386868, 0.084512783495304, 0.12033705822292651, 0.0697175868921941, 0.10341218627560733, 0.12054603823764465, 0.11480140443249331, 0.09145130050583161, 0.08063594893323411, 0.10731415572665759, 0.11905692858197836, 0.07883124181703971, 0.11913079534151638, 0.13709325180290455, 0.05961327997127741, 0.10790760693735701, 0.12095196736149882, 0.11159345143297827, 0.11080942768252366, 0.9868881356963003, 0.9815390591998592, 0.986794476175855, 0.9743702064586314, 0.9856441851331661, 0.9868768891057558, 0.9805143371912302, 0.9764364255751069, 0.9215635784232509, 0.8854785994909045, 0.8638198733894629, 0.7910624988262078, 0.9025289349364047, 0.3469073401593148, 0.9043458757613234, 0.6964272698849835, 0.7975716036348534, 0.9056614493202182, 0.33572844469048335, 0.21295294246315055, 0.28274491960840564, 0.8465549807858679, 0.2694250141589436, 0.22103153257861796, 0.24786547426452354, 0.2754827554333483, 0.3035893507194448, 0.24872765088076831, 0.23517882264072143, 0.22648300290852963, 0.3209780155025881, 0.21485569386382541, 0.23295415185917523, 0.22081390244552945, 0.13786796922439803, 0.22268346028151065, 0.24335071281555076, 0.20375288895616572, 0.2260929218265515, 0.22813402769620805, 0.2613338934544981, 0.21562236308337457, 0.2627057250716983, 9.999999999998899e-05, 0.26719817281792124, 0.018781299729597745, 0.0022004240214636983, 0.0629588756667423, 0.05044991726345305, 0.049486012811279956, 9.999999999998899e-05, 0.0033582468239703456, 0.08274645274844972, 9.999999999998899e-05, 0.09349836030823477, 0.08744673725821572, 0.10704743609716405, 0.033842435058768605, 0.007908609759532337, 0.042080377166645144, 0.11530577394004371, 0.06154442113301761, 0.10709323546944793, 0.1159960754344993, 0.2711168474362484, 0.29828687932345477, 0.11608206220227912, 0.08719302964598974, 0.13349202339835609, 0.10164735061585883, 0.19603030948725697, 0.08132072025423254, 0.19980389984109248, 0.08142037534533009, 0.05508219226048949, 0.11761278078036197, 0.006994008274788577, 0.13503610303935543, 0.08700583934582773, 0.08801073977823437, 0.08650091332276566, 0.5656395273984152, 0.5562439605944003, 0.5797531383790797, 0.6342990394204977, 0.5457148236861191, 0.5104500539415517, 0.5590099670379527, 0.5662723603163018, 0.5773235796416789, 0.05063608264568298, 0.07787733017282739, 0.07016007948161695, 0.07236231156684825, 0.08883028394112225, 0.0952482186622825, 0.05709695270106874, 0.08141640515717952, 0.08183032980606253, 0.1801619733605052, 0.3112984564993311, 0.22434423863285236, 0.42520892606496197, 0.4784876098946851, 0.1585060730039195, 0.2031597782930843, 0.2806426511069384, 0.278442715660971, 0.2015662025286481, 0.34907920908949075, 0.20344963862177934, 0.23776818279211498, 0.3793929866644744, 0.19674986455493892, 0.16702845745492778, 0.19635230593804376, 0.136765245028444, 0.27058021295841095, 0.2408326274740028, 0.26581931896229816, 0.16646407082288328, 0.19105870010199177, 0.33070776314179395, 0.21132425464578342, 0.22162805819132025, 0.07723818325856013, 0.22678054722114416, 0.23766737656296033, 0.2521181391410141, 0.2534932024896911, 0.5568264347678511, 0.24013786144843663, 0.25844383981016206, 0.22671279138346923, 0.2582357242163814, 0.18637019720927506, 0.1907997991935113, 0.18642199731211695, 0.17652079527307218, 0.18238280876132174, 0.17748573703672121, 0.21110640030506678, 0.19011882636979083, 0.18088310242790961, 0.18966240521553523, 0.9599985245891225, 0.1896761491641693, 0.1740583042762135, 0.20241927458509068, 0.1151442965344529, 0.16920646602713352, 0.1682535585783166, 0.1691543614891221, 0.9454210233316079, 0.11334030503404824, 0.7084998924750062, 0.6657957839990991, 0.15695668403156837, 0.2145611834602067, 0.08335750834834654, 0.09479788925452981, 0.8650293541647429, 0.18711099611677373, 0.17915176543015132, 0.19590608683008903, 0.23074415412494054, 0.20435203284365455, 0.19656413771022696, 0.1868546125123245, 0.18961521048565533, 0.20589852794776375, 0.07797862358640195, 0.10832143538889982, 0.05599626738950425, 0.10944599033515223, 0.08440136349316818, 0.11605616301905042, 0.14335120344450736, 0.08040529117599182, 0.08305473537579544]}, "mutation_prompt": null}
{"id": "b62b3535-56ae-46a3-a37d-d10a86d52ad1", "solution": "import numpy as np\n\nclass EnhancedADSOStarPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.4 * chaotic_sequence[self.iteration % len(chaotic_sequence)]  # Slightly adjusted\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                for group in np.array_split(np.random.permutation(self.population_size), 2):\n                    group_best_index = group[np.argmin(personal_best_values[group])]\n                    for i in group:\n                        if i != group_best_index:\n                            neighborhood_radius = 0.1 * (self.bounds[1] - self.bounds[0])  # Added neighborhood search\n                            population[i] = np.clip(population[group_best_index] + \n                                                    np.random.uniform(-neighborhood_radius, neighborhood_radius, self.dim), \n                                                    self.bounds[0], self.bounds[1])\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOStarPlus", "description": "EnhancedADSOStarPlus leverages adaptive inertia with a dynamic neighborhood search to improve convergence speed and accuracy.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3675c68a-a97e-4fd9-ba3c-a850fa63f3c1", "metadata": {"aucs": [0.9705347699428433, 0.9624287467636128, 0.9660675347526102, 0.9634449067916855, 0.9602078762657024, 0.9536548718790635, 0.9643672951320037, 0.9643061442054186, 0.9687820612271381, 0.902566623997177, 0.8746652184749697, 0.9068523852421699, 0.9013522233041774, 0.8818195584842309, 0.900187962718799, 0.8783281231565538, 0.9227528735164452, 0.8625899580619406, 0.09052588208910872, 0.124002717146798, 0.06123896425390607, 0.08394473253443613, 0.1488069069897916, 0.11855283008123862, 0.09145130050583161, 0.06700563704546714, 0.050303129636503185, 0.13706176175258278, 0.07883124181703971, 0.11913079534151638, 0.13703822067720417, 0.08168269539918316, 0.11778869795666724, 0.12095196736151503, 0.09128577326594456, 0.10701363271538011, 0.9868881356963003, 0.9815390591998592, 0.986794476175855, 0.9743702064586314, 0.9856441851331661, 0.9868768891057558, 0.9805143371912302, 0.9764364255751069, 0.9643492325721603, 0.8854785994909045, 0.8638198733894629, 0.8964462539170978, 0.8825882948710464, 0.3559191125490939, 0.9043458757613234, 0.7114321067073044, 0.8547736405538251, 0.9056614493202182, 0.303524510821122, 0.19145276933100353, 0.2133673842984405, 0.878716197599535, 0.2620886163955254, 0.19593114948726575, 0.23280505339161417, 0.2605218035488046, 0.8473972679887052, 0.24559570774198924, 0.23517882264072143, 0.22771378216966087, 0.3171828000741166, 0.21377165153763467, 0.22582002719659955, 0.22081390244552945, 0.1378612733849679, 0.22268346028151065, 0.243752440095094, 0.20397985471249935, 0.22597317714964682, 0.2283730152327652, 0.2613338934544981, 0.21645270313249187, 0.2627057250716983, 9.999999999998899e-05, 0.2704456248794338, 0.0022769086306405617, 9.999999999998899e-05, 0.0629588756667423, 0.05038881263823225, 0.049486012811279956, 0.03214975496874162, 0.0037371784415687337, 0.08865079144052912, 9.999999999998899e-05, 0.10629005494982158, 0.08491564896816728, 0.10866569395522296, 0.034346886257284326, 0.007813768068210658, 0.03211444490597515, 0.09547375352850851, 0.08642830620887276, 0.1417413809350725, 0.1159960754344993, 0.27111631707672645, 0.29828687932345477, 0.11608257432880231, 0.08719302964596376, 0.13349202339835609, 0.10165161953092372, 0.19609893224038066, 0.08132072025260573, 0.19980514126259963, 0.08142037534533009, 0.05912017288822824, 0.11761278078036197, 0.006994008277590891, 0.1350361030860835, 0.08700583934582773, 0.08801072143287125, 0.0865009132589275, 0.5720913801650838, 0.5562439605944003, 0.5989867315820625, 0.6342990394204977, 0.5590041836515293, 0.4864994281001632, 0.5875323033880153, 0.6052984788987262, 0.5725580001579126, 0.05482110182834388, 0.07193765035558841, 0.08525817349517184, 0.07236231156684825, 0.08327413834633102, 0.09557335158033498, 0.05223905142102925, 0.08037988604951718, 0.08183032980606253, 0.17869444926263822, 0.258151475939125, 0.21626524361563715, 0.4242312276316901, 0.4784876098946851, 0.20552402765474875, 0.19862201723281836, 0.3342104596468449, 0.28368672810304985, 0.20098022181637143, 0.34907920908949075, 0.22440074904839102, 0.18753875247144403, 0.3703122865749703, 0.15449169421612985, 0.16540827010797388, 0.19562877260681966, 0.13639565824642852, 0.27075711403046043, 0.22144506165579847, 0.27139906684724935, 0.27844288045408205, 0.19106190520172295, 0.3551113445784868, 0.2112595073250686, 0.22157588357802127, 0.07940383594440459, 0.24329165975700384, 0.21670008892921877, 0.22032155863108083, 0.23050330527123253, 0.3578245988023362, 0.25058767329684783, 0.26539243949145663, 0.19976518643753793, 0.2582357242163814, 0.17578609529382283, 0.1846096870173869, 0.19830884198783394, 0.1765202025803856, 0.1915870117392312, 0.18780521316720888, 0.21110387589908042, 0.1920880437405632, 0.18405231985847037, 0.18966240521553523, 0.9599985245891225, 0.1896761491641693, 0.1740583042762135, 0.20241927458509068, 0.1151442965344529, 0.16920646602713352, 0.1682535585783166, 0.1691543614891221, 0.9454210233316079, 0.11334030503404824, 0.7501505302702385, 0.6687352134130935, 0.15695668403156837, 0.2145611834602067, 0.08345586975985353, 0.09479788925453447, 0.8272875666087596, 0.18989263297318504, 0.21195187185372044, 0.19965121261840346, 0.2070423301602723, 0.21034293246275138, 0.1920171303744459, 0.22344617961471103, 0.19809067241681022, 0.20973993589689022, 0.07796796988976462, 0.1093111516180546, 0.06784782135901368, 0.10944599033515223, 0.08326679713982466, 0.10844906151385403, 0.1433692305598212, 0.09220050776768307, 0.09159646948506073]}, "mutation_prompt": null}
{"id": "469a0068-7156-417c-a379-d9b7fa129118", "solution": "import numpy as np\n\nclass EnhancedADSOStarPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.4 * chaotic_sequence[self.iteration % len(chaotic_sequence)]  # Slightly adjusted\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                for group in np.array_split(np.random.permutation(self.population_size), 2):\n                    group_best_index = group[np.argmin(personal_best_values[group])]\n                    for i in group:\n                        if i != group_best_index:\n                            neighborhood_radius = 0.1 * (self.bounds[1] - self.bounds[0])  # Added neighborhood search\n                            population[i] = np.clip(population[group_best_index] + \n                                                    np.random.uniform(-neighborhood_radius, neighborhood_radius, self.dim), \n                                                    self.bounds[0], self.bounds[1])\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOStarPlus", "description": "EnhancedADSOStarPlus leverages adaptive inertia with a dynamic neighborhood search to improve convergence speed and accuracy.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3675c68a-a97e-4fd9-ba3c-a850fa63f3c1", "metadata": {"aucs": [0.9705347699428433, 0.9624287467636128, 0.9660675347526102, 0.9634449067916855, 0.9602078762657024, 0.9536548718790635, 0.9643672951320037, 0.9643061442054186, 0.9687820612271381, 0.902566623997177, 0.8746652184749697, 0.9068523852421699, 0.9013522233041774, 0.8818195584842309, 0.900187962718799, 0.8783281231565538, 0.9227528735164452, 0.8625899580619406, 0.09052588208910872, 0.124002717146798, 0.06123896425390607, 0.08394473253443613, 0.1488069069897916, 0.11855283008123862, 0.09145130050583161, 0.06700563704546714, 0.050303129636503185, 0.13706176175258278, 0.07883124181703971, 0.11913079534151638, 0.13703822067720417, 0.08168269539918316, 0.11778869795666724, 0.12095196736151503, 0.09128577326594456, 0.10701363271538011, 0.9868881356963003, 0.9815390591998592, 0.986794476175855, 0.9743702064586314, 0.9856441851331661, 0.9868768891057558, 0.9805143371912302, 0.9764364255751069, 0.9643492325721603, 0.8854785994909045, 0.8638198733894629, 0.8964462539170978, 0.8825882948710464, 0.3559191125490939, 0.9043458757613234, 0.7114321067073044, 0.8547736405538251, 0.9056614493202182, 0.303524510821122, 0.19145276933100353, 0.2133673842984405, 0.878716197599535, 0.2620886163955254, 0.19593114948726575, 0.23280505339161417, 0.2605218035488046, 0.8473972679887052, 0.24559570774198924, 0.23517882264072143, 0.22771378216966087, 0.3171828000741166, 0.21377165153763467, 0.22582002719659955, 0.22081390244552945, 0.1378612733849679, 0.22268346028151065, 0.243752440095094, 0.20397985471249935, 0.22597317714964682, 0.2283730152327652, 0.2613338934544981, 0.21645270313249187, 0.2627057250716983, 9.999999999998899e-05, 0.2704456248794338, 0.0022769086306405617, 9.999999999998899e-05, 0.0629588756667423, 0.05038881263823225, 0.049486012811279956, 0.03214975496874162, 0.0037371784415687337, 0.08865079144052912, 9.999999999998899e-05, 0.10629005494982158, 0.08491564896816728, 0.10866569395522296, 0.034346886257284326, 0.007813768068210658, 0.03211444490597515, 0.09547375352850851, 0.08642830620887276, 0.1417413809350725, 0.1159960754344993, 0.27111631707672645, 0.29828687932345477, 0.11608257432880231, 0.08719302964596376, 0.13349202339835609, 0.10165161953092372, 0.19609893224038066, 0.08132072025260573, 0.19980514126259963, 0.08142037534533009, 0.05912017288822824, 0.11761278078036197, 0.006994008277590891, 0.1350361030860835, 0.08700583934582773, 0.08801072143287125, 0.0865009132589275, 0.5720913801650838, 0.5562439605944003, 0.5989867315820625, 0.6342990394204977, 0.5590041836515293, 0.4864994281001632, 0.5875323033880153, 0.6052984788987262, 0.5725580001579126, 0.05482110182834388, 0.07193765035558841, 0.08525817349517184, 0.07236231156684825, 0.08327413834633102, 0.09557335158033498, 0.05223905142102925, 0.08037988604951718, 0.08183032980606253, 0.17869444926263822, 0.258151475939125, 0.21626524361563715, 0.4242312276316901, 0.4784876098946851, 0.20552402765474875, 0.19862201723281836, 0.3342104596468449, 0.28368672810304985, 0.20098022181637143, 0.34907920908949075, 0.22440074904839102, 0.18753875247144403, 0.3703122865749703, 0.15449169421612985, 0.16540827010797388, 0.19562877260681966, 0.13639565824642852, 0.27075711403046043, 0.22144506165579847, 0.27139906684724935, 0.27844288045408205, 0.19106190520172295, 0.3551113445784868, 0.2112595073250686, 0.22157588357802127, 0.07940383594440459, 0.24329165975700384, 0.21670008892921877, 0.22032155863108083, 0.23050330527123253, 0.3578245988023362, 0.25058767329684783, 0.26539243949145663, 0.19976518643753793, 0.2582357242163814, 0.17578609529382283, 0.1846096870173869, 0.19830884198783394, 0.1765202025803856, 0.1915870117392312, 0.18780521316720888, 0.21110387589908042, 0.1920880437405632, 0.18405231985847037, 0.18966240521553523, 0.9599985245891225, 0.1896761491641693, 0.1740583042762135, 0.20241927458509068, 0.1151442965344529, 0.16920646602713352, 0.1682535585783166, 0.1691543614891221, 0.9454210233316079, 0.11334030503404824, 0.7501505302702385, 0.6687352134130935, 0.15695668403156837, 0.2145611834602067, 0.08345586975985353, 0.09479788925453447, 0.8272875666087596, 0.18989263297318504, 0.21195187185372044, 0.19965121261840346, 0.2070423301602723, 0.21034293246275138, 0.1920171303744459, 0.22344617961471103, 0.19809067241681022, 0.20973993589689022, 0.07796796988976462, 0.1093111516180546, 0.06784782135901368, 0.10944599033515223, 0.08326679713982466, 0.10844906151385403, 0.1433692305598212, 0.09220050776768307, 0.09159646948506073]}, "mutation_prompt": null}
{"id": "6f987b94-a37b-4301-9af7-71224c26ab83", "solution": "import numpy as np\n\nclass EnhancedADSOStarPlusV2:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n        self.mutation_factor = 0.5  # New differential variation factor\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.4 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                \n                # Differential variation mechanism\n                rand_indices = np.random.choice(self.population_size, 3, replace=False)\n                mutant_vector = (personal_best_positions[rand_indices[0]] + \n                                 self.mutation_factor * (personal_best_positions[rand_indices[1]] - personal_best_positions[rand_indices[2]]))\n                mutant_vector = np.clip(mutant_vector, self.bounds[0], self.bounds[1])\n\n                population[i] = np.clip(population[i] + velocities[i] + mutant_vector, self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                for group in np.array_split(np.random.permutation(self.population_size), 2):\n                    group_best_index = group[np.argmin(personal_best_values[group])]\n                    for i in group:\n                        if i != group_best_index:\n                            neighborhood_radius = 0.1 * (self.bounds[1] - self.bounds[0])\n                            population[i] = np.clip(population[group_best_index] +\n                                                    np.random.uniform(-neighborhood_radius, neighborhood_radius, self.dim),\n                                                    self.bounds[0], self.bounds[1])\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOStarPlusV2", "description": "EnhancedADSOStarPlusV2 incorporates a differential variation mechanism to diversify exploration and mitigate premature convergence.", "configspace": "", "generation": 78, "fitness": 0.070426447811753, "feedback": "The algorithm EnhancedADSOStarPlusV2 got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.07 with standard deviation 0.15.", "error": "", "parent_id": "3675c68a-a97e-4fd9-ba3c-a850fa63f3c1", "metadata": {"aucs": [0.08242058642690697, 0.06799663702963266, 0.1423130260510963, 0.11310077299969634, 0.11065148665323854, 0.06688810694264102, 0.10395148855432834, 0.10274328916930264, 0.08182438944916537, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01467079663371329, 9.999999999998899e-05, 0.0022101524003743656, 0.0012186513362246743, 9.999999999998899e-05, 0.018248263482334326, 0.0031382595048966566, 0.027627428482853822, 0.039918088470807356, 9.999999999998899e-05, 9.999999999998899e-05, 0.01959972157639278, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.9974583977585944, 0.9966692330092896, 0.09441327201718452, 0.9896827514195258, 0.1004590819646628, 0.9959776413266661, 0.09917879581341404, 0.9968232024776007, 0.09987777336997983, 0.038241014239599136, 0.03868298429691419, 9.999999999998899e-05, 0.006271132537772228, 0.00031549654350837564, 9.999999999998899e-05, 0.02890876163742273, 0.015696728914358804, 9.999999999998899e-05, 0.10027683525177622, 0.03775594762470191, 0.006487473152022916, 0.03491761053608189, 0.04674539742121908, 0.09990931379177093, 0.04581893175367624, 0.0014986753235447514, 0.08445859950830437, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.00786640791783233, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.015962284083691713, 9.999999999998899e-05, 0.016466654063050368, 0.001697200851968561, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12165302277750323, 0.13075710585849798, 0.24414501893615537, 0.10793162908851095, 0.12159960107619738, 0.09580441870675127, 0.16075329261832105, 0.10371974315466326, 0.1210557193025883, 0.017310816901266457, 0.00977445976837188, 9.999999999998899e-05, 0.006101769545772684, 0.005014693063001285, 0.01759993274736349, 9.999999999998899e-05, 0.015427205802997612, 0.0267656688986897, 0.0875319424795401, 0.10852772958929668, 0.10570403460430589, 0.10368419663038453, 0.10790919398619048, 0.08669655724025815, 0.1015127452369019, 0.12125697458249873, 0.0960560938644257, 0.11487588851194419, 0.11169464711525745, 0.10611630707863073, 0.15990097362192357, 0.1294909285099246, 0.11206550239634139, 0.11420206329748472, 0.10497583209899963, 0.09813252452414234, 0.06585410412442783, 0.0660264739245, 0.06269508977571292, 0.07110297446810054, 0.07567127068029333, 0.05473358512107074, 0.07013859051259497, 0.05715117342956255, 0.06437562400212826, 0.0916346253723066, 0.09902691002325459, 0.11535722902847734, 0.10289055837941885, 0.11731821381349905, 0.09018662155683144, 0.12245976138762271, 0.09998730322833871, 0.1261963614278906, 0.02764706487768509, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.16378112519020727, 0.10917729321022673, 0.16046830655471855, 0.0979782672691093, 0.12155765687266906, 0.07581964851916123, 0.07627843790597, 0.07398002971505013, 0.0678441712764376, 0.05927864472697586, 0.08418281588472454, 0.030406275709895958, 0.05668023915046927, 0.05707599737063396, 0.045511073114331335, 0.08998621967458964, 0.05434402314685227, 0.16939072924813736, 0.17167999910027554, 0.17222003375984418, 0.1838012109877688, 0.1512827137257915, 0.1778271700448315, 0.19545179042955707, 0.12372681415004483, 0.16355836173924532, 0.1823142584713665, 0.025547301351740992, 0.03166232675752634, 0.03633082598945547, 0.02431778111783567, 0.0058749879062220955, 0.016409999801067165, 0.02157479799426132, 0.0437818157944907, 0.029569071158603744]}, "mutation_prompt": null}
{"id": "57163eb1-8b68-4ad8-be55-25d3724e724b", "solution": "import numpy as np\n\nclass EnhancedADSOStarPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.4 * chaotic_sequence[self.iteration % len(chaotic_sequence)]  # Slightly adjusted\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                for group in np.array_split(np.random.permutation(self.population_size), 2):\n                    group_best_index = group[np.argmin(personal_best_values[group])]\n                    for i in group:\n                        if i != group_best_index:\n                            neighborhood_radius = 0.1 * (self.bounds[1] - self.bounds[0])  # Added neighborhood search\n                            population[i] = np.clip(population[group_best_index] + \n                                                    np.random.uniform(-neighborhood_radius, neighborhood_radius, self.dim), \n                                                    self.bounds[0], self.bounds[1])\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOStarPlus", "description": "EnhancedADSOStarPlus leverages adaptive inertia with a dynamic neighborhood search to improve convergence speed and accuracy.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3675c68a-a97e-4fd9-ba3c-a850fa63f3c1", "metadata": {"aucs": [0.9705347699428433, 0.9624287467636128, 0.9660675347526102, 0.9634449067916855, 0.9602078762657024, 0.9536548718790635, 0.9643672951320037, 0.9643061442054186, 0.9687820612271381, 0.902566623997177, 0.8746652184749697, 0.9068523852421699, 0.9013522233041774, 0.8818195584842309, 0.900187962718799, 0.8783281231565538, 0.9227528735164452, 0.8625899580619406, 0.09052588208910872, 0.124002717146798, 0.06123896425390607, 0.08394473253443613, 0.1488069069897916, 0.11855283008123862, 0.09145130050583161, 0.06700563704546714, 0.050303129636503185, 0.13706176175258278, 0.07883124181703971, 0.11913079534151638, 0.13703822067720417, 0.08168269539918316, 0.11778869795666724, 0.12095196736151503, 0.09128577326594456, 0.10701363271538011, 0.9868881356963003, 0.9815390591998592, 0.986794476175855, 0.9743702064586314, 0.9856441851331661, 0.9868768891057558, 0.9805143371912302, 0.9764364255751069, 0.9643492325721603, 0.8854785994909045, 0.8638198733894629, 0.8964462539170978, 0.8825882948710464, 0.3559191125490939, 0.9043458757613234, 0.7114321067073044, 0.8547736405538251, 0.9056614493202182, 0.303524510821122, 0.19145276933100353, 0.2133673842984405, 0.878716197599535, 0.2620886163955254, 0.19593114948726575, 0.23280505339161417, 0.2605218035488046, 0.8473972679887052, 0.24559570774198924, 0.23517882264072143, 0.22771378216966087, 0.3171828000741166, 0.21377165153763467, 0.22582002719659955, 0.22081390244552945, 0.1378612733849679, 0.22268346028151065, 0.243752440095094, 0.20397985471249935, 0.22597317714964682, 0.2283730152327652, 0.2613338934544981, 0.21645270313249187, 0.2627057250716983, 9.999999999998899e-05, 0.2704456248794338, 0.0022769086306405617, 9.999999999998899e-05, 0.0629588756667423, 0.05038881263823225, 0.049486012811279956, 0.03214975496874162, 0.0037371784415687337, 0.08865079144052912, 9.999999999998899e-05, 0.10629005494982158, 0.08491564896816728, 0.10866569395522296, 0.034346886257284326, 0.007813768068210658, 0.03211444490597515, 0.09547375352850851, 0.08642830620887276, 0.1417413809350725, 0.1159960754344993, 0.27111631707672645, 0.29828687932345477, 0.11608257432880231, 0.08719302964596376, 0.13349202339835609, 0.10165161953092372, 0.19609893224038066, 0.08132072025260573, 0.19980514126259963, 0.08142037534533009, 0.05912017288822824, 0.11761278078036197, 0.006994008277590891, 0.1350361030860835, 0.08700583934582773, 0.08801072143287125, 0.0865009132589275, 0.5720913801650838, 0.5562439605944003, 0.5989867315820625, 0.6342990394204977, 0.5590041836515293, 0.4864994281001632, 0.5875323033880153, 0.6052984788987262, 0.5725580001579126, 0.05482110182834388, 0.07193765035558841, 0.08525817349517184, 0.07236231156684825, 0.08327413834633102, 0.09557335158033498, 0.05223905142102925, 0.08037988604951718, 0.08183032980606253, 0.17869444926263822, 0.258151475939125, 0.21626524361563715, 0.4242312276316901, 0.4784876098946851, 0.20552402765474875, 0.19862201723281836, 0.3342104596468449, 0.28368672810304985, 0.20098022181637143, 0.34907920908949075, 0.22440074904839102, 0.18753875247144403, 0.3703122865749703, 0.15449169421612985, 0.16540827010797388, 0.19562877260681966, 0.13639565824642852, 0.27075711403046043, 0.22144506165579847, 0.27139906684724935, 0.27844288045408205, 0.19106190520172295, 0.3551113445784868, 0.2112595073250686, 0.22157588357802127, 0.07940383594440459, 0.24329165975700384, 0.21670008892921877, 0.22032155863108083, 0.23050330527123253, 0.3578245988023362, 0.25058767329684783, 0.26539243949145663, 0.19976518643753793, 0.2582357242163814, 0.17578609529382283, 0.1846096870173869, 0.19830884198783394, 0.1765202025803856, 0.1915870117392312, 0.18780521316720888, 0.21110387589908042, 0.1920880437405632, 0.18405231985847037, 0.18966240521553523, 0.9599985245891225, 0.1896761491641693, 0.1740583042762135, 0.20241927458509068, 0.1151442965344529, 0.16920646602713352, 0.1682535585783166, 0.1691543614891221, 0.9454210233316079, 0.11334030503404824, 0.7501505302702385, 0.6687352134130935, 0.15695668403156837, 0.2145611834602067, 0.08345586975985353, 0.09479788925453447, 0.8272875666087596, 0.18989263297318504, 0.21195187185372044, 0.19965121261840346, 0.2070423301602723, 0.21034293246275138, 0.1920171303744459, 0.22344617961471103, 0.19809067241681022, 0.20973993589689022, 0.07796796988976462, 0.1093111516180546, 0.06784782135901368, 0.10944599033515223, 0.08326679713982466, 0.10844906151385403, 0.1433692305598212, 0.09220050776768307, 0.09159646948506073]}, "mutation_prompt": null}
{"id": "2a62c37e-bfeb-4056-b9b4-143f4a64300b", "solution": "import numpy as np\n\nclass RefinedEnhancedADSOStarPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.4 * chaotic_sequence[self.iteration % len(chaotic_sequence)]\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                # Added perturbation mechanism\n                perturbation = np.random.uniform(-0.05, 0.05, self.dim) * (self.bounds[1] - self.bounds[0])\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]) +\n                                 perturbation)\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                for group in np.array_split(np.random.permutation(self.population_size), 2):\n                    group_best_index = group[np.argmin(personal_best_values[group])]\n                    for i in group:\n                        if i != group_best_index:\n                            neighborhood_radius = 0.1 * (self.bounds[1] - self.bounds[0])\n                            population[i] = np.clip(population[group_best_index] + \n                                                    np.random.uniform(-neighborhood_radius, neighborhood_radius, self.dim), \n                                                    self.bounds[0], self.bounds[1])\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "RefinedEnhancedADSOStarPlus", "description": "RefinedEnhancedADSOStarPlus enhances convergence by implementing a perturbation mechanism in the velocity update to escape local optima.", "configspace": "", "generation": 80, "fitness": 0.19403786893164932, "feedback": "The algorithm RefinedEnhancedADSOStarPlus got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.19 with standard deviation 0.19.", "error": "", "parent_id": "3675c68a-a97e-4fd9-ba3c-a850fa63f3c1", "metadata": {"aucs": [0.34915634297745957, 0.3361698751708171, 0.33744662638148626, 0.3339329045026187, 0.369608208939192, 0.3578665473437722, 0.3482399909831414, 0.3414685812530259, 0.34207754415927705, 0.017434381970234947, 9.999999999998899e-05, 0.00142264250889379, 0.0005676304137439692, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09193449847707091, 0.11780911466383348, 0.08578238179678577, 0.09912182878586406, 0.10699485271377074, 0.09071232248376981, 0.08242988485302394, 0.10193026395186755, 0.09972396073343903, 0.08241271110355941, 0.09553742345657223, 0.09766636302617193, 0.10304186855854036, 0.10317299251714307, 0.08288312449820989, 0.0777997076004584, 0.09261161800660589, 0.0798451575888548, 0.9759969642092309, 0.9821224495328078, 0.9832570676214339, 0.9829997504744054, 0.9834829523221654, 0.9873864606195962, 0.9827959893728118, 0.9775499987811996, 0.9576826862662263, 0.23363419033195132, 0.22932516393905544, 0.212882279765089, 0.22871202461092532, 0.20568191648038525, 0.21259807567233246, 0.2436683434282434, 0.23858967318641067, 0.23736319585622245, 0.31125016552580365, 0.22523726661109877, 0.23658121195387716, 0.3078291882173574, 0.2764962420423168, 0.3090559414557068, 0.2666391595836287, 0.24395436785993363, 0.3015498989163117, 0.13631850088718278, 0.12545277391944543, 0.12169528263758966, 0.09917337971616869, 0.09726855753034047, 0.12679628944452925, 0.14102621241906943, 0.11556630409139235, 0.12358126864327623, 0.13164901158316844, 0.06289420198163898, 0.14637702284056764, 0.12212795137112242, 0.11819916841804567, 0.13963717429444333, 0.12307778137214864, 0.12765537728397158, 0.13267008011234993, 9.999999999998899e-05, 9.999999999998899e-05, 0.003906008649035564, 0.01022058413486815, 0.0022000652637303997, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12363043552518216, 0.1128942927273805, 0.10185753829639, 0.09038856038453336, 0.04534894409631274, 0.04050032996392261, 0.18129387566405886, 0.07758833238599205, 0.08801099330517825, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.05969599551278826, 0.05575790300173977, 0.06206121165648726, 0.08327510307165098, 0.05669477452783522, 0.06110497513693425, 0.05221979721607517, 0.05727053468194776, 0.05613312590096664, 0.33982030182346645, 0.3262148576755687, 0.34258854604994293, 0.33038143150072397, 0.3394156662986556, 0.39225435543423803, 0.34138657332892575, 0.3545920247214397, 0.34622052854749563, 0.08429740267274977, 0.09644789489074268, 0.10722461747945511, 0.11321325658897563, 0.1234483920864432, 0.10895210088813512, 0.09869978796374212, 0.11709509049624989, 0.09939026771758197, 0.14769238336189716, 0.19680900295482728, 0.23681642809270909, 0.1985989395375214, 0.1682254296171961, 0.17405550973514605, 0.2037745681405928, 0.14788376887584076, 0.19428224247855486, 0.24570415367999332, 0.2529252983379583, 0.2354979277749697, 0.23920279910882747, 0.2174174841288582, 0.24062751966929352, 0.233870507999143, 0.19066331246526547, 0.2508595703670312, 0.18202654272737584, 0.20128664867358093, 0.16933041287925554, 0.23539643537611576, 0.23551685745056716, 0.1932765504586036, 0.1709137802243056, 0.15865702576093732, 0.17141439425218907, 0.20599313444418887, 0.21816503747326688, 0.22834205518600725, 0.22426147489893833, 0.215042089089866, 0.2291490497866987, 0.2011797171361298, 0.18813448376301545, 0.24376358403519893, 0.18574633633465232, 0.21687319453202047, 0.17474375078780613, 0.17524129975510516, 0.19082718805255694, 0.17531663649029328, 0.17830638556933176, 0.19555475285637636, 0.1788327705719983, 0.1575394771244153, 0.5412065188959505, 0.18604830135943617, 0.17253483866481678, 0.19736184370141596, 0.1702625146612199, 0.16804548841394784, 0.1675901059951359, 0.15319061267112544, 0.49411563326080754, 0.11259669163790109, 0.43432559980764207, 0.1689986259191275, 0.15441060308010068, 0.20835408766269625, 0.41573315206938555, 0.09460408687959587, 0.38557102559742784, 0.18466599346457957, 0.1891181696410621, 0.19637997828718612, 0.18993409712929565, 0.1907968826671892, 0.17773302531163337, 0.17490941976161445, 0.18501785502891244, 0.1791894493213072, 0.09348869070742005, 0.08756107989274065, 0.07984842578945661, 0.12028325487008262, 0.09314320252517194, 0.10451975566842853, 0.11803910129692397, 0.08902527630641965, 0.11975159740295271]}, "mutation_prompt": null}
{"id": "af92f0e0-daa6-4336-bc3e-3d6f5c9359f1", "solution": "import numpy as np\n\nclass EnhancedADSOStarPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.4 * chaotic_sequence[self.iteration % len(chaotic_sequence)]  # Slightly adjusted\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                for group in np.array_split(np.random.permutation(self.population_size), 2):\n                    group_best_index = group[np.argmin(personal_best_values[group])]\n                    for i in group:\n                        if i != group_best_index:\n                            neighborhood_radius = 0.1 * (self.bounds[1] - self.bounds[0])  # Added neighborhood search\n                            population[i] = np.clip(population[group_best_index] + \n                                                    np.random.uniform(-neighborhood_radius, neighborhood_radius, self.dim), \n                                                    self.bounds[0], self.bounds[1])\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOStarPlus", "description": "EnhancedADSOStarPlus leverages adaptive inertia with a dynamic neighborhood search to improve convergence speed and accuracy.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3675c68a-a97e-4fd9-ba3c-a850fa63f3c1", "metadata": {"aucs": [0.9705347699428433, 0.9624287467636128, 0.9660675347526102, 0.9634449067916855, 0.9602078762657024, 0.9536548718790635, 0.9643672951320037, 0.9643061442054186, 0.9687820612271381, 0.902566623997177, 0.8746652184749697, 0.9068523852421699, 0.9013522233041774, 0.8818195584842309, 0.900187962718799, 0.8783281231565538, 0.9227528735164452, 0.8625899580619406, 0.09052588208910872, 0.124002717146798, 0.06123896425390607, 0.08394473253443613, 0.1488069069897916, 0.11855283008123862, 0.09145130050583161, 0.06700563704546714, 0.050303129636503185, 0.13706176175258278, 0.07883124181703971, 0.11913079534151638, 0.13703822067720417, 0.08168269539918316, 0.11778869795666724, 0.12095196736151503, 0.09128577326594456, 0.10701363271538011, 0.9868881356963003, 0.9815390591998592, 0.986794476175855, 0.9743702064586314, 0.9856441851331661, 0.9868768891057558, 0.9805143371912302, 0.9764364255751069, 0.9643492325721603, 0.8854785994909045, 0.8638198733894629, 0.8964462539170978, 0.8825882948710464, 0.3559191125490939, 0.9043458757613234, 0.7114321067073044, 0.8547736405538251, 0.9056614493202182, 0.303524510821122, 0.19145276933100353, 0.2133673842984405, 0.878716197599535, 0.2620886163955254, 0.19593114948726575, 0.23280505339161417, 0.2605218035488046, 0.8473972679887052, 0.24559570774198924, 0.23517882264072143, 0.22771378216966087, 0.3171828000741166, 0.21377165153763467, 0.22582002719659955, 0.22081390244552945, 0.1378612733849679, 0.22268346028151065, 0.243752440095094, 0.20397985471249935, 0.22597317714964682, 0.2283730152327652, 0.2613338934544981, 0.21645270313249187, 0.2627057250716983, 9.999999999998899e-05, 0.2704456248794338, 0.0022769086306405617, 9.999999999998899e-05, 0.0629588756667423, 0.05038881263823225, 0.049486012811279956, 0.03214975496874162, 0.0037371784415687337, 0.08865079144052912, 9.999999999998899e-05, 0.10629005494982158, 0.08491564896816728, 0.10866569395522296, 0.034346886257284326, 0.007813768068210658, 0.03211444490597515, 0.09547375352850851, 0.08642830620887276, 0.1417413809350725, 0.1159960754344993, 0.27111631707672645, 0.29828687932345477, 0.11608257432880231, 0.08719302964596376, 0.13349202339835609, 0.10165161953092372, 0.19609893224038066, 0.08132072025260573, 0.19980514126259963, 0.08142037534533009, 0.05912017288822824, 0.11761278078036197, 0.006994008277590891, 0.1350361030860835, 0.08700583934582773, 0.08801072143287125, 0.0865009132589275, 0.5720913801650838, 0.5562439605944003, 0.5989867315820625, 0.6342990394204977, 0.5590041836515293, 0.4864994281001632, 0.5875323033880153, 0.6052984788987262, 0.5725580001579126, 0.05482110182834388, 0.07193765035558841, 0.08525817349517184, 0.07236231156684825, 0.08327413834633102, 0.09557335158033498, 0.05223905142102925, 0.08037988604951718, 0.08183032980606253, 0.17869444926263822, 0.258151475939125, 0.21626524361563715, 0.4242312276316901, 0.4784876098946851, 0.20552402765474875, 0.19862201723281836, 0.3342104596468449, 0.28368672810304985, 0.20098022181637143, 0.34907920908949075, 0.22440074904839102, 0.18753875247144403, 0.3703122865749703, 0.15449169421612985, 0.16540827010797388, 0.19562877260681966, 0.13639565824642852, 0.27075711403046043, 0.22144506165579847, 0.27139906684724935, 0.27844288045408205, 0.19106190520172295, 0.3551113445784868, 0.2112595073250686, 0.22157588357802127, 0.07940383594440459, 0.24329165975700384, 0.21670008892921877, 0.22032155863108083, 0.23050330527123253, 0.3578245988023362, 0.25058767329684783, 0.26539243949145663, 0.19976518643753793, 0.2582357242163814, 0.17578609529382283, 0.1846096870173869, 0.19830884198783394, 0.1765202025803856, 0.1915870117392312, 0.18780521316720888, 0.21110387589908042, 0.1920880437405632, 0.18405231985847037, 0.18966240521553523, 0.9599985245891225, 0.1896761491641693, 0.1740583042762135, 0.20241927458509068, 0.1151442965344529, 0.16920646602713352, 0.1682535585783166, 0.1691543614891221, 0.9454210233316079, 0.11334030503404824, 0.7501505302702385, 0.6687352134130935, 0.15695668403156837, 0.2145611834602067, 0.08345586975985353, 0.09479788925453447, 0.8272875666087596, 0.18989263297318504, 0.21195187185372044, 0.19965121261840346, 0.2070423301602723, 0.21034293246275138, 0.1920171303744459, 0.22344617961471103, 0.19809067241681022, 0.20973993589689022, 0.07796796988976462, 0.1093111516180546, 0.06784782135901368, 0.10944599033515223, 0.08326679713982466, 0.10844906151385403, 0.1433692305598212, 0.09220050776768307, 0.09159646948506073]}, "mutation_prompt": null}
{"id": "ab84af66-09cb-45c7-9e23-4da6ee88e13b", "solution": "import numpy as np\n\nclass EnhancedADSOStarPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.4 * chaotic_sequence[self.iteration % len(chaotic_sequence)]  # Slightly adjusted\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                for group in np.array_split(np.random.permutation(self.population_size), 2):\n                    group_best_index = group[np.argmin(personal_best_values[group])]\n                    for i in group:\n                        if i != group_best_index:\n                            neighborhood_radius = 0.1 * (self.bounds[1] - self.bounds[0])  # Added neighborhood search\n                            population[i] = np.clip(population[group_best_index] + \n                                                    np.random.uniform(-neighborhood_radius, neighborhood_radius, self.dim), \n                                                    self.bounds[0], self.bounds[1])\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOStarPlus", "description": "EnhancedADSOStarPlus leverages adaptive inertia with a dynamic neighborhood search to improve convergence speed and accuracy.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3675c68a-a97e-4fd9-ba3c-a850fa63f3c1", "metadata": {"aucs": [0.9705347699428433, 0.9624287467636128, 0.9660675347526102, 0.9634449067916855, 0.9602078762657024, 0.9536548718790635, 0.9643672951320037, 0.9643061442054186, 0.9687820612271381, 0.902566623997177, 0.8746652184749697, 0.9068523852421699, 0.9013522233041774, 0.8818195584842309, 0.900187962718799, 0.8783281231565538, 0.9227528735164452, 0.8625899580619406, 0.09052588208910872, 0.124002717146798, 0.06123896425390607, 0.08394473253443613, 0.1488069069897916, 0.11855283008123862, 0.09145130050583161, 0.06700563704546714, 0.050303129636503185, 0.13706176175258278, 0.07883124181703971, 0.11913079534151638, 0.13703822067720417, 0.08168269539918316, 0.11778869795666724, 0.12095196736151503, 0.09128577326594456, 0.10701363271538011, 0.9868881356963003, 0.9815390591998592, 0.986794476175855, 0.9743702064586314, 0.9856441851331661, 0.9868768891057558, 0.9805143371912302, 0.9764364255751069, 0.9643492325721603, 0.8854785994909045, 0.8638198733894629, 0.8964462539170978, 0.8825882948710464, 0.3559191125490939, 0.9043458757613234, 0.7114321067073044, 0.8547736405538251, 0.9056614493202182, 0.303524510821122, 0.19145276933100353, 0.2133673842984405, 0.878716197599535, 0.2620886163955254, 0.19593114948726575, 0.23280505339161417, 0.2605218035488046, 0.8473972679887052, 0.24559570774198924, 0.23517882264072143, 0.22771378216966087, 0.3171828000741166, 0.21377165153763467, 0.22582002719659955, 0.22081390244552945, 0.1378612733849679, 0.22268346028151065, 0.243752440095094, 0.20397985471249935, 0.22597317714964682, 0.2283730152327652, 0.2613338934544981, 0.21645270313249187, 0.2627057250716983, 9.999999999998899e-05, 0.2704456248794338, 0.0022769086306405617, 9.999999999998899e-05, 0.0629588756667423, 0.05038881263823225, 0.049486012811279956, 0.03214975496874162, 0.0037371784415687337, 0.08865079144052912, 9.999999999998899e-05, 0.10629005494982158, 0.08491564896816728, 0.10866569395522296, 0.034346886257284326, 0.007813768068210658, 0.03211444490597515, 0.09547375352850851, 0.08642830620887276, 0.1417413809350725, 0.1159960754344993, 0.27111631707672645, 0.29828687932345477, 0.11608257432880231, 0.08719302964596376, 0.13349202339835609, 0.10165161953092372, 0.19609893224038066, 0.08132072025260573, 0.19980514126259963, 0.08142037534533009, 0.05912017288822824, 0.11761278078036197, 0.006994008277590891, 0.1350361030860835, 0.08700583934582773, 0.08801072143287125, 0.0865009132589275, 0.5720913801650838, 0.5562439605944003, 0.5989867315820625, 0.6342990394204977, 0.5590041836515293, 0.4864994281001632, 0.5875323033880153, 0.6052984788987262, 0.5725580001579126, 0.05482110182834388, 0.07193765035558841, 0.08525817349517184, 0.07236231156684825, 0.08327413834633102, 0.09557335158033498, 0.05223905142102925, 0.08037988604951718, 0.08183032980606253, 0.17869444926263822, 0.258151475939125, 0.21626524361563715, 0.4242312276316901, 0.4784876098946851, 0.20552402765474875, 0.19862201723281836, 0.3342104596468449, 0.28368672810304985, 0.20098022181637143, 0.34907920908949075, 0.22440074904839102, 0.18753875247144403, 0.3703122865749703, 0.15449169421612985, 0.16540827010797388, 0.19562877260681966, 0.13639565824642852, 0.27075711403046043, 0.22144506165579847, 0.27139906684724935, 0.27844288045408205, 0.19106190520172295, 0.3551113445784868, 0.2112595073250686, 0.22157588357802127, 0.07940383594440459, 0.24329165975700384, 0.21670008892921877, 0.22032155863108083, 0.23050330527123253, 0.3578245988023362, 0.25058767329684783, 0.26539243949145663, 0.19976518643753793, 0.2582357242163814, 0.17578609529382283, 0.1846096870173869, 0.19830884198783394, 0.1765202025803856, 0.1915870117392312, 0.18780521316720888, 0.21110387589908042, 0.1920880437405632, 0.18405231985847037, 0.18966240521553523, 0.9599985245891225, 0.1896761491641693, 0.1740583042762135, 0.20241927458509068, 0.1151442965344529, 0.16920646602713352, 0.1682535585783166, 0.1691543614891221, 0.9454210233316079, 0.11334030503404824, 0.7501505302702385, 0.6687352134130935, 0.15695668403156837, 0.2145611834602067, 0.08345586975985353, 0.09479788925453447, 0.8272875666087596, 0.18989263297318504, 0.21195187185372044, 0.19965121261840346, 0.2070423301602723, 0.21034293246275138, 0.1920171303744459, 0.22344617961471103, 0.19809067241681022, 0.20973993589689022, 0.07796796988976462, 0.1093111516180546, 0.06784782135901368, 0.10944599033515223, 0.08326679713982466, 0.10844906151385403, 0.1433692305598212, 0.09220050776768307, 0.09159646948506073]}, "mutation_prompt": null}
{"id": "94a93e44-ac6e-4e76-af59-9847c9793626", "solution": "import numpy as np\n\nclass EnhancedADSOStarPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.4 * chaotic_sequence[self.iteration % len(chaotic_sequence)]  # Slightly adjusted\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                for group in np.array_split(np.random.permutation(self.population_size), 2):\n                    group_best_index = group[np.argmin(personal_best_values[group])]\n                    for i in group:\n                        if i != group_best_index:\n                            neighborhood_radius = 0.1 * (self.bounds[1] - self.bounds[0])  # Added neighborhood search\n                            population[i] = np.clip(population[group_best_index] + \n                                                    np.random.uniform(-neighborhood_radius, neighborhood_radius, self.dim), \n                                                    self.bounds[0], self.bounds[1])\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOStarPlus", "description": "EnhancedADSOStarPlus leverages adaptive inertia with a dynamic neighborhood search to improve convergence speed and accuracy.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3675c68a-a97e-4fd9-ba3c-a850fa63f3c1", "metadata": {"aucs": [0.9705347699428433, 0.9624287467636128, 0.9660675347526102, 0.9634449067916855, 0.9602078762657024, 0.9536548718790635, 0.9643672951320037, 0.9643061442054186, 0.9687820612271381, 0.902566623997177, 0.8746652184749697, 0.9068523852421699, 0.9013522233041774, 0.8818195584842309, 0.900187962718799, 0.8783281231565538, 0.9227528735164452, 0.8625899580619406, 0.09052588208910872, 0.124002717146798, 0.06123896425390607, 0.08394473253443613, 0.1488069069897916, 0.11855283008123862, 0.09145130050583161, 0.06700563704546714, 0.050303129636503185, 0.13706176175258278, 0.07883124181703971, 0.11913079534151638, 0.13703822067720417, 0.08168269539918316, 0.11778869795666724, 0.12095196736151503, 0.09128577326594456, 0.10701363271538011, 0.9868881356963003, 0.9815390591998592, 0.986794476175855, 0.9743702064586314, 0.9856441851331661, 0.9868768891057558, 0.9805143371912302, 0.9764364255751069, 0.9643492325721603, 0.8854785994909045, 0.8638198733894629, 0.8964462539170978, 0.8825882948710464, 0.3559191125490939, 0.9043458757613234, 0.7114321067073044, 0.8547736405538251, 0.9056614493202182, 0.303524510821122, 0.19145276933100353, 0.2133673842984405, 0.878716197599535, 0.2620886163955254, 0.19593114948726575, 0.23280505339161417, 0.2605218035488046, 0.8473972679887052, 0.24559570774198924, 0.23517882264072143, 0.22771378216966087, 0.3171828000741166, 0.21377165153763467, 0.22582002719659955, 0.22081390244552945, 0.1378612733849679, 0.22268346028151065, 0.243752440095094, 0.20397985471249935, 0.22597317714964682, 0.2283730152327652, 0.2613338934544981, 0.21645270313249187, 0.2627057250716983, 9.999999999998899e-05, 0.2704456248794338, 0.0022769086306405617, 9.999999999998899e-05, 0.0629588756667423, 0.05038881263823225, 0.049486012811279956, 0.03214975496874162, 0.0037371784415687337, 0.08865079144052912, 9.999999999998899e-05, 0.10629005494982158, 0.08491564896816728, 0.10866569395522296, 0.034346886257284326, 0.007813768068210658, 0.03211444490597515, 0.09547375352850851, 0.08642830620887276, 0.1417413809350725, 0.1159960754344993, 0.27111631707672645, 0.29828687932345477, 0.11608257432880231, 0.08719302964596376, 0.13349202339835609, 0.10165161953092372, 0.19609893224038066, 0.08132072025260573, 0.19980514126259963, 0.08142037534533009, 0.05912017288822824, 0.11761278078036197, 0.006994008277590891, 0.1350361030860835, 0.08700583934582773, 0.08801072143287125, 0.0865009132589275, 0.5720913801650838, 0.5562439605944003, 0.5989867315820625, 0.6342990394204977, 0.5590041836515293, 0.4864994281001632, 0.5875323033880153, 0.6052984788987262, 0.5725580001579126, 0.05482110182834388, 0.07193765035558841, 0.08525817349517184, 0.07236231156684825, 0.08327413834633102, 0.09557335158033498, 0.05223905142102925, 0.08037988604951718, 0.08183032980606253, 0.17869444926263822, 0.258151475939125, 0.21626524361563715, 0.4242312276316901, 0.4784876098946851, 0.20552402765474875, 0.19862201723281836, 0.3342104596468449, 0.28368672810304985, 0.20098022181637143, 0.34907920908949075, 0.22440074904839102, 0.18753875247144403, 0.3703122865749703, 0.15449169421612985, 0.16540827010797388, 0.19562877260681966, 0.13639565824642852, 0.27075711403046043, 0.22144506165579847, 0.27139906684724935, 0.27844288045408205, 0.19106190520172295, 0.3551113445784868, 0.2112595073250686, 0.22157588357802127, 0.07940383594440459, 0.24329165975700384, 0.21670008892921877, 0.22032155863108083, 0.23050330527123253, 0.3578245988023362, 0.25058767329684783, 0.26539243949145663, 0.19976518643753793, 0.2582357242163814, 0.17578609529382283, 0.1846096870173869, 0.19830884198783394, 0.1765202025803856, 0.1915870117392312, 0.18780521316720888, 0.21110387589908042, 0.1920880437405632, 0.18405231985847037, 0.18966240521553523, 0.9599985245891225, 0.1896761491641693, 0.1740583042762135, 0.20241927458509068, 0.1151442965344529, 0.16920646602713352, 0.1682535585783166, 0.1691543614891221, 0.9454210233316079, 0.11334030503404824, 0.7501505302702385, 0.6687352134130935, 0.15695668403156837, 0.2145611834602067, 0.08345586975985353, 0.09479788925453447, 0.8272875666087596, 0.18989263297318504, 0.21195187185372044, 0.19965121261840346, 0.2070423301602723, 0.21034293246275138, 0.1920171303744459, 0.22344617961471103, 0.19809067241681022, 0.20973993589689022, 0.07796796988976462, 0.1093111516180546, 0.06784782135901368, 0.10944599033515223, 0.08326679713982466, 0.10844906151385403, 0.1433692305598212, 0.09220050776768307, 0.09159646948506073]}, "mutation_prompt": null}
{"id": "7de47969-b003-4739-b664-74ba23684e87", "solution": "import numpy as np\n\nclass EnhancedADSOStarPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.4 * chaotic_sequence[self.iteration % len(chaotic_sequence)]  # Slightly adjusted\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                for group in np.array_split(np.random.permutation(self.population_size), 2):\n                    group_best_index = group[np.argmin(personal_best_values[group])]\n                    for i in group:\n                        if i != group_best_index:\n                            neighborhood_radius = 0.1 * (self.bounds[1] - self.bounds[0])  # Added neighborhood search\n                            population[i] = np.clip(population[group_best_index] + \n                                                    np.random.uniform(-neighborhood_radius, neighborhood_radius, self.dim), \n                                                    self.bounds[0], self.bounds[1])\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOStarPlus", "description": "EnhancedADSOStarPlus leverages adaptive inertia with a dynamic neighborhood search to improve convergence speed and accuracy.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3675c68a-a97e-4fd9-ba3c-a850fa63f3c1", "metadata": {"aucs": [0.9705347699428433, 0.9624287467636128, 0.9660675347526102, 0.9634449067916855, 0.9602078762657024, 0.9536548718790635, 0.9643672951320037, 0.9643061442054186, 0.9687820612271381, 0.902566623997177, 0.8746652184749697, 0.9068523852421699, 0.9013522233041774, 0.8818195584842309, 0.900187962718799, 0.8783281231565538, 0.9227528735164452, 0.8625899580619406, 0.09052588208910872, 0.124002717146798, 0.06123896425390607, 0.08394473253443613, 0.1488069069897916, 0.11855283008123862, 0.09145130050583161, 0.06700563704546714, 0.050303129636503185, 0.13706176175258278, 0.07883124181703971, 0.11913079534151638, 0.13703822067720417, 0.08168269539918316, 0.11778869795666724, 0.12095196736151503, 0.09128577326594456, 0.10701363271538011, 0.9868881356963003, 0.9815390591998592, 0.986794476175855, 0.9743702064586314, 0.9856441851331661, 0.9868768891057558, 0.9805143371912302, 0.9764364255751069, 0.9643492325721603, 0.8854785994909045, 0.8638198733894629, 0.8964462539170978, 0.8825882948710464, 0.3559191125490939, 0.9043458757613234, 0.7114321067073044, 0.8547736405538251, 0.9056614493202182, 0.303524510821122, 0.19145276933100353, 0.2133673842984405, 0.878716197599535, 0.2620886163955254, 0.19593114948726575, 0.23280505339161417, 0.2605218035488046, 0.8473972679887052, 0.24559570774198924, 0.23517882264072143, 0.22771378216966087, 0.3171828000741166, 0.21377165153763467, 0.22582002719659955, 0.22081390244552945, 0.1378612733849679, 0.22268346028151065, 0.243752440095094, 0.20397985471249935, 0.22597317714964682, 0.2283730152327652, 0.2613338934544981, 0.21645270313249187, 0.2627057250716983, 9.999999999998899e-05, 0.2704456248794338, 0.0022769086306405617, 9.999999999998899e-05, 0.0629588756667423, 0.05038881263823225, 0.049486012811279956, 0.03214975496874162, 0.0037371784415687337, 0.08865079144052912, 9.999999999998899e-05, 0.10629005494982158, 0.08491564896816728, 0.10866569395522296, 0.034346886257284326, 0.007813768068210658, 0.03211444490597515, 0.09547375352850851, 0.08642830620887276, 0.1417413809350725, 0.1159960754344993, 0.27111631707672645, 0.29828687932345477, 0.11608257432880231, 0.08719302964596376, 0.13349202339835609, 0.10165161953092372, 0.19609893224038066, 0.08132072025260573, 0.19980514126259963, 0.08142037534533009, 0.05912017288822824, 0.11761278078036197, 0.006994008277590891, 0.1350361030860835, 0.08700583934582773, 0.08801072143287125, 0.0865009132589275, 0.5720913801650838, 0.5562439605944003, 0.5989867315820625, 0.6342990394204977, 0.5590041836515293, 0.4864994281001632, 0.5875323033880153, 0.6052984788987262, 0.5725580001579126, 0.05482110182834388, 0.07193765035558841, 0.08525817349517184, 0.07236231156684825, 0.08327413834633102, 0.09557335158033498, 0.05223905142102925, 0.08037988604951718, 0.08183032980606253, 0.17869444926263822, 0.258151475939125, 0.21626524361563715, 0.4242312276316901, 0.4784876098946851, 0.20552402765474875, 0.19862201723281836, 0.3342104596468449, 0.28368672810304985, 0.20098022181637143, 0.34907920908949075, 0.22440074904839102, 0.18753875247144403, 0.3703122865749703, 0.15449169421612985, 0.16540827010797388, 0.19562877260681966, 0.13639565824642852, 0.27075711403046043, 0.22144506165579847, 0.27139906684724935, 0.27844288045408205, 0.19106190520172295, 0.3551113445784868, 0.2112595073250686, 0.22157588357802127, 0.07940383594440459, 0.24329165975700384, 0.21670008892921877, 0.22032155863108083, 0.23050330527123253, 0.3578245988023362, 0.25058767329684783, 0.26539243949145663, 0.19976518643753793, 0.2582357242163814, 0.17578609529382283, 0.1846096870173869, 0.19830884198783394, 0.1765202025803856, 0.1915870117392312, 0.18780521316720888, 0.21110387589908042, 0.1920880437405632, 0.18405231985847037, 0.18966240521553523, 0.9599985245891225, 0.1896761491641693, 0.1740583042762135, 0.20241927458509068, 0.1151442965344529, 0.16920646602713352, 0.1682535585783166, 0.1691543614891221, 0.9454210233316079, 0.11334030503404824, 0.7501505302702385, 0.6687352134130935, 0.15695668403156837, 0.2145611834602067, 0.08345586975985353, 0.09479788925453447, 0.8272875666087596, 0.18989263297318504, 0.21195187185372044, 0.19965121261840346, 0.2070423301602723, 0.21034293246275138, 0.1920171303744459, 0.22344617961471103, 0.19809067241681022, 0.20973993589689022, 0.07796796988976462, 0.1093111516180546, 0.06784782135901368, 0.10944599033515223, 0.08326679713982466, 0.10844906151385403, 0.1433692305598212, 0.09220050776768307, 0.09159646948506073]}, "mutation_prompt": null}
{"id": "aabc716c-3143-4ca6-88c6-a8675e33b9da", "solution": "import numpy as np\n\nclass EnhancedADSOStarPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.4 * chaotic_sequence[self.iteration % len(chaotic_sequence)]  # Slightly adjusted\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                for group in np.array_split(np.random.permutation(self.population_size), 2):\n                    group_best_index = group[np.argmin(personal_best_values[group])]\n                    for i in group:\n                        if i != group_best_index:\n                            neighborhood_radius = 0.1 * (self.bounds[1] - self.bounds[0])  # Added neighborhood search\n                            population[i] = np.clip(population[group_best_index] + \n                                                    np.random.uniform(-neighborhood_radius, neighborhood_radius, self.dim), \n                                                    self.bounds[0], self.bounds[1])\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOStarPlus", "description": "EnhancedADSOStarPlus leverages adaptive inertia with a dynamic neighborhood search to improve convergence speed and accuracy.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3675c68a-a97e-4fd9-ba3c-a850fa63f3c1", "metadata": {"aucs": [0.9705347699428433, 0.9624287467636128, 0.9660675347526102, 0.9634449067916855, 0.9602078762657024, 0.9536548718790635, 0.9643672951320037, 0.9643061442054186, 0.9687820612271381, 0.902566623997177, 0.8746652184749697, 0.9068523852421699, 0.9013522233041774, 0.8818195584842309, 0.900187962718799, 0.8783281231565538, 0.9227528735164452, 0.8625899580619406, 0.09052588208910872, 0.124002717146798, 0.06123896425390607, 0.08394473253443613, 0.1488069069897916, 0.11855283008123862, 0.09145130050583161, 0.06700563704546714, 0.050303129636503185, 0.13706176175258278, 0.07883124181703971, 0.11913079534151638, 0.13703822067720417, 0.08168269539918316, 0.11778869795666724, 0.12095196736151503, 0.09128577326594456, 0.10701363271538011, 0.9868881356963003, 0.9815390591998592, 0.986794476175855, 0.9743702064586314, 0.9856441851331661, 0.9868768891057558, 0.9805143371912302, 0.9764364255751069, 0.9643492325721603, 0.8854785994909045, 0.8638198733894629, 0.8964462539170978, 0.8825882948710464, 0.3559191125490939, 0.9043458757613234, 0.7114321067073044, 0.8547736405538251, 0.9056614493202182, 0.303524510821122, 0.19145276933100353, 0.2133673842984405, 0.878716197599535, 0.2620886163955254, 0.19593114948726575, 0.23280505339161417, 0.2605218035488046, 0.8473972679887052, 0.24559570774198924, 0.23517882264072143, 0.22771378216966087, 0.3171828000741166, 0.21377165153763467, 0.22582002719659955, 0.22081390244552945, 0.1378612733849679, 0.22268346028151065, 0.243752440095094, 0.20397985471249935, 0.22597317714964682, 0.2283730152327652, 0.2613338934544981, 0.21645270313249187, 0.2627057250716983, 9.999999999998899e-05, 0.2704456248794338, 0.0022769086306405617, 9.999999999998899e-05, 0.0629588756667423, 0.05038881263823225, 0.049486012811279956, 0.03214975496874162, 0.0037371784415687337, 0.08865079144052912, 9.999999999998899e-05, 0.10629005494982158, 0.08491564896816728, 0.10866569395522296, 0.034346886257284326, 0.007813768068210658, 0.03211444490597515, 0.09547375352850851, 0.08642830620887276, 0.1417413809350725, 0.1159960754344993, 0.27111631707672645, 0.29828687932345477, 0.11608257432880231, 0.08719302964596376, 0.13349202339835609, 0.10165161953092372, 0.19609893224038066, 0.08132072025260573, 0.19980514126259963, 0.08142037534533009, 0.05912017288822824, 0.11761278078036197, 0.006994008277590891, 0.1350361030860835, 0.08700583934582773, 0.08801072143287125, 0.0865009132589275, 0.5720913801650838, 0.5562439605944003, 0.5989867315820625, 0.6342990394204977, 0.5590041836515293, 0.4864994281001632, 0.5875323033880153, 0.6052984788987262, 0.5725580001579126, 0.05482110182834388, 0.07193765035558841, 0.08525817349517184, 0.07236231156684825, 0.08327413834633102, 0.09557335158033498, 0.05223905142102925, 0.08037988604951718, 0.08183032980606253, 0.17869444926263822, 0.258151475939125, 0.21626524361563715, 0.4242312276316901, 0.4784876098946851, 0.20552402765474875, 0.19862201723281836, 0.3342104596468449, 0.28368672810304985, 0.20098022181637143, 0.34907920908949075, 0.22440074904839102, 0.18753875247144403, 0.3703122865749703, 0.15449169421612985, 0.16540827010797388, 0.19562877260681966, 0.13639565824642852, 0.27075711403046043, 0.22144506165579847, 0.27139906684724935, 0.27844288045408205, 0.19106190520172295, 0.3551113445784868, 0.2112595073250686, 0.22157588357802127, 0.07940383594440459, 0.24329165975700384, 0.21670008892921877, 0.22032155863108083, 0.23050330527123253, 0.3578245988023362, 0.25058767329684783, 0.26539243949145663, 0.19976518643753793, 0.2582357242163814, 0.17578609529382283, 0.1846096870173869, 0.19830884198783394, 0.1765202025803856, 0.1915870117392312, 0.18780521316720888, 0.21110387589908042, 0.1920880437405632, 0.18405231985847037, 0.18966240521553523, 0.9599985245891225, 0.1896761491641693, 0.1740583042762135, 0.20241927458509068, 0.1151442965344529, 0.16920646602713352, 0.1682535585783166, 0.1691543614891221, 0.9454210233316079, 0.11334030503404824, 0.7501505302702385, 0.6687352134130935, 0.15695668403156837, 0.2145611834602067, 0.08345586975985353, 0.09479788925453447, 0.8272875666087596, 0.18989263297318504, 0.21195187185372044, 0.19965121261840346, 0.2070423301602723, 0.21034293246275138, 0.1920171303744459, 0.22344617961471103, 0.19809067241681022, 0.20973993589689022, 0.07796796988976462, 0.1093111516180546, 0.06784782135901368, 0.10944599033515223, 0.08326679713982466, 0.10844906151385403, 0.1433692305598212, 0.09220050776768307, 0.09159646948506073]}, "mutation_prompt": null}
{"id": "7fa68621-0607-4409-9656-33935cf20bbd", "solution": "import numpy as np\n\nclass EnhancedADSOStarPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.4 * chaotic_sequence[self.iteration % len(chaotic_sequence)]  # Slightly adjusted\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                for group in np.array_split(np.random.permutation(self.population_size), 2):\n                    group_best_index = group[np.argmin(personal_best_values[group])]\n                    for i in group:\n                        if i != group_best_index:\n                            neighborhood_radius = 0.1 * (self.bounds[1] - self.bounds[0])  # Added neighborhood search\n                            population[i] = np.clip(population[group_best_index] + \n                                                    np.random.uniform(-neighborhood_radius, neighborhood_radius, self.dim), \n                                                    self.bounds[0], self.bounds[1])\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOStarPlus", "description": "EnhancedADSOStarPlus leverages adaptive inertia with a dynamic neighborhood search to improve convergence speed and accuracy.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3675c68a-a97e-4fd9-ba3c-a850fa63f3c1", "metadata": {"aucs": [0.9705347699428433, 0.9624287467636128, 0.9660675347526102, 0.9634449067916855, 0.9602078762657024, 0.9536548718790635, 0.9643672951320037, 0.9643061442054186, 0.9687820612271381, 0.902566623997177, 0.8746652184749697, 0.9068523852421699, 0.9013522233041774, 0.8818195584842309, 0.900187962718799, 0.8783281231565538, 0.9227528735164452, 0.8625899580619406, 0.09052588208910872, 0.124002717146798, 0.06123896425390607, 0.08394473253443613, 0.1488069069897916, 0.11855283008123862, 0.09145130050583161, 0.06700563704546714, 0.050303129636503185, 0.13706176175258278, 0.07883124181703971, 0.11913079534151638, 0.13703822067720417, 0.08168269539918316, 0.11778869795666724, 0.12095196736151503, 0.09128577326594456, 0.10701363271538011, 0.9868881356963003, 0.9815390591998592, 0.986794476175855, 0.9743702064586314, 0.9856441851331661, 0.9868768891057558, 0.9805143371912302, 0.9764364255751069, 0.9643492325721603, 0.8854785994909045, 0.8638198733894629, 0.8964462539170978, 0.8825882948710464, 0.3559191125490939, 0.9043458757613234, 0.7114321067073044, 0.8547736405538251, 0.9056614493202182, 0.303524510821122, 0.19145276933100353, 0.2133673842984405, 0.878716197599535, 0.2620886163955254, 0.19593114948726575, 0.23280505339161417, 0.2605218035488046, 0.8473972679887052, 0.24559570774198924, 0.23517882264072143, 0.22771378216966087, 0.3171828000741166, 0.21377165153763467, 0.22582002719659955, 0.22081390244552945, 0.1378612733849679, 0.22268346028151065, 0.243752440095094, 0.20397985471249935, 0.22597317714964682, 0.2283730152327652, 0.2613338934544981, 0.21645270313249187, 0.2627057250716983, 9.999999999998899e-05, 0.2704456248794338, 0.0022769086306405617, 9.999999999998899e-05, 0.0629588756667423, 0.05038881263823225, 0.049486012811279956, 0.03214975496874162, 0.0037371784415687337, 0.08865079144052912, 9.999999999998899e-05, 0.10629005494982158, 0.08491564896816728, 0.10866569395522296, 0.034346886257284326, 0.007813768068210658, 0.03211444490597515, 0.09547375352850851, 0.08642830620887276, 0.1417413809350725, 0.1159960754344993, 0.27111631707672645, 0.29828687932345477, 0.11608257432880231, 0.08719302964596376, 0.13349202339835609, 0.10165161953092372, 0.19609893224038066, 0.08132072025260573, 0.19980514126259963, 0.08142037534533009, 0.05912017288822824, 0.11761278078036197, 0.006994008277590891, 0.1350361030860835, 0.08700583934582773, 0.08801072143287125, 0.0865009132589275, 0.5720913801650838, 0.5562439605944003, 0.5989867315820625, 0.6342990394204977, 0.5590041836515293, 0.4864994281001632, 0.5875323033880153, 0.6052984788987262, 0.5725580001579126, 0.05482110182834388, 0.07193765035558841, 0.08525817349517184, 0.07236231156684825, 0.08327413834633102, 0.09557335158033498, 0.05223905142102925, 0.08037988604951718, 0.08183032980606253, 0.17869444926263822, 0.258151475939125, 0.21626524361563715, 0.4242312276316901, 0.4784876098946851, 0.20552402765474875, 0.19862201723281836, 0.3342104596468449, 0.28368672810304985, 0.20098022181637143, 0.34907920908949075, 0.22440074904839102, 0.18753875247144403, 0.3703122865749703, 0.15449169421612985, 0.16540827010797388, 0.19562877260681966, 0.13639565824642852, 0.27075711403046043, 0.22144506165579847, 0.27139906684724935, 0.27844288045408205, 0.19106190520172295, 0.3551113445784868, 0.2112595073250686, 0.22157588357802127, 0.07940383594440459, 0.24329165975700384, 0.21670008892921877, 0.22032155863108083, 0.23050330527123253, 0.3578245988023362, 0.25058767329684783, 0.26539243949145663, 0.19976518643753793, 0.2582357242163814, 0.17578609529382283, 0.1846096870173869, 0.19830884198783394, 0.1765202025803856, 0.1915870117392312, 0.18780521316720888, 0.21110387589908042, 0.1920880437405632, 0.18405231985847037, 0.18966240521553523, 0.9599985245891225, 0.1896761491641693, 0.1740583042762135, 0.20241927458509068, 0.1151442965344529, 0.16920646602713352, 0.1682535585783166, 0.1691543614891221, 0.9454210233316079, 0.11334030503404824, 0.7501505302702385, 0.6687352134130935, 0.15695668403156837, 0.2145611834602067, 0.08345586975985353, 0.09479788925453447, 0.8272875666087596, 0.18989263297318504, 0.21195187185372044, 0.19965121261840346, 0.2070423301602723, 0.21034293246275138, 0.1920171303744459, 0.22344617961471103, 0.19809067241681022, 0.20973993589689022, 0.07796796988976462, 0.1093111516180546, 0.06784782135901368, 0.10944599033515223, 0.08326679713982466, 0.10844906151385403, 0.1433692305598212, 0.09220050776768307, 0.09159646948506073]}, "mutation_prompt": null}
{"id": "d0dd5624-f3e5-45e6-bfa8-9069030cb043", "solution": "import numpy as np\n\nclass EnhancedADSOStarPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.4 * chaotic_sequence[self.iteration % len(chaotic_sequence)]  # Slightly adjusted\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                for group in np.array_split(np.random.permutation(self.population_size), 2):\n                    group_best_index = group[np.argmin(personal_best_values[group])]\n                    for i in group:\n                        if i != group_best_index:\n                            neighborhood_radius = 0.1 * (self.bounds[1] - self.bounds[0])  # Added neighborhood search\n                            population[i] = np.clip(population[group_best_index] + \n                                                    np.random.uniform(-neighborhood_radius, neighborhood_radius, self.dim), \n                                                    self.bounds[0], self.bounds[1])\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOStarPlus", "description": "EnhancedADSOStarPlus leverages adaptive inertia with a dynamic neighborhood search to improve convergence speed and accuracy.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3675c68a-a97e-4fd9-ba3c-a850fa63f3c1", "metadata": {"aucs": [0.9705347699428433, 0.9624287467636128, 0.9660675347526102, 0.9634449067916855, 0.9602078762657024, 0.9536548718790635, 0.9643672951320037, 0.9643061442054186, 0.9687820612271381, 0.902566623997177, 0.8746652184749697, 0.9068523852421699, 0.9013522233041774, 0.8818195584842309, 0.900187962718799, 0.8783281231565538, 0.9227528735164452, 0.8625899580619406, 0.09052588208910872, 0.124002717146798, 0.06123896425390607, 0.08394473253443613, 0.1488069069897916, 0.11855283008123862, 0.09145130050583161, 0.06700563704546714, 0.050303129636503185, 0.13706176175258278, 0.07883124181703971, 0.11913079534151638, 0.13703822067720417, 0.08168269539918316, 0.11778869795666724, 0.12095196736151503, 0.09128577326594456, 0.10701363271538011, 0.9868881356963003, 0.9815390591998592, 0.986794476175855, 0.9743702064586314, 0.9856441851331661, 0.9868768891057558, 0.9805143371912302, 0.9764364255751069, 0.9643492325721603, 0.8854785994909045, 0.8638198733894629, 0.8964462539170978, 0.8825882948710464, 0.3559191125490939, 0.9043458757613234, 0.7114321067073044, 0.8547736405538251, 0.9056614493202182, 0.303524510821122, 0.19145276933100353, 0.2133673842984405, 0.878716197599535, 0.2620886163955254, 0.19593114948726575, 0.23280505339161417, 0.2605218035488046, 0.8473972679887052, 0.24559570774198924, 0.23517882264072143, 0.22771378216966087, 0.3171828000741166, 0.21377165153763467, 0.22582002719659955, 0.22081390244552945, 0.1378612733849679, 0.22268346028151065, 0.243752440095094, 0.20397985471249935, 0.22597317714964682, 0.2283730152327652, 0.2613338934544981, 0.21645270313249187, 0.2627057250716983, 9.999999999998899e-05, 0.2704456248794338, 0.0022769086306405617, 9.999999999998899e-05, 0.0629588756667423, 0.05038881263823225, 0.049486012811279956, 0.03214975496874162, 0.0037371784415687337, 0.08865079144052912, 9.999999999998899e-05, 0.10629005494982158, 0.08491564896816728, 0.10866569395522296, 0.034346886257284326, 0.007813768068210658, 0.03211444490597515, 0.09547375352850851, 0.08642830620887276, 0.1417413809350725, 0.1159960754344993, 0.27111631707672645, 0.29828687932345477, 0.11608257432880231, 0.08719302964596376, 0.13349202339835609, 0.10165161953092372, 0.19609893224038066, 0.08132072025260573, 0.19980514126259963, 0.08142037534533009, 0.05912017288822824, 0.11761278078036197, 0.006994008277590891, 0.1350361030860835, 0.08700583934582773, 0.08801072143287125, 0.0865009132589275, 0.5720913801650838, 0.5562439605944003, 0.5989867315820625, 0.6342990394204977, 0.5590041836515293, 0.4864994281001632, 0.5875323033880153, 0.6052984788987262, 0.5725580001579126, 0.05482110182834388, 0.07193765035558841, 0.08525817349517184, 0.07236231156684825, 0.08327413834633102, 0.09557335158033498, 0.05223905142102925, 0.08037988604951718, 0.08183032980606253, 0.17869444926263822, 0.258151475939125, 0.21626524361563715, 0.4242312276316901, 0.4784876098946851, 0.20552402765474875, 0.19862201723281836, 0.3342104596468449, 0.28368672810304985, 0.20098022181637143, 0.34907920908949075, 0.22440074904839102, 0.18753875247144403, 0.3703122865749703, 0.15449169421612985, 0.16540827010797388, 0.19562877260681966, 0.13639565824642852, 0.27075711403046043, 0.22144506165579847, 0.27139906684724935, 0.27844288045408205, 0.19106190520172295, 0.3551113445784868, 0.2112595073250686, 0.22157588357802127, 0.07940383594440459, 0.24329165975700384, 0.21670008892921877, 0.22032155863108083, 0.23050330527123253, 0.3578245988023362, 0.25058767329684783, 0.26539243949145663, 0.19976518643753793, 0.2582357242163814, 0.17578609529382283, 0.1846096870173869, 0.19830884198783394, 0.1765202025803856, 0.1915870117392312, 0.18780521316720888, 0.21110387589908042, 0.1920880437405632, 0.18405231985847037, 0.18966240521553523, 0.9599985245891225, 0.1896761491641693, 0.1740583042762135, 0.20241927458509068, 0.1151442965344529, 0.16920646602713352, 0.1682535585783166, 0.1691543614891221, 0.9454210233316079, 0.11334030503404824, 0.7501505302702385, 0.6687352134130935, 0.15695668403156837, 0.2145611834602067, 0.08345586975985353, 0.09479788925453447, 0.8272875666087596, 0.18989263297318504, 0.21195187185372044, 0.19965121261840346, 0.2070423301602723, 0.21034293246275138, 0.1920171303744459, 0.22344617961471103, 0.19809067241681022, 0.20973993589689022, 0.07796796988976462, 0.1093111516180546, 0.06784782135901368, 0.10944599033515223, 0.08326679713982466, 0.10844906151385403, 0.1433692305598212, 0.09220050776768307, 0.09159646948506073]}, "mutation_prompt": null}
{"id": "55e11e6d-e51b-45d6-9419-520f94cb5eba", "solution": "import numpy as np\n\nclass EnhancedADSOStarPlusPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.4 * np.cos(chaotic_sequence[self.iteration % len(chaotic_sequence)])  # Oscillating inertia\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                for group in np.array_split(np.random.permutation(self.population_size), 2):\n                    group_best_index = group[np.argmin(personal_best_values[group])]\n                    for i in group:\n                        if i != group_best_index:\n                            neighborhood_radius = 0.1 * np.abs(self.bounds[1] - self.bounds[0])  # Adaptive scaling\n                            population[i] = np.clip(population[group_best_index] + \n                                                    np.random.uniform(-neighborhood_radius, neighborhood_radius, self.dim), \n                                                    self.bounds[0], self.bounds[1])\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOStarPlusPlus", "description": "EnhancedADSOStarPlusPlus integrates adaptive boundary scaling and oscillating inertia weight for improved exploration and exploitation balance.", "configspace": "", "generation": 88, "fitness": 0.20832273802090528, "feedback": "The algorithm EnhancedADSOStarPlusPlus got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.21 with standard deviation 0.20.", "error": "", "parent_id": "3675c68a-a97e-4fd9-ba3c-a850fa63f3c1", "metadata": {"aucs": [0.3822917376739182, 0.4080180242599454, 0.4227428524378506, 0.39072603786836135, 0.3876646365353753, 0.39149964103222057, 0.3909526844795861, 0.39683312189499864, 0.3853228147058826, 0.08442049242448213, 0.02644195270067029, 0.014166003345539302, 0.03846425159123623, 0.08352359035073154, 0.030301537255467692, 0.03133962869473361, 9.999999999998899e-05, 0.00581798462844163, 0.12641121050452753, 0.10827608948090106, 0.1092290338849472, 0.12585792815467156, 0.12937258143394048, 0.12014514718643243, 0.11635369271046325, 0.11679977136177644, 0.11933505932981991, 0.12260040114243187, 0.1149555478125116, 0.09053431599720929, 0.11287049972406404, 0.09293764038741015, 0.08275392931876091, 0.1050863771159577, 0.10824690530662306, 0.11585356081930498, 0.9878251884817538, 0.9844661237571691, 0.9867244400843685, 0.9861424265386242, 0.9865855628254327, 0.9888748771917046, 0.9833801440767564, 0.9868520271730565, 0.9627204190237892, 0.25026675687359756, 0.28024103146048895, 0.2569217511412849, 0.2885761565557743, 0.15356209019021005, 0.223778644702872, 0.25714469699115516, 0.20460925171632016, 0.2343830382616976, 0.29291062266359913, 0.24834100951682025, 0.31689548417255997, 0.2921678827811588, 0.2978924378926643, 0.26113970390717, 0.2995691878843121, 0.3025608876600103, 0.32905956822689597, 0.09316317051526257, 0.19174092333463355, 0.14796830687310847, 0.14688224791234894, 0.14120407345004748, 0.15725565015467602, 0.126938857155955, 0.1562314114968142, 0.1450599606585039, 0.14257825084775377, 0.12643113400731798, 0.16038235820289815, 0.12892909499100513, 0.14384496375412947, 0.1350604117736206, 0.12337376991490256, 0.11955045284322519, 0.12815527665509874, 0.025900389500864374, 9.999999999998899e-05, 0.02512060062012189, 0.009176234982021914, 0.004518783354856892, 9.999999999998899e-05, 0.009139055477424107, 9.999999999998899e-05, 0.0013284377338482756, 0.11285541294053525, 0.06599716946043988, 0.04449821969310541, 0.092216937081952, 0.015634627741488605, 0.0433276750695728, 0.15617590884277233, 0.023187427289324436, 0.11497501522483056, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01748827095864325, 0.15193613375421444, 0.07722250134269215, 0.0799588240897614, 0.11790304343438385, 0.07057524703338569, 0.09129162436115235, 0.06700588776190974, 0.07268309733400025, 0.06244347053047494, 0.3660110661646653, 0.3858579758078914, 0.36975055063300577, 0.3755376195295774, 0.4451928768420116, 0.3948688783358494, 0.3578897444897029, 0.37975797937961875, 0.35733773430854177, 0.0709272898656007, 0.11726650271710537, 0.12005775475742708, 0.113198426507638, 0.1074318748772426, 0.11794106803523663, 0.10789605631398058, 0.12443119756788068, 0.11645833834328967, 0.19816058417621285, 0.2148249406582986, 0.24610718583534374, 0.15973529511166285, 0.18113934397841958, 0.21521918105461768, 0.21615427587219205, 0.2126263383575645, 0.24354155126054478, 0.2596232898497901, 0.2698700175132601, 0.28094137880316783, 0.31042766438876324, 0.25698612616919103, 0.27136359154653567, 0.2647661388941017, 0.20708506590679732, 0.2511153084112945, 0.2904804789750407, 0.20124277133760904, 0.19406097307868497, 0.17963412663217948, 0.19902869757813635, 0.21173871723860382, 0.23497723941748527, 0.14721186348357773, 0.19729234129076256, 0.2559124303198862, 0.201113460469317, 0.22296160336689907, 0.21227908065457335, 0.26623844533032226, 0.22565728552576225, 0.2029370371659618, 0.22264646334680138, 0.26198503358112846, 0.20482450445793476, 0.19575997071864715, 0.18949679752460058, 0.19151421009839575, 0.1845607193614106, 0.18736343339500106, 0.19001131925275072, 0.2090746372272515, 0.19439957959267495, 0.1849911171574875, 0.11445303824869801, 0.18663988847506696, 0.1330950247460394, 0.20077706589130928, 0.14689648702335667, 0.16596233144910788, 0.15025548614995754, 0.16285885734388572, 0.4862156227402544, 0.11214786642037922, 0.4926096651009432, 0.08200713077170263, 0.15286518142590033, 0.21005830900100342, 0.4337375622391566, 0.48326896065722647, 0.5088325290267641, 0.1884762008891998, 0.18160459559769337, 0.201496433916047, 0.20022983469917188, 0.19414416144715463, 0.18333690559070992, 0.1891644622814005, 0.20866911994523696, 0.17575383909262765, 0.09309383977953001, 0.09667567203744243, 0.0892115255518996, 0.12771055692079503, 0.09695845748694387, 0.12946013225620723, 0.09476242165492532, 0.0905565404302241, 0.0865827509271434]}, "mutation_prompt": null}
{"id": "8f75202e-091b-4ce1-8aad-d3ed0d02f843", "solution": "import numpy as np\n\nclass EnhancedADSOStarPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.4 * chaotic_sequence[self.iteration % len(chaotic_sequence)]  # Slightly adjusted\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                for group in np.array_split(np.random.permutation(self.population_size), 2):\n                    group_best_index = group[np.argmin(personal_best_values[group])]\n                    for i in group:\n                        if i != group_best_index:\n                            neighborhood_radius = 0.1 * (self.bounds[1] - self.bounds[0])  # Added neighborhood search\n                            population[i] = np.clip(population[group_best_index] + \n                                                    np.random.uniform(-neighborhood_radius, neighborhood_radius, self.dim), \n                                                    self.bounds[0], self.bounds[1])\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOStarPlus", "description": "EnhancedADSOStarPlus leverages adaptive inertia with a dynamic neighborhood search to improve convergence speed and accuracy.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3675c68a-a97e-4fd9-ba3c-a850fa63f3c1", "metadata": {"aucs": [0.9705347699428433, 0.9624287467636128, 0.9660675347526102, 0.9634449067916855, 0.9602078762657024, 0.9536548718790635, 0.9643672951320037, 0.9643061442054186, 0.9687820612271381, 0.902566623997177, 0.8746652184749697, 0.9068523852421699, 0.9013522233041774, 0.8818195584842309, 0.900187962718799, 0.8783281231565538, 0.9227528735164452, 0.8625899580619406, 0.09052588208910872, 0.124002717146798, 0.06123896425390607, 0.08394473253443613, 0.1488069069897916, 0.11855283008123862, 0.09145130050583161, 0.06700563704546714, 0.050303129636503185, 0.13706176175258278, 0.07883124181703971, 0.11913079534151638, 0.13703822067720417, 0.08168269539918316, 0.11778869795666724, 0.12095196736151503, 0.09128577326594456, 0.10701363271538011, 0.9868881356963003, 0.9815390591998592, 0.986794476175855, 0.9743702064586314, 0.9856441851331661, 0.9868768891057558, 0.9805143371912302, 0.9764364255751069, 0.9643492325721603, 0.8854785994909045, 0.8638198733894629, 0.8964462539170978, 0.8825882948710464, 0.3559191125490939, 0.9043458757613234, 0.7114321067073044, 0.8547736405538251, 0.9056614493202182, 0.303524510821122, 0.19145276933100353, 0.2133673842984405, 0.878716197599535, 0.2620886163955254, 0.19593114948726575, 0.23280505339161417, 0.2605218035488046, 0.8473972679887052, 0.24559570774198924, 0.23517882264072143, 0.22771378216966087, 0.3171828000741166, 0.21377165153763467, 0.22582002719659955, 0.22081390244552945, 0.1378612733849679, 0.22268346028151065, 0.243752440095094, 0.20397985471249935, 0.22597317714964682, 0.2283730152327652, 0.2613338934544981, 0.21645270313249187, 0.2627057250716983, 9.999999999998899e-05, 0.2704456248794338, 0.0022769086306405617, 9.999999999998899e-05, 0.0629588756667423, 0.05038881263823225, 0.049486012811279956, 0.03214975496874162, 0.0037371784415687337, 0.08865079144052912, 9.999999999998899e-05, 0.10629005494982158, 0.08491564896816728, 0.10866569395522296, 0.034346886257284326, 0.007813768068210658, 0.03211444490597515, 0.09547375352850851, 0.08642830620887276, 0.1417413809350725, 0.1159960754344993, 0.27111631707672645, 0.29828687932345477, 0.11608257432880231, 0.08719302964596376, 0.13349202339835609, 0.10165161953092372, 0.19609893224038066, 0.08132072025260573, 0.19980514126259963, 0.08142037534533009, 0.05912017288822824, 0.11761278078036197, 0.006994008277590891, 0.1350361030860835, 0.08700583934582773, 0.08801072143287125, 0.0865009132589275, 0.5720913801650838, 0.5562439605944003, 0.5989867315820625, 0.6342990394204977, 0.5590041836515293, 0.4864994281001632, 0.5875323033880153, 0.6052984788987262, 0.5725580001579126, 0.05482110182834388, 0.07193765035558841, 0.08525817349517184, 0.07236231156684825, 0.08327413834633102, 0.09557335158033498, 0.05223905142102925, 0.08037988604951718, 0.08183032980606253, 0.17869444926263822, 0.258151475939125, 0.21626524361563715, 0.4242312276316901, 0.4784876098946851, 0.20552402765474875, 0.19862201723281836, 0.3342104596468449, 0.28368672810304985, 0.20098022181637143, 0.34907920908949075, 0.22440074904839102, 0.18753875247144403, 0.3703122865749703, 0.15449169421612985, 0.16540827010797388, 0.19562877260681966, 0.13639565824642852, 0.27075711403046043, 0.22144506165579847, 0.27139906684724935, 0.27844288045408205, 0.19106190520172295, 0.3551113445784868, 0.2112595073250686, 0.22157588357802127, 0.07940383594440459, 0.24329165975700384, 0.21670008892921877, 0.22032155863108083, 0.23050330527123253, 0.3578245988023362, 0.25058767329684783, 0.26539243949145663, 0.19976518643753793, 0.2582357242163814, 0.17578609529382283, 0.1846096870173869, 0.19830884198783394, 0.1765202025803856, 0.1915870117392312, 0.18780521316720888, 0.21110387589908042, 0.1920880437405632, 0.18405231985847037, 0.18966240521553523, 0.9599985245891225, 0.1896761491641693, 0.1740583042762135, 0.20241927458509068, 0.1151442965344529, 0.16920646602713352, 0.1682535585783166, 0.1691543614891221, 0.9454210233316079, 0.11334030503404824, 0.7501505302702385, 0.6687352134130935, 0.15695668403156837, 0.2145611834602067, 0.08345586975985353, 0.09479788925453447, 0.8272875666087596, 0.18989263297318504, 0.21195187185372044, 0.19965121261840346, 0.2070423301602723, 0.21034293246275138, 0.1920171303744459, 0.22344617961471103, 0.19809067241681022, 0.20973993589689022, 0.07796796988976462, 0.1093111516180546, 0.06784782135901368, 0.10944599033515223, 0.08326679713982466, 0.10844906151385403, 0.1433692305598212, 0.09220050776768307, 0.09159646948506073]}, "mutation_prompt": null}
{"id": "1b002107-11b7-478d-b262-129f6fe56a45", "solution": "import numpy as np\n\nclass EnhancedADSOStarPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.4 * chaotic_sequence[self.iteration % len(chaotic_sequence)]  # Slightly adjusted\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                for group in np.array_split(np.random.permutation(self.population_size), 2):\n                    group_best_index = group[np.argmin(personal_best_values[group])]\n                    for i in group:\n                        if i != group_best_index:\n                            neighborhood_radius = 0.1 * (self.bounds[1] - self.bounds[0])  # Added neighborhood search\n                            population[i] = np.clip(population[group_best_index] + \n                                                    np.random.uniform(-neighborhood_radius, neighborhood_radius, self.dim), \n                                                    self.bounds[0], self.bounds[1])\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOStarPlus", "description": "EnhancedADSOStarPlus leverages adaptive inertia with a dynamic neighborhood search to improve convergence speed and accuracy.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3675c68a-a97e-4fd9-ba3c-a850fa63f3c1", "metadata": {"aucs": [0.9705347699428433, 0.9624287467636128, 0.9660675347526102, 0.9634449067916855, 0.9602078762657024, 0.9536548718790635, 0.9643672951320037, 0.9643061442054186, 0.9687820612271381, 0.902566623997177, 0.8746652184749697, 0.9068523852421699, 0.9013522233041774, 0.8818195584842309, 0.900187962718799, 0.8783281231565538, 0.9227528735164452, 0.8625899580619406, 0.09052588208910872, 0.124002717146798, 0.06123896425390607, 0.08394473253443613, 0.1488069069897916, 0.11855283008123862, 0.09145130050583161, 0.06700563704546714, 0.050303129636503185, 0.13706176175258278, 0.07883124181703971, 0.11913079534151638, 0.13703822067720417, 0.08168269539918316, 0.11778869795666724, 0.12095196736151503, 0.09128577326594456, 0.10701363271538011, 0.9868881356963003, 0.9815390591998592, 0.986794476175855, 0.9743702064586314, 0.9856441851331661, 0.9868768891057558, 0.9805143371912302, 0.9764364255751069, 0.9643492325721603, 0.8854785994909045, 0.8638198733894629, 0.8964462539170978, 0.8825882948710464, 0.3559191125490939, 0.9043458757613234, 0.7114321067073044, 0.8547736405538251, 0.9056614493202182, 0.303524510821122, 0.19145276933100353, 0.2133673842984405, 0.878716197599535, 0.2620886163955254, 0.19593114948726575, 0.23280505339161417, 0.2605218035488046, 0.8473972679887052, 0.24559570774198924, 0.23517882264072143, 0.22771378216966087, 0.3171828000741166, 0.21377165153763467, 0.22582002719659955, 0.22081390244552945, 0.1378612733849679, 0.22268346028151065, 0.243752440095094, 0.20397985471249935, 0.22597317714964682, 0.2283730152327652, 0.2613338934544981, 0.21645270313249187, 0.2627057250716983, 9.999999999998899e-05, 0.2704456248794338, 0.0022769086306405617, 9.999999999998899e-05, 0.0629588756667423, 0.05038881263823225, 0.049486012811279956, 0.03214975496874162, 0.0037371784415687337, 0.08865079144052912, 9.999999999998899e-05, 0.10629005494982158, 0.08491564896816728, 0.10866569395522296, 0.034346886257284326, 0.007813768068210658, 0.03211444490597515, 0.09547375352850851, 0.08642830620887276, 0.1417413809350725, 0.1159960754344993, 0.27111631707672645, 0.29828687932345477, 0.11608257432880231, 0.08719302964596376, 0.13349202339835609, 0.10165161953092372, 0.19609893224038066, 0.08132072025260573, 0.19980514126259963, 0.08142037534533009, 0.05912017288822824, 0.11761278078036197, 0.006994008277590891, 0.1350361030860835, 0.08700583934582773, 0.08801072143287125, 0.0865009132589275, 0.5720913801650838, 0.5562439605944003, 0.5989867315820625, 0.6342990394204977, 0.5590041836515293, 0.4864994281001632, 0.5875323033880153, 0.6052984788987262, 0.5725580001579126, 0.05482110182834388, 0.07193765035558841, 0.08525817349517184, 0.07236231156684825, 0.08327413834633102, 0.09557335158033498, 0.05223905142102925, 0.08037988604951718, 0.08183032980606253, 0.17869444926263822, 0.258151475939125, 0.21626524361563715, 0.4242312276316901, 0.4784876098946851, 0.20552402765474875, 0.19862201723281836, 0.3342104596468449, 0.28368672810304985, 0.20098022181637143, 0.34907920908949075, 0.22440074904839102, 0.18753875247144403, 0.3703122865749703, 0.15449169421612985, 0.16540827010797388, 0.19562877260681966, 0.13639565824642852, 0.27075711403046043, 0.22144506165579847, 0.27139906684724935, 0.27844288045408205, 0.19106190520172295, 0.3551113445784868, 0.2112595073250686, 0.22157588357802127, 0.07940383594440459, 0.24329165975700384, 0.21670008892921877, 0.22032155863108083, 0.23050330527123253, 0.3578245988023362, 0.25058767329684783, 0.26539243949145663, 0.19976518643753793, 0.2582357242163814, 0.17578609529382283, 0.1846096870173869, 0.19830884198783394, 0.1765202025803856, 0.1915870117392312, 0.18780521316720888, 0.21110387589908042, 0.1920880437405632, 0.18405231985847037, 0.18966240521553523, 0.9599985245891225, 0.1896761491641693, 0.1740583042762135, 0.20241927458509068, 0.1151442965344529, 0.16920646602713352, 0.1682535585783166, 0.1691543614891221, 0.9454210233316079, 0.11334030503404824, 0.7501505302702385, 0.6687352134130935, 0.15695668403156837, 0.2145611834602067, 0.08345586975985353, 0.09479788925453447, 0.8272875666087596, 0.18989263297318504, 0.21195187185372044, 0.19965121261840346, 0.2070423301602723, 0.21034293246275138, 0.1920171303744459, 0.22344617961471103, 0.19809067241681022, 0.20973993589689022, 0.07796796988976462, 0.1093111516180546, 0.06784782135901368, 0.10944599033515223, 0.08326679713982466, 0.10844906151385403, 0.1433692305598212, 0.09220050776768307, 0.09159646948506073]}, "mutation_prompt": null}
{"id": "6caab07d-3d39-483c-ac51-dea3ca7f2bb0", "solution": "import numpy as np\n\nclass EnhancedADSOStarPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.4 * chaotic_sequence[self.iteration % len(chaotic_sequence)]  # Slightly adjusted\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                for group in np.array_split(np.random.permutation(self.population_size), 2):\n                    group_best_index = group[np.argmin(personal_best_values[group])]\n                    for i in group:\n                        if i != group_best_index:\n                            neighborhood_radius = 0.1 * (self.bounds[1] - self.bounds[0])  # Added neighborhood search\n                            population[i] = np.clip(population[group_best_index] + \n                                                    np.random.uniform(-neighborhood_radius, neighborhood_radius, self.dim), \n                                                    self.bounds[0], self.bounds[1])\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOStarPlus", "description": "EnhancedADSOStarPlus leverages adaptive inertia with a dynamic neighborhood search to improve convergence speed and accuracy.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3675c68a-a97e-4fd9-ba3c-a850fa63f3c1", "metadata": {"aucs": [0.9705347699428433, 0.9624287467636128, 0.9660675347526102, 0.9634449067916855, 0.9602078762657024, 0.9536548718790635, 0.9643672951320037, 0.9643061442054186, 0.9687820612271381, 0.902566623997177, 0.8746652184749697, 0.9068523852421699, 0.9013522233041774, 0.8818195584842309, 0.900187962718799, 0.8783281231565538, 0.9227528735164452, 0.8625899580619406, 0.09052588208910872, 0.124002717146798, 0.06123896425390607, 0.08394473253443613, 0.1488069069897916, 0.11855283008123862, 0.09145130050583161, 0.06700563704546714, 0.050303129636503185, 0.13706176175258278, 0.07883124181703971, 0.11913079534151638, 0.13703822067720417, 0.08168269539918316, 0.11778869795666724, 0.12095196736151503, 0.09128577326594456, 0.10701363271538011, 0.9868881356963003, 0.9815390591998592, 0.986794476175855, 0.9743702064586314, 0.9856441851331661, 0.9868768891057558, 0.9805143371912302, 0.9764364255751069, 0.9643492325721603, 0.8854785994909045, 0.8638198733894629, 0.8964462539170978, 0.8825882948710464, 0.3559191125490939, 0.9043458757613234, 0.7114321067073044, 0.8547736405538251, 0.9056614493202182, 0.303524510821122, 0.19145276933100353, 0.2133673842984405, 0.878716197599535, 0.2620886163955254, 0.19593114948726575, 0.23280505339161417, 0.2605218035488046, 0.8473972679887052, 0.24559570774198924, 0.23517882264072143, 0.22771378216966087, 0.3171828000741166, 0.21377165153763467, 0.22582002719659955, 0.22081390244552945, 0.1378612733849679, 0.22268346028151065, 0.243752440095094, 0.20397985471249935, 0.22597317714964682, 0.2283730152327652, 0.2613338934544981, 0.21645270313249187, 0.2627057250716983, 9.999999999998899e-05, 0.2704456248794338, 0.0022769086306405617, 9.999999999998899e-05, 0.0629588756667423, 0.05038881263823225, 0.049486012811279956, 0.03214975496874162, 0.0037371784415687337, 0.08865079144052912, 9.999999999998899e-05, 0.10629005494982158, 0.08491564896816728, 0.10866569395522296, 0.034346886257284326, 0.007813768068210658, 0.03211444490597515, 0.09547375352850851, 0.08642830620887276, 0.1417413809350725, 0.1159960754344993, 0.27111631707672645, 0.29828687932345477, 0.11608257432880231, 0.08719302964596376, 0.13349202339835609, 0.10165161953092372, 0.19609893224038066, 0.08132072025260573, 0.19980514126259963, 0.08142037534533009, 0.05912017288822824, 0.11761278078036197, 0.006994008277590891, 0.1350361030860835, 0.08700583934582773, 0.08801072143287125, 0.0865009132589275, 0.5720913801650838, 0.5562439605944003, 0.5989867315820625, 0.6342990394204977, 0.5590041836515293, 0.4864994281001632, 0.5875323033880153, 0.6052984788987262, 0.5725580001579126, 0.05482110182834388, 0.07193765035558841, 0.08525817349517184, 0.07236231156684825, 0.08327413834633102, 0.09557335158033498, 0.05223905142102925, 0.08037988604951718, 0.08183032980606253, 0.17869444926263822, 0.258151475939125, 0.21626524361563715, 0.4242312276316901, 0.4784876098946851, 0.20552402765474875, 0.19862201723281836, 0.3342104596468449, 0.28368672810304985, 0.20098022181637143, 0.34907920908949075, 0.22440074904839102, 0.18753875247144403, 0.3703122865749703, 0.15449169421612985, 0.16540827010797388, 0.19562877260681966, 0.13639565824642852, 0.27075711403046043, 0.22144506165579847, 0.27139906684724935, 0.27844288045408205, 0.19106190520172295, 0.3551113445784868, 0.2112595073250686, 0.22157588357802127, 0.07940383594440459, 0.24329165975700384, 0.21670008892921877, 0.22032155863108083, 0.23050330527123253, 0.3578245988023362, 0.25058767329684783, 0.26539243949145663, 0.19976518643753793, 0.2582357242163814, 0.17578609529382283, 0.1846096870173869, 0.19830884198783394, 0.1765202025803856, 0.1915870117392312, 0.18780521316720888, 0.21110387589908042, 0.1920880437405632, 0.18405231985847037, 0.18966240521553523, 0.9599985245891225, 0.1896761491641693, 0.1740583042762135, 0.20241927458509068, 0.1151442965344529, 0.16920646602713352, 0.1682535585783166, 0.1691543614891221, 0.9454210233316079, 0.11334030503404824, 0.7501505302702385, 0.6687352134130935, 0.15695668403156837, 0.2145611834602067, 0.08345586975985353, 0.09479788925453447, 0.8272875666087596, 0.18989263297318504, 0.21195187185372044, 0.19965121261840346, 0.2070423301602723, 0.21034293246275138, 0.1920171303744459, 0.22344617961471103, 0.19809067241681022, 0.20973993589689022, 0.07796796988976462, 0.1093111516180546, 0.06784782135901368, 0.10944599033515223, 0.08326679713982466, 0.10844906151385403, 0.1433692305598212, 0.09220050776768307, 0.09159646948506073]}, "mutation_prompt": null}
{"id": "a34eaa4b-ed0a-4e81-9c56-e712397dc208", "solution": "import numpy as np\n\nclass EnhancedADSOStarPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.4 * chaotic_sequence[self.iteration % len(chaotic_sequence)]  # Slightly adjusted\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                for group in np.array_split(np.random.permutation(self.population_size), 2):\n                    group_best_index = group[np.argmin(personal_best_values[group])]\n                    for i in group:\n                        if i != group_best_index:\n                            neighborhood_radius = 0.1 * (self.bounds[1] - self.bounds[0])  # Added neighborhood search\n                            population[i] = np.clip(population[group_best_index] + \n                                                    np.random.uniform(-neighborhood_radius, neighborhood_radius, self.dim), \n                                                    self.bounds[0], self.bounds[1])\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOStarPlus", "description": "EnhancedADSOStarPlus leverages adaptive inertia with a dynamic neighborhood search to improve convergence speed and accuracy.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3675c68a-a97e-4fd9-ba3c-a850fa63f3c1", "metadata": {"aucs": [0.9705347699428433, 0.9624287467636128, 0.9660675347526102, 0.9634449067916855, 0.9602078762657024, 0.9536548718790635, 0.9643672951320037, 0.9643061442054186, 0.9687820612271381, 0.902566623997177, 0.8746652184749697, 0.9068523852421699, 0.9013522233041774, 0.8818195584842309, 0.900187962718799, 0.8783281231565538, 0.9227528735164452, 0.8625899580619406, 0.09052588208910872, 0.124002717146798, 0.06123896425390607, 0.08394473253443613, 0.1488069069897916, 0.11855283008123862, 0.09145130050583161, 0.06700563704546714, 0.050303129636503185, 0.13706176175258278, 0.07883124181703971, 0.11913079534151638, 0.13703822067720417, 0.08168269539918316, 0.11778869795666724, 0.12095196736151503, 0.09128577326594456, 0.10701363271538011, 0.9868881356963003, 0.9815390591998592, 0.986794476175855, 0.9743702064586314, 0.9856441851331661, 0.9868768891057558, 0.9805143371912302, 0.9764364255751069, 0.9643492325721603, 0.8854785994909045, 0.8638198733894629, 0.8964462539170978, 0.8825882948710464, 0.3559191125490939, 0.9043458757613234, 0.7114321067073044, 0.8547736405538251, 0.9056614493202182, 0.303524510821122, 0.19145276933100353, 0.2133673842984405, 0.878716197599535, 0.2620886163955254, 0.19593114948726575, 0.23280505339161417, 0.2605218035488046, 0.8473972679887052, 0.24559570774198924, 0.23517882264072143, 0.22771378216966087, 0.3171828000741166, 0.21377165153763467, 0.22582002719659955, 0.22081390244552945, 0.1378612733849679, 0.22268346028151065, 0.243752440095094, 0.20397985471249935, 0.22597317714964682, 0.2283730152327652, 0.2613338934544981, 0.21645270313249187, 0.2627057250716983, 9.999999999998899e-05, 0.2704456248794338, 0.0022769086306405617, 9.999999999998899e-05, 0.0629588756667423, 0.05038881263823225, 0.049486012811279956, 0.03214975496874162, 0.0037371784415687337, 0.08865079144052912, 9.999999999998899e-05, 0.10629005494982158, 0.08491564896816728, 0.10866569395522296, 0.034346886257284326, 0.007813768068210658, 0.03211444490597515, 0.09547375352850851, 0.08642830620887276, 0.1417413809350725, 0.1159960754344993, 0.27111631707672645, 0.29828687932345477, 0.11608257432880231, 0.08719302964596376, 0.13349202339835609, 0.10165161953092372, 0.19609893224038066, 0.08132072025260573, 0.19980514126259963, 0.08142037534533009, 0.05912017288822824, 0.11761278078036197, 0.006994008277590891, 0.1350361030860835, 0.08700583934582773, 0.08801072143287125, 0.0865009132589275, 0.5720913801650838, 0.5562439605944003, 0.5989867315820625, 0.6342990394204977, 0.5590041836515293, 0.4864994281001632, 0.5875323033880153, 0.6052984788987262, 0.5725580001579126, 0.05482110182834388, 0.07193765035558841, 0.08525817349517184, 0.07236231156684825, 0.08327413834633102, 0.09557335158033498, 0.05223905142102925, 0.08037988604951718, 0.08183032980606253, 0.17869444926263822, 0.258151475939125, 0.21626524361563715, 0.4242312276316901, 0.4784876098946851, 0.20552402765474875, 0.19862201723281836, 0.3342104596468449, 0.28368672810304985, 0.20098022181637143, 0.34907920908949075, 0.22440074904839102, 0.18753875247144403, 0.3703122865749703, 0.15449169421612985, 0.16540827010797388, 0.19562877260681966, 0.13639565824642852, 0.27075711403046043, 0.22144506165579847, 0.27139906684724935, 0.27844288045408205, 0.19106190520172295, 0.3551113445784868, 0.2112595073250686, 0.22157588357802127, 0.07940383594440459, 0.24329165975700384, 0.21670008892921877, 0.22032155863108083, 0.23050330527123253, 0.3578245988023362, 0.25058767329684783, 0.26539243949145663, 0.19976518643753793, 0.2582357242163814, 0.17578609529382283, 0.1846096870173869, 0.19830884198783394, 0.1765202025803856, 0.1915870117392312, 0.18780521316720888, 0.21110387589908042, 0.1920880437405632, 0.18405231985847037, 0.18966240521553523, 0.9599985245891225, 0.1896761491641693, 0.1740583042762135, 0.20241927458509068, 0.1151442965344529, 0.16920646602713352, 0.1682535585783166, 0.1691543614891221, 0.9454210233316079, 0.11334030503404824, 0.7501505302702385, 0.6687352134130935, 0.15695668403156837, 0.2145611834602067, 0.08345586975985353, 0.09479788925453447, 0.8272875666087596, 0.18989263297318504, 0.21195187185372044, 0.19965121261840346, 0.2070423301602723, 0.21034293246275138, 0.1920171303744459, 0.22344617961471103, 0.19809067241681022, 0.20973993589689022, 0.07796796988976462, 0.1093111516180546, 0.06784782135901368, 0.10944599033515223, 0.08326679713982466, 0.10844906151385403, 0.1433692305598212, 0.09220050776768307, 0.09159646948506073]}, "mutation_prompt": null}
{"id": "bde08201-d39f-4693-9484-0ef2adf8d364", "solution": "import numpy as np\n\nclass EnhancedADSOStarPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.4 * chaotic_sequence[self.iteration % len(chaotic_sequence)]  # Slightly adjusted\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                for group in np.array_split(np.random.permutation(self.population_size), 2):\n                    group_best_index = group[np.argmin(personal_best_values[group])]\n                    for i in group:\n                        if i != group_best_index:\n                            neighborhood_radius = 0.1 * (self.bounds[1] - self.bounds[0])  # Added neighborhood search\n                            population[i] = np.clip(population[group_best_index] + \n                                                    np.random.uniform(-neighborhood_radius, neighborhood_radius, self.dim), \n                                                    self.bounds[0], self.bounds[1])\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOStarPlus", "description": "EnhancedADSOStarPlus leverages adaptive inertia with a dynamic neighborhood search to improve convergence speed and accuracy.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3675c68a-a97e-4fd9-ba3c-a850fa63f3c1", "metadata": {"aucs": [0.9705347699428433, 0.9624287467636128, 0.9660675347526102, 0.9634449067916855, 0.9602078762657024, 0.9536548718790635, 0.9643672951320037, 0.9643061442054186, 0.9687820612271381, 0.902566623997177, 0.8746652184749697, 0.9068523852421699, 0.9013522233041774, 0.8818195584842309, 0.900187962718799, 0.8783281231565538, 0.9227528735164452, 0.8625899580619406, 0.09052588208910872, 0.124002717146798, 0.06123896425390607, 0.08394473253443613, 0.1488069069897916, 0.11855283008123862, 0.09145130050583161, 0.06700563704546714, 0.050303129636503185, 0.13706176175258278, 0.07883124181703971, 0.11913079534151638, 0.13703822067720417, 0.08168269539918316, 0.11778869795666724, 0.12095196736151503, 0.09128577326594456, 0.10701363271538011, 0.9868881356963003, 0.9815390591998592, 0.986794476175855, 0.9743702064586314, 0.9856441851331661, 0.9868768891057558, 0.9805143371912302, 0.9764364255751069, 0.9643492325721603, 0.8854785994909045, 0.8638198733894629, 0.8964462539170978, 0.8825882948710464, 0.3559191125490939, 0.9043458757613234, 0.7114321067073044, 0.8547736405538251, 0.9056614493202182, 0.303524510821122, 0.19145276933100353, 0.2133673842984405, 0.878716197599535, 0.2620886163955254, 0.19593114948726575, 0.23280505339161417, 0.2605218035488046, 0.8473972679887052, 0.24559570774198924, 0.23517882264072143, 0.22771378216966087, 0.3171828000741166, 0.21377165153763467, 0.22582002719659955, 0.22081390244552945, 0.1378612733849679, 0.22268346028151065, 0.243752440095094, 0.20397985471249935, 0.22597317714964682, 0.2283730152327652, 0.2613338934544981, 0.21645270313249187, 0.2627057250716983, 9.999999999998899e-05, 0.2704456248794338, 0.0022769086306405617, 9.999999999998899e-05, 0.0629588756667423, 0.05038881263823225, 0.049486012811279956, 0.03214975496874162, 0.0037371784415687337, 0.08865079144052912, 9.999999999998899e-05, 0.10629005494982158, 0.08491564896816728, 0.10866569395522296, 0.034346886257284326, 0.007813768068210658, 0.03211444490597515, 0.09547375352850851, 0.08642830620887276, 0.1417413809350725, 0.1159960754344993, 0.27111631707672645, 0.29828687932345477, 0.11608257432880231, 0.08719302964596376, 0.13349202339835609, 0.10165161953092372, 0.19609893224038066, 0.08132072025260573, 0.19980514126259963, 0.08142037534533009, 0.05912017288822824, 0.11761278078036197, 0.006994008277590891, 0.1350361030860835, 0.08700583934582773, 0.08801072143287125, 0.0865009132589275, 0.5720913801650838, 0.5562439605944003, 0.5989867315820625, 0.6342990394204977, 0.5590041836515293, 0.4864994281001632, 0.5875323033880153, 0.6052984788987262, 0.5725580001579126, 0.05482110182834388, 0.07193765035558841, 0.08525817349517184, 0.07236231156684825, 0.08327413834633102, 0.09557335158033498, 0.05223905142102925, 0.08037988604951718, 0.08183032980606253, 0.17869444926263822, 0.258151475939125, 0.21626524361563715, 0.4242312276316901, 0.4784876098946851, 0.20552402765474875, 0.19862201723281836, 0.3342104596468449, 0.28368672810304985, 0.20098022181637143, 0.34907920908949075, 0.22440074904839102, 0.18753875247144403, 0.3703122865749703, 0.15449169421612985, 0.16540827010797388, 0.19562877260681966, 0.13639565824642852, 0.27075711403046043, 0.22144506165579847, 0.27139906684724935, 0.27844288045408205, 0.19106190520172295, 0.3551113445784868, 0.2112595073250686, 0.22157588357802127, 0.07940383594440459, 0.24329165975700384, 0.21670008892921877, 0.22032155863108083, 0.23050330527123253, 0.3578245988023362, 0.25058767329684783, 0.26539243949145663, 0.19976518643753793, 0.2582357242163814, 0.17578609529382283, 0.1846096870173869, 0.19830884198783394, 0.1765202025803856, 0.1915870117392312, 0.18780521316720888, 0.21110387589908042, 0.1920880437405632, 0.18405231985847037, 0.18966240521553523, 0.9599985245891225, 0.1896761491641693, 0.1740583042762135, 0.20241927458509068, 0.1151442965344529, 0.16920646602713352, 0.1682535585783166, 0.1691543614891221, 0.9454210233316079, 0.11334030503404824, 0.7501505302702385, 0.6687352134130935, 0.15695668403156837, 0.2145611834602067, 0.08345586975985353, 0.09479788925453447, 0.8272875666087596, 0.18989263297318504, 0.21195187185372044, 0.19965121261840346, 0.2070423301602723, 0.21034293246275138, 0.1920171303744459, 0.22344617961471103, 0.19809067241681022, 0.20973993589689022, 0.07796796988976462, 0.1093111516180546, 0.06784782135901368, 0.10944599033515223, 0.08326679713982466, 0.10844906151385403, 0.1433692305598212, 0.09220050776768307, 0.09159646948506073]}, "mutation_prompt": null}
{"id": "288f44d2-67b6-422c-a1a9-45a834c8e20f", "solution": "import numpy as np\n\nclass EnhancedADSOStarPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.4 * chaotic_sequence[self.iteration % len(chaotic_sequence)]  # Slightly adjusted\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                for group in np.array_split(np.random.permutation(self.population_size), 2):\n                    group_best_index = group[np.argmin(personal_best_values[group])]\n                    for i in group:\n                        if i != group_best_index:\n                            neighborhood_radius = 0.1 * (self.bounds[1] - self.bounds[0])  # Added neighborhood search\n                            population[i] = np.clip(population[group_best_index] + \n                                                    np.random.uniform(-neighborhood_radius, neighborhood_radius, self.dim), \n                                                    self.bounds[0], self.bounds[1])\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOStarPlus", "description": "EnhancedADSOStarPlus leverages adaptive inertia with a dynamic neighborhood search to improve convergence speed and accuracy.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3675c68a-a97e-4fd9-ba3c-a850fa63f3c1", "metadata": {"aucs": [0.9705347699428433, 0.9624287467636128, 0.9660675347526102, 0.9634449067916855, 0.9602078762657024, 0.9536548718790635, 0.9643672951320037, 0.9643061442054186, 0.9687820612271381, 0.902566623997177, 0.8746652184749697, 0.9068523852421699, 0.9013522233041774, 0.8818195584842309, 0.900187962718799, 0.8783281231565538, 0.9227528735164452, 0.8625899580619406, 0.09052588208910872, 0.124002717146798, 0.06123896425390607, 0.08394473253443613, 0.1488069069897916, 0.11855283008123862, 0.09145130050583161, 0.06700563704546714, 0.050303129636503185, 0.13706176175258278, 0.07883124181703971, 0.11913079534151638, 0.13703822067720417, 0.08168269539918316, 0.11778869795666724, 0.12095196736151503, 0.09128577326594456, 0.10701363271538011, 0.9868881356963003, 0.9815390591998592, 0.986794476175855, 0.9743702064586314, 0.9856441851331661, 0.9868768891057558, 0.9805143371912302, 0.9764364255751069, 0.9643492325721603, 0.8854785994909045, 0.8638198733894629, 0.8964462539170978, 0.8825882948710464, 0.3559191125490939, 0.9043458757613234, 0.7114321067073044, 0.8547736405538251, 0.9056614493202182, 0.303524510821122, 0.19145276933100353, 0.2133673842984405, 0.878716197599535, 0.2620886163955254, 0.19593114948726575, 0.23280505339161417, 0.2605218035488046, 0.8473972679887052, 0.24559570774198924, 0.23517882264072143, 0.22771378216966087, 0.3171828000741166, 0.21377165153763467, 0.22582002719659955, 0.22081390244552945, 0.1378612733849679, 0.22268346028151065, 0.243752440095094, 0.20397985471249935, 0.22597317714964682, 0.2283730152327652, 0.2613338934544981, 0.21645270313249187, 0.2627057250716983, 9.999999999998899e-05, 0.2704456248794338, 0.0022769086306405617, 9.999999999998899e-05, 0.0629588756667423, 0.05038881263823225, 0.049486012811279956, 0.03214975496874162, 0.0037371784415687337, 0.08865079144052912, 9.999999999998899e-05, 0.10629005494982158, 0.08491564896816728, 0.10866569395522296, 0.034346886257284326, 0.007813768068210658, 0.03211444490597515, 0.09547375352850851, 0.08642830620887276, 0.1417413809350725, 0.1159960754344993, 0.27111631707672645, 0.29828687932345477, 0.11608257432880231, 0.08719302964596376, 0.13349202339835609, 0.10165161953092372, 0.19609893224038066, 0.08132072025260573, 0.19980514126259963, 0.08142037534533009, 0.05912017288822824, 0.11761278078036197, 0.006994008277590891, 0.1350361030860835, 0.08700583934582773, 0.08801072143287125, 0.0865009132589275, 0.5720913801650838, 0.5562439605944003, 0.5989867315820625, 0.6342990394204977, 0.5590041836515293, 0.4864994281001632, 0.5875323033880153, 0.6052984788987262, 0.5725580001579126, 0.05482110182834388, 0.07193765035558841, 0.08525817349517184, 0.07236231156684825, 0.08327413834633102, 0.09557335158033498, 0.05223905142102925, 0.08037988604951718, 0.08183032980606253, 0.17869444926263822, 0.258151475939125, 0.21626524361563715, 0.4242312276316901, 0.4784876098946851, 0.20552402765474875, 0.19862201723281836, 0.3342104596468449, 0.28368672810304985, 0.20098022181637143, 0.34907920908949075, 0.22440074904839102, 0.18753875247144403, 0.3703122865749703, 0.15449169421612985, 0.16540827010797388, 0.19562877260681966, 0.13639565824642852, 0.27075711403046043, 0.22144506165579847, 0.27139906684724935, 0.27844288045408205, 0.19106190520172295, 0.3551113445784868, 0.2112595073250686, 0.22157588357802127, 0.07940383594440459, 0.24329165975700384, 0.21670008892921877, 0.22032155863108083, 0.23050330527123253, 0.3578245988023362, 0.25058767329684783, 0.26539243949145663, 0.19976518643753793, 0.2582357242163814, 0.17578609529382283, 0.1846096870173869, 0.19830884198783394, 0.1765202025803856, 0.1915870117392312, 0.18780521316720888, 0.21110387589908042, 0.1920880437405632, 0.18405231985847037, 0.18966240521553523, 0.9599985245891225, 0.1896761491641693, 0.1740583042762135, 0.20241927458509068, 0.1151442965344529, 0.16920646602713352, 0.1682535585783166, 0.1691543614891221, 0.9454210233316079, 0.11334030503404824, 0.7501505302702385, 0.6687352134130935, 0.15695668403156837, 0.2145611834602067, 0.08345586975985353, 0.09479788925453447, 0.8272875666087596, 0.18989263297318504, 0.21195187185372044, 0.19965121261840346, 0.2070423301602723, 0.21034293246275138, 0.1920171303744459, 0.22344617961471103, 0.19809067241681022, 0.20973993589689022, 0.07796796988976462, 0.1093111516180546, 0.06784782135901368, 0.10944599033515223, 0.08326679713982466, 0.10844906151385403, 0.1433692305598212, 0.09220050776768307, 0.09159646948506073]}, "mutation_prompt": null}
{"id": "05218909-ea12-484d-a08f-bae666dc77e3", "solution": "import numpy as np\n\nclass EnhancedADSOStarPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.4 * chaotic_sequence[self.iteration % len(chaotic_sequence)]  # Slightly adjusted\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                for group in np.array_split(np.random.permutation(self.population_size), 2):\n                    group_best_index = group[np.argmin(personal_best_values[group])]\n                    for i in group:\n                        if i != group_best_index:\n                            neighborhood_radius = 0.1 * (self.bounds[1] - self.bounds[0])  # Added neighborhood search\n                            population[i] = np.clip(population[group_best_index] + \n                                                    np.random.uniform(-neighborhood_radius, neighborhood_radius, self.dim), \n                                                    self.bounds[0], self.bounds[1])\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOStarPlus", "description": "EnhancedADSOStarPlus leverages adaptive inertia with a dynamic neighborhood search to improve convergence speed and accuracy.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3675c68a-a97e-4fd9-ba3c-a850fa63f3c1", "metadata": {"aucs": [0.9705347699428433, 0.9624287467636128, 0.9660675347526102, 0.9634449067916855, 0.9602078762657024, 0.9536548718790635, 0.9643672951320037, 0.9643061442054186, 0.9687820612271381, 0.902566623997177, 0.8746652184749697, 0.9068523852421699, 0.9013522233041774, 0.8818195584842309, 0.900187962718799, 0.8783281231565538, 0.9227528735164452, 0.8625899580619406, 0.09052588208910872, 0.124002717146798, 0.06123896425390607, 0.08394473253443613, 0.1488069069897916, 0.11855283008123862, 0.09145130050583161, 0.06700563704546714, 0.050303129636503185, 0.13706176175258278, 0.07883124181703971, 0.11913079534151638, 0.13703822067720417, 0.08168269539918316, 0.11778869795666724, 0.12095196736151503, 0.09128577326594456, 0.10701363271538011, 0.9868881356963003, 0.9815390591998592, 0.986794476175855, 0.9743702064586314, 0.9856441851331661, 0.9868768891057558, 0.9805143371912302, 0.9764364255751069, 0.9643492325721603, 0.8854785994909045, 0.8638198733894629, 0.8964462539170978, 0.8825882948710464, 0.3559191125490939, 0.9043458757613234, 0.7114321067073044, 0.8547736405538251, 0.9056614493202182, 0.303524510821122, 0.19145276933100353, 0.2133673842984405, 0.878716197599535, 0.2620886163955254, 0.19593114948726575, 0.23280505339161417, 0.2605218035488046, 0.8473972679887052, 0.24559570774198924, 0.23517882264072143, 0.22771378216966087, 0.3171828000741166, 0.21377165153763467, 0.22582002719659955, 0.22081390244552945, 0.1378612733849679, 0.22268346028151065, 0.243752440095094, 0.20397985471249935, 0.22597317714964682, 0.2283730152327652, 0.2613338934544981, 0.21645270313249187, 0.2627057250716983, 9.999999999998899e-05, 0.2704456248794338, 0.0022769086306405617, 9.999999999998899e-05, 0.0629588756667423, 0.05038881263823225, 0.049486012811279956, 0.03214975496874162, 0.0037371784415687337, 0.08865079144052912, 9.999999999998899e-05, 0.10629005494982158, 0.08491564896816728, 0.10866569395522296, 0.034346886257284326, 0.007813768068210658, 0.03211444490597515, 0.09547375352850851, 0.08642830620887276, 0.1417413809350725, 0.1159960754344993, 0.27111631707672645, 0.29828687932345477, 0.11608257432880231, 0.08719302964596376, 0.13349202339835609, 0.10165161953092372, 0.19609893224038066, 0.08132072025260573, 0.19980514126259963, 0.08142037534533009, 0.05912017288822824, 0.11761278078036197, 0.006994008277590891, 0.1350361030860835, 0.08700583934582773, 0.08801072143287125, 0.0865009132589275, 0.5720913801650838, 0.5562439605944003, 0.5989867315820625, 0.6342990394204977, 0.5590041836515293, 0.4864994281001632, 0.5875323033880153, 0.6052984788987262, 0.5725580001579126, 0.05482110182834388, 0.07193765035558841, 0.08525817349517184, 0.07236231156684825, 0.08327413834633102, 0.09557335158033498, 0.05223905142102925, 0.08037988604951718, 0.08183032980606253, 0.17869444926263822, 0.258151475939125, 0.21626524361563715, 0.4242312276316901, 0.4784876098946851, 0.20552402765474875, 0.19862201723281836, 0.3342104596468449, 0.28368672810304985, 0.20098022181637143, 0.34907920908949075, 0.22440074904839102, 0.18753875247144403, 0.3703122865749703, 0.15449169421612985, 0.16540827010797388, 0.19562877260681966, 0.13639565824642852, 0.27075711403046043, 0.22144506165579847, 0.27139906684724935, 0.27844288045408205, 0.19106190520172295, 0.3551113445784868, 0.2112595073250686, 0.22157588357802127, 0.07940383594440459, 0.24329165975700384, 0.21670008892921877, 0.22032155863108083, 0.23050330527123253, 0.3578245988023362, 0.25058767329684783, 0.26539243949145663, 0.19976518643753793, 0.2582357242163814, 0.17578609529382283, 0.1846096870173869, 0.19830884198783394, 0.1765202025803856, 0.1915870117392312, 0.18780521316720888, 0.21110387589908042, 0.1920880437405632, 0.18405231985847037, 0.18966240521553523, 0.9599985245891225, 0.1896761491641693, 0.1740583042762135, 0.20241927458509068, 0.1151442965344529, 0.16920646602713352, 0.1682535585783166, 0.1691543614891221, 0.9454210233316079, 0.11334030503404824, 0.7501505302702385, 0.6687352134130935, 0.15695668403156837, 0.2145611834602067, 0.08345586975985353, 0.09479788925453447, 0.8272875666087596, 0.18989263297318504, 0.21195187185372044, 0.19965121261840346, 0.2070423301602723, 0.21034293246275138, 0.1920171303744459, 0.22344617961471103, 0.19809067241681022, 0.20973993589689022, 0.07796796988976462, 0.1093111516180546, 0.06784782135901368, 0.10944599033515223, 0.08326679713982466, 0.10844906151385403, 0.1433692305598212, 0.09220050776768307, 0.09159646948506073]}, "mutation_prompt": null}
{"id": "2b6ccf26-91e6-49c7-a776-1697d94194ab", "solution": "import numpy as np\n\nclass EnhancedADSOStarPlusRefined:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.cos(np.linspace(0, 4 * np.pi, self.budget))  # Switched sinusoidal pattern\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.3 + 0.3 * chaotic_sequence[self.iteration % len(chaotic_sequence)]  # Refined inertia adjustment\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                adaptive_scale = 0.05 + 0.05 * chaotic_sequence[(self.iteration + 3) % len(chaotic_sequence)]\n                max_velocity = adaptive_scale * (self.bounds[1] - self.bounds[0])  # Dynamic max velocity\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                for group in np.array_split(np.random.permutation(self.population_size), 2):\n                    group_best_index = group[np.argmin(personal_best_values[group])]\n                    for i in group:\n                        if i != group_best_index:\n                            neighborhood_radius = 0.1 * (self.bounds[1] - self.bounds[0])  # Retained neighborhood search\n                            population[i] = np.clip(population[group_best_index] + \n                                                    np.random.uniform(-neighborhood_radius, neighborhood_radius, self.dim), \n                                                    self.bounds[0], self.bounds[1])\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOStarPlusRefined", "description": "EnhancedADSOStarPlusRefined integrates a chaos-enhanced dynamic inertia and adaptive velocity scaling to boost exploration and exploitation stability.", "configspace": "", "generation": 96, "fitness": 0.2572521173800738, "feedback": "The algorithm EnhancedADSOStarPlusRefined got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.26 with standard deviation 0.22.", "error": "", "parent_id": "3675c68a-a97e-4fd9-ba3c-a850fa63f3c1", "metadata": {"aucs": [0.6493195021668619, 0.6516348112410075, 0.7775884793303626, 0.6225371810725671, 0.6385552014458082, 0.669634740869161, 0.6451392922041439, 0.6583107695849517, 0.6533737547473011, 0.36846425253362636, 0.2846499912399122, 0.4980933032810959, 0.4395476806932965, 0.43158655852720584, 0.2031520661012156, 0.3318388922834473, 0.40139012800901797, 0.34756018036318137, 0.13963349817520998, 0.13727182875511645, 0.1132629103620848, 0.32802699015480163, 0.12746395325224547, 0.14133906895779969, 0.1125740983033291, 0.11514560054666179, 0.09664549973252012, 0.16576290219885126, 0.10055213169965449, 0.11611511634928107, 0.11405304221929435, 0.12772719909536323, 0.120878737373036, 0.12918948804130503, 0.12388141506983796, 0.10955647018566983, 0.9917098322419032, 0.9757163210402835, 0.9866545621956784, 0.9817796002264869, 0.9866666268222346, 0.9883028896340894, 0.9681263649365767, 0.9867195713017419, 0.9686431408284417, 0.39905719092787095, 0.4410131082563018, 0.4398537447885428, 0.4133290907499422, 0.15544466943190494, 0.3815071083568904, 0.39982677056602234, 0.3972600277269037, 0.32675708231320777, 0.36310084248929153, 0.21450458432965203, 0.42124435550564454, 0.39587472393930845, 0.32201904739225273, 0.27989569698986105, 0.23955953320273282, 0.45928188138767667, 0.23953374622777002, 0.13145312387691432, 0.17236760444534593, 0.20250601997278317, 0.2506230267029059, 0.1766987527367221, 0.17919468457250443, 0.177054738809857, 0.19954536493257236, 0.17562242827577323, 0.13619423405423092, 0.1549531291659939, 0.1654409135245538, 0.1598770896354914, 0.17871738630660317, 0.16992621427486088, 0.20627112895541233, 9.999999999998899e-05, 0.21405166796663266, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.03504801132598678, 0.012932982821842631, 0.03965137770431959, 0.004092867092201247, 9.999999999998899e-05, 0.012029867488276058, 0.13115138514003433, 0.08236710825079463, 0.0913304845665125, 0.09831788937651276, 0.005109790160575889, 0.05021250810085098, 0.0949304712877238, 0.06054582845328349, 0.09528042626760347, 0.08187993905003765, 0.04097029338802094, 0.0496572841317644, 0.1484352683940673, 0.05301514450037137, 0.052030252002512656, 0.05426117160125088, 0.026993865766655856, 0.030715269173234083, 0.1300642771879038, 0.17733548505378294, 0.1585290720643503, 0.13304185773133503, 0.048670243286371595, 0.20260305013794122, 0.08266125863610307, 0.0821139649849627, 0.09621362703861291, 0.446019397703723, 0.47175749171898984, 0.4746482316935132, 0.4795187782860746, 0.46829891673513313, 0.4509159201166931, 0.4867657816311498, 0.4534959331227916, 0.4509497405065872, 0.07562638007380973, 0.13037593652865875, 0.14553033299746698, 0.129905967185044, 0.09008904062693401, 0.0912142883420185, 0.11000911979429762, 0.09621988632965273, 0.14026797494751697, 0.2663048387149146, 0.2585092282293916, 0.4168068030587929, 0.27085328626320093, 0.3534756873725573, 0.1527838608224774, 0.1732326364526705, 0.2775350581553584, 0.29332175450470743, 0.30854868196673524, 0.316010695981255, 0.2972646569816825, 0.2813266459416607, 0.2709688301740899, 0.36195443245899495, 0.2927735218421157, 0.32648290371792577, 0.20741532798225304, 0.2746305179293824, 0.23753831013611393, 0.27206322279543205, 0.22934829888791675, 0.23904976217124307, 0.24505801396131865, 0.2081395533044259, 0.1831819590142495, 0.18174038513752888, 0.23189383051415757, 0.25940129105084964, 0.24786812424308413, 0.2493495701688212, 0.26237084219544393, 0.21536604100449963, 0.19580287324922718, 0.25517736901466204, 0.22881183506732405, 0.21726411397363743, 0.22791652220978897, 0.21817109576409743, 0.1893082863677994, 0.18672610584384608, 0.191848457170252, 0.2232403706593269, 0.17862280571731504, 0.21774089960499876, 0.18925175364470148, 0.18855765371851363, 0.18928608953818415, 0.1739420151649711, 0.20185308364874033, 0.11521105773132401, 0.16885644394390698, 0.16500229200857353, 0.169080824288819, 0.756485652640403, 0.11319965430596535, 0.5121487887563261, 0.08280261590112603, 0.21380957727489125, 0.213665047070268, 0.09485458460514107, 0.09463950854056935, 0.4580920289402488, 0.1832582123039741, 0.22573880827249937, 0.20580251368094193, 0.20081035209952047, 0.20466221222298786, 0.1958463313848421, 0.19769747297233808, 0.21210114040633343, 0.17961845932252019, 0.08821612727577488, 0.09812307589917091, 0.07913477279717096, 0.12566492332237977, 0.11004051809638582, 0.11891780633109628, 0.1219272590871282, 0.08871038487600147, 0.11661120555422644]}, "mutation_prompt": null}
{"id": "95c111d6-f037-4e78-9927-0e3cd2068383", "solution": "import numpy as np\n\nclass EnhancedADSOStarPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.4 * chaotic_sequence[self.iteration % len(chaotic_sequence)]  # Slightly adjusted\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                for group in np.array_split(np.random.permutation(self.population_size), 2):\n                    group_best_index = group[np.argmin(personal_best_values[group])]\n                    for i in group:\n                        if i != group_best_index:\n                            neighborhood_radius = 0.1 * (self.bounds[1] - self.bounds[0])  # Added neighborhood search\n                            population[i] = np.clip(population[group_best_index] + \n                                                    np.random.uniform(-neighborhood_radius, neighborhood_radius, self.dim), \n                                                    self.bounds[0], self.bounds[1])\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOStarPlus", "description": "EnhancedADSOStarPlus leverages adaptive inertia with a dynamic neighborhood search to improve convergence speed and accuracy.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3675c68a-a97e-4fd9-ba3c-a850fa63f3c1", "metadata": {"aucs": [0.9705347699428433, 0.9624287467636128, 0.9660675347526102, 0.9634449067916855, 0.9602078762657024, 0.9536548718790635, 0.9643672951320037, 0.9643061442054186, 0.9687820612271381, 0.902566623997177, 0.8746652184749697, 0.9068523852421699, 0.9013522233041774, 0.8818195584842309, 0.900187962718799, 0.8783281231565538, 0.9227528735164452, 0.8625899580619406, 0.09052588208910872, 0.124002717146798, 0.06123896425390607, 0.08394473253443613, 0.1488069069897916, 0.11855283008123862, 0.09145130050583161, 0.06700563704546714, 0.050303129636503185, 0.13706176175258278, 0.07883124181703971, 0.11913079534151638, 0.13703822067720417, 0.08168269539918316, 0.11778869795666724, 0.12095196736151503, 0.09128577326594456, 0.10701363271538011, 0.9868881356963003, 0.9815390591998592, 0.986794476175855, 0.9743702064586314, 0.9856441851331661, 0.9868768891057558, 0.9805143371912302, 0.9764364255751069, 0.9643492325721603, 0.8854785994909045, 0.8638198733894629, 0.8964462539170978, 0.8825882948710464, 0.3559191125490939, 0.9043458757613234, 0.7114321067073044, 0.8547736405538251, 0.9056614493202182, 0.303524510821122, 0.19145276933100353, 0.2133673842984405, 0.878716197599535, 0.2620886163955254, 0.19593114948726575, 0.23280505339161417, 0.2605218035488046, 0.8473972679887052, 0.24559570774198924, 0.23517882264072143, 0.22771378216966087, 0.3171828000741166, 0.21377165153763467, 0.22582002719659955, 0.22081390244552945, 0.1378612733849679, 0.22268346028151065, 0.243752440095094, 0.20397985471249935, 0.22597317714964682, 0.2283730152327652, 0.2613338934544981, 0.21645270313249187, 0.2627057250716983, 9.999999999998899e-05, 0.2704456248794338, 0.0022769086306405617, 9.999999999998899e-05, 0.0629588756667423, 0.05038881263823225, 0.049486012811279956, 0.03214975496874162, 0.0037371784415687337, 0.08865079144052912, 9.999999999998899e-05, 0.10629005494982158, 0.08491564896816728, 0.10866569395522296, 0.034346886257284326, 0.007813768068210658, 0.03211444490597515, 0.09547375352850851, 0.08642830620887276, 0.1417413809350725, 0.1159960754344993, 0.27111631707672645, 0.29828687932345477, 0.11608257432880231, 0.08719302964596376, 0.13349202339835609, 0.10165161953092372, 0.19609893224038066, 0.08132072025260573, 0.19980514126259963, 0.08142037534533009, 0.05912017288822824, 0.11761278078036197, 0.006994008277590891, 0.1350361030860835, 0.08700583934582773, 0.08801072143287125, 0.0865009132589275, 0.5720913801650838, 0.5562439605944003, 0.5989867315820625, 0.6342990394204977, 0.5590041836515293, 0.4864994281001632, 0.5875323033880153, 0.6052984788987262, 0.5725580001579126, 0.05482110182834388, 0.07193765035558841, 0.08525817349517184, 0.07236231156684825, 0.08327413834633102, 0.09557335158033498, 0.05223905142102925, 0.08037988604951718, 0.08183032980606253, 0.17869444926263822, 0.258151475939125, 0.21626524361563715, 0.4242312276316901, 0.4784876098946851, 0.20552402765474875, 0.19862201723281836, 0.3342104596468449, 0.28368672810304985, 0.20098022181637143, 0.34907920908949075, 0.22440074904839102, 0.18753875247144403, 0.3703122865749703, 0.15449169421612985, 0.16540827010797388, 0.19562877260681966, 0.13639565824642852, 0.27075711403046043, 0.22144506165579847, 0.27139906684724935, 0.27844288045408205, 0.19106190520172295, 0.3551113445784868, 0.2112595073250686, 0.22157588357802127, 0.07940383594440459, 0.24329165975700384, 0.21670008892921877, 0.22032155863108083, 0.23050330527123253, 0.3578245988023362, 0.25058767329684783, 0.26539243949145663, 0.19976518643753793, 0.2582357242163814, 0.17578609529382283, 0.1846096870173869, 0.19830884198783394, 0.1765202025803856, 0.1915870117392312, 0.18780521316720888, 0.21110387589908042, 0.1920880437405632, 0.18405231985847037, 0.18966240521553523, 0.9599985245891225, 0.1896761491641693, 0.1740583042762135, 0.20241927458509068, 0.1151442965344529, 0.16920646602713352, 0.1682535585783166, 0.1691543614891221, 0.9454210233316079, 0.11334030503404824, 0.7501505302702385, 0.6687352134130935, 0.15695668403156837, 0.2145611834602067, 0.08345586975985353, 0.09479788925453447, 0.8272875666087596, 0.18989263297318504, 0.21195187185372044, 0.19965121261840346, 0.2070423301602723, 0.21034293246275138, 0.1920171303744459, 0.22344617961471103, 0.19809067241681022, 0.20973993589689022, 0.07796796988976462, 0.1093111516180546, 0.06784782135901368, 0.10944599033515223, 0.08326679713982466, 0.10844906151385403, 0.1433692305598212, 0.09220050776768307, 0.09159646948506073]}, "mutation_prompt": null}
{"id": "873a9751-7707-4230-b99d-ed592e2cba35", "solution": "import numpy as np\n\nclass EnhancedADSOStarPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.4 * chaotic_sequence[self.iteration % len(chaotic_sequence)]  # Slightly adjusted\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                for group in np.array_split(np.random.permutation(self.population_size), 2):\n                    group_best_index = group[np.argmin(personal_best_values[group])]\n                    for i in group:\n                        if i != group_best_index:\n                            neighborhood_radius = 0.1 * (self.bounds[1] - self.bounds[0])  # Added neighborhood search\n                            population[i] = np.clip(population[group_best_index] + \n                                                    np.random.uniform(-neighborhood_radius, neighborhood_radius, self.dim), \n                                                    self.bounds[0], self.bounds[1])\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOStarPlus", "description": "EnhancedADSOStarPlus leverages adaptive inertia with a dynamic neighborhood search to improve convergence speed and accuracy.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3675c68a-a97e-4fd9-ba3c-a850fa63f3c1", "metadata": {"aucs": [0.9705347699428433, 0.9624287467636128, 0.9660675347526102, 0.9634449067916855, 0.9602078762657024, 0.9536548718790635, 0.9643672951320037, 0.9643061442054186, 0.9687820612271381, 0.902566623997177, 0.8746652184749697, 0.9068523852421699, 0.9013522233041774, 0.8818195584842309, 0.900187962718799, 0.8783281231565538, 0.9227528735164452, 0.8625899580619406, 0.09052588208910872, 0.124002717146798, 0.06123896425390607, 0.08394473253443613, 0.1488069069897916, 0.11855283008123862, 0.09145130050583161, 0.06700563704546714, 0.050303129636503185, 0.13706176175258278, 0.07883124181703971, 0.11913079534151638, 0.13703822067720417, 0.08168269539918316, 0.11778869795666724, 0.12095196736151503, 0.09128577326594456, 0.10701363271538011, 0.9868881356963003, 0.9815390591998592, 0.986794476175855, 0.9743702064586314, 0.9856441851331661, 0.9868768891057558, 0.9805143371912302, 0.9764364255751069, 0.9643492325721603, 0.8854785994909045, 0.8638198733894629, 0.8964462539170978, 0.8825882948710464, 0.3559191125490939, 0.9043458757613234, 0.7114321067073044, 0.8547736405538251, 0.9056614493202182, 0.303524510821122, 0.19145276933100353, 0.2133673842984405, 0.878716197599535, 0.2620886163955254, 0.19593114948726575, 0.23280505339161417, 0.2605218035488046, 0.8473972679887052, 0.24559570774198924, 0.23517882264072143, 0.22771378216966087, 0.3171828000741166, 0.21377165153763467, 0.22582002719659955, 0.22081390244552945, 0.1378612733849679, 0.22268346028151065, 0.243752440095094, 0.20397985471249935, 0.22597317714964682, 0.2283730152327652, 0.2613338934544981, 0.21645270313249187, 0.2627057250716983, 9.999999999998899e-05, 0.2704456248794338, 0.0022769086306405617, 9.999999999998899e-05, 0.0629588756667423, 0.05038881263823225, 0.049486012811279956, 0.03214975496874162, 0.0037371784415687337, 0.08865079144052912, 9.999999999998899e-05, 0.10629005494982158, 0.08491564896816728, 0.10866569395522296, 0.034346886257284326, 0.007813768068210658, 0.03211444490597515, 0.09547375352850851, 0.08642830620887276, 0.1417413809350725, 0.1159960754344993, 0.27111631707672645, 0.29828687932345477, 0.11608257432880231, 0.08719302964596376, 0.13349202339835609, 0.10165161953092372, 0.19609893224038066, 0.08132072025260573, 0.19980514126259963, 0.08142037534533009, 0.05912017288822824, 0.11761278078036197, 0.006994008277590891, 0.1350361030860835, 0.08700583934582773, 0.08801072143287125, 0.0865009132589275, 0.5720913801650838, 0.5562439605944003, 0.5989867315820625, 0.6342990394204977, 0.5590041836515293, 0.4864994281001632, 0.5875323033880153, 0.6052984788987262, 0.5725580001579126, 0.05482110182834388, 0.07193765035558841, 0.08525817349517184, 0.07236231156684825, 0.08327413834633102, 0.09557335158033498, 0.05223905142102925, 0.08037988604951718, 0.08183032980606253, 0.17869444926263822, 0.258151475939125, 0.21626524361563715, 0.4242312276316901, 0.4784876098946851, 0.20552402765474875, 0.19862201723281836, 0.3342104596468449, 0.28368672810304985, 0.20098022181637143, 0.34907920908949075, 0.22440074904839102, 0.18753875247144403, 0.3703122865749703, 0.15449169421612985, 0.16540827010797388, 0.19562877260681966, 0.13639565824642852, 0.27075711403046043, 0.22144506165579847, 0.27139906684724935, 0.27844288045408205, 0.19106190520172295, 0.3551113445784868, 0.2112595073250686, 0.22157588357802127, 0.07940383594440459, 0.24329165975700384, 0.21670008892921877, 0.22032155863108083, 0.23050330527123253, 0.3578245988023362, 0.25058767329684783, 0.26539243949145663, 0.19976518643753793, 0.2582357242163814, 0.17578609529382283, 0.1846096870173869, 0.19830884198783394, 0.1765202025803856, 0.1915870117392312, 0.18780521316720888, 0.21110387589908042, 0.1920880437405632, 0.18405231985847037, 0.18966240521553523, 0.9599985245891225, 0.1896761491641693, 0.1740583042762135, 0.20241927458509068, 0.1151442965344529, 0.16920646602713352, 0.1682535585783166, 0.1691543614891221, 0.9454210233316079, 0.11334030503404824, 0.7501505302702385, 0.6687352134130935, 0.15695668403156837, 0.2145611834602067, 0.08345586975985353, 0.09479788925453447, 0.8272875666087596, 0.18989263297318504, 0.21195187185372044, 0.19965121261840346, 0.2070423301602723, 0.21034293246275138, 0.1920171303744459, 0.22344617961471103, 0.19809067241681022, 0.20973993589689022, 0.07796796988976462, 0.1093111516180546, 0.06784782135901368, 0.10944599033515223, 0.08326679713982466, 0.10844906151385403, 0.1433692305598212, 0.09220050776768307, 0.09159646948506073]}, "mutation_prompt": null}
{"id": "f0cac277-f905-4f0d-a032-5bb01c2a79a9", "solution": "import numpy as np\n\nclass EnhancedADSOStarPlus:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.bounds = (-5.0, 5.0)\n        self.population_size = max(5, 2 * self.dim)\n        self.global_best_position = None\n        self.global_best_value = np.inf\n        self.iteration = 0\n        self.stagnation_threshold = 10\n\n    def __call__(self, func):\n        population = np.random.uniform(self.bounds[0], self.bounds[1], (self.population_size, self.dim))\n        velocities = np.random.uniform(-1, 1, (self.population_size, self.dim))\n        personal_best_positions = np.copy(population)\n        personal_best_values = np.array([func(ind) for ind in personal_best_positions])\n        min_index = np.argmin(personal_best_values)\n        self.global_best_position = personal_best_positions[min_index]\n        self.global_best_value = personal_best_values[min_index]\n        evaluations = self.population_size\n        chaotic_sequence = np.sin(np.linspace(0, 4 * np.pi, self.budget))\n        stagnation_counter = 0\n\n        while evaluations < self.budget:\n            prev_global_best_value = self.global_best_value\n            for i in range(self.population_size):\n                w = 0.5 + 0.4 * chaotic_sequence[self.iteration % len(chaotic_sequence)]  # Slightly adjusted\n                c1 = 1.5 + chaotic_sequence[(self.iteration + 1) % len(chaotic_sequence)]\n                c2 = 1.5 + chaotic_sequence[(self.iteration + 2) % len(chaotic_sequence)]\n\n                velocities[i] = (w * velocities[i] +\n                                 c1 * np.random.rand(self.dim) * (personal_best_positions[i] - population[i]) +\n                                 c2 * np.random.rand(self.dim) * (self.global_best_position - population[i]))\n                max_velocity = 0.1 * (self.bounds[1] - self.bounds[0])\n                velocities[i] = np.clip(velocities[i], -max_velocity, max_velocity)\n                population[i] = np.clip(population[i] + velocities[i], self.bounds[0], self.bounds[1])\n                \n                current_value = func(population[i])\n                evaluations += 1\n\n                if current_value < personal_best_values[i]:\n                    personal_best_positions[i] = population[i]\n                    personal_best_values[i] = current_value\n\n                if current_value < self.global_best_value:\n                    self.global_best_position = population[i]\n                    self.global_best_value = current_value\n\n                if evaluations >= self.budget:\n                    break\n\n            if self.global_best_value == prev_global_best_value:\n                stagnation_counter += 1\n            else:\n                stagnation_counter = 0\n\n            if stagnation_counter >= self.stagnation_threshold:\n                for group in np.array_split(np.random.permutation(self.population_size), 2):\n                    group_best_index = group[np.argmin(personal_best_values[group])]\n                    for i in group:\n                        if i != group_best_index:\n                            neighborhood_radius = 0.1 * (self.bounds[1] - self.bounds[0])  # Added neighborhood search\n                            population[i] = np.clip(population[group_best_index] + \n                                                    np.random.uniform(-neighborhood_radius, neighborhood_radius, self.dim), \n                                                    self.bounds[0], self.bounds[1])\n                stagnation_counter = 0\n\n            self.iteration += 1\n\n        return self.global_best_position, self.global_best_value", "name": "EnhancedADSOStarPlus", "description": "EnhancedADSOStarPlus leverages adaptive inertia with a dynamic neighborhood search to improve convergence speed and accuracy.", "configspace": "", "generation": 71, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "3675c68a-a97e-4fd9-ba3c-a850fa63f3c1", "metadata": {"aucs": [0.9705347699428433, 0.9624287467636128, 0.9660675347526102, 0.9634449067916855, 0.9602078762657024, 0.9536548718790635, 0.9643672951320037, 0.9643061442054186, 0.9687820612271381, 0.902566623997177, 0.8746652184749697, 0.9068523852421699, 0.9013522233041774, 0.8818195584842309, 0.900187962718799, 0.8783281231565538, 0.9227528735164452, 0.8625899580619406, 0.09052588208910872, 0.124002717146798, 0.06123896425390607, 0.08394473253443613, 0.1488069069897916, 0.11855283008123862, 0.09145130050583161, 0.06700563704546714, 0.050303129636503185, 0.13706176175258278, 0.07883124181703971, 0.11913079534151638, 0.13703822067720417, 0.08168269539918316, 0.11778869795666724, 0.12095196736151503, 0.09128577326594456, 0.10701363271538011, 0.9868881356963003, 0.9815390591998592, 0.986794476175855, 0.9743702064586314, 0.9856441851331661, 0.9868768891057558, 0.9805143371912302, 0.9764364255751069, 0.9643492325721603, 0.8854785994909045, 0.8638198733894629, 0.8964462539170978, 0.8825882948710464, 0.3559191125490939, 0.9043458757613234, 0.7114321067073044, 0.8547736405538251, 0.9056614493202182, 0.303524510821122, 0.19145276933100353, 0.2133673842984405, 0.878716197599535, 0.2620886163955254, 0.19593114948726575, 0.23280505339161417, 0.2605218035488046, 0.8473972679887052, 0.24559570774198924, 0.23517882264072143, 0.22771378216966087, 0.3171828000741166, 0.21377165153763467, 0.22582002719659955, 0.22081390244552945, 0.1378612733849679, 0.22268346028151065, 0.243752440095094, 0.20397985471249935, 0.22597317714964682, 0.2283730152327652, 0.2613338934544981, 0.21645270313249187, 0.2627057250716983, 9.999999999998899e-05, 0.2704456248794338, 0.0022769086306405617, 9.999999999998899e-05, 0.0629588756667423, 0.05038881263823225, 0.049486012811279956, 0.03214975496874162, 0.0037371784415687337, 0.08865079144052912, 9.999999999998899e-05, 0.10629005494982158, 0.08491564896816728, 0.10866569395522296, 0.034346886257284326, 0.007813768068210658, 0.03211444490597515, 0.09547375352850851, 0.08642830620887276, 0.1417413809350725, 0.1159960754344993, 0.27111631707672645, 0.29828687932345477, 0.11608257432880231, 0.08719302964596376, 0.13349202339835609, 0.10165161953092372, 0.19609893224038066, 0.08132072025260573, 0.19980514126259963, 0.08142037534533009, 0.05912017288822824, 0.11761278078036197, 0.006994008277590891, 0.1350361030860835, 0.08700583934582773, 0.08801072143287125, 0.0865009132589275, 0.5720913801650838, 0.5562439605944003, 0.5989867315820625, 0.6342990394204977, 0.5590041836515293, 0.4864994281001632, 0.5875323033880153, 0.6052984788987262, 0.5725580001579126, 0.05482110182834388, 0.07193765035558841, 0.08525817349517184, 0.07236231156684825, 0.08327413834633102, 0.09557335158033498, 0.05223905142102925, 0.08037988604951718, 0.08183032980606253, 0.17869444926263822, 0.258151475939125, 0.21626524361563715, 0.4242312276316901, 0.4784876098946851, 0.20552402765474875, 0.19862201723281836, 0.3342104596468449, 0.28368672810304985, 0.20098022181637143, 0.34907920908949075, 0.22440074904839102, 0.18753875247144403, 0.3703122865749703, 0.15449169421612985, 0.16540827010797388, 0.19562877260681966, 0.13639565824642852, 0.27075711403046043, 0.22144506165579847, 0.27139906684724935, 0.27844288045408205, 0.19106190520172295, 0.3551113445784868, 0.2112595073250686, 0.22157588357802127, 0.07940383594440459, 0.24329165975700384, 0.21670008892921877, 0.22032155863108083, 0.23050330527123253, 0.3578245988023362, 0.25058767329684783, 0.26539243949145663, 0.19976518643753793, 0.2582357242163814, 0.17578609529382283, 0.1846096870173869, 0.19830884198783394, 0.1765202025803856, 0.1915870117392312, 0.18780521316720888, 0.21110387589908042, 0.1920880437405632, 0.18405231985847037, 0.18966240521553523, 0.9599985245891225, 0.1896761491641693, 0.1740583042762135, 0.20241927458509068, 0.1151442965344529, 0.16920646602713352, 0.1682535585783166, 0.1691543614891221, 0.9454210233316079, 0.11334030503404824, 0.7501505302702385, 0.6687352134130935, 0.15695668403156837, 0.2145611834602067, 0.08345586975985353, 0.09479788925453447, 0.8272875666087596, 0.18989263297318504, 0.21195187185372044, 0.19965121261840346, 0.2070423301602723, 0.21034293246275138, 0.1920171303744459, 0.22344617961471103, 0.19809067241681022, 0.20973993589689022, 0.07796796988976462, 0.1093111516180546, 0.06784782135901368, 0.10944599033515223, 0.08326679713982466, 0.10844906151385403, 0.1433692305598212, 0.09220050776768307, 0.09159646948506073]}, "mutation_prompt": null}
