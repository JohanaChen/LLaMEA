{"id": "9440ca1f-c5eb-4d5a-87f4-83b90605219d", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = pop[a] + 0.8 * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Hybrid Monte Carlo and Differential Evolution algorithm that adaptively explores and exploits the search space using random sampling and differential mutation.", "configspace": "", "generation": 0, "fitness": 0.2721261394886455, "feedback": "The algorithm HybridMC_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.22.", "error": "", "parent_id": null, "metadata": {"aucs": [0.6094904484659245, 0.6094904484659245, 0.6094904484659245, 0.5740264170772731, 0.5740264170772731, 0.5740264170772731, 0.5997732992390283, 0.5997732992390283, 0.5997732992390283, 0.25054315208267963, 0.25054315208267963, 0.25054315208267963, 0.29155892910430803, 0.29155892910430803, 0.29155892910430803, 0.2896128878106312, 0.2896128878106312, 0.2896128878106312, 0.24777674730582844, 0.24777674730582844, 0.24777674730582844, 0.17962971175653675, 0.17962971175653675, 0.17962971175653675, 0.1299542316546196, 0.1299542316546196, 0.1299542316546196, 0.1756548681078377, 0.1756548681078377, 0.1756548681078377, 0.1655039266180438, 0.1655039266180438, 0.1655039266180438, 0.209764317953691, 0.209764317953691, 0.209764317953691, 0.9783807732023683, 0.9783807732023683, 0.9783807732023683, 0.9707396416734707, 0.9707396416734707, 0.9707396416734707, 0.9753823575942655, 0.9753823575942655, 0.9753823575942655, 0.3655791642412619, 0.3655791642412619, 0.3655791642412619, 0.36757745920470175, 0.36757745920470175, 0.36757745920470175, 0.35093671282482697, 0.35093671282482697, 0.35093671282482697, 0.5621601044827778, 0.5621601044827778, 0.5621601044827778, 0.7031789584404293, 0.7031789584404293, 0.7031789584404293, 0.3486724752543059, 0.3486724752543059, 0.3486724752543059, 0.2133720248227693, 0.2133720248227693, 0.2133720248227693, 0.21116474201367197, 0.21116474201367197, 0.21116474201367197, 0.17807847723936665, 0.17807847723936665, 0.17807847723936665, 0.19394072732809187, 0.19394072732809187, 0.19394072732809187, 0.14743822121319938, 0.14743822121319938, 0.14743822121319938, 0.1627521813566114, 0.1627521813566114, 0.1627521813566114, 0.00021510621330167456, 0.00021510621330167456, 0.00021510621330167456, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003211313072473021, 0.003211313072473021, 0.003211313072473021, 0.05334794774383156, 0.05334794774383156, 0.05334794774383156, 0.018170829135612965, 0.018170829135612965, 0.018170829135612965, 0.07152825513494188, 0.07152825513494188, 0.07152825513494188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13804106981209208, 0.13804106981209208, 0.13804106981209208, 0.13565619781337568, 0.13565619781337568, 0.13565619781337568, 0.10839694913184161, 0.10839694913184161, 0.10839694913184161, 0.4835400314073237, 0.4835400314073237, 0.4835400314073237, 0.4825020332576939, 0.4825020332576939, 0.4825020332576939, 0.4938823348046625, 0.4938823348046625, 0.4938823348046625, 0.11673742029113165, 0.11673742029113165, 0.11673742029113165, 0.09347535403835994, 0.09347535403835994, 0.09347535403835994, 0.10351829771779908, 0.10351829771779908, 0.10351829771779908, 0.19304097773232376, 0.19304097773232376, 0.19304097773232376, 0.14936097195738018, 0.14936097195738018, 0.14936097195738018, 0.18250945226010185, 0.18250945226010185, 0.18250945226010185, 0.32509094128878424, 0.32509094128878424, 0.32509094128878424, 0.33917293079125266, 0.33917293079125266, 0.33917293079125266, 0.33247889336065717, 0.33247889336065717, 0.33247889336065717, 0.22069873712380317, 0.22069873712380317, 0.22069873712380317, 0.252850947452366, 0.252850947452366, 0.252850947452366, 0.2526402428674037, 0.2526402428674037, 0.2526402428674037, 0.18229140006157174, 0.18229140006157174, 0.18229140006157174, 0.17284249022948406, 0.17284249022948406, 0.17284249022948406, 0.18038249233811743, 0.18038249233811743, 0.18038249233811743, 0.24396387707888578, 0.24396387707888578, 0.24396387707888578, 0.30980095546454867, 0.30980095546454867, 0.30980095546454867, 0.39432752857726194, 0.39432752857726194, 0.39432752857726194, 0.18864706823009314, 0.18864706823009314, 0.18864706823009314, 0.7614373999064078, 0.7614373999064078, 0.7614373999064078, 0.20282659967143246, 0.20282659967143246, 0.20282659967143246, 0.4988605325969854, 0.4988605325969854, 0.4988605325969854, 0.19665358687626744, 0.19665358687626744, 0.19665358687626744, 0.4432020162120608, 0.4432020162120608, 0.4432020162120608, 0.188239041655884, 0.188239041655884, 0.188239041655884, 0.20531304855074473, 0.20531304855074473, 0.20531304855074473, 0.18914969899118195, 0.18914969899118195, 0.18914969899118195, 0.08321438925658353, 0.08321438925658353, 0.08321438925658353, 0.07475292671451039, 0.07475292671451039, 0.07475292671451039, 0.07406679829342333, 0.07406679829342333, 0.07406679829342333]}, "mutation_prompt": null}
{"id": "34904f24-a602-4e81-8c6d-35746203cf8c", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = pop[a] + 0.8 * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Hybrid Monte Carlo and Differential Evolution algorithm that adaptively explores and exploits the search space using random sampling and differential mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9440ca1f-c5eb-4d5a-87f4-83b90605219d", "metadata": {"aucs": [0.6094904484659245, 0.6094904484659245, 0.6094904484659245, 0.5740264170772731, 0.5740264170772731, 0.5740264170772731, 0.5997732992390283, 0.5997732992390283, 0.5997732992390283, 0.25054315208267963, 0.25054315208267963, 0.25054315208267963, 0.29155892910430803, 0.29155892910430803, 0.29155892910430803, 0.2896128878106312, 0.2896128878106312, 0.2896128878106312, 0.24777674730582844, 0.24777674730582844, 0.24777674730582844, 0.17962971175653675, 0.17962971175653675, 0.17962971175653675, 0.1299542316546196, 0.1299542316546196, 0.1299542316546196, 0.1756548681078377, 0.1756548681078377, 0.1756548681078377, 0.1655039266180438, 0.1655039266180438, 0.1655039266180438, 0.209764317953691, 0.209764317953691, 0.209764317953691, 0.9783807732023683, 0.9783807732023683, 0.9783807732023683, 0.9707396416734707, 0.9707396416734707, 0.9707396416734707, 0.9753823575942655, 0.9753823575942655, 0.9753823575942655, 0.3655791642412619, 0.3655791642412619, 0.3655791642412619, 0.36757745920470175, 0.36757745920470175, 0.36757745920470175, 0.35093671282482697, 0.35093671282482697, 0.35093671282482697, 0.5621601044827778, 0.5621601044827778, 0.5621601044827778, 0.7031789584404293, 0.7031789584404293, 0.7031789584404293, 0.3486724752543059, 0.3486724752543059, 0.3486724752543059, 0.2133720248227693, 0.2133720248227693, 0.2133720248227693, 0.21116474201367197, 0.21116474201367197, 0.21116474201367197, 0.17807847723936665, 0.17807847723936665, 0.17807847723936665, 0.19394072732809187, 0.19394072732809187, 0.19394072732809187, 0.14743822121319938, 0.14743822121319938, 0.14743822121319938, 0.1627521813566114, 0.1627521813566114, 0.1627521813566114, 0.00021510621330167456, 0.00021510621330167456, 0.00021510621330167456, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003211313072473021, 0.003211313072473021, 0.003211313072473021, 0.05334794774383156, 0.05334794774383156, 0.05334794774383156, 0.018170829135612965, 0.018170829135612965, 0.018170829135612965, 0.07152825513494188, 0.07152825513494188, 0.07152825513494188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13804106981209208, 0.13804106981209208, 0.13804106981209208, 0.13565619781337568, 0.13565619781337568, 0.13565619781337568, 0.10839694913184161, 0.10839694913184161, 0.10839694913184161, 0.4835400314073237, 0.4835400314073237, 0.4835400314073237, 0.4825020332576939, 0.4825020332576939, 0.4825020332576939, 0.4938823348046625, 0.4938823348046625, 0.4938823348046625, 0.11673742029113165, 0.11673742029113165, 0.11673742029113165, 0.09347535403835994, 0.09347535403835994, 0.09347535403835994, 0.10351829771779908, 0.10351829771779908, 0.10351829771779908, 0.19304097773232376, 0.19304097773232376, 0.19304097773232376, 0.14936097195738018, 0.14936097195738018, 0.14936097195738018, 0.18250945226010185, 0.18250945226010185, 0.18250945226010185, 0.32509094128878424, 0.32509094128878424, 0.32509094128878424, 0.33917293079125266, 0.33917293079125266, 0.33917293079125266, 0.33247889336065717, 0.33247889336065717, 0.33247889336065717, 0.22069873712380317, 0.22069873712380317, 0.22069873712380317, 0.252850947452366, 0.252850947452366, 0.252850947452366, 0.2526402428674037, 0.2526402428674037, 0.2526402428674037, 0.18229140006157174, 0.18229140006157174, 0.18229140006157174, 0.17284249022948406, 0.17284249022948406, 0.17284249022948406, 0.18038249233811743, 0.18038249233811743, 0.18038249233811743, 0.24396387707888578, 0.24396387707888578, 0.24396387707888578, 0.30980095546454867, 0.30980095546454867, 0.30980095546454867, 0.39432752857726194, 0.39432752857726194, 0.39432752857726194, 0.18864706823009314, 0.18864706823009314, 0.18864706823009314, 0.7614373999064078, 0.7614373999064078, 0.7614373999064078, 0.20282659967143246, 0.20282659967143246, 0.20282659967143246, 0.4988605325969854, 0.4988605325969854, 0.4988605325969854, 0.19665358687626744, 0.19665358687626744, 0.19665358687626744, 0.4432020162120608, 0.4432020162120608, 0.4432020162120608, 0.188239041655884, 0.188239041655884, 0.188239041655884, 0.20531304855074473, 0.20531304855074473, 0.20531304855074473, 0.18914969899118195, 0.18914969899118195, 0.18914969899118195, 0.08321438925658353, 0.08321438925658353, 0.08321438925658353, 0.07475292671451039, 0.07475292671451039, 0.07475292671451039, 0.07406679829342333, 0.07406679829342333, 0.07406679829342333]}, "mutation_prompt": null}
{"id": "b1779449-e533-426a-bae5-945b0df50f37", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = pop[a] + 0.8 * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Hybrid Monte Carlo and Differential Evolution algorithm that adaptively explores and exploits the search space using random sampling and differential mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9440ca1f-c5eb-4d5a-87f4-83b90605219d", "metadata": {"aucs": [0.6094904484659245, 0.6094904484659245, 0.6094904484659245, 0.5740264170772731, 0.5740264170772731, 0.5740264170772731, 0.5997732992390283, 0.5997732992390283, 0.5997732992390283, 0.25054315208267963, 0.25054315208267963, 0.25054315208267963, 0.29155892910430803, 0.29155892910430803, 0.29155892910430803, 0.2896128878106312, 0.2896128878106312, 0.2896128878106312, 0.24777674730582844, 0.24777674730582844, 0.24777674730582844, 0.17962971175653675, 0.17962971175653675, 0.17962971175653675, 0.1299542316546196, 0.1299542316546196, 0.1299542316546196, 0.1756548681078377, 0.1756548681078377, 0.1756548681078377, 0.1655039266180438, 0.1655039266180438, 0.1655039266180438, 0.209764317953691, 0.209764317953691, 0.209764317953691, 0.9783807732023683, 0.9783807732023683, 0.9783807732023683, 0.9707396416734707, 0.9707396416734707, 0.9707396416734707, 0.9753823575942655, 0.9753823575942655, 0.9753823575942655, 0.3655791642412619, 0.3655791642412619, 0.3655791642412619, 0.36757745920470175, 0.36757745920470175, 0.36757745920470175, 0.35093671282482697, 0.35093671282482697, 0.35093671282482697, 0.5621601044827778, 0.5621601044827778, 0.5621601044827778, 0.7031789584404293, 0.7031789584404293, 0.7031789584404293, 0.3486724752543059, 0.3486724752543059, 0.3486724752543059, 0.2133720248227693, 0.2133720248227693, 0.2133720248227693, 0.21116474201367197, 0.21116474201367197, 0.21116474201367197, 0.17807847723936665, 0.17807847723936665, 0.17807847723936665, 0.19394072732809187, 0.19394072732809187, 0.19394072732809187, 0.14743822121319938, 0.14743822121319938, 0.14743822121319938, 0.1627521813566114, 0.1627521813566114, 0.1627521813566114, 0.00021510621330167456, 0.00021510621330167456, 0.00021510621330167456, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003211313072473021, 0.003211313072473021, 0.003211313072473021, 0.05334794774383156, 0.05334794774383156, 0.05334794774383156, 0.018170829135612965, 0.018170829135612965, 0.018170829135612965, 0.07152825513494188, 0.07152825513494188, 0.07152825513494188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13804106981209208, 0.13804106981209208, 0.13804106981209208, 0.13565619781337568, 0.13565619781337568, 0.13565619781337568, 0.10839694913184161, 0.10839694913184161, 0.10839694913184161, 0.4835400314073237, 0.4835400314073237, 0.4835400314073237, 0.4825020332576939, 0.4825020332576939, 0.4825020332576939, 0.4938823348046625, 0.4938823348046625, 0.4938823348046625, 0.11673742029113165, 0.11673742029113165, 0.11673742029113165, 0.09347535403835994, 0.09347535403835994, 0.09347535403835994, 0.10351829771779908, 0.10351829771779908, 0.10351829771779908, 0.19304097773232376, 0.19304097773232376, 0.19304097773232376, 0.14936097195738018, 0.14936097195738018, 0.14936097195738018, 0.18250945226010185, 0.18250945226010185, 0.18250945226010185, 0.32509094128878424, 0.32509094128878424, 0.32509094128878424, 0.33917293079125266, 0.33917293079125266, 0.33917293079125266, 0.33247889336065717, 0.33247889336065717, 0.33247889336065717, 0.22069873712380317, 0.22069873712380317, 0.22069873712380317, 0.252850947452366, 0.252850947452366, 0.252850947452366, 0.2526402428674037, 0.2526402428674037, 0.2526402428674037, 0.18229140006157174, 0.18229140006157174, 0.18229140006157174, 0.17284249022948406, 0.17284249022948406, 0.17284249022948406, 0.18038249233811743, 0.18038249233811743, 0.18038249233811743, 0.24396387707888578, 0.24396387707888578, 0.24396387707888578, 0.30980095546454867, 0.30980095546454867, 0.30980095546454867, 0.39432752857726194, 0.39432752857726194, 0.39432752857726194, 0.18864706823009314, 0.18864706823009314, 0.18864706823009314, 0.7614373999064078, 0.7614373999064078, 0.7614373999064078, 0.20282659967143246, 0.20282659967143246, 0.20282659967143246, 0.4988605325969854, 0.4988605325969854, 0.4988605325969854, 0.19665358687626744, 0.19665358687626744, 0.19665358687626744, 0.4432020162120608, 0.4432020162120608, 0.4432020162120608, 0.188239041655884, 0.188239041655884, 0.188239041655884, 0.20531304855074473, 0.20531304855074473, 0.20531304855074473, 0.18914969899118195, 0.18914969899118195, 0.18914969899118195, 0.08321438925658353, 0.08321438925658353, 0.08321438925658353, 0.07475292671451039, 0.07475292671451039, 0.07475292671451039, 0.07406679829342333, 0.07406679829342333, 0.07406679829342333]}, "mutation_prompt": null}
{"id": "fd0c8807-edf9-4584-abde-724738d71f13", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = pop[a] + 0.8 * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Hybrid Monte Carlo and Differential Evolution algorithm that adaptively explores and exploits the search space using random sampling and differential mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9440ca1f-c5eb-4d5a-87f4-83b90605219d", "metadata": {"aucs": [0.6094904484659245, 0.6094904484659245, 0.6094904484659245, 0.5740264170772731, 0.5740264170772731, 0.5740264170772731, 0.5997732992390283, 0.5997732992390283, 0.5997732992390283, 0.25054315208267963, 0.25054315208267963, 0.25054315208267963, 0.29155892910430803, 0.29155892910430803, 0.29155892910430803, 0.2896128878106312, 0.2896128878106312, 0.2896128878106312, 0.24777674730582844, 0.24777674730582844, 0.24777674730582844, 0.17962971175653675, 0.17962971175653675, 0.17962971175653675, 0.1299542316546196, 0.1299542316546196, 0.1299542316546196, 0.1756548681078377, 0.1756548681078377, 0.1756548681078377, 0.1655039266180438, 0.1655039266180438, 0.1655039266180438, 0.209764317953691, 0.209764317953691, 0.209764317953691, 0.9783807732023683, 0.9783807732023683, 0.9783807732023683, 0.9707396416734707, 0.9707396416734707, 0.9707396416734707, 0.9753823575942655, 0.9753823575942655, 0.9753823575942655, 0.3655791642412619, 0.3655791642412619, 0.3655791642412619, 0.36757745920470175, 0.36757745920470175, 0.36757745920470175, 0.35093671282482697, 0.35093671282482697, 0.35093671282482697, 0.5621601044827778, 0.5621601044827778, 0.5621601044827778, 0.7031789584404293, 0.7031789584404293, 0.7031789584404293, 0.3486724752543059, 0.3486724752543059, 0.3486724752543059, 0.2133720248227693, 0.2133720248227693, 0.2133720248227693, 0.21116474201367197, 0.21116474201367197, 0.21116474201367197, 0.17807847723936665, 0.17807847723936665, 0.17807847723936665, 0.19394072732809187, 0.19394072732809187, 0.19394072732809187, 0.14743822121319938, 0.14743822121319938, 0.14743822121319938, 0.1627521813566114, 0.1627521813566114, 0.1627521813566114, 0.00021510621330167456, 0.00021510621330167456, 0.00021510621330167456, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003211313072473021, 0.003211313072473021, 0.003211313072473021, 0.05334794774383156, 0.05334794774383156, 0.05334794774383156, 0.018170829135612965, 0.018170829135612965, 0.018170829135612965, 0.07152825513494188, 0.07152825513494188, 0.07152825513494188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13804106981209208, 0.13804106981209208, 0.13804106981209208, 0.13565619781337568, 0.13565619781337568, 0.13565619781337568, 0.10839694913184161, 0.10839694913184161, 0.10839694913184161, 0.4835400314073237, 0.4835400314073237, 0.4835400314073237, 0.4825020332576939, 0.4825020332576939, 0.4825020332576939, 0.4938823348046625, 0.4938823348046625, 0.4938823348046625, 0.11673742029113165, 0.11673742029113165, 0.11673742029113165, 0.09347535403835994, 0.09347535403835994, 0.09347535403835994, 0.10351829771779908, 0.10351829771779908, 0.10351829771779908, 0.19304097773232376, 0.19304097773232376, 0.19304097773232376, 0.14936097195738018, 0.14936097195738018, 0.14936097195738018, 0.18250945226010185, 0.18250945226010185, 0.18250945226010185, 0.32509094128878424, 0.32509094128878424, 0.32509094128878424, 0.33917293079125266, 0.33917293079125266, 0.33917293079125266, 0.33247889336065717, 0.33247889336065717, 0.33247889336065717, 0.22069873712380317, 0.22069873712380317, 0.22069873712380317, 0.252850947452366, 0.252850947452366, 0.252850947452366, 0.2526402428674037, 0.2526402428674037, 0.2526402428674037, 0.18229140006157174, 0.18229140006157174, 0.18229140006157174, 0.17284249022948406, 0.17284249022948406, 0.17284249022948406, 0.18038249233811743, 0.18038249233811743, 0.18038249233811743, 0.24396387707888578, 0.24396387707888578, 0.24396387707888578, 0.30980095546454867, 0.30980095546454867, 0.30980095546454867, 0.39432752857726194, 0.39432752857726194, 0.39432752857726194, 0.18864706823009314, 0.18864706823009314, 0.18864706823009314, 0.7614373999064078, 0.7614373999064078, 0.7614373999064078, 0.20282659967143246, 0.20282659967143246, 0.20282659967143246, 0.4988605325969854, 0.4988605325969854, 0.4988605325969854, 0.19665358687626744, 0.19665358687626744, 0.19665358687626744, 0.4432020162120608, 0.4432020162120608, 0.4432020162120608, 0.188239041655884, 0.188239041655884, 0.188239041655884, 0.20531304855074473, 0.20531304855074473, 0.20531304855074473, 0.18914969899118195, 0.18914969899118195, 0.18914969899118195, 0.08321438925658353, 0.08321438925658353, 0.08321438925658353, 0.07475292671451039, 0.07475292671451039, 0.07475292671451039, 0.07406679829342333, 0.07406679829342333, 0.07406679829342333]}, "mutation_prompt": null}
{"id": "62a56304-e554-40d4-ad5d-bec3513b2fc2", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = pop[a] + 0.8 * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Hybrid Monte Carlo and Differential Evolution algorithm that adaptively explores and exploits the search space using random sampling and differential mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9440ca1f-c5eb-4d5a-87f4-83b90605219d", "metadata": {"aucs": [0.6094904484659245, 0.6094904484659245, 0.6094904484659245, 0.5740264170772731, 0.5740264170772731, 0.5740264170772731, 0.5997732992390283, 0.5997732992390283, 0.5997732992390283, 0.25054315208267963, 0.25054315208267963, 0.25054315208267963, 0.29155892910430803, 0.29155892910430803, 0.29155892910430803, 0.2896128878106312, 0.2896128878106312, 0.2896128878106312, 0.24777674730582844, 0.24777674730582844, 0.24777674730582844, 0.17962971175653675, 0.17962971175653675, 0.17962971175653675, 0.1299542316546196, 0.1299542316546196, 0.1299542316546196, 0.1756548681078377, 0.1756548681078377, 0.1756548681078377, 0.1655039266180438, 0.1655039266180438, 0.1655039266180438, 0.209764317953691, 0.209764317953691, 0.209764317953691, 0.9783807732023683, 0.9783807732023683, 0.9783807732023683, 0.9707396416734707, 0.9707396416734707, 0.9707396416734707, 0.9753823575942655, 0.9753823575942655, 0.9753823575942655, 0.3655791642412619, 0.3655791642412619, 0.3655791642412619, 0.36757745920470175, 0.36757745920470175, 0.36757745920470175, 0.35093671282482697, 0.35093671282482697, 0.35093671282482697, 0.5621601044827778, 0.5621601044827778, 0.5621601044827778, 0.7031789584404293, 0.7031789584404293, 0.7031789584404293, 0.3486724752543059, 0.3486724752543059, 0.3486724752543059, 0.2133720248227693, 0.2133720248227693, 0.2133720248227693, 0.21116474201367197, 0.21116474201367197, 0.21116474201367197, 0.17807847723936665, 0.17807847723936665, 0.17807847723936665, 0.19394072732809187, 0.19394072732809187, 0.19394072732809187, 0.14743822121319938, 0.14743822121319938, 0.14743822121319938, 0.1627521813566114, 0.1627521813566114, 0.1627521813566114, 0.00021510621330167456, 0.00021510621330167456, 0.00021510621330167456, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003211313072473021, 0.003211313072473021, 0.003211313072473021, 0.05334794774383156, 0.05334794774383156, 0.05334794774383156, 0.018170829135612965, 0.018170829135612965, 0.018170829135612965, 0.07152825513494188, 0.07152825513494188, 0.07152825513494188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13804106981209208, 0.13804106981209208, 0.13804106981209208, 0.13565619781337568, 0.13565619781337568, 0.13565619781337568, 0.10839694913184161, 0.10839694913184161, 0.10839694913184161, 0.4835400314073237, 0.4835400314073237, 0.4835400314073237, 0.4825020332576939, 0.4825020332576939, 0.4825020332576939, 0.4938823348046625, 0.4938823348046625, 0.4938823348046625, 0.11673742029113165, 0.11673742029113165, 0.11673742029113165, 0.09347535403835994, 0.09347535403835994, 0.09347535403835994, 0.10351829771779908, 0.10351829771779908, 0.10351829771779908, 0.19304097773232376, 0.19304097773232376, 0.19304097773232376, 0.14936097195738018, 0.14936097195738018, 0.14936097195738018, 0.18250945226010185, 0.18250945226010185, 0.18250945226010185, 0.32509094128878424, 0.32509094128878424, 0.32509094128878424, 0.33917293079125266, 0.33917293079125266, 0.33917293079125266, 0.33247889336065717, 0.33247889336065717, 0.33247889336065717, 0.22069873712380317, 0.22069873712380317, 0.22069873712380317, 0.252850947452366, 0.252850947452366, 0.252850947452366, 0.2526402428674037, 0.2526402428674037, 0.2526402428674037, 0.18229140006157174, 0.18229140006157174, 0.18229140006157174, 0.17284249022948406, 0.17284249022948406, 0.17284249022948406, 0.18038249233811743, 0.18038249233811743, 0.18038249233811743, 0.24396387707888578, 0.24396387707888578, 0.24396387707888578, 0.30980095546454867, 0.30980095546454867, 0.30980095546454867, 0.39432752857726194, 0.39432752857726194, 0.39432752857726194, 0.18864706823009314, 0.18864706823009314, 0.18864706823009314, 0.7614373999064078, 0.7614373999064078, 0.7614373999064078, 0.20282659967143246, 0.20282659967143246, 0.20282659967143246, 0.4988605325969854, 0.4988605325969854, 0.4988605325969854, 0.19665358687626744, 0.19665358687626744, 0.19665358687626744, 0.4432020162120608, 0.4432020162120608, 0.4432020162120608, 0.188239041655884, 0.188239041655884, 0.188239041655884, 0.20531304855074473, 0.20531304855074473, 0.20531304855074473, 0.18914969899118195, 0.18914969899118195, 0.18914969899118195, 0.08321438925658353, 0.08321438925658353, 0.08321438925658353, 0.07475292671451039, 0.07475292671451039, 0.07475292671451039, 0.07406679829342333, 0.07406679829342333, 0.07406679829342333]}, "mutation_prompt": null}
{"id": "af776cbc-d538-4b61-abee-9e4740b1c347", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = pop[a] + 0.8 * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Hybrid Monte Carlo and Differential Evolution algorithm that adaptively explores and exploits the search space using random sampling and differential mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9440ca1f-c5eb-4d5a-87f4-83b90605219d", "metadata": {"aucs": [0.6094904484659245, 0.6094904484659245, 0.6094904484659245, 0.5740264170772731, 0.5740264170772731, 0.5740264170772731, 0.5997732992390283, 0.5997732992390283, 0.5997732992390283, 0.25054315208267963, 0.25054315208267963, 0.25054315208267963, 0.29155892910430803, 0.29155892910430803, 0.29155892910430803, 0.2896128878106312, 0.2896128878106312, 0.2896128878106312, 0.24777674730582844, 0.24777674730582844, 0.24777674730582844, 0.17962971175653675, 0.17962971175653675, 0.17962971175653675, 0.1299542316546196, 0.1299542316546196, 0.1299542316546196, 0.1756548681078377, 0.1756548681078377, 0.1756548681078377, 0.1655039266180438, 0.1655039266180438, 0.1655039266180438, 0.209764317953691, 0.209764317953691, 0.209764317953691, 0.9783807732023683, 0.9783807732023683, 0.9783807732023683, 0.9707396416734707, 0.9707396416734707, 0.9707396416734707, 0.9753823575942655, 0.9753823575942655, 0.9753823575942655, 0.3655791642412619, 0.3655791642412619, 0.3655791642412619, 0.36757745920470175, 0.36757745920470175, 0.36757745920470175, 0.35093671282482697, 0.35093671282482697, 0.35093671282482697, 0.5621601044827778, 0.5621601044827778, 0.5621601044827778, 0.7031789584404293, 0.7031789584404293, 0.7031789584404293, 0.3486724752543059, 0.3486724752543059, 0.3486724752543059, 0.2133720248227693, 0.2133720248227693, 0.2133720248227693, 0.21116474201367197, 0.21116474201367197, 0.21116474201367197, 0.17807847723936665, 0.17807847723936665, 0.17807847723936665, 0.19394072732809187, 0.19394072732809187, 0.19394072732809187, 0.14743822121319938, 0.14743822121319938, 0.14743822121319938, 0.1627521813566114, 0.1627521813566114, 0.1627521813566114, 0.00021510621330167456, 0.00021510621330167456, 0.00021510621330167456, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003211313072473021, 0.003211313072473021, 0.003211313072473021, 0.05334794774383156, 0.05334794774383156, 0.05334794774383156, 0.018170829135612965, 0.018170829135612965, 0.018170829135612965, 0.07152825513494188, 0.07152825513494188, 0.07152825513494188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13804106981209208, 0.13804106981209208, 0.13804106981209208, 0.13565619781337568, 0.13565619781337568, 0.13565619781337568, 0.10839694913184161, 0.10839694913184161, 0.10839694913184161, 0.4835400314073237, 0.4835400314073237, 0.4835400314073237, 0.4825020332576939, 0.4825020332576939, 0.4825020332576939, 0.4938823348046625, 0.4938823348046625, 0.4938823348046625, 0.11673742029113165, 0.11673742029113165, 0.11673742029113165, 0.09347535403835994, 0.09347535403835994, 0.09347535403835994, 0.10351829771779908, 0.10351829771779908, 0.10351829771779908, 0.19304097773232376, 0.19304097773232376, 0.19304097773232376, 0.14936097195738018, 0.14936097195738018, 0.14936097195738018, 0.18250945226010185, 0.18250945226010185, 0.18250945226010185, 0.32509094128878424, 0.32509094128878424, 0.32509094128878424, 0.33917293079125266, 0.33917293079125266, 0.33917293079125266, 0.33247889336065717, 0.33247889336065717, 0.33247889336065717, 0.22069873712380317, 0.22069873712380317, 0.22069873712380317, 0.252850947452366, 0.252850947452366, 0.252850947452366, 0.2526402428674037, 0.2526402428674037, 0.2526402428674037, 0.18229140006157174, 0.18229140006157174, 0.18229140006157174, 0.17284249022948406, 0.17284249022948406, 0.17284249022948406, 0.18038249233811743, 0.18038249233811743, 0.18038249233811743, 0.24396387707888578, 0.24396387707888578, 0.24396387707888578, 0.30980095546454867, 0.30980095546454867, 0.30980095546454867, 0.39432752857726194, 0.39432752857726194, 0.39432752857726194, 0.18864706823009314, 0.18864706823009314, 0.18864706823009314, 0.7614373999064078, 0.7614373999064078, 0.7614373999064078, 0.20282659967143246, 0.20282659967143246, 0.20282659967143246, 0.4988605325969854, 0.4988605325969854, 0.4988605325969854, 0.19665358687626744, 0.19665358687626744, 0.19665358687626744, 0.4432020162120608, 0.4432020162120608, 0.4432020162120608, 0.188239041655884, 0.188239041655884, 0.188239041655884, 0.20531304855074473, 0.20531304855074473, 0.20531304855074473, 0.18914969899118195, 0.18914969899118195, 0.18914969899118195, 0.08321438925658353, 0.08321438925658353, 0.08321438925658353, 0.07475292671451039, 0.07475292671451039, 0.07475292671451039, 0.07406679829342333, 0.07406679829342333, 0.07406679829342333]}, "mutation_prompt": null}
{"id": "a8ac434d-3d27-4a85-9302-b493a40dbe99", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = pop[a] + 0.8 * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Hybrid Monte Carlo and Differential Evolution algorithm that adaptively explores and exploits the search space using random sampling and differential mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9440ca1f-c5eb-4d5a-87f4-83b90605219d", "metadata": {"aucs": [0.6094904484659245, 0.6094904484659245, 0.6094904484659245, 0.5740264170772731, 0.5740264170772731, 0.5740264170772731, 0.5997732992390283, 0.5997732992390283, 0.5997732992390283, 0.25054315208267963, 0.25054315208267963, 0.25054315208267963, 0.29155892910430803, 0.29155892910430803, 0.29155892910430803, 0.2896128878106312, 0.2896128878106312, 0.2896128878106312, 0.24777674730582844, 0.24777674730582844, 0.24777674730582844, 0.17962971175653675, 0.17962971175653675, 0.17962971175653675, 0.1299542316546196, 0.1299542316546196, 0.1299542316546196, 0.1756548681078377, 0.1756548681078377, 0.1756548681078377, 0.1655039266180438, 0.1655039266180438, 0.1655039266180438, 0.209764317953691, 0.209764317953691, 0.209764317953691, 0.9783807732023683, 0.9783807732023683, 0.9783807732023683, 0.9707396416734707, 0.9707396416734707, 0.9707396416734707, 0.9753823575942655, 0.9753823575942655, 0.9753823575942655, 0.3655791642412619, 0.3655791642412619, 0.3655791642412619, 0.36757745920470175, 0.36757745920470175, 0.36757745920470175, 0.35093671282482697, 0.35093671282482697, 0.35093671282482697, 0.5621601044827778, 0.5621601044827778, 0.5621601044827778, 0.7031789584404293, 0.7031789584404293, 0.7031789584404293, 0.3486724752543059, 0.3486724752543059, 0.3486724752543059, 0.2133720248227693, 0.2133720248227693, 0.2133720248227693, 0.21116474201367197, 0.21116474201367197, 0.21116474201367197, 0.17807847723936665, 0.17807847723936665, 0.17807847723936665, 0.19394072732809187, 0.19394072732809187, 0.19394072732809187, 0.14743822121319938, 0.14743822121319938, 0.14743822121319938, 0.1627521813566114, 0.1627521813566114, 0.1627521813566114, 0.00021510621330167456, 0.00021510621330167456, 0.00021510621330167456, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003211313072473021, 0.003211313072473021, 0.003211313072473021, 0.05334794774383156, 0.05334794774383156, 0.05334794774383156, 0.018170829135612965, 0.018170829135612965, 0.018170829135612965, 0.07152825513494188, 0.07152825513494188, 0.07152825513494188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13804106981209208, 0.13804106981209208, 0.13804106981209208, 0.13565619781337568, 0.13565619781337568, 0.13565619781337568, 0.10839694913184161, 0.10839694913184161, 0.10839694913184161, 0.4835400314073237, 0.4835400314073237, 0.4835400314073237, 0.4825020332576939, 0.4825020332576939, 0.4825020332576939, 0.4938823348046625, 0.4938823348046625, 0.4938823348046625, 0.11673742029113165, 0.11673742029113165, 0.11673742029113165, 0.09347535403835994, 0.09347535403835994, 0.09347535403835994, 0.10351829771779908, 0.10351829771779908, 0.10351829771779908, 0.19304097773232376, 0.19304097773232376, 0.19304097773232376, 0.14936097195738018, 0.14936097195738018, 0.14936097195738018, 0.18250945226010185, 0.18250945226010185, 0.18250945226010185, 0.32509094128878424, 0.32509094128878424, 0.32509094128878424, 0.33917293079125266, 0.33917293079125266, 0.33917293079125266, 0.33247889336065717, 0.33247889336065717, 0.33247889336065717, 0.22069873712380317, 0.22069873712380317, 0.22069873712380317, 0.252850947452366, 0.252850947452366, 0.252850947452366, 0.2526402428674037, 0.2526402428674037, 0.2526402428674037, 0.18229140006157174, 0.18229140006157174, 0.18229140006157174, 0.17284249022948406, 0.17284249022948406, 0.17284249022948406, 0.18038249233811743, 0.18038249233811743, 0.18038249233811743, 0.24396387707888578, 0.24396387707888578, 0.24396387707888578, 0.30980095546454867, 0.30980095546454867, 0.30980095546454867, 0.39432752857726194, 0.39432752857726194, 0.39432752857726194, 0.18864706823009314, 0.18864706823009314, 0.18864706823009314, 0.7614373999064078, 0.7614373999064078, 0.7614373999064078, 0.20282659967143246, 0.20282659967143246, 0.20282659967143246, 0.4988605325969854, 0.4988605325969854, 0.4988605325969854, 0.19665358687626744, 0.19665358687626744, 0.19665358687626744, 0.4432020162120608, 0.4432020162120608, 0.4432020162120608, 0.188239041655884, 0.188239041655884, 0.188239041655884, 0.20531304855074473, 0.20531304855074473, 0.20531304855074473, 0.18914969899118195, 0.18914969899118195, 0.18914969899118195, 0.08321438925658353, 0.08321438925658353, 0.08321438925658353, 0.07475292671451039, 0.07475292671451039, 0.07475292671451039, 0.07406679829342333, 0.07406679829342333, 0.07406679829342333]}, "mutation_prompt": null}
{"id": "13f7e518-7471-46ed-a4c9-8e8a91d42688", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = pop[a] + 0.8 * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Hybrid Monte Carlo and Differential Evolution algorithm that adaptively explores and exploits the search space using random sampling and differential mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9440ca1f-c5eb-4d5a-87f4-83b90605219d", "metadata": {"aucs": [0.6094904484659245, 0.6094904484659245, 0.6094904484659245, 0.5740264170772731, 0.5740264170772731, 0.5740264170772731, 0.5997732992390283, 0.5997732992390283, 0.5997732992390283, 0.25054315208267963, 0.25054315208267963, 0.25054315208267963, 0.29155892910430803, 0.29155892910430803, 0.29155892910430803, 0.2896128878106312, 0.2896128878106312, 0.2896128878106312, 0.24777674730582844, 0.24777674730582844, 0.24777674730582844, 0.17962971175653675, 0.17962971175653675, 0.17962971175653675, 0.1299542316546196, 0.1299542316546196, 0.1299542316546196, 0.1756548681078377, 0.1756548681078377, 0.1756548681078377, 0.1655039266180438, 0.1655039266180438, 0.1655039266180438, 0.209764317953691, 0.209764317953691, 0.209764317953691, 0.9783807732023683, 0.9783807732023683, 0.9783807732023683, 0.9707396416734707, 0.9707396416734707, 0.9707396416734707, 0.9753823575942655, 0.9753823575942655, 0.9753823575942655, 0.3655791642412619, 0.3655791642412619, 0.3655791642412619, 0.36757745920470175, 0.36757745920470175, 0.36757745920470175, 0.35093671282482697, 0.35093671282482697, 0.35093671282482697, 0.5621601044827778, 0.5621601044827778, 0.5621601044827778, 0.7031789584404293, 0.7031789584404293, 0.7031789584404293, 0.3486724752543059, 0.3486724752543059, 0.3486724752543059, 0.2133720248227693, 0.2133720248227693, 0.2133720248227693, 0.21116474201367197, 0.21116474201367197, 0.21116474201367197, 0.17807847723936665, 0.17807847723936665, 0.17807847723936665, 0.19394072732809187, 0.19394072732809187, 0.19394072732809187, 0.14743822121319938, 0.14743822121319938, 0.14743822121319938, 0.1627521813566114, 0.1627521813566114, 0.1627521813566114, 0.00021510621330167456, 0.00021510621330167456, 0.00021510621330167456, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003211313072473021, 0.003211313072473021, 0.003211313072473021, 0.05334794774383156, 0.05334794774383156, 0.05334794774383156, 0.018170829135612965, 0.018170829135612965, 0.018170829135612965, 0.07152825513494188, 0.07152825513494188, 0.07152825513494188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13804106981209208, 0.13804106981209208, 0.13804106981209208, 0.13565619781337568, 0.13565619781337568, 0.13565619781337568, 0.10839694913184161, 0.10839694913184161, 0.10839694913184161, 0.4835400314073237, 0.4835400314073237, 0.4835400314073237, 0.4825020332576939, 0.4825020332576939, 0.4825020332576939, 0.4938823348046625, 0.4938823348046625, 0.4938823348046625, 0.11673742029113165, 0.11673742029113165, 0.11673742029113165, 0.09347535403835994, 0.09347535403835994, 0.09347535403835994, 0.10351829771779908, 0.10351829771779908, 0.10351829771779908, 0.19304097773232376, 0.19304097773232376, 0.19304097773232376, 0.14936097195738018, 0.14936097195738018, 0.14936097195738018, 0.18250945226010185, 0.18250945226010185, 0.18250945226010185, 0.32509094128878424, 0.32509094128878424, 0.32509094128878424, 0.33917293079125266, 0.33917293079125266, 0.33917293079125266, 0.33247889336065717, 0.33247889336065717, 0.33247889336065717, 0.22069873712380317, 0.22069873712380317, 0.22069873712380317, 0.252850947452366, 0.252850947452366, 0.252850947452366, 0.2526402428674037, 0.2526402428674037, 0.2526402428674037, 0.18229140006157174, 0.18229140006157174, 0.18229140006157174, 0.17284249022948406, 0.17284249022948406, 0.17284249022948406, 0.18038249233811743, 0.18038249233811743, 0.18038249233811743, 0.24396387707888578, 0.24396387707888578, 0.24396387707888578, 0.30980095546454867, 0.30980095546454867, 0.30980095546454867, 0.39432752857726194, 0.39432752857726194, 0.39432752857726194, 0.18864706823009314, 0.18864706823009314, 0.18864706823009314, 0.7614373999064078, 0.7614373999064078, 0.7614373999064078, 0.20282659967143246, 0.20282659967143246, 0.20282659967143246, 0.4988605325969854, 0.4988605325969854, 0.4988605325969854, 0.19665358687626744, 0.19665358687626744, 0.19665358687626744, 0.4432020162120608, 0.4432020162120608, 0.4432020162120608, 0.188239041655884, 0.188239041655884, 0.188239041655884, 0.20531304855074473, 0.20531304855074473, 0.20531304855074473, 0.18914969899118195, 0.18914969899118195, 0.18914969899118195, 0.08321438925658353, 0.08321438925658353, 0.08321438925658353, 0.07475292671451039, 0.07475292671451039, 0.07475292671451039, 0.07406679829342333, 0.07406679829342333, 0.07406679829342333]}, "mutation_prompt": null}
{"id": "54aabff9-48f7-410d-b490-1b88a4b4f2b9", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                mutant = pop[a] + 0.8 * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Hybrid Monte Carlo and Differential Evolution algorithm that adaptively explores and exploits the search space using random sampling and differential mutation.", "configspace": "", "generation": 1, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "9440ca1f-c5eb-4d5a-87f4-83b90605219d", "metadata": {"aucs": [0.6094904484659245, 0.6094904484659245, 0.6094904484659245, 0.5740264170772731, 0.5740264170772731, 0.5740264170772731, 0.5997732992390283, 0.5997732992390283, 0.5997732992390283, 0.25054315208267963, 0.25054315208267963, 0.25054315208267963, 0.29155892910430803, 0.29155892910430803, 0.29155892910430803, 0.2896128878106312, 0.2896128878106312, 0.2896128878106312, 0.24777674730582844, 0.24777674730582844, 0.24777674730582844, 0.17962971175653675, 0.17962971175653675, 0.17962971175653675, 0.1299542316546196, 0.1299542316546196, 0.1299542316546196, 0.1756548681078377, 0.1756548681078377, 0.1756548681078377, 0.1655039266180438, 0.1655039266180438, 0.1655039266180438, 0.209764317953691, 0.209764317953691, 0.209764317953691, 0.9783807732023683, 0.9783807732023683, 0.9783807732023683, 0.9707396416734707, 0.9707396416734707, 0.9707396416734707, 0.9753823575942655, 0.9753823575942655, 0.9753823575942655, 0.3655791642412619, 0.3655791642412619, 0.3655791642412619, 0.36757745920470175, 0.36757745920470175, 0.36757745920470175, 0.35093671282482697, 0.35093671282482697, 0.35093671282482697, 0.5621601044827778, 0.5621601044827778, 0.5621601044827778, 0.7031789584404293, 0.7031789584404293, 0.7031789584404293, 0.3486724752543059, 0.3486724752543059, 0.3486724752543059, 0.2133720248227693, 0.2133720248227693, 0.2133720248227693, 0.21116474201367197, 0.21116474201367197, 0.21116474201367197, 0.17807847723936665, 0.17807847723936665, 0.17807847723936665, 0.19394072732809187, 0.19394072732809187, 0.19394072732809187, 0.14743822121319938, 0.14743822121319938, 0.14743822121319938, 0.1627521813566114, 0.1627521813566114, 0.1627521813566114, 0.00021510621330167456, 0.00021510621330167456, 0.00021510621330167456, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.003211313072473021, 0.003211313072473021, 0.003211313072473021, 0.05334794774383156, 0.05334794774383156, 0.05334794774383156, 0.018170829135612965, 0.018170829135612965, 0.018170829135612965, 0.07152825513494188, 0.07152825513494188, 0.07152825513494188, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13804106981209208, 0.13804106981209208, 0.13804106981209208, 0.13565619781337568, 0.13565619781337568, 0.13565619781337568, 0.10839694913184161, 0.10839694913184161, 0.10839694913184161, 0.4835400314073237, 0.4835400314073237, 0.4835400314073237, 0.4825020332576939, 0.4825020332576939, 0.4825020332576939, 0.4938823348046625, 0.4938823348046625, 0.4938823348046625, 0.11673742029113165, 0.11673742029113165, 0.11673742029113165, 0.09347535403835994, 0.09347535403835994, 0.09347535403835994, 0.10351829771779908, 0.10351829771779908, 0.10351829771779908, 0.19304097773232376, 0.19304097773232376, 0.19304097773232376, 0.14936097195738018, 0.14936097195738018, 0.14936097195738018, 0.18250945226010185, 0.18250945226010185, 0.18250945226010185, 0.32509094128878424, 0.32509094128878424, 0.32509094128878424, 0.33917293079125266, 0.33917293079125266, 0.33917293079125266, 0.33247889336065717, 0.33247889336065717, 0.33247889336065717, 0.22069873712380317, 0.22069873712380317, 0.22069873712380317, 0.252850947452366, 0.252850947452366, 0.252850947452366, 0.2526402428674037, 0.2526402428674037, 0.2526402428674037, 0.18229140006157174, 0.18229140006157174, 0.18229140006157174, 0.17284249022948406, 0.17284249022948406, 0.17284249022948406, 0.18038249233811743, 0.18038249233811743, 0.18038249233811743, 0.24396387707888578, 0.24396387707888578, 0.24396387707888578, 0.30980095546454867, 0.30980095546454867, 0.30980095546454867, 0.39432752857726194, 0.39432752857726194, 0.39432752857726194, 0.18864706823009314, 0.18864706823009314, 0.18864706823009314, 0.7614373999064078, 0.7614373999064078, 0.7614373999064078, 0.20282659967143246, 0.20282659967143246, 0.20282659967143246, 0.4988605325969854, 0.4988605325969854, 0.4988605325969854, 0.19665358687626744, 0.19665358687626744, 0.19665358687626744, 0.4432020162120608, 0.4432020162120608, 0.4432020162120608, 0.188239041655884, 0.188239041655884, 0.188239041655884, 0.20531304855074473, 0.20531304855074473, 0.20531304855074473, 0.18914969899118195, 0.18914969899118195, 0.18914969899118195, 0.08321438925658353, 0.08321438925658353, 0.08321438925658353, 0.07475292671451039, 0.07475292671451039, 0.07475292671451039, 0.07406679829342333, 0.07406679829342333, 0.07406679829342333]}, "mutation_prompt": null}
{"id": "a95e43de-9481-4c7e-9f83-f745f3187329", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 9, "fitness": 0.2806035138362053, "feedback": "The algorithm HybridMC_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.22.", "error": "", "parent_id": "9440ca1f-c5eb-4d5a-87f4-83b90605219d", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "400cf7b6-dc7f-4408-890c-08b367415fda", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n        prev_best_fitness = best_fitness\n\n        while evaluations < self.budget:\n            improvement_rate = 0\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Dynamic crossover probability\n                if evaluations % population_size == 0:\n                    improvement_rate = 1 - (best_fitness / (prev_best_fitness + 1e-9))\n                    prev_best_fitness = best_fitness\n\n                crossover_prob = 0.5 + 0.5 * improvement_rate\n                trial = np.where(np.random.rand(self.dim) < crossover_prob, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Enhanced convergence by introducing a dynamic crossover probability based on fitness improvement rate.", "configspace": "", "generation": 10, "fitness": 0.2784791523523676, "feedback": "The algorithm HybridMC_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.21.", "error": "", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5937058176959076, 0.5937058176959076, 0.5937058176959076, 0.6016529423455566, 0.6016529423455566, 0.6016529423455566, 0.3196833904904174, 0.3196833904904174, 0.3196833904904174, 0.2834516764017454, 0.2834516764017454, 0.2834516764017454, 0.2672509595666289, 0.2672509595666289, 0.2672509595666289, 0.2683348616100161, 0.2683348616100161, 0.2683348616100161, 0.2903081762635563, 0.2903081762635563, 0.2903081762635563, 0.2689744564622699, 0.2689744564622699, 0.2689744564622699, 0.26538325555844733, 0.26538325555844733, 0.26538325555844733, 0.1637493105360147, 0.1637493105360147, 0.1637493105360147, 0.1221381718115977, 0.1221381718115977, 0.1221381718115977, 0.9791707526870873, 0.9791707526870873, 0.9791707526870873, 0.9717596055992227, 0.9717596055992227, 0.9717596055992227, 0.9680684066213563, 0.9680684066213563, 0.9680684066213563, 0.3622237093068318, 0.3622237093068318, 0.3622237093068318, 0.3790203267522051, 0.3790203267522051, 0.3790203267522051, 0.3610027379541647, 0.3610027379541647, 0.3610027379541647, 0.22594023669830499, 0.22594023669830499, 0.22594023669830499, 0.5113247099938056, 0.5113247099938056, 0.5113247099938056, 0.2277531257730181, 0.2277531257730181, 0.2277531257730181, 0.19859347019982843, 0.19859347019982843, 0.19859347019982843, 0.179176439898858, 0.179176439898858, 0.179176439898858, 0.16815473853289564, 0.16815473853289564, 0.16815473853289564, 0.2031399623083322, 0.2031399623083322, 0.2031399623083322, 0.2211416481517966, 0.2211416481517966, 0.2211416481517966, 0.22348071786936852, 0.22348071786936852, 0.22348071786936852, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008529611490464828, 0.008529611490464828, 0.008529611490464828, 0.08565929774794279, 0.08565929774794279, 0.08565929774794279, 0.09323834848398382, 0.09323834848398382, 0.09323834848398382, 0.08462499696609427, 0.08462499696609427, 0.08462499696609427, 0.060575828141069765, 0.060575828141069765, 0.060575828141069765, 0.018833282768794146, 0.018833282768794146, 0.018833282768794146, 0.03386590801623901, 0.03386590801623901, 0.03386590801623901, 0.14258886017697292, 0.14258886017697292, 0.14258886017697292, 0.1815203586776496, 0.1815203586776496, 0.1815203586776496, 0.12277546627014835, 0.12277546627014835, 0.12277546627014835, 0.4566789464847213, 0.4566789464847213, 0.4566789464847213, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.5075020811773212, 0.5075020811773212, 0.5075020811773212, 0.095440659478911, 0.095440659478911, 0.095440659478911, 0.11973405135388826, 0.11973405135388826, 0.11973405135388826, 0.09600787941442646, 0.09600787941442646, 0.09600787941442646, 0.21008093153746255, 0.21008093153746255, 0.21008093153746255, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.29325706643095506, 0.29325706643095506, 0.29325706643095506, 0.31570204419399484, 0.31570204419399484, 0.31570204419399484, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2707829763027684, 0.2707829763027684, 0.2707829763027684, 0.2649382637111264, 0.2649382637111264, 0.2649382637111264, 0.2828102968832683, 0.2828102968832683, 0.2828102968832683, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.21036140743420773, 0.21036140743420773, 0.21036140743420773, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.24914204784879523, 0.24914204784879523, 0.24914204784879523, 0.30210895839789276, 0.30210895839789276, 0.30210895839789276, 0.3770518079151899, 0.3770518079151899, 0.3770518079151899, 0.6326191110991284, 0.6326191110991284, 0.6326191110991284, 0.7530450041741601, 0.7530450041741601, 0.7530450041741601, 0.17913089811976313, 0.17913089811976313, 0.17913089811976313, 0.5189926914937361, 0.5189926914937361, 0.5189926914937361, 0.1673423070599298, 0.1673423070599298, 0.1673423070599298, 0.20905882924676844, 0.20905882924676844, 0.20905882924676844, 0.19449669354091625, 0.19449669354091625, 0.19449669354091625, 0.1842492372449097, 0.1842492372449097, 0.1842492372449097, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.09086056240580709, 0.09086056240580709, 0.09086056240580709, 0.090983245751868, 0.090983245751868, 0.090983245751868, 0.08702191137215454, 0.08702191137215454, 0.08702191137215454]}, "mutation_prompt": null}
{"id": "3897d5f8-443d-4714-ab5c-b5aacbf17707", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "5f36bef4-7073-478d-a77d-97b24f5e6f17", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop) / np.mean(np.abs(pop))  # Relative diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Enhanced diversity management in Differential Evolution by dynamically adjusting mutation scale based on relative diversity.", "configspace": "", "generation": 12, "fitness": 0.26891275915747404, "feedback": "The algorithm HybridMC_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.22.", "error": "", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.6124097326117588, 0.6124097326117588, 0.6124097326117588, 0.6098688336249996, 0.6098688336249996, 0.6098688336249996, 0.5834569931849287, 0.5834569931849287, 0.5834569931849287, 0.3081342692540616, 0.3081342692540616, 0.3081342692540616, 0.24531569347210802, 0.24531569347210802, 0.24531569347210802, 0.2830019917663702, 0.2830019917663702, 0.2830019917663702, 0.18724078650542708, 0.18724078650542708, 0.18724078650542708, 0.2867946906634494, 0.2867946906634494, 0.2867946906634494, 0.2868460943729757, 0.2868460943729757, 0.2868460943729757, 0.23679420259845874, 0.23679420259845874, 0.23679420259845874, 0.15693468898237184, 0.15693468898237184, 0.15693468898237184, 0.2336728914079853, 0.2336728914079853, 0.2336728914079853, 0.9695939448172156, 0.9695939448172156, 0.9695939448172156, 0.9685527864499097, 0.9685527864499097, 0.9685527864499097, 0.9723268217161124, 0.9723268217161124, 0.9723268217161124, 0.38092058726348865, 0.38092058726348865, 0.38092058726348865, 0.37373748866139644, 0.37373748866139644, 0.37373748866139644, 0.35778481135579343, 0.35778481135579343, 0.35778481135579343, 0.616674241460328, 0.616674241460328, 0.616674241460328, 0.8547519100951186, 0.8547519100951186, 0.8547519100951186, 0.5370944766083879, 0.5370944766083879, 0.5370944766083879, 0.2285387617524124, 0.2285387617524124, 0.2285387617524124, 0.17720018278899496, 0.17720018278899496, 0.17720018278899496, 0.217349671080715, 0.217349671080715, 0.217349671080715, 0.1454568259486938, 0.1454568259486938, 0.1454568259486938, 0.16210211949425435, 0.16210211949425435, 0.16210211949425435, 0.19901734441144925, 0.19901734441144925, 0.19901734441144925, 0.002876297865925692, 0.002876297865925692, 0.002876297865925692, 0.0012976332197502938, 0.0012976332197502938, 0.0012976332197502938, 0.01335680720184862, 0.01335680720184862, 0.01335680720184862, 0.0919705400259907, 0.0919705400259907, 0.0919705400259907, 0.07312235611579887, 0.07312235611579887, 0.07312235611579887, 0.0846925425626025, 0.0846925425626025, 0.0846925425626025, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.01460891367676509, 0.01460891367676509, 0.01460891367676509, 0.13147838984993598, 0.13147838984993598, 0.13147838984993598, 0.06008640467981363, 0.06008640467981363, 0.06008640467981363, 0.09949639740687488, 0.09949639740687488, 0.09949639740687488, 0.5294563102680918, 0.5294563102680918, 0.5294563102680918, 0.48119105263762374, 0.48119105263762374, 0.48119105263762374, 0.48113805351715533, 0.48113805351715533, 0.48113805351715533, 0.12801444707080611, 0.12801444707080611, 0.12801444707080611, 0.12393535337336303, 0.12393535337336303, 0.12393535337336303, 0.10561950963628186, 0.10561950963628186, 0.10561950963628186, 0.1690042349065196, 0.1690042349065196, 0.1690042349065196, 0.1791662868494195, 0.1791662868494195, 0.1791662868494195, 0.21291937187725907, 0.21291937187725907, 0.21291937187725907, 0.33453040117421884, 0.33453040117421884, 0.33453040117421884, 0.31048072394875714, 0.31048072394875714, 0.31048072394875714, 0.34631019505615324, 0.34631019505615324, 0.34631019505615324, 0.24683611994152987, 0.24683611994152987, 0.24683611994152987, 0.21042018851529454, 0.21042018851529454, 0.21042018851529454, 0.2067620169063037, 0.2067620169063037, 0.2067620169063037, 0.20689182066413592, 0.20689182066413592, 0.20689182066413592, 0.19728627861905557, 0.19728627861905557, 0.19728627861905557, 0.19817211988053673, 0.19817211988053673, 0.19817211988053673, 0.2349214997116238, 0.2349214997116238, 0.2349214997116238, 0.2644492517905276, 0.2644492517905276, 0.2644492517905276, 0.23269936117424672, 0.23269936117424672, 0.23269936117424672, 0.18403195702560493, 0.18403195702560493, 0.18403195702560493, 0.1693144882313694, 0.1693144882313694, 0.1693144882313694, 0.1660384355744311, 0.1660384355744311, 0.1660384355744311, 0.5160188389847415, 0.5160188389847415, 0.5160188389847415, 0.2048488240479397, 0.2048488240479397, 0.2048488240479397, 0.11287109862495104, 0.11287109862495104, 0.11287109862495104, 0.17881349118160195, 0.17881349118160195, 0.17881349118160195, 0.19640112079134697, 0.19640112079134697, 0.19640112079134697, 0.19550620449403844, 0.19550620449403844, 0.19550620449403844, 0.09425150551995265, 0.09425150551995265, 0.09425150551995265, 0.08942327875953526, 0.08942327875953526, 0.08942327875953526, 0.08923569362924211, 0.08923569362924211, 0.08923569362924211]}, "mutation_prompt": null}
{"id": "d81a5440-35b2-4af2-9c91-424f8b4b85fa", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "57593f93-1427-46aa-80df-ad15352f4f4a", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        success_threshold = 0.1  # New success threshold for dynamic adaptation\n\n        while evaluations < self.budget:\n            successes = 0  # Count successful trials\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    successes += 1  # Increment success count\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n            \n            # Adjust population size based on success rate\n            if successes / population_size < success_threshold:\n                population_size = max(5, population_size - 1)  # Reduce size minimally\n            else:\n                population_size = min(20, population_size + 1)  # Increase size cautiously\n\n        return best", "name": "HybridMC_DE", "description": "Enhanced mutation strategy by incorporating dynamic population size adjustment based on a success threshold.", "configspace": "", "generation": 14, "fitness": -Infinity, "feedback": "An exception occurred: IndexError('index 10 is out of bounds for axis 0 with size 10').", "error": "IndexError('index 10 is out of bounds for axis 0 with size 10')", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {}, "mutation_prompt": null}
{"id": "23ae0ad9-1fd7-4317-966f-eabdbeea3e74", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "592d4d65-dc8c-42a2-bcab-d76c5a3462c6", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "179af498-733f-40a6-826e-dc5a495a0a9a", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "8a8bbd32-f1a2-4774-b940-e55b0ba3d5ba", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "7d5b29bb-f9ba-4239-b615-ff73829e63c0", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "5c7ab5c5-dad6-415d-8e00-01f142a6b71f", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "0081a182-e274-4564-b9ad-57a4854cc23b", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "eedc0dfd-9692-4047-b50f-d5e5b817616b", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "c921d364-21b0-4e48-9cc5-1ec97a9d1ee7", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "e4cbcf1a-4f05-47a7-ae94-53cf2ad91875", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "03590032-70f9-4c81-82cb-51d181167f60", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n        history_best_improvement = 0\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                improvement = fitness[i] - trial_fitness\n                history_best_improvement = max(history_best_improvement, improvement)\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Enhanced convergence by incorporating a dynamic learning rate influenced by historical best improvement.", "configspace": "", "generation": 25, "fitness": 0.2806035138362053, "feedback": "The algorithm HybridMC_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.22.", "error": "", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "0a00d271-5d44-4900-86f0-1b1677a7c10c", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "24a9813f-b732-4929-b8c3-cf7963b24ec0", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "a7d5bb7e-cbb5-472b-8278-13c45d16075b", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "9df0836d-b093-4fcf-892a-eb710ab9162c", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "049ee7a7-ca85-4834-8ef4-602de23ce7e1", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "da169136-674f-4dd4-a2ff-a6b5a7ef0366", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "3ecc8897-02c7-4502-a24c-52f5c93166a6", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "be2729a2-a274-4382-b384-43131e71ee95", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "1ae980a9-7563-4f00-a85c-5e2302c6fd18", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "dd6281da-750f-46cc-836c-77cae5acad9d", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "b4b3e9c4-fe9b-4514-a1d2-4c160a0e0840", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "8a7658e5-b3d0-4432-ac62-f47b5154db8b", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "1eb84e6c-d777-4054-84e0-6b47b3971185", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "aeff1d3c-ae2f-4318-8375-70915482a8a3", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "47f596e4-6b76-4a27-8eb0-745a948ad8bd", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "0231edec-0039-416c-89f0-8a2dbc655e4d", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "eeda1558-034d-494c-8c26-8801952978ef", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "b57b74ba-be34-445f-bc82-844e0e02f8cf", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "b2b49e8c-0d0e-4c90-a2ad-4f9206d964b7", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "97c05781-2574-409d-9734-1bebbd85f794", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with dynamic noise based on fitness variance\n                fitness_variance = np.var(fitness)\n                noise_scale = 0.1 + 0.2 * (fitness_variance / (best_fitness + 1e-9))\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, noise_scale, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Enhanced exploration by dynamically adjusting Monte Carlo noise based on fitness variance.", "configspace": "", "generation": 45, "fitness": -Infinity, "feedback": "An exception occurred: ValueError('scale < 0').", "error": "ValueError('scale < 0')", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {}, "mutation_prompt": null}
{"id": "daaefcd3-2402-4de1-8485-218e9e89bdd9", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "24f9277b-e37f-416e-a11f-b01381cfa789", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "c392aec0-4137-4ada-add4-5222e123933e", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adjust crossover probability based on fitness improvement\n                fitness_improvement = (best_fitness - fitness[i]) / (best_fitness + 1e-8)\n                crossover_prob = 0.5 + 0.3 * fitness_improvement\n                trial = np.where(np.random.rand(self.dim) < crossover_prob, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Enhanced exploration and exploitation by dynamically adjusting mutation and crossover probabilities based on relative fitness improvement.", "configspace": "", "generation": 48, "fitness": 0.20301252651621265, "feedback": "The algorithm HybridMC_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.20 with standard deviation 0.23.", "error": "", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5997193562122829, 0.5997193562122829, 0.5997193562122829, 0.59287964733839, 0.59287964733839, 0.59287964733839, 0.6061900659078516, 0.6061900659078516, 0.6061900659078516, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.28497433698516983, 0.28497433698516983, 0.28497433698516983, 0.1314615088714961, 0.1314615088714961, 0.1314615088714961, 0.12655810650557764, 0.12655810650557764, 0.12655810650557764, 0.12463962000937501, 0.12463962000937501, 0.12463962000937501, 0.06774071334875553, 0.06774071334875553, 0.06774071334875553, 0.08769802197113608, 0.08769802197113608, 0.08769802197113608, 0.957695833035037, 0.957695833035037, 0.957695833035037, 0.9704412558350173, 0.9704412558350173, 0.9704412558350173, 0.9786593306699002, 0.9786593306699002, 0.9786593306699002, 0.10826622479271919, 0.10826622479271919, 0.10826622479271919, 0.11008373210090683, 0.11008373210090683, 0.11008373210090683, 0.3932443856377158, 0.3932443856377158, 0.3932443856377158, 0.18893364545314306, 0.18893364545314306, 0.18893364545314306, 0.17396108078011296, 0.17396108078011296, 0.17396108078011296, 0.1572175007679809, 0.1572175007679809, 0.1572175007679809, 0.005574235003945827, 0.005574235003945827, 0.005574235003945827, 0.20120146787602133, 0.20120146787602133, 0.20120146787602133, 0.013979031628738037, 0.013979031628738037, 0.013979031628738037, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06562337536682694, 0.06562337536682694, 0.06562337536682694, 0.04042933054615494, 0.04042933054615494, 0.04042933054615494, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.004322776389964367, 0.004322776389964367, 0.004322776389964367, 0.022453186871786435, 0.022453186871786435, 0.022453186871786435, 0.019006427131145753, 0.019006427131145753, 0.019006427131145753, 0.0041398034783113324, 0.0041398034783113324, 0.0041398034783113324, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005057079199685344, 0.005057079199685344, 0.005057079199685344, 0.07151764311389308, 0.07151764311389308, 0.07151764311389308, 0.48306227715291505, 0.48306227715291505, 0.48306227715291505, 0.46628366962423073, 0.46628366962423073, 0.46628366962423073, 0.40806168735075377, 0.40806168735075377, 0.40806168735075377, 0.10136388874146429, 0.10136388874146429, 0.10136388874146429, 0.07605034548846468, 0.07605034548846468, 0.07605034548846468, 0.11549864273676236, 0.11549864273676236, 0.11549864273676236, 0.16812825637044593, 0.16812825637044593, 0.16812825637044593, 0.14888651893380067, 0.14888651893380067, 0.14888651893380067, 0.1440785629339416, 0.1440785629339416, 0.1440785629339416, 0.3134317387451899, 0.3134317387451899, 0.3134317387451899, 0.2882324970813832, 0.2882324970813832, 0.2882324970813832, 0.3400212726257461, 0.3400212726257461, 0.3400212726257461, 0.25046667999684824, 0.25046667999684824, 0.25046667999684824, 0.16656835712204665, 0.16656835712204665, 0.16656835712204665, 0.27612508040080874, 0.27612508040080874, 0.27612508040080874, 0.2086379493299524, 0.2086379493299524, 0.2086379493299524, 0.1874686156304185, 0.1874686156304185, 0.1874686156304185, 0.20687064986729742, 0.20687064986729742, 0.20687064986729742, 0.20061507301662984, 0.20061507301662984, 0.20061507301662984, 0.17138784448442967, 0.17138784448442967, 0.17138784448442967, 0.15997753031049256, 0.15997753031049256, 0.15997753031049256, 0.3720346386865626, 0.3720346386865626, 0.3720346386865626, 0.16041670719049128, 0.16041670719049128, 0.16041670719049128, 0.8343643014485781, 0.8343643014485781, 0.8343643014485781, 0.15433623926394535, 0.15433623926394535, 0.15433623926394535, 0.16769162642422364, 0.16769162642422364, 0.16769162642422364, 0.11279028965358107, 0.11279028965358107, 0.11279028965358107, 0.18875374309860649, 0.18875374309860649, 0.18875374309860649, 0.16393667718011018, 0.16393667718011018, 0.16393667718011018, 0.20010892595715168, 0.20010892595715168, 0.20010892595715168, 0.08154824702859931, 0.08154824702859931, 0.08154824702859931, 0.10331744305742141, 0.10331744305742141, 0.10331744305742141, 0.08171720940497484, 0.08171720940497484, 0.08171720940497484]}, "mutation_prompt": null}
{"id": "e858fe8f-1a1a-4e67-8340-faa308b0336c", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "b237301a-afe6-4e91-8599-8d3237c66d7b", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "bd2624d6-1ed6-4479-8b91-8992f01405ed", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "7b8bd598-e305-4ca7-9bb4-8114bf781c94", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "7f718e7c-be8a-4392-a79a-07d26959efdc", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "32b58ae7-a197-4b2f-8bdf-f50cbd06a617", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop, axis=0)  # Calculate dimension-wise diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Enhanced exploration by incorporating dimension-wise adaptive mutation scaling based on individual contribution.", "configspace": "", "generation": 54, "fitness": 0.27979616790012246, "feedback": "The algorithm HybridMC_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.23.", "error": "", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.6247990611521138, 0.6247990611521138, 0.6247990611521138, 0.588683762804104, 0.588683762804104, 0.588683762804104, 0.5806347615216941, 0.5806347615216941, 0.5806347615216941, 0.2936063867302148, 0.2936063867302148, 0.2936063867302148, 0.24207984480759792, 0.24207984480759792, 0.24207984480759792, 0.2564116278569186, 0.2564116278569186, 0.2564116278569186, 0.2721785611289935, 0.2721785611289935, 0.2721785611289935, 0.18517689062656184, 0.18517689062656184, 0.18517689062656184, 0.25963027705695685, 0.25963027705695685, 0.25963027705695685, 0.14642078620170174, 0.14642078620170174, 0.14642078620170174, 0.15833478221115638, 0.15833478221115638, 0.15833478221115638, 0.1565937787451347, 0.1565937787451347, 0.1565937787451347, 0.9739991665838372, 0.9739991665838372, 0.9739991665838372, 0.9642307829019565, 0.9642307829019565, 0.9642307829019565, 0.9699025008147923, 0.9699025008147923, 0.9699025008147923, 0.3633571657324848, 0.3633571657324848, 0.3633571657324848, 0.36993770905975165, 0.36993770905975165, 0.36993770905975165, 0.3876045087262613, 0.3876045087262613, 0.3876045087262613, 0.747881600816896, 0.747881600816896, 0.747881600816896, 0.6723843531968692, 0.6723843531968692, 0.6723843531968692, 0.7122566512723794, 0.7122566512723794, 0.7122566512723794, 0.15886242259115313, 0.15886242259115313, 0.15886242259115313, 0.1747452031156579, 0.1747452031156579, 0.1747452031156579, 0.20993017288205307, 0.20993017288205307, 0.20993017288205307, 0.20744152076696332, 0.20744152076696332, 0.20744152076696332, 0.19386678729227003, 0.19386678729227003, 0.19386678729227003, 0.18120092068818272, 0.18120092068818272, 0.18120092068818272, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.06863347623113714, 0.06863347623113714, 0.06863347623113714, 0.05646407816667509, 0.05646407816667509, 0.05646407816667509, 0.05584996102323203, 0.05584996102323203, 0.05584996102323203, 0.026469405843289162, 0.026469405843289162, 0.026469405843289162, 0.011658308304047571, 0.011658308304047571, 0.011658308304047571, 0.03006534836018404, 0.03006534836018404, 0.03006534836018404, 0.1450888617614734, 0.1450888617614734, 0.1450888617614734, 0.06465614231923644, 0.06465614231923644, 0.06465614231923644, 0.11401627527219682, 0.11401627527219682, 0.11401627527219682, 0.4798165160951188, 0.4798165160951188, 0.4798165160951188, 0.46657711497654075, 0.46657711497654075, 0.46657711497654075, 0.5266422195562279, 0.5266422195562279, 0.5266422195562279, 0.12292124685605288, 0.12292124685605288, 0.12292124685605288, 0.1466645336579666, 0.1466645336579666, 0.1466645336579666, 0.12565248206893398, 0.12565248206893398, 0.12565248206893398, 0.1777115419427342, 0.1777115419427342, 0.1777115419427342, 0.2027440260635327, 0.2027440260635327, 0.2027440260635327, 0.2788881774218568, 0.2788881774218568, 0.2788881774218568, 0.34124287156929756, 0.34124287156929756, 0.34124287156929756, 0.33837026661864256, 0.33837026661864256, 0.33837026661864256, 0.35853745332444453, 0.35853745332444453, 0.35853745332444453, 0.22158198481207203, 0.22158198481207203, 0.22158198481207203, 0.2531898247457144, 0.2531898247457144, 0.2531898247457144, 0.2122200277107006, 0.2122200277107006, 0.2122200277107006, 0.22216510415781798, 0.22216510415781798, 0.22216510415781798, 0.19901882658353232, 0.19901882658353232, 0.19901882658353232, 0.21678941278201824, 0.21678941278201824, 0.21678941278201824, 0.19910544259338747, 0.19910544259338747, 0.19910544259338747, 0.3554534194337222, 0.3554534194337222, 0.3554534194337222, 0.3081024724425583, 0.3081024724425583, 0.3081024724425583, 0.18479529393904837, 0.18479529393904837, 0.18479529393904837, 0.7739979373119424, 0.7739979373119424, 0.7739979373119424, 0.17013569923614702, 0.17013569923614702, 0.17013569923614702, 0.4136288038858581, 0.4136288038858581, 0.4136288038858581, 0.1687043051729442, 0.1687043051729442, 0.1687043051729442, 0.21204897280319923, 0.21204897280319923, 0.21204897280319923, 0.18146942694510293, 0.18146942694510293, 0.18146942694510293, 0.194929764541953, 0.194929764541953, 0.194929764541953, 0.19382580379699077, 0.19382580379699077, 0.19382580379699077, 0.09926762495541952, 0.09926762495541952, 0.09926762495541952, 0.08435671790176114, 0.08435671790176114, 0.08435671790176114, 0.08941492833944942, 0.08941492833944942, 0.08941492833944942]}, "mutation_prompt": null}
{"id": "cd8b1f1b-078c-4636-8284-6126ec5fe050", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "61a8ffb1-bc03-45a4-946c-b573a92f18ae", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "ae352e39-dded-48c4-b11c-0d0cda517804", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "31b4d1db-5032-4d2d-bdc4-ba2c57263ce7", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "2b07d456-63ae-49bb-88d6-04852a8eba44", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "1f9c544d-79fa-4580-ab4e-7f291a05350b", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "4d0d73d8-dba5-4eb2-b7e5-2b1699ea8d80", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "49982d21-5975-430a-bcae-022ba2f42bdd", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "e0b9e202-4311-4eb9-9759-050637567e7f", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "8a925473-1130-4fe5-a9e2-c8af8a279570", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "16852209-7cc0-4088-adc5-419121bd8e0e", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "c84dc92d-e322-476d-884b-867c57082b3e", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "bdb0fa8b-dbe7-4db0-94cc-35093bb5f387", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Adaptive crossover based on fitness variance\n                fitness_variance = np.var(fitness)\n                crossover_rate = 0.5 + 0.2 * (fitness_variance / (np.max(fitness) - np.min(fitness) + 1e-10))\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < crossover_rate, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Enhanced mutation strategy by integrating adaptive crossover rates based on fitness variance in the population.", "configspace": "", "generation": 67, "fitness": 0.2654938992459891, "feedback": "The algorithm HybridMC_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.27 with standard deviation 0.23.", "error": "", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5878261328770586, 0.5878261328770586, 0.5878261328770586, 0.5923354465310424, 0.5923354465310424, 0.5923354465310424, 0.6115978919445734, 0.6115978919445734, 0.6115978919445734, 0.05542674333616737, 0.05542674333616737, 0.05542674333616737, 0.061675586899550994, 0.061675586899550994, 0.061675586899550994, 0.11881481525786786, 0.11881481525786786, 0.11881481525786786, 0.09388021624144671, 0.09388021624144671, 0.09388021624144671, 0.23128093120036441, 0.23128093120036441, 0.23128093120036441, 0.1525151648761226, 0.1525151648761226, 0.1525151648761226, 0.10025927371491927, 0.10025927371491927, 0.10025927371491927, 0.13882740288356, 0.13882740288356, 0.13882740288356, 0.0741982489928742, 0.0741982489928742, 0.0741982489928742, 0.9681195607597268, 0.9681195607597268, 0.9681195607597268, 0.9716607542964895, 0.9716607542964895, 0.9716607542964895, 0.9641643476161335, 0.9641643476161335, 0.9641643476161335, 0.36073328622064826, 0.36073328622064826, 0.36073328622064826, 0.3898723442978592, 0.3898723442978592, 0.3898723442978592, 0.37681236931929585, 0.37681236931929585, 0.37681236931929585, 0.22839490560316178, 0.22839490560316178, 0.22839490560316178, 0.2803515580619689, 0.2803515580619689, 0.2803515580619689, 0.8148137497730665, 0.8148137497730665, 0.8148137497730665, 0.1351991243656676, 0.1351991243656676, 0.1351991243656676, 0.20057236390410615, 0.20057236390410615, 0.20057236390410615, 0.17877860787772093, 0.17877860787772093, 0.17877860787772093, 0.30365746383181436, 0.30365746383181436, 0.30365746383181436, 0.20250046624946216, 0.20250046624946216, 0.20250046624946216, 0.20280696126258513, 0.20280696126258513, 0.20280696126258513, 0.07961035118487358, 0.07961035118487358, 0.07961035118487358, 0.05373248188437918, 0.05373248188437918, 0.05373248188437918, 0.032993774841846624, 0.032993774841846624, 0.032993774841846624, 0.13563890824338465, 0.13563890824338465, 0.13563890824338465, 0.06268297698912506, 0.06268297698912506, 0.06268297698912506, 0.16246096566994617, 0.16246096566994617, 0.16246096566994617, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.12676236768667537, 0.12676236768667537, 0.12676236768667537, 0.15414323198199908, 0.15414323198199908, 0.15414323198199908, 0.12323109654497388, 0.12323109654497388, 0.12323109654497388, 0.47595308536543335, 0.47595308536543335, 0.47595308536543335, 0.4942296203880465, 0.4942296203880465, 0.4942296203880465, 0.48070473577915207, 0.48070473577915207, 0.48070473577915207, 0.06262259130923997, 0.06262259130923997, 0.06262259130923997, 0.10084504372899461, 0.10084504372899461, 0.10084504372899461, 0.09206759391581143, 0.09206759391581143, 0.09206759391581143, 0.23435459503980105, 0.23435459503980105, 0.23435459503980105, 0.2255444294639103, 0.2255444294639103, 0.2255444294639103, 0.24070940273529595, 0.24070940273529595, 0.24070940273529595, 0.3261903902753297, 0.3261903902753297, 0.3261903902753297, 0.3432555009090946, 0.3432555009090946, 0.3432555009090946, 0.33692522357987365, 0.33692522357987365, 0.33692522357987365, 0.270011507475286, 0.270011507475286, 0.270011507475286, 0.30512398437773547, 0.30512398437773547, 0.30512398437773547, 0.22734395335482127, 0.22734395335482127, 0.22734395335482127, 0.22386807168991096, 0.22386807168991096, 0.22386807168991096, 0.2711600249197481, 0.2711600249197481, 0.2711600249197481, 0.21695795481315905, 0.21695795481315905, 0.21695795481315905, 0.20515424383553404, 0.20515424383553404, 0.20515424383553404, 0.20225412539673748, 0.20225412539673748, 0.20225412539673748, 0.21904376329685205, 0.21904376329685205, 0.21904376329685205, 0.1776626712288315, 0.1776626712288315, 0.1776626712288315, 0.8772657617615383, 0.8772657617615383, 0.8772657617615383, 0.1430705367290911, 0.1430705367290911, 0.1430705367290911, 0.6608847066883357, 0.6608847066883357, 0.6608847066883357, 0.1696391852233612, 0.1696391852233612, 0.1696391852233612, 0.44500710044071856, 0.44500710044071856, 0.44500710044071856, 0.17596711196491122, 0.17596711196491122, 0.17596711196491122, 0.17469599449428175, 0.17469599449428175, 0.17469599449428175, 0.17344636826134718, 0.17344636826134718, 0.17344636826134718, 0.07638873126070467, 0.07638873126070467, 0.07638873126070467, 0.08025490333441287, 0.08025490333441287, 0.08025490333441287, 0.07832595945145926, 0.07832595945145926, 0.07832595945145926]}, "mutation_prompt": null}
{"id": "cb1d14fc-98d3-431e-90e1-71065c295fd2", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "02337e75-0a4c-439c-b2d6-b98c06ad8de2", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "2d0013d6-6bff-4e81-9aa6-838c96a7092b", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "1d11e241-cdea-4c4f-a7c8-aeead6b1cb3a", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "b32f1732-33d1-4b91-8afa-80236f475493", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "48381358-d4fe-44fb-b3c3-09137ea2c7cd", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "e7bcce0f-4b2a-45ed-8921-49df264370f1", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "a92903ae-8b2f-4286-a861-b2b92a010cff", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "b494bb84-11c7-4495-8dad-662e3ad8431a", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "3cc30bb0-d9dc-4b5f-aaea-d78d626dec50", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "d02279e2-51a6-4895-8892-f5ea9c7da08a", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "16f26d29-77bd-463a-a81e-d70229ee9d25", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "f1fa5911-5b54-4cca-bd30-f2ab13b80317", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "5b5342f5-afb0-42be-b5c5-dd62597c0201", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "85037dba-0239-4c9d-a220-35d7ec9dcf11", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "1fa5dbc4-35b9-4e12-98ab-b42505a09d89", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "b617d7e2-97ce-49ab-b03b-52e16bd18337", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "681d124e-edd1-45f4-8da4-3a87777fa766", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n\n        return best", "name": "HybridMC_DE", "description": "Improved exploration by introducing adaptive mutation scale in Differential Evolution based on population diversity.", "configspace": "", "generation": 10, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.5991166734631905, 0.5991166734631905, 0.5991166734631905, 0.5877665355084323, 0.5877665355084323, 0.5877665355084323, 0.6074804257194231, 0.6074804257194231, 0.6074804257194231, 0.2680656871239685, 0.2680656871239685, 0.2680656871239685, 0.2848587979380045, 0.2848587979380045, 0.2848587979380045, 0.2692525177051823, 0.2692525177051823, 0.2692525177051823, 0.1821777971101396, 0.1821777971101396, 0.1821777971101396, 0.18771301306591626, 0.18771301306591626, 0.18771301306591626, 0.23245255861952385, 0.23245255861952385, 0.23245255861952385, 0.25992370934574294, 0.25992370934574294, 0.25992370934574294, 0.18139498918477026, 0.18139498918477026, 0.18139498918477026, 0.20175427079461072, 0.20175427079461072, 0.20175427079461072, 0.973630062903022, 0.973630062903022, 0.973630062903022, 0.9756022405106087, 0.9756022405106087, 0.9756022405106087, 0.9684172042157843, 0.9684172042157843, 0.9684172042157843, 0.3743350094566583, 0.3743350094566583, 0.3743350094566583, 0.3732719989140417, 0.3732719989140417, 0.3732719989140417, 0.35847323965909295, 0.35847323965909295, 0.35847323965909295, 0.6540179592064229, 0.6540179592064229, 0.6540179592064229, 0.7171559377559072, 0.7171559377559072, 0.7171559377559072, 0.2496088871316351, 0.2496088871316351, 0.2496088871316351, 0.17854701878892465, 0.17854701878892465, 0.17854701878892465, 0.16976289779815756, 0.16976289779815756, 0.16976289779815756, 0.250461391247226, 0.250461391247226, 0.250461391247226, 0.17047828107320673, 0.17047828107320673, 0.17047828107320673, 0.18741514988746188, 0.18741514988746188, 0.18741514988746188, 0.15481473383652833, 0.15481473383652833, 0.15481473383652833, 0.0005454786075009821, 0.0005454786075009821, 0.0005454786075009821, 0.01685125708897417, 0.01685125708897417, 0.01685125708897417, 0.003683844219429022, 0.003683844219429022, 0.003683844219429022, 0.0731576510359997, 0.0731576510359997, 0.0731576510359997, 0.044291636392029377, 0.044291636392029377, 0.044291636392029377, 0.08752826283297288, 0.08752826283297288, 0.08752826283297288, 0.038178635619740664, 0.038178635619740664, 0.038178635619740664, 0.029015113795623493, 0.029015113795623493, 0.029015113795623493, 0.04204132240317904, 0.04204132240317904, 0.04204132240317904, 0.13472457435862728, 0.13472457435862728, 0.13472457435862728, 0.13456691365101525, 0.13456691365101525, 0.13456691365101525, 0.10454203113817018, 0.10454203113817018, 0.10454203113817018, 0.4597997422526353, 0.4597997422526353, 0.4597997422526353, 0.4856914453956107, 0.4856914453956107, 0.4856914453956107, 0.4892366982640278, 0.4892366982640278, 0.4892366982640278, 0.11194444263012393, 0.11194444263012393, 0.11194444263012393, 0.11416887164501655, 0.11416887164501655, 0.11416887164501655, 0.12015060162784064, 0.12015060162784064, 0.12015060162784064, 0.18166889655605067, 0.18166889655605067, 0.18166889655605067, 0.20857087340328895, 0.20857087340328895, 0.20857087340328895, 0.16259038482389188, 0.16259038482389188, 0.16259038482389188, 0.3083937298674818, 0.3083937298674818, 0.3083937298674818, 0.3393403354037978, 0.3393403354037978, 0.3393403354037978, 0.35668137585014403, 0.35668137585014403, 0.35668137585014403, 0.2306296928438153, 0.2306296928438153, 0.2306296928438153, 0.26309643814354866, 0.26309643814354866, 0.26309643814354866, 0.2560263571557322, 0.2560263571557322, 0.2560263571557322, 0.20743636779192431, 0.20743636779192431, 0.20743636779192431, 0.22193481448136865, 0.22193481448136865, 0.22193481448136865, 0.221629055954628, 0.221629055954628, 0.221629055954628, 0.34012890148267994, 0.34012890148267994, 0.34012890148267994, 0.23124407128145308, 0.23124407128145308, 0.23124407128145308, 0.22723940812061605, 0.22723940812061605, 0.22723940812061605, 0.7606210673295282, 0.7606210673295282, 0.7606210673295282, 0.6277206979323054, 0.6277206979323054, 0.6277206979323054, 0.17496495279190605, 0.17496495279190605, 0.17496495279190605, 0.48227821295294715, 0.48227821295294715, 0.48227821295294715, 0.167945511725066, 0.167945511725066, 0.167945511725066, 0.29877724421783325, 0.29877724421783325, 0.29877724421783325, 0.18792362674948593, 0.18792362674948593, 0.18792362674948593, 0.18454808557724622, 0.18454808557724622, 0.18454808557724622, 0.192387316785122, 0.192387316785122, 0.192387316785122, 0.0967327428656346, 0.0967327428656346, 0.0967327428656346, 0.08307058353297359, 0.08307058353297359, 0.08307058353297359, 0.08180473966421109, 0.08180473966421109, 0.08180473966421109]}, "mutation_prompt": null}
{"id": "696c8342-5edc-477b-9f55-3576af748eb8", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n        success_rate = 0.5\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                scale = 0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound)) * success_rate\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    success_rate = 0.9 * success_rate + 0.1  # Update success rate\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n                else:\n                    success_rate *= 0.9  # Decrease success rate if no improvement\n\n        return best", "name": "HybridMC_DE", "description": "Enhanced mutation by incorporating a success-based adaptive strategy to adjust the scale based on the relative improvement of trials.", "configspace": "", "generation": 86, "fitness": 0.2875050201336559, "feedback": "The algorithm HybridMC_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.24.", "error": "", "parent_id": "a95e43de-9481-4c7e-9f83-f745f3187329", "metadata": {"aucs": [0.639326383720803, 0.639326383720803, 0.639326383720803, 0.6013649965892115, 0.6013649965892115, 0.6013649965892115, 0.6053135351741842, 0.6053135351741842, 0.6053135351741842, 0.26169319074296293, 0.26169319074296293, 0.26169319074296293, 0.2611472905062977, 0.2611472905062977, 0.2611472905062977, 0.2403512320801312, 0.2403512320801312, 0.2403512320801312, 0.3016739740655866, 0.3016739740655866, 0.3016739740655866, 0.18799346209578893, 0.18799346209578893, 0.18799346209578893, 0.1834224038559057, 0.1834224038559057, 0.1834224038559057, 0.13002393720191008, 0.13002393720191008, 0.13002393720191008, 0.11777582582068202, 0.11777582582068202, 0.11777582582068202, 0.17146147775394527, 0.17146147775394527, 0.17146147775394527, 0.9735395313890502, 0.9735395313890502, 0.9735395313890502, 0.9714896387760118, 0.9714896387760118, 0.9714896387760118, 0.9663604835086254, 0.9663604835086254, 0.9663604835086254, 0.3748237033774796, 0.3748237033774796, 0.3748237033774796, 0.3468277989583872, 0.3468277989583872, 0.3468277989583872, 0.3457265161370511, 0.3457265161370511, 0.3457265161370511, 0.7293647815197153, 0.7293647815197153, 0.7293647815197153, 0.5607371218832891, 0.5607371218832891, 0.5607371218832891, 0.6822801358340942, 0.6822801358340942, 0.6822801358340942, 0.27871066745006134, 0.27871066745006134, 0.27871066745006134, 0.27011475391057105, 0.27011475391057105, 0.27011475391057105, 0.1602932579908427, 0.1602932579908427, 0.1602932579908427, 0.17001101068099456, 0.17001101068099456, 0.17001101068099456, 0.14599556691978577, 0.14599556691978577, 0.14599556691978577, 0.17547708641234183, 0.17547708641234183, 0.17547708641234183, 0.02368559886024013, 0.02368559886024013, 0.02368559886024013, 0.01979369750119442, 0.01979369750119442, 0.01979369750119442, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.09419743141743964, 0.09419743141743964, 0.09419743141743964, 0.03406425769883914, 0.03406425769883914, 0.03406425769883914, 0.15296062283817702, 0.15296062283817702, 0.15296062283817702, 0.022606127564157807, 0.022606127564157807, 0.022606127564157807, 0.04571614216217201, 0.04571614216217201, 0.04571614216217201, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.13392899168120398, 0.13392899168120398, 0.13392899168120398, 0.05873421744559493, 0.05873421744559493, 0.05873421744559493, 0.12101481656695634, 0.12101481656695634, 0.12101481656695634, 0.4641207828998042, 0.4641207828998042, 0.4641207828998042, 0.4773551968534321, 0.4773551968534321, 0.4773551968534321, 0.49712189103702453, 0.49712189103702453, 0.49712189103702453, 0.1055401361351409, 0.1055401361351409, 0.1055401361351409, 0.12697522726710353, 0.12697522726710353, 0.12697522726710353, 0.11313702375026713, 0.11313702375026713, 0.11313702375026713, 0.15372989347458066, 0.15372989347458066, 0.15372989347458066, 0.1634766016861442, 0.1634766016861442, 0.1634766016861442, 0.1566124021285059, 0.1566124021285059, 0.1566124021285059, 0.3256450529058885, 0.3256450529058885, 0.3256450529058885, 0.3531945566013952, 0.3531945566013952, 0.3531945566013952, 0.3456472230022448, 0.3456472230022448, 0.3456472230022448, 0.23964666540207424, 0.23964666540207424, 0.23964666540207424, 0.25789348663901257, 0.25789348663901257, 0.25789348663901257, 0.19046854078427478, 0.19046854078427478, 0.19046854078427478, 0.21003172364902167, 0.21003172364902167, 0.21003172364902167, 0.2190024443144396, 0.2190024443144396, 0.2190024443144396, 0.2334907467523829, 0.2334907467523829, 0.2334907467523829, 0.19701743678418704, 0.19701743678418704, 0.19701743678418704, 0.24654394769910015, 0.24654394769910015, 0.24654394769910015, 0.22313025543902598, 0.22313025543902598, 0.22313025543902598, 0.7546045377959735, 0.7546045377959735, 0.7546045377959735, 0.1674198690286075, 0.1674198690286075, 0.1674198690286075, 0.8109782314120317, 0.8109782314120317, 0.8109782314120317, 0.575767267105157, 0.575767267105157, 0.575767267105157, 0.4970514619557783, 0.4970514619557783, 0.4970514619557783, 0.2069762968034583, 0.2069762968034583, 0.2069762968034583, 0.17970232017232923, 0.17970232017232923, 0.17970232017232923, 0.17700381360869655, 0.17700381360869655, 0.17700381360869655, 0.18838328698073414, 0.18838328698073414, 0.18838328698073414, 0.08447769916818615, 0.08447769916818615, 0.08447769916818615, 0.11555812350365069, 0.11555812350365069, 0.11555812350365069, 0.08245563879188411, 0.08245563879188411, 0.08245563879188411]}, "mutation_prompt": null}
{"id": "509c5031-8f43-4e47-85be-002c7281665c", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n        success_rate = 0.5\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                random_factor = np.random.uniform(0.7, 1.3)  # Random scaling factor\n                scale = random_factor * (0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound)) * success_rate)\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    success_rate = 0.9 * success_rate + 0.1  # Update success rate\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n                else:\n                    success_rate *= 0.9  # Decrease success rate if no improvement\n\n        return best", "name": "HybridMC_DE", "description": "Introduced random scaling factor adjustments to enhance exploration capability and prevent premature convergence.", "configspace": "", "generation": 87, "fitness": 0.3011360392800152, "feedback": "The algorithm HybridMC_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.30 with standard deviation 0.25.", "error": "", "parent_id": "696c8342-5edc-477b-9f55-3576af748eb8", "metadata": {"aucs": [0.5850806795683843, 0.5850806795683843, 0.5850806795683843, 0.6402321815278058, 0.6402321815278058, 0.6402321815278058, 0.6139125505471659, 0.6139125505471659, 0.6139125505471659, 0.24421112755629915, 0.24421112755629915, 0.24421112755629915, 0.2727177520109847, 0.2727177520109847, 0.2727177520109847, 0.27271585497424855, 0.27271585497424855, 0.27271585497424855, 0.245550295282285, 0.245550295282285, 0.245550295282285, 0.3166453795732621, 0.3166453795732621, 0.3166453795732621, 0.32396818242228487, 0.32396818242228487, 0.32396818242228487, 0.15205606069621025, 0.15205606069621025, 0.15205606069621025, 0.15651345909399972, 0.15651345909399972, 0.15651345909399972, 0.15706740377771589, 0.15706740377771589, 0.15706740377771589, 0.9616157146911242, 0.9616157146911242, 0.9616157146911242, 0.9772299403238238, 0.9772299403238238, 0.9772299403238238, 0.9713125639432432, 0.9713125639432432, 0.9713125639432432, 0.3966085138605975, 0.3966085138605975, 0.3966085138605975, 0.34819073069871964, 0.34819073069871964, 0.34819073069871964, 0.36575225414538404, 0.36575225414538404, 0.36575225414538404, 0.8166353566481304, 0.8166353566481304, 0.8166353566481304, 0.6825468356523419, 0.6825468356523419, 0.6825468356523419, 0.8347301730914793, 0.8347301730914793, 0.8347301730914793, 0.23054296025524512, 0.23054296025524512, 0.23054296025524512, 0.2118053426983253, 0.2118053426983253, 0.2118053426983253, 0.17090966343249714, 0.17090966343249714, 0.17090966343249714, 0.17067137735762006, 0.17067137735762006, 0.17067137735762006, 0.19347246229559278, 0.19347246229559278, 0.19347246229559278, 0.19799955561057114, 0.19799955561057114, 0.19799955561057114, 0.006254476277291032, 0.006254476277291032, 0.006254476277291032, 0.041169629535378616, 0.041169629535378616, 0.041169629535378616, 0.005196672944089875, 0.005196672944089875, 0.005196672944089875, 0.09201355541368172, 0.09201355541368172, 0.09201355541368172, 0.07676372458868697, 0.07676372458868697, 0.07676372458868697, 0.12322176058461387, 0.12322176058461387, 0.12322176058461387, 0.0017600998284419411, 0.0017600998284419411, 0.0017600998284419411, 0.0025896179516130546, 0.0025896179516130546, 0.0025896179516130546, 0.018413118031285203, 0.018413118031285203, 0.018413118031285203, 0.12345847615105376, 0.12345847615105376, 0.12345847615105376, 0.12839486724115046, 0.12839486724115046, 0.12839486724115046, 0.15923535087732832, 0.15923535087732832, 0.15923535087732832, 0.47152410278157486, 0.47152410278157486, 0.47152410278157486, 0.5112780167986313, 0.5112780167986313, 0.5112780167986313, 0.47442369289708597, 0.47442369289708597, 0.47442369289708597, 0.11728152447121887, 0.11728152447121887, 0.11728152447121887, 0.11546460432079186, 0.11546460432079186, 0.11546460432079186, 0.1059187211586593, 0.1059187211586593, 0.1059187211586593, 0.16086292844045091, 0.16086292844045091, 0.16086292844045091, 0.1586608675312977, 0.1586608675312977, 0.1586608675312977, 0.2144460418303833, 0.2144460418303833, 0.2144460418303833, 0.35735425401296184, 0.35735425401296184, 0.35735425401296184, 0.3323325876705059, 0.3323325876705059, 0.3323325876705059, 0.36214166628118716, 0.36214166628118716, 0.36214166628118716, 0.22292208697167482, 0.22292208697167482, 0.22292208697167482, 0.2521397893300511, 0.2521397893300511, 0.2521397893300511, 0.2198039569278485, 0.2198039569278485, 0.2198039569278485, 0.21046908040944923, 0.21046908040944923, 0.21046908040944923, 0.23421200788034668, 0.23421200788034668, 0.23421200788034668, 0.19733078620526256, 0.19733078620526256, 0.19733078620526256, 0.23346343518911972, 0.23346343518911972, 0.23346343518911972, 0.2252685424940285, 0.2252685424940285, 0.2252685424940285, 0.2669413252323598, 0.2669413252323598, 0.2669413252323598, 0.18702233430638326, 0.18702233430638326, 0.18702233430638326, 0.9123849458906574, 0.9123849458906574, 0.9123849458906574, 0.7679750753779289, 0.7679750753779289, 0.7679750753779289, 0.5268196544870059, 0.5268196544870059, 0.5268196544870059, 0.21005563571685093, 0.21005563571685093, 0.21005563571685093, 0.49909938594486425, 0.49909938594486425, 0.49909938594486425, 0.19919734313324655, 0.19919734313324655, 0.19919734313324655, 0.20074722599275474, 0.20074722599275474, 0.20074722599275474, 0.17728092270444518, 0.17728092270444518, 0.17728092270444518, 0.08621235117220827, 0.08621235117220827, 0.08621235117220827, 0.10389194929262668, 0.10389194929262668, 0.10389194929262668, 0.07770226414727621, 0.07770226414727621, 0.07770226414727621]}, "mutation_prompt": null}
{"id": "f405c76b-fe82-4fb8-84a7-1f70ebcaca72", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n        success_rate = 0.5\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                random_factor = np.random.uniform(0.7, 1.3)  # Random scaling factor\n                scale = random_factor * (0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound)) * success_rate)\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    success_rate = 0.9 * success_rate + 0.1  # Update success rate\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n                else:\n                    success_rate *= 0.9  # Decrease success rate if no improvement\n\n        return best", "name": "HybridMC_DE", "description": "Introduced random scaling factor adjustments to enhance exploration capability and prevent premature convergence.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "509c5031-8f43-4e47-85be-002c7281665c", "metadata": {"aucs": [0.5850806795683843, 0.5850806795683843, 0.5850806795683843, 0.6402321815278058, 0.6402321815278058, 0.6402321815278058, 0.6139125505471659, 0.6139125505471659, 0.6139125505471659, 0.24421112755629915, 0.24421112755629915, 0.24421112755629915, 0.2727177520109847, 0.2727177520109847, 0.2727177520109847, 0.27271585497424855, 0.27271585497424855, 0.27271585497424855, 0.245550295282285, 0.245550295282285, 0.245550295282285, 0.3166453795732621, 0.3166453795732621, 0.3166453795732621, 0.32396818242228487, 0.32396818242228487, 0.32396818242228487, 0.15205606069621025, 0.15205606069621025, 0.15205606069621025, 0.15651345909399972, 0.15651345909399972, 0.15651345909399972, 0.15706740377771589, 0.15706740377771589, 0.15706740377771589, 0.9616157146911242, 0.9616157146911242, 0.9616157146911242, 0.9772299403238238, 0.9772299403238238, 0.9772299403238238, 0.9713125639432432, 0.9713125639432432, 0.9713125639432432, 0.3966085138605975, 0.3966085138605975, 0.3966085138605975, 0.34819073069871964, 0.34819073069871964, 0.34819073069871964, 0.36575225414538404, 0.36575225414538404, 0.36575225414538404, 0.8166353566481304, 0.8166353566481304, 0.8166353566481304, 0.6825468356523419, 0.6825468356523419, 0.6825468356523419, 0.8347301730914793, 0.8347301730914793, 0.8347301730914793, 0.23054296025524512, 0.23054296025524512, 0.23054296025524512, 0.2118053426983253, 0.2118053426983253, 0.2118053426983253, 0.17090966343249714, 0.17090966343249714, 0.17090966343249714, 0.17067137735762006, 0.17067137735762006, 0.17067137735762006, 0.19347246229559278, 0.19347246229559278, 0.19347246229559278, 0.19799955561057114, 0.19799955561057114, 0.19799955561057114, 0.006254476277291032, 0.006254476277291032, 0.006254476277291032, 0.041169629535378616, 0.041169629535378616, 0.041169629535378616, 0.005196672944089875, 0.005196672944089875, 0.005196672944089875, 0.09201355541368172, 0.09201355541368172, 0.09201355541368172, 0.07676372458868697, 0.07676372458868697, 0.07676372458868697, 0.12322176058461387, 0.12322176058461387, 0.12322176058461387, 0.0017600998284419411, 0.0017600998284419411, 0.0017600998284419411, 0.0025896179516130546, 0.0025896179516130546, 0.0025896179516130546, 0.018413118031285203, 0.018413118031285203, 0.018413118031285203, 0.12345847615105376, 0.12345847615105376, 0.12345847615105376, 0.12839486724115046, 0.12839486724115046, 0.12839486724115046, 0.15923535087732832, 0.15923535087732832, 0.15923535087732832, 0.47152410278157486, 0.47152410278157486, 0.47152410278157486, 0.5112780167986313, 0.5112780167986313, 0.5112780167986313, 0.47442369289708597, 0.47442369289708597, 0.47442369289708597, 0.11728152447121887, 0.11728152447121887, 0.11728152447121887, 0.11546460432079186, 0.11546460432079186, 0.11546460432079186, 0.1059187211586593, 0.1059187211586593, 0.1059187211586593, 0.16086292844045091, 0.16086292844045091, 0.16086292844045091, 0.1586608675312977, 0.1586608675312977, 0.1586608675312977, 0.2144460418303833, 0.2144460418303833, 0.2144460418303833, 0.35735425401296184, 0.35735425401296184, 0.35735425401296184, 0.3323325876705059, 0.3323325876705059, 0.3323325876705059, 0.36214166628118716, 0.36214166628118716, 0.36214166628118716, 0.22292208697167482, 0.22292208697167482, 0.22292208697167482, 0.2521397893300511, 0.2521397893300511, 0.2521397893300511, 0.2198039569278485, 0.2198039569278485, 0.2198039569278485, 0.21046908040944923, 0.21046908040944923, 0.21046908040944923, 0.23421200788034668, 0.23421200788034668, 0.23421200788034668, 0.19733078620526256, 0.19733078620526256, 0.19733078620526256, 0.23346343518911972, 0.23346343518911972, 0.23346343518911972, 0.2252685424940285, 0.2252685424940285, 0.2252685424940285, 0.2669413252323598, 0.2669413252323598, 0.2669413252323598, 0.18702233430638326, 0.18702233430638326, 0.18702233430638326, 0.9123849458906574, 0.9123849458906574, 0.9123849458906574, 0.7679750753779289, 0.7679750753779289, 0.7679750753779289, 0.5268196544870059, 0.5268196544870059, 0.5268196544870059, 0.21005563571685093, 0.21005563571685093, 0.21005563571685093, 0.49909938594486425, 0.49909938594486425, 0.49909938594486425, 0.19919734313324655, 0.19919734313324655, 0.19919734313324655, 0.20074722599275474, 0.20074722599275474, 0.20074722599275474, 0.17728092270444518, 0.17728092270444518, 0.17728092270444518, 0.08621235117220827, 0.08621235117220827, 0.08621235117220827, 0.10389194929262668, 0.10389194929262668, 0.10389194929262668, 0.07770226414727621, 0.07770226414727621, 0.07770226414727621]}, "mutation_prompt": null}
{"id": "19894195-9c7d-41e7-864c-329f23046629", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n        success_rate = 0.5\n\n        while evaluations < self.budget:\n            # Adjust population size adaptively\n            if evaluations % 50 == 0:  # Every 50 evaluations adjust population size\n                population_size = min(max(4, int(self.dim * (evaluations / self.budget))), 20)\n                pop = pop[:population_size]\n                fitness = fitness[:population_size]\n\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                fitness_std = np.std(fitness) + 1e-8   # Small value to prevent division by zero\n                random_factor = np.random.uniform(0.7, 1.3)  # Random scaling factor\n                scale = random_factor * (0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound)) * (success_rate / fitness_std))\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    success_rate = 0.9 * success_rate + 0.1  # Update success rate\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n                else:\n                    success_rate *= 0.9  # Decrease success rate if no improvement\n\n        return best", "name": "HybridMC_DE", "description": "Introduced adaptive population size and fitness-based scaling factor adjustment to enhance solution diversification and convergence speed.", "configspace": "", "generation": 89, "fitness": 0.25362640241505663, "feedback": "The algorithm HybridMC_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.25 with standard deviation 0.22.", "error": "", "parent_id": "509c5031-8f43-4e47-85be-002c7281665c", "metadata": {"aucs": [0.6600351782751682, 0.6600351782751682, 0.6600351782751682, 0.597397670484098, 0.597397670484098, 0.597397670484098, 0.671902868819471, 0.671902868819471, 0.671902868819471, 0.2347786764681411, 0.2347786764681411, 0.2347786764681411, 0.2940902156508034, 0.2940902156508034, 0.2940902156508034, 0.29530670268685844, 0.29530670268685844, 0.29530670268685844, 0.14803316929162702, 0.14803316929162702, 0.14803316929162702, 0.15929944510046912, 0.15929944510046912, 0.15929944510046912, 0.05945682415806153, 0.05945682415806153, 0.05945682415806153, 0.08440311541970791, 0.08440311541970791, 0.08440311541970791, 0.11790856989302134, 0.11790856989302134, 0.11790856989302134, 0.12686465671077263, 0.12686465671077263, 0.12686465671077263, 0.9529341304254646, 0.9529341304254646, 0.9529341304254646, 0.9636500886175511, 0.9636500886175511, 0.9636500886175511, 0.969216997791526, 0.969216997791526, 0.969216997791526, 0.39376256624495665, 0.39376256624495665, 0.39376256624495665, 0.40581324862690893, 0.40581324862690893, 0.40581324862690893, 0.3971946499969323, 0.3971946499969323, 0.3971946499969323, 0.20117693081331922, 0.20117693081331922, 0.20117693081331922, 0.11792101948124378, 0.11792101948124378, 0.11792101948124378, 0.05929574987302588, 0.05929574987302588, 0.05929574987302588, 0.22124852701339903, 0.22124852701339903, 0.22124852701339903, 0.17482919033830735, 0.17482919033830735, 0.17482919033830735, 0.1331027461750346, 0.1331027461750346, 0.1331027461750346, 0.19791891638356085, 0.19791891638356085, 0.19791891638356085, 0.13536855167369266, 0.13536855167369266, 0.13536855167369266, 0.21088196310545437, 0.21088196310545437, 0.21088196310545437, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0883461396967008, 0.0883461396967008, 0.0883461396967008, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.0827073919302953, 0.0827073919302953, 0.0827073919302953, 0.05253335582141261, 0.05253335582141261, 0.05253335582141261, 0.11617820049866934, 0.11617820049866934, 0.11617820049866934, 0.0960907603198018, 0.0960907603198018, 0.0960907603198018, 0.04943938956310845, 0.04943938956310845, 0.04943938956310845, 0.054674191621533086, 0.054674191621533086, 0.054674191621533086, 0.15282171098374053, 0.15282171098374053, 0.15282171098374053, 0.12885191194535928, 0.12885191194535928, 0.12885191194535928, 0.08383572988309274, 0.08383572988309274, 0.08383572988309274, 0.44887906700376856, 0.44887906700376856, 0.44887906700376856, 0.5072958362892221, 0.5072958362892221, 0.5072958362892221, 0.5193427652788749, 0.5193427652788749, 0.5193427652788749, 0.1346945452996985, 0.1346945452996985, 0.1346945452996985, 0.10644571200499087, 0.10644571200499087, 0.10644571200499087, 0.09959073469289703, 0.09959073469289703, 0.09959073469289703, 0.2275055929837737, 0.2275055929837737, 0.2275055929837737, 0.22464478505924745, 0.22464478505924745, 0.22464478505924745, 0.2509964053196264, 0.2509964053196264, 0.2509964053196264, 0.2870894743624878, 0.2870894743624878, 0.2870894743624878, 0.2871002824916683, 0.2871002824916683, 0.2871002824916683, 0.2820190025668242, 0.2820190025668242, 0.2820190025668242, 0.10489036633456073, 0.10489036633456073, 0.10489036633456073, 0.12122009389580124, 0.12122009389580124, 0.12122009389580124, 0.2269141856109138, 0.2269141856109138, 0.2269141856109138, 0.23296941671439997, 0.23296941671439997, 0.23296941671439997, 0.23475370689581632, 0.23475370689581632, 0.23475370689581632, 0.23737048086627444, 0.23737048086627444, 0.23737048086627444, 0.19003882093032243, 0.19003882093032243, 0.19003882093032243, 0.19958799923180004, 0.19958799923180004, 0.19958799923180004, 0.18710379625883244, 0.18710379625883244, 0.18710379625883244, 0.17835706882989488, 0.17835706882989488, 0.17835706882989488, 0.8241172316704941, 0.8241172316704941, 0.8241172316704941, 0.16933742285677578, 0.16933742285677578, 0.16933742285677578, 0.15636307365008584, 0.15636307365008584, 0.15636307365008584, 0.4809165341552145, 0.4809165341552145, 0.4809165341552145, 0.6061984375557878, 0.6061984375557878, 0.6061984375557878, 0.17837180895804572, 0.17837180895804572, 0.17837180895804572, 0.1749140272304367, 0.1749140272304367, 0.1749140272304367, 0.19707351561588105, 0.19707351561588105, 0.19707351561588105, 0.08829100304514048, 0.08829100304514048, 0.08829100304514048, 0.08532096279043067, 0.08532096279043067, 0.08532096279043067, 0.12191566565179568, 0.12191566565179568, 0.12191566565179568]}, "mutation_prompt": null}
{"id": "8a4fbca1-bc91-4606-9d59-cd2fdc0d63f4", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n        success_rate = 0.5\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                random_factor = np.random.uniform(0.7, 1.3) * (1 + 0.1 * success_rate)  # Adjusted random scaling factor\n                scale = random_factor * (0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound)) * success_rate)\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with adjusted random noise\n                noise_factor = 0.1 * (1 + 0.1 * success_rate)  # Adjusted noise factor\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, noise_factor, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    success_rate = 0.9 * success_rate + 0.1  # Update success rate\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n                else:\n                    success_rate *= 0.9  # Decrease success rate if no improvement\n\n        return best", "name": "HybridMC_DE", "description": "Enhanced dynamic adjustment of scaling and noise factors based on ongoing success rates to improve convergence.", "configspace": "", "generation": 90, "fitness": 0.28806332739129015, "feedback": "The algorithm HybridMC_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.24.", "error": "", "parent_id": "509c5031-8f43-4e47-85be-002c7281665c", "metadata": {"aucs": [0.6140389115197119, 0.6140389115197119, 0.6140389115197119, 0.6037995841873124, 0.6037995841873124, 0.6037995841873124, 0.6114137168532763, 0.6114137168532763, 0.6114137168532763, 0.291035735462832, 0.291035735462832, 0.291035735462832, 0.2978790182795624, 0.2978790182795624, 0.2978790182795624, 0.2923825913435606, 0.2923825913435606, 0.2923825913435606, 0.17615560659718776, 0.17615560659718776, 0.17615560659718776, 0.2840363835506253, 0.2840363835506253, 0.2840363835506253, 0.3077797554406517, 0.3077797554406517, 0.3077797554406517, 0.1394646409126068, 0.1394646409126068, 0.1394646409126068, 0.17439355814200552, 0.17439355814200552, 0.17439355814200552, 0.15298258310717228, 0.15298258310717228, 0.15298258310717228, 0.9727387127634717, 0.9727387127634717, 0.9727387127634717, 0.9717015340440341, 0.9717015340440341, 0.9717015340440341, 0.9738110628014525, 0.9738110628014525, 0.9738110628014525, 0.37745371375358017, 0.37745371375358017, 0.37745371375358017, 0.3796017380513901, 0.3796017380513901, 0.3796017380513901, 0.36341346043502265, 0.36341346043502265, 0.36341346043502265, 0.22346449111713784, 0.22346449111713784, 0.22346449111713784, 0.8449044867769503, 0.8449044867769503, 0.8449044867769503, 0.7414158267608177, 0.7414158267608177, 0.7414158267608177, 0.2560070715171242, 0.2560070715171242, 0.2560070715171242, 0.23154599355878214, 0.23154599355878214, 0.23154599355878214, 0.17046611867058126, 0.17046611867058126, 0.17046611867058126, 0.18459141733824946, 0.18459141733824946, 0.18459141733824946, 0.21648192278330625, 0.21648192278330625, 0.21648192278330625, 0.17136349466523948, 0.17136349466523948, 0.17136349466523948, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.010441463574876853, 0.010441463574876853, 0.010441463574876853, 0.061157569585995275, 0.061157569585995275, 0.061157569585995275, 0.08193269962517458, 0.08193269962517458, 0.08193269962517458, 0.07606432555838805, 0.07606432555838805, 0.07606432555838805, 0.11645575816012788, 0.11645575816012788, 0.11645575816012788, 0.030370805249747335, 0.030370805249747335, 0.030370805249747335, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.008441595480097375, 0.008441595480097375, 0.008441595480097375, 0.13149325686787083, 0.13149325686787083, 0.13149325686787083, 0.0889474818775996, 0.0889474818775996, 0.0889474818775996, 0.10343324596235748, 0.10343324596235748, 0.10343324596235748, 0.47531853228114396, 0.47531853228114396, 0.47531853228114396, 0.4908236783736357, 0.4908236783736357, 0.4908236783736357, 0.49476934995464306, 0.49476934995464306, 0.49476934995464306, 0.09351725981082015, 0.09351725981082015, 0.09351725981082015, 0.14811167553545235, 0.14811167553545235, 0.14811167553545235, 0.1301882237850479, 0.1301882237850479, 0.1301882237850479, 0.2011906647764814, 0.2011906647764814, 0.2011906647764814, 0.16749257249903926, 0.16749257249903926, 0.16749257249903926, 0.13984973942647738, 0.13984973942647738, 0.13984973942647738, 0.34554249321841557, 0.34554249321841557, 0.34554249321841557, 0.31326177667549504, 0.31326177667549504, 0.31326177667549504, 0.3346380466880261, 0.3346380466880261, 0.3346380466880261, 0.22575857590471438, 0.22575857590471438, 0.22575857590471438, 0.2730046130091529, 0.2730046130091529, 0.2730046130091529, 0.2742307807112613, 0.2742307807112613, 0.2742307807112613, 0.21305971023622228, 0.21305971023622228, 0.21305971023622228, 0.21520811095727044, 0.21520811095727044, 0.21520811095727044, 0.207750797877997, 0.207750797877997, 0.207750797877997, 0.2491241125637551, 0.2491241125637551, 0.2491241125637551, 0.4443592795170662, 0.4443592795170662, 0.4443592795170662, 0.24353886668132918, 0.24353886668132918, 0.24353886668132918, 0.1878823132367894, 0.1878823132367894, 0.1878823132367894, 0.9122832760417185, 0.9122832760417185, 0.9122832760417185, 0.18759566345206402, 0.18759566345206402, 0.18759566345206402, 0.3548292931315433, 0.3548292931315433, 0.3548292931315433, 0.21152501932698564, 0.21152501932698564, 0.21152501932698564, 0.6113314220497768, 0.6113314220497768, 0.6113314220497768, 0.1908480227642675, 0.1908480227642675, 0.1908480227642675, 0.1852128330619509, 0.1852128330619509, 0.1852128330619509, 0.19004600818511186, 0.19004600818511186, 0.19004600818511186, 0.08802030155045648, 0.08802030155045648, 0.08802030155045648, 0.09062196842032622, 0.09062196842032622, 0.09062196842032622, 0.11636325809257109, 0.11636325809257109, 0.11636325809257109]}, "mutation_prompt": null}
{"id": "e4539677-849d-4e20-a636-39d9a5efa911", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n        success_rate = 0.5\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                random_factor = np.random.uniform(0.7, 1.3)  # Random scaling factor\n                scale = random_factor * (0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound)) * success_rate)\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    success_rate = 0.9 * success_rate + 0.1  # Update success rate\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n                else:\n                    success_rate *= 0.9  # Decrease success rate if no improvement\n\n        return best", "name": "HybridMC_DE", "description": "Introduced random scaling factor adjustments to enhance exploration capability and prevent premature convergence.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "509c5031-8f43-4e47-85be-002c7281665c", "metadata": {"aucs": [0.5850806795683843, 0.5850806795683843, 0.5850806795683843, 0.6402321815278058, 0.6402321815278058, 0.6402321815278058, 0.6139125505471659, 0.6139125505471659, 0.6139125505471659, 0.24421112755629915, 0.24421112755629915, 0.24421112755629915, 0.2727177520109847, 0.2727177520109847, 0.2727177520109847, 0.27271585497424855, 0.27271585497424855, 0.27271585497424855, 0.245550295282285, 0.245550295282285, 0.245550295282285, 0.3166453795732621, 0.3166453795732621, 0.3166453795732621, 0.32396818242228487, 0.32396818242228487, 0.32396818242228487, 0.15205606069621025, 0.15205606069621025, 0.15205606069621025, 0.15651345909399972, 0.15651345909399972, 0.15651345909399972, 0.15706740377771589, 0.15706740377771589, 0.15706740377771589, 0.9616157146911242, 0.9616157146911242, 0.9616157146911242, 0.9772299403238238, 0.9772299403238238, 0.9772299403238238, 0.9713125639432432, 0.9713125639432432, 0.9713125639432432, 0.3966085138605975, 0.3966085138605975, 0.3966085138605975, 0.34819073069871964, 0.34819073069871964, 0.34819073069871964, 0.36575225414538404, 0.36575225414538404, 0.36575225414538404, 0.8166353566481304, 0.8166353566481304, 0.8166353566481304, 0.6825468356523419, 0.6825468356523419, 0.6825468356523419, 0.8347301730914793, 0.8347301730914793, 0.8347301730914793, 0.23054296025524512, 0.23054296025524512, 0.23054296025524512, 0.2118053426983253, 0.2118053426983253, 0.2118053426983253, 0.17090966343249714, 0.17090966343249714, 0.17090966343249714, 0.17067137735762006, 0.17067137735762006, 0.17067137735762006, 0.19347246229559278, 0.19347246229559278, 0.19347246229559278, 0.19799955561057114, 0.19799955561057114, 0.19799955561057114, 0.006254476277291032, 0.006254476277291032, 0.006254476277291032, 0.041169629535378616, 0.041169629535378616, 0.041169629535378616, 0.005196672944089875, 0.005196672944089875, 0.005196672944089875, 0.09201355541368172, 0.09201355541368172, 0.09201355541368172, 0.07676372458868697, 0.07676372458868697, 0.07676372458868697, 0.12322176058461387, 0.12322176058461387, 0.12322176058461387, 0.0017600998284419411, 0.0017600998284419411, 0.0017600998284419411, 0.0025896179516130546, 0.0025896179516130546, 0.0025896179516130546, 0.018413118031285203, 0.018413118031285203, 0.018413118031285203, 0.12345847615105376, 0.12345847615105376, 0.12345847615105376, 0.12839486724115046, 0.12839486724115046, 0.12839486724115046, 0.15923535087732832, 0.15923535087732832, 0.15923535087732832, 0.47152410278157486, 0.47152410278157486, 0.47152410278157486, 0.5112780167986313, 0.5112780167986313, 0.5112780167986313, 0.47442369289708597, 0.47442369289708597, 0.47442369289708597, 0.11728152447121887, 0.11728152447121887, 0.11728152447121887, 0.11546460432079186, 0.11546460432079186, 0.11546460432079186, 0.1059187211586593, 0.1059187211586593, 0.1059187211586593, 0.16086292844045091, 0.16086292844045091, 0.16086292844045091, 0.1586608675312977, 0.1586608675312977, 0.1586608675312977, 0.2144460418303833, 0.2144460418303833, 0.2144460418303833, 0.35735425401296184, 0.35735425401296184, 0.35735425401296184, 0.3323325876705059, 0.3323325876705059, 0.3323325876705059, 0.36214166628118716, 0.36214166628118716, 0.36214166628118716, 0.22292208697167482, 0.22292208697167482, 0.22292208697167482, 0.2521397893300511, 0.2521397893300511, 0.2521397893300511, 0.2198039569278485, 0.2198039569278485, 0.2198039569278485, 0.21046908040944923, 0.21046908040944923, 0.21046908040944923, 0.23421200788034668, 0.23421200788034668, 0.23421200788034668, 0.19733078620526256, 0.19733078620526256, 0.19733078620526256, 0.23346343518911972, 0.23346343518911972, 0.23346343518911972, 0.2252685424940285, 0.2252685424940285, 0.2252685424940285, 0.2669413252323598, 0.2669413252323598, 0.2669413252323598, 0.18702233430638326, 0.18702233430638326, 0.18702233430638326, 0.9123849458906574, 0.9123849458906574, 0.9123849458906574, 0.7679750753779289, 0.7679750753779289, 0.7679750753779289, 0.5268196544870059, 0.5268196544870059, 0.5268196544870059, 0.21005563571685093, 0.21005563571685093, 0.21005563571685093, 0.49909938594486425, 0.49909938594486425, 0.49909938594486425, 0.19919734313324655, 0.19919734313324655, 0.19919734313324655, 0.20074722599275474, 0.20074722599275474, 0.20074722599275474, 0.17728092270444518, 0.17728092270444518, 0.17728092270444518, 0.08621235117220827, 0.08621235117220827, 0.08621235117220827, 0.10389194929262668, 0.10389194929262668, 0.10389194929262668, 0.07770226414727621, 0.07770226414727621, 0.07770226414727621]}, "mutation_prompt": null}
{"id": "a1c18fb8-52c0-46b7-aa2d-4e0412a0d9e7", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n        success_rate = 0.5\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                random_factor = np.random.uniform(0.7, 1.3)  # Random scaling factor\n                scale = random_factor * (0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound)) * success_rate)\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with adaptive random noise scale\n                noise_scale = 0.1 * (1 + success_rate)\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, noise_scale, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    success_rate = 0.9 * success_rate + 0.1  # Update success rate\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n                else:\n                    success_rate *= 0.9  # Decrease success rate if no improvement\n\n        return best", "name": "HybridMC_DE", "description": "Introduced adaptive random noise scaling in Monte Carlo exploration to enhance local search efficiency.", "configspace": "", "generation": 92, "fitness": 0.2926672928183715, "feedback": "The algorithm HybridMC_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.29 with standard deviation 0.23.", "error": "", "parent_id": "509c5031-8f43-4e47-85be-002c7281665c", "metadata": {"aucs": [0.6192371165282751, 0.6192371165282751, 0.6192371165282751, 0.5763960663650074, 0.5763960663650074, 0.5763960663650074, 0.6379796495807284, 0.6379796495807284, 0.6379796495807284, 0.30776310757206327, 0.30776310757206327, 0.30776310757206327, 0.23168001044381614, 0.23168001044381614, 0.23168001044381614, 0.3338520576759787, 0.3338520576759787, 0.3338520576759787, 0.27829320112495326, 0.27829320112495326, 0.27829320112495326, 0.17849648313853483, 0.17849648313853483, 0.17849648313853483, 0.2686424071935407, 0.2686424071935407, 0.2686424071935407, 0.25097056225107095, 0.25097056225107095, 0.25097056225107095, 0.1848074301821634, 0.1848074301821634, 0.1848074301821634, 0.25066302199327006, 0.25066302199327006, 0.25066302199327006, 0.9834962021597401, 0.9834962021597401, 0.9834962021597401, 0.9772708074556771, 0.9772708074556771, 0.9772708074556771, 0.9723675407656631, 0.9723675407656631, 0.9723675407656631, 0.3985555709168841, 0.3985555709168841, 0.3985555709168841, 0.38705634800545297, 0.38705634800545297, 0.38705634800545297, 0.35976869235667974, 0.35976869235667974, 0.35976869235667974, 0.7139696305099026, 0.7139696305099026, 0.7139696305099026, 0.2815239113030893, 0.2815239113030893, 0.2815239113030893, 0.6279268339154261, 0.6279268339154261, 0.6279268339154261, 0.23715801773861256, 0.23715801773861256, 0.23715801773861256, 0.18478411027442498, 0.18478411027442498, 0.18478411027442498, 0.17190971180755787, 0.17190971180755787, 0.17190971180755787, 0.18495120323977476, 0.18495120323977476, 0.18495120323977476, 0.14046253937537367, 0.14046253937537367, 0.14046253937537367, 0.12922187587046463, 0.12922187587046463, 0.12922187587046463, 0.04662178126058192, 0.04662178126058192, 0.04662178126058192, 0.005187753694032793, 0.005187753694032793, 0.005187753694032793, 0.0004627644004460141, 0.0004627644004460141, 0.0004627644004460141, 0.11795111910709744, 0.11795111910709744, 0.11795111910709744, 0.0708066358109718, 0.0708066358109718, 0.0708066358109718, 0.12443743980096411, 0.12443743980096411, 0.12443743980096411, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005511655040306818, 0.005511655040306818, 0.005511655040306818, 0.021789679669483863, 0.021789679669483863, 0.021789679669483863, 0.1194174310189614, 0.1194174310189614, 0.1194174310189614, 0.14021676183715315, 0.14021676183715315, 0.14021676183715315, 0.11561038844749238, 0.11561038844749238, 0.11561038844749238, 0.4731708227105498, 0.4731708227105498, 0.4731708227105498, 0.46508502754770176, 0.46508502754770176, 0.46508502754770176, 0.4853574216587292, 0.4853574216587292, 0.4853574216587292, 0.1344568510020372, 0.1344568510020372, 0.1344568510020372, 0.13905279368290435, 0.13905279368290435, 0.13905279368290435, 0.11942689542630958, 0.11942689542630958, 0.11942689542630958, 0.13595596788706643, 0.13595596788706643, 0.13595596788706643, 0.15379740677258757, 0.15379740677258757, 0.15379740677258757, 0.15253840330700974, 0.15253840330700974, 0.15253840330700974, 0.33371808945897496, 0.33371808945897496, 0.33371808945897496, 0.31339524001238717, 0.31339524001238717, 0.31339524001238717, 0.33775381354140066, 0.33775381354140066, 0.33775381354140066, 0.24496967045559193, 0.24496967045559193, 0.24496967045559193, 0.26859747479767604, 0.26859747479767604, 0.26859747479767604, 0.2398041695335842, 0.2398041695335842, 0.2398041695335842, 0.21391128498302336, 0.21391128498302336, 0.21391128498302336, 0.2060727004757228, 0.2060727004757228, 0.2060727004757228, 0.22822409207657623, 0.22822409207657623, 0.22822409207657623, 0.3546200764789639, 0.3546200764789639, 0.3546200764789639, 0.23946524035562078, 0.23946524035562078, 0.23946524035562078, 0.30062913127435464, 0.30062913127435464, 0.30062913127435464, 0.18703342484222107, 0.18703342484222107, 0.18703342484222107, 0.8838179705452157, 0.8838179705452157, 0.8838179705452157, 0.8034420105655256, 0.8034420105655256, 0.8034420105655256, 0.4258773879580692, 0.4258773879580692, 0.4258773879580692, 0.20805854007581714, 0.20805854007581714, 0.20805854007581714, 0.5269678674559203, 0.5269678674559203, 0.5269678674559203, 0.18377751579525758, 0.18377751579525758, 0.18377751579525758, 0.16768070559411175, 0.16768070559411175, 0.16768070559411175, 0.19137481917593413, 0.19137481917593413, 0.19137481917593413, 0.09684482969489983, 0.09684482969489983, 0.09684482969489983, 0.12772274333486766, 0.12772274333486766, 0.12772274333486766, 0.09212717461451814, 0.09212717461451814, 0.09212717461451814]}, "mutation_prompt": null}
{"id": "e0c80fd9-edfe-48a2-b673-c6854d324184", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n        success_rate = 0.5\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                random_factor = np.random.uniform(0.7, 1.3)  # Random scaling factor\n                scale = random_factor * (0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound)) * success_rate)\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                crossover_prob = 0.3 + 0.5 * success_rate  # Dynamic crossover probability\n                trial = np.where(np.random.rand(self.dim) < crossover_prob, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    success_rate = 0.9 * success_rate + 0.1  # Update success rate\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n                else:\n                    success_rate *= 0.9  # Decrease success rate if no improvement\n\n        return best", "name": "HybridMC_DE", "description": "Enhanced mutation strategy using a dynamic crossover probability to balance exploration and exploitation.", "configspace": "", "generation": 93, "fitness": 0.2771588690537623, "feedback": "The algorithm HybridMC_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.22.", "error": "", "parent_id": "509c5031-8f43-4e47-85be-002c7281665c", "metadata": {"aucs": [0.6371865010504798, 0.6371865010504798, 0.6371865010504798, 0.630960866308452, 0.630960866308452, 0.630960866308452, 0.6678514510675309, 0.6678514510675309, 0.6678514510675309, 0.25976128706658996, 0.25976128706658996, 0.25976128706658996, 0.33297186606782925, 0.33297186606782925, 0.33297186606782925, 0.3482914217770271, 0.3482914217770271, 0.3482914217770271, 0.3272470086672763, 0.3272470086672763, 0.3272470086672763, 0.3562021315056386, 0.3562021315056386, 0.3562021315056386, 0.37162810627030707, 0.37162810627030707, 0.37162810627030707, 0.17921711893902847, 0.17921711893902847, 0.17921711893902847, 0.18232215273439056, 0.18232215273439056, 0.18232215273439056, 0.13798337993504595, 0.13798337993504595, 0.13798337993504595, 0.974046711168117, 0.974046711168117, 0.974046711168117, 0.9771886314694619, 0.9771886314694619, 0.9771886314694619, 0.9754553159679925, 0.9754553159679925, 0.9754553159679925, 0.3467368166139231, 0.3467368166139231, 0.3467368166139231, 0.347896144097131, 0.347896144097131, 0.347896144097131, 0.349143872921271, 0.349143872921271, 0.349143872921271, 0.3311037545858331, 0.3311037545858331, 0.3311037545858331, 0.3318692425381383, 0.3318692425381383, 0.3318692425381383, 0.6327728407161912, 0.6327728407161912, 0.6327728407161912, 0.2507177577763836, 0.2507177577763836, 0.2507177577763836, 0.3277455311151808, 0.3277455311151808, 0.3277455311151808, 0.18740471766006916, 0.18740471766006916, 0.18740471766006916, 0.13309008493349173, 0.13309008493349173, 0.13309008493349173, 0.18793070640513643, 0.18793070640513643, 0.18793070640513643, 0.1409824868706281, 0.1409824868706281, 0.1409824868706281, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.006654081800439582, 0.006654081800439582, 0.006654081800439582, 0.007830982273990816, 0.007830982273990816, 0.007830982273990816, 0.08293605282275895, 0.08293605282275895, 0.08293605282275895, 0.06086368804950126, 0.06086368804950126, 0.06086368804950126, 0.06713364665402621, 0.06713364665402621, 0.06713364665402621, 0.001777849209719129, 0.001777849209719129, 0.001777849209719129, 0.04455458312184657, 0.04455458312184657, 0.04455458312184657, 0.0689644895891206, 0.0689644895891206, 0.0689644895891206, 0.08265221608438822, 0.08265221608438822, 0.08265221608438822, 0.09825478569916357, 0.09825478569916357, 0.09825478569916357, 0.1260184629260226, 0.1260184629260226, 0.1260184629260226, 0.5002324690356438, 0.5002324690356438, 0.5002324690356438, 0.47067209875019067, 0.47067209875019067, 0.47067209875019067, 0.45138751153394774, 0.45138751153394774, 0.45138751153394774, 0.13971541140961075, 0.13971541140961075, 0.13971541140961075, 0.1272058304408492, 0.1272058304408492, 0.1272058304408492, 0.13312132591548365, 0.13312132591548365, 0.13312132591548365, 0.1586114341548751, 0.1586114341548751, 0.1586114341548751, 0.18144685558579587, 0.18144685558579587, 0.18144685558579587, 0.15619559292244356, 0.15619559292244356, 0.15619559292244356, 0.3116299844954836, 0.3116299844954836, 0.3116299844954836, 0.34541464244352427, 0.34541464244352427, 0.34541464244352427, 0.3313051388630822, 0.3313051388630822, 0.3313051388630822, 0.19970159136873356, 0.19970159136873356, 0.19970159136873356, 0.25683827901105905, 0.25683827901105905, 0.25683827901105905, 0.23072357974191104, 0.23072357974191104, 0.23072357974191104, 0.19412692371780127, 0.19412692371780127, 0.19412692371780127, 0.2138932670877406, 0.2138932670877406, 0.2138932670877406, 0.21621745470213405, 0.21621745470213405, 0.21621745470213405, 0.2181577216381283, 0.2181577216381283, 0.2181577216381283, 0.23098629092864387, 0.23098629092864387, 0.23098629092864387, 0.2250436682801119, 0.2250436682801119, 0.2250436682801119, 0.1858973069665787, 0.1858973069665787, 0.1858973069665787, 0.8586137170555198, 0.8586137170555198, 0.8586137170555198, 0.16655735790820492, 0.16655735790820492, 0.16655735790820492, 0.44140417996191494, 0.44140417996191494, 0.44140417996191494, 0.20538244210397305, 0.20538244210397305, 0.20538244210397305, 0.40418061060722554, 0.40418061060722554, 0.40418061060722554, 0.18014961527413176, 0.18014961527413176, 0.18014961527413176, 0.20074722599275474, 0.20074722599275474, 0.20074722599275474, 0.1889529498465784, 0.1889529498465784, 0.1889529498465784, 0.08903829851849765, 0.08903829851849765, 0.08903829851849765, 0.08800980275055592, 0.08800980275055592, 0.08800980275055592, 0.08042924839823395, 0.08042924839823395, 0.08042924839823395]}, "mutation_prompt": null}
{"id": "d57f3aaf-4a82-4425-9317-e5c955bb7395", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n        success_rate = 0.5\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                random_factor = np.random.uniform(0.7, 1.3)  # Random scaling factor\n                scale = random_factor * (0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound)) * success_rate)\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    success_rate = 0.9 * success_rate + 0.1  # Update success rate\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n                else:\n                    success_rate *= 0.9  # Decrease success rate if no improvement\n\n        return best", "name": "HybridMC_DE", "description": "Introduced random scaling factor adjustments to enhance exploration capability and prevent premature convergence.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "509c5031-8f43-4e47-85be-002c7281665c", "metadata": {"aucs": [0.5850806795683843, 0.5850806795683843, 0.5850806795683843, 0.6402321815278058, 0.6402321815278058, 0.6402321815278058, 0.6139125505471659, 0.6139125505471659, 0.6139125505471659, 0.24421112755629915, 0.24421112755629915, 0.24421112755629915, 0.2727177520109847, 0.2727177520109847, 0.2727177520109847, 0.27271585497424855, 0.27271585497424855, 0.27271585497424855, 0.245550295282285, 0.245550295282285, 0.245550295282285, 0.3166453795732621, 0.3166453795732621, 0.3166453795732621, 0.32396818242228487, 0.32396818242228487, 0.32396818242228487, 0.15205606069621025, 0.15205606069621025, 0.15205606069621025, 0.15651345909399972, 0.15651345909399972, 0.15651345909399972, 0.15706740377771589, 0.15706740377771589, 0.15706740377771589, 0.9616157146911242, 0.9616157146911242, 0.9616157146911242, 0.9772299403238238, 0.9772299403238238, 0.9772299403238238, 0.9713125639432432, 0.9713125639432432, 0.9713125639432432, 0.3966085138605975, 0.3966085138605975, 0.3966085138605975, 0.34819073069871964, 0.34819073069871964, 0.34819073069871964, 0.36575225414538404, 0.36575225414538404, 0.36575225414538404, 0.8166353566481304, 0.8166353566481304, 0.8166353566481304, 0.6825468356523419, 0.6825468356523419, 0.6825468356523419, 0.8347301730914793, 0.8347301730914793, 0.8347301730914793, 0.23054296025524512, 0.23054296025524512, 0.23054296025524512, 0.2118053426983253, 0.2118053426983253, 0.2118053426983253, 0.17090966343249714, 0.17090966343249714, 0.17090966343249714, 0.17067137735762006, 0.17067137735762006, 0.17067137735762006, 0.19347246229559278, 0.19347246229559278, 0.19347246229559278, 0.19799955561057114, 0.19799955561057114, 0.19799955561057114, 0.006254476277291032, 0.006254476277291032, 0.006254476277291032, 0.041169629535378616, 0.041169629535378616, 0.041169629535378616, 0.005196672944089875, 0.005196672944089875, 0.005196672944089875, 0.09201355541368172, 0.09201355541368172, 0.09201355541368172, 0.07676372458868697, 0.07676372458868697, 0.07676372458868697, 0.12322176058461387, 0.12322176058461387, 0.12322176058461387, 0.0017600998284419411, 0.0017600998284419411, 0.0017600998284419411, 0.0025896179516130546, 0.0025896179516130546, 0.0025896179516130546, 0.018413118031285203, 0.018413118031285203, 0.018413118031285203, 0.12345847615105376, 0.12345847615105376, 0.12345847615105376, 0.12839486724115046, 0.12839486724115046, 0.12839486724115046, 0.15923535087732832, 0.15923535087732832, 0.15923535087732832, 0.47152410278157486, 0.47152410278157486, 0.47152410278157486, 0.5112780167986313, 0.5112780167986313, 0.5112780167986313, 0.47442369289708597, 0.47442369289708597, 0.47442369289708597, 0.11728152447121887, 0.11728152447121887, 0.11728152447121887, 0.11546460432079186, 0.11546460432079186, 0.11546460432079186, 0.1059187211586593, 0.1059187211586593, 0.1059187211586593, 0.16086292844045091, 0.16086292844045091, 0.16086292844045091, 0.1586608675312977, 0.1586608675312977, 0.1586608675312977, 0.2144460418303833, 0.2144460418303833, 0.2144460418303833, 0.35735425401296184, 0.35735425401296184, 0.35735425401296184, 0.3323325876705059, 0.3323325876705059, 0.3323325876705059, 0.36214166628118716, 0.36214166628118716, 0.36214166628118716, 0.22292208697167482, 0.22292208697167482, 0.22292208697167482, 0.2521397893300511, 0.2521397893300511, 0.2521397893300511, 0.2198039569278485, 0.2198039569278485, 0.2198039569278485, 0.21046908040944923, 0.21046908040944923, 0.21046908040944923, 0.23421200788034668, 0.23421200788034668, 0.23421200788034668, 0.19733078620526256, 0.19733078620526256, 0.19733078620526256, 0.23346343518911972, 0.23346343518911972, 0.23346343518911972, 0.2252685424940285, 0.2252685424940285, 0.2252685424940285, 0.2669413252323598, 0.2669413252323598, 0.2669413252323598, 0.18702233430638326, 0.18702233430638326, 0.18702233430638326, 0.9123849458906574, 0.9123849458906574, 0.9123849458906574, 0.7679750753779289, 0.7679750753779289, 0.7679750753779289, 0.5268196544870059, 0.5268196544870059, 0.5268196544870059, 0.21005563571685093, 0.21005563571685093, 0.21005563571685093, 0.49909938594486425, 0.49909938594486425, 0.49909938594486425, 0.19919734313324655, 0.19919734313324655, 0.19919734313324655, 0.20074722599275474, 0.20074722599275474, 0.20074722599275474, 0.17728092270444518, 0.17728092270444518, 0.17728092270444518, 0.08621235117220827, 0.08621235117220827, 0.08621235117220827, 0.10389194929262668, 0.10389194929262668, 0.10389194929262668, 0.07770226414727621, 0.07770226414727621, 0.07770226414727621]}, "mutation_prompt": null}
{"id": "9bdc8d03-1e19-416a-b59a-3aac9f657844", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n        success_rate = 0.5\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                random_factor = np.random.uniform(0.7, 1.3)  # Random scaling factor\n                scale = random_factor * (0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound)) * success_rate)\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    success_rate = 0.9 * success_rate + 0.1  # Update success rate\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n                else:\n                    success_rate *= 0.9  # Decrease success rate if no improvement\n\n        return best", "name": "HybridMC_DE", "description": "Introduced random scaling factor adjustments to enhance exploration capability and prevent premature convergence.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "509c5031-8f43-4e47-85be-002c7281665c", "metadata": {"aucs": [0.5850806795683843, 0.5850806795683843, 0.5850806795683843, 0.6402321815278058, 0.6402321815278058, 0.6402321815278058, 0.6139125505471659, 0.6139125505471659, 0.6139125505471659, 0.24421112755629915, 0.24421112755629915, 0.24421112755629915, 0.2727177520109847, 0.2727177520109847, 0.2727177520109847, 0.27271585497424855, 0.27271585497424855, 0.27271585497424855, 0.245550295282285, 0.245550295282285, 0.245550295282285, 0.3166453795732621, 0.3166453795732621, 0.3166453795732621, 0.32396818242228487, 0.32396818242228487, 0.32396818242228487, 0.15205606069621025, 0.15205606069621025, 0.15205606069621025, 0.15651345909399972, 0.15651345909399972, 0.15651345909399972, 0.15706740377771589, 0.15706740377771589, 0.15706740377771589, 0.9616157146911242, 0.9616157146911242, 0.9616157146911242, 0.9772299403238238, 0.9772299403238238, 0.9772299403238238, 0.9713125639432432, 0.9713125639432432, 0.9713125639432432, 0.3966085138605975, 0.3966085138605975, 0.3966085138605975, 0.34819073069871964, 0.34819073069871964, 0.34819073069871964, 0.36575225414538404, 0.36575225414538404, 0.36575225414538404, 0.8166353566481304, 0.8166353566481304, 0.8166353566481304, 0.6825468356523419, 0.6825468356523419, 0.6825468356523419, 0.8347301730914793, 0.8347301730914793, 0.8347301730914793, 0.23054296025524512, 0.23054296025524512, 0.23054296025524512, 0.2118053426983253, 0.2118053426983253, 0.2118053426983253, 0.17090966343249714, 0.17090966343249714, 0.17090966343249714, 0.17067137735762006, 0.17067137735762006, 0.17067137735762006, 0.19347246229559278, 0.19347246229559278, 0.19347246229559278, 0.19799955561057114, 0.19799955561057114, 0.19799955561057114, 0.006254476277291032, 0.006254476277291032, 0.006254476277291032, 0.041169629535378616, 0.041169629535378616, 0.041169629535378616, 0.005196672944089875, 0.005196672944089875, 0.005196672944089875, 0.09201355541368172, 0.09201355541368172, 0.09201355541368172, 0.07676372458868697, 0.07676372458868697, 0.07676372458868697, 0.12322176058461387, 0.12322176058461387, 0.12322176058461387, 0.0017600998284419411, 0.0017600998284419411, 0.0017600998284419411, 0.0025896179516130546, 0.0025896179516130546, 0.0025896179516130546, 0.018413118031285203, 0.018413118031285203, 0.018413118031285203, 0.12345847615105376, 0.12345847615105376, 0.12345847615105376, 0.12839486724115046, 0.12839486724115046, 0.12839486724115046, 0.15923535087732832, 0.15923535087732832, 0.15923535087732832, 0.47152410278157486, 0.47152410278157486, 0.47152410278157486, 0.5112780167986313, 0.5112780167986313, 0.5112780167986313, 0.47442369289708597, 0.47442369289708597, 0.47442369289708597, 0.11728152447121887, 0.11728152447121887, 0.11728152447121887, 0.11546460432079186, 0.11546460432079186, 0.11546460432079186, 0.1059187211586593, 0.1059187211586593, 0.1059187211586593, 0.16086292844045091, 0.16086292844045091, 0.16086292844045091, 0.1586608675312977, 0.1586608675312977, 0.1586608675312977, 0.2144460418303833, 0.2144460418303833, 0.2144460418303833, 0.35735425401296184, 0.35735425401296184, 0.35735425401296184, 0.3323325876705059, 0.3323325876705059, 0.3323325876705059, 0.36214166628118716, 0.36214166628118716, 0.36214166628118716, 0.22292208697167482, 0.22292208697167482, 0.22292208697167482, 0.2521397893300511, 0.2521397893300511, 0.2521397893300511, 0.2198039569278485, 0.2198039569278485, 0.2198039569278485, 0.21046908040944923, 0.21046908040944923, 0.21046908040944923, 0.23421200788034668, 0.23421200788034668, 0.23421200788034668, 0.19733078620526256, 0.19733078620526256, 0.19733078620526256, 0.23346343518911972, 0.23346343518911972, 0.23346343518911972, 0.2252685424940285, 0.2252685424940285, 0.2252685424940285, 0.2669413252323598, 0.2669413252323598, 0.2669413252323598, 0.18702233430638326, 0.18702233430638326, 0.18702233430638326, 0.9123849458906574, 0.9123849458906574, 0.9123849458906574, 0.7679750753779289, 0.7679750753779289, 0.7679750753779289, 0.5268196544870059, 0.5268196544870059, 0.5268196544870059, 0.21005563571685093, 0.21005563571685093, 0.21005563571685093, 0.49909938594486425, 0.49909938594486425, 0.49909938594486425, 0.19919734313324655, 0.19919734313324655, 0.19919734313324655, 0.20074722599275474, 0.20074722599275474, 0.20074722599275474, 0.17728092270444518, 0.17728092270444518, 0.17728092270444518, 0.08621235117220827, 0.08621235117220827, 0.08621235117220827, 0.10389194929262668, 0.10389194929262668, 0.10389194929262668, 0.07770226414727621, 0.07770226414727621, 0.07770226414727621]}, "mutation_prompt": null}
{"id": "c013a90e-4a5f-491c-bfb7-0cae8cf16ea8", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n        success_rate = 0.5\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                random_factor = np.random.uniform(0.7, 1.3)  # Random scaling factor\n                scale = random_factor * (0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound)) * success_rate)\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    success_rate = 0.9 * success_rate + 0.1  # Update success rate\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n                else:\n                    success_rate *= 0.9  # Decrease success rate if no improvement\n\n        return best", "name": "HybridMC_DE", "description": "Introduced random scaling factor adjustments to enhance exploration capability and prevent premature convergence.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "509c5031-8f43-4e47-85be-002c7281665c", "metadata": {"aucs": [0.5850806795683843, 0.5850806795683843, 0.5850806795683843, 0.6402321815278058, 0.6402321815278058, 0.6402321815278058, 0.6139125505471659, 0.6139125505471659, 0.6139125505471659, 0.24421112755629915, 0.24421112755629915, 0.24421112755629915, 0.2727177520109847, 0.2727177520109847, 0.2727177520109847, 0.27271585497424855, 0.27271585497424855, 0.27271585497424855, 0.245550295282285, 0.245550295282285, 0.245550295282285, 0.3166453795732621, 0.3166453795732621, 0.3166453795732621, 0.32396818242228487, 0.32396818242228487, 0.32396818242228487, 0.15205606069621025, 0.15205606069621025, 0.15205606069621025, 0.15651345909399972, 0.15651345909399972, 0.15651345909399972, 0.15706740377771589, 0.15706740377771589, 0.15706740377771589, 0.9616157146911242, 0.9616157146911242, 0.9616157146911242, 0.9772299403238238, 0.9772299403238238, 0.9772299403238238, 0.9713125639432432, 0.9713125639432432, 0.9713125639432432, 0.3966085138605975, 0.3966085138605975, 0.3966085138605975, 0.34819073069871964, 0.34819073069871964, 0.34819073069871964, 0.36575225414538404, 0.36575225414538404, 0.36575225414538404, 0.8166353566481304, 0.8166353566481304, 0.8166353566481304, 0.6825468356523419, 0.6825468356523419, 0.6825468356523419, 0.8347301730914793, 0.8347301730914793, 0.8347301730914793, 0.23054296025524512, 0.23054296025524512, 0.23054296025524512, 0.2118053426983253, 0.2118053426983253, 0.2118053426983253, 0.17090966343249714, 0.17090966343249714, 0.17090966343249714, 0.17067137735762006, 0.17067137735762006, 0.17067137735762006, 0.19347246229559278, 0.19347246229559278, 0.19347246229559278, 0.19799955561057114, 0.19799955561057114, 0.19799955561057114, 0.006254476277291032, 0.006254476277291032, 0.006254476277291032, 0.041169629535378616, 0.041169629535378616, 0.041169629535378616, 0.005196672944089875, 0.005196672944089875, 0.005196672944089875, 0.09201355541368172, 0.09201355541368172, 0.09201355541368172, 0.07676372458868697, 0.07676372458868697, 0.07676372458868697, 0.12322176058461387, 0.12322176058461387, 0.12322176058461387, 0.0017600998284419411, 0.0017600998284419411, 0.0017600998284419411, 0.0025896179516130546, 0.0025896179516130546, 0.0025896179516130546, 0.018413118031285203, 0.018413118031285203, 0.018413118031285203, 0.12345847615105376, 0.12345847615105376, 0.12345847615105376, 0.12839486724115046, 0.12839486724115046, 0.12839486724115046, 0.15923535087732832, 0.15923535087732832, 0.15923535087732832, 0.47152410278157486, 0.47152410278157486, 0.47152410278157486, 0.5112780167986313, 0.5112780167986313, 0.5112780167986313, 0.47442369289708597, 0.47442369289708597, 0.47442369289708597, 0.11728152447121887, 0.11728152447121887, 0.11728152447121887, 0.11546460432079186, 0.11546460432079186, 0.11546460432079186, 0.1059187211586593, 0.1059187211586593, 0.1059187211586593, 0.16086292844045091, 0.16086292844045091, 0.16086292844045091, 0.1586608675312977, 0.1586608675312977, 0.1586608675312977, 0.2144460418303833, 0.2144460418303833, 0.2144460418303833, 0.35735425401296184, 0.35735425401296184, 0.35735425401296184, 0.3323325876705059, 0.3323325876705059, 0.3323325876705059, 0.36214166628118716, 0.36214166628118716, 0.36214166628118716, 0.22292208697167482, 0.22292208697167482, 0.22292208697167482, 0.2521397893300511, 0.2521397893300511, 0.2521397893300511, 0.2198039569278485, 0.2198039569278485, 0.2198039569278485, 0.21046908040944923, 0.21046908040944923, 0.21046908040944923, 0.23421200788034668, 0.23421200788034668, 0.23421200788034668, 0.19733078620526256, 0.19733078620526256, 0.19733078620526256, 0.23346343518911972, 0.23346343518911972, 0.23346343518911972, 0.2252685424940285, 0.2252685424940285, 0.2252685424940285, 0.2669413252323598, 0.2669413252323598, 0.2669413252323598, 0.18702233430638326, 0.18702233430638326, 0.18702233430638326, 0.9123849458906574, 0.9123849458906574, 0.9123849458906574, 0.7679750753779289, 0.7679750753779289, 0.7679750753779289, 0.5268196544870059, 0.5268196544870059, 0.5268196544870059, 0.21005563571685093, 0.21005563571685093, 0.21005563571685093, 0.49909938594486425, 0.49909938594486425, 0.49909938594486425, 0.19919734313324655, 0.19919734313324655, 0.19919734313324655, 0.20074722599275474, 0.20074722599275474, 0.20074722599275474, 0.17728092270444518, 0.17728092270444518, 0.17728092270444518, 0.08621235117220827, 0.08621235117220827, 0.08621235117220827, 0.10389194929262668, 0.10389194929262668, 0.10389194929262668, 0.07770226414727621, 0.07770226414727621, 0.07770226414727621]}, "mutation_prompt": null}
{"id": "44bfb5a1-7bc7-4595-9eeb-97cab5755bb8", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n        success_rate = 0.5\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                random_factor = np.random.uniform(0.7, 1.3)  # Random scaling factor\n                scale = random_factor * (0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound)) * success_rate)\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    success_rate = 0.9 * success_rate + 0.1  # Update success rate\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n                else:\n                    success_rate *= 0.9  # Decrease success rate if no improvement\n\n        return best", "name": "HybridMC_DE", "description": "Introduced random scaling factor adjustments to enhance exploration capability and prevent premature convergence.", "configspace": "", "generation": 88, "fitness": -Infinity, "feedback": "No code was extracted. The code should be encapsulated with ``` in your response.", "error": "The code should be encapsulated with ``` in your response.", "parent_id": "509c5031-8f43-4e47-85be-002c7281665c", "metadata": {"aucs": [0.5850806795683843, 0.5850806795683843, 0.5850806795683843, 0.6402321815278058, 0.6402321815278058, 0.6402321815278058, 0.6139125505471659, 0.6139125505471659, 0.6139125505471659, 0.24421112755629915, 0.24421112755629915, 0.24421112755629915, 0.2727177520109847, 0.2727177520109847, 0.2727177520109847, 0.27271585497424855, 0.27271585497424855, 0.27271585497424855, 0.245550295282285, 0.245550295282285, 0.245550295282285, 0.3166453795732621, 0.3166453795732621, 0.3166453795732621, 0.32396818242228487, 0.32396818242228487, 0.32396818242228487, 0.15205606069621025, 0.15205606069621025, 0.15205606069621025, 0.15651345909399972, 0.15651345909399972, 0.15651345909399972, 0.15706740377771589, 0.15706740377771589, 0.15706740377771589, 0.9616157146911242, 0.9616157146911242, 0.9616157146911242, 0.9772299403238238, 0.9772299403238238, 0.9772299403238238, 0.9713125639432432, 0.9713125639432432, 0.9713125639432432, 0.3966085138605975, 0.3966085138605975, 0.3966085138605975, 0.34819073069871964, 0.34819073069871964, 0.34819073069871964, 0.36575225414538404, 0.36575225414538404, 0.36575225414538404, 0.8166353566481304, 0.8166353566481304, 0.8166353566481304, 0.6825468356523419, 0.6825468356523419, 0.6825468356523419, 0.8347301730914793, 0.8347301730914793, 0.8347301730914793, 0.23054296025524512, 0.23054296025524512, 0.23054296025524512, 0.2118053426983253, 0.2118053426983253, 0.2118053426983253, 0.17090966343249714, 0.17090966343249714, 0.17090966343249714, 0.17067137735762006, 0.17067137735762006, 0.17067137735762006, 0.19347246229559278, 0.19347246229559278, 0.19347246229559278, 0.19799955561057114, 0.19799955561057114, 0.19799955561057114, 0.006254476277291032, 0.006254476277291032, 0.006254476277291032, 0.041169629535378616, 0.041169629535378616, 0.041169629535378616, 0.005196672944089875, 0.005196672944089875, 0.005196672944089875, 0.09201355541368172, 0.09201355541368172, 0.09201355541368172, 0.07676372458868697, 0.07676372458868697, 0.07676372458868697, 0.12322176058461387, 0.12322176058461387, 0.12322176058461387, 0.0017600998284419411, 0.0017600998284419411, 0.0017600998284419411, 0.0025896179516130546, 0.0025896179516130546, 0.0025896179516130546, 0.018413118031285203, 0.018413118031285203, 0.018413118031285203, 0.12345847615105376, 0.12345847615105376, 0.12345847615105376, 0.12839486724115046, 0.12839486724115046, 0.12839486724115046, 0.15923535087732832, 0.15923535087732832, 0.15923535087732832, 0.47152410278157486, 0.47152410278157486, 0.47152410278157486, 0.5112780167986313, 0.5112780167986313, 0.5112780167986313, 0.47442369289708597, 0.47442369289708597, 0.47442369289708597, 0.11728152447121887, 0.11728152447121887, 0.11728152447121887, 0.11546460432079186, 0.11546460432079186, 0.11546460432079186, 0.1059187211586593, 0.1059187211586593, 0.1059187211586593, 0.16086292844045091, 0.16086292844045091, 0.16086292844045091, 0.1586608675312977, 0.1586608675312977, 0.1586608675312977, 0.2144460418303833, 0.2144460418303833, 0.2144460418303833, 0.35735425401296184, 0.35735425401296184, 0.35735425401296184, 0.3323325876705059, 0.3323325876705059, 0.3323325876705059, 0.36214166628118716, 0.36214166628118716, 0.36214166628118716, 0.22292208697167482, 0.22292208697167482, 0.22292208697167482, 0.2521397893300511, 0.2521397893300511, 0.2521397893300511, 0.2198039569278485, 0.2198039569278485, 0.2198039569278485, 0.21046908040944923, 0.21046908040944923, 0.21046908040944923, 0.23421200788034668, 0.23421200788034668, 0.23421200788034668, 0.19733078620526256, 0.19733078620526256, 0.19733078620526256, 0.23346343518911972, 0.23346343518911972, 0.23346343518911972, 0.2252685424940285, 0.2252685424940285, 0.2252685424940285, 0.2669413252323598, 0.2669413252323598, 0.2669413252323598, 0.18702233430638326, 0.18702233430638326, 0.18702233430638326, 0.9123849458906574, 0.9123849458906574, 0.9123849458906574, 0.7679750753779289, 0.7679750753779289, 0.7679750753779289, 0.5268196544870059, 0.5268196544870059, 0.5268196544870059, 0.21005563571685093, 0.21005563571685093, 0.21005563571685093, 0.49909938594486425, 0.49909938594486425, 0.49909938594486425, 0.19919734313324655, 0.19919734313324655, 0.19919734313324655, 0.20074722599275474, 0.20074722599275474, 0.20074722599275474, 0.17728092270444518, 0.17728092270444518, 0.17728092270444518, 0.08621235117220827, 0.08621235117220827, 0.08621235117220827, 0.10389194929262668, 0.10389194929262668, 0.10389194929262668, 0.07770226414727621, 0.07770226414727621, 0.07770226414727621]}, "mutation_prompt": null}
{"id": "7589665b-5e25-4366-bc53-aacd7238f984", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n        success_rate = 0.5\n\n        noise_level = 0.1  # Initial noise level for Monte Carlo exploration\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)\n                random_factor = np.random.uniform(0.7, 1.3)\n                scale = random_factor * (0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound)) * success_rate)\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with adaptive noise level\n                trial = np.where(np.random.rand(self.dim) < 0.5, mutant + np.random.normal(0, noise_level, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    success_rate = 0.9 * success_rate + 0.1\n                    noise_level *= 0.95  # Decrease noise level on success\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n                else:\n                    success_rate *= 0.9\n                    noise_level *= 1.05  # Increase noise level on failure\n\n        return best", "name": "HybridMC_DE", "description": "Enhanced diversity and exploration by introducing an adaptation mechanism for the noise level in Monte Carlo exploration.", "configspace": "", "generation": 98, "fitness": 0.12808454769960445, "feedback": "The algorithm HybridMC_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.13 with standard deviation 0.20.", "error": "", "parent_id": "509c5031-8f43-4e47-85be-002c7281665c", "metadata": {"aucs": [0.2613081089589304, 0.2613081089589304, 0.2613081089589304, 0.31806636584127435, 0.31806636584127435, 0.31806636584127435, 0.24061091652562183, 0.24061091652562183, 0.24061091652562183, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.04926493355972339, 0.04926493355972339, 0.04926493355972339, 0.06331391453535395, 0.06331391453535395, 0.06331391453535395, 0.05019447074099348, 0.05019447074099348, 0.05019447074099348, 0.04512021565422908, 0.04512021565422908, 0.04512021565422908, 0.07902112614836676, 0.07902112614836676, 0.07902112614836676, 0.04708638071853222, 0.04708638071853222, 0.04708638071853222, 0.9706288936491179, 0.9706288936491179, 0.9706288936491179, 0.9770988437281727, 0.9770988437281727, 0.9770988437281727, 0.9655738612952532, 0.9655738612952532, 0.9655738612952532, 0.13460159937330174, 0.13460159937330174, 0.13460159937330174, 0.02196488758636206, 0.02196488758636206, 0.02196488758636206, 0.08389174786994558, 0.08389174786994558, 0.08389174786994558, 0.11764869569245928, 0.11764869569245928, 0.11764869569245928, 0.12250510943186566, 0.12250510943186566, 0.12250510943186566, 0.10401469414360887, 0.10401469414360887, 0.10401469414360887, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025902422574224482, 0.025902422574224482, 0.025902422574224482, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.005833790417894447, 0.005833790417894447, 0.005833790417894447, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.012237980191972753, 0.012237980191972753, 0.012237980191972753, 0.05752605976178182, 0.05752605976178182, 0.05752605976178182, 0.04522629018766999, 0.04522629018766999, 0.04522629018766999, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.025091704463430897, 0.025091704463430897, 0.025091704463430897, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.24826606103184878, 0.24826606103184878, 0.24826606103184878, 0.2643584798825416, 0.2643584798825416, 0.2643584798825416, 0.19052763206281997, 0.19052763206281997, 0.19052763206281997, 0.05346844257147165, 0.05346844257147165, 0.05346844257147165, 0.040231953307389046, 0.040231953307389046, 0.040231953307389046, 0.04776707254056145, 0.04776707254056145, 0.04776707254056145, 0.11363142991088881, 0.11363142991088881, 0.11363142991088881, 0.10779814955342659, 0.10779814955342659, 0.10779814955342659, 0.1328072789089192, 0.1328072789089192, 0.1328072789089192, 0.15980789121356354, 0.15980789121356354, 0.15980789121356354, 0.14641728450242064, 0.14641728450242064, 0.14641728450242064, 0.13921637362199923, 0.13921637362199923, 0.13921637362199923, 0.10240885270551403, 0.10240885270551403, 0.10240885270551403, 0.0966095837749712, 0.0966095837749712, 0.0966095837749712, 0.08377330826508511, 0.08377330826508511, 0.08377330826508511, 0.12065387396304117, 0.12065387396304117, 0.12065387396304117, 0.15098500839607987, 0.15098500839607987, 0.15098500839607987, 0.1593834176467106, 0.1593834176467106, 0.1593834176467106, 0.15177363279928135, 0.15177363279928135, 0.15177363279928135, 0.1553686656468335, 0.1553686656468335, 0.1553686656468335, 0.15488485315424405, 0.15488485315424405, 0.15488485315424405, 0.12213447249602416, 0.12213447249602416, 0.12213447249602416, 0.43168045192628224, 0.43168045192628224, 0.43168045192628224, 0.10405221821065314, 0.10405221821065314, 0.10405221821065314, 0.09801765640866156, 0.09801765640866156, 0.09801765640866156, 0.07891595530013584, 0.07891595530013584, 0.07891595530013584, 0.10704490546038814, 0.10704490546038814, 0.10704490546038814, 0.17140804264228204, 0.17140804264228204, 0.17140804264228204, 0.18450999743376595, 0.18450999743376595, 0.18450999743376595, 0.16074842210210194, 0.16074842210210194, 0.16074842210210194, 0.04159193004670381, 0.04159193004670381, 0.04159193004670381, 0.03786156166612431, 0.03786156166612431, 0.03786156166612431, 0.03874956216869874, 0.03874956216869874, 0.03874956216869874]}, "mutation_prompt": null}
{"id": "2e72c01a-eb54-4d7b-b2c2-3e3023b4cced", "solution": "import numpy as np\n\nclass HybridMC_DE:\n    def __init__(self, budget, dim):\n        self.budget = budget\n        self.dim = dim\n        self.lower_bound = -5.0\n        self.upper_bound = 5.0\n\n    def __call__(self, func):\n        np.random.seed(0)\n        population_size = 10\n        pop = np.random.uniform(self.lower_bound, self.upper_bound, (population_size, self.dim))\n        fitness = np.array([func(ind) for ind in pop])\n        evaluations = population_size\n\n        best_idx = np.argmin(fitness)\n        best = pop[best_idx]\n        best_fitness = fitness[best_idx]\n        success_rate = 0.5\n\n        while evaluations < self.budget:\n            for i in range(population_size):\n                if evaluations >= self.budget:\n                    break\n\n                # Differential Evolution Mutation with adaptive scale\n                indices = [idx for idx in range(population_size) if idx != i]\n                a, b, c = np.random.choice(indices, 3, replace=False)\n                diversity = np.std(pop)  # Calculate population diversity\n                random_factor = np.random.uniform(0.7, 1.3)  # Random scaling factor\n                scale = random_factor * (0.5 + 0.3 * (diversity / (self.upper_bound - self.lower_bound)) * success_rate)\n                mutant = pop[a] + scale * (pop[b] - pop[c])\n                mutant = np.clip(mutant, self.lower_bound, self.upper_bound)\n\n                # Monte Carlo exploration with random noise and adaptive crossover\n                crossover_prob = 0.5 + 0.5 * (diversity / (self.upper_bound - self.lower_bound))\n                trial = np.where(np.random.rand(self.dim) < crossover_prob, mutant + np.random.normal(0, 0.1, self.dim), pop[i])\n                trial = np.clip(trial, self.lower_bound, self.upper_bound)\n\n                trial_fitness = func(trial)\n                evaluations += 1\n\n                if trial_fitness < fitness[i]:\n                    pop[i] = trial\n                    fitness[i] = trial_fitness\n                    success_rate = 0.9 * success_rate + 0.1  # Update success rate\n\n                    if trial_fitness < best_fitness:\n                        best = trial\n                        best_fitness = trial_fitness\n                else:\n                    success_rate *= 0.9  # Decrease success rate if no improvement\n\n        return best", "name": "HybridMC_DE", "description": "Enhanced diversity by introducing an adaptive crossover probability to balance exploration and exploitation.", "configspace": "", "generation": 99, "fitness": 0.28053898252145476, "feedback": "The algorithm HybridMC_DE got an average Area over the convergence curve (AOCC, 1.0 is the best) score of 0.28 with standard deviation 0.23.", "error": "", "parent_id": "509c5031-8f43-4e47-85be-002c7281665c", "metadata": {"aucs": [0.5911471979503964, 0.5911471979503964, 0.5911471979503964, 0.5915599787839061, 0.5915599787839061, 0.5915599787839061, 0.5809183155120993, 0.5809183155120993, 0.5809183155120993, 0.2687004935391434, 0.2687004935391434, 0.2687004935391434, 0.22545899260765878, 0.22545899260765878, 0.22545899260765878, 0.22797319487301693, 0.22797319487301693, 0.22797319487301693, 0.1816686539502964, 0.1816686539502964, 0.1816686539502964, 0.27616349038230315, 0.27616349038230315, 0.27616349038230315, 0.16997143119583957, 0.16997143119583957, 0.16997143119583957, 0.14908100610174502, 0.14908100610174502, 0.14908100610174502, 0.22266209438405815, 0.22266209438405815, 0.22266209438405815, 0.16559343901766244, 0.16559343901766244, 0.16559343901766244, 0.9805614422027322, 0.9805614422027322, 0.9805614422027322, 0.9303737038040222, 0.9303737038040222, 0.9303737038040222, 0.9756245306714405, 0.9756245306714405, 0.9756245306714405, 0.3767118616963132, 0.3767118616963132, 0.3767118616963132, 0.35811740357235844, 0.35811740357235844, 0.35811740357235844, 0.37450066164747364, 0.37450066164747364, 0.37450066164747364, 0.22805644404551761, 0.22805644404551761, 0.22805644404551761, 0.5129212130837825, 0.5129212130837825, 0.5129212130837825, 0.6899407343668981, 0.6899407343668981, 0.6899407343668981, 0.17198566389984538, 0.17198566389984538, 0.17198566389984538, 0.23067712632629422, 0.23067712632629422, 0.23067712632629422, 0.2668665730662739, 0.2668665730662739, 0.2668665730662739, 0.1662982029209783, 0.1662982029209783, 0.1662982029209783, 0.13397274225991296, 0.13397274225991296, 0.13397274225991296, 0.19038406698884625, 0.19038406698884625, 0.19038406698884625, 0.017647809126585923, 0.017647809126585923, 0.017647809126585923, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.013729921153543878, 0.013729921153543878, 0.013729921153543878, 0.04272619603820471, 0.04272619603820471, 0.04272619603820471, 0.08889207943470956, 0.08889207943470956, 0.08889207943470956, 0.19631729901176875, 0.19631729901176875, 0.19631729901176875, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 9.999999999998899e-05, 0.022286443195209227, 0.022286443195209227, 0.022286443195209227, 0.06950803979862141, 0.06950803979862141, 0.06950803979862141, 0.08757988767011271, 0.08757988767011271, 0.08757988767011271, 0.14130114424154705, 0.14130114424154705, 0.14130114424154705, 0.520673487625894, 0.520673487625894, 0.520673487625894, 0.4688139794817314, 0.4688139794817314, 0.4688139794817314, 0.4988489785537026, 0.4988489785537026, 0.4988489785537026, 0.1267633191747103, 0.1267633191747103, 0.1267633191747103, 0.09922345087608375, 0.09922345087608375, 0.09922345087608375, 0.12421430726687865, 0.12421430726687865, 0.12421430726687865, 0.2378188644222019, 0.2378188644222019, 0.2378188644222019, 0.2076665040506307, 0.2076665040506307, 0.2076665040506307, 0.16873725877614365, 0.16873725877614365, 0.16873725877614365, 0.33991511364271587, 0.33991511364271587, 0.33991511364271587, 0.33197718491112016, 0.33197718491112016, 0.33197718491112016, 0.3387152806474676, 0.3387152806474676, 0.3387152806474676, 0.24956643693756586, 0.24956643693756586, 0.24956643693756586, 0.23503785461568028, 0.23503785461568028, 0.23503785461568028, 0.2571444403370122, 0.2571444403370122, 0.2571444403370122, 0.21261795973269848, 0.21261795973269848, 0.21261795973269848, 0.1966705272797733, 0.1966705272797733, 0.1966705272797733, 0.22080189860163157, 0.22080189860163157, 0.22080189860163157, 0.25240785949791367, 0.25240785949791367, 0.25240785949791367, 0.20953858707318007, 0.20953858707318007, 0.20953858707318007, 0.24703456401367796, 0.24703456401367796, 0.24703456401367796, 0.18681116537000486, 0.18681116537000486, 0.18681116537000486, 0.8261013374428371, 0.8261013374428371, 0.8261013374428371, 0.8161769398799791, 0.8161769398799791, 0.8161769398799791, 0.6979495231758983, 0.6979495231758983, 0.6979495231758983, 0.1687792037712358, 0.1687792037712358, 0.1687792037712358, 0.2139869230396776, 0.2139869230396776, 0.2139869230396776, 0.1811262286638985, 0.1811262286638985, 0.1811262286638985, 0.18702818023907575, 0.18702818023907575, 0.18702818023907575, 0.18019735967624861, 0.18019735967624861, 0.18019735967624861, 0.09210927782626477, 0.09210927782626477, 0.09210927782626477, 0.11135228835403099, 0.11135228835403099, 0.11135228835403099, 0.0748209780660607, 0.0748209780660607, 0.0748209780660607]}, "mutation_prompt": null}
